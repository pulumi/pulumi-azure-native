// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization
{
    /// <summary>
    /// Role Assignments
    /// Azure REST API version: 2022-04-01. Prior API version in Azure Native 1.x: 2020-10-01-preview.
    /// 
    /// Other available API versions: 2015-07-01, 2017-10-01-preview, 2020-03-01-preview, 2020-04-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization:RoleAssignment")]
    public partial class RoleAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        /// <summary>
        /// Version of the condition. Currently the only accepted value is '2.0'
        /// </summary>
        [Output("conditionVersion")]
        public Output<string?> ConditionVersion { get; private set; } = null!;

        /// <summary>
        /// Id of the user who created the assignment
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Time it was created
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Id of the delegated managed identity resource
        /// </summary>
        [Output("delegatedManagedIdentityResourceId")]
        public Output<string?> DelegatedManagedIdentityResourceId { get; private set; } = null!;

        /// <summary>
        /// Description of role assignment
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The role assignment name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The principal ID.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The principal type of the assigned principal ID.
        /// </summary>
        [Output("principalType")]
        public Output<string?> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// The role definition ID.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The role assignment scope.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The role assignment type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Id of the user who updated the assignment
        /// </summary>
        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Time it was updated
        /// </summary>
        [Output("updatedOn")]
        public Output<string> UpdatedOn { get; private set; } = null!;


        /// <summary>
        /// Create a RoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleAssignment(string name, RoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:authorization:RoleAssignment", name, args ?? new RoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleAssignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization:RoleAssignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20150701:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20171001preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180101preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20180901preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200301preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200401preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20200801preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20201001preview:RoleAssignment" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20220401:RoleAssignment" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleAssignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RoleAssignment(name, id, options);
        }
    }

    public sealed class RoleAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Version of the condition. Currently the only accepted value is '2.0'
        /// </summary>
        [Input("conditionVersion")]
        public Input<string>? ConditionVersion { get; set; }

        /// <summary>
        /// Id of the delegated managed identity resource
        /// </summary>
        [Input("delegatedManagedIdentityResourceId")]
        public Input<string>? DelegatedManagedIdentityResourceId { get; set; }

        /// <summary>
        /// Description of role assignment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The principal ID.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The principal type of the assigned principal ID.
        /// </summary>
        [Input("principalType")]
        public InputUnion<string, Pulumi.AzureNative.Authorization.PrincipalType>? PrincipalType { get; set; }

        /// <summary>
        /// The name of the role assignment. It can be any valid GUID.
        /// </summary>
        [Input("roleAssignmentName")]
        public Input<string>? RoleAssignmentName { get; set; }

        /// <summary>
        /// The role definition ID.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public RoleAssignmentArgs()
        {
            PrincipalType = "User";
        }
        public static new RoleAssignmentArgs Empty => new RoleAssignmentArgs();
    }
}
