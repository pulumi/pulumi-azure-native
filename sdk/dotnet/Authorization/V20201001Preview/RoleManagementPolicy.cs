// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Authorization.V20201001Preview
{
    /// <summary>
    /// Role management policy
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:authorization/v20201001preview:roleManagementPolicy")]
    public partial class RoleManagementPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The role management policy description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The role management policy display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The readonly computed rule applied to the policy.
        /// </summary>
        [Output("effectiveRules")]
        public Output<ImmutableArray<object>> EffectiveRules { get; private set; } = null!;

        /// <summary>
        /// The role management policy is default policy.
        /// </summary>
        [Output("isOrganizationDefault")]
        public Output<bool?> IsOrganizationDefault { get; private set; } = null!;

        /// <summary>
        /// The last updated date time.
        /// </summary>
        [Output("lastUpdatedDateTime")]
        public Output<string> LastUpdatedDateTime { get; private set; } = null!;

        /// <summary>
        /// The role management policy name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The rule applied to the policy.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<object>> Rules { get; private set; } = null!;

        /// <summary>
        /// The role management policy scope.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The role management policy type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RoleManagementPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleManagementPolicy(string name, RoleManagementPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization/v20201001preview:roleManagementPolicy", name, args ?? new RoleManagementPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleManagementPolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization/v20201001preview:roleManagementPolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleManagementPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleManagementPolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RoleManagementPolicy(name, id, options);
        }
    }

    public sealed class RoleManagementPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The role management policy description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The role management policy display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The role management policy is default policy.
        /// </summary>
        [Input("isOrganizationDefault")]
        public Input<bool>? IsOrganizationDefault { get; set; }

        /// <summary>
        /// The name (guid) of the role management policy to upsert.
        /// </summary>
        [Input("roleManagementPolicyName", required: true)]
        public Input<string> RoleManagementPolicyName { get; set; } = null!;

        [Input("rules")]
        private InputList<object>? _rules;

        /// <summary>
        /// The rule applied to the policy.
        /// </summary>
        public InputList<object> Rules
        {
            get => _rules ?? (_rules = new InputList<object>());
            set => _rules = value;
        }

        /// <summary>
        /// The role management policy scope.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public RoleManagementPolicyArgs()
        {
        }
    }
}
