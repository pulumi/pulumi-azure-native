// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20161201
{
    [Obsolete(@"Version 2016-12-01 will be removed in v2 of the provider.")]
    public static class GetPolicyAssignment
    {
        /// <summary>
        /// The policy assignment.
        /// </summary>
        public static Task<GetPolicyAssignmentResult> InvokeAsync(GetPolicyAssignmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyAssignmentResult>("azure-native:authorization/v20161201:getPolicyAssignment", args ?? new GetPolicyAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// The policy assignment.
        /// </summary>
        public static Output<GetPolicyAssignmentResult> Invoke(GetPolicyAssignmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPolicyAssignmentResult>("azure-native:authorization/v20161201:getPolicyAssignment", args ?? new GetPolicyAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyAssignmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the policy assignment to get.
        /// </summary>
        [Input("policyAssignmentName", required: true)]
        public string PolicyAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the policy assignment.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetPolicyAssignmentArgs()
        {
        }
    }

    public sealed class GetPolicyAssignmentInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the policy assignment to get.
        /// </summary>
        [Input("policyAssignmentName", required: true)]
        public Input<string> PolicyAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the policy assignment.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetPolicyAssignmentInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyAssignmentResult
    {
        /// <summary>
        /// This message will be part of response in case of policy violation.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the policy assignment.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The ID of the policy assignment.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the policy assignment.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Required if a parameter is used in policy rule.
        /// </summary>
        public readonly object? Parameters;
        /// <summary>
        /// The ID of the policy definition.
        /// </summary>
        public readonly string? PolicyDefinitionId;
        /// <summary>
        /// The scope for the policy assignment.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The type of the policy assignment.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetPolicyAssignmentResult(
            string? description,

            string? displayName,

            string id,

            string? name,

            object? parameters,

            string? policyDefinitionId,

            string? scope,

            string? type)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            Name = name;
            Parameters = parameters;
            PolicyDefinitionId = policyDefinitionId;
            Scope = scope;
            Type = type;
        }
    }
}
