// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20220401
{
    public static class GetRoleAssignment
    {
        /// <summary>
        /// Get a role assignment by scope and name.
        /// </summary>
        public static Task<GetRoleAssignmentResult> InvokeAsync(GetRoleAssignmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleAssignmentResult>("azure-native:authorization/v20220401:getRoleAssignment", args ?? new GetRoleAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get a role assignment by scope and name.
        /// </summary>
        public static Output<GetRoleAssignmentResult> Invoke(GetRoleAssignmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentResult>("azure-native:authorization/v20220401:getRoleAssignment", args ?? new GetRoleAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role assignment. It can be any valid GUID.
        /// </summary>
        [Input("roleAssignmentName", required: true)]
        public string RoleAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// Tenant ID for cross-tenant request
        /// </summary>
        [Input("tenantId")]
        public string? TenantId { get; set; }

        public GetRoleAssignmentArgs()
        {
        }
        public static new GetRoleAssignmentArgs Empty => new GetRoleAssignmentArgs();
    }

    public sealed class GetRoleAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role assignment. It can be any valid GUID.
        /// </summary>
        [Input("roleAssignmentName", required: true)]
        public Input<string> RoleAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// Tenant ID for cross-tenant request
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public GetRoleAssignmentInvokeArgs()
        {
        }
        public static new GetRoleAssignmentInvokeArgs Empty => new GetRoleAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleAssignmentResult
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        public readonly string? Condition;
        /// <summary>
        /// Version of the condition. Currently the only accepted value is '2.0'
        /// </summary>
        public readonly string? ConditionVersion;
        /// <summary>
        /// Id of the user who created the assignment
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Time it was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Id of the delegated managed identity resource
        /// </summary>
        public readonly string? DelegatedManagedIdentityResourceId;
        /// <summary>
        /// Description of role assignment
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The role assignment ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role assignment name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The principal ID.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The principal type of the assigned principal ID.
        /// </summary>
        public readonly string? PrincipalType;
        /// <summary>
        /// The role definition ID.
        /// </summary>
        public readonly string RoleDefinitionId;
        /// <summary>
        /// The role assignment scope.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// The role assignment type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Id of the user who updated the assignment
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// Time it was updated
        /// </summary>
        public readonly string UpdatedOn;

        [OutputConstructor]
        private GetRoleAssignmentResult(
            string? condition,

            string? conditionVersion,

            string createdBy,

            string createdOn,

            string? delegatedManagedIdentityResourceId,

            string? description,

            string id,

            string name,

            string principalId,

            string? principalType,

            string roleDefinitionId,

            string scope,

            string type,

            string updatedBy,

            string updatedOn)
        {
            Condition = condition;
            ConditionVersion = conditionVersion;
            CreatedBy = createdBy;
            CreatedOn = createdOn;
            DelegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            Description = description;
            Id = id;
            Name = name;
            PrincipalId = principalId;
            PrincipalType = principalType;
            RoleDefinitionId = roleDefinitionId;
            Scope = scope;
            Type = type;
            UpdatedBy = updatedBy;
            UpdatedOn = updatedOn;
        }
    }
}
