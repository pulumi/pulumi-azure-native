// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Authorization.V20150701
{
    /// <summary>
    /// Role definition.
    /// </summary>
    public partial class RoleDefinition : Pulumi.CustomResource
    {
        /// <summary>
        /// Role definition assignable scopes.
        /// </summary>
        [Output("assignableScopes")]
        public Output<ImmutableArray<string>> AssignableScopes { get; private set; } = null!;

        /// <summary>
        /// The role definition description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The role definition name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Role definition permissions.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.PermissionResponse>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Output("roleName")]
        public Output<string?> RoleName { get; private set; } = null!;

        /// <summary>
        /// The role type.
        /// </summary>
        [Output("roleType")]
        public Output<string?> RoleType { get; private set; } = null!;

        /// <summary>
        /// The role definition type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RoleDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleDefinition(string name, RoleDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization/v20150701:RoleDefinition", name, args ?? new RoleDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization/v20150701:RoleDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:authorization/latest:RoleDefinition"},
                    new Pulumi.Alias { Type = "azure-nextgen:authorization/v20180101preview:RoleDefinition"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RoleDefinition(name, id, options);
        }
    }

    public sealed class RoleDefinitionArgs : Pulumi.ResourceArgs
    {
        [Input("assignableScopes")]
        private InputList<string>? _assignableScopes;

        /// <summary>
        /// Role definition assignable scopes.
        /// </summary>
        public InputList<string> AssignableScopes
        {
            get => _assignableScopes ?? (_assignableScopes = new InputList<string>());
            set => _assignableScopes = value;
        }

        /// <summary>
        /// The role definition description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("permissions")]
        private InputList<Inputs.PermissionArgs>? _permissions;

        /// <summary>
        /// Role definition permissions.
        /// </summary>
        public InputList<Inputs.PermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.PermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the role definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// The role type.
        /// </summary>
        [Input("roleType")]
        public Input<string>? RoleType { get; set; }

        /// <summary>
        /// The scope of the role definition.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public RoleDefinitionArgs()
        {
        }
    }
}
