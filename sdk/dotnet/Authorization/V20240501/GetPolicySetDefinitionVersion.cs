// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20240501
{
    public static class GetPolicySetDefinitionVersion
    {
        /// <summary>
        /// This operation retrieves the policy set definition version in the given subscription with the given name and version.
        /// </summary>
        public static Task<GetPolicySetDefinitionVersionResult> InvokeAsync(GetPolicySetDefinitionVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicySetDefinitionVersionResult>("azure-native:authorization/v20240501:getPolicySetDefinitionVersion", args ?? new GetPolicySetDefinitionVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This operation retrieves the policy set definition version in the given subscription with the given name and version.
        /// </summary>
        public static Output<GetPolicySetDefinitionVersionResult> Invoke(GetPolicySetDefinitionVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicySetDefinitionVersionResult>("azure-native:authorization/v20240501:getPolicySetDefinitionVersion", args ?? new GetPolicySetDefinitionVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicySetDefinitionVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The policy set definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number
        /// </summary>
        [Input("policyDefinitionVersion", required: true)]
        public string PolicyDefinitionVersion { get; set; } = null!;

        /// <summary>
        /// The name of the policy set definition.
        /// </summary>
        [Input("policySetDefinitionName", required: true)]
        public string PolicySetDefinitionName { get; set; } = null!;

        public GetPolicySetDefinitionVersionArgs()
        {
        }
        public static new GetPolicySetDefinitionVersionArgs Empty => new GetPolicySetDefinitionVersionArgs();
    }

    public sealed class GetPolicySetDefinitionVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The policy set definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number
        /// </summary>
        [Input("policyDefinitionVersion", required: true)]
        public Input<string> PolicyDefinitionVersion { get; set; } = null!;

        /// <summary>
        /// The name of the policy set definition.
        /// </summary>
        [Input("policySetDefinitionName", required: true)]
        public Input<string> PolicySetDefinitionName { get; set; } = null!;

        public GetPolicySetDefinitionVersionInvokeArgs()
        {
        }
        public static new GetPolicySetDefinitionVersionInvokeArgs Empty => new GetPolicySetDefinitionVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicySetDefinitionVersionResult
    {
        /// <summary>
        /// The policy set definition description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the policy set definition.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The ID of the policy set definition version.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        public readonly object? Metadata;
        /// <summary>
        /// The name of the policy set definition version.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The policy set definition parameters that can be used in policy definition references.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterDefinitionsValueResponse>? Parameters;
        /// <summary>
        /// The metadata describing groups of policy definition references within the policy set definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyDefinitionGroupResponse> PolicyDefinitionGroups;
        /// <summary>
        /// An array of policy definition references.
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyDefinitionReferenceResponse> PolicyDefinitions;
        /// <summary>
        /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
        /// </summary>
        public readonly string? PolicyType;
        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The policy set definition version in #.#.# format.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetPolicySetDefinitionVersionResult(
            string? description,

            string? displayName,

            string id,

            object? metadata,

            string name,

            ImmutableDictionary<string, Outputs.ParameterDefinitionsValueResponse>? parameters,

            ImmutableArray<Outputs.PolicyDefinitionGroupResponse> policyDefinitionGroups,

            ImmutableArray<Outputs.PolicyDefinitionReferenceResponse> policyDefinitions,

            string? policyType,

            Outputs.SystemDataResponse systemData,

            string type,

            string? version)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            Metadata = metadata;
            Name = name;
            Parameters = parameters;
            PolicyDefinitionGroups = policyDefinitionGroups;
            PolicyDefinitions = policyDefinitions;
            PolicyType = policyType;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
