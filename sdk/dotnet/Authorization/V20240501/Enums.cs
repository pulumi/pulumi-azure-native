// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Authorization.V20240501
{
    /// <summary>
    /// The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable.
    /// </summary>
    [EnumType]
    public readonly struct AssignmentType : IEquatable<AssignmentType>
    {
        private readonly string _value;

        private AssignmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssignmentType NotSpecified { get; } = new AssignmentType("NotSpecified");
        public static AssignmentType System { get; } = new AssignmentType("System");
        public static AssignmentType SystemHidden { get; } = new AssignmentType("SystemHidden");
        public static AssignmentType Custom { get; } = new AssignmentType("Custom");

        public static bool operator ==(AssignmentType left, AssignmentType right) => left.Equals(right);
        public static bool operator !=(AssignmentType left, AssignmentType right) => !left.Equals(right);

        public static explicit operator string(AssignmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssignmentType other && Equals(other);
        public bool Equals(AssignmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
    /// </summary>
    [EnumType]
    public readonly struct EnforcementMode : IEquatable<EnforcementMode>
    {
        private readonly string _value;

        private EnforcementMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The policy effect is enforced during resource creation or update.
        /// </summary>
        public static EnforcementMode Default { get; } = new EnforcementMode("Default");
        /// <summary>
        /// The policy effect is not enforced during resource creation or update.
        /// </summary>
        public static EnforcementMode DoNotEnforce { get; } = new EnforcementMode("DoNotEnforce");

        public static bool operator ==(EnforcementMode left, EnforcementMode right) => left.Equals(right);
        public static bool operator !=(EnforcementMode left, EnforcementMode right) => !left.Equals(right);

        public static explicit operator string(EnforcementMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnforcementMode other && Equals(other);
        public bool Equals(EnforcementMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The override kind.
    /// </summary>
    [EnumType]
    public readonly struct OverrideKind : IEquatable<OverrideKind>
    {
        private readonly string _value;

        private OverrideKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// It will override the policy effect type.
        /// </summary>
        public static OverrideKind PolicyEffect { get; } = new OverrideKind("policyEffect");
        /// <summary>
        /// It will override the definition version property value of the policy assignment.
        /// </summary>
        public static OverrideKind DefinitionVersion { get; } = new OverrideKind("definitionVersion");

        public static bool operator ==(OverrideKind left, OverrideKind right) => left.Equals(right);
        public static bool operator !=(OverrideKind left, OverrideKind right) => !left.Equals(right);

        public static explicit operator string(OverrideKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OverrideKind other && Equals(other);
        public bool Equals(OverrideKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data type of the parameter.
    /// </summary>
    [EnumType]
    public readonly struct ParameterType : IEquatable<ParameterType>
    {
        private readonly string _value;

        private ParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ParameterType String { get; } = new ParameterType("String");
        public static ParameterType Array { get; } = new ParameterType("Array");
        public static ParameterType Object { get; } = new ParameterType("Object");
        public static ParameterType Boolean { get; } = new ParameterType("Boolean");
        public static ParameterType Integer { get; } = new ParameterType("Integer");
        public static ParameterType Float { get; } = new ParameterType("Float");
        public static ParameterType DateTime { get; } = new ParameterType("DateTime");

        public static bool operator ==(ParameterType left, ParameterType right) => left.Equals(right);
        public static bool operator !=(ParameterType left, ParameterType right) => !left.Equals(right);

        public static explicit operator string(ParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ParameterType other && Equals(other);
        public bool Equals(ParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
    /// </summary>
    [EnumType]
    public readonly struct PolicyType : IEquatable<PolicyType>
    {
        private readonly string _value;

        private PolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyType NotSpecified { get; } = new PolicyType("NotSpecified");
        public static PolicyType BuiltIn { get; } = new PolicyType("BuiltIn");
        public static PolicyType Custom { get; } = new PolicyType("Custom");
        public static PolicyType Static { get; } = new PolicyType("Static");

        public static bool operator ==(PolicyType left, PolicyType right) => left.Equals(right);
        public static bool operator !=(PolicyType left, PolicyType right) => !left.Equals(right);

        public static explicit operator string(PolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyType other && Equals(other);
        public bool Equals(PolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates that a system assigned identity is associated with the resource.
        /// </summary>
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        /// <summary>
        /// Indicates that a system assigned identity is associated with the resource.
        /// </summary>
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        /// <summary>
        /// Indicates that no identity is associated with the resource or that the existing identity should be removed.
        /// </summary>
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The selector kind.
    /// </summary>
    [EnumType]
    public readonly struct SelectorKind : IEquatable<SelectorKind>
    {
        private readonly string _value;

        private SelectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The selector kind to filter policies by the resource location.
        /// </summary>
        public static SelectorKind ResourceLocation { get; } = new SelectorKind("resourceLocation");
        /// <summary>
        /// The selector kind to filter policies by the resource type.
        /// </summary>
        public static SelectorKind ResourceType { get; } = new SelectorKind("resourceType");
        /// <summary>
        /// The selector kind to filter policies by the resource without location.
        /// </summary>
        public static SelectorKind ResourceWithoutLocation { get; } = new SelectorKind("resourceWithoutLocation");
        /// <summary>
        /// The selector kind to filter policies by the policy definition reference ID.
        /// </summary>
        public static SelectorKind PolicyDefinitionReferenceId { get; } = new SelectorKind("policyDefinitionReferenceId");

        public static bool operator ==(SelectorKind left, SelectorKind right) => left.Equals(right);
        public static bool operator !=(SelectorKind left, SelectorKind right) => !left.Equals(right);

        public static explicit operator string(SelectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SelectorKind other && Equals(other);
        public bool Equals(SelectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
