// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization
{
    public static class GetPolicyExemption
    {
        /// <summary>
        /// This operation retrieves a single policy exemption, given its name and the scope it was created at.
        /// API Version: 2020-07-01-preview.
        /// </summary>
        public static Task<GetPolicyExemptionResult> InvokeAsync(GetPolicyExemptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyExemptionResult>("azure-native:authorization:getPolicyExemption", args ?? new GetPolicyExemptionArgs(), options.WithDefaults());

        /// <summary>
        /// This operation retrieves a single policy exemption, given its name and the scope it was created at.
        /// API Version: 2020-07-01-preview.
        /// </summary>
        public static Output<GetPolicyExemptionResult> Invoke(GetPolicyExemptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyExemptionResult>("azure-native:authorization:getPolicyExemption", args ?? new GetPolicyExemptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyExemptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the policy exemption to delete.
        /// </summary>
        [Input("policyExemptionName", required: true)]
        public string PolicyExemptionName { get; set; } = null!;

        /// <summary>
        /// The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetPolicyExemptionArgs()
        {
        }
        public static new GetPolicyExemptionArgs Empty => new GetPolicyExemptionArgs();
    }

    public sealed class GetPolicyExemptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the policy exemption to delete.
        /// </summary>
        [Input("policyExemptionName", required: true)]
        public Input<string> PolicyExemptionName { get; set; } = null!;

        /// <summary>
        /// The scope of the policy exemption. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetPolicyExemptionInvokeArgs()
        {
        }
        public static new GetPolicyExemptionInvokeArgs Empty => new GetPolicyExemptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyExemptionResult
    {
        /// <summary>
        /// The ID of the policy exemption.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the policy exemption.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties for the policy exemption.
        /// </summary>
        public readonly Outputs.PolicyExemptionPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource (Microsoft.Authorization/policyExemptions).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPolicyExemptionResult(
            string id,

            string name,

            Outputs.PolicyExemptionPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Id = id;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Type = type;
        }
    }
}
