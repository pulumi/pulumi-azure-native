// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20220501Preview
{
    public static class GetRoleDefinition
    {
        /// <summary>
        /// Get role definition by ID (GUID).
        /// </summary>
        public static Task<GetRoleDefinitionResult> InvokeAsync(GetRoleDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleDefinitionResult>("azure-native:authorization/v20220501preview:getRoleDefinition", args ?? new GetRoleDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Get role definition by ID (GUID).
        /// </summary>
        public static Output<GetRoleDefinitionResult> Invoke(GetRoleDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleDefinitionResult>("azure-native:authorization/v20220501preview:getRoleDefinition", args ?? new GetRoleDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the role definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public string RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetRoleDefinitionArgs()
        {
        }
        public static new GetRoleDefinitionArgs Empty => new GetRoleDefinitionArgs();
    }

    public sealed class GetRoleDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the role definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope of the operation or resource. Valid scopes are: subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetRoleDefinitionInvokeArgs()
        {
        }
        public static new GetRoleDefinitionInvokeArgs Empty => new GetRoleDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleDefinitionResult
    {
        /// <summary>
        /// Role definition assignable scopes.
        /// </summary>
        public readonly ImmutableArray<string> AssignableScopes;
        /// <summary>
        /// Id of the user who created the assignment
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Time it was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The role definition description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The role definition ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role definition name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Role definition permissions.
        /// </summary>
        public readonly ImmutableArray<Outputs.PermissionResponse> Permissions;
        /// <summary>
        /// The role name.
        /// </summary>
        public readonly string? RoleName;
        /// <summary>
        /// The role type.
        /// </summary>
        public readonly string? RoleType;
        /// <summary>
        /// The role definition type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Id of the user who updated the assignment
        /// </summary>
        public readonly string UpdatedBy;
        /// <summary>
        /// Time it was updated
        /// </summary>
        public readonly string UpdatedOn;

        [OutputConstructor]
        private GetRoleDefinitionResult(
            ImmutableArray<string> assignableScopes,

            string createdBy,

            string createdOn,

            string? description,

            string id,

            string name,

            ImmutableArray<Outputs.PermissionResponse> permissions,

            string? roleName,

            string? roleType,

            string type,

            string updatedBy,

            string updatedOn)
        {
            AssignableScopes = assignableScopes;
            CreatedBy = createdBy;
            CreatedOn = createdOn;
            Description = description;
            Id = id;
            Name = name;
            Permissions = permissions;
            RoleName = roleName;
            RoleType = roleType;
            Type = type;
            UpdatedBy = updatedBy;
            UpdatedOn = updatedOn;
        }
    }
}
