// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Authorization
{
    /// <summary>
    /// The recurrence type : weekly, monthly, etc.
    /// </summary>
    [EnumType]
    public readonly struct AccessReviewRecurrencePatternType : IEquatable<AccessReviewRecurrencePatternType>
    {
        private readonly string _value;

        private AccessReviewRecurrencePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessReviewRecurrencePatternType Weekly { get; } = new AccessReviewRecurrencePatternType("weekly");
        public static AccessReviewRecurrencePatternType AbsoluteMonthly { get; } = new AccessReviewRecurrencePatternType("absoluteMonthly");

        public static bool operator ==(AccessReviewRecurrencePatternType left, AccessReviewRecurrencePatternType right) => left.Equals(right);
        public static bool operator !=(AccessReviewRecurrencePatternType left, AccessReviewRecurrencePatternType right) => !left.Equals(right);

        public static explicit operator string(AccessReviewRecurrencePatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessReviewRecurrencePatternType other && Equals(other);
        public bool Equals(AccessReviewRecurrencePatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The recurrence range type. The possible values are: endDate, noEnd, numbered.
    /// </summary>
    [EnumType]
    public readonly struct AccessReviewRecurrenceRangeType : IEquatable<AccessReviewRecurrenceRangeType>
    {
        private readonly string _value;

        private AccessReviewRecurrenceRangeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessReviewRecurrenceRangeType EndDate { get; } = new AccessReviewRecurrenceRangeType("endDate");
        public static AccessReviewRecurrenceRangeType NoEnd { get; } = new AccessReviewRecurrenceRangeType("noEnd");
        public static AccessReviewRecurrenceRangeType Numbered { get; } = new AccessReviewRecurrenceRangeType("numbered");

        public static bool operator ==(AccessReviewRecurrenceRangeType left, AccessReviewRecurrenceRangeType right) => left.Equals(right);
        public static bool operator !=(AccessReviewRecurrenceRangeType left, AccessReviewRecurrenceRangeType right) => !left.Equals(right);

        public static explicit operator string(AccessReviewRecurrenceRangeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessReviewRecurrenceRangeType other && Equals(other);
        public bool Equals(AccessReviewRecurrenceRangeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of rule
    /// </summary>
    [EnumType]
    public readonly struct ApprovalMode : IEquatable<ApprovalMode>
    {
        private readonly string _value;

        private ApprovalMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApprovalMode SingleStage { get; } = new ApprovalMode("SingleStage");
        public static ApprovalMode Serial { get; } = new ApprovalMode("Serial");
        public static ApprovalMode Parallel { get; } = new ApprovalMode("Parallel");
        public static ApprovalMode NoApproval { get; } = new ApprovalMode("NoApproval");

        public static bool operator ==(ApprovalMode left, ApprovalMode right) => left.Equals(right);
        public static bool operator !=(ApprovalMode left, ApprovalMode right) => !left.Equals(right);

        public static explicit operator string(ApprovalMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApprovalMode other && Equals(other);
        public bool Equals(ApprovalMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This specifies the behavior for the autoReview feature when an access review completes.
    /// </summary>
    [EnumType]
    public readonly struct DefaultDecisionType : IEquatable<DefaultDecisionType>
    {
        private readonly string _value;

        private DefaultDecisionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultDecisionType Approve { get; } = new DefaultDecisionType("Approve");
        public static DefaultDecisionType Deny { get; } = new DefaultDecisionType("Deny");
        public static DefaultDecisionType Recommendation { get; } = new DefaultDecisionType("Recommendation");

        public static bool operator ==(DefaultDecisionType left, DefaultDecisionType right) => left.Equals(right);
        public static bool operator !=(DefaultDecisionType left, DefaultDecisionType right) => !left.Equals(right);

        public static explicit operator string(DefaultDecisionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultDecisionType other && Equals(other);
        public bool Equals(DefaultDecisionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
    /// </summary>
    [EnumType]
    public readonly struct EnforcementMode : IEquatable<EnforcementMode>
    {
        private readonly string _value;

        private EnforcementMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The policy effect is enforced during resource creation or update.
        /// </summary>
        public static EnforcementMode Default { get; } = new EnforcementMode("Default");
        /// <summary>
        /// The policy effect is not enforced during resource creation or update.
        /// </summary>
        public static EnforcementMode DoNotEnforce { get; } = new EnforcementMode("DoNotEnforce");

        public static bool operator ==(EnforcementMode left, EnforcementMode right) => left.Equals(right);
        public static bool operator !=(EnforcementMode left, EnforcementMode right) => !left.Equals(right);

        public static explicit operator string(EnforcementMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnforcementMode other && Equals(other);
        public bool Equals(EnforcementMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The policy exemption category. Possible values are Waiver and Mitigated.
    /// </summary>
    [EnumType]
    public readonly struct ExemptionCategory : IEquatable<ExemptionCategory>
    {
        private readonly string _value;

        private ExemptionCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This category of exemptions usually means the scope is not applicable for the policy.
        /// </summary>
        public static ExemptionCategory Waiver { get; } = new ExemptionCategory("Waiver");
        /// <summary>
        /// This category of exemptions usually means the mitigation actions have been applied to the scope.
        /// </summary>
        public static ExemptionCategory Mitigated { get; } = new ExemptionCategory("Mitigated");

        public static bool operator ==(ExemptionCategory left, ExemptionCategory right) => left.Equals(right);
        public static bool operator !=(ExemptionCategory left, ExemptionCategory right) => !left.Equals(right);

        public static explicit operator string(ExemptionCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExemptionCategory other && Equals(other);
        public bool Equals(ExemptionCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
    /// </summary>
    [EnumType]
    public readonly struct LockLevel : IEquatable<LockLevel>
    {
        private readonly string _value;

        private LockLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LockLevel NotSpecified { get; } = new LockLevel("NotSpecified");
        public static LockLevel CanNotDelete { get; } = new LockLevel("CanNotDelete");
        public static LockLevel ReadOnly { get; } = new LockLevel("ReadOnly");

        public static bool operator ==(LockLevel left, LockLevel right) => left.Equals(right);
        public static bool operator !=(LockLevel left, LockLevel right) => !left.Equals(right);

        public static explicit operator string(LockLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LockLevel other && Equals(other);
        public bool Equals(LockLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of notification.
    /// </summary>
    [EnumType]
    public readonly struct NotificationDeliveryMechanism : IEquatable<NotificationDeliveryMechanism>
    {
        private readonly string _value;

        private NotificationDeliveryMechanism(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotificationDeliveryMechanism Email { get; } = new NotificationDeliveryMechanism("Email");

        public static bool operator ==(NotificationDeliveryMechanism left, NotificationDeliveryMechanism right) => left.Equals(right);
        public static bool operator !=(NotificationDeliveryMechanism left, NotificationDeliveryMechanism right) => !left.Equals(right);

        public static explicit operator string(NotificationDeliveryMechanism value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationDeliveryMechanism other && Equals(other);
        public bool Equals(NotificationDeliveryMechanism other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The notification level.
    /// </summary>
    [EnumType]
    public readonly struct NotificationLevel : IEquatable<NotificationLevel>
    {
        private readonly string _value;

        private NotificationLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotificationLevel NONE { get; } = new NotificationLevel("NONE");
        public static NotificationLevel CRITICAL { get; } = new NotificationLevel("CRITICAL");
        public static NotificationLevel ALL { get; } = new NotificationLevel("ALL");

        public static bool operator ==(NotificationLevel left, NotificationLevel right) => left.Equals(right);
        public static bool operator !=(NotificationLevel left, NotificationLevel right) => !left.Equals(right);

        public static explicit operator string(NotificationLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationLevel other && Equals(other);
        public bool Equals(NotificationLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data type of the parameter.
    /// </summary>
    [EnumType]
    public readonly struct ParameterType : IEquatable<ParameterType>
    {
        private readonly string _value;

        private ParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ParameterType String { get; } = new ParameterType("String");
        public static ParameterType Array { get; } = new ParameterType("Array");
        public static ParameterType Object { get; } = new ParameterType("Object");
        public static ParameterType Boolean { get; } = new ParameterType("Boolean");
        public static ParameterType Integer { get; } = new ParameterType("Integer");
        public static ParameterType Float { get; } = new ParameterType("Float");
        public static ParameterType DateTime { get; } = new ParameterType("DateTime");

        public static bool operator ==(ParameterType left, ParameterType right) => left.Equals(right);
        public static bool operator !=(ParameterType left, ParameterType right) => !left.Equals(right);

        public static explicit operator string(ParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ParameterType other && Equals(other);
        public bool Equals(ParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
    /// </summary>
    [EnumType]
    public readonly struct PolicyType : IEquatable<PolicyType>
    {
        private readonly string _value;

        private PolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyType NotSpecified { get; } = new PolicyType("NotSpecified");
        public static PolicyType BuiltIn { get; } = new PolicyType("BuiltIn");
        public static PolicyType Custom { get; } = new PolicyType("Custom");
        public static PolicyType Static { get; } = new PolicyType("Static");

        public static bool operator ==(PolicyType left, PolicyType right) => left.Equals(right);
        public static bool operator !=(PolicyType left, PolicyType right) => !left.Equals(right);

        public static explicit operator string(PolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyType other && Equals(other);
        public bool Equals(PolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The principal type of the assigned principal ID.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType User { get; } = new PrincipalType("User");
        public static PrincipalType Group { get; } = new PrincipalType("Group");
        public static PrincipalType ServicePrincipal { get; } = new PrincipalType("ServicePrincipal");
        public static PrincipalType Unknown { get; } = new PrincipalType("Unknown");
        public static PrincipalType DirectoryRoleTemplate { get; } = new PrincipalType("DirectoryRoleTemplate");
        public static PrincipalType ForeignGroup { get; } = new PrincipalType("ForeignGroup");
        public static PrincipalType Application { get; } = new PrincipalType("Application");
        public static PrincipalType MSI { get; } = new PrincipalType("MSI");
        public static PrincipalType DirectoryObjectOrGroup { get; } = new PrincipalType("DirectoryObjectOrGroup");
        public static PrincipalType Everyone { get; } = new PrincipalType("Everyone");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The recipient type.
    /// </summary>
    [EnumType]
    public readonly struct RecipientType : IEquatable<RecipientType>
    {
        private readonly string _value;

        private RecipientType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecipientType Requestor { get; } = new RecipientType("Requestor");
        public static RecipientType Approver { get; } = new RecipientType("Approver");
        public static RecipientType Admin { get; } = new RecipientType("Admin");

        public static bool operator ==(RecipientType left, RecipientType right) => left.Equals(right);
        public static bool operator !=(RecipientType left, RecipientType right) => !left.Equals(right);

        public static explicit operator string(RecipientType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecipientType other && Equals(other);
        public bool Equals(RecipientType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. This is the only required field when adding a system assigned identity to a resource.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates that a system assigned identity is associated with the resource.
        /// </summary>
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        /// <summary>
        /// Indicates that no identity is associated with the resource or that the existing identity should be removed.
        /// </summary>
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of rule
    /// </summary>
    [EnumType]
    public readonly struct RoleManagementPolicyRuleType : IEquatable<RoleManagementPolicyRuleType>
    {
        private readonly string _value;

        private RoleManagementPolicyRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleManagementPolicyRuleType RoleManagementPolicyApprovalRule { get; } = new RoleManagementPolicyRuleType("RoleManagementPolicyApprovalRule");
        public static RoleManagementPolicyRuleType RoleManagementPolicyAuthenticationContextRule { get; } = new RoleManagementPolicyRuleType("RoleManagementPolicyAuthenticationContextRule");
        public static RoleManagementPolicyRuleType RoleManagementPolicyEnablementRule { get; } = new RoleManagementPolicyRuleType("RoleManagementPolicyEnablementRule");
        public static RoleManagementPolicyRuleType RoleManagementPolicyExpirationRule { get; } = new RoleManagementPolicyRuleType("RoleManagementPolicyExpirationRule");
        public static RoleManagementPolicyRuleType RoleManagementPolicyNotificationRule { get; } = new RoleManagementPolicyRuleType("RoleManagementPolicyNotificationRule");

        public static bool operator ==(RoleManagementPolicyRuleType left, RoleManagementPolicyRuleType right) => left.Equals(right);
        public static bool operator !=(RoleManagementPolicyRuleType left, RoleManagementPolicyRuleType right) => !left.Equals(right);

        public static explicit operator string(RoleManagementPolicyRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleManagementPolicyRuleType other && Equals(other);
        public bool Equals(RoleManagementPolicyRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
