// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20211201Preview
{
    public static class GetScopeAccessReviewScheduleDefinitionById
    {
        /// <summary>
        /// Get single access review definition
        /// </summary>
        public static Task<GetScopeAccessReviewScheduleDefinitionByIdResult> InvokeAsync(GetScopeAccessReviewScheduleDefinitionByIdArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScopeAccessReviewScheduleDefinitionByIdResult>("azure-native:authorization/v20211201preview:getScopeAccessReviewScheduleDefinitionById", args ?? new GetScopeAccessReviewScheduleDefinitionByIdArgs(), options.WithDefaults());

        /// <summary>
        /// Get single access review definition
        /// </summary>
        public static Output<GetScopeAccessReviewScheduleDefinitionByIdResult> Invoke(GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopeAccessReviewScheduleDefinitionByIdResult>("azure-native:authorization/v20211201preview:getScopeAccessReviewScheduleDefinitionById", args ?? new GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get single access review definition
        /// </summary>
        public static Output<GetScopeAccessReviewScheduleDefinitionByIdResult> Invoke(GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopeAccessReviewScheduleDefinitionByIdResult>("azure-native:authorization/v20211201preview:getScopeAccessReviewScheduleDefinitionById", args ?? new GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScopeAccessReviewScheduleDefinitionByIdArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the access review schedule definition.
        /// </summary>
        [Input("scheduleDefinitionId", required: true)]
        public string ScheduleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope of the resource.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetScopeAccessReviewScheduleDefinitionByIdArgs()
        {
        }
        public static new GetScopeAccessReviewScheduleDefinitionByIdArgs Empty => new GetScopeAccessReviewScheduleDefinitionByIdArgs();
    }

    public sealed class GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the access review schedule definition.
        /// </summary>
        [Input("scheduleDefinitionId", required: true)]
        public Input<string> ScheduleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The scope of the resource.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs()
        {
        }
        public static new GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs Empty => new GetScopeAccessReviewScheduleDefinitionByIdInvokeArgs();
    }


    [OutputType]
    public sealed class GetScopeAccessReviewScheduleDefinitionByIdResult
    {
        /// <summary>
        /// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
        /// </summary>
        public readonly bool? AutoApplyDecisionsEnabled;
        /// <summary>
        /// This is the collection of backup reviewers.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessReviewReviewerResponse> BackupReviewers;
        /// <summary>
        /// This specifies the behavior for the autoReview feature when an access review completes.
        /// </summary>
        public readonly string? DefaultDecision;
        /// <summary>
        /// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        /// </summary>
        public readonly bool? DefaultDecisionEnabled;
        /// <summary>
        /// The description provided by the access review creator and visible to admins.
        /// </summary>
        public readonly string? DescriptionForAdmins;
        /// <summary>
        /// The description provided by the access review creator to be shown to reviewers.
        /// </summary>
        public readonly string? DescriptionForReviewers;
        /// <summary>
        /// The display name for the schedule definition.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The access review schedule definition id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The duration in days for an instance.
        /// </summary>
        public readonly int? InstanceDurationInDays;
        /// <summary>
        /// This is the collection of instances returned when one does an expand on it.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessReviewInstanceResponse> Instances;
        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        /// </summary>
        public readonly bool? JustificationRequiredOnApproval;
        /// <summary>
        /// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        /// </summary>
        public readonly bool? MailNotificationsEnabled;
        /// <summary>
        /// The access review schedule definition unique id.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The identity id
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The identity display name
        /// </summary>
        public readonly string PrincipalName;
        /// <summary>
        /// The identity type : user/servicePrincipal
        /// </summary>
        public readonly string PrincipalType;
        /// <summary>
        /// Access Review schedule definition recurrence range.
        /// </summary>
        public readonly Outputs.AccessReviewRecurrenceRangeResponse? Range;
        /// <summary>
        /// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        /// </summary>
        public readonly string? RecommendationLookBackDuration;
        /// <summary>
        /// Flag to indicate whether showing recommendations to reviewers is enabled.
        /// </summary>
        public readonly bool? RecommendationsEnabled;
        /// <summary>
        /// Flag to indicate whether sending reminder emails to reviewers are enabled.
        /// </summary>
        public readonly bool? ReminderNotificationsEnabled;
        /// <summary>
        /// This is the collection of reviewers.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessReviewReviewerResponse> Reviewers;
        /// <summary>
        /// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
        /// </summary>
        public readonly string ReviewersType;
        /// <summary>
        /// This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
        /// </summary>
        public readonly Outputs.AccessReviewScopeResponse Scope;
        /// <summary>
        /// This read-only field specifies the status of an accessReview.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user principal name(if valid)
        /// </summary>
        public readonly string UserPrincipalName;

        [OutputConstructor]
        private GetScopeAccessReviewScheduleDefinitionByIdResult(
            bool? autoApplyDecisionsEnabled,

            ImmutableArray<Outputs.AccessReviewReviewerResponse> backupReviewers,

            string? defaultDecision,

            bool? defaultDecisionEnabled,

            string? descriptionForAdmins,

            string? descriptionForReviewers,

            string? displayName,

            string id,

            int? instanceDurationInDays,

            ImmutableArray<Outputs.AccessReviewInstanceResponse> instances,

            int? interval,

            bool? justificationRequiredOnApproval,

            bool? mailNotificationsEnabled,

            string name,

            string principalId,

            string principalName,

            string principalType,

            Outputs.AccessReviewRecurrenceRangeResponse? range,

            string? recommendationLookBackDuration,

            bool? recommendationsEnabled,

            bool? reminderNotificationsEnabled,

            ImmutableArray<Outputs.AccessReviewReviewerResponse> reviewers,

            string reviewersType,

            Outputs.AccessReviewScopeResponse scope,

            string status,

            string type,

            string userPrincipalName)
        {
            AutoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
            BackupReviewers = backupReviewers;
            DefaultDecision = defaultDecision;
            DefaultDecisionEnabled = defaultDecisionEnabled;
            DescriptionForAdmins = descriptionForAdmins;
            DescriptionForReviewers = descriptionForReviewers;
            DisplayName = displayName;
            Id = id;
            InstanceDurationInDays = instanceDurationInDays;
            Instances = instances;
            Interval = interval;
            JustificationRequiredOnApproval = justificationRequiredOnApproval;
            MailNotificationsEnabled = mailNotificationsEnabled;
            Name = name;
            PrincipalId = principalId;
            PrincipalName = principalName;
            PrincipalType = principalType;
            Range = range;
            RecommendationLookBackDuration = recommendationLookBackDuration;
            RecommendationsEnabled = recommendationsEnabled;
            ReminderNotificationsEnabled = reminderNotificationsEnabled;
            Reviewers = reviewers;
            ReviewersType = reviewersType;
            Scope = scope;
            Status = status;
            Type = type;
            UserPrincipalName = userPrincipalName;
        }
    }
}
