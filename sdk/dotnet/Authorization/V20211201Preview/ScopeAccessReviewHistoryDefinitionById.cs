// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20211201Preview
{
    /// <summary>
    /// Access Review History Definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization/v20211201preview:ScopeAccessReviewHistoryDefinitionById")]
    public partial class ScopeAccessReviewHistoryDefinitionById : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date time when history definition was created
        /// </summary>
        [Output("createdDateTime")]
        public Output<string> CreatedDateTime { get; private set; } = null!;

        /// <summary>
        /// Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
        /// </summary>
        [Output("decisions")]
        public Output<ImmutableArray<string>> Decisions { get; private set; } = null!;

        /// <summary>
        /// The display name for the history definition.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The DateTime when the review is scheduled to end. Required if type is endDate
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// Set of access review history instances for this history definition.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<Outputs.AccessReviewHistoryInstanceResponse>> Instances { get; private set; } = null!;

        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Output("interval")]
        public Output<int?> Interval { get; private set; } = null!;

        /// <summary>
        /// The access review history definition unique id.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Output("numberOfOccurrences")]
        public Output<int?> NumberOfOccurrences { get; private set; } = null!;

        /// <summary>
        /// The identity id
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The identity display name
        /// </summary>
        [Output("principalName")]
        public Output<string> PrincipalName { get; private set; } = null!;

        /// <summary>
        /// The identity type : user/servicePrincipal
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
        /// </summary>
        [Output("reviewHistoryPeriodEndDateTime")]
        public Output<string> ReviewHistoryPeriodEndDateTime { get; private set; } = null!;

        /// <summary>
        /// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
        /// </summary>
        [Output("reviewHistoryPeriodStartDateTime")]
        public Output<string> ReviewHistoryPeriodStartDateTime { get; private set; } = null!;

        /// <summary>
        /// A collection of scopes used when selecting review history data
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<Outputs.AccessReviewScopeResponse>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Output("startDate")]
        public Output<string?> StartDate { get; private set; } = null!;

        /// <summary>
        /// This read-only field specifies the of the requested review history data. This is either requested, in-progress, done or error.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The user principal name(if valid)
        /// </summary>
        [Output("userPrincipalName")]
        public Output<string> UserPrincipalName { get; private set; } = null!;


        /// <summary>
        /// Create a ScopeAccessReviewHistoryDefinitionById resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScopeAccessReviewHistoryDefinitionById(string name, ScopeAccessReviewHistoryDefinitionByIdArgs args, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20211201preview:ScopeAccessReviewHistoryDefinitionById", name, args ?? new ScopeAccessReviewHistoryDefinitionByIdArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScopeAccessReviewHistoryDefinitionById(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20211201preview:ScopeAccessReviewHistoryDefinitionById", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization:ScopeAccessReviewHistoryDefinitionById"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScopeAccessReviewHistoryDefinitionById resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScopeAccessReviewHistoryDefinitionById Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ScopeAccessReviewHistoryDefinitionById(name, id, options);
        }
    }

    public sealed class ScopeAccessReviewHistoryDefinitionByIdArgs : global::Pulumi.ResourceArgs
    {
        [Input("decisions")]
        private InputList<Union<string, Pulumi.AzureNative.Authorization.V20211201Preview.AccessReviewResult>>? _decisions;

        /// <summary>
        /// Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.Authorization.V20211201Preview.AccessReviewResult>> Decisions
        {
            get => _decisions ?? (_decisions = new InputList<Union<string, Pulumi.AzureNative.Authorization.V20211201Preview.AccessReviewResult>>());
            set => _decisions = value;
        }

        /// <summary>
        /// The display name for the history definition.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The DateTime when the review is scheduled to end. Required if type is endDate
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// The id of the access review history definition.
        /// </summary>
        [Input("historyDefinitionId")]
        public Input<string>? HistoryDefinitionId { get; set; }

        [Input("instances")]
        private InputList<Inputs.AccessReviewHistoryInstanceArgs>? _instances;

        /// <summary>
        /// Set of access review history instances for this history definition.
        /// </summary>
        public InputList<Inputs.AccessReviewHistoryInstanceArgs> Instances
        {
            get => _instances ?? (_instances = new InputList<Inputs.AccessReviewHistoryInstanceArgs>());
            set => _instances = value;
        }

        /// <summary>
        /// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// The number of times to repeat the access review. Required and must be positive if type is numbered.
        /// </summary>
        [Input("numberOfOccurrences")]
        public Input<int>? NumberOfOccurrences { get; set; }

        /// <summary>
        /// The scope of the resource.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        [Input("scopes")]
        private InputList<Inputs.AccessReviewScopeArgs>? _scopes;

        /// <summary>
        /// A collection of scopes used when selecting review history data
        /// </summary>
        public InputList<Inputs.AccessReviewScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.AccessReviewScopeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The recurrence range type. The possible values are: endDate, noEnd, numbered.
        /// </summary>
        [Input("type")]
        public InputUnion<string, Pulumi.AzureNative.Authorization.V20211201Preview.AccessReviewRecurrenceRangeType>? Type { get; set; }

        public ScopeAccessReviewHistoryDefinitionByIdArgs()
        {
        }
        public static new ScopeAccessReviewHistoryDefinitionByIdArgs Empty => new ScopeAccessReviewHistoryDefinitionByIdArgs();
    }
}
