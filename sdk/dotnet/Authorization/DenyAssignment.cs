// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Authorization
{
    /// <summary>
    /// Deny Assignment
    /// API Version: 2020-03-01-preview.
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:authorization:DenyAssignment")]
    public partial class DenyAssignment : Pulumi.CustomResource
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        [Output("conditionVersion")]
        public Output<string?> ConditionVersion { get; private set; } = null!;

        /// <summary>
        /// Id of the user who created the assignment
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Time it was created
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The display name of the deny assignment.
        /// </summary>
        [Output("denyAssignmentName")]
        public Output<string?> DenyAssignmentName { get; private set; } = null!;

        /// <summary>
        /// The description of the deny assignment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Output("doNotApplyToChildScopes")]
        public Output<bool?> DoNotApplyToChildScopes { get; private set; } = null!;

        /// <summary>
        /// Array of principals to which the deny assignment does not apply.
        /// </summary>
        [Output("excludePrincipals")]
        public Output<ImmutableArray<Outputs.PrincipalResponse>> ExcludePrincipals { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Output("isSystemProtected")]
        public Output<bool?> IsSystemProtected { get; private set; } = null!;

        /// <summary>
        /// The deny assignment name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of permissions that are denied by the deny assignment.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.PermissionResponse>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Array of principals to which the deny assignment applies.
        /// </summary>
        [Output("principals")]
        public Output<ImmutableArray<Outputs.PrincipalResponse>> Principals { get; private set; } = null!;

        /// <summary>
        /// The deny assignment scope.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The deny assignment type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Id of the user who updated the assignment
        /// </summary>
        [Output("updatedBy")]
        public Output<string> UpdatedBy { get; private set; } = null!;

        /// <summary>
        /// Time it was updated
        /// </summary>
        [Output("updatedOn")]
        public Output<string> UpdatedOn { get; private set; } = null!;


        /// <summary>
        /// Create a DenyAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DenyAssignment(string name, DenyAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization:DenyAssignment", name, args ?? new DenyAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DenyAssignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:authorization:DenyAssignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:authorization/v20200301preview:DenyAssignment"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DenyAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DenyAssignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DenyAssignment(name, id, options);
        }
    }

    public sealed class DenyAssignmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        [Input("conditionVersion")]
        public Input<string>? ConditionVersion { get; set; }

        /// <summary>
        /// The display name of the deny assignment.
        /// </summary>
        [Input("denyAssignmentName")]
        public Input<string>? DenyAssignmentName { get; set; }

        /// <summary>
        /// The description of the deny assignment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Determines if the deny assignment applies to child scopes. Default value is false.
        /// </summary>
        [Input("doNotApplyToChildScopes")]
        public Input<bool>? DoNotApplyToChildScopes { get; set; }

        [Input("excludePrincipals")]
        private InputList<Inputs.PrincipalArgs>? _excludePrincipals;

        /// <summary>
        /// Array of principals to which the deny assignment does not apply.
        /// </summary>
        public InputList<Inputs.PrincipalArgs> ExcludePrincipals
        {
            get => _excludePrincipals ?? (_excludePrincipals = new InputList<Inputs.PrincipalArgs>());
            set => _excludePrincipals = value;
        }

        /// <summary>
        /// Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        /// </summary>
        [Input("isSystemProtected")]
        public Input<bool>? IsSystemProtected { get; set; }

        [Input("permissions", required: true)]
        private InputList<Inputs.PermissionArgs>? _permissions;

        /// <summary>
        /// An array of permissions that are denied by the deny assignment.
        /// </summary>
        public InputList<Inputs.PermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.PermissionArgs>());
            set => _permissions = value;
        }

        [Input("principals", required: true)]
        private InputList<Inputs.PrincipalArgs>? _principals;

        /// <summary>
        /// Array of principals to which the deny assignment applies.
        /// </summary>
        public InputList<Inputs.PrincipalArgs> Principals
        {
            get => _principals ?? (_principals = new InputList<Inputs.PrincipalArgs>());
            set => _principals = value;
        }

        /// <summary>
        /// The deny assignment scope.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public DenyAssignmentArgs()
        {
        }
    }
}
