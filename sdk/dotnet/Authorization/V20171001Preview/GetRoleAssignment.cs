// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20171001Preview
{
    public static class GetRoleAssignment
    {
        /// <summary>
        /// Get the specified role assignment.
        /// </summary>
        public static Task<GetRoleAssignmentResult> InvokeAsync(GetRoleAssignmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleAssignmentResult>("azure-native:authorization/v20171001preview:getRoleAssignment", args ?? new GetRoleAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified role assignment.
        /// </summary>
        public static Output<GetRoleAssignmentResult> Invoke(GetRoleAssignmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleAssignmentResult>("azure-native:authorization/v20171001preview:getRoleAssignment", args ?? new GetRoleAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role assignment to get.
        /// </summary>
        [Input("roleAssignmentName", required: true)]
        public string RoleAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the role assignment.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetRoleAssignmentArgs()
        {
        }
        public static new GetRoleAssignmentArgs Empty => new GetRoleAssignmentArgs();
    }

    public sealed class GetRoleAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the role assignment to get.
        /// </summary>
        [Input("roleAssignmentName", required: true)]
        public Input<string> RoleAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the role assignment.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetRoleAssignmentInvokeArgs()
        {
        }
        public static new GetRoleAssignmentInvokeArgs Empty => new GetRoleAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleAssignmentResult
    {
        /// <summary>
        /// The Delegation flag for the role assignment
        /// </summary>
        public readonly bool? CanDelegate;
        /// <summary>
        /// The role assignment ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role assignment name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The principal ID.
        /// </summary>
        public readonly string? PrincipalId;
        /// <summary>
        /// The role definition ID.
        /// </summary>
        public readonly string? RoleDefinitionId;
        /// <summary>
        /// The role assignment scope.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The role assignment type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRoleAssignmentResult(
            bool? canDelegate,

            string id,

            string name,

            string? principalId,

            string? roleDefinitionId,

            string? scope,

            string type)
        {
            CanDelegate = canDelegate;
            Id = id;
            Name = name;
            PrincipalId = principalId;
            RoleDefinitionId = roleDefinitionId;
            Scope = scope;
            Type = type;
        }
    }
}
