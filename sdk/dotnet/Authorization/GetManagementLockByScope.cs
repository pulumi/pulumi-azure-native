// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Authorization
{
    public static class GetManagementLockByScope
    {
        public static Task<GetManagementLockByScopeResult> InvokeAsync(GetManagementLockByScopeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagementLockByScopeResult>("azurerm:authorization:getManagementLockByScope", args ?? new GetManagementLockByScopeArgs(), options.WithVersion());
    }


    public sealed class GetManagementLockByScopeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of lock.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The scope for the lock. 
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetManagementLockByScopeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagementLockByScopeResult
    {
        /// <summary>
        /// The name of the lock.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The properties of the lock.
        /// </summary>
        public readonly Outputs.ManagementLockPropertiesResponseResult Properties;
        /// <summary>
        /// The resource type of the lock - Microsoft.Authorization/locks.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagementLockByScopeResult(
            string name,

            Outputs.ManagementLockPropertiesResponseResult properties,

            string type)
        {
            Name = name;
            Properties = properties;
            Type = type;
        }
    }
}
