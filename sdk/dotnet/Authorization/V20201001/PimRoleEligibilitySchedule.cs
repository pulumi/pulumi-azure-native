// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20201001
{
    /// <summary>
    /// Role Eligibility schedule request
    /// </summary>
    [AzureNativeResourceType("azure-native:authorization/v20201001:PimRoleEligibilitySchedule")]
    public partial class PimRoleEligibilitySchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The approvalId of the role eligibility schedule request.
        /// </summary>
        [Output("approvalId")]
        public Output<string> ApprovalId { get; private set; } = null!;

        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        [Output("conditionVersion")]
        public Output<string?> ConditionVersion { get; private set; } = null!;

        /// <summary>
        /// DateTime when role eligibility schedule request was created
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Additional properties of principal, scope and role definition
        /// </summary>
        [Output("expandedProperties")]
        public Output<Outputs.ExpandedPropertiesResponse> ExpandedProperties { get; private set; } = null!;

        /// <summary>
        /// Justification for the role eligibility
        /// </summary>
        [Output("justification")]
        public Output<string?> Justification { get; private set; } = null!;

        /// <summary>
        /// The role eligibility schedule request name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The principal ID.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The principal type of the assigned principal ID.
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
        /// </summary>
        [Output("requestType")]
        public Output<string> RequestType { get; private set; } = null!;

        /// <summary>
        /// Id of the user who created this request
        /// </summary>
        [Output("requestorId")]
        public Output<string> RequestorId { get; private set; } = null!;

        /// <summary>
        /// The role definition ID.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// Schedule info of the role eligibility schedule
        /// </summary>
        [Output("scheduleInfo")]
        public Output<Outputs.RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo?> ScheduleInfo { get; private set; } = null!;

        /// <summary>
        /// The role eligibility schedule request scope.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The status of the role eligibility schedule request.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The resultant role eligibility schedule id or the role eligibility schedule id being updated
        /// </summary>
        [Output("targetRoleEligibilityScheduleId")]
        public Output<string?> TargetRoleEligibilityScheduleId { get; private set; } = null!;

        /// <summary>
        /// The role eligibility schedule instance id being updated
        /// </summary>
        [Output("targetRoleEligibilityScheduleInstanceId")]
        public Output<string?> TargetRoleEligibilityScheduleInstanceId { get; private set; } = null!;

        /// <summary>
        /// Ticket Info of the role eligibility
        /// </summary>
        [Output("ticketInfo")]
        public Output<Outputs.RoleEligibilityScheduleRequestPropertiesResponseTicketInfo?> TicketInfo { get; private set; } = null!;

        /// <summary>
        /// The role eligibility schedule request type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PimRoleEligibilitySchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PimRoleEligibilitySchedule(string name, PimRoleEligibilityScheduleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20201001:PimRoleEligibilitySchedule", name, args ?? new PimRoleEligibilityScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PimRoleEligibilitySchedule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:authorization/v20201001:PimRoleEligibilitySchedule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20201001preview:PimRoleEligibilitySchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20220401preview:PimRoleEligibilitySchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20240201preview:PimRoleEligibilitySchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization/v20240901preview:PimRoleEligibilitySchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:authorization:PimRoleEligibilitySchedule" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PimRoleEligibilitySchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PimRoleEligibilitySchedule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PimRoleEligibilitySchedule(name, id, options);
        }
    }

    public sealed class PimRoleEligibilityScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        [Input("conditionVersion")]
        public Input<string>? ConditionVersion { get; set; }

        /// <summary>
        /// Justification for the role eligibility
        /// </summary>
        [Input("justification")]
        public Input<string>? Justification { get; set; }

        /// <summary>
        /// The principal ID.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
        /// </summary>
        [Input("requestType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Authorization.V20201001.RequestType> RequestType { get; set; } = null!;

        /// <summary>
        /// The role definition ID.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The name of the role eligibility to create. It can be any valid GUID.
        /// </summary>
        [Input("roleEligibilityScheduleRequestName")]
        public Input<string>? RoleEligibilityScheduleRequestName { get; set; }

        /// <summary>
        /// Schedule info of the role eligibility schedule
        /// </summary>
        [Input("scheduleInfo")]
        public Input<Inputs.RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs>? ScheduleInfo { get; set; }

        /// <summary>
        /// The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The resultant role eligibility schedule id or the role eligibility schedule id being updated
        /// </summary>
        [Input("targetRoleEligibilityScheduleId")]
        public Input<string>? TargetRoleEligibilityScheduleId { get; set; }

        /// <summary>
        /// The role eligibility schedule instance id being updated
        /// </summary>
        [Input("targetRoleEligibilityScheduleInstanceId")]
        public Input<string>? TargetRoleEligibilityScheduleInstanceId { get; set; }

        /// <summary>
        /// Ticket Info of the role eligibility
        /// </summary>
        [Input("ticketInfo")]
        public Input<Inputs.RoleEligibilityScheduleRequestPropertiesTicketInfoArgs>? TicketInfo { get; set; }

        public PimRoleEligibilityScheduleArgs()
        {
        }
        public static new PimRoleEligibilityScheduleArgs Empty => new PimRoleEligibilityScheduleArgs();
    }
}
