// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20201001
{
    public static class GetPimRoleEligibilitySchedule
    {
        /// <summary>
        /// Get the specified role eligibility schedule request.
        /// </summary>
        public static Task<GetPimRoleEligibilityScheduleResult> InvokeAsync(GetPimRoleEligibilityScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPimRoleEligibilityScheduleResult>("azure-native:authorization/v20201001:getPimRoleEligibilitySchedule", args ?? new GetPimRoleEligibilityScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified role eligibility schedule request.
        /// </summary>
        public static Output<GetPimRoleEligibilityScheduleResult> Invoke(GetPimRoleEligibilityScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPimRoleEligibilityScheduleResult>("azure-native:authorization/v20201001:getPimRoleEligibilitySchedule", args ?? new GetPimRoleEligibilityScheduleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified role eligibility schedule request.
        /// </summary>
        public static Output<GetPimRoleEligibilityScheduleResult> Invoke(GetPimRoleEligibilityScheduleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPimRoleEligibilityScheduleResult>("azure-native:authorization/v20201001:getPimRoleEligibilitySchedule", args ?? new GetPimRoleEligibilityScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPimRoleEligibilityScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name (guid) of the role eligibility schedule request to get.
        /// </summary>
        [Input("roleEligibilityScheduleRequestName", required: true)]
        public string RoleEligibilityScheduleRequestName { get; set; } = null!;

        /// <summary>
        /// The scope of the role eligibility schedule request.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetPimRoleEligibilityScheduleArgs()
        {
        }
        public static new GetPimRoleEligibilityScheduleArgs Empty => new GetPimRoleEligibilityScheduleArgs();
    }

    public sealed class GetPimRoleEligibilityScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name (guid) of the role eligibility schedule request to get.
        /// </summary>
        [Input("roleEligibilityScheduleRequestName", required: true)]
        public Input<string> RoleEligibilityScheduleRequestName { get; set; } = null!;

        /// <summary>
        /// The scope of the role eligibility schedule request.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetPimRoleEligibilityScheduleInvokeArgs()
        {
        }
        public static new GetPimRoleEligibilityScheduleInvokeArgs Empty => new GetPimRoleEligibilityScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetPimRoleEligibilityScheduleResult
    {
        /// <summary>
        /// The approvalId of the role eligibility schedule request.
        /// </summary>
        public readonly string ApprovalId;
        /// <summary>
        /// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        /// </summary>
        public readonly string? Condition;
        /// <summary>
        /// Version of the condition. Currently accepted value is '2.0'
        /// </summary>
        public readonly string? ConditionVersion;
        /// <summary>
        /// DateTime when role eligibility schedule request was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Additional properties of principal, scope and role definition
        /// </summary>
        public readonly Outputs.ExpandedPropertiesResponse ExpandedProperties;
        /// <summary>
        /// The role eligibility schedule request ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Justification for the role eligibility
        /// </summary>
        public readonly string? Justification;
        /// <summary>
        /// The role eligibility schedule request name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The principal ID.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The principal type of the assigned principal ID.
        /// </summary>
        public readonly string PrincipalType;
        /// <summary>
        /// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
        /// </summary>
        public readonly string RequestType;
        /// <summary>
        /// Id of the user who created this request
        /// </summary>
        public readonly string RequestorId;
        /// <summary>
        /// The role definition ID.
        /// </summary>
        public readonly string RoleDefinitionId;
        /// <summary>
        /// Schedule info of the role eligibility schedule
        /// </summary>
        public readonly Outputs.RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo? ScheduleInfo;
        /// <summary>
        /// The role eligibility schedule request scope.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// The status of the role eligibility schedule request.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The resultant role eligibility schedule id or the role eligibility schedule id being updated
        /// </summary>
        public readonly string? TargetRoleEligibilityScheduleId;
        /// <summary>
        /// The role eligibility schedule instance id being updated
        /// </summary>
        public readonly string? TargetRoleEligibilityScheduleInstanceId;
        /// <summary>
        /// Ticket Info of the role eligibility
        /// </summary>
        public readonly Outputs.RoleEligibilityScheduleRequestPropertiesResponseTicketInfo? TicketInfo;
        /// <summary>
        /// The role eligibility schedule request type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPimRoleEligibilityScheduleResult(
            string approvalId,

            string? condition,

            string? conditionVersion,

            string createdOn,

            Outputs.ExpandedPropertiesResponse expandedProperties,

            string id,

            string? justification,

            string name,

            string principalId,

            string principalType,

            string requestType,

            string requestorId,

            string roleDefinitionId,

            Outputs.RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo? scheduleInfo,

            string scope,

            string status,

            string? targetRoleEligibilityScheduleId,

            string? targetRoleEligibilityScheduleInstanceId,

            Outputs.RoleEligibilityScheduleRequestPropertiesResponseTicketInfo? ticketInfo,

            string type)
        {
            ApprovalId = approvalId;
            Condition = condition;
            ConditionVersion = conditionVersion;
            CreatedOn = createdOn;
            ExpandedProperties = expandedProperties;
            Id = id;
            Justification = justification;
            Name = name;
            PrincipalId = principalId;
            PrincipalType = principalType;
            RequestType = requestType;
            RequestorId = requestorId;
            RoleDefinitionId = roleDefinitionId;
            ScheduleInfo = scheduleInfo;
            Scope = scope;
            Status = status;
            TargetRoleEligibilityScheduleId = targetRoleEligibilityScheduleId;
            TargetRoleEligibilityScheduleInstanceId = targetRoleEligibilityScheduleInstanceId;
            TicketInfo = ticketInfo;
            Type = type;
        }
    }
}
