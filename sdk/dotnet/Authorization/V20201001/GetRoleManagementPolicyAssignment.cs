// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Authorization.V20201001
{
    public static class GetRoleManagementPolicyAssignment
    {
        /// <summary>
        /// Get the specified role management policy assignment for a resource scope
        /// </summary>
        public static Task<GetRoleManagementPolicyAssignmentResult> InvokeAsync(GetRoleManagementPolicyAssignmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleManagementPolicyAssignmentResult>("azure-native:authorization/v20201001:getRoleManagementPolicyAssignment", args ?? new GetRoleManagementPolicyAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified role management policy assignment for a resource scope
        /// </summary>
        public static Output<GetRoleManagementPolicyAssignmentResult> Invoke(GetRoleManagementPolicyAssignmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleManagementPolicyAssignmentResult>("azure-native:authorization/v20201001:getRoleManagementPolicyAssignment", args ?? new GetRoleManagementPolicyAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleManagementPolicyAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of format {guid_guid} the role management policy assignment to get.
        /// </summary>
        [Input("roleManagementPolicyAssignmentName", required: true)]
        public string RoleManagementPolicyAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the role management policy.
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetRoleManagementPolicyAssignmentArgs()
        {
        }
        public static new GetRoleManagementPolicyAssignmentArgs Empty => new GetRoleManagementPolicyAssignmentArgs();
    }

    public sealed class GetRoleManagementPolicyAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of format {guid_guid} the role management policy assignment to get.
        /// </summary>
        [Input("roleManagementPolicyAssignmentName", required: true)]
        public Input<string> RoleManagementPolicyAssignmentName { get; set; } = null!;

        /// <summary>
        /// The scope of the role management policy.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetRoleManagementPolicyAssignmentInvokeArgs()
        {
        }
        public static new GetRoleManagementPolicyAssignmentInvokeArgs Empty => new GetRoleManagementPolicyAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleManagementPolicyAssignmentResult
    {
        /// <summary>
        /// The readonly computed rule applied to the policy.
        /// </summary>
        public readonly ImmutableArray<object> EffectiveRules;
        /// <summary>
        /// The role management policy Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role management policy name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Additional properties of scope, role definition and policy
        /// </summary>
        public readonly Outputs.PolicyAssignmentPropertiesResponse PolicyAssignmentProperties;
        /// <summary>
        /// The policy id role management policy assignment.
        /// </summary>
        public readonly string? PolicyId;
        /// <summary>
        /// The role definition of management policy assignment.
        /// </summary>
        public readonly string? RoleDefinitionId;
        /// <summary>
        /// The role management policy scope.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The role management policy type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRoleManagementPolicyAssignmentResult(
            ImmutableArray<object> effectiveRules,

            string id,

            string name,

            Outputs.PolicyAssignmentPropertiesResponse policyAssignmentProperties,

            string? policyId,

            string? roleDefinitionId,

            string? scope,

            string type)
        {
            EffectiveRules = effectiveRules;
            Id = id;
            Name = name;
            PolicyAssignmentProperties = policyAssignmentProperties;
            PolicyId = policyId;
            RoleDefinitionId = roleDefinitionId;
            Scope = scope;
            Type = type;
        }
    }
}
