// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureFleet.V20241101.Outputs
{

    /// <summary>
    /// VMAttributes that will be used to filter VMSizes which will be used to build Fleet.
    /// </summary>
    [OutputType]
    public sealed class VMAttributesResponse
    {
        /// <summary>
        /// The range of accelerator count specified from min to max. Optional parameter. Either Min or Max is required if specified.
        /// acceleratorSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If acceleratorSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxIntegerResponse? AcceleratorCount;
        /// <summary>
        /// The accelerator manufacturers specified as a list. 
        /// acceleratorSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If acceleratorSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly ImmutableArray<string> AcceleratorManufacturers;
        /// <summary>
        /// Specifies whether the VMSize supporting accelerator should be used to build Fleet or not.
        /// acceleratorSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If acceleratorSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly string? AcceleratorSupport;
        /// <summary>
        /// The accelerator types specified as a list. acceleratorSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If acceleratorSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly ImmutableArray<string> AcceleratorTypes;
        /// <summary>
        /// The VM architecture types specified as a list. Optional parameter.
        /// </summary>
        public readonly ImmutableArray<string> ArchitectureTypes;
        /// <summary>
        /// Specifies whether the VMSize supporting burstable capability should be used to build Fleet or not.
        /// </summary>
        public readonly string? BurstableSupport;
        /// <summary>
        /// The VM CPU manufacturers specified as a list. Optional parameter.
        /// </summary>
        public readonly ImmutableArray<string> CpuManufacturers;
        /// <summary>
        /// The range of data disk count specified from Min to Max. Optional parameter. Either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxIntegerResponse? DataDiskCount;
        /// <summary>
        /// Specifies which VMSizes should be excluded while building Fleet. Optional parameter.
        /// </summary>
        public readonly ImmutableArray<string> ExcludedVMSizes;
        /// <summary>
        /// The local storage disk types specified as a list. LocalStorageSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If localStorageSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly ImmutableArray<string> LocalStorageDiskTypes;
        /// <summary>
        /// LocalStorageSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If localStorageSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxDoubleResponse? LocalStorageInGiB;
        /// <summary>
        /// Specifies whether the VMSize supporting local storage should be used to build Fleet or not.
        /// </summary>
        public readonly string? LocalStorageSupport;
        /// <summary>
        /// The range of memory specified from Min to Max. Must be specified if VMAttributes are specified, either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxDoubleResponse MemoryInGiB;
        /// <summary>
        /// The range of memory in GiB per vCPU specified from min to max. Optional parameter. Either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxDoubleResponse? MemoryInGiBPerVCpu;
        /// <summary>
        /// The range of network bandwidth in Mbps specified from Min to Max. Optional parameter. Either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxDoubleResponse? NetworkBandwidthInMbps;
        /// <summary>
        /// The range of network interface count specified from Min to Max. Optional parameter. Either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxIntegerResponse? NetworkInterfaceCount;
        /// <summary>
        /// The range of RDMA (Remote Direct Memory Access) network interface count specified from Min to Max. Optional parameter. Either Min or Max is required if specified.
        /// rdmaSupport should be set to "Included" or "Required" to use this VMAttribute. 
        /// If rdmaSupport is "Excluded", this VMAttribute can not be used.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxIntegerResponse? RdmaNetworkInterfaceCount;
        /// <summary>
        /// Specifies whether the VMSize supporting RDMA (Remote Direct Memory Access) should be used to build Fleet or not.
        /// </summary>
        public readonly string? RdmaSupport;
        /// <summary>
        /// The range of vCpuCount specified from Min to Max. Must be specified if VMAttributes are specified, either Min or Max is required if specified.
        /// </summary>
        public readonly Outputs.VMAttributeMinMaxIntegerResponse VCpuCount;
        /// <summary>
        /// The VM category specified as a list. Optional parameter.
        /// </summary>
        public readonly ImmutableArray<string> VmCategories;

        [OutputConstructor]
        private VMAttributesResponse(
            Outputs.VMAttributeMinMaxIntegerResponse? acceleratorCount,

            ImmutableArray<string> acceleratorManufacturers,

            string? acceleratorSupport,

            ImmutableArray<string> acceleratorTypes,

            ImmutableArray<string> architectureTypes,

            string? burstableSupport,

            ImmutableArray<string> cpuManufacturers,

            Outputs.VMAttributeMinMaxIntegerResponse? dataDiskCount,

            ImmutableArray<string> excludedVMSizes,

            ImmutableArray<string> localStorageDiskTypes,

            Outputs.VMAttributeMinMaxDoubleResponse? localStorageInGiB,

            string? localStorageSupport,

            Outputs.VMAttributeMinMaxDoubleResponse memoryInGiB,

            Outputs.VMAttributeMinMaxDoubleResponse? memoryInGiBPerVCpu,

            Outputs.VMAttributeMinMaxDoubleResponse? networkBandwidthInMbps,

            Outputs.VMAttributeMinMaxIntegerResponse? networkInterfaceCount,

            Outputs.VMAttributeMinMaxIntegerResponse? rdmaNetworkInterfaceCount,

            string? rdmaSupport,

            Outputs.VMAttributeMinMaxIntegerResponse vCpuCount,

            ImmutableArray<string> vmCategories)
        {
            AcceleratorCount = acceleratorCount;
            AcceleratorManufacturers = acceleratorManufacturers;
            AcceleratorSupport = acceleratorSupport;
            AcceleratorTypes = acceleratorTypes;
            ArchitectureTypes = architectureTypes;
            BurstableSupport = burstableSupport;
            CpuManufacturers = cpuManufacturers;
            DataDiskCount = dataDiskCount;
            ExcludedVMSizes = excludedVMSizes;
            LocalStorageDiskTypes = localStorageDiskTypes;
            LocalStorageInGiB = localStorageInGiB;
            LocalStorageSupport = localStorageSupport;
            MemoryInGiB = memoryInGiB;
            MemoryInGiBPerVCpu = memoryInGiBPerVCpu;
            NetworkBandwidthInMbps = networkBandwidthInMbps;
            NetworkInterfaceCount = networkInterfaceCount;
            RdmaNetworkInterfaceCount = rdmaNetworkInterfaceCount;
            RdmaSupport = rdmaSupport;
            VCpuCount = vCpuCount;
            VmCategories = vmCategories;
        }
    }
}
