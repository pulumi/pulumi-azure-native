// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureFleet.V20241101.Inputs
{

    /// <summary>
    /// Describes a virtual machine scale set data disk.
    /// </summary>
    public sealed class VirtualMachineScaleSetDataDiskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the caching requirements. Possible values are: **None,**
        /// **ReadOnly,** **ReadWrite.** The default values are: **None for Standard
        /// storage. ReadOnly for Premium storage.**
        /// </summary>
        [Input("caching")]
        public InputUnion<string, Pulumi.AzureNative.AzureFleet.V20241101.CachingTypes>? Caching { get; set; }

        /// <summary>
        /// The create option.
        /// </summary>
        [Input("createOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.AzureFleet.V20241101.DiskCreateOptionTypes> CreateOption { get; set; } = null!;

        /// <summary>
        /// Specifies whether data disk should be deleted or detached upon VMSS Flex
        /// deletion (This feature is available for VMSS with Flexible OrchestrationMode
        /// only).&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the
        /// data disk is deleted when the VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If
        /// this value is used, the data disk is retained after VMSS Flex VM is
        /// deleted.&lt;br&gt;&lt;br&gt; The default value is set to **Delete**.
        /// </summary>
        [Input("deleteOption")]
        public InputUnion<string, Pulumi.AzureNative.AzureFleet.V20241101.DiskDeleteOptionTypes>? DeleteOption { get; set; }

        /// <summary>
        /// Specifies the Read-Write IOPS for the managed disk. Should be used only when
        /// StorageAccountType is UltraSSD_LRS. If not specified, a default value would be
        /// assigned based on diskSizeGB.
        /// </summary>
        [Input("diskIOPSReadWrite")]
        public Input<double>? DiskIOPSReadWrite { get; set; }

        /// <summary>
        /// Specifies the bandwidth in MB per second for the managed disk. Should be used
        /// only when StorageAccountType is UltraSSD_LRS. If not specified, a default value
        /// would be assigned based on diskSizeGB.
        /// </summary>
        [Input("diskMBpsReadWrite")]
        public Input<double>? DiskMBpsReadWrite { get; set; }

        /// <summary>
        /// Specifies the size of an empty data disk in gigabytes. This element can be used
        /// to overwrite the size of the disk in a virtual machine image. The property
        /// diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be
        /// larger than 1023.
        /// </summary>
        [Input("diskSizeGB")]
        public Input<int>? DiskSizeGB { get; set; }

        /// <summary>
        /// Specifies the logical unit number of the data disk. This value is used to
        /// identify data disks within the VM and therefore must be unique for each data
        /// disk attached to a VM.
        /// </summary>
        [Input("lun", required: true)]
        public Input<int> Lun { get; set; } = null!;

        /// <summary>
        /// The managed disk parameters.
        /// </summary>
        [Input("managedDisk")]
        public Input<Inputs.VirtualMachineScaleSetManagedDiskParametersArgs>? ManagedDisk { get; set; }

        /// <summary>
        /// The disk name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether writeAccelerator should be enabled or disabled on the disk.
        /// </summary>
        [Input("writeAcceleratorEnabled")]
        public Input<bool>? WriteAcceleratorEnabled { get; set; }

        public VirtualMachineScaleSetDataDiskArgs()
        {
        }
        public static new VirtualMachineScaleSetDataDiskArgs Empty => new VirtualMachineScaleSetDataDiskArgs();
    }
}
