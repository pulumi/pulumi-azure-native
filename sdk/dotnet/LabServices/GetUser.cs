// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.LabServices
{
    public static class GetUser
    {
        /// <summary>
        /// Returns the properties of a lab user.
        /// Azure REST API version: 2022-08-01.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("azure-native:labservices:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the properties of a lab user.
        /// Azure REST API version: 2022-08-01.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("azure-native:labservices:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab plan. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the user that uniquely identifies it within containing lab. Used in resource URIs.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab plan. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the user that uniquely identifies it within containing lab. Used in resource URIs.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// The amount of usage quota time the user gets in addition to the lab usage quota.
        /// </summary>
        public readonly string? AdditionalUsageQuota;
        /// <summary>
        /// Display name of the user, for example user's full name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Email address of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Date and time when the invitation message was sent to the user.
        /// </summary>
        public readonly string InvitationSent;
        /// <summary>
        /// State of the invitation message for the user.
        /// </summary>
        public readonly string InvitationState;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Current provisioning state of the user resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// State of the user's registration within the lab.
        /// </summary>
        public readonly string RegistrationState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the user resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// How long the user has used their virtual machines in this lab.
        /// </summary>
        public readonly string TotalUsage;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetUserResult(
            string? additionalUsageQuota,

            string displayName,

            string email,

            string id,

            string invitationSent,

            string invitationState,

            string name,

            string provisioningState,

            string registrationState,

            Outputs.SystemDataResponse systemData,

            string totalUsage,

            string type)
        {
            AdditionalUsageQuota = additionalUsageQuota;
            DisplayName = displayName;
            Email = email;
            Id = id;
            InvitationSent = invitationSent;
            InvitationState = invitationState;
            Name = name;
            ProvisioningState = provisioningState;
            RegistrationState = registrationState;
            SystemData = systemData;
            TotalUsage = totalUsage;
            Type = type;
        }
    }
}
