// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.LabServices.V20220801
{
    public static class GetLabPlan
    {
        /// <summary>
        /// Retrieves the properties of a Lab Plan.
        /// </summary>
        public static Task<GetLabPlanResult> InvokeAsync(GetLabPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLabPlanResult>("azure-native:labservices/v20220801:getLabPlan", args ?? new GetLabPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the properties of a Lab Plan.
        /// </summary>
        public static Output<GetLabPlanResult> Invoke(GetLabPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLabPlanResult>("azure-native:labservices/v20220801:getLabPlan", args ?? new GetLabPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLabPlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI.
        /// </summary>
        [Input("labPlanName", required: true)]
        public string LabPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLabPlanArgs()
        {
        }
        public static new GetLabPlanArgs Empty => new GetLabPlanArgs();
    }

    public sealed class GetLabPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab plan that uniquely identifies it within containing resource group. Used in resource URIs and in UI.
        /// </summary>
        [Input("labPlanName", required: true)]
        public Input<string> LabPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLabPlanInvokeArgs()
        {
        }
        public static new GetLabPlanInvokeArgs Empty => new GetLabPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetLabPlanResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed Identity Information
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Lab plan resource properties
        /// </summary>
        public readonly Outputs.LabPlanPropertiesResponse Properties;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the lab plan.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLabPlanResult(
            string id,

            Outputs.IdentityResponse? identity,

            string location,

            string name,

            Outputs.LabPlanPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
