// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.LabServices.V20211001Preview
{
    public static class GetLab
    {
        /// <summary>
        /// Returns the properties of a lab resource.
        /// </summary>
        public static Task<GetLabResult> InvokeAsync(GetLabArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLabResult>("azure-native:labservices/v20211001preview:getLab", args ?? new GetLabArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the properties of a lab resource.
        /// </summary>
        public static Output<GetLabResult> Invoke(GetLabInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLabResult>("azure-native:labservices/v20211001preview:getLab", args ?? new GetLabInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLabArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLabArgs()
        {
        }
        public static new GetLabArgs Empty => new GetLabArgs();
    }

    public sealed class GetLabInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLabInvokeArgs()
        {
        }
        public static new GetLabInvokeArgs Empty => new GetLabInvokeArgs();
    }


    [OutputType]
    public sealed class GetLabResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Lab resource properties
        /// </summary>
        public readonly Outputs.LabPropertiesResponse Properties;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the lab.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLabResult(
            string id,

            string location,

            string name,

            Outputs.LabPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
