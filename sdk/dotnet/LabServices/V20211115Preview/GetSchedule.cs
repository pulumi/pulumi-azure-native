// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.LabServices.V20211115Preview
{
    public static class GetSchedule
    {
        /// <summary>
        /// Schedule for automatically turning virtual machines in a lab on and off at specified times.
        /// </summary>
        public static Task<GetScheduleResult> InvokeAsync(GetScheduleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScheduleResult>("azure-native:labservices/v20211115preview:getSchedule", args ?? new GetScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Schedule for automatically turning virtual machines in a lab on and off at specified times.
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("azure-native:labservices/v20211115preview:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the schedule that uniquely identifies it within containing lab. Used in resource URIs.
        /// </summary>
        [Input("scheduleName", required: true)]
        public string ScheduleName { get; set; } = null!;

        public GetScheduleArgs()
        {
        }
        public static new GetScheduleArgs Empty => new GetScheduleArgs();
    }

    public sealed class GetScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the schedule that uniquely identifies it within containing lab. Used in resource URIs.
        /// </summary>
        [Input("scheduleName", required: true)]
        public Input<string> ScheduleName { get; set; } = null!;

        public GetScheduleInvokeArgs()
        {
        }
        public static new GetScheduleInvokeArgs Empty => new GetScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduleResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Notes for this schedule.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// Current provisioning state of the schedule.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The recurrence pattern of the scheduled actions.
        /// </summary>
        public readonly Outputs.RecurrencePatternResponse? RecurrencePattern;
        /// <summary>
        /// When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
        /// </summary>
        public readonly string? StartAt;
        /// <summary>
        /// When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
        /// </summary>
        public readonly string StopAt;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the schedule.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The IANA timezone id for the schedule.
        /// </summary>
        public readonly string TimeZoneId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScheduleResult(
            string id,

            string name,

            string? notes,

            string provisioningState,

            Outputs.RecurrencePatternResponse? recurrencePattern,

            string? startAt,

            string stopAt,

            Outputs.SystemDataResponse systemData,

            string timeZoneId,

            string type)
        {
            Id = id;
            Name = name;
            Notes = notes;
            ProvisioningState = provisioningState;
            RecurrencePattern = recurrencePattern;
            StartAt = startAt;
            StopAt = stopAt;
            SystemData = systemData;
            TimeZoneId = timeZoneId;
            Type = type;
        }
    }
}
