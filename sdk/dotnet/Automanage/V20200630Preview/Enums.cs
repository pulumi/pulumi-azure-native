// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Automanage.V20200630Preview
{
    /// <summary>
    /// Enables or disables Real Time Protection
    /// </summary>
    [EnumType]
    public readonly struct EnableRealTimeProtection : IEquatable<EnableRealTimeProtection>
    {
        private readonly string _value;

        private EnableRealTimeProtection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableRealTimeProtection True { get; } = new EnableRealTimeProtection("True");
        public static EnableRealTimeProtection False { get; } = new EnableRealTimeProtection("False");

        public static bool operator ==(EnableRealTimeProtection left, EnableRealTimeProtection right) => left.Equals(right);
        public static bool operator !=(EnableRealTimeProtection left, EnableRealTimeProtection right) => !left.Equals(right);

        public static explicit operator string(EnableRealTimeProtection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableRealTimeProtection other && Equals(other);
        public bool Equals(EnableRealTimeProtection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the Automanage account. Currently, the only supported type is 'SystemAssigned', which implicitly creates an identity.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enables or disables a periodic scan for antimalware
    /// </summary>
    [EnumType]
    public readonly struct RunScheduledScan : IEquatable<RunScheduledScan>
    {
        private readonly string _value;

        private RunScheduledScan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RunScheduledScan True { get; } = new RunScheduledScan("True");
        public static RunScheduledScan False { get; } = new RunScheduledScan("False");

        public static bool operator ==(RunScheduledScan left, RunScheduledScan right) => left.Equals(right);
        public static bool operator !=(RunScheduledScan left, RunScheduledScan right) => !left.Equals(right);

        public static explicit operator string(RunScheduledScan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RunScheduledScan other && Equals(other);
        public bool Equals(RunScheduledScan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of scheduled scan
    /// </summary>
    [EnumType]
    public readonly struct ScanType : IEquatable<ScanType>
    {
        private readonly string _value;

        private ScanType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScanType Quick { get; } = new ScanType("Quick");
        public static ScanType Full { get; } = new ScanType("Full");

        public static bool operator ==(ScanType left, ScanType right) => left.Equals(right);
        public static bool operator !=(ScanType left, ScanType right) => !left.Equals(right);

        public static explicit operator string(ScanType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanType other && Equals(other);
        public bool Equals(ScanType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
