// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.NotificationHubs.V20230901
{
    /// <summary>
    /// Defines values for AccessRights.
    /// </summary>
    [EnumType]
    public readonly struct AccessRights : IEquatable<AccessRights>
    {
        private readonly string _value;

        private AccessRights(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessRights Manage { get; } = new AccessRights("Manage");
        public static AccessRights Send { get; } = new AccessRights("Send");
        public static AccessRights Listen { get; } = new AccessRights("Listen");

        public static bool operator ==(AccessRights left, AccessRights right) => left.Equals(right);
        public static bool operator !=(AccessRights left, AccessRights right) => !left.Equals(right);

        public static explicit operator string(AccessRights value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessRights other && Equals(other);
        public bool Equals(AccessRights other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Namespace status.
    /// </summary>
    [EnumType]
    public readonly struct NamespaceStatus : IEquatable<NamespaceStatus>
    {
        private readonly string _value;

        private NamespaceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamespaceStatus Created { get; } = new NamespaceStatus("Created");
        public static NamespaceStatus Creating { get; } = new NamespaceStatus("Creating");
        public static NamespaceStatus Suspended { get; } = new NamespaceStatus("Suspended");
        public static NamespaceStatus Deleting { get; } = new NamespaceStatus("Deleting");

        public static bool operator ==(NamespaceStatus left, NamespaceStatus right) => left.Equals(right);
        public static bool operator !=(NamespaceStatus left, NamespaceStatus right) => !left.Equals(right);

        public static explicit operator string(NamespaceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamespaceStatus other && Equals(other);
        public bool Equals(NamespaceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines values for NamespaceType.
    /// </summary>
    [EnumType]
    public readonly struct NamespaceType : IEquatable<NamespaceType>
    {
        private readonly string _value;

        private NamespaceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamespaceType Messaging { get; } = new NamespaceType("Messaging");
        public static NamespaceType NotificationHub { get; } = new NamespaceType("NotificationHub");

        public static bool operator ==(NamespaceType left, NamespaceType right) => left.Equals(right);
        public static bool operator !=(NamespaceType left, NamespaceType right) => !left.Equals(right);

        public static explicit operator string(NamespaceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamespaceType other && Equals(other);
        public bool Equals(NamespaceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines values for OperationProvisioningState.
    /// </summary>
    [EnumType]
    public readonly struct OperationProvisioningState : IEquatable<OperationProvisioningState>
    {
        private readonly string _value;

        private OperationProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperationProvisioningState Unknown { get; } = new OperationProvisioningState("Unknown");
        public static OperationProvisioningState InProgress { get; } = new OperationProvisioningState("InProgress");
        public static OperationProvisioningState Succeeded { get; } = new OperationProvisioningState("Succeeded");
        public static OperationProvisioningState Failed { get; } = new OperationProvisioningState("Failed");
        public static OperationProvisioningState Canceled { get; } = new OperationProvisioningState("Canceled");
        public static OperationProvisioningState Pending { get; } = new OperationProvisioningState("Pending");
        public static OperationProvisioningState Disabled { get; } = new OperationProvisioningState("Disabled");

        public static bool operator ==(OperationProvisioningState left, OperationProvisioningState right) => left.Equals(right);
        public static bool operator !=(OperationProvisioningState left, OperationProvisioningState right) => !left.Equals(right);

        public static explicit operator string(OperationProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationProvisioningState other && Equals(other);
        public bool Equals(OperationProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of Private Endpoint Connection.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointConnectionProvisioningState : IEquatable<PrivateEndpointConnectionProvisioningState>
    {
        private readonly string _value;

        private PrivateEndpointConnectionProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointConnectionProvisioningState Unknown { get; } = new PrivateEndpointConnectionProvisioningState("Unknown");
        public static PrivateEndpointConnectionProvisioningState Succeeded { get; } = new PrivateEndpointConnectionProvisioningState("Succeeded");
        public static PrivateEndpointConnectionProvisioningState Creating { get; } = new PrivateEndpointConnectionProvisioningState("Creating");
        public static PrivateEndpointConnectionProvisioningState Updating { get; } = new PrivateEndpointConnectionProvisioningState("Updating");
        public static PrivateEndpointConnectionProvisioningState UpdatingByProxy { get; } = new PrivateEndpointConnectionProvisioningState("UpdatingByProxy");
        public static PrivateEndpointConnectionProvisioningState Deleting { get; } = new PrivateEndpointConnectionProvisioningState("Deleting");
        public static PrivateEndpointConnectionProvisioningState DeletingByProxy { get; } = new PrivateEndpointConnectionProvisioningState("DeletingByProxy");
        public static PrivateEndpointConnectionProvisioningState Deleted { get; } = new PrivateEndpointConnectionProvisioningState("Deleted");

        public static bool operator ==(PrivateEndpointConnectionProvisioningState left, PrivateEndpointConnectionProvisioningState right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointConnectionProvisioningState left, PrivateEndpointConnectionProvisioningState right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointConnectionProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointConnectionProvisioningState other && Equals(other);
        public bool Equals(PrivateEndpointConnectionProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of Private Link Connection.
    /// </summary>
    [EnumType]
    public readonly struct PrivateLinkConnectionStatus : IEquatable<PrivateLinkConnectionStatus>
    {
        private readonly string _value;

        private PrivateLinkConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateLinkConnectionStatus Disconnected { get; } = new PrivateLinkConnectionStatus("Disconnected");
        public static PrivateLinkConnectionStatus Pending { get; } = new PrivateLinkConnectionStatus("Pending");
        public static PrivateLinkConnectionStatus Approved { get; } = new PrivateLinkConnectionStatus("Approved");
        public static PrivateLinkConnectionStatus Rejected { get; } = new PrivateLinkConnectionStatus("Rejected");

        public static bool operator ==(PrivateLinkConnectionStatus left, PrivateLinkConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateLinkConnectionStatus left, PrivateLinkConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateLinkConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateLinkConnectionStatus other && Equals(other);
        public bool Equals(PrivateLinkConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of public network access.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Allowed replication region
    /// </summary>
    [EnumType]
    public readonly struct ReplicationRegion : IEquatable<ReplicationRegion>
    {
        private readonly string _value;

        private ReplicationRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationRegion Default { get; } = new ReplicationRegion("Default");
        public static ReplicationRegion WestUs2 { get; } = new ReplicationRegion("WestUs2");
        public static ReplicationRegion NorthEurope { get; } = new ReplicationRegion("NorthEurope");
        public static ReplicationRegion AustraliaEast { get; } = new ReplicationRegion("AustraliaEast");
        public static ReplicationRegion BrazilSouth { get; } = new ReplicationRegion("BrazilSouth");
        public static ReplicationRegion SouthEastAsia { get; } = new ReplicationRegion("SouthEastAsia");
        public static ReplicationRegion SouthAfricaNorth { get; } = new ReplicationRegion("SouthAfricaNorth");
        public static ReplicationRegion None { get; } = new ReplicationRegion("None");

        public static bool operator ==(ReplicationRegion left, ReplicationRegion right) => left.Equals(right);
        public static bool operator !=(ReplicationRegion left, ReplicationRegion right) => !left.Equals(right);

        public static explicit operator string(ReplicationRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationRegion other && Equals(other);
        public bool Equals(ReplicationRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Namespace SKU name.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Free { get; } = new SkuName("Free");
        public static SkuName Basic { get; } = new SkuName("Basic");
        public static SkuName Standard { get; } = new SkuName("Standard");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Namespace SKU name.
    /// </summary>
    [EnumType]
    public readonly struct ZoneRedundancyPreference : IEquatable<ZoneRedundancyPreference>
    {
        private readonly string _value;

        private ZoneRedundancyPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ZoneRedundancyPreference Disabled { get; } = new ZoneRedundancyPreference("Disabled");
        public static ZoneRedundancyPreference Enabled { get; } = new ZoneRedundancyPreference("Enabled");

        public static bool operator ==(ZoneRedundancyPreference left, ZoneRedundancyPreference right) => left.Equals(right);
        public static bool operator !=(ZoneRedundancyPreference left, ZoneRedundancyPreference right) => !left.Equals(right);

        public static explicit operator string(ZoneRedundancyPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneRedundancyPreference other && Equals(other);
        public bool Equals(ZoneRedundancyPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
