// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NotificationHubs.V20140901
{
    [Obsolete(@"Version 2014-09-01 will be removed in v2 of the provider.")]
    public static class GetNotificationHub
    {
        /// <summary>
        /// Description of a NotificationHub Resource.
        /// </summary>
        public static Task<GetNotificationHubResult> InvokeAsync(GetNotificationHubArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNotificationHubResult>("azure-native:notificationhubs/v20140901:getNotificationHub", args ?? new GetNotificationHubArgs(), options.WithDefaults());

        /// <summary>
        /// Description of a NotificationHub Resource.
        /// </summary>
        public static Output<GetNotificationHubResult> Invoke(GetNotificationHubInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNotificationHubResult>("azure-native:notificationhubs/v20140901:getNotificationHub", args ?? new GetNotificationHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The notification hub name.
        /// </summary>
        [Input("notificationHubName", required: true)]
        public string NotificationHubName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNotificationHubArgs()
        {
        }
        public static new GetNotificationHubArgs Empty => new GetNotificationHubArgs();
    }

    public sealed class GetNotificationHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The notification hub name.
        /// </summary>
        [Input("notificationHubName", required: true)]
        public Input<string> NotificationHubName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNotificationHubInvokeArgs()
        {
        }
        public static new GetNotificationHubInvokeArgs Empty => new GetNotificationHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationHubResult
    {
        /// <summary>
        /// Gets or sets the id of the created NotificationHub.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Gets or sets datacenter location of the NotificationHub.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Gets or sets name of the NotificationHub.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Gets or sets properties of the NotificationHub.
        /// </summary>
        public readonly Outputs.NotificationHubPropertiesResponse Properties;
        /// <summary>
        /// Gets or sets tags of the NotificationHub.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Gets or sets resource type of the NotificationHub.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetNotificationHubResult(
            string? id,

            string? location,

            string? name,

            Outputs.NotificationHubPropertiesResponse properties,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
