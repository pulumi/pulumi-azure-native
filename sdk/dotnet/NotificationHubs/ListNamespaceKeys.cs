// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NotificationHubs
{
    public static class ListNamespaceKeys
    {
        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the namespace 
        /// Azure REST API version: 2017-04-01.
        /// </summary>
        public static Task<ListNamespaceKeysResult> InvokeAsync(ListNamespaceKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListNamespaceKeysResult>("azure-native:notificationhubs:listNamespaceKeys", args ?? new ListNamespaceKeysArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the namespace 
        /// Azure REST API version: 2017-04-01.
        /// </summary>
        public static Output<ListNamespaceKeysResult> Invoke(ListNamespaceKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListNamespaceKeysResult>("azure-native:notificationhubs:listNamespaceKeys", args ?? new ListNamespaceKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListNamespaceKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection string of the namespace for the specified authorizationRule.
        /// </summary>
        [Input("authorizationRuleName", required: true)]
        public string AuthorizationRuleName { get; set; } = null!;

        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public ListNamespaceKeysArgs()
        {
        }
        public static new ListNamespaceKeysArgs Empty => new ListNamespaceKeysArgs();
    }

    public sealed class ListNamespaceKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection string of the namespace for the specified authorizationRule.
        /// </summary>
        [Input("authorizationRuleName", required: true)]
        public Input<string> AuthorizationRuleName { get; set; } = null!;

        /// <summary>
        /// The namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ListNamespaceKeysInvokeArgs()
        {
        }
        public static new ListNamespaceKeysInvokeArgs Empty => new ListNamespaceKeysInvokeArgs();
    }


    [OutputType]
    public sealed class ListNamespaceKeysResult
    {
        /// <summary>
        /// KeyName of the created AuthorizationRule
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// PrimaryConnectionString of the AuthorizationRule.
        /// </summary>
        public readonly string? PrimaryConnectionString;
        /// <summary>
        /// PrimaryKey of the created AuthorizationRule.
        /// </summary>
        public readonly string? PrimaryKey;
        /// <summary>
        /// SecondaryConnectionString of the created AuthorizationRule
        /// </summary>
        public readonly string? SecondaryConnectionString;
        /// <summary>
        /// SecondaryKey of the created AuthorizationRule
        /// </summary>
        public readonly string? SecondaryKey;

        [OutputConstructor]
        private ListNamespaceKeysResult(
            string? keyName,

            string? primaryConnectionString,

            string? primaryKey,

            string? secondaryConnectionString,

            string? secondaryKey)
        {
            KeyName = keyName;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryKey = primaryKey;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryKey = secondaryKey;
        }
    }
}
