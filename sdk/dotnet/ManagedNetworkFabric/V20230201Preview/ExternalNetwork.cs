// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230201Preview
{
    /// <summary>
    /// Defines the ExternalNetwork item.
    /// </summary>
    [AzureNativeResourceType("azure-native:managednetworkfabric/v20230201preview:ExternalNetwork")]
    public partial class ExternalNetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AdministrativeState of the externalNetwork. Example: Enabled | Disabled.
        /// </summary>
        [Output("administrativeState")]
        public Output<string> AdministrativeState { get; private set; } = null!;

        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Output("annotation")]
        public Output<string?> Annotation { get; private set; } = null!;

        /// <summary>
        /// List of resources the externalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
        /// </summary>
        [Output("disabledOnResources")]
        public Output<ImmutableArray<string>> DisabledOnResources { get; private set; } = null!;

        /// <summary>
        /// ARM resource ID of exportRoutePolicy.
        /// </summary>
        [Output("exportRoutePolicyId")]
        public Output<string?> ExportRoutePolicyId { get; private set; } = null!;

        /// <summary>
        /// ARM resource ID of importRoutePolicy.
        /// </summary>
        [Output("importRoutePolicyId")]
        public Output<string?> ImportRoutePolicyId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets the networkToNetworkInterconnectId of the resource.
        /// </summary>
        [Output("networkToNetworkInterconnectId")]
        public Output<string> NetworkToNetworkInterconnectId { get; private set; } = null!;

        /// <summary>
        /// option A properties object
        /// </summary>
        [Output("optionAProperties")]
        public Output<Outputs.ExternalNetworkPropertiesResponseOptionAProperties?> OptionAProperties { get; private set; } = null!;

        /// <summary>
        /// option B properties object
        /// </summary>
        [Output("optionBProperties")]
        public Output<Outputs.OptionBPropertiesResponse?> OptionBProperties { get; private set; } = null!;

        /// <summary>
        /// Peering option list.
        /// </summary>
        [Output("peeringOption")]
        public Output<string> PeeringOption { get; private set; } = null!;

        /// <summary>
        /// Gets the provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ExternalNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExternalNetwork(string name, ExternalNetworkArgs args, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric/v20230201preview:ExternalNetwork", name, args ?? new ExternalNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExternalNetwork(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric/v20230201preview:ExternalNetwork", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:managednetworkfabric:ExternalNetwork"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExternalNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExternalNetwork Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExternalNetwork(name, id, options);
        }
    }

    public sealed class ExternalNetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Input("annotation")]
        public Input<string>? Annotation { get; set; }

        /// <summary>
        /// ARM resource ID of exportRoutePolicy.
        /// </summary>
        [Input("exportRoutePolicyId")]
        public Input<string>? ExportRoutePolicyId { get; set; }

        /// <summary>
        /// Name of the ExternalNetwork
        /// </summary>
        [Input("externalNetworkName")]
        public Input<string>? ExternalNetworkName { get; set; }

        /// <summary>
        /// ARM resource ID of importRoutePolicy.
        /// </summary>
        [Input("importRoutePolicyId")]
        public Input<string>? ImportRoutePolicyId { get; set; }

        /// <summary>
        /// Name of the L3IsolationDomain
        /// </summary>
        [Input("l3IsolationDomainName", required: true)]
        public Input<string> L3IsolationDomainName { get; set; } = null!;

        /// <summary>
        /// option A properties object
        /// </summary>
        [Input("optionAProperties")]
        public Input<Inputs.ExternalNetworkPropertiesOptionAPropertiesArgs>? OptionAProperties { get; set; }

        /// <summary>
        /// option B properties object
        /// </summary>
        [Input("optionBProperties")]
        public Input<Inputs.OptionBPropertiesArgs>? OptionBProperties { get; set; }

        /// <summary>
        /// Peering option list.
        /// </summary>
        [Input("peeringOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.ManagedNetworkFabric.V20230201Preview.PeeringOption> PeeringOption { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ExternalNetworkArgs()
        {
        }
        public static new ExternalNetworkArgs Empty => new ExternalNetworkArgs();
    }
}
