// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230201Preview
{
    /// <summary>
    /// IP address family. Example: ipv4 | ipv6.
    /// </summary>
    [EnumType]
    public readonly struct AddressFamily : IEquatable<AddressFamily>
    {
        private readonly string _value;

        private AddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressFamily Ipv4 { get; } = new AddressFamily("ipv4");
        public static AddressFamily Ipv6 { get; } = new AddressFamily("ipv6");

        public static bool operator ==(AddressFamily left, AddressFamily right) => left.Equals(right);
        public static bool operator !=(AddressFamily left, AddressFamily right) => !left.Equals(right);

        public static explicit operator string(AddressFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressFamily other && Equals(other);
        public bool Equals(AddressFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// noAdvertise. Example: true | false.
    /// </summary>
    [EnumType]
    public readonly struct AdvertiseBoolean : IEquatable<AdvertiseBoolean>
    {
        private readonly string _value;

        private AdvertiseBoolean(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdvertiseBoolean @True { get; } = new AdvertiseBoolean("true");
        public static AdvertiseBoolean @False { get; } = new AdvertiseBoolean("false");

        public static bool operator ==(AdvertiseBoolean left, AdvertiseBoolean right) => left.Equals(right);
        public static bool operator !=(AdvertiseBoolean left, AdvertiseBoolean right) => !left.Equals(right);

        public static explicit operator string(AdvertiseBoolean value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdvertiseBoolean other && Equals(other);
        public bool Equals(AdvertiseBoolean other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Or Disable state.
    /// </summary>
    [EnumType]
    public readonly struct AllowASOverride : IEquatable<AllowASOverride>
    {
        private readonly string _value;

        private AllowASOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowASOverride Enable { get; } = new AllowASOverride("Enable");
        public static AllowASOverride Disable { get; } = new AllowASOverride("Disable");

        public static bool operator ==(AllowASOverride left, AllowASOverride right) => left.Equals(right);
        public static bool operator !=(AllowASOverride left, AllowASOverride right) => !left.Equals(right);

        public static explicit operator string(AllowASOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowASOverride other && Equals(other);
        public bool Equals(AllowASOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False
    /// </summary>
    [EnumType]
    public readonly struct BooleanEnumProperty : IEquatable<BooleanEnumProperty>
    {
        private readonly string _value;

        private BooleanEnumProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BooleanEnumProperty True { get; } = new BooleanEnumProperty("True");
        public static BooleanEnumProperty False { get; } = new BooleanEnumProperty("False");

        public static bool operator ==(BooleanEnumProperty left, BooleanEnumProperty right) => left.Equals(right);
        public static bool operator !=(BooleanEnumProperty left, BooleanEnumProperty right) => !left.Equals(right);

        public static explicit operator string(BooleanEnumProperty value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BooleanEnumProperty other && Equals(other);
        public bool Equals(BooleanEnumProperty other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// action. Example: allow | deny.
    /// </summary>
    [EnumType]
    public readonly struct CommunityActionType : IEquatable<CommunityActionType>
    {
        private readonly string _value;

        private CommunityActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommunityActionType Allow { get; } = new CommunityActionType("allow");
        public static CommunityActionType Deny { get; } = new CommunityActionType("deny");

        public static bool operator ==(CommunityActionType left, CommunityActionType right) => left.Equals(right);
        public static bool operator !=(CommunityActionType left, CommunityActionType right) => !left.Equals(right);

        public static explicit operator string(CommunityActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommunityActionType other && Equals(other);
        public bool Equals(CommunityActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// action. Example: allow | deny.
    /// </summary>
    [EnumType]
    public readonly struct ConditionActionType : IEquatable<ConditionActionType>
    {
        private readonly string _value;

        private ConditionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConditionActionType Allow { get; } = new ConditionActionType("allow");
        public static ConditionActionType Deny { get; } = new ConditionActionType("deny");

        public static bool operator ==(ConditionActionType left, ConditionActionType right) => left.Equals(right);
        public static bool operator !=(ConditionActionType left, ConditionActionType right) => !left.Equals(right);

        public static explicit operator string(ConditionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionActionType other && Equals(other);
        public bool Equals(ConditionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// noExport. Example: true | false.
    /// </summary>
    [EnumType]
    public readonly struct ExportBoolean : IEquatable<ExportBoolean>
    {
        private readonly string _value;

        private ExportBoolean(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExportBoolean @True { get; } = new ExportBoolean("true");
        public static ExportBoolean @False { get; } = new ExportBoolean("false");

        public static bool operator ==(ExportBoolean left, ExportBoolean right) => left.Equals(right);
        public static bool operator !=(ExportBoolean left, ExportBoolean right) => !left.Equals(right);

        public static explicit operator string(ExportBoolean value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExportBoolean other && Equals(other);
        public bool Equals(ExportBoolean other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    ///  Graceful Shutdown (GSHUT). Example: true | false.
    /// </summary>
    [EnumType]
    public readonly struct GshutBoolean : IEquatable<GshutBoolean>
    {
        private readonly string _value;

        private GshutBoolean(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GshutBoolean @True { get; } = new GshutBoolean("true");
        public static GshutBoolean @False { get; } = new GshutBoolean("false");

        public static bool operator ==(GshutBoolean left, GshutBoolean right) => left.Equals(right);
        public static bool operator !=(GshutBoolean left, GshutBoolean right) => !left.Equals(right);

        public static explicit operator string(GshutBoolean value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GshutBoolean other && Equals(other);
        public bool Equals(GshutBoolean other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Internet access. Example: true | false.
    /// </summary>
    [EnumType]
    public readonly struct InternetBoolean : IEquatable<InternetBoolean>
    {
        private readonly string _value;

        private InternetBoolean(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InternetBoolean @True { get; } = new InternetBoolean("true");
        public static InternetBoolean @False { get; } = new InternetBoolean("false");

        public static bool operator ==(InternetBoolean left, InternetBoolean right) => left.Equals(right);
        public static bool operator !=(InternetBoolean left, InternetBoolean right) => !left.Equals(right);

        public static explicit operator string(InternetBoolean value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InternetBoolean other && Equals(other);
        public bool Equals(InternetBoolean other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Local Autonomous System. Example: true | false.
    /// </summary>
    [EnumType]
    public readonly struct LocalASBoolean : IEquatable<LocalASBoolean>
    {
        private readonly string _value;

        private LocalASBoolean(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LocalASBoolean @True { get; } = new LocalASBoolean("true");
        public static LocalASBoolean @False { get; } = new LocalASBoolean("false");

        public static bool operator ==(LocalASBoolean left, LocalASBoolean right) => left.Equals(right);
        public static bool operator !=(LocalASBoolean left, LocalASBoolean right) => !left.Equals(right);

        public static explicit operator string(LocalASBoolean value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LocalASBoolean other && Equals(other);
        public bool Equals(LocalASBoolean other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// networkDeviceRole is the device role: Example: CE | ToR.
    /// </summary>
    [EnumType]
    public readonly struct NetworkDeviceRoleTypes : IEquatable<NetworkDeviceRoleTypes>
    {
        private readonly string _value;

        private NetworkDeviceRoleTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkDeviceRoleTypes CE { get; } = new NetworkDeviceRoleTypes("CE");
        public static NetworkDeviceRoleTypes ToR { get; } = new NetworkDeviceRoleTypes("ToR");
        public static NetworkDeviceRoleTypes NPB { get; } = new NetworkDeviceRoleTypes("NPB");
        public static NetworkDeviceRoleTypes TS { get; } = new NetworkDeviceRoleTypes("TS");
        public static NetworkDeviceRoleTypes Management { get; } = new NetworkDeviceRoleTypes("Management");

        public static bool operator ==(NetworkDeviceRoleTypes left, NetworkDeviceRoleTypes right) => left.Equals(right);
        public static bool operator !=(NetworkDeviceRoleTypes left, NetworkDeviceRoleTypes right) => !left.Equals(right);

        public static explicit operator string(NetworkDeviceRoleTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkDeviceRoleTypes other && Equals(other);
        public bool Equals(NetworkDeviceRoleTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Peering option list.
    /// </summary>
    [EnumType]
    public readonly struct PeeringOption : IEquatable<PeeringOption>
    {
        private readonly string _value;

        private PeeringOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PeeringOption OptionA { get; } = new PeeringOption("OptionA");
        public static PeeringOption OptionB { get; } = new PeeringOption("OptionB");

        public static bool operator ==(PeeringOption left, PeeringOption right) => left.Equals(right);
        public static bool operator !=(PeeringOption left, PeeringOption right) => !left.Equals(right);

        public static explicit operator string(PeeringOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PeeringOption other && Equals(other);
        public bool Equals(PeeringOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// action. Example: allow | deny.
    /// </summary>
    [EnumType]
    public readonly struct PrefixActionType : IEquatable<PrefixActionType>
    {
        private readonly string _value;

        private PrefixActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrefixActionType Allow { get; } = new PrefixActionType("allow");
        public static PrefixActionType Deny { get; } = new PrefixActionType("deny");

        public static bool operator ==(PrefixActionType left, PrefixActionType right) => left.Equals(right);
        public static bool operator !=(PrefixActionType left, PrefixActionType right) => !left.Equals(right);

        public static explicit operator string(PrefixActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrefixActionType other && Equals(other);
        public bool Equals(PrefixActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Connected Subnets. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeConnectedSubnets : IEquatable<RedistributeConnectedSubnets>
    {
        private readonly string _value;

        private RedistributeConnectedSubnets(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeConnectedSubnets True { get; } = new RedistributeConnectedSubnets("True");
        public static RedistributeConnectedSubnets False { get; } = new RedistributeConnectedSubnets("False");

        public static bool operator ==(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => left.Equals(right);
        public static bool operator !=(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => !left.Equals(right);

        public static explicit operator string(RedistributeConnectedSubnets value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeConnectedSubnets other && Equals(other);
        public bool Equals(RedistributeConnectedSubnets other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Static Routes. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeStaticRoutes : IEquatable<RedistributeStaticRoutes>
    {
        private readonly string _value;

        private RedistributeStaticRoutes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeStaticRoutes True { get; } = new RedistributeStaticRoutes("True");
        public static RedistributeStaticRoutes False { get; } = new RedistributeStaticRoutes("False");

        public static bool operator ==(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => left.Equals(right);
        public static bool operator !=(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => !left.Equals(right);

        public static explicit operator string(RedistributeStaticRoutes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeStaticRoutes other && Equals(other);
        public bool Equals(RedistributeStaticRoutes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
