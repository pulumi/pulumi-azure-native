// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    public static class GetNetworkInterfaceStatus
    {
        /// <summary>
        /// Get the running status of the Network Interface.
        /// Azure REST API version: 2023-02-01-preview.
        /// </summary>
        public static Task<GetNetworkInterfaceStatusResult> InvokeAsync(GetNetworkInterfaceStatusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInterfaceStatusResult>("azure-native:managednetworkfabric:getNetworkInterfaceStatus", args ?? new GetNetworkInterfaceStatusArgs(), options.WithDefaults());

        /// <summary>
        /// Get the running status of the Network Interface.
        /// Azure REST API version: 2023-02-01-preview.
        /// </summary>
        public static Output<GetNetworkInterfaceStatusResult> Invoke(GetNetworkInterfaceStatusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInterfaceStatusResult>("azure-native:managednetworkfabric:getNetworkInterfaceStatus", args ?? new GetNetworkInterfaceStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInterfaceStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the NetworkDevice.
        /// </summary>
        [Input("networkDeviceName", required: true)]
        public string NetworkDeviceName { get; set; } = null!;

        /// <summary>
        /// Name of the NetworkInterface
        /// </summary>
        [Input("networkInterfaceName", required: true)]
        public string NetworkInterfaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceStatusArgs()
        {
        }
        public static new GetNetworkInterfaceStatusArgs Empty => new GetNetworkInterfaceStatusArgs();
    }

    public sealed class GetNetworkInterfaceStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the NetworkDevice.
        /// </summary>
        [Input("networkDeviceName", required: true)]
        public Input<string> NetworkDeviceName { get; set; } = null!;

        /// <summary>
        /// Name of the NetworkInterface
        /// </summary>
        [Input("networkInterfaceName", required: true)]
        public Input<string> NetworkInterfaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceStatusInvokeArgs()
        {
        }
        public static new GetNetworkInterfaceStatusInvokeArgs Empty => new GetNetworkInterfaceStatusInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkInterfaceStatusResult
    {
        /// <summary>
        /// The interface administrative state.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Connected to ARM resource or external interface
        /// </summary>
        public readonly string? ConnectedTo;
        /// <summary>
        /// The interface operational status.
        /// </summary>
        public readonly string? OperationalStatus;
        /// <summary>
        /// The physical status.
        /// </summary>
        public readonly string? PhyStatus;
        /// <summary>
        /// The interface transceiver type. Example: up or down
        /// </summary>
        public readonly string? TransceiverStatus;

        [OutputConstructor]
        private GetNetworkInterfaceStatusResult(
            string administrativeState,

            string? connectedTo,

            string? operationalStatus,

            string? phyStatus,

            string? transceiverStatus)
        {
            AdministrativeState = administrativeState;
            ConnectedTo = connectedTo;
            OperationalStatus = operationalStatus;
            PhyStatus = phyStatus;
            TransceiverStatus = transceiverStatus;
        }
    }
}
