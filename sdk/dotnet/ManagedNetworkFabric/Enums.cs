// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    /// <summary>
    /// IP address family. Example: ipv4 | ipv6.
    /// </summary>
    [EnumType]
    public readonly struct AddressFamily : IEquatable<AddressFamily>
    {
        private readonly string _value;

        private AddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressFamily Ipv4 { get; } = new AddressFamily("ipv4");
        public static AddressFamily Ipv6 { get; } = new AddressFamily("ipv6");

        public static bool operator ==(AddressFamily left, AddressFamily right) => left.Equals(right);
        public static bool operator !=(AddressFamily left, AddressFamily right) => !left.Equals(right);

        public static explicit operator string(AddressFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressFamily other && Equals(other);
        public bool Equals(AddressFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Or Disable state.
    /// </summary>
    [EnumType]
    public readonly struct AllowASOverride : IEquatable<AllowASOverride>
    {
        private readonly string _value;

        private AllowASOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowASOverride Enable { get; } = new AllowASOverride("Enable");
        public static AllowASOverride Disable { get; } = new AllowASOverride("Disable");

        public static bool operator ==(AllowASOverride left, AllowASOverride right) => left.Equals(right);
        public static bool operator !=(AllowASOverride left, AllowASOverride right) => !left.Equals(right);

        public static explicit operator string(AllowASOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowASOverride other && Equals(other);
        public bool Equals(AllowASOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False
    /// </summary>
    [EnumType]
    public readonly struct BooleanEnumProperty : IEquatable<BooleanEnumProperty>
    {
        private readonly string _value;

        private BooleanEnumProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BooleanEnumProperty True { get; } = new BooleanEnumProperty("True");
        public static BooleanEnumProperty False { get; } = new BooleanEnumProperty("False");

        public static bool operator ==(BooleanEnumProperty left, BooleanEnumProperty right) => left.Equals(right);
        public static bool operator !=(BooleanEnumProperty left, BooleanEnumProperty right) => !left.Equals(right);

        public static explicit operator string(BooleanEnumProperty value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BooleanEnumProperty other && Equals(other);
        public bool Equals(BooleanEnumProperty other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// action. Example: Permit | Deny.
    /// </summary>
    [EnumType]
    public readonly struct CommunityActionTypes : IEquatable<CommunityActionTypes>
    {
        private readonly string _value;

        private CommunityActionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommunityActionTypes Permit { get; } = new CommunityActionTypes("Permit");
        public static CommunityActionTypes Deny { get; } = new CommunityActionTypes("Deny");

        public static bool operator ==(CommunityActionTypes left, CommunityActionTypes right) => left.Equals(right);
        public static bool operator !=(CommunityActionTypes left, CommunityActionTypes right) => !left.Equals(right);

        public static explicit operator string(CommunityActionTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommunityActionTypes other && Equals(other);
        public bool Equals(CommunityActionTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify prefix-list bounds.
    /// </summary>
    [EnumType]
    public readonly struct Condition : IEquatable<Condition>
    {
        private readonly string _value;

        private Condition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Condition EqualTo { get; } = new Condition("EqualTo");
        public static Condition GreaterThanOrEqualTo { get; } = new Condition("GreaterThanOrEqualTo");
        public static Condition LesserThanOrEqualTo { get; } = new Condition("LesserThanOrEqualTo");

        public static bool operator ==(Condition left, Condition right) => left.Equals(right);
        public static bool operator !=(Condition left, Condition right) => !left.Equals(right);

        public static explicit operator string(Condition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Condition other && Equals(other);
        public bool Equals(Condition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// action. Example: allow | deny.
    /// </summary>
    [EnumType]
    public readonly struct ConditionActionType : IEquatable<ConditionActionType>
    {
        private readonly string _value;

        private ConditionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConditionActionType Allow { get; } = new ConditionActionType("allow");
        public static ConditionActionType Deny { get; } = new ConditionActionType("deny");

        public static bool operator ==(ConditionActionType left, ConditionActionType right) => left.Equals(right);
        public static bool operator !=(ConditionActionType left, ConditionActionType right) => !left.Equals(right);

        public static explicit operator string(ConditionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionActionType other && Equals(other);
        public bool Equals(ConditionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// networkDeviceRole is the device role: Example: CE | ToR.
    /// </summary>
    [EnumType]
    public readonly struct NetworkDeviceRoleTypes : IEquatable<NetworkDeviceRoleTypes>
    {
        private readonly string _value;

        private NetworkDeviceRoleTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkDeviceRoleTypes CE { get; } = new NetworkDeviceRoleTypes("CE");
        public static NetworkDeviceRoleTypes ToR { get; } = new NetworkDeviceRoleTypes("ToR");
        public static NetworkDeviceRoleTypes NPB { get; } = new NetworkDeviceRoleTypes("NPB");
        public static NetworkDeviceRoleTypes TS { get; } = new NetworkDeviceRoleTypes("TS");
        public static NetworkDeviceRoleTypes Management { get; } = new NetworkDeviceRoleTypes("Management");

        public static bool operator ==(NetworkDeviceRoleTypes left, NetworkDeviceRoleTypes right) => left.Equals(right);
        public static bool operator !=(NetworkDeviceRoleTypes left, NetworkDeviceRoleTypes right) => !left.Equals(right);

        public static explicit operator string(NetworkDeviceRoleTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkDeviceRoleTypes other && Equals(other);
        public bool Equals(NetworkDeviceRoleTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of NNI used. Example: CE | NPB
    /// </summary>
    [EnumType]
    public readonly struct NniType : IEquatable<NniType>
    {
        private readonly string _value;

        private NniType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NniType CE { get; } = new NniType("CE");
        public static NniType NPB { get; } = new NniType("NPB");

        public static bool operator ==(NniType left, NniType right) => left.Equals(right);
        public static bool operator !=(NniType left, NniType right) => !left.Equals(right);

        public static explicit operator string(NniType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NniType other && Equals(other);
        public bool Equals(NniType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Peering option list.
    /// </summary>
    [EnumType]
    public readonly struct PeeringOption : IEquatable<PeeringOption>
    {
        private readonly string _value;

        private PeeringOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PeeringOption OptionA { get; } = new PeeringOption("OptionA");
        public static PeeringOption OptionB { get; } = new PeeringOption("OptionB");

        public static bool operator ==(PeeringOption left, PeeringOption right) => left.Equals(right);
        public static bool operator !=(PeeringOption left, PeeringOption right) => !left.Equals(right);

        public static explicit operator string(PeeringOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PeeringOption other && Equals(other);
        public bool Equals(PeeringOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Connected Subnets. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeConnectedSubnets : IEquatable<RedistributeConnectedSubnets>
    {
        private readonly string _value;

        private RedistributeConnectedSubnets(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeConnectedSubnets True { get; } = new RedistributeConnectedSubnets("True");
        public static RedistributeConnectedSubnets False { get; } = new RedistributeConnectedSubnets("False");

        public static bool operator ==(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => left.Equals(right);
        public static bool operator !=(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => !left.Equals(right);

        public static explicit operator string(RedistributeConnectedSubnets value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeConnectedSubnets other && Equals(other);
        public bool Equals(RedistributeConnectedSubnets other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Static Routes. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeStaticRoutes : IEquatable<RedistributeStaticRoutes>
    {
        private readonly string _value;

        private RedistributeStaticRoutes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeStaticRoutes True { get; } = new RedistributeStaticRoutes("True");
        public static RedistributeStaticRoutes False { get; } = new RedistributeStaticRoutes("False");

        public static bool operator ==(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => left.Equals(right);
        public static bool operator !=(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => !left.Equals(right);

        public static explicit operator string(RedistributeStaticRoutes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeStaticRoutes other && Equals(other);
        public bool Equals(RedistributeStaticRoutes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// 
    /// `Internet` - Advertise routes to internet community.
    ///  `LocalAS` - Advertise routes to only localAS peers.
    ///  `NoAdvertise` - Don't advertise routes to any peer.
    /// `NoExport` - Don't export to next AS.
    /// `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
    /// </summary>
    [EnumType]
    public readonly struct WellKnownCommunities : IEquatable<WellKnownCommunities>
    {
        private readonly string _value;

        private WellKnownCommunities(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WellKnownCommunities Internet { get; } = new WellKnownCommunities("Internet");
        public static WellKnownCommunities LocalAS { get; } = new WellKnownCommunities("LocalAS");
        public static WellKnownCommunities NoAdvertise { get; } = new WellKnownCommunities("NoAdvertise");
        public static WellKnownCommunities NoExport { get; } = new WellKnownCommunities("NoExport");
        public static WellKnownCommunities GShut { get; } = new WellKnownCommunities("GShut");

        public static bool operator ==(WellKnownCommunities left, WellKnownCommunities right) => left.Equals(right);
        public static bool operator !=(WellKnownCommunities left, WellKnownCommunities right) => !left.Equals(right);

        public static explicit operator string(WellKnownCommunities value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WellKnownCommunities other && Equals(other);
        public bool Equals(WellKnownCommunities other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
