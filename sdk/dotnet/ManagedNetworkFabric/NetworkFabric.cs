// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    /// <summary>
    /// The NetworkFabric resource definition.
    /// Azure REST API version: 2023-02-01-preview. Prior API version in Azure Native 1.x: 2023-02-01-preview
    /// </summary>
    [AzureNativeResourceType("azure-native:managednetworkfabric:NetworkFabric")]
    public partial class NetworkFabric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Output("annotation")]
        public Output<string?> Annotation { get; private set; } = null!;

        /// <summary>
        /// ASN of CE devices for CE/PE connectivity.
        /// </summary>
        [Output("fabricASN")]
        public Output<int> FabricASN { get; private set; } = null!;

        /// <summary>
        /// IPv4Prefix for Management Network. Default value : 10.1.0.0/19.
        /// </summary>
        [Output("ipv4Prefix")]
        public Output<string?> Ipv4Prefix { get; private set; } = null!;

        /// <summary>
        /// IPv6Prefix for Management Network. Default value 3FFE:FFFF:0:CD40::/59.
        /// </summary>
        [Output("ipv6Prefix")]
        public Output<string?> Ipv6Prefix { get; private set; } = null!;

        /// <summary>
        /// List of L2IsolationDomain resource IDs under the Network Fabric.
        /// </summary>
        [Output("l2IsolationDomains")]
        public Output<ImmutableArray<string>> L2IsolationDomains { get; private set; } = null!;

        /// <summary>
        /// List of L3IsolationDomain resource IDs under the Network Fabric.
        /// </summary>
        [Output("l3IsolationDomains")]
        public Output<ImmutableArray<string>> L3IsolationDomains { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Configuration to be used to setup the management network.
        /// </summary>
        [Output("managementNetworkConfiguration")]
        public Output<Outputs.NetworkFabricPropertiesResponseManagementNetworkConfiguration> ManagementNetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
        /// </summary>
        [Output("networkFabricControllerId")]
        public Output<string> NetworkFabricControllerId { get; private set; } = null!;

        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        [Output("networkFabricSku")]
        public Output<string> NetworkFabricSku { get; private set; } = null!;

        /// <summary>
        /// Gets the operational state of the resource.
        /// </summary>
        [Output("operationalState")]
        public Output<string> OperationalState { get; private set; } = null!;

        /// <summary>
        /// Gets the provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Number of racks associated to Network Fabric.Possible values are from 2-8.
        /// </summary>
        [Output("rackCount")]
        public Output<int> RackCount { get; private set; } = null!;

        /// <summary>
        /// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
        /// </summary>
        [Output("racks")]
        public Output<ImmutableArray<string>> Racks { get; private set; } = null!;

        /// <summary>
        /// Router Id of CE to be used for MP-BGP between PE and CE
        /// </summary>
        [Output("routerId")]
        public Output<string> RouterId { get; private set; } = null!;

        /// <summary>
        /// Number of servers.Possible values are from 1-16.
        /// </summary>
        [Output("serverCountPerRack")]
        public Output<int> ServerCountPerRack { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Network and credentials configuration currently applied to terminal server.
        /// </summary>
        [Output("terminalServerConfiguration")]
        public Output<Outputs.NetworkFabricPropertiesResponseTerminalServerConfiguration> TerminalServerConfiguration { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkFabric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkFabric(string name, NetworkFabricArgs args, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric:NetworkFabric", name, args ?? new NetworkFabricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkFabric(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric:NetworkFabric", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:managednetworkfabric/v20230201preview:NetworkFabric"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkFabric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkFabric Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NetworkFabric(name, id, options);
        }
    }

    public sealed class NetworkFabricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Input("annotation")]
        public Input<string>? Annotation { get; set; }

        /// <summary>
        /// ASN of CE devices for CE/PE connectivity.
        /// </summary>
        [Input("fabricASN", required: true)]
        public Input<int> FabricASN { get; set; } = null!;

        /// <summary>
        /// IPv4Prefix for Management Network. Default value : 10.1.0.0/19.
        /// </summary>
        [Input("ipv4Prefix")]
        public Input<string>? Ipv4Prefix { get; set; }

        /// <summary>
        /// IPv6Prefix for Management Network. Default value 3FFE:FFFF:0:CD40::/59.
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<string>? Ipv6Prefix { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Configuration to be used to setup the management network.
        /// </summary>
        [Input("managementNetworkConfiguration", required: true)]
        public Input<Inputs.NetworkFabricPropertiesManagementNetworkConfigurationArgs> ManagementNetworkConfiguration { get; set; } = null!;

        /// <summary>
        /// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
        /// </summary>
        [Input("networkFabricControllerId", required: true)]
        public Input<string> NetworkFabricControllerId { get; set; } = null!;

        /// <summary>
        /// Name of the Network Fabric
        /// </summary>
        [Input("networkFabricName")]
        public Input<string>? NetworkFabricName { get; set; }

        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        [Input("networkFabricSku", required: true)]
        public Input<string> NetworkFabricSku { get; set; } = null!;

        /// <summary>
        /// Number of racks associated to Network Fabric.Possible values are from 2-8.
        /// </summary>
        [Input("rackCount", required: true)]
        public Input<int> RackCount { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Number of servers.Possible values are from 1-16.
        /// </summary>
        [Input("serverCountPerRack", required: true)]
        public Input<int> ServerCountPerRack { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Network and credentials configuration currently applied to terminal server.
        /// </summary>
        [Input("terminalServerConfiguration", required: true)]
        public Input<Inputs.NetworkFabricPropertiesTerminalServerConfigurationArgs> TerminalServerConfiguration { get; set; } = null!;

        public NetworkFabricArgs()
        {
            Ipv4Prefix = "10.1.0.0/19";
            Ipv6Prefix = "3FFE:FFFF:0:CD40::/59";
        }
        public static new NetworkFabricArgs Empty => new NetworkFabricArgs();
    }
}
