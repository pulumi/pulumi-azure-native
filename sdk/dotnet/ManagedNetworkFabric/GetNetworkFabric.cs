// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    public static class GetNetworkFabric
    {
        /// <summary>
        /// Get Network Fabric resource details.
        /// Azure REST API version: 2023-02-01-preview.
        /// </summary>
        public static Task<GetNetworkFabricResult> InvokeAsync(GetNetworkFabricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkFabricResult>("azure-native:managednetworkfabric:getNetworkFabric", args ?? new GetNetworkFabricArgs(), options.WithDefaults());

        /// <summary>
        /// Get Network Fabric resource details.
        /// Azure REST API version: 2023-02-01-preview.
        /// </summary>
        public static Output<GetNetworkFabricResult> Invoke(GetNetworkFabricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkFabricResult>("azure-native:managednetworkfabric:getNetworkFabric", args ?? new GetNetworkFabricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkFabricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Fabric
        /// </summary>
        [Input("networkFabricName", required: true)]
        public string NetworkFabricName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkFabricArgs()
        {
        }
        public static new GetNetworkFabricArgs Empty => new GetNetworkFabricArgs();
    }

    public sealed class GetNetworkFabricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Fabric
        /// </summary>
        [Input("networkFabricName", required: true)]
        public Input<string> NetworkFabricName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkFabricInvokeArgs()
        {
        }
        public static new GetNetworkFabricInvokeArgs Empty => new GetNetworkFabricInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkFabricResult
    {
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// ASN of CE devices for CE/PE connectivity.
        /// </summary>
        public readonly int FabricASN;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPv4Prefix for Management Network. Default value : 10.1.0.0/19.
        /// </summary>
        public readonly string? Ipv4Prefix;
        /// <summary>
        /// IPv6Prefix for Management Network. Default value 3FFE:FFFF:0:CD40::/59.
        /// </summary>
        public readonly string? Ipv6Prefix;
        /// <summary>
        /// List of L2IsolationDomain resource IDs under the Network Fabric.
        /// </summary>
        public readonly ImmutableArray<string> L2IsolationDomains;
        /// <summary>
        /// List of L3IsolationDomain resource IDs under the Network Fabric.
        /// </summary>
        public readonly ImmutableArray<string> L3IsolationDomains;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Configuration to be used to setup the management network.
        /// </summary>
        public readonly Outputs.NetworkFabricPropertiesResponseManagementNetworkConfiguration ManagementNetworkConfiguration;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
        /// </summary>
        public readonly string NetworkFabricControllerId;
        /// <summary>
        /// Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.
        /// </summary>
        public readonly string NetworkFabricSku;
        /// <summary>
        /// Gets the operational state of the resource.
        /// </summary>
        public readonly string OperationalState;
        /// <summary>
        /// Gets the provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Number of racks associated to Network Fabric.Possible values are from 2-8.
        /// </summary>
        public readonly int RackCount;
        /// <summary>
        /// List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
        /// </summary>
        public readonly ImmutableArray<string> Racks;
        /// <summary>
        /// Router Id of CE to be used for MP-BGP between PE and CE
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Number of servers.Possible values are from 1-16.
        /// </summary>
        public readonly int ServerCountPerRack;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Network and credentials configuration currently applied to terminal server.
        /// </summary>
        public readonly Outputs.NetworkFabricPropertiesResponseTerminalServerConfiguration TerminalServerConfiguration;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkFabricResult(
            string? annotation,

            int fabricASN,

            string id,

            string? ipv4Prefix,

            string? ipv6Prefix,

            ImmutableArray<string> l2IsolationDomains,

            ImmutableArray<string> l3IsolationDomains,

            string location,

            Outputs.NetworkFabricPropertiesResponseManagementNetworkConfiguration managementNetworkConfiguration,

            string name,

            string networkFabricControllerId,

            string networkFabricSku,

            string operationalState,

            string provisioningState,

            int rackCount,

            ImmutableArray<string> racks,

            string routerId,

            int serverCountPerRack,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.NetworkFabricPropertiesResponseTerminalServerConfiguration terminalServerConfiguration,

            string type)
        {
            Annotation = annotation;
            FabricASN = fabricASN;
            Id = id;
            Ipv4Prefix = ipv4Prefix;
            Ipv6Prefix = ipv6Prefix;
            L2IsolationDomains = l2IsolationDomains;
            L3IsolationDomains = l3IsolationDomains;
            Location = location;
            ManagementNetworkConfiguration = managementNetworkConfiguration;
            Name = name;
            NetworkFabricControllerId = networkFabricControllerId;
            NetworkFabricSku = networkFabricSku;
            OperationalState = operationalState;
            ProvisioningState = provisioningState;
            RackCount = rackCount;
            Racks = racks;
            RouterId = routerId;
            ServerCountPerRack = serverCountPerRack;
            SystemData = systemData;
            Tags = tags;
            TerminalServerConfiguration = terminalServerConfiguration;
            Type = type;
        }
    }
}
