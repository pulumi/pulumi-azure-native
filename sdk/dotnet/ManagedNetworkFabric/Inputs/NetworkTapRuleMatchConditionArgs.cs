// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.Inputs
{

    /// <summary>
    /// Defines the match condition that is supported to filter the traffic.
    /// </summary>
    public sealed class NetworkTapRuleMatchConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Encapsulation Type that needs to be matched.
        /// </summary>
        [Input("encapsulationType")]
        public InputUnion<string, Pulumi.AzureNative.ManagedNetworkFabric.EncapsulationType>? EncapsulationType { get; set; }

        /// <summary>
        /// IP condition that needs to be matched.
        /// </summary>
        [Input("ipCondition")]
        public Input<Inputs.IpMatchConditionArgs>? IpCondition { get; set; }

        /// <summary>
        /// Defines the port condition that needs to be matched.
        /// </summary>
        [Input("portCondition")]
        public Input<Inputs.PortConditionArgs>? PortCondition { get; set; }

        [Input("protocolTypes")]
        private InputList<string>? _protocolTypes;

        /// <summary>
        /// List of the protocols that need to be matched.
        /// </summary>
        public InputList<string> ProtocolTypes
        {
            get => _protocolTypes ?? (_protocolTypes = new InputList<string>());
            set => _protocolTypes = value;
        }

        /// <summary>
        /// Vlan match condition that needs to be matched.
        /// </summary>
        [Input("vlanMatchCondition")]
        public Input<Inputs.VlanMatchConditionArgs>? VlanMatchCondition { get; set; }

        public NetworkTapRuleMatchConditionArgs()
        {
            EncapsulationType = "None";
        }
        public static new NetworkTapRuleMatchConditionArgs Empty => new NetworkTapRuleMatchConditionArgs();
    }
}
