// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    public static class GetL3IsolationDomain
    {
        /// <summary>
        /// Retrieves details of this L3 Isolation Domain.
        /// Azure REST API version: 2023-02-01-preview.
        /// 
        /// Other available API versions: 2023-06-15.
        /// </summary>
        public static Task<GetL3IsolationDomainResult> InvokeAsync(GetL3IsolationDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetL3IsolationDomainResult>("azure-native:managednetworkfabric:getL3IsolationDomain", args ?? new GetL3IsolationDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves details of this L3 Isolation Domain.
        /// Azure REST API version: 2023-02-01-preview.
        /// 
        /// Other available API versions: 2023-06-15.
        /// </summary>
        public static Output<GetL3IsolationDomainResult> Invoke(GetL3IsolationDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetL3IsolationDomainResult>("azure-native:managednetworkfabric:getL3IsolationDomain", args ?? new GetL3IsolationDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetL3IsolationDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the L3 Isolation Domain
        /// </summary>
        [Input("l3IsolationDomainName", required: true)]
        public string L3IsolationDomainName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetL3IsolationDomainArgs()
        {
        }
        public static new GetL3IsolationDomainArgs Empty => new GetL3IsolationDomainArgs();
    }

    public sealed class GetL3IsolationDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the L3 Isolation Domain
        /// </summary>
        [Input("l3IsolationDomainName", required: true)]
        public Input<string> L3IsolationDomainName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetL3IsolationDomainInvokeArgs()
        {
        }
        public static new GetL3IsolationDomainInvokeArgs Empty => new GetL3IsolationDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetL3IsolationDomainResult
    {
        /// <summary>
        /// Administrative state of the IsolationDomain. Example: Enabled | Disabled.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// List of Ipv4 and Ipv6 route configurations.
        /// </summary>
        public readonly Outputs.AggregateRouteConfigurationResponse? AggregateRouteConfiguration;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// Connected Subnet RoutePolicy
        /// </summary>
        public readonly Outputs.L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicy? ConnectedSubnetRoutePolicy;
        /// <summary>
        /// L3 Isolation Domain description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
        /// </summary>
        public readonly ImmutableArray<string> DisabledOnResources;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Fabric ARM resource id.
        /// </summary>
        public readonly string NetworkFabricId;
        /// <summary>
        /// List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
        /// </summary>
        public readonly ImmutableArray<string> OptionBDisabledOnResources;
        /// <summary>
        /// Gets the provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Advertise Connected Subnets. Ex: "True" | "False".
        /// </summary>
        public readonly string? RedistributeConnectedSubnets;
        /// <summary>
        /// Advertise Static Routes. Ex: "True" | "False".
        /// </summary>
        public readonly string? RedistributeStaticRoutes;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetL3IsolationDomainResult(
            string administrativeState,

            Outputs.AggregateRouteConfigurationResponse? aggregateRouteConfiguration,

            string? annotation,

            Outputs.L3IsolationDomainPatchPropertiesResponseConnectedSubnetRoutePolicy? connectedSubnetRoutePolicy,

            string? description,

            ImmutableArray<string> disabledOnResources,

            string id,

            string location,

            string name,

            string networkFabricId,

            ImmutableArray<string> optionBDisabledOnResources,

            string provisioningState,

            string? redistributeConnectedSubnets,

            string? redistributeStaticRoutes,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdministrativeState = administrativeState;
            AggregateRouteConfiguration = aggregateRouteConfiguration;
            Annotation = annotation;
            ConnectedSubnetRoutePolicy = connectedSubnetRoutePolicy;
            Description = description;
            DisabledOnResources = disabledOnResources;
            Id = id;
            Location = location;
            Name = name;
            NetworkFabricId = networkFabricId;
            OptionBDisabledOnResources = optionBDisabledOnResources;
            ProvisioningState = provisioningState;
            RedistributeConnectedSubnets = redistributeConnectedSubnets;
            RedistributeStaticRoutes = redistributeStaticRoutes;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
