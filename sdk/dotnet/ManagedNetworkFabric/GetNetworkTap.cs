// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    public static class GetNetworkTap
    {
        /// <summary>
        /// Retrieves details of this Network Tap.
        /// Azure REST API version: 2023-06-15.
        /// </summary>
        public static Task<GetNetworkTapResult> InvokeAsync(GetNetworkTapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkTapResult>("azure-native:managednetworkfabric:getNetworkTap", args ?? new GetNetworkTapArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves details of this Network Tap.
        /// Azure REST API version: 2023-06-15.
        /// </summary>
        public static Output<GetNetworkTapResult> Invoke(GetNetworkTapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkTapResult>("azure-native:managednetworkfabric:getNetworkTap", args ?? new GetNetworkTapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkTapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Tap.
        /// </summary>
        [Input("networkTapName", required: true)]
        public string NetworkTapName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkTapArgs()
        {
        }
        public static new GetNetworkTapArgs Empty => new GetNetworkTapArgs();
    }

    public sealed class GetNetworkTapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Tap.
        /// </summary>
        [Input("networkTapName", required: true)]
        public Input<string> NetworkTapName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkTapInvokeArgs()
        {
        }
        public static new GetNetworkTapInvokeArgs Empty => new GetNetworkTapInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkTapResult
    {
        /// <summary>
        /// Administrative state of the resource. Example -Enabled/Disabled
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// Gets the configurations state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// List of destinations to send the filter traffic.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkTapPropertiesResponseDestinations> Destinations;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ARM resource ID of the Network Packet Broker.
        /// </summary>
        public readonly string NetworkPacketBrokerId;
        /// <summary>
        /// Polling type.
        /// </summary>
        public readonly string? PollingType;
        /// <summary>
        /// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
        /// </summary>
        public readonly string SourceTapRuleId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkTapResult(
            string administrativeState,

            string? annotation,

            string configurationState,

            ImmutableArray<Outputs.NetworkTapPropertiesResponseDestinations> destinations,

            string id,

            string location,

            string name,

            string networkPacketBrokerId,

            string? pollingType,

            string provisioningState,

            string sourceTapRuleId,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdministrativeState = administrativeState;
            Annotation = annotation;
            ConfigurationState = configurationState;
            Destinations = destinations;
            Id = id;
            Location = location;
            Name = name;
            NetworkPacketBrokerId = networkPacketBrokerId;
            PollingType = pollingType;
            ProvisioningState = provisioningState;
            SourceTapRuleId = sourceTapRuleId;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
