// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    /// <summary>
    /// Type of actions that can be performed.
    /// </summary>
    [EnumType]
    public readonly struct AclActionType : IEquatable<AclActionType>
    {
        private readonly string _value;

        private AclActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AclActionType Drop { get; } = new AclActionType("Drop");
        public static AclActionType Count { get; } = new AclActionType("Count");
        public static AclActionType Log { get; } = new AclActionType("Log");

        public static bool operator ==(AclActionType left, AclActionType right) => left.Equals(right);
        public static bool operator !=(AclActionType left, AclActionType right) => !left.Equals(right);

        public static explicit operator string(AclActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AclActionType other && Equals(other);
        public bool Equals(AclActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify action.
    /// </summary>
    [EnumType]
    public readonly struct Action : IEquatable<Action>
    {
        private readonly string _value;

        private Action(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Action Allow { get; } = new Action("Allow");
        public static Action Deny { get; } = new Action("Deny");

        public static bool operator ==(Action left, Action right) => left.Equals(right);
        public static bool operator !=(Action left, Action right) => !left.Equals(right);

        public static explicit operator string(Action value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Action other && Equals(other);
        public bool Equals(Action other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
    /// </summary>
    [EnumType]
    public readonly struct AddressFamilyType : IEquatable<AddressFamilyType>
    {
        private readonly string _value;

        private AddressFamilyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AddressFamilyType IPv4 { get; } = new AddressFamilyType("IPv4");
        public static AddressFamilyType IPv6 { get; } = new AddressFamilyType("IPv6");

        public static bool operator ==(AddressFamilyType left, AddressFamilyType right) => left.Equals(right);
        public static bool operator !=(AddressFamilyType left, AddressFamilyType right) => !left.Equals(right);

        public static explicit operator string(AddressFamilyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressFamilyType other && Equals(other);
        public bool Equals(AddressFamilyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Or Disable state.
    /// </summary>
    [EnumType]
    public readonly struct AllowASOverride : IEquatable<AllowASOverride>
    {
        private readonly string _value;

        private AllowASOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowASOverride Enable { get; } = new AllowASOverride("Enable");
        public static AllowASOverride Disable { get; } = new AllowASOverride("Disable");

        public static bool operator ==(AllowASOverride left, AllowASOverride right) => left.Equals(right);
        public static bool operator !=(AllowASOverride left, AllowASOverride right) => !left.Equals(right);

        public static explicit operator string(AllowASOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowASOverride other && Equals(other);
        public bool Equals(AllowASOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Based on this option layer3 parameters are mandatory. Example: True/False
    /// </summary>
    [EnumType]
    public readonly struct BooleanEnumProperty : IEquatable<BooleanEnumProperty>
    {
        private readonly string _value;

        private BooleanEnumProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BooleanEnumProperty True { get; } = new BooleanEnumProperty("True");
        public static BooleanEnumProperty False { get; } = new BooleanEnumProperty("False");

        public static bool operator ==(BooleanEnumProperty left, BooleanEnumProperty right) => left.Equals(right);
        public static bool operator !=(BooleanEnumProperty left, BooleanEnumProperty right) => !left.Equals(right);

        public static explicit operator string(BooleanEnumProperty value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BooleanEnumProperty other && Equals(other);
        public bool Equals(BooleanEnumProperty other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
    /// </summary>
    [EnumType]
    public readonly struct CommunityActionTypes : IEquatable<CommunityActionTypes>
    {
        private readonly string _value;

        private CommunityActionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommunityActionTypes Permit { get; } = new CommunityActionTypes("Permit");
        public static CommunityActionTypes Deny { get; } = new CommunityActionTypes("Deny");

        public static bool operator ==(CommunityActionTypes left, CommunityActionTypes right) => left.Equals(right);
        public static bool operator !=(CommunityActionTypes left, CommunityActionTypes right) => !left.Equals(right);

        public static explicit operator string(CommunityActionTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommunityActionTypes other && Equals(other);
        public bool Equals(CommunityActionTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify prefix-list bounds.
    /// </summary>
    [EnumType]
    public readonly struct Condition : IEquatable<Condition>
    {
        private readonly string _value;

        private Condition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Condition EqualTo { get; } = new Condition("EqualTo");
        public static Condition GreaterThanOrEqualTo { get; } = new Condition("GreaterThanOrEqualTo");
        public static Condition LesserThanOrEqualTo { get; } = new Condition("LesserThanOrEqualTo");
        public static Condition Range { get; } = new Condition("Range");

        public static bool operator ==(Condition left, Condition right) => left.Equals(right);
        public static bool operator !=(Condition left, Condition right) => !left.Equals(right);

        public static explicit operator string(Condition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Condition other && Equals(other);
        public bool Equals(Condition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Input method to configure Network Tap Rule.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType File { get; } = new ConfigurationType("File");
        public static ConfigurationType Inline { get; } = new ConfigurationType("Inline");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of destination. Input can be IsolationDomain or Direct.
    /// </summary>
    [EnumType]
    public readonly struct DestinationType : IEquatable<DestinationType>
    {
        private readonly string _value;

        private DestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationType IsolationDomain { get; } = new DestinationType("IsolationDomain");
        public static DestinationType Direct { get; } = new DestinationType("Direct");

        public static bool operator ==(DestinationType left, DestinationType right) => left.Equals(right);
        public static bool operator !=(DestinationType left, DestinationType right) => !left.Equals(right);

        public static explicit operator string(DestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationType other && Equals(other);
        public bool Equals(DestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of encapsulation.
    /// </summary>
    [EnumType]
    public readonly struct Encapsulation : IEquatable<Encapsulation>
    {
        private readonly string _value;

        private Encapsulation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Encapsulation None { get; } = new Encapsulation("None");
        public static Encapsulation GRE { get; } = new Encapsulation("GRE");

        public static bool operator ==(Encapsulation left, Encapsulation right) => left.Equals(right);
        public static bool operator !=(Encapsulation left, Encapsulation right) => !left.Equals(right);

        public static explicit operator string(Encapsulation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Encapsulation other && Equals(other);
        public bool Equals(Encapsulation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Encapsulation Type that needs to be matched.
    /// </summary>
    [EnumType]
    public readonly struct EncapsulationType : IEquatable<EncapsulationType>
    {
        private readonly string _value;

        private EncapsulationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncapsulationType None { get; } = new EncapsulationType("None");
        public static EncapsulationType GTPv1 { get; } = new EncapsulationType("GTPv1");

        public static bool operator ==(EncapsulationType left, EncapsulationType right) => left.Equals(right);
        public static bool operator !=(EncapsulationType left, EncapsulationType right) => !left.Equals(right);

        public static explicit operator string(EncapsulationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncapsulationType other && Equals(other);
        public bool Equals(EncapsulationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Extension. Example: NoExtension | NPB.
    /// </summary>
    [EnumType]
    public readonly struct Extension : IEquatable<Extension>
    {
        private readonly string _value;

        private Extension(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Extension NoExtension { get; } = new Extension("NoExtension");
        public static Extension NPB { get; } = new Extension("NPB");

        public static bool operator ==(Extension left, Extension right) => left.Equals(right);
        public static bool operator !=(Extension left, Extension right) => !left.Equals(right);

        public static explicit operator string(Extension value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Extension other && Equals(other);
        public bool Equals(Extension other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gateway Type of the resource.
    /// </summary>
    [EnumType]
    public readonly struct GatewayType : IEquatable<GatewayType>
    {
        private readonly string _value;

        private GatewayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayType Infrastructure { get; } = new GatewayType("Infrastructure");
        public static GatewayType Workload { get; } = new GatewayType("Workload");

        public static bool operator ==(GatewayType left, GatewayType right) => left.Equals(right);
        public static bool operator !=(GatewayType left, GatewayType right) => !left.Equals(right);

        public static explicit operator string(GatewayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayType other && Equals(other);
        public bool Equals(GatewayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of IP Address. IPv4 or IPv6
    /// </summary>
    [EnumType]
    public readonly struct IPAddressType : IEquatable<IPAddressType>
    {
        private readonly string _value;

        private IPAddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAddressType IPv4 { get; } = new IPAddressType("IPv4");
        public static IPAddressType IPv6 { get; } = new IPAddressType("IPv6");

        public static bool operator ==(IPAddressType left, IPAddressType right) => left.Equals(right);
        public static bool operator !=(IPAddressType left, IPAddressType right) => !left.Equals(right);

        public static explicit operator string(IPAddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAddressType other && Equals(other);
        public bool Equals(IPAddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration to use NNI for Infrastructure Management. Example: True/False.
    /// </summary>
    [EnumType]
    public readonly struct IsManagementType : IEquatable<IsManagementType>
    {
        private readonly string _value;

        private IsManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsManagementType True { get; } = new IsManagementType("True");
        public static IsManagementType False { get; } = new IsManagementType("False");

        public static bool operator ==(IsManagementType left, IsManagementType right) => left.Equals(right);
        public static bool operator !=(IsManagementType left, IsManagementType right) => !left.Equals(right);

        public static explicit operator string(IsManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsManagementType other && Equals(other);
        public bool Equals(IsManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To check whether monitoring of internal network is enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct IsMonitoringEnabled : IEquatable<IsMonitoringEnabled>
    {
        private readonly string _value;

        private IsMonitoringEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsMonitoringEnabled True { get; } = new IsMonitoringEnabled("True");
        public static IsMonitoringEnabled False { get; } = new IsMonitoringEnabled("False");

        public static bool operator ==(IsMonitoringEnabled left, IsMonitoringEnabled right) => left.Equals(right);
        public static bool operator !=(IsMonitoringEnabled left, IsMonitoringEnabled right) => !left.Equals(right);

        public static explicit operator string(IsMonitoringEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsMonitoringEnabled other && Equals(other);
        public bool Equals(IsMonitoringEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
    /// </summary>
    [EnumType]
    public readonly struct IsWorkloadManagementNetworkEnabled : IEquatable<IsWorkloadManagementNetworkEnabled>
    {
        private readonly string _value;

        private IsWorkloadManagementNetworkEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsWorkloadManagementNetworkEnabled True { get; } = new IsWorkloadManagementNetworkEnabled("True");
        public static IsWorkloadManagementNetworkEnabled False { get; } = new IsWorkloadManagementNetworkEnabled("False");

        public static bool operator ==(IsWorkloadManagementNetworkEnabled left, IsWorkloadManagementNetworkEnabled right) => left.Equals(right);
        public static bool operator !=(IsWorkloadManagementNetworkEnabled left, IsWorkloadManagementNetworkEnabled right) => !left.Equals(right);

        public static explicit operator string(IsWorkloadManagementNetworkEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsWorkloadManagementNetworkEnabled other && Equals(other);
        public bool Equals(IsWorkloadManagementNetworkEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Layer4 protocol type that needs to be matched.
    /// </summary>
    [EnumType]
    public readonly struct Layer4Protocol : IEquatable<Layer4Protocol>
    {
        private readonly string _value;

        private Layer4Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Layer4Protocol TCP { get; } = new Layer4Protocol("TCP");
        public static Layer4Protocol UDP { get; } = new Layer4Protocol("UDP");

        public static bool operator ==(Layer4Protocol left, Layer4Protocol right) => left.Equals(right);
        public static bool operator !=(Layer4Protocol left, Layer4Protocol right) => !left.Equals(right);

        public static explicit operator string(Layer4Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Layer4Protocol other && Equals(other);
        public bool Equals(Layer4Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network Rack SKU name.
    /// </summary>
    [EnumType]
    public readonly struct NetworkRackType : IEquatable<NetworkRackType>
    {
        private readonly string _value;

        private NetworkRackType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkRackType Aggregate { get; } = new NetworkRackType("Aggregate");
        public static NetworkRackType Compute { get; } = new NetworkRackType("Compute");
        public static NetworkRackType Combined { get; } = new NetworkRackType("Combined");

        public static bool operator ==(NetworkRackType left, NetworkRackType right) => left.Equals(right);
        public static bool operator !=(NetworkRackType left, NetworkRackType right) => !left.Equals(right);

        public static explicit operator string(NetworkRackType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkRackType other && Equals(other);
        public bool Equals(NetworkRackType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network Fabric Controller SKU.
    /// </summary>
    [EnumType]
    public readonly struct NfcSku : IEquatable<NfcSku>
    {
        private readonly string _value;

        private NfcSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NfcSku Basic { get; } = new NfcSku("Basic");
        public static NfcSku Standard { get; } = new NfcSku("Standard");
        public static NfcSku HighPerformance { get; } = new NfcSku("HighPerformance");

        public static bool operator ==(NfcSku left, NfcSku right) => left.Equals(right);
        public static bool operator !=(NfcSku left, NfcSku right) => !left.Equals(right);

        public static explicit operator string(NfcSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NfcSku other && Equals(other);
        public bool Equals(NfcSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of NNI used. Example: CE | NPB
    /// </summary>
    [EnumType]
    public readonly struct NniType : IEquatable<NniType>
    {
        private readonly string _value;

        private NniType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NniType CE { get; } = new NniType("CE");
        public static NniType NPB { get; } = new NniType("NPB");

        public static bool operator ==(NniType left, NniType right) => left.Equals(right);
        public static bool operator !=(NniType left, NniType right) => !left.Equals(right);

        public static explicit operator string(NniType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NniType other && Equals(other);
        public bool Equals(NniType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Peering option list.
    /// </summary>
    [EnumType]
    public readonly struct PeeringOption : IEquatable<PeeringOption>
    {
        private readonly string _value;

        private PeeringOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PeeringOption OptionA { get; } = new PeeringOption("OptionA");
        public static PeeringOption OptionB { get; } = new PeeringOption("OptionB");

        public static bool operator ==(PeeringOption left, PeeringOption right) => left.Equals(right);
        public static bool operator !=(PeeringOption left, PeeringOption right) => !left.Equals(right);

        public static explicit operator string(PeeringOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PeeringOption other && Equals(other);
        public bool Equals(PeeringOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Polling type.
    /// </summary>
    [EnumType]
    public readonly struct PollingType : IEquatable<PollingType>
    {
        private readonly string _value;

        private PollingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PollingType Pull { get; } = new PollingType("Pull");
        public static PollingType Push { get; } = new PollingType("Push");

        public static bool operator ==(PollingType left, PollingType right) => left.Equals(right);
        public static bool operator !=(PollingType left, PollingType right) => !left.Equals(right);

        public static explicit operator string(PollingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PollingType other && Equals(other);
        public bool Equals(PollingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Port type that needs to be matched.
    /// </summary>
    [EnumType]
    public readonly struct PortType : IEquatable<PortType>
    {
        private readonly string _value;

        private PortType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortType SourcePort { get; } = new PortType("SourcePort");
        public static PortType DestinationPort { get; } = new PortType("DestinationPort");

        public static bool operator ==(PortType left, PortType right) => left.Equals(right);
        public static bool operator !=(PortType left, PortType right) => !left.Equals(right);

        public static explicit operator string(PortType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortType other && Equals(other);
        public bool Equals(PortType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP Prefix Type that needs to be matched.
    /// </summary>
    [EnumType]
    public readonly struct PrefixType : IEquatable<PrefixType>
    {
        private readonly string _value;

        private PrefixType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrefixType Prefix { get; } = new PrefixType("Prefix");
        public static PrefixType LongestPrefix { get; } = new PrefixType("LongestPrefix");

        public static bool operator ==(PrefixType left, PrefixType right) => left.Equals(right);
        public static bool operator !=(PrefixType left, PrefixType right) => !left.Equals(right);

        public static explicit operator string(PrefixType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrefixType other && Equals(other);
        public bool Equals(PrefixType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Connected Subnets. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeConnectedSubnets : IEquatable<RedistributeConnectedSubnets>
    {
        private readonly string _value;

        private RedistributeConnectedSubnets(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeConnectedSubnets True { get; } = new RedistributeConnectedSubnets("True");
        public static RedistributeConnectedSubnets False { get; } = new RedistributeConnectedSubnets("False");

        public static bool operator ==(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => left.Equals(right);
        public static bool operator !=(RedistributeConnectedSubnets left, RedistributeConnectedSubnets right) => !left.Equals(right);

        public static explicit operator string(RedistributeConnectedSubnets value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeConnectedSubnets other && Equals(other);
        public bool Equals(RedistributeConnectedSubnets other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Advertise Static Routes. Ex: "True" | "False".
    /// </summary>
    [EnumType]
    public readonly struct RedistributeStaticRoutes : IEquatable<RedistributeStaticRoutes>
    {
        private readonly string _value;

        private RedistributeStaticRoutes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedistributeStaticRoutes True { get; } = new RedistributeStaticRoutes("True");
        public static RedistributeStaticRoutes False { get; } = new RedistributeStaticRoutes("False");

        public static bool operator ==(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => left.Equals(right);
        public static bool operator !=(RedistributeStaticRoutes left, RedistributeStaticRoutes right) => !left.Equals(right);

        public static explicit operator string(RedistributeStaticRoutes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedistributeStaticRoutes other && Equals(other);
        public bool Equals(RedistributeStaticRoutes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action type. Example: Permit | Deny | Continue.
    /// </summary>
    [EnumType]
    public readonly struct RoutePolicyActionType : IEquatable<RoutePolicyActionType>
    {
        private readonly string _value;

        private RoutePolicyActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutePolicyActionType Permit { get; } = new RoutePolicyActionType("Permit");
        public static RoutePolicyActionType Deny { get; } = new RoutePolicyActionType("Deny");
        public static RoutePolicyActionType Continue { get; } = new RoutePolicyActionType("Continue");

        public static bool operator ==(RoutePolicyActionType left, RoutePolicyActionType right) => left.Equals(right);
        public static bool operator !=(RoutePolicyActionType left, RoutePolicyActionType right) => !left.Equals(right);

        public static explicit operator string(RoutePolicyActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutePolicyActionType other && Equals(other);
        public bool Equals(RoutePolicyActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the condition used.
    /// </summary>
    [EnumType]
    public readonly struct RoutePolicyConditionType : IEquatable<RoutePolicyConditionType>
    {
        private readonly string _value;

        private RoutePolicyConditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutePolicyConditionType Or { get; } = new RoutePolicyConditionType("Or");
        public static RoutePolicyConditionType And { get; } = new RoutePolicyConditionType("And");

        public static bool operator ==(RoutePolicyConditionType left, RoutePolicyConditionType right) => left.Equals(right);
        public static bool operator !=(RoutePolicyConditionType left, RoutePolicyConditionType right) => !left.Equals(right);

        public static explicit operator string(RoutePolicyConditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutePolicyConditionType other && Equals(other);
        public bool Equals(RoutePolicyConditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP Address type that needs to be matched.
    /// </summary>
    [EnumType]
    public readonly struct SourceDestinationType : IEquatable<SourceDestinationType>
    {
        private readonly string _value;

        private SourceDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceDestinationType SourceIP { get; } = new SourceDestinationType("SourceIP");
        public static SourceDestinationType DestinationIP { get; } = new SourceDestinationType("DestinationIP");

        public static bool operator ==(SourceDestinationType left, SourceDestinationType right) => left.Equals(right);
        public static bool operator !=(SourceDestinationType left, SourceDestinationType right) => !left.Equals(right);

        public static explicit operator string(SourceDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceDestinationType other && Equals(other);
        public bool Equals(SourceDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of actions that can be performed.
    /// </summary>
    [EnumType]
    public readonly struct TapRuleActionType : IEquatable<TapRuleActionType>
    {
        private readonly string _value;

        private TapRuleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TapRuleActionType Drop { get; } = new TapRuleActionType("Drop");
        public static TapRuleActionType Count { get; } = new TapRuleActionType("Count");
        public static TapRuleActionType Log { get; } = new TapRuleActionType("Log");
        public static TapRuleActionType Replicate { get; } = new TapRuleActionType("Replicate");
        public static TapRuleActionType Goto { get; } = new TapRuleActionType("Goto");
        public static TapRuleActionType Redirect { get; } = new TapRuleActionType("Redirect");
        public static TapRuleActionType Mirror { get; } = new TapRuleActionType("Mirror");

        public static bool operator ==(TapRuleActionType left, TapRuleActionType right) => left.Equals(right);
        public static bool operator !=(TapRuleActionType left, TapRuleActionType right) => !left.Equals(right);

        public static explicit operator string(TapRuleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TapRuleActionType other && Equals(other);
        public bool Equals(TapRuleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// 
    /// `Internet` - Advertise routes to internet community.
    ///  `LocalAS` - Advertise routes to only localAS peers.
    ///  `NoAdvertise` - Don't advertise routes to any peer.
    /// `NoExport` - Don't export to next AS.
    /// `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
    /// </summary>
    [EnumType]
    public readonly struct WellKnownCommunities : IEquatable<WellKnownCommunities>
    {
        private readonly string _value;

        private WellKnownCommunities(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WellKnownCommunities Internet { get; } = new WellKnownCommunities("Internet");
        public static WellKnownCommunities LocalAS { get; } = new WellKnownCommunities("LocalAS");
        public static WellKnownCommunities NoAdvertise { get; } = new WellKnownCommunities("NoAdvertise");
        public static WellKnownCommunities NoExport { get; } = new WellKnownCommunities("NoExport");
        public static WellKnownCommunities GShut { get; } = new WellKnownCommunities("GShut");

        public static bool operator ==(WellKnownCommunities left, WellKnownCommunities right) => left.Equals(right);
        public static bool operator !=(WellKnownCommunities left, WellKnownCommunities right) => !left.Equals(right);

        public static explicit operator string(WellKnownCommunities value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WellKnownCommunities other && Equals(other);
        public bool Equals(WellKnownCommunities other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
