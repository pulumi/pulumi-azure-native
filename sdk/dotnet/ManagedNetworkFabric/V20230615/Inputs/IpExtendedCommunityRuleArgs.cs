// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615.Inputs
{

    /// <summary>
    /// List of IP Extended Community Rules.
    /// </summary>
    public sealed class IpExtendedCommunityRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to be taken on the configuration. Example: Permit | Deny.
        /// </summary>
        [Input("action", required: true)]
        public InputUnion<string, Pulumi.AzureNative.ManagedNetworkFabric.V20230615.CommunityActionTypes> Action { get; set; } = null!;

        [Input("routeTargets", required: true)]
        private InputList<string>? _routeTargets;

        /// <summary>
        /// Route Target List.The expected formats are ASN(plain):NN &gt;&gt; example 4294967294:50, ASN.ASN:NN &gt;&gt; example 65533.65333:40, IP-address:NN &gt;&gt; example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295.
        /// </summary>
        public InputList<string> RouteTargets
        {
            get => _routeTargets ?? (_routeTargets = new InputList<string>());
            set => _routeTargets = value;
        }

        /// <summary>
        /// Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
        /// </summary>
        [Input("sequenceNumber", required: true)]
        public Input<double> SequenceNumber { get; set; } = null!;

        public IpExtendedCommunityRuleArgs()
        {
        }
        public static new IpExtendedCommunityRuleArgs Empty => new IpExtendedCommunityRuleArgs();
    }
}
