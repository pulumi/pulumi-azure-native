// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    public static class GetNetworkDevice
    {
        /// <summary>
        /// Gets the Network Device resource details.
        /// </summary>
        public static Task<GetNetworkDeviceResult> InvokeAsync(GetNetworkDeviceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkDeviceResult>("azure-native:managednetworkfabric/v20230615:getNetworkDevice", args ?? new GetNetworkDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the Network Device resource details.
        /// </summary>
        public static Output<GetNetworkDeviceResult> Invoke(GetNetworkDeviceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkDeviceResult>("azure-native:managednetworkfabric/v20230615:getNetworkDevice", args ?? new GetNetworkDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Device.
        /// </summary>
        [Input("networkDeviceName", required: true)]
        public string NetworkDeviceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkDeviceArgs()
        {
        }
        public static new GetNetworkDeviceArgs Empty => new GetNetworkDeviceArgs();
    }

    public sealed class GetNetworkDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Device.
        /// </summary>
        [Input("networkDeviceName", required: true)]
        public Input<string> NetworkDeviceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkDeviceInvokeArgs()
        {
        }
        public static new GetNetworkDeviceInvokeArgs Empty => new GetNetworkDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkDeviceResult
    {
        /// <summary>
        /// Administrative state of the resource.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// Configuration state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// The host name of the device.
        /// </summary>
        public readonly string? HostName;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Management IPv4 Address.
        /// </summary>
        public readonly string ManagementIpv4Address;
        /// <summary>
        /// Management IPv6 Address.
        /// </summary>
        public readonly string ManagementIpv6Address;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NetworkDeviceRole is the device role: Example: CE | ToR.
        /// </summary>
        public readonly string NetworkDeviceRole;
        /// <summary>
        /// Network Device SKU name.
        /// </summary>
        public readonly string? NetworkDeviceSku;
        /// <summary>
        /// Reference to network rack resource id.
        /// </summary>
        public readonly string NetworkRackId;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber.
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Current version of the device as defined in SKU.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetNetworkDeviceResult(
            string administrativeState,

            string? annotation,

            string configurationState,

            string? hostName,

            string id,

            string location,

            string managementIpv4Address,

            string managementIpv6Address,

            string name,

            string networkDeviceRole,

            string? networkDeviceSku,

            string networkRackId,

            string provisioningState,

            string serialNumber,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string version)
        {
            AdministrativeState = administrativeState;
            Annotation = annotation;
            ConfigurationState = configurationState;
            HostName = hostName;
            Id = id;
            Location = location;
            ManagementIpv4Address = managementIpv4Address;
            ManagementIpv6Address = managementIpv6Address;
            Name = name;
            NetworkDeviceRole = networkDeviceRole;
            NetworkDeviceSku = networkDeviceSku;
            NetworkRackId = networkRackId;
            ProvisioningState = provisioningState;
            SerialNumber = serialNumber;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
