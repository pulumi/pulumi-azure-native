// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    public static class GetRoutePolicy
    {
        /// <summary>
        /// Implements Route Policy GET method.
        /// </summary>
        public static Task<GetRoutePolicyResult> InvokeAsync(GetRoutePolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoutePolicyResult>("azure-native:managednetworkfabric/v20230615:getRoutePolicy", args ?? new GetRoutePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Implements Route Policy GET method.
        /// </summary>
        public static Output<GetRoutePolicyResult> Invoke(GetRoutePolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoutePolicyResult>("azure-native:managednetworkfabric/v20230615:getRoutePolicy", args ?? new GetRoutePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoutePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Route Policy.
        /// </summary>
        [Input("routePolicyName", required: true)]
        public string RoutePolicyName { get; set; } = null!;

        public GetRoutePolicyArgs()
        {
        }
        public static new GetRoutePolicyArgs Empty => new GetRoutePolicyArgs();
    }

    public sealed class GetRoutePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Route Policy.
        /// </summary>
        [Input("routePolicyName", required: true)]
        public Input<string> RoutePolicyName { get; set; } = null!;

        public GetRoutePolicyInvokeArgs()
        {
        }
        public static new GetRoutePolicyInvokeArgs Empty => new GetRoutePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoutePolicyResult
    {
        /// <summary>
        /// AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
        /// </summary>
        public readonly string? AddressFamilyType;
        /// <summary>
        /// Administrative state of the resource.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// Configuration state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
        /// </summary>
        public readonly string? DefaultAction;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Arm Resource ID of Network Fabric.
        /// </summary>
        public readonly string NetworkFabricId;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Route Policy statements.
        /// </summary>
        public readonly ImmutableArray<Outputs.RoutePolicyStatementPropertiesResponse> Statements;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRoutePolicyResult(
            string? addressFamilyType,

            string administrativeState,

            string? annotation,

            string configurationState,

            string? defaultAction,

            string id,

            string location,

            string name,

            string networkFabricId,

            string provisioningState,

            ImmutableArray<Outputs.RoutePolicyStatementPropertiesResponse> statements,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AddressFamilyType = addressFamilyType;
            AdministrativeState = administrativeState;
            Annotation = annotation;
            ConfigurationState = configurationState;
            DefaultAction = defaultAction;
            Id = id;
            Location = location;
            Name = name;
            NetworkFabricId = networkFabricId;
            ProvisioningState = provisioningState;
            Statements = statements;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
