// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    public static class GetNetworkToNetworkInterconnect
    {
        /// <summary>
        /// Implements NetworkToNetworkInterconnects GET method.
        /// </summary>
        public static Task<GetNetworkToNetworkInterconnectResult> InvokeAsync(GetNetworkToNetworkInterconnectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkToNetworkInterconnectResult>("azure-native:managednetworkfabric/v20230615:getNetworkToNetworkInterconnect", args ?? new GetNetworkToNetworkInterconnectArgs(), options.WithDefaults());

        /// <summary>
        /// Implements NetworkToNetworkInterconnects GET method.
        /// </summary>
        public static Output<GetNetworkToNetworkInterconnectResult> Invoke(GetNetworkToNetworkInterconnectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkToNetworkInterconnectResult>("azure-native:managednetworkfabric/v20230615:getNetworkToNetworkInterconnect", args ?? new GetNetworkToNetworkInterconnectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkToNetworkInterconnectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Fabric.
        /// </summary>
        [Input("networkFabricName", required: true)]
        public string NetworkFabricName { get; set; } = null!;

        /// <summary>
        /// Name of the Network to Network Interconnect.
        /// </summary>
        [Input("networkToNetworkInterconnectName", required: true)]
        public string NetworkToNetworkInterconnectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkToNetworkInterconnectArgs()
        {
        }
        public static new GetNetworkToNetworkInterconnectArgs Empty => new GetNetworkToNetworkInterconnectArgs();
    }

    public sealed class GetNetworkToNetworkInterconnectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Fabric.
        /// </summary>
        [Input("networkFabricName", required: true)]
        public Input<string> NetworkFabricName { get; set; } = null!;

        /// <summary>
        /// Name of the Network to Network Interconnect.
        /// </summary>
        [Input("networkToNetworkInterconnectName", required: true)]
        public Input<string> NetworkToNetworkInterconnectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkToNetworkInterconnectInvokeArgs()
        {
        }
        public static new GetNetworkToNetworkInterconnectInvokeArgs Empty => new GetNetworkToNetworkInterconnectInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkToNetworkInterconnectResult
    {
        /// <summary>
        /// Administrative state of the resource.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Configuration state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// Egress Acl. ARM resource ID of Access Control Lists.
        /// </summary>
        public readonly string? EgressAclId;
        /// <summary>
        /// Export Route Policy configuration.
        /// </summary>
        public readonly Outputs.ExportRoutePolicyInformationResponse? ExportRoutePolicy;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Import Route Policy configuration.
        /// </summary>
        public readonly Outputs.ImportRoutePolicyInformationResponse? ImportRoutePolicy;
        /// <summary>
        /// Ingress Acl. ARM resource ID of Access Control Lists.
        /// </summary>
        public readonly string? IngressAclId;
        /// <summary>
        /// Configuration to use NNI for Infrastructure Management. Example: True/False.
        /// </summary>
        public readonly string? IsManagementType;
        /// <summary>
        /// Common properties for Layer2 Configuration.
        /// </summary>
        public readonly Outputs.Layer2ConfigurationResponse? Layer2Configuration;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of NNI used. Example: CE | NPB
        /// </summary>
        public readonly string? NniType;
        /// <summary>
        /// NPB Static Route Configuration properties.
        /// </summary>
        public readonly Outputs.NpbStaticRouteConfigurationResponse? NpbStaticRouteConfiguration;
        /// <summary>
        /// Common properties for Layer3Configuration.
        /// </summary>
        public readonly Outputs.NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration? OptionBLayer3Configuration;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Based on this option layer3 parameters are mandatory. Example: True/False
        /// </summary>
        public readonly string UseOptionB;

        [OutputConstructor]
        private GetNetworkToNetworkInterconnectResult(
            string administrativeState,

            string configurationState,

            string? egressAclId,

            Outputs.ExportRoutePolicyInformationResponse? exportRoutePolicy,

            string id,

            Outputs.ImportRoutePolicyInformationResponse? importRoutePolicy,

            string? ingressAclId,

            string? isManagementType,

            Outputs.Layer2ConfigurationResponse? layer2Configuration,

            string name,

            string? nniType,

            Outputs.NpbStaticRouteConfigurationResponse? npbStaticRouteConfiguration,

            Outputs.NetworkToNetworkInterconnectPropertiesResponseOptionBLayer3Configuration? optionBLayer3Configuration,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type,

            string useOptionB)
        {
            AdministrativeState = administrativeState;
            ConfigurationState = configurationState;
            EgressAclId = egressAclId;
            ExportRoutePolicy = exportRoutePolicy;
            Id = id;
            ImportRoutePolicy = importRoutePolicy;
            IngressAclId = ingressAclId;
            IsManagementType = isManagementType;
            Layer2Configuration = layer2Configuration;
            Name = name;
            NniType = nniType;
            NpbStaticRouteConfiguration = npbStaticRouteConfiguration;
            OptionBLayer3Configuration = optionBLayer3Configuration;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
            UseOptionB = useOptionB;
        }
    }
}
