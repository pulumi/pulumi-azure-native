// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    public static class GetInternalNetwork
    {
        /// <summary>
        /// Gets a InternalNetworks.
        /// </summary>
        public static Task<GetInternalNetworkResult> InvokeAsync(GetInternalNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInternalNetworkResult>("azure-native:managednetworkfabric/v20230615:getInternalNetwork", args ?? new GetInternalNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a InternalNetworks.
        /// </summary>
        public static Output<GetInternalNetworkResult> Invoke(GetInternalNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInternalNetworkResult>("azure-native:managednetworkfabric/v20230615:getInternalNetwork", args ?? new GetInternalNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInternalNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Internal Network.
        /// </summary>
        [Input("internalNetworkName", required: true)]
        public string InternalNetworkName { get; set; } = null!;

        /// <summary>
        /// Name of the L3 Isolation Domain.
        /// </summary>
        [Input("l3IsolationDomainName", required: true)]
        public string L3IsolationDomainName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetInternalNetworkArgs()
        {
        }
        public static new GetInternalNetworkArgs Empty => new GetInternalNetworkArgs();
    }

    public sealed class GetInternalNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Internal Network.
        /// </summary>
        [Input("internalNetworkName", required: true)]
        public Input<string> InternalNetworkName { get; set; } = null!;

        /// <summary>
        /// Name of the L3 Isolation Domain.
        /// </summary>
        [Input("l3IsolationDomainName", required: true)]
        public Input<string> L3IsolationDomainName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetInternalNetworkInvokeArgs()
        {
        }
        public static new GetInternalNetworkInvokeArgs Empty => new GetInternalNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetInternalNetworkResult
    {
        /// <summary>
        /// Administrative state of the resource.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// BGP configuration properties.
        /// </summary>
        public readonly Outputs.InternalNetworkPropertiesResponseBgpConfiguration? BgpConfiguration;
        /// <summary>
        /// Configuration state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// List of Connected IPv4 Subnets.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectedSubnetResponse> ConnectedIPv4Subnets;
        /// <summary>
        /// List of connected IPv6 Subnets.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectedSubnetResponse> ConnectedIPv6Subnets;
        /// <summary>
        /// Egress Acl. ARM resource ID of Access Control Lists.
        /// </summary>
        public readonly string? EgressAclId;
        /// <summary>
        /// Export Route Policy either IPv4 or IPv6.
        /// </summary>
        public readonly Outputs.ExportRoutePolicyResponse? ExportRoutePolicy;
        /// <summary>
        /// ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
        /// </summary>
        public readonly string? ExportRoutePolicyId;
        /// <summary>
        /// Extension. Example: NoExtension | NPB.
        /// </summary>
        public readonly string? Extension;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Import Route Policy either IPv4 or IPv6.
        /// </summary>
        public readonly Outputs.ImportRoutePolicyResponse? ImportRoutePolicy;
        /// <summary>
        /// ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
        /// </summary>
        public readonly string? ImportRoutePolicyId;
        /// <summary>
        /// Ingress Acl. ARM resource ID of Access Control Lists.
        /// </summary>
        public readonly string? IngressAclId;
        /// <summary>
        /// To check whether monitoring of internal network is enabled or not.
        /// </summary>
        public readonly string? IsMonitoringEnabled;
        /// <summary>
        /// Maximum transmission unit. Default value is 1500.
        /// </summary>
        public readonly int? Mtu;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Static Route Configuration properties.
        /// </summary>
        public readonly Outputs.InternalNetworkPropertiesResponseStaticRouteConfiguration? StaticRouteConfiguration;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Vlan identifier. Example: 1001.
        /// </summary>
        public readonly int VlanId;

        [OutputConstructor]
        private GetInternalNetworkResult(
            string administrativeState,

            string? annotation,

            Outputs.InternalNetworkPropertiesResponseBgpConfiguration? bgpConfiguration,

            string configurationState,

            ImmutableArray<Outputs.ConnectedSubnetResponse> connectedIPv4Subnets,

            ImmutableArray<Outputs.ConnectedSubnetResponse> connectedIPv6Subnets,

            string? egressAclId,

            Outputs.ExportRoutePolicyResponse? exportRoutePolicy,

            string? exportRoutePolicyId,

            string? extension,

            string id,

            Outputs.ImportRoutePolicyResponse? importRoutePolicy,

            string? importRoutePolicyId,

            string? ingressAclId,

            string? isMonitoringEnabled,

            int? mtu,

            string name,

            string provisioningState,

            Outputs.InternalNetworkPropertiesResponseStaticRouteConfiguration? staticRouteConfiguration,

            Outputs.SystemDataResponse systemData,

            string type,

            int vlanId)
        {
            AdministrativeState = administrativeState;
            Annotation = annotation;
            BgpConfiguration = bgpConfiguration;
            ConfigurationState = configurationState;
            ConnectedIPv4Subnets = connectedIPv4Subnets;
            ConnectedIPv6Subnets = connectedIPv6Subnets;
            EgressAclId = egressAclId;
            ExportRoutePolicy = exportRoutePolicy;
            ExportRoutePolicyId = exportRoutePolicyId;
            Extension = extension;
            Id = id;
            ImportRoutePolicy = importRoutePolicy;
            ImportRoutePolicyId = importRoutePolicyId;
            IngressAclId = ingressAclId;
            IsMonitoringEnabled = isMonitoringEnabled;
            Mtu = mtu;
            Name = name;
            ProvisioningState = provisioningState;
            StaticRouteConfiguration = staticRouteConfiguration;
            SystemData = systemData;
            Type = type;
            VlanId = vlanId;
        }
    }
}
