// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric.V20230615
{
    /// <summary>
    /// The Network Tap resource definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:managednetworkfabric/v20230615:NetworkTap")]
    public partial class NetworkTap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Administrative state of the resource. Example -Enabled/Disabled
        /// </summary>
        [Output("administrativeState")]
        public Output<string> AdministrativeState { get; private set; } = null!;

        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Output("annotation")]
        public Output<string?> Annotation { get; private set; } = null!;

        /// <summary>
        /// Gets the configurations state of the resource.
        /// </summary>
        [Output("configurationState")]
        public Output<string> ConfigurationState { get; private set; } = null!;

        /// <summary>
        /// List of destinations to send the filter traffic.
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.NetworkTapPropertiesResponseDestinations>> Destinations { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ARM resource ID of the Network Packet Broker.
        /// </summary>
        [Output("networkPacketBrokerId")]
        public Output<string> NetworkPacketBrokerId { get; private set; } = null!;

        /// <summary>
        /// Polling type.
        /// </summary>
        [Output("pollingType")]
        public Output<string?> PollingType { get; private set; } = null!;

        /// <summary>
        /// Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
        /// </summary>
        [Output("sourceTapRuleId")]
        public Output<string> SourceTapRuleId { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkTap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkTap(string name, NetworkTapArgs args, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric/v20230615:NetworkTap", name, args ?? new NetworkTapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkTap(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:managednetworkfabric/v20230615:NetworkTap", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:managednetworkfabric:NetworkTap" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkTap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkTap Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NetworkTap(name, id, options);
        }
    }

    public sealed class NetworkTapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        [Input("annotation")]
        public Input<string>? Annotation { get; set; }

        [Input("destinations", required: true)]
        private InputList<Inputs.NetworkTapPropertiesDestinationsArgs>? _destinations;

        /// <summary>
        /// List of destinations to send the filter traffic.
        /// </summary>
        public InputList<Inputs.NetworkTapPropertiesDestinationsArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.NetworkTapPropertiesDestinationsArgs>());
            set => _destinations = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// ARM resource ID of the Network Packet Broker.
        /// </summary>
        [Input("networkPacketBrokerId", required: true)]
        public Input<string> NetworkPacketBrokerId { get; set; } = null!;

        /// <summary>
        /// Name of the Network Tap.
        /// </summary>
        [Input("networkTapName")]
        public Input<string>? NetworkTapName { get; set; }

        /// <summary>
        /// Polling type.
        /// </summary>
        [Input("pollingType")]
        public InputUnion<string, Pulumi.AzureNative.ManagedNetworkFabric.V20230615.PollingType>? PollingType { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkTapArgs()
        {
            PollingType = "Pull";
        }
        public static new NetworkTapArgs Empty => new NetworkTapArgs();
    }
}
