// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ManagedNetworkFabric
{
    public static class GetNetworkTapRule
    {
        /// <summary>
        /// Get Network Tap Rule resource details.
        /// Azure REST API version: 2023-06-15.
        /// </summary>
        public static Task<GetNetworkTapRuleResult> InvokeAsync(GetNetworkTapRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkTapRuleResult>("azure-native:managednetworkfabric:getNetworkTapRule", args ?? new GetNetworkTapRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Get Network Tap Rule resource details.
        /// Azure REST API version: 2023-06-15.
        /// </summary>
        public static Output<GetNetworkTapRuleResult> Invoke(GetNetworkTapRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkTapRuleResult>("azure-native:managednetworkfabric:getNetworkTapRule", args ?? new GetNetworkTapRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkTapRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Tap Rule.
        /// </summary>
        [Input("networkTapRuleName", required: true)]
        public string NetworkTapRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkTapRuleArgs()
        {
        }
        public static new GetNetworkTapRuleArgs Empty => new GetNetworkTapRuleArgs();
    }

    public sealed class GetNetworkTapRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Tap Rule.
        /// </summary>
        [Input("networkTapRuleName", required: true)]
        public Input<string> NetworkTapRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkTapRuleInvokeArgs()
        {
        }
        public static new GetNetworkTapRuleInvokeArgs Empty => new GetNetworkTapRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkTapRuleResult
    {
        /// <summary>
        /// Administrative state of the resource.
        /// </summary>
        public readonly string AdministrativeState;
        /// <summary>
        /// Switch configuration description.
        /// </summary>
        public readonly string? Annotation;
        /// <summary>
        /// Configuration state of the resource.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// Input method to configure Network Tap Rule.
        /// </summary>
        public readonly string ConfigurationType;
        /// <summary>
        /// List of dynamic match configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.CommonDynamicMatchConfigurationResponse> DynamicMatchConfigurations;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The last sync timestamp.
        /// </summary>
        public readonly string LastSyncedTime;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// List of match configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkTapRuleMatchConfigurationResponse> MatchConfigurations;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ARM resource Id of the NetworkTap.
        /// </summary>
        public readonly string NetworkTapId;
        /// <summary>
        /// Polling interval in seconds.
        /// </summary>
        public readonly int? PollingIntervalInSeconds;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Network Tap Rules file URL.
        /// </summary>
        public readonly string? TapRulesUrl;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkTapRuleResult(
            string administrativeState,

            string? annotation,

            string configurationState,

            string configurationType,

            ImmutableArray<Outputs.CommonDynamicMatchConfigurationResponse> dynamicMatchConfigurations,

            string id,

            string lastSyncedTime,

            string location,

            ImmutableArray<Outputs.NetworkTapRuleMatchConfigurationResponse> matchConfigurations,

            string name,

            string networkTapId,

            int? pollingIntervalInSeconds,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? tapRulesUrl,

            string type)
        {
            AdministrativeState = administrativeState;
            Annotation = annotation;
            ConfigurationState = configurationState;
            ConfigurationType = configurationType;
            DynamicMatchConfigurations = dynamicMatchConfigurations;
            Id = id;
            LastSyncedTime = lastSyncedTime;
            Location = location;
            MatchConfigurations = matchConfigurations;
            Name = name;
            NetworkTapId = networkTapId;
            PollingIntervalInSeconds = pollingIntervalInSeconds;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            TapRulesUrl = tapRulesUrl;
            Type = type;
        }
    }
}
