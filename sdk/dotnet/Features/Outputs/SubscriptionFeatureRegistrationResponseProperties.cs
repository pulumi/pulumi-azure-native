// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Features.Outputs
{

    [OutputType]
    public sealed class SubscriptionFeatureRegistrationResponseProperties
    {
        /// <summary>
        /// The feature approval type.
        /// </summary>
        public readonly string ApprovalType;
        /// <summary>
        /// Authorization Profile
        /// </summary>
        public readonly Outputs.AuthorizationProfileResponse? AuthorizationProfile;
        /// <summary>
        /// The feature description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The featureDisplayName.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The feature documentation link.
        /// </summary>
        public readonly string DocumentationLink;
        /// <summary>
        /// The featureName.
        /// </summary>
        public readonly string FeatureName;
        /// <summary>
        /// Key-value pairs for meta data.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The providerNamespace.
        /// </summary>
        public readonly string ProviderNamespace;
        /// <summary>
        /// The feature registration date.
        /// </summary>
        public readonly string RegistrationDate;
        /// <summary>
        /// The feature release date.
        /// </summary>
        public readonly string ReleaseDate;
        /// <summary>
        /// Indicates whether feature should be displayed in Portal.
        /// </summary>
        public readonly bool? ShouldFeatureDisplayInPortal;
        /// <summary>
        /// The state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The subscriptionId.
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// The tenantId.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private SubscriptionFeatureRegistrationResponseProperties(
            string approvalType,

            Outputs.AuthorizationProfileResponse? authorizationProfile,

            string? description,

            string displayName,

            string documentationLink,

            string featureName,

            ImmutableDictionary<string, string>? metadata,

            string providerNamespace,

            string registrationDate,

            string releaseDate,

            bool? shouldFeatureDisplayInPortal,

            string? state,

            string subscriptionId,

            string tenantId)
        {
            ApprovalType = approvalType;
            AuthorizationProfile = authorizationProfile;
            Description = description;
            DisplayName = displayName;
            DocumentationLink = documentationLink;
            FeatureName = featureName;
            Metadata = metadata;
            ProviderNamespace = providerNamespace;
            RegistrationDate = registrationDate;
            ReleaseDate = releaseDate;
            ShouldFeatureDisplayInPortal = shouldFeatureDisplayInPortal;
            State = state;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
        }
    }
}
