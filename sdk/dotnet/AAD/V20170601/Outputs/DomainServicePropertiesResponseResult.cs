// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.AAD.V20170601.Outputs
{

    [OutputType]
    public sealed class DomainServicePropertiesResponseResult
    {
        /// <summary>
        /// List of Domain Controller IP Address
        /// </summary>
        public readonly ImmutableArray<string> DomainControllerIpAddress;
        /// <summary>
        /// The name of the Azure domain that the user would like to deploy Domain Services to.
        /// </summary>
        public readonly string? DomainName;
        /// <summary>
        /// DomainSecurity Settings
        /// </summary>
        public readonly Outputs.DomainSecuritySettingsResponseResult? DomainSecuritySettings;
        /// <summary>
        /// Enabled or Disabled flag to turn on Group-based filtered sync
        /// </summary>
        public readonly string? FilteredSync;
        /// <summary>
        /// List of Domain Health Alerts
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthAlertResponseResult> HealthAlerts;
        /// <summary>
        /// Last domain evaluation run DateTime
        /// </summary>
        public readonly string HealthLastEvaluated;
        /// <summary>
        /// List of Domain Health Monitors
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthMonitorResponseResult> HealthMonitors;
        /// <summary>
        /// Secure LDAP Settings
        /// </summary>
        public readonly Outputs.LdapsSettingsResponseResult? LdapsSettings;
        /// <summary>
        /// Notification Settings
        /// </summary>
        public readonly Outputs.NotificationSettingsResponseResult? NotificationSettings;
        /// <summary>
        /// the current deployment or provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Status of Domain Service instance
        /// </summary>
        public readonly string ServiceStatus;
        /// <summary>
        /// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Azure Active Directory tenant id
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Virtual network site id
        /// </summary>
        public readonly string VnetSiteId;

        [OutputConstructor]
        private DomainServicePropertiesResponseResult(
            ImmutableArray<string> domainControllerIpAddress,

            string? domainName,

            Outputs.DomainSecuritySettingsResponseResult? domainSecuritySettings,

            string? filteredSync,

            ImmutableArray<Outputs.HealthAlertResponseResult> healthAlerts,

            string healthLastEvaluated,

            ImmutableArray<Outputs.HealthMonitorResponseResult> healthMonitors,

            Outputs.LdapsSettingsResponseResult? ldapsSettings,

            Outputs.NotificationSettingsResponseResult? notificationSettings,

            string provisioningState,

            string serviceStatus,

            string? subnetId,

            string tenantId,

            string vnetSiteId)
        {
            DomainControllerIpAddress = domainControllerIpAddress;
            DomainName = domainName;
            DomainSecuritySettings = domainSecuritySettings;
            FilteredSync = filteredSync;
            HealthAlerts = healthAlerts;
            HealthLastEvaluated = healthLastEvaluated;
            HealthMonitors = healthMonitors;
            LdapsSettings = ldapsSettings;
            NotificationSettings = notificationSettings;
            ProvisioningState = provisioningState;
            ServiceStatus = serviceStatus;
            SubnetId = subnetId;
            TenantId = tenantId;
            VnetSiteId = vnetSiteId;
        }
    }
}
