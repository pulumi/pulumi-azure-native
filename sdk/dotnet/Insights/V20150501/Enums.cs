// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Insights.V20150501
{
    /// <summary>
    /// Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
    /// </summary>
    [EnumType]
    public readonly struct FavoriteType : IEquatable<FavoriteType>
    {
        private readonly string _value;

        private FavoriteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FavoriteType Shared { get; } = new FavoriteType("shared");
        public static FavoriteType User { get; } = new FavoriteType("user");

        public static bool operator ==(FavoriteType left, FavoriteType right) => left.Equals(right);
        public static bool operator !=(FavoriteType left, FavoriteType right) => !left.Equals(right);

        public static explicit operator string(FavoriteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FavoriteType other && Equals(other);
        public bool Equals(FavoriteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.
    /// </summary>
    [EnumType]
    public readonly struct ItemScope : IEquatable<ItemScope>
    {
        private readonly string _value;

        private ItemScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ItemScope Shared { get; } = new ItemScope("shared");
        public static ItemScope User { get; } = new ItemScope("user");

        public static bool operator ==(ItemScope left, ItemScope right) => left.Equals(right);
        public static bool operator !=(ItemScope left, ItemScope right) => !left.Equals(right);

        public static explicit operator string(ItemScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ItemScope other && Equals(other);
        public bool Equals(ItemScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating the type of the Analytics item.
    /// </summary>
    [EnumType]
    public readonly struct ItemType : IEquatable<ItemType>
    {
        private readonly string _value;

        private ItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ItemType None { get; } = new ItemType("none");
        public static ItemType Query { get; } = new ItemType("query");
        public static ItemType Recent { get; } = new ItemType("recent");
        public static ItemType Function { get; } = new ItemType("function");

        public static bool operator ==(ItemType left, ItemType right) => left.Equals(right);
        public static bool operator !=(ItemType left, ItemType right) => !left.Equals(right);

        public static explicit operator string(ItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ItemType other && Equals(other);
        public bool Equals(ItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating if this workbook definition is owned by a specific user or is shared between all users with access to the Application Insights component.
    /// </summary>
    [EnumType]
    public readonly struct SharedTypeKind : IEquatable<SharedTypeKind>
    {
        private readonly string _value;

        private SharedTypeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SharedTypeKind Shared { get; } = new SharedTypeKind("shared");
        public static SharedTypeKind User { get; } = new SharedTypeKind("user");

        public static bool operator ==(SharedTypeKind left, SharedTypeKind right) => left.Equals(right);
        public static bool operator !=(SharedTypeKind left, SharedTypeKind right) => !left.Equals(right);

        public static explicit operator string(SharedTypeKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SharedTypeKind other && Equals(other);
        public bool Equals(SharedTypeKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
