// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20200501Preview.Inputs
{

    /// <summary>
    /// scheduled query rule Definition
    /// </summary>
    public sealed class ScheduledQueryRulePropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.ActionArgs>? _actions;
        public InputList<Inputs.ActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// The rule criteria that defines the conditions of the scheduled query rule.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.ScheduledQueryRuleCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the alert rule
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        /// </summary>
        [Input("evaluationFrequency", required: true)]
        public Input<string> EvaluationFrequency { get; set; } = null!;

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        /// </summary>
        [Input("muteActionsDuration")]
        public Input<string>? MuteActionsDuration { get; set; }

        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods)
        /// </summary>
        [Input("overrideQueryTimeRange")]
        public Input<string>? OverrideQueryTimeRange { get; set; }

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of resource id's that this scheduled query rule is scoped to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        /// </summary>
        [Input("severity", required: true)]
        public Input<double> Severity { get; set; } = null!;

        [Input("targetResourceTypes")]
        private InputList<string>? _targetResourceTypes;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        /// </summary>
        public InputList<string> TargetResourceTypes
        {
            get => _targetResourceTypes ?? (_targetResourceTypes = new InputList<string>());
            set => _targetResourceTypes = value;
        }

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public ScheduledQueryRulePropertiesArgs()
        {
        }
        public static new ScheduledQueryRulePropertiesArgs Empty => new ScheduledQueryRulePropertiesArgs();
    }
}
