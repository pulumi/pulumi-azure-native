// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20200501Preview.Outputs
{

    /// <summary>
    /// scheduled query rule Definition
    /// </summary>
    [OutputType]
    public sealed class ScheduledQueryRulePropertiesResponse
    {
        public readonly ImmutableArray<Outputs.ActionResponse> Actions;
        /// <summary>
        /// The api-version used when creating this alert rule
        /// </summary>
        public readonly string CreatedWithApiVersion;
        /// <summary>
        /// The rule criteria that defines the conditions of the scheduled query rule.
        /// </summary>
        public readonly Outputs.ScheduledQueryRuleCriteriaResponse Criteria;
        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the alert rule
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        /// </summary>
        public readonly string EvaluationFrequency;
        /// <summary>
        /// True if alert rule is legacy Log Analytic rule
        /// </summary>
        public readonly bool IsLegacyLogAnalyticsRule;
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        /// </summary>
        public readonly string? MuteActionsDuration;
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods)
        /// </summary>
        public readonly string? OverrideQueryTimeRange;
        /// <summary>
        /// The list of resource id's that this scheduled query rule is scoped to.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        /// </summary>
        public readonly double Severity;
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        /// </summary>
        public readonly ImmutableArray<string> TargetResourceTypes;
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        /// </summary>
        public readonly string WindowSize;

        [OutputConstructor]
        private ScheduledQueryRulePropertiesResponse(
            ImmutableArray<Outputs.ActionResponse> actions,

            string createdWithApiVersion,

            Outputs.ScheduledQueryRuleCriteriaResponse criteria,

            string? description,

            string? displayName,

            bool enabled,

            string evaluationFrequency,

            bool isLegacyLogAnalyticsRule,

            string? muteActionsDuration,

            string? overrideQueryTimeRange,

            ImmutableArray<string> scopes,

            double severity,

            ImmutableArray<string> targetResourceTypes,

            string windowSize)
        {
            Actions = actions;
            CreatedWithApiVersion = createdWithApiVersion;
            Criteria = criteria;
            Description = description;
            DisplayName = displayName;
            Enabled = enabled;
            EvaluationFrequency = evaluationFrequency;
            IsLegacyLogAnalyticsRule = isLegacyLogAnalyticsRule;
            MuteActionsDuration = muteActionsDuration;
            OverrideQueryTimeRange = overrideQueryTimeRange;
            Scopes = scopes;
            Severity = severity;
            TargetResourceTypes = targetResourceTypes;
            WindowSize = windowSize;
        }
    }
}
