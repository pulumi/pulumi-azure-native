// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.V20200501Preview
{
    /// <summary>
    /// The scheduled query rule resource.
    /// </summary>
    public partial class ScheduledQueryRule : Pulumi.CustomResource
    {
        [Output("actions")]
        public Output<ImmutableArray<Outputs.ActionResponse>> Actions { get; private set; } = null!;

        /// <summary>
        /// The rule criteria that defines the conditions of the scheduled query rule.
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.ScheduledQueryRuleCriteriaResponse> Criteria { get; private set; } = null!;

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        /// </summary>
        [Output("evaluationFrequency")]
        public Output<string> EvaluationFrequency { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        /// </summary>
        [Output("muteActionsDuration")]
        public Output<string?> MuteActionsDuration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of resource id's that this scheduled query rule is scoped to.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        /// </summary>
        [Output("severity")]
        public Output<double> Severity { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        /// </summary>
        [Output("targetResourceTypes")]
        public Output<ImmutableArray<string>> TargetResourceTypes { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        /// </summary>
        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledQueryRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledQueryRule(string name, ScheduledQueryRuleArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:insights/v20200501preview:ScheduledQueryRule", name, args ?? new ScheduledQueryRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduledQueryRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:insights/v20200501preview:ScheduledQueryRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:insights/latest:ScheduledQueryRule"},
                    new Pulumi.Alias { Type = "azure-nextgen:insights/v20180416:ScheduledQueryRule"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledQueryRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledQueryRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ScheduledQueryRule(name, id, options);
        }
    }

    public sealed class ScheduledQueryRuleArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.ActionArgs>? _actions;
        public InputList<Inputs.ActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.ActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// The rule criteria that defines the conditions of the scheduled query rule.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.ScheduledQueryRuleCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// The description of the scheduled query rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format.
        /// </summary>
        [Input("evaluationFrequency", required: true)]
        public Input<string> EvaluationFrequency { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
        /// </summary>
        [Input("muteActionsDuration")]
        public Input<string>? MuteActionsDuration { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of resource id's that this scheduled query rule is scoped to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest
        /// </summary>
        [Input("severity", required: true)]
        public Input<double> Severity { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targetResourceTypes")]
        private InputList<string>? _targetResourceTypes;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria
        /// </summary>
        public InputList<string> TargetResourceTypes
        {
            get => _targetResourceTypes ?? (_targetResourceTypes = new InputList<string>());
            set => _targetResourceTypes = value;
        }

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public ScheduledQueryRuleArgs()
        {
        }
    }
}
