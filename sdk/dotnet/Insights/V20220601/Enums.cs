// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Insights.V20220601
{
    /// <summary>
    /// The type of the column data.
    /// </summary>
    [EnumType]
    public readonly struct KnownColumnDefinitionType : IEquatable<KnownColumnDefinitionType>
    {
        private readonly string _value;

        private KnownColumnDefinitionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownColumnDefinitionType @String { get; } = new KnownColumnDefinitionType("string");
        public static KnownColumnDefinitionType @Int { get; } = new KnownColumnDefinitionType("int");
        public static KnownColumnDefinitionType @Long { get; } = new KnownColumnDefinitionType("long");
        public static KnownColumnDefinitionType Real { get; } = new KnownColumnDefinitionType("real");
        public static KnownColumnDefinitionType Boolean { get; } = new KnownColumnDefinitionType("boolean");
        public static KnownColumnDefinitionType Datetime { get; } = new KnownColumnDefinitionType("datetime");
        public static KnownColumnDefinitionType @Dynamic { get; } = new KnownColumnDefinitionType("dynamic");

        public static bool operator ==(KnownColumnDefinitionType left, KnownColumnDefinitionType right) => left.Equals(right);
        public static bool operator !=(KnownColumnDefinitionType left, KnownColumnDefinitionType right) => !left.Equals(right);

        public static explicit operator string(KnownColumnDefinitionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownColumnDefinitionType other && Equals(other);
        public bool Equals(KnownColumnDefinitionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the resource.
    /// </summary>
    [EnumType]
    public readonly struct KnownDataCollectionEndpointResourceKind : IEquatable<KnownDataCollectionEndpointResourceKind>
    {
        private readonly string _value;

        private KnownDataCollectionEndpointResourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownDataCollectionEndpointResourceKind Linux { get; } = new KnownDataCollectionEndpointResourceKind("Linux");
        public static KnownDataCollectionEndpointResourceKind Windows { get; } = new KnownDataCollectionEndpointResourceKind("Windows");

        public static bool operator ==(KnownDataCollectionEndpointResourceKind left, KnownDataCollectionEndpointResourceKind right) => left.Equals(right);
        public static bool operator !=(KnownDataCollectionEndpointResourceKind left, KnownDataCollectionEndpointResourceKind right) => !left.Equals(right);

        public static explicit operator string(KnownDataCollectionEndpointResourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownDataCollectionEndpointResourceKind other && Equals(other);
        public bool Equals(KnownDataCollectionEndpointResourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the resource.
    /// </summary>
    [EnumType]
    public readonly struct KnownDataCollectionRuleResourceKind : IEquatable<KnownDataCollectionRuleResourceKind>
    {
        private readonly string _value;

        private KnownDataCollectionRuleResourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownDataCollectionRuleResourceKind Linux { get; } = new KnownDataCollectionRuleResourceKind("Linux");
        public static KnownDataCollectionRuleResourceKind Windows { get; } = new KnownDataCollectionRuleResourceKind("Windows");

        public static bool operator ==(KnownDataCollectionRuleResourceKind left, KnownDataCollectionRuleResourceKind right) => left.Equals(right);
        public static bool operator !=(KnownDataCollectionRuleResourceKind left, KnownDataCollectionRuleResourceKind right) => !left.Equals(right);

        public static explicit operator string(KnownDataCollectionRuleResourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownDataCollectionRuleResourceKind other && Equals(other);
        public bool Equals(KnownDataCollectionRuleResourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownDataFlowStreams : IEquatable<KnownDataFlowStreams>
    {
        private readonly string _value;

        private KnownDataFlowStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownDataFlowStreams Microsoft_Event { get; } = new KnownDataFlowStreams("Microsoft-Event");
        public static KnownDataFlowStreams Microsoft_InsightsMetrics { get; } = new KnownDataFlowStreams("Microsoft-InsightsMetrics");
        public static KnownDataFlowStreams Microsoft_Perf { get; } = new KnownDataFlowStreams("Microsoft-Perf");
        public static KnownDataFlowStreams Microsoft_Syslog { get; } = new KnownDataFlowStreams("Microsoft-Syslog");
        public static KnownDataFlowStreams Microsoft_WindowsEvent { get; } = new KnownDataFlowStreams("Microsoft-WindowsEvent");

        public static bool operator ==(KnownDataFlowStreams left, KnownDataFlowStreams right) => left.Equals(right);
        public static bool operator !=(KnownDataFlowStreams left, KnownDataFlowStreams right) => !left.Equals(right);

        public static explicit operator string(KnownDataFlowStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownDataFlowStreams other && Equals(other);
        public bool Equals(KnownDataFlowStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownExtensionDataSourceStreams : IEquatable<KnownExtensionDataSourceStreams>
    {
        private readonly string _value;

        private KnownExtensionDataSourceStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownExtensionDataSourceStreams Microsoft_Event { get; } = new KnownExtensionDataSourceStreams("Microsoft-Event");
        public static KnownExtensionDataSourceStreams Microsoft_InsightsMetrics { get; } = new KnownExtensionDataSourceStreams("Microsoft-InsightsMetrics");
        public static KnownExtensionDataSourceStreams Microsoft_Perf { get; } = new KnownExtensionDataSourceStreams("Microsoft-Perf");
        public static KnownExtensionDataSourceStreams Microsoft_Syslog { get; } = new KnownExtensionDataSourceStreams("Microsoft-Syslog");
        public static KnownExtensionDataSourceStreams Microsoft_WindowsEvent { get; } = new KnownExtensionDataSourceStreams("Microsoft-WindowsEvent");

        public static bool operator ==(KnownExtensionDataSourceStreams left, KnownExtensionDataSourceStreams right) => left.Equals(right);
        public static bool operator !=(KnownExtensionDataSourceStreams left, KnownExtensionDataSourceStreams right) => !left.Equals(right);

        public static explicit operator string(KnownExtensionDataSourceStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownExtensionDataSourceStreams other && Equals(other);
        public bool Equals(KnownExtensionDataSourceStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of the supported timestamp formats
    /// </summary>
    [EnumType]
    public readonly struct KnownLogFileTextSettingsRecordStartTimestampFormat : IEquatable<KnownLogFileTextSettingsRecordStartTimestampFormat>
    {
        private readonly string _value;

        private KnownLogFileTextSettingsRecordStartTimestampFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownLogFileTextSettingsRecordStartTimestampFormat ISO_8601 { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("ISO 8601");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat YYYY_MM_DD_HH_MM_SS { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("YYYY-MM-DD HH:MM:SS");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat M_D_YYYY_HH_MM_SS_AM_PM { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("M/D/YYYY HH:MM:SS AM/PM");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat Mon_DD_YYYY_HH_MM_SS { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("Mon DD, YYYY HH:MM:SS");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat YyMMdd_HH_mm_ss { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("yyMMdd HH:mm:ss");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat DdMMyy_HH_mm_ss { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("ddMMyy HH:mm:ss");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat MMM_d_hh_mm_ss { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("MMM d hh:mm:ss");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat Dd_MMM_yyyy_HH_mm_ss_zzz { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("dd/MMM/yyyy:HH:mm:ss zzz");
        public static KnownLogFileTextSettingsRecordStartTimestampFormat Yyyy_MM_ddTHH_mm_ssK { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat("yyyy-MM-ddTHH:mm:ssK");

        public static bool operator ==(KnownLogFileTextSettingsRecordStartTimestampFormat left, KnownLogFileTextSettingsRecordStartTimestampFormat right) => left.Equals(right);
        public static bool operator !=(KnownLogFileTextSettingsRecordStartTimestampFormat left, KnownLogFileTextSettingsRecordStartTimestampFormat right) => !left.Equals(right);

        public static explicit operator string(KnownLogFileTextSettingsRecordStartTimestampFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownLogFileTextSettingsRecordStartTimestampFormat other && Equals(other);
        public bool Equals(KnownLogFileTextSettingsRecordStartTimestampFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the log files
    /// </summary>
    [EnumType]
    public readonly struct KnownLogFilesDataSourceFormat : IEquatable<KnownLogFilesDataSourceFormat>
    {
        private readonly string _value;

        private KnownLogFilesDataSourceFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownLogFilesDataSourceFormat Text { get; } = new KnownLogFilesDataSourceFormat("text");

        public static bool operator ==(KnownLogFilesDataSourceFormat left, KnownLogFilesDataSourceFormat right) => left.Equals(right);
        public static bool operator !=(KnownLogFilesDataSourceFormat left, KnownLogFilesDataSourceFormat right) => !left.Equals(right);

        public static explicit operator string(KnownLogFilesDataSourceFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownLogFilesDataSourceFormat other && Equals(other);
        public bool Equals(KnownLogFilesDataSourceFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownPerfCounterDataSourceStreams : IEquatable<KnownPerfCounterDataSourceStreams>
    {
        private readonly string _value;

        private KnownPerfCounterDataSourceStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownPerfCounterDataSourceStreams Microsoft_Perf { get; } = new KnownPerfCounterDataSourceStreams("Microsoft-Perf");
        public static KnownPerfCounterDataSourceStreams Microsoft_InsightsMetrics { get; } = new KnownPerfCounterDataSourceStreams("Microsoft-InsightsMetrics");

        public static bool operator ==(KnownPerfCounterDataSourceStreams left, KnownPerfCounterDataSourceStreams right) => left.Equals(right);
        public static bool operator !=(KnownPerfCounterDataSourceStreams left, KnownPerfCounterDataSourceStreams right) => !left.Equals(right);

        public static explicit operator string(KnownPerfCounterDataSourceStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownPerfCounterDataSourceStreams other && Equals(other);
        public bool Equals(KnownPerfCounterDataSourceStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownPrometheusForwarderDataSourceStreams : IEquatable<KnownPrometheusForwarderDataSourceStreams>
    {
        private readonly string _value;

        private KnownPrometheusForwarderDataSourceStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownPrometheusForwarderDataSourceStreams Microsoft_PrometheusMetrics { get; } = new KnownPrometheusForwarderDataSourceStreams("Microsoft-PrometheusMetrics");

        public static bool operator ==(KnownPrometheusForwarderDataSourceStreams left, KnownPrometheusForwarderDataSourceStreams right) => left.Equals(right);
        public static bool operator !=(KnownPrometheusForwarderDataSourceStreams left, KnownPrometheusForwarderDataSourceStreams right) => !left.Equals(right);

        public static explicit operator string(KnownPrometheusForwarderDataSourceStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownPrometheusForwarderDataSourceStreams other && Equals(other);
        public bool Equals(KnownPrometheusForwarderDataSourceStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The configuration to set whether network access from public internet to the endpoints are allowed.
    /// </summary>
    [EnumType]
    public readonly struct KnownPublicNetworkAccessOptions : IEquatable<KnownPublicNetworkAccessOptions>
    {
        private readonly string _value;

        private KnownPublicNetworkAccessOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownPublicNetworkAccessOptions Enabled { get; } = new KnownPublicNetworkAccessOptions("Enabled");
        public static KnownPublicNetworkAccessOptions Disabled { get; } = new KnownPublicNetworkAccessOptions("Disabled");
        public static KnownPublicNetworkAccessOptions SecuredByPerimeter { get; } = new KnownPublicNetworkAccessOptions("SecuredByPerimeter");

        public static bool operator ==(KnownPublicNetworkAccessOptions left, KnownPublicNetworkAccessOptions right) => left.Equals(right);
        public static bool operator !=(KnownPublicNetworkAccessOptions left, KnownPublicNetworkAccessOptions right) => !left.Equals(right);

        public static explicit operator string(KnownPublicNetworkAccessOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownPublicNetworkAccessOptions other && Equals(other);
        public bool Equals(KnownPublicNetworkAccessOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownSyslogDataSourceFacilityNames : IEquatable<KnownSyslogDataSourceFacilityNames>
    {
        private readonly string _value;

        private KnownSyslogDataSourceFacilityNames(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownSyslogDataSourceFacilityNames Auth { get; } = new KnownSyslogDataSourceFacilityNames("auth");
        public static KnownSyslogDataSourceFacilityNames Authpriv { get; } = new KnownSyslogDataSourceFacilityNames("authpriv");
        public static KnownSyslogDataSourceFacilityNames Cron { get; } = new KnownSyslogDataSourceFacilityNames("cron");
        public static KnownSyslogDataSourceFacilityNames Daemon { get; } = new KnownSyslogDataSourceFacilityNames("daemon");
        public static KnownSyslogDataSourceFacilityNames Kern { get; } = new KnownSyslogDataSourceFacilityNames("kern");
        public static KnownSyslogDataSourceFacilityNames Lpr { get; } = new KnownSyslogDataSourceFacilityNames("lpr");
        public static KnownSyslogDataSourceFacilityNames Mail { get; } = new KnownSyslogDataSourceFacilityNames("mail");
        public static KnownSyslogDataSourceFacilityNames Mark { get; } = new KnownSyslogDataSourceFacilityNames("mark");
        public static KnownSyslogDataSourceFacilityNames News { get; } = new KnownSyslogDataSourceFacilityNames("news");
        public static KnownSyslogDataSourceFacilityNames Syslog { get; } = new KnownSyslogDataSourceFacilityNames("syslog");
        public static KnownSyslogDataSourceFacilityNames User { get; } = new KnownSyslogDataSourceFacilityNames("user");
        public static KnownSyslogDataSourceFacilityNames Uucp { get; } = new KnownSyslogDataSourceFacilityNames("uucp");
        public static KnownSyslogDataSourceFacilityNames Local0 { get; } = new KnownSyslogDataSourceFacilityNames("local0");
        public static KnownSyslogDataSourceFacilityNames Local1 { get; } = new KnownSyslogDataSourceFacilityNames("local1");
        public static KnownSyslogDataSourceFacilityNames Local2 { get; } = new KnownSyslogDataSourceFacilityNames("local2");
        public static KnownSyslogDataSourceFacilityNames Local3 { get; } = new KnownSyslogDataSourceFacilityNames("local3");
        public static KnownSyslogDataSourceFacilityNames Local4 { get; } = new KnownSyslogDataSourceFacilityNames("local4");
        public static KnownSyslogDataSourceFacilityNames Local5 { get; } = new KnownSyslogDataSourceFacilityNames("local5");
        public static KnownSyslogDataSourceFacilityNames Local6 { get; } = new KnownSyslogDataSourceFacilityNames("local6");
        public static KnownSyslogDataSourceFacilityNames Local7 { get; } = new KnownSyslogDataSourceFacilityNames("local7");
        public static KnownSyslogDataSourceFacilityNames Asterisk { get; } = new KnownSyslogDataSourceFacilityNames("*");

        public static bool operator ==(KnownSyslogDataSourceFacilityNames left, KnownSyslogDataSourceFacilityNames right) => left.Equals(right);
        public static bool operator !=(KnownSyslogDataSourceFacilityNames left, KnownSyslogDataSourceFacilityNames right) => !left.Equals(right);

        public static explicit operator string(KnownSyslogDataSourceFacilityNames value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownSyslogDataSourceFacilityNames other && Equals(other);
        public bool Equals(KnownSyslogDataSourceFacilityNames other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownSyslogDataSourceLogLevels : IEquatable<KnownSyslogDataSourceLogLevels>
    {
        private readonly string _value;

        private KnownSyslogDataSourceLogLevels(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownSyslogDataSourceLogLevels Debug { get; } = new KnownSyslogDataSourceLogLevels("Debug");
        public static KnownSyslogDataSourceLogLevels Info { get; } = new KnownSyslogDataSourceLogLevels("Info");
        public static KnownSyslogDataSourceLogLevels Notice { get; } = new KnownSyslogDataSourceLogLevels("Notice");
        public static KnownSyslogDataSourceLogLevels Warning { get; } = new KnownSyslogDataSourceLogLevels("Warning");
        public static KnownSyslogDataSourceLogLevels Error { get; } = new KnownSyslogDataSourceLogLevels("Error");
        public static KnownSyslogDataSourceLogLevels Critical { get; } = new KnownSyslogDataSourceLogLevels("Critical");
        public static KnownSyslogDataSourceLogLevels Alert { get; } = new KnownSyslogDataSourceLogLevels("Alert");
        public static KnownSyslogDataSourceLogLevels Emergency { get; } = new KnownSyslogDataSourceLogLevels("Emergency");
        public static KnownSyslogDataSourceLogLevels Asterisk { get; } = new KnownSyslogDataSourceLogLevels("*");

        public static bool operator ==(KnownSyslogDataSourceLogLevels left, KnownSyslogDataSourceLogLevels right) => left.Equals(right);
        public static bool operator !=(KnownSyslogDataSourceLogLevels left, KnownSyslogDataSourceLogLevels right) => !left.Equals(right);

        public static explicit operator string(KnownSyslogDataSourceLogLevels value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownSyslogDataSourceLogLevels other && Equals(other);
        public bool Equals(KnownSyslogDataSourceLogLevels other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownSyslogDataSourceStreams : IEquatable<KnownSyslogDataSourceStreams>
    {
        private readonly string _value;

        private KnownSyslogDataSourceStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownSyslogDataSourceStreams Microsoft_Syslog { get; } = new KnownSyslogDataSourceStreams("Microsoft-Syslog");

        public static bool operator ==(KnownSyslogDataSourceStreams left, KnownSyslogDataSourceStreams right) => left.Equals(right);
        public static bool operator !=(KnownSyslogDataSourceStreams left, KnownSyslogDataSourceStreams right) => !left.Equals(right);

        public static explicit operator string(KnownSyslogDataSourceStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownSyslogDataSourceStreams other && Equals(other);
        public bool Equals(KnownSyslogDataSourceStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnownWindowsEventLogDataSourceStreams : IEquatable<KnownWindowsEventLogDataSourceStreams>
    {
        private readonly string _value;

        private KnownWindowsEventLogDataSourceStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnownWindowsEventLogDataSourceStreams Microsoft_WindowsEvent { get; } = new KnownWindowsEventLogDataSourceStreams("Microsoft-WindowsEvent");
        public static KnownWindowsEventLogDataSourceStreams Microsoft_Event { get; } = new KnownWindowsEventLogDataSourceStreams("Microsoft-Event");

        public static bool operator ==(KnownWindowsEventLogDataSourceStreams left, KnownWindowsEventLogDataSourceStreams right) => left.Equals(right);
        public static bool operator !=(KnownWindowsEventLogDataSourceStreams left, KnownWindowsEventLogDataSourceStreams right) => !left.Equals(right);

        public static explicit operator string(KnownWindowsEventLogDataSourceStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnownWindowsEventLogDataSourceStreams other && Equals(other);
        public bool Equals(KnownWindowsEventLogDataSourceStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
