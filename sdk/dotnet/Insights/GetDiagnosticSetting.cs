// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights
{
    public static class GetDiagnosticSetting
    {
        /// <summary>
        /// Gets the active diagnostic settings for the specified resource.
        /// Azure REST API version: 2021-05-01-preview.
        /// </summary>
        public static Task<GetDiagnosticSettingResult> InvokeAsync(GetDiagnosticSettingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiagnosticSettingResult>("azure-native:insights:getDiagnosticSetting", args ?? new GetDiagnosticSettingArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the active diagnostic settings for the specified resource.
        /// Azure REST API version: 2021-05-01-preview.
        /// </summary>
        public static Output<GetDiagnosticSettingResult> Invoke(GetDiagnosticSettingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiagnosticSettingResult>("azure-native:insights:getDiagnosticSetting", args ?? new GetDiagnosticSettingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiagnosticSettingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetDiagnosticSettingArgs()
        {
        }
        public static new GetDiagnosticSettingArgs Empty => new GetDiagnosticSettingArgs();
    }

    public sealed class GetDiagnosticSettingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public GetDiagnosticSettingInvokeArgs()
        {
        }
        public static new GetDiagnosticSettingInvokeArgs Empty => new GetDiagnosticSettingInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiagnosticSettingResult
    {
        /// <summary>
        /// The resource Id for the event hub authorization rule.
        /// </summary>
        public readonly string? EventHubAuthorizationRuleId;
        /// <summary>
        /// The name of the event hub. If none is specified, the default event hub will be selected.
        /// </summary>
        public readonly string? EventHubName;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: &lt;normalized service identity&gt;_&lt;normalized category name&gt;. Possible values are: Dedicated and null (null is default.)
        /// </summary>
        public readonly string? LogAnalyticsDestinationType;
        /// <summary>
        /// The list of logs settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.LogSettingsResponse> Logs;
        /// <summary>
        /// The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs.
        /// </summary>
        public readonly string? MarketplacePartnerId;
        /// <summary>
        /// The list of metric settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricSettingsResponse> Metrics;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
        /// </summary>
        public readonly string? ServiceBusRuleId;
        /// <summary>
        /// The resource ID of the storage account to which you would like to send Diagnostic Logs.
        /// </summary>
        public readonly string? StorageAccountId;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
        /// </summary>
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetDiagnosticSettingResult(
            string? eventHubAuthorizationRuleId,

            string? eventHubName,

            string id,

            string? logAnalyticsDestinationType,

            ImmutableArray<Outputs.LogSettingsResponse> logs,

            string? marketplacePartnerId,

            ImmutableArray<Outputs.MetricSettingsResponse> metrics,

            string name,

            string? serviceBusRuleId,

            string? storageAccountId,

            Outputs.SystemDataResponse systemData,

            string type,

            string? workspaceId)
        {
            EventHubAuthorizationRuleId = eventHubAuthorizationRuleId;
            EventHubName = eventHubName;
            Id = id;
            LogAnalyticsDestinationType = logAnalyticsDestinationType;
            Logs = logs;
            MarketplacePartnerId = marketplacePartnerId;
            Metrics = metrics;
            Name = name;
            ServiceBusRuleId = serviceBusRuleId;
            StorageAccountId = storageAccountId;
            SystemData = systemData;
            Type = type;
            WorkspaceId = workspaceId;
        }
    }
}
