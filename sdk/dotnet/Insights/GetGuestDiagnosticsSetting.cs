// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights
{
    public static class GetGuestDiagnosticsSetting
    {
        /// <summary>
        /// Gets guest diagnostics settings.
        /// API Version: 2018-06-01-preview.
        /// </summary>
        public static Task<GetGuestDiagnosticsSettingResult> InvokeAsync(GetGuestDiagnosticsSettingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGuestDiagnosticsSettingResult>("azure-native:insights:getGuestDiagnosticsSetting", args ?? new GetGuestDiagnosticsSettingArgs(), options.WithDefaults());

        /// <summary>
        /// Gets guest diagnostics settings.
        /// API Version: 2018-06-01-preview.
        /// </summary>
        public static Output<GetGuestDiagnosticsSettingResult> Invoke(GetGuestDiagnosticsSettingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGuestDiagnosticsSettingResult>("azure-native:insights:getGuestDiagnosticsSetting", args ?? new GetGuestDiagnosticsSettingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGuestDiagnosticsSettingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("diagnosticSettingsName", required: true)]
        public string DiagnosticSettingsName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGuestDiagnosticsSettingArgs()
        {
        }
        public static new GetGuestDiagnosticsSettingArgs Empty => new GetGuestDiagnosticsSettingArgs();
    }

    public sealed class GetGuestDiagnosticsSettingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("diagnosticSettingsName", required: true)]
        public Input<string> DiagnosticSettingsName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetGuestDiagnosticsSettingInvokeArgs()
        {
        }
        public static new GetGuestDiagnosticsSettingInvokeArgs Empty => new GetGuestDiagnosticsSettingInvokeArgs();
    }


    [OutputType]
    public sealed class GetGuestDiagnosticsSettingResult
    {
        /// <summary>
        /// the array of data source object which are configured to collect and send data
        /// </summary>
        public readonly ImmutableArray<Outputs.DataSourceResponse> DataSources;
        /// <summary>
        /// Azure resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Azure resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operating system type for the configuration
        /// </summary>
        public readonly string? OsType;
        public readonly string? ProxySetting;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Azure resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetGuestDiagnosticsSettingResult(
            ImmutableArray<Outputs.DataSourceResponse> dataSources,

            string id,

            string location,

            string name,

            string? osType,

            string? proxySetting,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataSources = dataSources;
            Id = id;
            Location = location;
            Name = name;
            OsType = osType;
            ProxySetting = proxySetting;
            Tags = tags;
            Type = type;
        }
    }
}
