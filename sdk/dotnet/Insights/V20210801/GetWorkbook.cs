// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20210801
{
    public static class GetWorkbook
    {
        /// <summary>
        /// Get a single workbook by its resourceName.
        /// </summary>
        public static Task<GetWorkbookResult> InvokeAsync(GetWorkbookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkbookResult>("azure-native:insights/v20210801:getWorkbook", args ?? new GetWorkbookArgs(), options.WithDefaults());

        /// <summary>
        /// Get a single workbook by its resourceName.
        /// </summary>
        public static Output<GetWorkbookResult> Invoke(GetWorkbookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkbookResult>("azure-native:insights/v20210801:getWorkbook", args ?? new GetWorkbookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkbookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks.
        /// </summary>
        [Input("canFetchContent")]
        public bool? CanFetchContent { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Application Insights component resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetWorkbookArgs()
        {
        }
        public static new GetWorkbookArgs Empty => new GetWorkbookArgs();
    }

    public sealed class GetWorkbookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks.
        /// </summary>
        [Input("canFetchContent")]
        public Input<bool>? CanFetchContent { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Application Insights component resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public GetWorkbookInvokeArgs()
        {
        }
        public static new GetWorkbookInvokeArgs Empty => new GetWorkbookInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkbookResult
    {
        /// <summary>
        /// Workbook category, as defined by the user at creation time.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The description of the workbook.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The user-defined name (display name) of the workbook.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Resource etag
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity used for BYOS
        /// </summary>
        public readonly Outputs.WorkbookResourceResponseIdentity? Identity;
        /// <summary>
        /// The kind of workbook. Only valid value is shared.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The unique revision id for this workbook definition
        /// </summary>
        public readonly string Revision;
        /// <summary>
        /// Configuration of this particular workbook. Configuration data is a string containing valid JSON
        /// </summary>
        public readonly string SerializedData;
        /// <summary>
        /// ResourceId for a source resource.
        /// </summary>
        public readonly string? SourceId;
        /// <summary>
        /// The resourceId to the storage account when bring your own storage is used
        /// </summary>
        public readonly string? StorageUri;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Date and time in UTC of the last modification that was made to this workbook definition.
        /// </summary>
        public readonly string TimeModified;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique user id of the specific user that owns this workbook.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// Workbook schema version format, like 'Notebook/1.0', which should match the workbook in serializedData
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetWorkbookResult(
            string category,

            string? description,

            string displayName,

            ImmutableDictionary<string, string>? etag,

            string id,

            Outputs.WorkbookResourceResponseIdentity? identity,

            string? kind,

            string location,

            string name,

            string revision,

            string serializedData,

            string? sourceId,

            string? storageUri,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string timeModified,

            string type,

            string userId,

            string? version)
        {
            Category = category;
            Description = description;
            DisplayName = displayName;
            Etag = etag;
            Id = id;
            Identity = identity;
            Kind = kind;
            Location = location;
            Name = name;
            Revision = revision;
            SerializedData = serializedData;
            SourceId = sourceId;
            StorageUri = storageUri;
            SystemData = systemData;
            Tags = tags;
            TimeModified = timeModified;
            Type = type;
            UserId = userId;
            Version = version;
        }
    }
}
