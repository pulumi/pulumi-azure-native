// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20230311
{
    public static class GetDataCollectionRule
    {
        /// <summary>
        /// Definition of ARM tracked top level resource.
        /// </summary>
        public static Task<GetDataCollectionRuleResult> InvokeAsync(GetDataCollectionRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataCollectionRuleResult>("azure-native:insights/v20230311:getDataCollectionRule", args ?? new GetDataCollectionRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of ARM tracked top level resource.
        /// </summary>
        public static Output<GetDataCollectionRuleResult> Invoke(GetDataCollectionRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataCollectionRuleResult>("azure-native:insights/v20230311:getDataCollectionRule", args ?? new GetDataCollectionRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataCollectionRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data collection rule. The name is case insensitive.
        /// </summary>
        [Input("dataCollectionRuleName", required: true)]
        public string DataCollectionRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDataCollectionRuleArgs()
        {
        }
        public static new GetDataCollectionRuleArgs Empty => new GetDataCollectionRuleArgs();
    }

    public sealed class GetDataCollectionRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data collection rule. The name is case insensitive.
        /// </summary>
        [Input("dataCollectionRuleName", required: true)]
        public Input<string> DataCollectionRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDataCollectionRuleInvokeArgs()
        {
        }
        public static new GetDataCollectionRuleInvokeArgs Empty => new GetDataCollectionRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataCollectionRuleResult
    {
        /// <summary>
        /// Agent settings used to modify agent behavior on a given host
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseAgentSettings? AgentSettings;
        /// <summary>
        /// The resource ID of the data collection endpoint that this rule can be used with.
        /// </summary>
        public readonly string? DataCollectionEndpointId;
        /// <summary>
        /// The specification of data flows.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataFlowResponse> DataFlows;
        /// <summary>
        /// The specification of data sources. 
        /// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseDataSources? DataSources;
        /// <summary>
        /// Description of the data collection rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The specification of destinations.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseDestinations? Destinations;
        /// <summary>
        /// Defines the ingestion endpoints to send data to via this rule.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseEndpoints Endpoints;
        /// <summary>
        /// Resource entity tag (ETag).
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Fully qualified ID of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed service identity of the resource.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResourceResponseIdentity? Identity;
        /// <summary>
        /// The immutable ID of this data collection rule. This property is READ-ONLY.
        /// </summary>
        public readonly string ImmutableId;
        /// <summary>
        /// The kind of the resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Metadata about the resource
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseMetadata Metadata;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Defines all the references that may be used in other sections of the DCR
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseReferences? References;
        /// <summary>
        /// Declaration of custom streams used in this rule.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.StreamDeclarationResponse>? StreamDeclarations;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResourceResponseSystemData SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDataCollectionRuleResult(
            Outputs.DataCollectionRuleResponseAgentSettings? agentSettings,

            string? dataCollectionEndpointId,

            ImmutableArray<Outputs.DataFlowResponse> dataFlows,

            Outputs.DataCollectionRuleResponseDataSources? dataSources,

            string? description,

            Outputs.DataCollectionRuleResponseDestinations? destinations,

            Outputs.DataCollectionRuleResponseEndpoints endpoints,

            string etag,

            string id,

            Outputs.DataCollectionRuleResourceResponseIdentity? identity,

            string immutableId,

            string? kind,

            string location,

            Outputs.DataCollectionRuleResponseMetadata metadata,

            string name,

            string provisioningState,

            Outputs.DataCollectionRuleResponseReferences? references,

            ImmutableDictionary<string, Outputs.StreamDeclarationResponse>? streamDeclarations,

            Outputs.DataCollectionRuleResourceResponseSystemData systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AgentSettings = agentSettings;
            DataCollectionEndpointId = dataCollectionEndpointId;
            DataFlows = dataFlows;
            DataSources = dataSources;
            Description = description;
            Destinations = destinations;
            Endpoints = endpoints;
            Etag = etag;
            Id = id;
            Identity = identity;
            ImmutableId = immutableId;
            Kind = kind;
            Location = location;
            Metadata = metadata;
            Name = name;
            ProvisioningState = provisioningState;
            References = references;
            StreamDeclarations = streamDeclarations;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
