// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Insights.V20180416
{
    /// <summary>
    /// Severity of the alert
    /// </summary>
    [EnumType]
    public readonly struct AlertSeverity : IEquatable<AlertSeverity>
    {
        private readonly string _value;

        private AlertSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertSeverity Zero { get; } = new AlertSeverity("0");
        public static AlertSeverity One { get; } = new AlertSeverity("1");
        public static AlertSeverity Two { get; } = new AlertSeverity("2");
        public static AlertSeverity Three { get; } = new AlertSeverity("3");
        public static AlertSeverity Four { get; } = new AlertSeverity("4");

        public static bool operator ==(AlertSeverity left, AlertSeverity right) => left.Equals(right);
        public static bool operator !=(AlertSeverity left, AlertSeverity right) => !left.Equals(right);

        public static explicit operator string(AlertSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertSeverity other && Equals(other);
        public bool Equals(AlertSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
    /// </summary>
    [EnumType]
    public readonly struct ConditionalOperator : IEquatable<ConditionalOperator>
    {
        private readonly string _value;

        private ConditionalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConditionalOperator GreaterThanOrEqual { get; } = new ConditionalOperator("GreaterThanOrEqual");
        public static ConditionalOperator LessThanOrEqual { get; } = new ConditionalOperator("LessThanOrEqual");
        public static ConditionalOperator GreaterThan { get; } = new ConditionalOperator("GreaterThan");
        public static ConditionalOperator LessThan { get; } = new ConditionalOperator("LessThan");
        public static ConditionalOperator Equal { get; } = new ConditionalOperator("Equal");

        public static bool operator ==(ConditionalOperator left, ConditionalOperator right) => left.Equals(right);
        public static bool operator !=(ConditionalOperator left, ConditionalOperator right) => !left.Equals(right);

        public static explicit operator string(ConditionalOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionalOperator other && Equals(other);
        public bool Equals(ConditionalOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
    /// </summary>
    [EnumType]
    public readonly struct Enabled : IEquatable<Enabled>
    {
        private readonly string _value;

        private Enabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Enabled @True { get; } = new Enabled("true");
        public static Enabled @False { get; } = new Enabled("false");

        public static bool operator ==(Enabled left, Enabled right) => left.Equals(right);
        public static bool operator !=(Enabled left, Enabled right) => !left.Equals(right);

        public static explicit operator string(Enabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Enabled other && Equals(other);
        public bool Equals(Enabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Metric Trigger Type - 'Consecutive' or 'Total'
    /// </summary>
    [EnumType]
    public readonly struct MetricTriggerType : IEquatable<MetricTriggerType>
    {
        private readonly string _value;

        private MetricTriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MetricTriggerType Consecutive { get; } = new MetricTriggerType("Consecutive");
        public static MetricTriggerType Total { get; } = new MetricTriggerType("Total");

        public static bool operator ==(MetricTriggerType left, MetricTriggerType right) => left.Equals(right);
        public static bool operator !=(MetricTriggerType left, MetricTriggerType right) => !left.Equals(right);

        public static explicit operator string(MetricTriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetricTriggerType other && Equals(other);
        public bool Equals(MetricTriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator for dimension values
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator Include { get; } = new Operator("Include");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Set value to 'ResultCount' .
    /// </summary>
    [EnumType]
    public readonly struct QueryType : IEquatable<QueryType>
    {
        private readonly string _value;

        private QueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryType ResultCount { get; } = new QueryType("ResultCount");

        public static bool operator ==(QueryType left, QueryType right) => left.Equals(right);
        public static bool operator !=(QueryType left, QueryType right) => !left.Equals(right);

        public static explicit operator string(QueryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryType other && Equals(other);
        public bool Equals(QueryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
