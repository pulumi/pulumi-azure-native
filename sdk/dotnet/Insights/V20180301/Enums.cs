// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Insights.V20180301
{
    /// <summary>
    /// the criteria time aggregation types.
    /// </summary>
    [EnumType]
    public readonly struct AggregationType : IEquatable<AggregationType>
    {
        private readonly string _value;

        private AggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AggregationType Average { get; } = new AggregationType("Average");
        public static AggregationType Count { get; } = new AggregationType("Count");
        public static AggregationType Minimum { get; } = new AggregationType("Minimum");
        public static AggregationType Maximum { get; } = new AggregationType("Maximum");
        public static AggregationType Total { get; } = new AggregationType("Total");

        public static bool operator ==(AggregationType left, AggregationType right) => left.Equals(right);
        public static bool operator !=(AggregationType left, AggregationType right) => !left.Equals(right);

        public static explicit operator string(AggregationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AggregationType other && Equals(other);
        public bool Equals(AggregationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of threshold criteria
    /// </summary>
    [EnumType]
    public readonly struct CriterionType : IEquatable<CriterionType>
    {
        private readonly string _value;

        private CriterionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CriterionType StaticThresholdCriterion { get; } = new CriterionType("StaticThresholdCriterion");
        public static CriterionType DynamicThresholdCriterion { get; } = new CriterionType("DynamicThresholdCriterion");

        public static bool operator ==(CriterionType left, CriterionType right) => left.Equals(right);
        public static bool operator !=(CriterionType left, CriterionType right) => !left.Equals(right);

        public static explicit operator string(CriterionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CriterionType other && Equals(other);
        public bool Equals(CriterionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator used to compare the metric value against the threshold.
    /// </summary>
    [EnumType]
    public readonly struct DynamicThresholdOperator : IEquatable<DynamicThresholdOperator>
    {
        private readonly string _value;

        private DynamicThresholdOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicThresholdOperator GreaterThan { get; } = new DynamicThresholdOperator("GreaterThan");
        public static DynamicThresholdOperator LessThan { get; } = new DynamicThresholdOperator("LessThan");
        public static DynamicThresholdOperator GreaterOrLessThan { get; } = new DynamicThresholdOperator("GreaterOrLessThan");

        public static bool operator ==(DynamicThresholdOperator left, DynamicThresholdOperator right) => left.Equals(right);
        public static bool operator !=(DynamicThresholdOperator left, DynamicThresholdOperator right) => !left.Equals(right);

        public static explicit operator string(DynamicThresholdOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicThresholdOperator other && Equals(other);
        public bool Equals(DynamicThresholdOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
    /// </summary>
    [EnumType]
    public readonly struct DynamicThresholdSensitivity : IEquatable<DynamicThresholdSensitivity>
    {
        private readonly string _value;

        private DynamicThresholdSensitivity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicThresholdSensitivity Low { get; } = new DynamicThresholdSensitivity("Low");
        public static DynamicThresholdSensitivity Medium { get; } = new DynamicThresholdSensitivity("Medium");
        public static DynamicThresholdSensitivity High { get; } = new DynamicThresholdSensitivity("High");

        public static bool operator ==(DynamicThresholdSensitivity left, DynamicThresholdSensitivity right) => left.Equals(right);
        public static bool operator !=(DynamicThresholdSensitivity left, DynamicThresholdSensitivity right) => !left.Equals(right);

        public static explicit operator string(DynamicThresholdSensitivity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicThresholdSensitivity other && Equals(other);
        public bool Equals(DynamicThresholdSensitivity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// specifies the type of the alert criteria.
    /// </summary>
    [EnumType]
    public readonly struct Odatatype : IEquatable<Odatatype>
    {
        private readonly string _value;

        private Odatatype(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Odatatype Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria");
        public static Odatatype Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria");
        public static Odatatype Microsoft_Azure_Monitor_WebtestLocationAvailabilityCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria");

        public static bool operator ==(Odatatype left, Odatatype right) => left.Equals(right);
        public static bool operator !=(Odatatype left, Odatatype right) => !left.Equals(right);

        public static explicit operator string(Odatatype value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Odatatype other && Equals(other);
        public bool Equals(Odatatype other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the criteria operator.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator EqualsValue { get; } = new Operator("Equals");
        public static Operator NotEquals { get; } = new Operator("NotEquals");
        public static Operator GreaterThan { get; } = new Operator("GreaterThan");
        public static Operator GreaterThanOrEqual { get; } = new Operator("GreaterThanOrEqual");
        public static Operator LessThan { get; } = new Operator("LessThan");
        public static Operator LessThanOrEqual { get; } = new Operator("LessThanOrEqual");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
