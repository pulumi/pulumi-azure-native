// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.V20180301.Inputs
{

    /// <summary>
    /// Criterion for dynamic threshold.
    /// </summary>
    public sealed class DynamicMetricCriteriaArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
        /// </summary>
        [Input("alertSensitivity", required: true)]
        public Input<string> AlertSensitivity { get; set; } = null!;

        /// <summary>
        /// Specifies the type of threshold criteria
        /// </summary>
        [Input("criterionType", required: true)]
        public Input<string> CriterionType { get; set; } = null!;

        [Input("dimensions")]
        private InputList<Inputs.MetricDimensionArgs>? _dimensions;

        /// <summary>
        /// List of dimension conditions.
        /// </summary>
        public InputList<Inputs.MetricDimensionArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.MetricDimensionArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The minimum number of violations required within the selected lookback time window required to raise an alert.
        /// </summary>
        [Input("failingPeriods", required: true)]
        public Input<Inputs.DynamicThresholdFailingPeriodsArgs> FailingPeriods { get; set; } = null!;

        /// <summary>
        /// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
        /// </summary>
        [Input("ignoreDataBefore")]
        public Input<string>? IgnoreDataBefore { get; set; }

        /// <summary>
        /// Name of the metric.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// Namespace of the metric.
        /// </summary>
        [Input("metricNamespace")]
        public Input<string>? MetricNamespace { get; set; }

        /// <summary>
        /// Name of the criteria.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The operator used to compare the metric value against the threshold.
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
        /// </summary>
        [Input("skipMetricValidation")]
        public Input<bool>? SkipMetricValidation { get; set; }

        /// <summary>
        /// the criteria time aggregation types.
        /// </summary>
        [Input("timeAggregation", required: true)]
        public Input<string> TimeAggregation { get; set; } = null!;

        public DynamicMetricCriteriaArgs()
        {
        }
    }
}
