// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.Latest
{
    [Obsolete(@"The 'latest' version is deprecated. Please migrate to the function in the top-level module: 'azure-nextgen:insights:getActivityLogAlert'.")]
    public static class GetActivityLogAlert
    {
        /// <summary>
        /// An Activity Log Alert rule resource.
        /// Latest API Version: 2020-10-01.
        /// </summary>
        public static Task<GetActivityLogAlertResult> InvokeAsync(GetActivityLogAlertArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetActivityLogAlertResult>("azure-nextgen:insights/latest:getActivityLogAlert", args ?? new GetActivityLogAlertArgs(), options.WithVersion());
    }


    public sealed class GetActivityLogAlertArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Activity Log Alert rule.
        /// </summary>
        [Input("activityLogAlertName", required: true)]
        public string ActivityLogAlertName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetActivityLogAlertArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetActivityLogAlertResult
    {
        /// <summary>
        /// The actions that will activate when the condition is met.
        /// </summary>
        public readonly Outputs.ActionListResponse Actions;
        /// <summary>
        /// The condition that will cause this alert to activate.
        /// </summary>
        public readonly Outputs.AlertRuleAllOfConditionResponse Condition;
        /// <summary>
        /// A description of this Activity Log Alert rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be 'global'.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetActivityLogAlertResult(
            Outputs.ActionListResponse actions,

            Outputs.AlertRuleAllOfConditionResponse condition,

            string? description,

            bool? enabled,

            string id,

            string? location,

            string name,

            ImmutableArray<string> scopes,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Actions = actions;
            Condition = condition;
            Description = description;
            Enabled = enabled;
            Id = id;
            Location = location;
            Name = name;
            Scopes = scopes;
            Tags = tags;
            Type = type;
        }
    }
}
