// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.Latest
{
    /// <summary>
    /// Properties that define a Continuous Export configuration.
    /// </summary>
    public partial class ExportConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Application Insights component.
        /// </summary>
        [Output("applicationName")]
        public Output<string> ApplicationName { get; private set; } = null!;

        /// <summary>
        /// The name of the destination storage container.
        /// </summary>
        [Output("containerName")]
        public Output<string> ContainerName { get; private set; } = null!;

        /// <summary>
        /// The name of destination account.
        /// </summary>
        [Output("destinationAccountId")]
        public Output<string> DestinationAccountId { get; private set; } = null!;

        /// <summary>
        /// The destination account location ID.
        /// </summary>
        [Output("destinationStorageLocationId")]
        public Output<string> DestinationStorageLocationId { get; private set; } = null!;

        /// <summary>
        /// The destination storage account subscription ID.
        /// </summary>
        [Output("destinationStorageSubscriptionId")]
        public Output<string> DestinationStorageSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The destination type.
        /// </summary>
        [Output("destinationType")]
        public Output<string> DestinationType { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the export configuration inside an Application Insights component. It is auto generated when the Continuous Export configuration is created.
        /// </summary>
        [Output("exportId")]
        public Output<string> ExportId { get; private set; } = null!;

        /// <summary>
        /// This indicates current Continuous Export configuration status. The possible values are 'Preparing', 'Success', 'Failure'.
        /// </summary>
        [Output("exportStatus")]
        public Output<string> ExportStatus { get; private set; } = null!;

        /// <summary>
        /// The instrumentation key of the Application Insights component.
        /// </summary>
        [Output("instrumentationKey")]
        public Output<string> InstrumentationKey { get; private set; } = null!;

        /// <summary>
        /// This will be 'true' if the Continuous Export configuration is enabled, otherwise it will be 'false'.
        /// </summary>
        [Output("isUserEnabled")]
        public Output<string> IsUserEnabled { get; private set; } = null!;

        /// <summary>
        /// The last time the Continuous Export configuration started failing.
        /// </summary>
        [Output("lastGapTime")]
        public Output<string> LastGapTime { get; private set; } = null!;

        /// <summary>
        /// The last time data was successfully delivered to the destination storage container for this Continuous Export configuration.
        /// </summary>
        [Output("lastSuccessTime")]
        public Output<string> LastSuccessTime { get; private set; } = null!;

        /// <summary>
        /// Last time the Continuous Export configuration was updated.
        /// </summary>
        [Output("lastUserUpdate")]
        public Output<string> LastUserUpdate { get; private set; } = null!;

        /// <summary>
        /// Deprecated
        /// </summary>
        [Output("notificationQueueEnabled")]
        public Output<string?> NotificationQueueEnabled { get; private set; } = null!;

        /// <summary>
        /// This is the reason the Continuous Export configuration started failing. It can be 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.
        /// </summary>
        [Output("permanentErrorReason")]
        public Output<string> PermanentErrorReason { get; private set; } = null!;

        /// <summary>
        /// This comma separated list of document types that will be exported. The possible values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.
        /// </summary>
        [Output("recordTypes")]
        public Output<string?> RecordTypes { get; private set; } = null!;

        /// <summary>
        /// The resource group of the Application Insights component.
        /// </summary>
        [Output("resourceGroup")]
        public Output<string> ResourceGroup { get; private set; } = null!;

        /// <summary>
        /// The name of the destination storage account.
        /// </summary>
        [Output("storageName")]
        public Output<string> StorageName { get; private set; } = null!;

        /// <summary>
        /// The subscription of the Application Insights component.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;


        /// <summary>
        /// Create a ExportConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExportConfiguration(string name, ExportConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:insights/latest:ExportConfiguration", name, args ?? new ExportConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExportConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:insights/latest:ExportConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:insights/v20150501:ExportConfiguration"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExportConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExportConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExportConfiguration(name, id, options);
        }
    }

    public sealed class ExportConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of destination storage account.
        /// </summary>
        [Input("destinationAccountId")]
        public Input<string>? DestinationAccountId { get; set; }

        /// <summary>
        /// The SAS URL for the destination storage container. It must grant write permission.
        /// </summary>
        [Input("destinationAddress")]
        public Input<string>? DestinationAddress { get; set; }

        /// <summary>
        /// The location ID of the destination storage container.
        /// </summary>
        [Input("destinationStorageLocationId")]
        public Input<string>? DestinationStorageLocationId { get; set; }

        /// <summary>
        /// The subscription ID of the destination storage container.
        /// </summary>
        [Input("destinationStorageSubscriptionId")]
        public Input<string>? DestinationStorageSubscriptionId { get; set; }

        /// <summary>
        /// The Continuous Export destination type. This has to be 'Blob'.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The Continuous Export configuration ID. This is unique within a Application Insights component.
        /// </summary>
        [Input("exportId", required: true)]
        public Input<string> ExportId { get; set; } = null!;

        /// <summary>
        /// Set to 'true' to create a Continuous Export configuration as enabled, otherwise set it to 'false'.
        /// </summary>
        [Input("isEnabled")]
        public Input<string>? IsEnabled { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        [Input("notificationQueueEnabled")]
        public Input<string>? NotificationQueueEnabled { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        [Input("notificationQueueUri")]
        public Input<string>? NotificationQueueUri { get; set; }

        /// <summary>
        /// The document types to be exported, as comma separated values. Allowed values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.
        /// </summary>
        [Input("recordTypes")]
        public Input<string>? RecordTypes { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Application Insights component resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public ExportConfigurationArgs()
        {
        }
    }
}
