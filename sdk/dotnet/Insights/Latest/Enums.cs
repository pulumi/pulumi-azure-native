// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Insights.Latest
{
    /// <summary>
    /// the criteria time aggregation types.
    /// </summary>
    [EnumType]
    public readonly struct AggregationType : IEquatable<AggregationType>
    {
        private readonly string _value;

        private AggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AggregationType Average { get; } = new AggregationType("Average");
        public static AggregationType Count { get; } = new AggregationType("Count");
        public static AggregationType Minimum { get; } = new AggregationType("Minimum");
        public static AggregationType Maximum { get; } = new AggregationType("Maximum");
        public static AggregationType Total { get; } = new AggregationType("Total");

        public static bool operator ==(AggregationType left, AggregationType right) => left.Equals(right);
        public static bool operator !=(AggregationType left, AggregationType right) => !left.Equals(right);

        public static explicit operator string(AggregationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AggregationType other && Equals(other);
        public bool Equals(AggregationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Severity of the alert
    /// </summary>
    [EnumType]
    public readonly struct AlertSeverity : IEquatable<AlertSeverity>
    {
        private readonly string _value;

        private AlertSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertSeverity Zero { get; } = new AlertSeverity("0");
        public static AlertSeverity One { get; } = new AlertSeverity("1");
        public static AlertSeverity Two { get; } = new AlertSeverity("2");
        public static AlertSeverity Three { get; } = new AlertSeverity("3");
        public static AlertSeverity Four { get; } = new AlertSeverity("4");

        public static bool operator ==(AlertSeverity left, AlertSeverity right) => left.Equals(right);
        public static bool operator !=(AlertSeverity left, AlertSeverity right) => !left.Equals(right);

        public static explicit operator string(AlertSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertSeverity other && Equals(other);
        public bool Equals(AlertSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of application being monitored.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationType : IEquatable<ApplicationType>
    {
        private readonly string _value;

        private ApplicationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationType Web { get; } = new ApplicationType("web");
        public static ApplicationType Other { get; } = new ApplicationType("other");

        public static bool operator ==(ApplicationType left, ApplicationType right) => left.Equals(right);
        public static bool operator !=(ApplicationType left, ApplicationType right) => !left.Equals(right);

        public static explicit operator string(ApplicationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationType other && Equals(other);
        public bool Equals(ApplicationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the operator that is used to compare the metric data and the threshold.
    /// </summary>
    [EnumType]
    public readonly struct ComparisonOperationType : IEquatable<ComparisonOperationType>
    {
        private readonly string _value;

        private ComparisonOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ComparisonOperationType EqualsValue { get; } = new ComparisonOperationType("Equals");
        public static ComparisonOperationType NotEquals { get; } = new ComparisonOperationType("NotEquals");
        public static ComparisonOperationType GreaterThan { get; } = new ComparisonOperationType("GreaterThan");
        public static ComparisonOperationType GreaterThanOrEqual { get; } = new ComparisonOperationType("GreaterThanOrEqual");
        public static ComparisonOperationType LessThan { get; } = new ComparisonOperationType("LessThan");
        public static ComparisonOperationType LessThanOrEqual { get; } = new ComparisonOperationType("LessThanOrEqual");

        public static bool operator ==(ComparisonOperationType left, ComparisonOperationType right) => left.Equals(right);
        public static bool operator !=(ComparisonOperationType left, ComparisonOperationType right) => !left.Equals(right);

        public static explicit operator string(ComparisonOperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ComparisonOperationType other && Equals(other);
        public bool Equals(ComparisonOperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the operator used to compare the data and the threshold.
    /// </summary>
    [EnumType]
    public readonly struct ConditionOperator : IEquatable<ConditionOperator>
    {
        private readonly string _value;

        private ConditionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConditionOperator GreaterThan { get; } = new ConditionOperator("GreaterThan");
        public static ConditionOperator GreaterThanOrEqual { get; } = new ConditionOperator("GreaterThanOrEqual");
        public static ConditionOperator LessThan { get; } = new ConditionOperator("LessThan");
        public static ConditionOperator LessThanOrEqual { get; } = new ConditionOperator("LessThanOrEqual");

        public static bool operator ==(ConditionOperator left, ConditionOperator right) => left.Equals(right);
        public static bool operator !=(ConditionOperator left, ConditionOperator right) => !left.Equals(right);

        public static explicit operator string(ConditionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionOperator other && Equals(other);
        public bool Equals(ConditionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
    /// </summary>
    [EnumType]
    public readonly struct ConditionalOperator : IEquatable<ConditionalOperator>
    {
        private readonly string _value;

        private ConditionalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConditionalOperator GreaterThan { get; } = new ConditionalOperator("GreaterThan");
        public static ConditionalOperator LessThan { get; } = new ConditionalOperator("LessThan");
        public static ConditionalOperator Equal { get; } = new ConditionalOperator("Equal");

        public static bool operator ==(ConditionalOperator left, ConditionalOperator right) => left.Equals(right);
        public static bool operator !=(ConditionalOperator left, ConditionalOperator right) => !left.Equals(right);

        public static explicit operator string(ConditionalOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionalOperator other && Equals(other);
        public bool Equals(ConditionalOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of threshold criteria
    /// </summary>
    [EnumType]
    public readonly struct CriterionType : IEquatable<CriterionType>
    {
        private readonly string _value;

        private CriterionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CriterionType StaticThresholdCriterion { get; } = new CriterionType("StaticThresholdCriterion");
        public static CriterionType DynamicThresholdCriterion { get; } = new CriterionType("DynamicThresholdCriterion");

        public static bool operator ==(CriterionType left, CriterionType right) => left.Equals(right);
        public static bool operator !=(CriterionType left, CriterionType right) => !left.Equals(right);

        public static explicit operator string(CriterionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CriterionType other && Equals(other);
        public bool Equals(CriterionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator used to compare the metric value against the threshold.
    /// </summary>
    [EnumType]
    public readonly struct DynamicThresholdOperator : IEquatable<DynamicThresholdOperator>
    {
        private readonly string _value;

        private DynamicThresholdOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicThresholdOperator GreaterThan { get; } = new DynamicThresholdOperator("GreaterThan");
        public static DynamicThresholdOperator LessThan { get; } = new DynamicThresholdOperator("LessThan");
        public static DynamicThresholdOperator GreaterOrLessThan { get; } = new DynamicThresholdOperator("GreaterOrLessThan");

        public static bool operator ==(DynamicThresholdOperator left, DynamicThresholdOperator right) => left.Equals(right);
        public static bool operator !=(DynamicThresholdOperator left, DynamicThresholdOperator right) => !left.Equals(right);

        public static explicit operator string(DynamicThresholdOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicThresholdOperator other && Equals(other);
        public bool Equals(DynamicThresholdOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
    /// </summary>
    [EnumType]
    public readonly struct DynamicThresholdSensitivity : IEquatable<DynamicThresholdSensitivity>
    {
        private readonly string _value;

        private DynamicThresholdSensitivity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicThresholdSensitivity Low { get; } = new DynamicThresholdSensitivity("Low");
        public static DynamicThresholdSensitivity Medium { get; } = new DynamicThresholdSensitivity("Medium");
        public static DynamicThresholdSensitivity High { get; } = new DynamicThresholdSensitivity("High");

        public static bool operator ==(DynamicThresholdSensitivity left, DynamicThresholdSensitivity right) => left.Equals(right);
        public static bool operator !=(DynamicThresholdSensitivity left, DynamicThresholdSensitivity right) => !left.Equals(right);

        public static explicit operator string(DynamicThresholdSensitivity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicThresholdSensitivity other && Equals(other);
        public bool Equals(DynamicThresholdSensitivity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
    /// </summary>
    [EnumType]
    public readonly struct Enabled : IEquatable<Enabled>
    {
        private readonly string _value;

        private Enabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Enabled @True { get; } = new Enabled("true");
        public static Enabled @False { get; } = new Enabled("false");

        public static bool operator ==(Enabled left, Enabled right) => left.Equals(right);
        public static bool operator !=(Enabled left, Enabled right) => !left.Equals(right);

        public static explicit operator string(Enabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Enabled other && Equals(other);
        public bool Equals(Enabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
    /// </summary>
    [EnumType]
    public readonly struct FavoriteType : IEquatable<FavoriteType>
    {
        private readonly string _value;

        private FavoriteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FavoriteType Shared { get; } = new FavoriteType("shared");
        public static FavoriteType User { get; } = new FavoriteType("user");

        public static bool operator ==(FavoriteType left, FavoriteType right) => left.Equals(right);
        public static bool operator !=(FavoriteType left, FavoriteType right) => !left.Equals(right);

        public static explicit operator string(FavoriteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FavoriteType other && Equals(other);
        public bool Equals(FavoriteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
    /// </summary>
    [EnumType]
    public readonly struct FlowType : IEquatable<FlowType>
    {
        private readonly string _value;

        private FlowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowType Bluefield { get; } = new FlowType("Bluefield");

        public static bool operator ==(FlowType left, FlowType right) => left.Equals(right);
        public static bool operator !=(FlowType left, FlowType right) => !left.Equals(right);

        public static explicit operator string(FlowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowType other && Equals(other);
        public bool Equals(FlowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the flow of the ingestion.
    /// </summary>
    [EnumType]
    public readonly struct IngestionMode : IEquatable<IngestionMode>
    {
        private readonly string _value;

        private IngestionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngestionMode ApplicationInsights { get; } = new IngestionMode("ApplicationInsights");
        public static IngestionMode ApplicationInsightsWithDiagnosticSettings { get; } = new IngestionMode("ApplicationInsightsWithDiagnosticSettings");
        public static IngestionMode LogAnalytics { get; } = new IngestionMode("LogAnalytics");

        public static bool operator ==(IngestionMode left, IngestionMode right) => left.Equals(right);
        public static bool operator !=(IngestionMode left, IngestionMode right) => !left.Equals(right);

        public static explicit operator string(IngestionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngestionMode other && Equals(other);
        public bool Equals(IngestionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.
    /// </summary>
    [EnumType]
    public readonly struct ItemScope : IEquatable<ItemScope>
    {
        private readonly string _value;

        private ItemScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ItemScope Shared { get; } = new ItemScope("shared");
        public static ItemScope User { get; } = new ItemScope("user");

        public static bool operator ==(ItemScope left, ItemScope right) => left.Equals(right);
        public static bool operator !=(ItemScope left, ItemScope right) => !left.Equals(right);

        public static explicit operator string(ItemScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ItemScope other && Equals(other);
        public bool Equals(ItemScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum indicating the type of the Analytics item.
    /// </summary>
    [EnumType]
    public readonly struct ItemType : IEquatable<ItemType>
    {
        private readonly string _value;

        private ItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ItemType Query { get; } = new ItemType("query");
        public static ItemType Function { get; } = new ItemType("function");
        public static ItemType Folder { get; } = new ItemType("folder");
        public static ItemType Recent { get; } = new ItemType("recent");

        public static bool operator ==(ItemType left, ItemType right) => left.Equals(right);
        public static bool operator !=(ItemType left, ItemType right) => !left.Equals(right);

        public static explicit operator string(ItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ItemType other && Equals(other);
        public bool Equals(ItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the metric statistic type. How the metrics from multiple instances are combined.
    /// </summary>
    [EnumType]
    public readonly struct MetricStatisticType : IEquatable<MetricStatisticType>
    {
        private readonly string _value;

        private MetricStatisticType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MetricStatisticType Average { get; } = new MetricStatisticType("Average");
        public static MetricStatisticType Min { get; } = new MetricStatisticType("Min");
        public static MetricStatisticType Max { get; } = new MetricStatisticType("Max");
        public static MetricStatisticType Sum { get; } = new MetricStatisticType("Sum");

        public static bool operator ==(MetricStatisticType left, MetricStatisticType right) => left.Equals(right);
        public static bool operator !=(MetricStatisticType left, MetricStatisticType right) => !left.Equals(right);

        public static explicit operator string(MetricStatisticType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetricStatisticType other && Equals(other);
        public bool Equals(MetricStatisticType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Metric Trigger Type - 'Consecutive' or 'Total'
    /// </summary>
    [EnumType]
    public readonly struct MetricTriggerType : IEquatable<MetricTriggerType>
    {
        private readonly string _value;

        private MetricTriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MetricTriggerType Consecutive { get; } = new MetricTriggerType("Consecutive");
        public static MetricTriggerType Total { get; } = new MetricTriggerType("Total");

        public static bool operator ==(MetricTriggerType left, MetricTriggerType right) => left.Equals(right);
        public static bool operator !=(MetricTriggerType left, MetricTriggerType right) => !left.Equals(right);

        public static explicit operator string(MetricTriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetricTriggerType other && Equals(other);
        public bool Equals(MetricTriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// specifies the type of the alert criteria.
    /// </summary>
    [EnumType]
    public readonly struct Odatatype : IEquatable<Odatatype>
    {
        private readonly string _value;

        private Odatatype(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Odatatype Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria");
        public static Odatatype Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria");
        public static Odatatype Microsoft_Azure_Monitor_WebtestLocationAvailabilityCriteria { get; } = new Odatatype("Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria");

        public static bool operator ==(Odatatype left, Odatatype right) => left.Equals(right);
        public static bool operator !=(Odatatype left, Odatatype right) => !left.Equals(right);

        public static explicit operator string(Odatatype value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Odatatype other && Equals(other);
        public bool Equals(Odatatype other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the operation associated with the notification and its value must be "scale"
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperationType Scale { get; } = new OperationType("Scale");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator for dimension values
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator Include { get; } = new Operator("Include");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Set value to 'ResultCount' .
    /// </summary>
    [EnumType]
    public readonly struct QueryType : IEquatable<QueryType>
    {
        private readonly string _value;

        private QueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryType ResultCount { get; } = new QueryType("ResultCount");

        public static bool operator ==(QueryType left, QueryType right) => left.Equals(right);
        public static bool operator !=(QueryType left, QueryType right) => !left.Equals(right);

        public static explicit operator string(QueryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryType other && Equals(other);
        public bool Equals(QueryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceFrequency : IEquatable<RecurrenceFrequency>
    {
        private readonly string _value;

        private RecurrenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecurrenceFrequency None { get; } = new RecurrenceFrequency("None");
        public static RecurrenceFrequency Second { get; } = new RecurrenceFrequency("Second");
        public static RecurrenceFrequency Minute { get; } = new RecurrenceFrequency("Minute");
        public static RecurrenceFrequency Hour { get; } = new RecurrenceFrequency("Hour");
        public static RecurrenceFrequency Day { get; } = new RecurrenceFrequency("Day");
        public static RecurrenceFrequency Week { get; } = new RecurrenceFrequency("Week");
        public static RecurrenceFrequency Month { get; } = new RecurrenceFrequency("Month");
        public static RecurrenceFrequency Year { get; } = new RecurrenceFrequency("Year");

        public static bool operator ==(RecurrenceFrequency left, RecurrenceFrequency right) => left.Equals(right);
        public static bool operator !=(RecurrenceFrequency left, RecurrenceFrequency right) => !left.Equals(right);

        public static explicit operator string(RecurrenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceFrequency other && Equals(other);
        public bool Equals(RecurrenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
    /// </summary>
    [EnumType]
    public readonly struct RequestSource : IEquatable<RequestSource>
    {
        private readonly string _value;

        private RequestSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestSource Rest { get; } = new RequestSource("rest");

        public static bool operator ==(RequestSource left, RequestSource right) => left.Equals(right);
        public static bool operator !=(RequestSource left, RequestSource right) => !left.Equals(right);

        public static explicit operator string(RequestSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestSource other && Equals(other);
        public bool Equals(RequestSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the scale direction. Whether the scaling action increases or decreases the number of instances.
    /// </summary>
    [EnumType]
    public readonly struct ScaleDirection : IEquatable<ScaleDirection>
    {
        private readonly string _value;

        private ScaleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleDirection None { get; } = new ScaleDirection("None");
        public static ScaleDirection Increase { get; } = new ScaleDirection("Increase");
        public static ScaleDirection Decrease { get; } = new ScaleDirection("Decrease");

        public static bool operator ==(ScaleDirection left, ScaleDirection right) => left.Equals(right);
        public static bool operator !=(ScaleDirection left, ScaleDirection right) => !left.Equals(right);

        public static explicit operator string(ScaleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleDirection other && Equals(other);
        public bool Equals(ScaleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
    /// </summary>
    [EnumType]
    public readonly struct ScaleRuleMetricDimensionOperationType : IEquatable<ScaleRuleMetricDimensionOperationType>
    {
        private readonly string _value;

        private ScaleRuleMetricDimensionOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleRuleMetricDimensionOperationType EqualsValue { get; } = new ScaleRuleMetricDimensionOperationType("Equals");
        public static ScaleRuleMetricDimensionOperationType NotEquals { get; } = new ScaleRuleMetricDimensionOperationType("NotEquals");

        public static bool operator ==(ScaleRuleMetricDimensionOperationType left, ScaleRuleMetricDimensionOperationType right) => left.Equals(right);
        public static bool operator !=(ScaleRuleMetricDimensionOperationType left, ScaleRuleMetricDimensionOperationType right) => !left.Equals(right);

        public static explicit operator string(ScaleRuleMetricDimensionOperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleRuleMetricDimensionOperationType other && Equals(other);
        public bool Equals(ScaleRuleMetricDimensionOperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the type of action that should occur when the scale rule fires.
    /// </summary>
    [EnumType]
    public readonly struct ScaleType : IEquatable<ScaleType>
    {
        private readonly string _value;

        private ScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleType ChangeCount { get; } = new ScaleType("ChangeCount");
        public static ScaleType PercentChangeCount { get; } = new ScaleType("PercentChangeCount");
        public static ScaleType ExactCount { get; } = new ScaleType("ExactCount");

        public static bool operator ==(ScaleType left, ScaleType right) => left.Equals(right);
        public static bool operator !=(ScaleType left, ScaleType right) => !left.Equals(right);

        public static explicit operator string(ScaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleType other && Equals(other);
        public bool Equals(ScaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of workbook. Choices are user and shared.
    /// </summary>
    [EnumType]
    public readonly struct SharedTypeKind : IEquatable<SharedTypeKind>
    {
        private readonly string _value;

        private SharedTypeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SharedTypeKind User { get; } = new SharedTypeKind("user");
        public static SharedTypeKind Shared { get; } = new SharedTypeKind("shared");

        public static bool operator ==(SharedTypeKind left, SharedTypeKind right) => left.Equals(right);
        public static bool operator !=(SharedTypeKind left, SharedTypeKind right) => !left.Equals(right);

        public static explicit operator string(SharedTypeKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SharedTypeKind other && Equals(other);
        public bool Equals(SharedTypeKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
    /// </summary>
    [EnumType]
    public readonly struct TimeAggregationOperator : IEquatable<TimeAggregationOperator>
    {
        private readonly string _value;

        private TimeAggregationOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TimeAggregationOperator Average { get; } = new TimeAggregationOperator("Average");
        public static TimeAggregationOperator Minimum { get; } = new TimeAggregationOperator("Minimum");
        public static TimeAggregationOperator Maximum { get; } = new TimeAggregationOperator("Maximum");
        public static TimeAggregationOperator Total { get; } = new TimeAggregationOperator("Total");
        public static TimeAggregationOperator Last { get; } = new TimeAggregationOperator("Last");

        public static bool operator ==(TimeAggregationOperator left, TimeAggregationOperator right) => left.Equals(right);
        public static bool operator !=(TimeAggregationOperator left, TimeAggregationOperator right) => !left.Equals(right);

        public static explicit operator string(TimeAggregationOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeAggregationOperator other && Equals(other);
        public bool Equals(TimeAggregationOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
    /// </summary>
    [EnumType]
    public readonly struct TimeAggregationType : IEquatable<TimeAggregationType>
    {
        private readonly string _value;

        private TimeAggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TimeAggregationType Average { get; } = new TimeAggregationType("Average");
        public static TimeAggregationType Minimum { get; } = new TimeAggregationType("Minimum");
        public static TimeAggregationType Maximum { get; } = new TimeAggregationType("Maximum");
        public static TimeAggregationType Total { get; } = new TimeAggregationType("Total");
        public static TimeAggregationType Count { get; } = new TimeAggregationType("Count");
        public static TimeAggregationType Last { get; } = new TimeAggregationType("Last");

        public static bool operator ==(TimeAggregationType left, TimeAggregationType right) => left.Equals(right);
        public static bool operator !=(TimeAggregationType left, TimeAggregationType right) => !left.Equals(right);

        public static explicit operator string(TimeAggregationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeAggregationType other && Equals(other);
        public bool Equals(TimeAggregationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of web test this is, valid choices are ping and multistep.
    /// </summary>
    [EnumType]
    public readonly struct WebTestKind : IEquatable<WebTestKind>
    {
        private readonly string _value;

        private WebTestKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebTestKind Ping { get; } = new WebTestKind("ping");
        public static WebTestKind Multistep { get; } = new WebTestKind("multistep");

        public static bool operator ==(WebTestKind left, WebTestKind right) => left.Equals(right);
        public static bool operator !=(WebTestKind left, WebTestKind right) => !left.Equals(right);

        public static explicit operator string(WebTestKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebTestKind other && Equals(other);
        public bool Equals(WebTestKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
