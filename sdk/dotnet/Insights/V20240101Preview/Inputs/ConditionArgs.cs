// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights.V20240101Preview.Inputs
{

    /// <summary>
    /// A condition of the scheduled query rule.
    /// </summary>
    public sealed class ConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant and required only for dynamic threshold rules of the kind LogAlert.
        /// </summary>
        [Input("alertSensitivity")]
        public Input<string>? AlertSensitivity { get; set; }

        /// <summary>
        /// Specifies the type of threshold criteria
        /// </summary>
        [Input("criterionType")]
        public InputUnion<string, Pulumi.AzureNative.Insights.V20240101Preview.CriterionType>? CriterionType { get; set; }

        [Input("dimensions")]
        private InputList<Inputs.DimensionArgs>? _dimensions;

        /// <summary>
        /// List of Dimensions conditions
        /// </summary>
        public InputList<Inputs.DimensionArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.DimensionArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Input("failingPeriods")]
        public Input<Inputs.ConditionFailingPeriodsArgs>? FailingPeriods { get; set; }

        /// <summary>
        /// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
        /// </summary>
        [Input("ignoreDataBefore")]
        public Input<string>? IgnoreDataBefore { get; set; }

        /// <summary>
        /// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Input("metricMeasureColumn")]
        public Input<string>? MetricMeasureColumn { get; set; }

        /// <summary>
        /// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// The criteria operator. Relevant and required only for rules of the kind LogAlert.
        /// </summary>
        [Input("operator")]
        public InputUnion<string, Pulumi.AzureNative.Insights.V20240101Preview.ConditionOperator>? Operator { get; set; }

        /// <summary>
        /// Log query alert
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Input("resourceIdColumn")]
        public Input<string>? ResourceIdColumn { get; set; }

        /// <summary>
        /// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// Aggregation type. Relevant and required only for rules of the kind LogAlert.
        /// </summary>
        [Input("timeAggregation")]
        public InputUnion<string, Pulumi.AzureNative.Insights.V20240101Preview.TimeAggregation>? TimeAggregation { get; set; }

        public ConditionArgs()
        {
        }
        public static new ConditionArgs Empty => new ConditionArgs();
    }
}
