// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Insights.Inputs
{

    /// <summary>
    /// An alert rule.
    /// </summary>
    public sealed class MetricAlertPropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.MetricAlertActionArgs>? _actions;

        /// <summary>
        /// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        /// </summary>
        public InputList<Inputs.MetricAlertActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.MetricAlertActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// the flag that indicates whether the alert should be auto resolved or not. The default is true.
        /// </summary>
        [Input("autoMitigate")]
        public Input<bool>? AutoMitigate { get; set; }

        /// <summary>
        /// defines the specific alert criteria information.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.MetricAlertCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// the description of the metric alert that will be included in the alert email.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// the flag that indicates whether the metric alert is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// how often the metric alert is evaluated represented in ISO 8601 duration format.
        /// </summary>
        [Input("evaluationFrequency", required: true)]
        public Input<string> EvaluationFrequency { get; set; } = null!;

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// the list of resource id's that this metric alert is scoped to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Alert severity {0, 1, 2, 3, 4}
        /// </summary>
        [Input("severity", required: true)]
        public Input<int> Severity { get; set; } = null!;

        /// <summary>
        /// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
        /// </summary>
        [Input("targetResourceRegion")]
        public Input<string>? TargetResourceRegion { get; set; }

        /// <summary>
        /// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
        /// </summary>
        [Input("targetResourceType")]
        public Input<string>? TargetResourceType { get; set; }

        /// <summary>
        /// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public MetricAlertPropertiesArgs()
        {
        }
    }
}
