// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.V20160301.Outputs
{

    [OutputType]
    public sealed class LocationThresholdRuleConditionResponse
    {
        /// <summary>
        /// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
        /// </summary>
        public readonly Union<Outputs.RuleManagementEventDataSourceResponse, Outputs.RuleMetricDataSourceResponse>? DataSource;
        /// <summary>
        /// the number of locations that must fail to activate the alert.
        /// </summary>
        public readonly int FailedLocationCount;
        /// <summary>
        /// specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
        /// </summary>
        public readonly string OdataType;
        /// <summary>
        /// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
        /// </summary>
        public readonly string? WindowSize;

        [OutputConstructor]
        private LocationThresholdRuleConditionResponse(
            Union<Outputs.RuleManagementEventDataSourceResponse, Outputs.RuleMetricDataSourceResponse>? dataSource,

            int failedLocationCount,

            string odataType,

            string? windowSize)
        {
            DataSource = dataSource;
            FailedLocationCount = failedLocationCount;
            OdataType = odataType;
            WindowSize = windowSize;
        }
    }
}
