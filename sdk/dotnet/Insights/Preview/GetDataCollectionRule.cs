// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Insights.Preview
{
    public static class GetDataCollectionRule
    {
        public static Task<GetDataCollectionRuleResult> InvokeAsync(GetDataCollectionRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDataCollectionRuleResult>("azurerm:insights/preview:getDataCollectionRule", args ?? new GetDataCollectionRuleArgs(), options.WithVersion());
    }


    public sealed class GetDataCollectionRuleArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data collection rule. The name is case insensitive.
        /// </summary>
        [Input("dataCollectionRuleName", required: true)]
        public string DataCollectionRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDataCollectionRuleArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDataCollectionRuleResult
    {
        /// <summary>
        /// The specification of data flows.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataFlowResponseResult> DataFlows;
        /// <summary>
        /// The specification of data sources. 
        /// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseDataSourcesResult? DataSources;
        /// <summary>
        /// Description of the data collection rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The specification of destinations.
        /// </summary>
        public readonly Outputs.DataCollectionRuleResponseDestinationsResult Destinations;
        /// <summary>
        /// Resource entity tag (ETag).
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDataCollectionRuleResult(
            ImmutableArray<Outputs.DataFlowResponseResult> dataFlows,

            Outputs.DataCollectionRuleResponseDataSourcesResult? dataSources,

            string? description,

            Outputs.DataCollectionRuleResponseDestinationsResult destinations,

            string etag,

            string location,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataFlows = dataFlows;
            DataSources = dataSources;
            Description = description;
            Destinations = destinations;
            Etag = etag;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
        }
    }
}
