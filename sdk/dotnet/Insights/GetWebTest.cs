// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Insights
{
    public static class GetWebTest
    {
        /// <summary>
        /// Get a specific Application Insights web test definition.
        /// Azure REST API version: 2022-06-15.
        /// 
        /// Other available API versions: 2020-10-05-preview.
        /// </summary>
        public static Task<GetWebTestResult> InvokeAsync(GetWebTestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebTestResult>("azure-native:insights:getWebTest", args ?? new GetWebTestArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific Application Insights web test definition.
        /// Azure REST API version: 2022-06-15.
        /// 
        /// Other available API versions: 2020-10-05-preview.
        /// </summary>
        public static Output<GetWebTestResult> Invoke(GetWebTestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebTestResult>("azure-native:insights:getWebTest", args ?? new GetWebTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebTestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Application Insights WebTest resource.
        /// </summary>
        [Input("webTestName", required: true)]
        public string WebTestName { get; set; } = null!;

        public GetWebTestArgs()
        {
        }
        public static new GetWebTestArgs Empty => new GetWebTestArgs();
    }

    public sealed class GetWebTestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Application Insights WebTest resource.
        /// </summary>
        [Input("webTestName", required: true)]
        public Input<string> WebTestName { get; set; } = null!;

        public GetWebTestInvokeArgs()
        {
        }
        public static new GetWebTestInvokeArgs Empty => new GetWebTestInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebTestResult
    {
        /// <summary>
        /// An XML configuration specification for a WebTest.
        /// </summary>
        public readonly Outputs.WebTestPropertiesResponseConfiguration? Configuration;
        /// <summary>
        /// User defined description for this WebTest.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Is the test actively being monitored.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Default value is 300.
        /// </summary>
        public readonly int? Frequency;
        /// <summary>
        /// Azure resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of WebTest that this web test watches. Choices are ping, multistep and standard.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        public readonly ImmutableArray<Outputs.WebTestGeolocationResponse> Locations;
        /// <summary>
        /// Azure resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The collection of request properties
        /// </summary>
        public readonly Outputs.WebTestPropertiesResponseRequest? Request;
        /// <summary>
        /// Allow for retries should this WebTest fail.
        /// </summary>
        public readonly bool? RetryEnabled;
        /// <summary>
        /// Unique ID of this WebTest. This is typically the same value as the Name field.
        /// </summary>
        public readonly string SyntheticMonitorId;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default value is 30.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// Azure resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The collection of validation rule properties
        /// </summary>
        public readonly Outputs.WebTestPropertiesResponseValidationRules? ValidationRules;
        /// <summary>
        /// The kind of web test this is, valid choices are ping, multistep and standard.
        /// </summary>
        public readonly string WebTestKind;
        /// <summary>
        /// User defined name if this WebTest.
        /// </summary>
        public readonly string WebTestName;

        [OutputConstructor]
        private GetWebTestResult(
            Outputs.WebTestPropertiesResponseConfiguration? configuration,

            string? description,

            bool? enabled,

            int? frequency,

            string id,

            string? kind,

            string location,

            ImmutableArray<Outputs.WebTestGeolocationResponse> locations,

            string name,

            string provisioningState,

            Outputs.WebTestPropertiesResponseRequest? request,

            bool? retryEnabled,

            string syntheticMonitorId,

            ImmutableDictionary<string, string>? tags,

            int? timeout,

            string type,

            Outputs.WebTestPropertiesResponseValidationRules? validationRules,

            string webTestKind,

            string webTestName)
        {
            Configuration = configuration;
            Description = description;
            Enabled = enabled;
            Frequency = frequency;
            Id = id;
            Kind = kind;
            Location = location;
            Locations = locations;
            Name = name;
            ProvisioningState = provisioningState;
            Request = request;
            RetryEnabled = retryEnabled;
            SyntheticMonitorId = syntheticMonitorId;
            Tags = tags;
            Timeout = timeout;
            Type = type;
            ValidationRules = validationRules;
            WebTestKind = webTestKind;
            WebTestName = webTestName;
        }
    }
}
