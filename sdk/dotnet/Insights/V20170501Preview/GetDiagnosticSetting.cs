// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Insights.V20170501Preview
{
    public static class GetDiagnosticSetting
    {
        public static Task<GetDiagnosticSettingResult> InvokeAsync(GetDiagnosticSettingArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiagnosticSettingResult>("azure-nextgen:insights/v20170501preview:getDiagnosticSetting", args ?? new GetDiagnosticSettingArgs(), options.WithVersion());
    }


    public sealed class GetDiagnosticSettingArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the diagnostic setting.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetDiagnosticSettingArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiagnosticSettingResult
    {
        /// <summary>
        /// The resource Id for the event hub authorization rule.
        /// </summary>
        public readonly string? EventHubAuthorizationRuleId;
        /// <summary>
        /// The name of the event hub. If none is specified, the default event hub will be selected.
        /// </summary>
        public readonly string? EventHubName;
        /// <summary>
        /// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: &lt;normalized service identity&gt;_&lt;normalized category name&gt;. Possible values are: Dedicated and null (null is default.)
        /// </summary>
        public readonly string? LogAnalyticsDestinationType;
        /// <summary>
        /// The list of logs settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.LogSettingsResponse> Logs;
        /// <summary>
        /// The list of metric settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricSettingsResponse> Metrics;
        /// <summary>
        /// Azure resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
        /// </summary>
        public readonly string? ServiceBusRuleId;
        /// <summary>
        /// The resource ID of the storage account to which you would like to send Diagnostic Logs.
        /// </summary>
        public readonly string? StorageAccountId;
        /// <summary>
        /// Azure resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
        /// </summary>
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetDiagnosticSettingResult(
            string? eventHubAuthorizationRuleId,

            string? eventHubName,

            string? logAnalyticsDestinationType,

            ImmutableArray<Outputs.LogSettingsResponse> logs,

            ImmutableArray<Outputs.MetricSettingsResponse> metrics,

            string name,

            string? serviceBusRuleId,

            string? storageAccountId,

            string type,

            string? workspaceId)
        {
            EventHubAuthorizationRuleId = eventHubAuthorizationRuleId;
            EventHubName = eventHubName;
            LogAnalyticsDestinationType = logAnalyticsDestinationType;
            Logs = logs;
            Metrics = metrics;
            Name = name;
            ServiceBusRuleId = serviceBusRuleId;
            StorageAccountId = storageAccountId;
            Type = type;
            WorkspaceId = workspaceId;
        }
    }
}
