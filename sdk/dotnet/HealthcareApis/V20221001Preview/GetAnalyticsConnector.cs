// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HealthcareApis.V20221001Preview
{
    public static class GetAnalyticsConnector
    {
        /// <summary>
        /// Gets the properties of the specified Analytics Connector.
        /// </summary>
        public static Task<GetAnalyticsConnectorResult> InvokeAsync(GetAnalyticsConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAnalyticsConnectorResult>("azure-native:healthcareapis/v20221001preview:getAnalyticsConnector", args ?? new GetAnalyticsConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified Analytics Connector.
        /// </summary>
        public static Output<GetAnalyticsConnectorResult> Invoke(GetAnalyticsConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAnalyticsConnectorResult>("azure-native:healthcareapis/v20221001preview:getAnalyticsConnector", args ?? new GetAnalyticsConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAnalyticsConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Analytics Connector resource.
        /// </summary>
        [Input("analyticsConnectorName", required: true)]
        public string AnalyticsConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetAnalyticsConnectorArgs()
        {
        }
        public static new GetAnalyticsConnectorArgs Empty => new GetAnalyticsConnectorArgs();
    }

    public sealed class GetAnalyticsConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Analytics Connector resource.
        /// </summary>
        [Input("analyticsConnectorName", required: true)]
        public Input<string> AnalyticsConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetAnalyticsConnectorInvokeArgs()
        {
        }
        public static new GetAnalyticsConnectorInvokeArgs Empty => new GetAnalyticsConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetAnalyticsConnectorResult
    {
        /// <summary>
        /// Data destination configuration for Analytics Connector.
        /// </summary>
        public readonly Outputs.AnalyticsConnectorDataLakeDataDestinationResponse DataDestinationConfiguration;
        /// <summary>
        /// Data mapping configuration for Analytics Connector.
        /// </summary>
        public readonly Outputs.AnalyticsConnectorFhirToParquetMappingResponse DataMappingConfiguration;
        /// <summary>
        /// Data source for Analytics Connector.
        /// </summary>
        public readonly Outputs.AnalyticsConnectorFhirServiceDataSourceResponse DataSourceConfiguration;
        /// <summary>
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// The resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Setting indicating whether the service has a managed identity associated with it.
        /// </summary>
        public readonly Outputs.ServiceManagedIdentityResponseIdentity? Identity;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAnalyticsConnectorResult(
            Outputs.AnalyticsConnectorDataLakeDataDestinationResponse dataDestinationConfiguration,

            Outputs.AnalyticsConnectorFhirToParquetMappingResponse dataMappingConfiguration,

            Outputs.AnalyticsConnectorFhirServiceDataSourceResponse dataSourceConfiguration,

            string? etag,

            string id,

            Outputs.ServiceManagedIdentityResponseIdentity? identity,

            string? location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataDestinationConfiguration = dataDestinationConfiguration;
            DataMappingConfiguration = dataMappingConfiguration;
            DataSourceConfiguration = dataSourceConfiguration;
            Etag = etag;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
