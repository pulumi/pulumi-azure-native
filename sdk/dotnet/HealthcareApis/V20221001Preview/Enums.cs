// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HealthcareApis.V20221001Preview
{
    /// <summary>
    /// Type of data destination.
    /// </summary>
    [EnumType]
    public readonly struct AnalyticsConnectorDataDestinationType : IEquatable<AnalyticsConnectorDataDestinationType>
    {
        private readonly string _value;

        private AnalyticsConnectorDataDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalyticsConnectorDataDestinationType Datalake { get; } = new AnalyticsConnectorDataDestinationType("datalake");

        public static bool operator ==(AnalyticsConnectorDataDestinationType left, AnalyticsConnectorDataDestinationType right) => left.Equals(right);
        public static bool operator !=(AnalyticsConnectorDataDestinationType left, AnalyticsConnectorDataDestinationType right) => !left.Equals(right);

        public static explicit operator string(AnalyticsConnectorDataDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalyticsConnectorDataDestinationType other && Equals(other);
        public bool Equals(AnalyticsConnectorDataDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of data source.
    /// </summary>
    [EnumType]
    public readonly struct AnalyticsConnectorDataSourceType : IEquatable<AnalyticsConnectorDataSourceType>
    {
        private readonly string _value;

        private AnalyticsConnectorDataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalyticsConnectorDataSourceType Fhirservice { get; } = new AnalyticsConnectorDataSourceType("fhirservice");

        public static bool operator ==(AnalyticsConnectorDataSourceType left, AnalyticsConnectorDataSourceType right) => left.Equals(right);
        public static bool operator !=(AnalyticsConnectorDataSourceType left, AnalyticsConnectorDataSourceType right) => !left.Equals(right);

        public static explicit operator string(AnalyticsConnectorDataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalyticsConnectorDataSourceType other && Equals(other);
        public bool Equals(AnalyticsConnectorDataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of data mapping.
    /// </summary>
    [EnumType]
    public readonly struct AnalyticsConnectorMappingType : IEquatable<AnalyticsConnectorMappingType>
    {
        private readonly string _value;

        private AnalyticsConnectorMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalyticsConnectorMappingType FhirToParquet { get; } = new AnalyticsConnectorMappingType("fhirToParquet");

        public static bool operator ==(AnalyticsConnectorMappingType left, AnalyticsConnectorMappingType right) => left.Equals(right);
        public static bool operator !=(AnalyticsConnectorMappingType left, AnalyticsConnectorMappingType right) => !left.Equals(right);

        public static explicit operator string(AnalyticsConnectorMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalyticsConnectorMappingType other && Equals(other);
        public bool Equals(AnalyticsConnectorMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of FHIR Service.
    /// </summary>
    [EnumType]
    public readonly struct FhirServiceVersion : IEquatable<FhirServiceVersion>
    {
        private readonly string _value;

        private FhirServiceVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirServiceVersion STU3 { get; } = new FhirServiceVersion("STU3");
        public static FhirServiceVersion R4 { get; } = new FhirServiceVersion("R4");

        public static bool operator ==(FhirServiceVersion left, FhirServiceVersion right) => left.Equals(right);
        public static bool operator !=(FhirServiceVersion left, FhirServiceVersion right) => !left.Equals(right);

        public static explicit operator string(FhirServiceVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirServiceVersion other && Equals(other);
        public bool Equals(FhirServiceVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of identity being specified, currently SystemAssigned and None are allowed.
    /// </summary>
    [EnumType]
    public readonly struct ServiceManagedIdentityType : IEquatable<ServiceManagedIdentityType>
    {
        private readonly string _value;

        private ServiceManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceManagedIdentityType None { get; } = new ServiceManagedIdentityType("None");
        public static ServiceManagedIdentityType SystemAssigned { get; } = new ServiceManagedIdentityType("SystemAssigned");
        public static ServiceManagedIdentityType UserAssigned { get; } = new ServiceManagedIdentityType("UserAssigned");
        public static ServiceManagedIdentityType SystemAssigned_UserAssigned { get; } = new ServiceManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ServiceManagedIdentityType left, ServiceManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ServiceManagedIdentityType left, ServiceManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ServiceManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceManagedIdentityType other && Equals(other);
        public bool Equals(ServiceManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
