// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HealthcareApis.V20220601
{
    public static class GetFhirService
    {
        /// <summary>
        /// Gets the properties of the specified FHIR Service.
        /// </summary>
        public static Task<GetFhirServiceResult> InvokeAsync(GetFhirServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFhirServiceResult>("azure-native:healthcareapis/v20220601:getFhirService", args ?? new GetFhirServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified FHIR Service.
        /// </summary>
        public static Output<GetFhirServiceResult> Invoke(GetFhirServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFhirServiceResult>("azure-native:healthcareapis/v20220601:getFhirService", args ?? new GetFhirServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFhirServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of FHIR Service resource.
        /// </summary>
        [Input("fhirServiceName", required: true)]
        public string FhirServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetFhirServiceArgs()
        {
        }
        public static new GetFhirServiceArgs Empty => new GetFhirServiceArgs();
    }

    public sealed class GetFhirServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of FHIR Service resource.
        /// </summary>
        [Input("fhirServiceName", required: true)]
        public Input<string> FhirServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetFhirServiceInvokeArgs()
        {
        }
        public static new GetFhirServiceInvokeArgs Empty => new GetFhirServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetFhirServiceResult
    {
        /// <summary>
        /// Fhir Service access policies.
        /// </summary>
        public readonly ImmutableArray<Outputs.FhirServiceAccessPolicyEntryResponse> AccessPolicies;
        /// <summary>
        /// Fhir Service Azure container registry configuration.
        /// </summary>
        public readonly Outputs.FhirServiceAcrConfigurationResponse? AcrConfiguration;
        /// <summary>
        /// Fhir Service authentication configuration.
        /// </summary>
        public readonly Outputs.FhirServiceAuthenticationConfigurationResponse? AuthenticationConfiguration;
        /// <summary>
        /// Fhir Service Cors configuration.
        /// </summary>
        public readonly Outputs.FhirServiceCorsConfigurationResponse? CorsConfiguration;
        /// <summary>
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Fhir Service event support status.
        /// </summary>
        public readonly string EventState;
        /// <summary>
        /// Fhir Service export configuration.
        /// </summary>
        public readonly Outputs.FhirServiceExportConfigurationResponse? ExportConfiguration;
        /// <summary>
        /// The resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Setting indicating whether the service has a managed identity associated with it.
        /// </summary>
        public readonly Outputs.ServiceManagedIdentityResponseIdentity? Identity;
        /// <summary>
        /// Fhir Service import configuration.
        /// </summary>
        public readonly Outputs.FhirServiceImportConfigurationResponse? ImportConfiguration;
        /// <summary>
        /// The kind of the service.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of private endpoint connections that are set up for this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Control permission for data plane traffic coming from public networks while private endpoint is enabled.
        /// </summary>
        public readonly string PublicNetworkAccess;
        /// <summary>
        /// Determines tracking of history for resources.
        /// </summary>
        public readonly Outputs.ResourceVersionPolicyConfigurationResponse? ResourceVersionPolicyConfiguration;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFhirServiceResult(
            ImmutableArray<Outputs.FhirServiceAccessPolicyEntryResponse> accessPolicies,

            Outputs.FhirServiceAcrConfigurationResponse? acrConfiguration,

            Outputs.FhirServiceAuthenticationConfigurationResponse? authenticationConfiguration,

            Outputs.FhirServiceCorsConfigurationResponse? corsConfiguration,

            string? etag,

            string eventState,

            Outputs.FhirServiceExportConfigurationResponse? exportConfiguration,

            string id,

            Outputs.ServiceManagedIdentityResponseIdentity? identity,

            Outputs.FhirServiceImportConfigurationResponse? importConfiguration,

            string? kind,

            string? location,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string publicNetworkAccess,

            Outputs.ResourceVersionPolicyConfigurationResponse? resourceVersionPolicyConfiguration,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AccessPolicies = accessPolicies;
            AcrConfiguration = acrConfiguration;
            AuthenticationConfiguration = authenticationConfiguration;
            CorsConfiguration = corsConfiguration;
            Etag = etag;
            EventState = eventState;
            ExportConfiguration = exportConfiguration;
            Id = id;
            Identity = identity;
            ImportConfiguration = importConfiguration;
            Kind = kind;
            Location = location;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            ResourceVersionPolicyConfiguration = resourceVersionPolicyConfiguration;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
