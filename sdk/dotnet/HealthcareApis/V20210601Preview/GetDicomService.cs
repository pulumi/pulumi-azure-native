// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HealthcareApis.V20210601Preview
{
    public static class GetDicomService
    {
        /// <summary>
        /// The description of Dicom Service
        /// </summary>
        public static Task<GetDicomServiceResult> InvokeAsync(GetDicomServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDicomServiceResult>("azure-native:healthcareapis/v20210601preview:getDicomService", args ?? new GetDicomServiceArgs(), options.WithDefaults());

        /// <summary>
        /// The description of Dicom Service
        /// </summary>
        public static Output<GetDicomServiceResult> Invoke(GetDicomServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDicomServiceResult>("azure-native:healthcareapis/v20210601preview:getDicomService", args ?? new GetDicomServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDicomServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of DICOM Service resource.
        /// </summary>
        [Input("dicomServiceName", required: true)]
        public string DicomServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetDicomServiceArgs()
        {
        }
    }

    public sealed class GetDicomServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of DICOM Service resource.
        /// </summary>
        [Input("dicomServiceName", required: true)]
        public Input<string> DicomServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the service instance.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetDicomServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDicomServiceResult
    {
        /// <summary>
        /// Dicom Service authentication configuration.
        /// </summary>
        public readonly Outputs.DicomServiceAuthenticationConfigurationResponse? AuthenticationConfiguration;
        /// <summary>
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// The resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The url of the Dicom Services.
        /// </summary>
        public readonly string ServiceUrl;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDicomServiceResult(
            Outputs.DicomServiceAuthenticationConfigurationResponse? authenticationConfiguration,

            string? etag,

            string id,

            string? location,

            string name,

            string provisioningState,

            string serviceUrl,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AuthenticationConfiguration = authenticationConfiguration;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ServiceUrl = serviceUrl;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
