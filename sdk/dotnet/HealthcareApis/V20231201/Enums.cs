// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HealthcareApis.V20231201
{
    /// <summary>
    /// Controls how resources are versioned on the FHIR service
    /// </summary>
    [EnumType]
    public readonly struct FhirResourceVersionPolicy : IEquatable<FhirResourceVersionPolicy>
    {
        private readonly string _value;

        private FhirResourceVersionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirResourceVersionPolicy No_version { get; } = new FhirResourceVersionPolicy("no-version");
        public static FhirResourceVersionPolicy Versioned { get; } = new FhirResourceVersionPolicy("versioned");
        public static FhirResourceVersionPolicy Versioned_update { get; } = new FhirResourceVersionPolicy("versioned-update");

        public static bool operator ==(FhirResourceVersionPolicy left, FhirResourceVersionPolicy right) => left.Equals(right);
        public static bool operator !=(FhirResourceVersionPolicy left, FhirResourceVersionPolicy right) => !left.Equals(right);

        public static explicit operator string(FhirResourceVersionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirResourceVersionPolicy other && Equals(other);
        public bool Equals(FhirResourceVersionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the service.
    /// </summary>
    [EnumType]
    public readonly struct FhirServiceKind : IEquatable<FhirServiceKind>
    {
        private readonly string _value;

        private FhirServiceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirServiceKind Fhir_Stu3 { get; } = new FhirServiceKind("fhir-Stu3");
        public static FhirServiceKind Fhir_R4 { get; } = new FhirServiceKind("fhir-R4");

        public static bool operator ==(FhirServiceKind left, FhirServiceKind right) => left.Equals(right);
        public static bool operator !=(FhirServiceKind left, FhirServiceKind right) => !left.Equals(right);

        public static explicit operator string(FhirServiceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirServiceKind other && Equals(other);
        public bool Equals(FhirServiceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines how resource identity is resolved on the destination.
    /// </summary>
    [EnumType]
    public readonly struct IotIdentityResolutionType : IEquatable<IotIdentityResolutionType>
    {
        private readonly string _value;

        private IotIdentityResolutionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IotIdentityResolutionType Create { get; } = new IotIdentityResolutionType("Create");
        public static IotIdentityResolutionType Lookup { get; } = new IotIdentityResolutionType("Lookup");

        public static bool operator ==(IotIdentityResolutionType left, IotIdentityResolutionType right) => left.Equals(right);
        public static bool operator !=(IotIdentityResolutionType left, IotIdentityResolutionType right) => !left.Equals(right);

        public static explicit operator string(IotIdentityResolutionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IotIdentityResolutionType other && Equals(other);
        public bool Equals(IotIdentityResolutionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the service.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind Fhir { get; } = new Kind("fhir");
        public static Kind Fhir_Stu3 { get; } = new Kind("fhir-Stu3");
        public static Kind Fhir_R4 { get; } = new Kind("fhir-R4");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of identity being specified, currently SystemAssigned and None are allowed.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Control permission for data plane traffic coming from public networks while private endpoint is enabled.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of identity being specified, currently SystemAssigned and None are allowed.
    /// </summary>
    [EnumType]
    public readonly struct ServiceManagedIdentityType : IEquatable<ServiceManagedIdentityType>
    {
        private readonly string _value;

        private ServiceManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceManagedIdentityType None { get; } = new ServiceManagedIdentityType("None");
        public static ServiceManagedIdentityType SystemAssigned { get; } = new ServiceManagedIdentityType("SystemAssigned");
        public static ServiceManagedIdentityType UserAssigned { get; } = new ServiceManagedIdentityType("UserAssigned");
        public static ServiceManagedIdentityType SystemAssigned_UserAssigned { get; } = new ServiceManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ServiceManagedIdentityType left, ServiceManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ServiceManagedIdentityType left, ServiceManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ServiceManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceManagedIdentityType other && Equals(other);
        public bool Equals(ServiceManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Data Actions that can be enabled for a Smart Identity Provider Application.
    /// </summary>
    [EnumType]
    public readonly struct SmartDataActions : IEquatable<SmartDataActions>
    {
        private readonly string _value;

        private SmartDataActions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SmartDataActions Read { get; } = new SmartDataActions("Read");

        public static bool operator ==(SmartDataActions left, SmartDataActions right) => left.Equals(right);
        public static bool operator !=(SmartDataActions left, SmartDataActions right) => !left.Equals(right);

        public static explicit operator string(SmartDataActions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SmartDataActions other && Equals(other);
        public bool Equals(SmartDataActions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
