// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20230707Preview
{
    public static class GetScalingPlanPooledSchedule
    {
        /// <summary>
        /// Get a ScalingPlanPooledSchedule.
        /// </summary>
        public static Task<GetScalingPlanPooledScheduleResult> InvokeAsync(GetScalingPlanPooledScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScalingPlanPooledScheduleResult>("azure-native:desktopvirtualization/v20230707preview:getScalingPlanPooledSchedule", args ?? new GetScalingPlanPooledScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Get a ScalingPlanPooledSchedule.
        /// </summary>
        public static Output<GetScalingPlanPooledScheduleResult> Invoke(GetScalingPlanPooledScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScalingPlanPooledScheduleResult>("azure-native:desktopvirtualization/v20230707preview:getScalingPlanPooledSchedule", args ?? new GetScalingPlanPooledScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScalingPlanPooledScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public string ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName", required: true)]
        public string ScalingPlanScheduleName { get; set; } = null!;

        public GetScalingPlanPooledScheduleArgs()
        {
        }
        public static new GetScalingPlanPooledScheduleArgs Empty => new GetScalingPlanPooledScheduleArgs();
    }

    public sealed class GetScalingPlanPooledScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public Input<string> ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName", required: true)]
        public Input<string> ScalingPlanScheduleName { get; set; } = null!;

        public GetScalingPlanPooledScheduleInvokeArgs()
        {
        }
        public static new GetScalingPlanPooledScheduleInvokeArgs Empty => new GetScalingPlanPooledScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScalingPlanPooledScheduleResult
    {
        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        public readonly ImmutableArray<string> DaysOfWeek;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Load balancing algorithm for off-peak period.
        /// </summary>
        public readonly string? OffPeakLoadBalancingAlgorithm;
        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        public readonly Outputs.TimeResponse? OffPeakStartTime;
        /// <summary>
        /// Load balancing algorithm for peak period.
        /// </summary>
        public readonly string? PeakLoadBalancingAlgorithm;
        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        public readonly Outputs.TimeResponse? PeakStartTime;
        /// <summary>
        /// Capacity threshold for ramp down period.
        /// </summary>
        public readonly int? RampDownCapacityThresholdPct;
        /// <summary>
        /// Should users be logged off forcefully from hosts.
        /// </summary>
        public readonly bool? RampDownForceLogoffUsers;
        /// <summary>
        /// Load balancing algorithm for ramp down period.
        /// </summary>
        public readonly string? RampDownLoadBalancingAlgorithm;
        /// <summary>
        /// Minimum host percentage for ramp down period.
        /// </summary>
        public readonly int? RampDownMinimumHostsPct;
        /// <summary>
        /// Notification message for users during ramp down period.
        /// </summary>
        public readonly string? RampDownNotificationMessage;
        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        public readonly Outputs.TimeResponse? RampDownStartTime;
        /// <summary>
        /// Specifies when to stop hosts during ramp down period.
        /// </summary>
        public readonly string? RampDownStopHostsWhen;
        /// <summary>
        /// Number of minutes to wait to stop hosts during ramp down period.
        /// </summary>
        public readonly int? RampDownWaitTimeMinutes;
        /// <summary>
        /// Capacity threshold for ramp up period.
        /// </summary>
        public readonly int? RampUpCapacityThresholdPct;
        /// <summary>
        /// Load balancing algorithm for ramp up period.
        /// </summary>
        public readonly string? RampUpLoadBalancingAlgorithm;
        /// <summary>
        /// Minimum host percentage for ramp up period.
        /// </summary>
        public readonly int? RampUpMinimumHostsPct;
        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        public readonly Outputs.TimeResponse? RampUpStartTime;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScalingPlanPooledScheduleResult(
            ImmutableArray<string> daysOfWeek,

            string id,

            string name,

            string? offPeakLoadBalancingAlgorithm,

            Outputs.TimeResponse? offPeakStartTime,

            string? peakLoadBalancingAlgorithm,

            Outputs.TimeResponse? peakStartTime,

            int? rampDownCapacityThresholdPct,

            bool? rampDownForceLogoffUsers,

            string? rampDownLoadBalancingAlgorithm,

            int? rampDownMinimumHostsPct,

            string? rampDownNotificationMessage,

            Outputs.TimeResponse? rampDownStartTime,

            string? rampDownStopHostsWhen,

            int? rampDownWaitTimeMinutes,

            int? rampUpCapacityThresholdPct,

            string? rampUpLoadBalancingAlgorithm,

            int? rampUpMinimumHostsPct,

            Outputs.TimeResponse? rampUpStartTime,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            DaysOfWeek = daysOfWeek;
            Id = id;
            Name = name;
            OffPeakLoadBalancingAlgorithm = offPeakLoadBalancingAlgorithm;
            OffPeakStartTime = offPeakStartTime;
            PeakLoadBalancingAlgorithm = peakLoadBalancingAlgorithm;
            PeakStartTime = peakStartTime;
            RampDownCapacityThresholdPct = rampDownCapacityThresholdPct;
            RampDownForceLogoffUsers = rampDownForceLogoffUsers;
            RampDownLoadBalancingAlgorithm = rampDownLoadBalancingAlgorithm;
            RampDownMinimumHostsPct = rampDownMinimumHostsPct;
            RampDownNotificationMessage = rampDownNotificationMessage;
            RampDownStartTime = rampDownStartTime;
            RampDownStopHostsWhen = rampDownStopHostsWhen;
            RampDownWaitTimeMinutes = rampDownWaitTimeMinutes;
            RampUpCapacityThresholdPct = rampUpCapacityThresholdPct;
            RampUpLoadBalancingAlgorithm = rampUpLoadBalancingAlgorithm;
            RampUpMinimumHostsPct = rampUpMinimumHostsPct;
            RampUpStartTime = rampUpStartTime;
            SystemData = systemData;
            Type = type;
        }
    }
}
