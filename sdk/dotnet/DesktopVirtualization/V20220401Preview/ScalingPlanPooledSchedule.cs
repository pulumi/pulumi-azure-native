// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20220401Preview
{
    /// <summary>
    /// Represents a ScalingPlanPooledSchedule definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:desktopvirtualization/v20220401preview:ScalingPlanPooledSchedule")]
    public partial class ScalingPlanPooledSchedule : Pulumi.CustomResource
    {
        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        [Output("daysOfWeek")]
        public Output<ImmutableArray<string>> DaysOfWeek { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Load balancing algorithm for off-peak period.
        /// </summary>
        [Output("offPeakLoadBalancingAlgorithm")]
        public Output<string?> OffPeakLoadBalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        [Output("offPeakStartTime")]
        public Output<Outputs.TimeResponse?> OffPeakStartTime { get; private set; } = null!;

        /// <summary>
        /// Load balancing algorithm for peak period.
        /// </summary>
        [Output("peakLoadBalancingAlgorithm")]
        public Output<string?> PeakLoadBalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        [Output("peakStartTime")]
        public Output<Outputs.TimeResponse?> PeakStartTime { get; private set; } = null!;

        /// <summary>
        /// Capacity threshold for ramp down period.
        /// </summary>
        [Output("rampDownCapacityThresholdPct")]
        public Output<int?> RampDownCapacityThresholdPct { get; private set; } = null!;

        /// <summary>
        /// Should users be logged off forcefully from hosts.
        /// </summary>
        [Output("rampDownForceLogoffUsers")]
        public Output<bool?> RampDownForceLogoffUsers { get; private set; } = null!;

        /// <summary>
        /// Load balancing algorithm for ramp down period.
        /// </summary>
        [Output("rampDownLoadBalancingAlgorithm")]
        public Output<string?> RampDownLoadBalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Minimum host percentage for ramp down period.
        /// </summary>
        [Output("rampDownMinimumHostsPct")]
        public Output<int?> RampDownMinimumHostsPct { get; private set; } = null!;

        /// <summary>
        /// Notification message for users during ramp down period.
        /// </summary>
        [Output("rampDownNotificationMessage")]
        public Output<string?> RampDownNotificationMessage { get; private set; } = null!;

        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        [Output("rampDownStartTime")]
        public Output<Outputs.TimeResponse?> RampDownStartTime { get; private set; } = null!;

        /// <summary>
        /// Specifies when to stop hosts during ramp down period.
        /// </summary>
        [Output("rampDownStopHostsWhen")]
        public Output<string?> RampDownStopHostsWhen { get; private set; } = null!;

        /// <summary>
        /// Number of minutes to wait to stop hosts during ramp down period.
        /// </summary>
        [Output("rampDownWaitTimeMinutes")]
        public Output<int?> RampDownWaitTimeMinutes { get; private set; } = null!;

        /// <summary>
        /// Capacity threshold for ramp up period.
        /// </summary>
        [Output("rampUpCapacityThresholdPct")]
        public Output<int?> RampUpCapacityThresholdPct { get; private set; } = null!;

        /// <summary>
        /// Load balancing algorithm for ramp up period.
        /// </summary>
        [Output("rampUpLoadBalancingAlgorithm")]
        public Output<string?> RampUpLoadBalancingAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Minimum host percentage for ramp up period.
        /// </summary>
        [Output("rampUpMinimumHostsPct")]
        public Output<int?> RampUpMinimumHostsPct { get; private set; } = null!;

        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        [Output("rampUpStartTime")]
        public Output<Outputs.TimeResponse?> RampUpStartTime { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ScalingPlanPooledSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScalingPlanPooledSchedule(string name, ScalingPlanPooledScheduleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20220401preview:ScalingPlanPooledSchedule", name, args ?? new ScalingPlanPooledScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScalingPlanPooledSchedule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20220401preview:ScalingPlanPooledSchedule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:desktopvirtualization:ScalingPlanPooledSchedule"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScalingPlanPooledSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScalingPlanPooledSchedule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ScalingPlanPooledSchedule(name, id, options);
        }
    }

    public sealed class ScalingPlanPooledScheduleArgs : Pulumi.ResourceArgs
    {
        [Input("daysOfWeek")]
        private InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.DayOfWeek>>? _daysOfWeek;

        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.DayOfWeek>> DaysOfWeek
        {
            get => _daysOfWeek ?? (_daysOfWeek = new InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.DayOfWeek>>());
            set => _daysOfWeek = value;
        }

        /// <summary>
        /// Load balancing algorithm for off-peak period.
        /// </summary>
        [Input("offPeakLoadBalancingAlgorithm")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.SessionHostLoadBalancingAlgorithm>? OffPeakLoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        [Input("offPeakStartTime")]
        public Input<Inputs.TimeArgs>? OffPeakStartTime { get; set; }

        /// <summary>
        /// Load balancing algorithm for peak period.
        /// </summary>
        [Input("peakLoadBalancingAlgorithm")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.SessionHostLoadBalancingAlgorithm>? PeakLoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        [Input("peakStartTime")]
        public Input<Inputs.TimeArgs>? PeakStartTime { get; set; }

        /// <summary>
        /// Capacity threshold for ramp down period.
        /// </summary>
        [Input("rampDownCapacityThresholdPct")]
        public Input<int>? RampDownCapacityThresholdPct { get; set; }

        /// <summary>
        /// Should users be logged off forcefully from hosts.
        /// </summary>
        [Input("rampDownForceLogoffUsers")]
        public Input<bool>? RampDownForceLogoffUsers { get; set; }

        /// <summary>
        /// Load balancing algorithm for ramp down period.
        /// </summary>
        [Input("rampDownLoadBalancingAlgorithm")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.SessionHostLoadBalancingAlgorithm>? RampDownLoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// Minimum host percentage for ramp down period.
        /// </summary>
        [Input("rampDownMinimumHostsPct")]
        public Input<int>? RampDownMinimumHostsPct { get; set; }

        /// <summary>
        /// Notification message for users during ramp down period.
        /// </summary>
        [Input("rampDownNotificationMessage")]
        public Input<string>? RampDownNotificationMessage { get; set; }

        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        [Input("rampDownStartTime")]
        public Input<Inputs.TimeArgs>? RampDownStartTime { get; set; }

        /// <summary>
        /// Specifies when to stop hosts during ramp down period.
        /// </summary>
        [Input("rampDownStopHostsWhen")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.StopHostsWhen>? RampDownStopHostsWhen { get; set; }

        /// <summary>
        /// Number of minutes to wait to stop hosts during ramp down period.
        /// </summary>
        [Input("rampDownWaitTimeMinutes")]
        public Input<int>? RampDownWaitTimeMinutes { get; set; }

        /// <summary>
        /// Capacity threshold for ramp up period.
        /// </summary>
        [Input("rampUpCapacityThresholdPct")]
        public Input<int>? RampUpCapacityThresholdPct { get; set; }

        /// <summary>
        /// Load balancing algorithm for ramp up period.
        /// </summary>
        [Input("rampUpLoadBalancingAlgorithm")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20220401Preview.SessionHostLoadBalancingAlgorithm>? RampUpLoadBalancingAlgorithm { get; set; }

        /// <summary>
        /// Minimum host percentage for ramp up period.
        /// </summary>
        [Input("rampUpMinimumHostsPct")]
        public Input<int>? RampUpMinimumHostsPct { get; set; }

        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        [Input("rampUpStartTime")]
        public Input<Inputs.TimeArgs>? RampUpStartTime { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public Input<string> ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName")]
        public Input<string>? ScalingPlanScheduleName { get; set; }

        public ScalingPlanPooledScheduleArgs()
        {
        }
    }
}
