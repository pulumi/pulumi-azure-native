// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20220210Preview
{
    public static class GetScalingPlan
    {
        /// <summary>
        /// Get a scaling plan.
        /// </summary>
        public static Task<GetScalingPlanResult> InvokeAsync(GetScalingPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScalingPlanResult>("azure-native:desktopvirtualization/v20220210preview:getScalingPlan", args ?? new GetScalingPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Get a scaling plan.
        /// </summary>
        public static Output<GetScalingPlanResult> Invoke(GetScalingPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScalingPlanResult>("azure-native:desktopvirtualization/v20220210preview:getScalingPlan", args ?? new GetScalingPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScalingPlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public string ScalingPlanName { get; set; } = null!;

        public GetScalingPlanArgs()
        {
        }
        public static new GetScalingPlanArgs Empty => new GetScalingPlanArgs();
    }

    public sealed class GetScalingPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public Input<string> ScalingPlanName { get; set; } = null!;

        public GetScalingPlanInvokeArgs()
        {
        }
        public static new GetScalingPlanInvokeArgs Empty => new GetScalingPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetScalingPlanResult
    {
        /// <summary>
        /// Description of scaling plan.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. 
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Exclusion tag for scaling plan.
        /// </summary>
        public readonly string? ExclusionTag;
        /// <summary>
        /// User friendly name of scaling plan.
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// List of ScalingHostPoolReference definitions.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingHostPoolReferenceResponse> HostPoolReferences;
        /// <summary>
        /// HostPool type for desktop.
        /// </summary>
        public readonly string? HostPoolType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponseIdentity? Identity;
        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        /// </summary>
        public readonly string? ManagedBy;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ObjectId of scaling plan. (internal use)
        /// </summary>
        public readonly string ObjectId;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponsePlan? Plan;
        /// <summary>
        /// List of ScalingSchedule definitions.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingScheduleResponse> Schedules;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponseSku? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Timezone of the scaling plan.
        /// </summary>
        public readonly string? TimeZone;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScalingPlanResult(
            string? description,

            string etag,

            string? exclusionTag,

            string? friendlyName,

            ImmutableArray<Outputs.ScalingHostPoolReferenceResponse> hostPoolReferences,

            string? hostPoolType,

            string id,

            Outputs.ResourceModelWithAllowedPropertySetResponseIdentity? identity,

            string? kind,

            string? location,

            string? managedBy,

            string name,

            string objectId,

            Outputs.ResourceModelWithAllowedPropertySetResponsePlan? plan,

            ImmutableArray<Outputs.ScalingScheduleResponse> schedules,

            Outputs.ResourceModelWithAllowedPropertySetResponseSku? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? timeZone,

            string type)
        {
            Description = description;
            Etag = etag;
            ExclusionTag = exclusionTag;
            FriendlyName = friendlyName;
            HostPoolReferences = hostPoolReferences;
            HostPoolType = hostPoolType;
            Id = id;
            Identity = identity;
            Kind = kind;
            Location = location;
            ManagedBy = managedBy;
            Name = name;
            ObjectId = objectId;
            Plan = plan;
            Schedules = schedules;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            TimeZone = timeZone;
            Type = type;
        }
    }
}
