// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20220210Preview
{
    public static class GetApplicationGroup
    {
        /// <summary>
        /// Represents a ApplicationGroup definition.
        /// </summary>
        public static Task<GetApplicationGroupResult> InvokeAsync(GetApplicationGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationGroupResult>("azure-native:desktopvirtualization/v20220210preview:getApplicationGroup", args ?? new GetApplicationGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a ApplicationGroup definition.
        /// </summary>
        public static Output<GetApplicationGroupResult> Invoke(GetApplicationGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetApplicationGroupResult>("azure-native:desktopvirtualization/v20220210preview:getApplicationGroup", args ?? new GetApplicationGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application group
        /// </summary>
        [Input("applicationGroupName", required: true)]
        public string ApplicationGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApplicationGroupArgs()
        {
        }
    }

    public sealed class GetApplicationGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application group
        /// </summary>
        [Input("applicationGroupName", required: true)]
        public Input<string> ApplicationGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetApplicationGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplicationGroupResult
    {
        /// <summary>
        /// Resource Type of ApplicationGroup.
        /// </summary>
        public readonly string ApplicationGroupType;
        /// <summary>
        /// Is cloud pc resource.
        /// </summary>
        public readonly bool CloudPcResource;
        /// <summary>
        /// Description of ApplicationGroup.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. 
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Friendly name of ApplicationGroup.
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// HostPool arm path of ApplicationGroup.
        /// </summary>
        public readonly string HostPoolArmPath;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponseIdentity? Identity;
        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        /// </summary>
        public readonly string? ManagedBy;
        /// <summary>
        /// The registration info of HostPool.
        /// </summary>
        public readonly Outputs.MigrationRequestPropertiesResponse? MigrationRequest;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ObjectId of ApplicationGroup. (internal use)
        /// </summary>
        public readonly string ObjectId;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponsePlan? Plan;
        public readonly Outputs.ResourceModelWithAllowedPropertySetResponseSku? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Workspace arm path of ApplicationGroup.
        /// </summary>
        public readonly string WorkspaceArmPath;

        [OutputConstructor]
        private GetApplicationGroupResult(
            string applicationGroupType,

            bool cloudPcResource,

            string? description,

            string etag,

            string? friendlyName,

            string hostPoolArmPath,

            string id,

            Outputs.ResourceModelWithAllowedPropertySetResponseIdentity? identity,

            string? kind,

            string? location,

            string? managedBy,

            Outputs.MigrationRequestPropertiesResponse? migrationRequest,

            string name,

            string objectId,

            Outputs.ResourceModelWithAllowedPropertySetResponsePlan? plan,

            Outputs.ResourceModelWithAllowedPropertySetResponseSku? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string workspaceArmPath)
        {
            ApplicationGroupType = applicationGroupType;
            CloudPcResource = cloudPcResource;
            Description = description;
            Etag = etag;
            FriendlyName = friendlyName;
            HostPoolArmPath = hostPoolArmPath;
            Id = id;
            Identity = identity;
            Kind = kind;
            Location = location;
            ManagedBy = managedBy;
            MigrationRequest = migrationRequest;
            Name = name;
            ObjectId = objectId;
            Plan = plan;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            WorkspaceArmPath = workspaceArmPath;
        }
    }
}
