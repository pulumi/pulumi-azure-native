// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20240808Preview
{
    /// <summary>
    /// Schema for App Attach Package properties.
    /// </summary>
    [AzureNativeResourceType("azure-native:desktopvirtualization/v20240808preview:AppAttachPackage")]
    public partial class AppAttachPackage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Field that can be populated with custom data and filtered on in list GET calls
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// Parameter indicating how the health check should behave if this package fails staging
        /// </summary>
        [Output("failHealthCheckOnStagingFailure")]
        public Output<string?> FailHealthCheckOnStagingFailure { get; private set; } = null!;

        /// <summary>
        /// List of Hostpool resource Ids.
        /// </summary>
        [Output("hostPoolReferences")]
        public Output<ImmutableArray<string>> HostPoolReferences { get; private set; } = null!;

        /// <summary>
        /// Detailed properties for App Attach Package
        /// </summary>
        [Output("image")]
        public Output<Outputs.AppAttachPackageInfoPropertiesResponse?> Image { get; private set; } = null!;

        /// <summary>
        /// URL path to certificate name located in keyVault
        /// </summary>
        [Output("keyVaultURL")]
        public Output<string?> KeyVaultURL { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Lookback url to third party control plane, is null for native app attach packages
        /// </summary>
        [Output("packageLookbackUrl")]
        public Output<string?> PackageLookbackUrl { get; private set; } = null!;

        /// <summary>
        /// Specific name of package owner, is "AppAttach" for native app attach packages
        /// </summary>
        [Output("packageOwnerName")]
        public Output<string?> PackageOwnerName { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the App Attach Package.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AppAttachPackage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppAttachPackage(string name, AppAttachPackageArgs args, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20240808preview:AppAttachPackage", name, args ?? new AppAttachPackageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppAttachPackage(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20240808preview:AppAttachPackage", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20231004preview:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20231101preview:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240116preview:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240306preview:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240403:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240408preview:AppAttachPackage" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization:AppAttachPackage" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppAttachPackage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppAttachPackage Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AppAttachPackage(name, id, options);
        }
    }

    public sealed class AppAttachPackageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Attach package
        /// </summary>
        [Input("appAttachPackageName")]
        public Input<string>? AppAttachPackageName { get; set; }

        /// <summary>
        /// Field that can be populated with custom data and filtered on in list GET calls
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        /// <summary>
        /// Parameter indicating how the health check should behave if this package fails staging
        /// </summary>
        [Input("failHealthCheckOnStagingFailure")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20240808Preview.FailHealthCheckOnStagingFailure>? FailHealthCheckOnStagingFailure { get; set; }

        [Input("hostPoolReferences")]
        private InputList<string>? _hostPoolReferences;

        /// <summary>
        /// List of Hostpool resource Ids.
        /// </summary>
        public InputList<string> HostPoolReferences
        {
            get => _hostPoolReferences ?? (_hostPoolReferences = new InputList<string>());
            set => _hostPoolReferences = value;
        }

        /// <summary>
        /// Detailed properties for App Attach Package
        /// </summary>
        [Input("image")]
        public Input<Inputs.AppAttachPackageInfoPropertiesArgs>? Image { get; set; }

        /// <summary>
        /// URL path to certificate name located in keyVault
        /// </summary>
        [Input("keyVaultURL")]
        public Input<string>? KeyVaultURL { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Lookback url to third party control plane, is null for native app attach packages
        /// </summary>
        [Input("packageLookbackUrl")]
        public Input<string>? PackageLookbackUrl { get; set; }

        /// <summary>
        /// Specific name of package owner, is "AppAttach" for native app attach packages
        /// </summary>
        [Input("packageOwnerName")]
        public Input<string>? PackageOwnerName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AppAttachPackageArgs()
        {
        }
        public static new AppAttachPackageArgs Empty => new AppAttachPackageArgs();
    }
}
