// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DesktopVirtualization.V20240408Preview
{
    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");
        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to be taken after a logoff during the ramp up period.
    /// </summary>
    [EnumType]
    public readonly struct SessionHandlingOperation : IEquatable<SessionHandlingOperation>
    {
        private readonly string _value;

        private SessionHandlingOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionHandlingOperation None { get; } = new SessionHandlingOperation("None");
        public static SessionHandlingOperation Deallocate { get; } = new SessionHandlingOperation("Deallocate");
        public static SessionHandlingOperation Hibernate { get; } = new SessionHandlingOperation("Hibernate");

        public static bool operator ==(SessionHandlingOperation left, SessionHandlingOperation right) => left.Equals(right);
        public static bool operator !=(SessionHandlingOperation left, SessionHandlingOperation right) => !left.Equals(right);

        public static explicit operator string(SessionHandlingOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionHandlingOperation other && Equals(other);
        public bool Equals(SessionHandlingOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Load balancing algorithm for ramp up period.
    /// </summary>
    [EnumType]
    public readonly struct SessionHostLoadBalancingAlgorithm : IEquatable<SessionHostLoadBalancingAlgorithm>
    {
        private readonly string _value;

        private SessionHostLoadBalancingAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionHostLoadBalancingAlgorithm BreadthFirst { get; } = new SessionHostLoadBalancingAlgorithm("BreadthFirst");
        public static SessionHostLoadBalancingAlgorithm DepthFirst { get; } = new SessionHostLoadBalancingAlgorithm("DepthFirst");

        public static bool operator ==(SessionHostLoadBalancingAlgorithm left, SessionHostLoadBalancingAlgorithm right) => left.Equals(right);
        public static bool operator !=(SessionHostLoadBalancingAlgorithm left, SessionHostLoadBalancingAlgorithm right) => !left.Equals(right);

        public static explicit operator string(SessionHostLoadBalancingAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionHostLoadBalancingAlgorithm other && Equals(other);
        public bool Equals(SessionHostLoadBalancingAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
    /// </summary>
    [EnumType]
    public readonly struct SetStartVMOnConnect : IEquatable<SetStartVMOnConnect>
    {
        private readonly string _value;

        private SetStartVMOnConnect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SetStartVMOnConnect Enable { get; } = new SetStartVMOnConnect("Enable");
        public static SetStartVMOnConnect Disable { get; } = new SetStartVMOnConnect("Disable");

        public static bool operator ==(SetStartVMOnConnect left, SetStartVMOnConnect right) => left.Equals(right);
        public static bool operator !=(SetStartVMOnConnect left, SetStartVMOnConnect right) => !left.Equals(right);

        public static explicit operator string(SetStartVMOnConnect value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SetStartVMOnConnect other && Equals(other);
        public bool Equals(SetStartVMOnConnect other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The desired startup behavior during the ramp up period for personal vms in the hostpool.
    /// </summary>
    [EnumType]
    public readonly struct StartupBehavior : IEquatable<StartupBehavior>
    {
        private readonly string _value;

        private StartupBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts.
        /// </summary>
        public static StartupBehavior None { get; } = new StartupBehavior("None");
        /// <summary>
        /// Session hosts with an assigned user will be started during Ramp Up
        /// </summary>
        public static StartupBehavior WithAssignedUser { get; } = new StartupBehavior("WithAssignedUser");
        /// <summary>
        /// All personal session hosts in the hostpool will be started during ramp up.
        /// </summary>
        public static StartupBehavior All { get; } = new StartupBehavior("All");

        public static bool operator ==(StartupBehavior left, StartupBehavior right) => left.Equals(right);
        public static bool operator !=(StartupBehavior left, StartupBehavior right) => !left.Equals(right);

        public static explicit operator string(StartupBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StartupBehavior other && Equals(other);
        public bool Equals(StartupBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies when to stop hosts during ramp down period.
    /// </summary>
    [EnumType]
    public readonly struct StopHostsWhen : IEquatable<StopHostsWhen>
    {
        private readonly string _value;

        private StopHostsWhen(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StopHostsWhen ZeroSessions { get; } = new StopHostsWhen("ZeroSessions");
        public static StopHostsWhen ZeroActiveSessions { get; } = new StopHostsWhen("ZeroActiveSessions");

        public static bool operator ==(StopHostsWhen left, StopHostsWhen right) => left.Equals(right);
        public static bool operator !=(StopHostsWhen left, StopHostsWhen right) => !left.Equals(right);

        public static explicit operator string(StopHostsWhen value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StopHostsWhen other && Equals(other);
        public bool Equals(StopHostsWhen other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
