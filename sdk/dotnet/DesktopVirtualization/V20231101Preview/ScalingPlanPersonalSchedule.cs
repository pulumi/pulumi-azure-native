// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20231101Preview
{
    /// <summary>
    /// Represents a ScalingPlanPersonalSchedule definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:desktopvirtualization/v20231101preview:ScalingPlanPersonalSchedule")]
    public partial class ScalingPlanPersonalSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        [Output("daysOfWeek")]
        public Output<ImmutableArray<string>> DaysOfWeek { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a user disconnect during the off-peak period.
        /// </summary>
        [Output("offPeakActionOnDisconnect")]
        public Output<string?> OffPeakActionOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a logoff during the off-peak period.
        /// </summary>
        [Output("offPeakActionOnLogoff")]
        public Output<string?> OffPeakActionOnLogoff { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        /// </summary>
        [Output("offPeakMinutesToWaitOnDisconnect")]
        public Output<int?> OffPeakMinutesToWaitOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        /// </summary>
        [Output("offPeakMinutesToWaitOnLogoff")]
        public Output<int?> OffPeakMinutesToWaitOnLogoff { get; private set; } = null!;

        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        [Output("offPeakStartTime")]
        public Output<Outputs.TimeResponse?> OffPeakStartTime { get; private set; } = null!;

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        /// </summary>
        [Output("offPeakStartVMOnConnect")]
        public Output<string?> OffPeakStartVMOnConnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a user disconnect during the peak period.
        /// </summary>
        [Output("peakActionOnDisconnect")]
        public Output<string?> PeakActionOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a logoff during the peak period.
        /// </summary>
        [Output("peakActionOnLogoff")]
        public Output<string?> PeakActionOnLogoff { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        /// </summary>
        [Output("peakMinutesToWaitOnDisconnect")]
        public Output<int?> PeakMinutesToWaitOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        /// </summary>
        [Output("peakMinutesToWaitOnLogoff")]
        public Output<int?> PeakMinutesToWaitOnLogoff { get; private set; } = null!;

        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        [Output("peakStartTime")]
        public Output<Outputs.TimeResponse?> PeakStartTime { get; private set; } = null!;

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        /// </summary>
        [Output("peakStartVMOnConnect")]
        public Output<string?> PeakStartVMOnConnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a user disconnect during the ramp down period.
        /// </summary>
        [Output("rampDownActionOnDisconnect")]
        public Output<string?> RampDownActionOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a logoff during the ramp down period.
        /// </summary>
        [Output("rampDownActionOnLogoff")]
        public Output<string?> RampDownActionOnLogoff { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        /// </summary>
        [Output("rampDownMinutesToWaitOnDisconnect")]
        public Output<int?> RampDownMinutesToWaitOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        /// </summary>
        [Output("rampDownMinutesToWaitOnLogoff")]
        public Output<int?> RampDownMinutesToWaitOnLogoff { get; private set; } = null!;

        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        [Output("rampDownStartTime")]
        public Output<Outputs.TimeResponse?> RampDownStartTime { get; private set; } = null!;

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        /// </summary>
        [Output("rampDownStartVMOnConnect")]
        public Output<string?> RampDownStartVMOnConnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a user disconnect during the ramp up period.
        /// </summary>
        [Output("rampUpActionOnDisconnect")]
        public Output<string?> RampUpActionOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Action to be taken after a logoff during the ramp up period.
        /// </summary>
        [Output("rampUpActionOnLogoff")]
        public Output<string?> RampUpActionOnLogoff { get; private set; } = null!;

        /// <summary>
        /// The desired startup behavior during the ramp up period for personal vms in the hostpool.
        /// </summary>
        [Output("rampUpAutoStartHosts")]
        public Output<string?> RampUpAutoStartHosts { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        /// </summary>
        [Output("rampUpMinutesToWaitOnDisconnect")]
        public Output<int?> RampUpMinutesToWaitOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        /// </summary>
        [Output("rampUpMinutesToWaitOnLogoff")]
        public Output<int?> RampUpMinutesToWaitOnLogoff { get; private set; } = null!;

        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        [Output("rampUpStartTime")]
        public Output<Outputs.TimeResponse?> RampUpStartTime { get; private set; } = null!;

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        /// </summary>
        [Output("rampUpStartVMOnConnect")]
        public Output<string?> RampUpStartVMOnConnect { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ScalingPlanPersonalSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScalingPlanPersonalSchedule(string name, ScalingPlanPersonalScheduleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20231101preview:ScalingPlanPersonalSchedule", name, args ?? new ScalingPlanPersonalScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScalingPlanPersonalSchedule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:desktopvirtualization/v20231101preview:ScalingPlanPersonalSchedule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20230707preview:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20230905:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20231004preview:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240116preview:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240306preview:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240403:ScalingPlanPersonalSchedule" },
                    new global::Pulumi.Alias { Type = "azure-native:desktopvirtualization/v20240408preview:ScalingPlanPersonalSchedule" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScalingPlanPersonalSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScalingPlanPersonalSchedule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ScalingPlanPersonalSchedule(name, id, options);
        }
    }

    public sealed class ScalingPlanPersonalScheduleArgs : global::Pulumi.ResourceArgs
    {
        [Input("daysOfWeek")]
        private InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.DayOfWeek>>? _daysOfWeek;

        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.DayOfWeek>> DaysOfWeek
        {
            get => _daysOfWeek ?? (_daysOfWeek = new InputList<Union<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.DayOfWeek>>());
            set => _daysOfWeek = value;
        }

        /// <summary>
        /// Action to be taken after a user disconnect during the off-peak period.
        /// </summary>
        [Input("offPeakActionOnDisconnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? OffPeakActionOnDisconnect { get; set; }

        /// <summary>
        /// Action to be taken after a logoff during the off-peak period.
        /// </summary>
        [Input("offPeakActionOnLogoff")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? OffPeakActionOnLogoff { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        /// </summary>
        [Input("offPeakMinutesToWaitOnDisconnect")]
        public Input<int>? OffPeakMinutesToWaitOnDisconnect { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        /// </summary>
        [Input("offPeakMinutesToWaitOnLogoff")]
        public Input<int>? OffPeakMinutesToWaitOnLogoff { get; set; }

        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        [Input("offPeakStartTime")]
        public Input<Inputs.TimeArgs>? OffPeakStartTime { get; set; }

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        /// </summary>
        [Input("offPeakStartVMOnConnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SetStartVMOnConnect>? OffPeakStartVMOnConnect { get; set; }

        /// <summary>
        /// Action to be taken after a user disconnect during the peak period.
        /// </summary>
        [Input("peakActionOnDisconnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? PeakActionOnDisconnect { get; set; }

        /// <summary>
        /// Action to be taken after a logoff during the peak period.
        /// </summary>
        [Input("peakActionOnLogoff")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? PeakActionOnLogoff { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        /// </summary>
        [Input("peakMinutesToWaitOnDisconnect")]
        public Input<int>? PeakMinutesToWaitOnDisconnect { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        /// </summary>
        [Input("peakMinutesToWaitOnLogoff")]
        public Input<int>? PeakMinutesToWaitOnLogoff { get; set; }

        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        [Input("peakStartTime")]
        public Input<Inputs.TimeArgs>? PeakStartTime { get; set; }

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        /// </summary>
        [Input("peakStartVMOnConnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SetStartVMOnConnect>? PeakStartVMOnConnect { get; set; }

        /// <summary>
        /// Action to be taken after a user disconnect during the ramp down period.
        /// </summary>
        [Input("rampDownActionOnDisconnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? RampDownActionOnDisconnect { get; set; }

        /// <summary>
        /// Action to be taken after a logoff during the ramp down period.
        /// </summary>
        [Input("rampDownActionOnLogoff")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? RampDownActionOnLogoff { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        /// </summary>
        [Input("rampDownMinutesToWaitOnDisconnect")]
        public Input<int>? RampDownMinutesToWaitOnDisconnect { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        /// </summary>
        [Input("rampDownMinutesToWaitOnLogoff")]
        public Input<int>? RampDownMinutesToWaitOnLogoff { get; set; }

        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        [Input("rampDownStartTime")]
        public Input<Inputs.TimeArgs>? RampDownStartTime { get; set; }

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        /// </summary>
        [Input("rampDownStartVMOnConnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SetStartVMOnConnect>? RampDownStartVMOnConnect { get; set; }

        /// <summary>
        /// Action to be taken after a user disconnect during the ramp up period.
        /// </summary>
        [Input("rampUpActionOnDisconnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? RampUpActionOnDisconnect { get; set; }

        /// <summary>
        /// Action to be taken after a logoff during the ramp up period.
        /// </summary>
        [Input("rampUpActionOnLogoff")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SessionHandlingOperation>? RampUpActionOnLogoff { get; set; }

        /// <summary>
        /// The desired startup behavior during the ramp up period for personal vms in the hostpool.
        /// </summary>
        [Input("rampUpAutoStartHosts")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.StartupBehavior>? RampUpAutoStartHosts { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        /// </summary>
        [Input("rampUpMinutesToWaitOnDisconnect")]
        public Input<int>? RampUpMinutesToWaitOnDisconnect { get; set; }

        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        /// </summary>
        [Input("rampUpMinutesToWaitOnLogoff")]
        public Input<int>? RampUpMinutesToWaitOnLogoff { get; set; }

        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        [Input("rampUpStartTime")]
        public Input<Inputs.TimeArgs>? RampUpStartTime { get; set; }

        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        /// </summary>
        [Input("rampUpStartVMOnConnect")]
        public InputUnion<string, Pulumi.AzureNative.DesktopVirtualization.V20231101Preview.SetStartVMOnConnect>? RampUpStartVMOnConnect { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public Input<string> ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName")]
        public Input<string>? ScalingPlanScheduleName { get; set; }

        public ScalingPlanPersonalScheduleArgs()
        {
            OffPeakStartVMOnConnect = "Enable";
            PeakStartVMOnConnect = "Enable";
            RampDownStartVMOnConnect = "Enable";
            RampUpStartVMOnConnect = "Enable";
        }
        public static new ScalingPlanPersonalScheduleArgs Empty => new ScalingPlanPersonalScheduleArgs();
    }
}
