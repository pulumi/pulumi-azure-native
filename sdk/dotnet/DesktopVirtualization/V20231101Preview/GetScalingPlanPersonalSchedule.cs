// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20231101Preview
{
    public static class GetScalingPlanPersonalSchedule
    {
        /// <summary>
        /// Get a ScalingPlanPersonalSchedule.
        /// </summary>
        public static Task<GetScalingPlanPersonalScheduleResult> InvokeAsync(GetScalingPlanPersonalScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScalingPlanPersonalScheduleResult>("azure-native:desktopvirtualization/v20231101preview:getScalingPlanPersonalSchedule", args ?? new GetScalingPlanPersonalScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Get a ScalingPlanPersonalSchedule.
        /// </summary>
        public static Output<GetScalingPlanPersonalScheduleResult> Invoke(GetScalingPlanPersonalScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScalingPlanPersonalScheduleResult>("azure-native:desktopvirtualization/v20231101preview:getScalingPlanPersonalSchedule", args ?? new GetScalingPlanPersonalScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScalingPlanPersonalScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public string ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName", required: true)]
        public string ScalingPlanScheduleName { get; set; } = null!;

        public GetScalingPlanPersonalScheduleArgs()
        {
        }
        public static new GetScalingPlanPersonalScheduleArgs Empty => new GetScalingPlanPersonalScheduleArgs();
    }

    public sealed class GetScalingPlanPersonalScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scaling plan.
        /// </summary>
        [Input("scalingPlanName", required: true)]
        public Input<string> ScalingPlanName { get; set; } = null!;

        /// <summary>
        /// The name of the ScalingPlanSchedule
        /// </summary>
        [Input("scalingPlanScheduleName", required: true)]
        public Input<string> ScalingPlanScheduleName { get; set; } = null!;

        public GetScalingPlanPersonalScheduleInvokeArgs()
        {
        }
        public static new GetScalingPlanPersonalScheduleInvokeArgs Empty => new GetScalingPlanPersonalScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScalingPlanPersonalScheduleResult
    {
        /// <summary>
        /// Set of days of the week on which this schedule is active.
        /// </summary>
        public readonly ImmutableArray<string> DaysOfWeek;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Action to be taken after a user disconnect during the off-peak period.
        /// </summary>
        public readonly string? OffPeakActionOnDisconnect;
        /// <summary>
        /// Action to be taken after a logoff during the off-peak period.
        /// </summary>
        public readonly string? OffPeakActionOnLogoff;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
        /// </summary>
        public readonly int? OffPeakMinutesToWaitOnDisconnect;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
        /// </summary>
        public readonly int? OffPeakMinutesToWaitOnLogoff;
        /// <summary>
        /// Starting time for off-peak period.
        /// </summary>
        public readonly Outputs.TimeResponse? OffPeakStartTime;
        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
        /// </summary>
        public readonly string? OffPeakStartVMOnConnect;
        /// <summary>
        /// Action to be taken after a user disconnect during the peak period.
        /// </summary>
        public readonly string? PeakActionOnDisconnect;
        /// <summary>
        /// Action to be taken after a logoff during the peak period.
        /// </summary>
        public readonly string? PeakActionOnLogoff;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
        /// </summary>
        public readonly int? PeakMinutesToWaitOnDisconnect;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
        /// </summary>
        public readonly int? PeakMinutesToWaitOnLogoff;
        /// <summary>
        /// Starting time for peak period.
        /// </summary>
        public readonly Outputs.TimeResponse? PeakStartTime;
        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the peak phase.
        /// </summary>
        public readonly string? PeakStartVMOnConnect;
        /// <summary>
        /// Action to be taken after a user disconnect during the ramp down period.
        /// </summary>
        public readonly string? RampDownActionOnDisconnect;
        /// <summary>
        /// Action to be taken after a logoff during the ramp down period.
        /// </summary>
        public readonly string? RampDownActionOnLogoff;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
        /// </summary>
        public readonly int? RampDownMinutesToWaitOnDisconnect;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
        /// </summary>
        public readonly int? RampDownMinutesToWaitOnLogoff;
        /// <summary>
        /// Starting time for ramp down period.
        /// </summary>
        public readonly Outputs.TimeResponse? RampDownStartTime;
        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
        /// </summary>
        public readonly string? RampDownStartVMOnConnect;
        /// <summary>
        /// Action to be taken after a user disconnect during the ramp up period.
        /// </summary>
        public readonly string? RampUpActionOnDisconnect;
        /// <summary>
        /// Action to be taken after a logoff during the ramp up period.
        /// </summary>
        public readonly string? RampUpActionOnLogoff;
        /// <summary>
        /// The desired startup behavior during the ramp up period for personal vms in the hostpool.
        /// </summary>
        public readonly string? RampUpAutoStartHosts;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
        /// </summary>
        public readonly int? RampUpMinutesToWaitOnDisconnect;
        /// <summary>
        /// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
        /// </summary>
        public readonly int? RampUpMinutesToWaitOnLogoff;
        /// <summary>
        /// Starting time for ramp up period.
        /// </summary>
        public readonly Outputs.TimeResponse? RampUpStartTime;
        /// <summary>
        /// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
        /// </summary>
        public readonly string? RampUpStartVMOnConnect;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScalingPlanPersonalScheduleResult(
            ImmutableArray<string> daysOfWeek,

            string id,

            string name,

            string? offPeakActionOnDisconnect,

            string? offPeakActionOnLogoff,

            int? offPeakMinutesToWaitOnDisconnect,

            int? offPeakMinutesToWaitOnLogoff,

            Outputs.TimeResponse? offPeakStartTime,

            string? offPeakStartVMOnConnect,

            string? peakActionOnDisconnect,

            string? peakActionOnLogoff,

            int? peakMinutesToWaitOnDisconnect,

            int? peakMinutesToWaitOnLogoff,

            Outputs.TimeResponse? peakStartTime,

            string? peakStartVMOnConnect,

            string? rampDownActionOnDisconnect,

            string? rampDownActionOnLogoff,

            int? rampDownMinutesToWaitOnDisconnect,

            int? rampDownMinutesToWaitOnLogoff,

            Outputs.TimeResponse? rampDownStartTime,

            string? rampDownStartVMOnConnect,

            string? rampUpActionOnDisconnect,

            string? rampUpActionOnLogoff,

            string? rampUpAutoStartHosts,

            int? rampUpMinutesToWaitOnDisconnect,

            int? rampUpMinutesToWaitOnLogoff,

            Outputs.TimeResponse? rampUpStartTime,

            string? rampUpStartVMOnConnect,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            DaysOfWeek = daysOfWeek;
            Id = id;
            Name = name;
            OffPeakActionOnDisconnect = offPeakActionOnDisconnect;
            OffPeakActionOnLogoff = offPeakActionOnLogoff;
            OffPeakMinutesToWaitOnDisconnect = offPeakMinutesToWaitOnDisconnect;
            OffPeakMinutesToWaitOnLogoff = offPeakMinutesToWaitOnLogoff;
            OffPeakStartTime = offPeakStartTime;
            OffPeakStartVMOnConnect = offPeakStartVMOnConnect;
            PeakActionOnDisconnect = peakActionOnDisconnect;
            PeakActionOnLogoff = peakActionOnLogoff;
            PeakMinutesToWaitOnDisconnect = peakMinutesToWaitOnDisconnect;
            PeakMinutesToWaitOnLogoff = peakMinutesToWaitOnLogoff;
            PeakStartTime = peakStartTime;
            PeakStartVMOnConnect = peakStartVMOnConnect;
            RampDownActionOnDisconnect = rampDownActionOnDisconnect;
            RampDownActionOnLogoff = rampDownActionOnLogoff;
            RampDownMinutesToWaitOnDisconnect = rampDownMinutesToWaitOnDisconnect;
            RampDownMinutesToWaitOnLogoff = rampDownMinutesToWaitOnLogoff;
            RampDownStartTime = rampDownStartTime;
            RampDownStartVMOnConnect = rampDownStartVMOnConnect;
            RampUpActionOnDisconnect = rampUpActionOnDisconnect;
            RampUpActionOnLogoff = rampUpActionOnLogoff;
            RampUpAutoStartHosts = rampUpAutoStartHosts;
            RampUpMinutesToWaitOnDisconnect = rampUpMinutesToWaitOnDisconnect;
            RampUpMinutesToWaitOnLogoff = rampUpMinutesToWaitOnLogoff;
            RampUpStartTime = rampUpStartTime;
            RampUpStartVMOnConnect = rampUpStartVMOnConnect;
            SystemData = systemData;
            Type = type;
        }
    }
}
