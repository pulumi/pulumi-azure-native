// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DesktopVirtualization.V20210513Preview
{
    public static class GetSessionHostConfiguration
    {
        /// <summary>
        /// Represents a SessionHostConfiguration definition.
        /// </summary>
        public static Task<GetSessionHostConfigurationResult> InvokeAsync(GetSessionHostConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSessionHostConfigurationResult>("azure-native:desktopvirtualization/v20210513preview:getSessionHostConfiguration", args ?? new GetSessionHostConfigurationArgs(), options.WithVersion());
    }


    public sealed class GetSessionHostConfigurationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the host pool within the specified resource group
        /// </summary>
        [Input("hostPoolName", required: true)]
        public string HostPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSessionHostConfigurationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSessionHostConfigurationResult
    {
        /// <summary>
        /// The disk type used by virtual machine in hostpool session host.
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// Domain configurations of session hosts.
        /// </summary>
        public readonly Outputs.DomainInfoPropertiesResponse? DomainInfo;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Image configurations of HostPool.
        /// </summary>
        public readonly Outputs.ImageInfoPropertiesResponse? ImageInfo;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The id of the size of a virtual machine connected to a hostpool.
        /// </summary>
        public readonly string? VMSizeId;
        /// <summary>
        /// The time when session host configuration was last modified and something was changed.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
        /// </summary>
        public readonly string? VmCustomConfigurationUri;

        [OutputConstructor]
        private GetSessionHostConfigurationResult(
            string? diskType,

            Outputs.DomainInfoPropertiesResponse? domainInfo,

            string id,

            Outputs.ImageInfoPropertiesResponse? imageInfo,

            string name,

            Outputs.SystemDataResponse systemData,

            string type,

            string? vMSizeId,

            string version,

            string? vmCustomConfigurationUri)
        {
            DiskType = diskType;
            DomainInfo = domainInfo;
            Id = id;
            ImageInfo = imageInfo;
            Name = name;
            SystemData = systemData;
            Type = type;
            VMSizeId = vMSizeId;
            Version = version;
            VmCustomConfigurationUri = vmCustomConfigurationUri;
        }
    }
}
