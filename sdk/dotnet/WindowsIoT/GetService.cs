// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.WindowsIoT
{
    public static class GetService
    {
        /// <summary>
        /// Get the non-security related metadata of a Windows IoT Device Service.
        /// API Version: 2019-06-01.
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("azure-native:windowsiot:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get the non-security related metadata of a Windows IoT Device Service.
        /// API Version: 2019-06-01.
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("azure-native:windowsiot:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Windows IoT Device Service.
        /// </summary>
        [Input("deviceName", required: true)]
        public string DeviceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the Windows IoT Device Service.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Windows IoT Device Service.
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the Windows IoT Device Service.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Windows IoT Device Service OEM AAD domain
        /// </summary>
        public readonly string? AdminDomainName;
        /// <summary>
        /// Windows IoT Device Service ODM AAD domain
        /// </summary>
        public readonly string? BillingDomainName;
        /// <summary>
        /// The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Fully qualified resource Id for the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the resource lives
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Windows IoT Device Service notes.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// Windows IoT Device Service device allocation,
        /// </summary>
        public readonly double? Quantity;
        /// <summary>
        /// Windows IoT Device Service start date,
        /// </summary>
        public readonly string StartDate;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServiceResult(
            string? adminDomainName,

            string? billingDomainName,

            string? etag,

            string id,

            string? location,

            string name,

            string? notes,

            double? quantity,

            string startDate,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdminDomainName = adminDomainName;
            BillingDomainName = billingDomainName;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            Notes = notes;
            Quantity = quantity;
            StartDate = startDate;
            Tags = tags;
            Type = type;
        }
    }
}
