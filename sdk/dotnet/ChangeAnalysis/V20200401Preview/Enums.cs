// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ChangeAnalysis.V20200401Preview
{
    /// <summary>
    /// The mode of includeChangeDetails feature. The flag configures whether to include or exclude content of the change before and after values.
    /// </summary>
    [EnumType]
    public readonly struct ChangeDetailsMode : IEquatable<ChangeDetailsMode>
    {
        private readonly string _value;

        private ChangeDetailsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ChangeDetailsMode None { get; } = new ChangeDetailsMode("None");
        public static ChangeDetailsMode Include { get; } = new ChangeDetailsMode("Include");
        public static ChangeDetailsMode Exclude { get; } = new ChangeDetailsMode("Exclude");

        public static bool operator ==(ChangeDetailsMode left, ChangeDetailsMode right) => left.Equals(right);
        public static bool operator !=(ChangeDetailsMode left, ChangeDetailsMode right) => !left.Equals(right);

        public static explicit operator string(ChangeDetailsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChangeDetailsMode other && Equals(other);
        public bool Equals(ChangeDetailsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityTypes : IEquatable<ManagedIdentityTypes>
    {
        private readonly string _value;

        private ManagedIdentityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityTypes None { get; } = new ManagedIdentityTypes("None");
        public static ManagedIdentityTypes SystemAssigned { get; } = new ManagedIdentityTypes("SystemAssigned");

        public static bool operator ==(ManagedIdentityTypes left, ManagedIdentityTypes right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityTypes left, ManagedIdentityTypes right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityTypes other && Equals(other);
        public bool Equals(ManagedIdentityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of notifications feature.
    /// </summary>
    [EnumType]
    public readonly struct NotificationsState : IEquatable<NotificationsState>
    {
        private readonly string _value;

        private NotificationsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotificationsState None { get; } = new NotificationsState("None");
        public static NotificationsState Enabled { get; } = new NotificationsState("Enabled");
        public static NotificationsState Disabled { get; } = new NotificationsState("Disabled");

        public static bool operator ==(NotificationsState left, NotificationsState right) => left.Equals(right);
        public static bool operator !=(NotificationsState left, NotificationsState right) => !left.Equals(right);

        public static explicit operator string(NotificationsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationsState other && Equals(other);
        public bool Equals(NotificationsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
