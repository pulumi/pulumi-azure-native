// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.WindowsESU.V20190916Preview
{
    public static class GetMultipleActivationKey
    {
        public static Task<GetMultipleActivationKeyResult> InvokeAsync(GetMultipleActivationKeyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMultipleActivationKeyResult>("azure-nextgen:windowsesu/v20190916preview:getMultipleActivationKey", args ?? new GetMultipleActivationKeyArgs(), options.WithVersion());
    }


    public sealed class GetMultipleActivationKeyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the MAK key.
        /// </summary>
        [Input("multipleActivationKeyName", required: true)]
        public string MultipleActivationKeyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMultipleActivationKeyArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMultipleActivationKeyResult
    {
        /// <summary>
        /// Agreement number under which the key is requested.
        /// </summary>
        public readonly string? AgreementNumber;
        /// <summary>
        /// End of support of security updates activated by the MAK key.
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// Number of activations/servers using the MAK key.
        /// </summary>
        public readonly int? InstalledServerNumber;
        /// <summary>
        /// &lt;code&gt; true &lt;/code&gt; if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; &lt;code&gt; false &lt;/code&gt; otherwise.
        /// </summary>
        public readonly bool? IsEligible;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// MAK 5x5 key.
        /// </summary>
        public readonly string MultipleActivationKey;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of OS for which the key is requested.
        /// </summary>
        public readonly string? OsType;
        public readonly string ProvisioningState;
        /// <summary>
        /// Type of support
        /// </summary>
        public readonly string? SupportType;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMultipleActivationKeyResult(
            string? agreementNumber,

            string expirationDate,

            int? installedServerNumber,

            bool? isEligible,

            string location,

            string multipleActivationKey,

            string name,

            string? osType,

            string provisioningState,

            string? supportType,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AgreementNumber = agreementNumber;
            ExpirationDate = expirationDate;
            InstalledServerNumber = installedServerNumber;
            IsEligible = isEligible;
            Location = location;
            MultipleActivationKey = multipleActivationKey;
            Name = name;
            OsType = osType;
            ProvisioningState = provisioningState;
            SupportType = supportType;
            Tags = tags;
            Type = type;
        }
    }
}
