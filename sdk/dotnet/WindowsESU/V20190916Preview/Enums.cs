// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.WindowsESU.V20190916Preview
{
    /// <summary>
    /// Type of OS for which the key is requested.
    /// </summary>
    [EnumType]
    public readonly struct OsType : IEquatable<OsType>
    {
        private readonly string _value;

        private OsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OsType Windows7 { get; } = new OsType("Windows7");
        public static OsType WindowsServer2008 { get; } = new OsType("WindowsServer2008");
        public static OsType WindowsServer2008R2 { get; } = new OsType("WindowsServer2008R2");

        public static bool operator ==(OsType left, OsType right) => left.Equals(right);
        public static bool operator !=(OsType left, OsType right) => !left.Equals(right);

        public static explicit operator string(OsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsType other && Equals(other);
        public bool Equals(OsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of support
    /// </summary>
    [EnumType]
    public readonly struct SupportType : IEquatable<SupportType>
    {
        private readonly string _value;

        private SupportType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportType SupplementalServicing { get; } = new SupportType("SupplementalServicing");
        public static SupportType PremiumAssurance { get; } = new SupportType("PremiumAssurance");

        public static bool operator ==(SupportType left, SupportType right) => left.Equals(right);
        public static bool operator !=(SupportType left, SupportType right) => !left.Equals(right);

        public static explicit operator string(SupportType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportType other && Equals(other);
        public bool Equals(SupportType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
