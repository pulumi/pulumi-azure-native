// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StoragePool.V20210801
{
    public static class GetDiskPool
    {
        /// <summary>
        /// Get a Disk pool.
        /// </summary>
        public static Task<GetDiskPoolResult> InvokeAsync(GetDiskPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiskPoolResult>("azure-native:storagepool/v20210801:getDiskPool", args ?? new GetDiskPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Disk pool.
        /// </summary>
        public static Output<GetDiskPoolResult> Invoke(GetDiskPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiskPoolResult>("azure-native:storagepool/v20210801:getDiskPool", args ?? new GetDiskPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiskPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Disk Pool.
        /// </summary>
        [Input("diskPoolName", required: true)]
        public string DiskPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiskPoolArgs()
        {
        }
        public static new GetDiskPoolArgs Empty => new GetDiskPoolArgs();
    }

    public sealed class GetDiskPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Disk Pool.
        /// </summary>
        [Input("diskPoolName", required: true)]
        public Input<string> DiskPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDiskPoolInvokeArgs()
        {
        }
        public static new GetDiskPoolInvokeArgs Empty => new GetDiskPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiskPoolResult
    {
        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Azure resource id. Indicates if this resource is managed by another Azure resource.
        /// </summary>
        public readonly string ManagedBy;
        /// <summary>
        /// List of Azure resource ids that manage this resource.
        /// </summary>
        public readonly ImmutableArray<string> ManagedByExtended;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties of Disk Pool.
        /// </summary>
        public readonly Outputs.DiskPoolPropertiesResponse Properties;
        /// <summary>
        /// Resource metadata required by ARM RPC
        /// </summary>
        public readonly Outputs.SystemMetadataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Sku tier
        /// </summary>
        public readonly string? Tier;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDiskPoolResult(
            string id,

            string location,

            string managedBy,

            ImmutableArray<string> managedByExtended,

            string name,

            Outputs.DiskPoolPropertiesResponse properties,

            Outputs.SystemMetadataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? tier,

            string type)
        {
            Id = id;
            Location = location;
            ManagedBy = managedBy;
            ManagedByExtended = managedByExtended;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Tier = tier;
            Type = type;
        }
    }
}
