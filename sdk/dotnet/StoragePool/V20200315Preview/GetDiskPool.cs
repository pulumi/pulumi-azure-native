// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.StoragePool.V20200315Preview
{
    public static class GetDiskPool
    {
        public static Task<GetDiskPoolResult> InvokeAsync(GetDiskPoolArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskPoolResult>("azure-nextgen:storagepool/v20200315preview:getDiskPool", args ?? new GetDiskPoolArgs(), options.WithVersion());
    }


    public sealed class GetDiskPoolArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Disk pool.
        /// </summary>
        [Input("diskPoolName", required: true)]
        public string DiskPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiskPoolArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiskPoolResult
    {
        /// <summary>
        /// List of additional capabilities for Disk pool.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalCapabilities;
        /// <summary>
        /// Logical zone for Disk pool resource; example: ["1"].
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskResponse> Disks;
        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of the operation on the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Operational status of the Disk pool.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Azure Resource ID of a Subnet for the Disk pool.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Resource metadata required by ARM RPC
        /// </summary>
        public readonly Outputs.SystemMetadataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Determines the SKU of VM deployed for Disk pool
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDiskPoolResult(
            ImmutableArray<string> additionalCapabilities,

            ImmutableArray<string> availabilityZones,

            ImmutableArray<Outputs.DiskResponse> disks,

            string id,

            string location,

            string name,

            string provisioningState,

            string status,

            string subnetId,

            Outputs.SystemMetadataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string tier,

            string type)
        {
            AdditionalCapabilities = additionalCapabilities;
            AvailabilityZones = availabilityZones;
            Disks = disks;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            SubnetId = subnetId;
            SystemData = systemData;
            Tags = tags;
            Tier = tier;
            Type = type;
        }
    }
}
