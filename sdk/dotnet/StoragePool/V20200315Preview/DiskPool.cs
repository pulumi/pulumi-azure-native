// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.StoragePool.V20200315Preview
{
    /// <summary>
    /// Response for Disk pool request.
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:storagepool/v20200315preview:DiskPool")]
    public partial class DiskPool : Pulumi.CustomResource
    {
        /// <summary>
        /// List of additional capabilities for Disk pool.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<ImmutableArray<string>> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// Logical zone for Disk pool resource; example: ["1"].
        /// </summary>
        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        /// <summary>
        /// List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<Outputs.DiskResponse>> Disks { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of the operation on the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Operational status of the Disk pool.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource ID of a Subnet for the Disk pool.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Resource metadata required by ARM RPC
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemMetadataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Determines the SKU of VM deployed for Disk pool
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DiskPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskPool(string name, DiskPoolArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:storagepool/v20200315preview:DiskPool", name, args ?? new DiskPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:storagepool/v20200315preview:DiskPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:storagepool:DiskPool"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DiskPool(name, id, options);
        }
    }

    public sealed class DiskPoolArgs : Pulumi.ResourceArgs
    {
        [Input("additionalCapabilities")]
        private InputList<string>? _additionalCapabilities;

        /// <summary>
        /// List of additional capabilities for a Disk pool.
        /// </summary>
        public InputList<string> AdditionalCapabilities
        {
            get => _additionalCapabilities ?? (_additionalCapabilities = new InputList<string>());
            set => _additionalCapabilities = value;
        }

        [Input("availabilityZones", required: true)]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// Logical zone for Disk pool resource; example: ["1"].
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        /// <summary>
        /// The name of the Disk pool.
        /// </summary>
        [Input("diskPoolName")]
        public Input<string>? DiskPoolName { get; set; }

        [Input("disks")]
        private InputList<Inputs.DiskArgs>? _disks;

        /// <summary>
        /// List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
        /// </summary>
        public InputList<Inputs.DiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.DiskArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// The geo-location where the resource lives.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Azure Resource ID of a Subnet for the Disk pool.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Determines the SKU of VM deployed for Disk pool
        /// </summary>
        [Input("tier", required: true)]
        public InputUnion<string, Pulumi.AzureNextGen.StoragePool.V20200315Preview.DiskPoolTier> Tier { get; set; } = null!;

        public DiskPoolArgs()
        {
        }
    }
}
