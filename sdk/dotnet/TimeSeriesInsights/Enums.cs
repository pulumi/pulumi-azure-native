// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.TimeSeriesInsights
{
    /// <summary>
    /// A role defining the data plane operations that a principal can perform on a Time Series Insights client.
    /// </summary>
    [EnumType]
    public readonly struct AccessPolicyRole : IEquatable<AccessPolicyRole>
    {
        private readonly string _value;

        private AccessPolicyRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessPolicyRole Reader { get; } = new AccessPolicyRole("Reader");
        public static AccessPolicyRole Contributor { get; } = new AccessPolicyRole("Contributor");

        public static bool operator ==(AccessPolicyRole left, AccessPolicyRole right) => left.Equals(right);
        public static bool operator !=(AccessPolicyRole left, AccessPolicyRole right) => !left.Equals(right);

        public static explicit operator string(AccessPolicyRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPolicyRole other && Equals(other);
        public bool Equals(AccessPolicyRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
    /// </summary>
    [EnumType]
    public readonly struct DataStringComparisonBehavior : IEquatable<DataStringComparisonBehavior>
    {
        private readonly string _value;

        private DataStringComparisonBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataStringComparisonBehavior Ordinal { get; } = new DataStringComparisonBehavior("Ordinal");
        public static DataStringComparisonBehavior OrdinalIgnoreCase { get; } = new DataStringComparisonBehavior("OrdinalIgnoreCase");

        public static bool operator ==(DataStringComparisonBehavior left, DataStringComparisonBehavior right) => left.Equals(right);
        public static bool operator !=(DataStringComparisonBehavior left, DataStringComparisonBehavior right) => !left.Equals(right);

        public static explicit operator string(DataStringComparisonBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataStringComparisonBehavior other && Equals(other);
        public bool Equals(DataStringComparisonBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the environment.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentKind : IEquatable<EnvironmentKind>
    {
        private readonly string _value;

        private EnvironmentKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentKind Gen1 { get; } = new EnvironmentKind("Gen1");
        public static EnvironmentKind Gen2 { get; } = new EnvironmentKind("Gen2");

        public static bool operator ==(EnvironmentKind left, EnvironmentKind right) => left.Equals(right);
        public static bool operator !=(EnvironmentKind left, EnvironmentKind right) => !left.Equals(right);

        public static explicit operator string(EnvironmentKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentKind other && Equals(other);
        public bool Equals(EnvironmentKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the event source.
    /// </summary>
    [EnumType]
    public readonly struct EventSourceKind : IEquatable<EventSourceKind>
    {
        private readonly string _value;

        private EventSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventSourceKind Microsoft_EventHub { get; } = new EventSourceKind("Microsoft.EventHub");
        public static EventSourceKind Microsoft_IoTHub { get; } = new EventSourceKind("Microsoft.IoTHub");

        public static bool operator ==(EventSourceKind left, EventSourceKind right) => left.Equals(right);
        public static bool operator !=(EventSourceKind left, EventSourceKind right) => !left.Equals(right);

        public static explicit operator string(EventSourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventSourceKind other && Equals(other);
        public bool Equals(EventSourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
    /// </summary>
    [EnumType]
    public readonly struct IngressStartAtType : IEquatable<IngressStartAtType>
    {
        private readonly string _value;

        private IngressStartAtType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressStartAtType EarliestAvailable { get; } = new IngressStartAtType("EarliestAvailable");
        public static IngressStartAtType EventSourceCreationTime { get; } = new IngressStartAtType("EventSourceCreationTime");
        public static IngressStartAtType CustomEnqueuedTime { get; } = new IngressStartAtType("CustomEnqueuedTime");

        public static bool operator ==(IngressStartAtType left, IngressStartAtType right) => left.Equals(right);
        public static bool operator !=(IngressStartAtType left, IngressStartAtType right) => !left.Equals(right);

        public static explicit operator string(IngressStartAtType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressStartAtType other && Equals(other);
        public bool Equals(IngressStartAtType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An enum that represents the format of the local timestamp property that needs to be set.
    /// </summary>
    [EnumType]
    public readonly struct LocalTimestampFormat : IEquatable<LocalTimestampFormat>
    {
        private readonly string _value;

        private LocalTimestampFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LocalTimestampFormat Embedded { get; } = new LocalTimestampFormat("Embedded");

        public static bool operator ==(LocalTimestampFormat left, LocalTimestampFormat right) => left.Equals(right);
        public static bool operator !=(LocalTimestampFormat left, LocalTimestampFormat right) => !left.Equals(right);

        public static explicit operator string(LocalTimestampFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LocalTimestampFormat other && Equals(other);
        public bool Equals(LocalTimestampFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the property.
    /// </summary>
    [EnumType]
    public readonly struct PropertyType : IEquatable<PropertyType>
    {
        private readonly string _value;

        private PropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PropertyType String { get; } = new PropertyType("String");

        public static bool operator ==(PropertyType left, PropertyType right) => left.Equals(right);
        public static bool operator !=(PropertyType left, PropertyType right) => !left.Equals(right);

        public static explicit operator string(PropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PropertyType other && Equals(other);
        public bool Equals(PropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the key property.
    /// </summary>
    [EnumType]
    public readonly struct ReferenceDataKeyPropertyType : IEquatable<ReferenceDataKeyPropertyType>
    {
        private readonly string _value;

        private ReferenceDataKeyPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReferenceDataKeyPropertyType String { get; } = new ReferenceDataKeyPropertyType("String");
        public static ReferenceDataKeyPropertyType Double { get; } = new ReferenceDataKeyPropertyType("Double");
        public static ReferenceDataKeyPropertyType Bool { get; } = new ReferenceDataKeyPropertyType("Bool");
        public static ReferenceDataKeyPropertyType DateTime { get; } = new ReferenceDataKeyPropertyType("DateTime");

        public static bool operator ==(ReferenceDataKeyPropertyType left, ReferenceDataKeyPropertyType right) => left.Equals(right);
        public static bool operator !=(ReferenceDataKeyPropertyType left, ReferenceDataKeyPropertyType right) => !left.Equals(right);

        public static explicit operator string(ReferenceDataKeyPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReferenceDataKeyPropertyType other && Equals(other);
        public bool Equals(ReferenceDataKeyPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of this SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName S1 { get; } = new SkuName("S1");
        public static SkuName S2 { get; } = new SkuName("S2");
        public static SkuName P1 { get; } = new SkuName("P1");
        public static SkuName L1 { get; } = new SkuName("L1");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
    /// </summary>
    [EnumType]
    public readonly struct StorageLimitExceededBehavior : IEquatable<StorageLimitExceededBehavior>
    {
        private readonly string _value;

        private StorageLimitExceededBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageLimitExceededBehavior PurgeOldData { get; } = new StorageLimitExceededBehavior("PurgeOldData");
        public static StorageLimitExceededBehavior PauseIngress { get; } = new StorageLimitExceededBehavior("PauseIngress");

        public static bool operator ==(StorageLimitExceededBehavior left, StorageLimitExceededBehavior right) => left.Equals(right);
        public static bool operator !=(StorageLimitExceededBehavior left, StorageLimitExceededBehavior right) => !left.Equals(right);

        public static explicit operator string(StorageLimitExceededBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageLimitExceededBehavior other && Equals(other);
        public bool Equals(StorageLimitExceededBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
