// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TimeSeriesInsights.V20180815Preview
{
    public static class GetStandardEnvironment
    {
        /// <summary>
        /// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Standard environments have data retention limits.
        /// </summary>
        public static Task<GetStandardEnvironmentResult> InvokeAsync(GetStandardEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStandardEnvironmentResult>("azure-native:timeseriesinsights/v20180815preview:getStandardEnvironment", args ?? new GetStandardEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Standard environments have data retention limits.
        /// </summary>
        public static Output<GetStandardEnvironmentResult> Invoke(GetStandardEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStandardEnvironmentResult>("azure-native:timeseriesinsights/v20180815preview:getStandardEnvironment", args ?? new GetStandardEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Time Series Insights environment associated with the specified resource group.
        /// </summary>
        [Input("environmentName", required: true)]
        public string EnvironmentName { get; set; } = null!;

        /// <summary>
        /// Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// Name of an Azure Resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetStandardEnvironmentArgs()
        {
        }
        public static new GetStandardEnvironmentArgs Empty => new GetStandardEnvironmentArgs();
    }

    public sealed class GetStandardEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Time Series Insights environment associated with the specified resource group.
        /// </summary>
        [Input("environmentName", required: true)]
        public Input<string> EnvironmentName { get; set; } = null!;

        /// <summary>
        /// Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// Name of an Azure Resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetStandardEnvironmentInvokeArgs()
        {
        }
        public static new GetStandardEnvironmentInvokeArgs Empty => new GetStandardEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetStandardEnvironmentResult
    {
        /// <summary>
        /// The time the resource was created.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        /// </summary>
        public readonly string DataAccessFqdn;
        /// <summary>
        /// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        /// </summary>
        public readonly string DataAccessId;
        /// <summary>
        /// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        /// </summary>
        public readonly string DataRetentionTime;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of the environment.
        /// Expected value is 'Standard'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
        /// </summary>
        public readonly ImmutableArray<Outputs.TimeSeriesIdPropertyResponse> PartitionKeyProperties;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        /// </summary>
        public readonly Outputs.EnvironmentStatusResponse Status;
        /// <summary>
        /// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        /// </summary>
        public readonly string? StorageLimitExceededBehavior;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetStandardEnvironmentResult(
            string creationTime,

            string dataAccessFqdn,

            string dataAccessId,

            string dataRetentionTime,

            string id,

            string kind,

            string location,

            string name,

            ImmutableArray<Outputs.TimeSeriesIdPropertyResponse> partitionKeyProperties,

            string provisioningState,

            Outputs.SkuResponse sku,

            Outputs.EnvironmentStatusResponse status,

            string? storageLimitExceededBehavior,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            CreationTime = creationTime;
            DataAccessFqdn = dataAccessFqdn;
            DataAccessId = dataAccessId;
            DataRetentionTime = dataRetentionTime;
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            PartitionKeyProperties = partitionKeyProperties;
            ProvisioningState = provisioningState;
            Sku = sku;
            Status = status;
            StorageLimitExceededBehavior = storageLimitExceededBehavior;
            Tags = tags;
            Type = type;
        }
    }
}
