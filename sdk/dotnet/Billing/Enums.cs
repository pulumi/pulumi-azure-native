// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Billing
{
    /// <summary>
    /// The state determines whether users from the associated tenant can be assigned roles for commerce activities like viewing and downloading invoices, managing payments, and making purchases.
    /// </summary>
    [EnumType]
    public readonly struct BillingManagementTenantState : IEquatable<BillingManagementTenantState>
    {
        private readonly string _value;

        private BillingManagementTenantState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingManagementTenantState Other { get; } = new BillingManagementTenantState("Other");
        public static BillingManagementTenantState NotAllowed { get; } = new BillingManagementTenantState("NotAllowed");
        public static BillingManagementTenantState Active { get; } = new BillingManagementTenantState("Active");
        public static BillingManagementTenantState Revoked { get; } = new BillingManagementTenantState("Revoked");

        public static bool operator ==(BillingManagementTenantState left, BillingManagementTenantState right) => left.Equals(right);
        public static bool operator !=(BillingManagementTenantState left, BillingManagementTenantState right) => !left.Equals(right);

        public static explicit operator string(BillingManagementTenantState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingManagementTenantState other && Equals(other);
        public bool Equals(BillingManagementTenantState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identifies the status of an invoice section.
    /// </summary>
    [EnumType]
    public readonly struct InvoiceSectionState : IEquatable<InvoiceSectionState>
    {
        private readonly string _value;

        private InvoiceSectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InvoiceSectionState Other { get; } = new InvoiceSectionState("Other");
        public static InvoiceSectionState Active { get; } = new InvoiceSectionState("Active");
        public static InvoiceSectionState Deleted { get; } = new InvoiceSectionState("Deleted");
        public static InvoiceSectionState Disabled { get; } = new InvoiceSectionState("Disabled");
        public static InvoiceSectionState UnderReview { get; } = new InvoiceSectionState("UnderReview");
        public static InvoiceSectionState Warned { get; } = new InvoiceSectionState("Warned");
        public static InvoiceSectionState Restricted { get; } = new InvoiceSectionState("Restricted");

        public static bool operator ==(InvoiceSectionState left, InvoiceSectionState right) => left.Equals(right);
        public static bool operator !=(InvoiceSectionState left, InvoiceSectionState right) => !left.Equals(right);

        public static explicit operator string(InvoiceSectionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InvoiceSectionState other && Equals(other);
        public bool Equals(InvoiceSectionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Reason for the specified invoice section status.
    /// </summary>
    [EnumType]
    public readonly struct InvoiceSectionStateReasonCode : IEquatable<InvoiceSectionStateReasonCode>
    {
        private readonly string _value;

        private InvoiceSectionStateReasonCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InvoiceSectionStateReasonCode Other { get; } = new InvoiceSectionStateReasonCode("Other");
        public static InvoiceSectionStateReasonCode PastDue { get; } = new InvoiceSectionStateReasonCode("PastDue");
        public static InvoiceSectionStateReasonCode UnusualActivity { get; } = new InvoiceSectionStateReasonCode("UnusualActivity");
        public static InvoiceSectionStateReasonCode SpendingLimitReached { get; } = new InvoiceSectionStateReasonCode("SpendingLimitReached");
        public static InvoiceSectionStateReasonCode SpendingLimitExpired { get; } = new InvoiceSectionStateReasonCode("SpendingLimitExpired");

        public static bool operator ==(InvoiceSectionStateReasonCode left, InvoiceSectionStateReasonCode right) => left.Equals(right);
        public static bool operator !=(InvoiceSectionStateReasonCode left, InvoiceSectionStateReasonCode right) => !left.Equals(right);

        public static explicit operator string(InvoiceSectionStateReasonCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InvoiceSectionStateReasonCode other && Equals(other);
        public bool Equals(InvoiceSectionStateReasonCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state determines whether subscriptions and licenses can be provisioned in the associated tenant. It can be set to 'Pending' to initiate a billing request.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningTenantState : IEquatable<ProvisioningTenantState>
    {
        private readonly string _value;

        private ProvisioningTenantState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningTenantState Other { get; } = new ProvisioningTenantState("Other");
        public static ProvisioningTenantState NotRequested { get; } = new ProvisioningTenantState("NotRequested");
        public static ProvisioningTenantState Active { get; } = new ProvisioningTenantState("Active");
        public static ProvisioningTenantState Pending { get; } = new ProvisioningTenantState("Pending");
        public static ProvisioningTenantState BillingRequestExpired { get; } = new ProvisioningTenantState("BillingRequestExpired");
        public static ProvisioningTenantState BillingRequestDeclined { get; } = new ProvisioningTenantState("BillingRequestDeclined");
        public static ProvisioningTenantState Revoked { get; } = new ProvisioningTenantState("Revoked");

        public static bool operator ==(ProvisioningTenantState left, ProvisioningTenantState right) => left.Equals(right);
        public static bool operator !=(ProvisioningTenantState left, ProvisioningTenantState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningTenantState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningTenantState other && Equals(other);
        public bool Equals(ProvisioningTenantState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
