// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Synapse.V20200401Preview
{
    /// <summary>
    /// A sql pool resource.
    /// </summary>
    [Obsolete(@"Version 2020-04-01-preview will be removed in v2 of the provider.")]
    [AzureNativeResourceType("azure-native:synapse/v20200401preview:SqlPoolsV3")]
    public partial class SqlPoolsV3 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The period of inactivity in minutes before automatically pausing the sql pool.
        /// </summary>
        [Output("autoPauseTimer")]
        public Output<int?> AutoPauseTimer { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the sql pool can automatically resume when connection attempts are made.
        /// </summary>
        [Output("autoResume")]
        public Output<bool?> AutoResume { get; private set; } = null!;

        /// <summary>
        /// The current service level objective name of the sql pool.
        /// </summary>
        [Output("currentServiceObjectiveName")]
        public Output<string> CurrentServiceObjectiveName { get; private set; } = null!;

        /// <summary>
        /// Kind of SqlPool.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The max service level objective name of the sql pool.
        /// </summary>
        [Output("maxServiceObjectiveName")]
        public Output<string?> MaxServiceObjectiveName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The requested service level objective name of the sql pool.
        /// </summary>
        [Output("requestedServiceObjectiveName")]
        public Output<string> RequestedServiceObjectiveName { get; private set; } = null!;

        /// <summary>
        /// The sql pool SKU. The list of SKUs may vary by region and support offer.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuV3Response?> Sku { get; private set; } = null!;

        /// <summary>
        /// The Guid of the sql pool.
        /// </summary>
        [Output("sqlPoolGuid")]
        public Output<string> SqlPoolGuid { get; private set; } = null!;

        /// <summary>
        /// The status of the sql pool.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// SystemData of SqlPool.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SqlPoolsV3 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlPoolsV3(string name, SqlPoolsV3Args args, CustomResourceOptions? options = null)
            : base("azure-native:synapse/v20200401preview:SqlPoolsV3", name, args ?? new SqlPoolsV3Args(), MakeResourceOptions(options, ""))
        {
        }

        private SqlPoolsV3(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:synapse/v20200401preview:SqlPoolsV3", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:synapse:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20190601preview:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20201201:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210301:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210401preview:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210501:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210601:SqlPoolsV3"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210601preview:SqlPoolsV3"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlPoolsV3 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlPoolsV3 Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SqlPoolsV3(name, id, options);
        }
    }

    public sealed class SqlPoolsV3Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The period of inactivity in minutes before automatically pausing the sql pool.
        /// </summary>
        [Input("autoPauseTimer")]
        public Input<int>? AutoPauseTimer { get; set; }

        /// <summary>
        /// Indicates whether the sql pool can automatically resume when connection attempts are made.
        /// </summary>
        [Input("autoResume")]
        public Input<bool>? AutoResume { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The max service level objective name of the sql pool.
        /// </summary>
        [Input("maxServiceObjectiveName")]
        public Input<string>? MaxServiceObjectiveName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The sql pool SKU. The list of SKUs may vary by region and support offer.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuV3Args>? Sku { get; set; }

        /// <summary>
        /// The name of the sql pool.
        /// </summary>
        [Input("sqlPoolName")]
        public Input<string>? SqlPoolName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public SqlPoolsV3Args()
        {
        }
        public static new SqlPoolsV3Args Empty => new SqlPoolsV3Args();
    }
}
