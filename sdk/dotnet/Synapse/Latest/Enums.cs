// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Synapse.Latest
{
    /// <summary>
    /// Compute type of the cluster which will execute data flow job.
    /// </summary>
    [EnumType]
    public readonly struct DataFlowComputeType : IEquatable<DataFlowComputeType>
    {
        private readonly string _value;

        private DataFlowComputeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataFlowComputeType General { get; } = new DataFlowComputeType("General");
        public static DataFlowComputeType MemoryOptimized { get; } = new DataFlowComputeType("MemoryOptimized");
        public static DataFlowComputeType ComputeOptimized { get; } = new DataFlowComputeType("ComputeOptimized");

        public static bool operator ==(DataFlowComputeType left, DataFlowComputeType right) => left.Equals(right);
        public static bool operator !=(DataFlowComputeType left, DataFlowComputeType right) => !left.Equals(right);

        public static explicit operator string(DataFlowComputeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataFlowComputeType other && Equals(other);
        public bool Equals(DataFlowComputeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The edition for the SSIS Integration Runtime
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEdition : IEquatable<IntegrationRuntimeEdition>
    {
        private readonly string _value;

        private IntegrationRuntimeEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEdition Standard { get; } = new IntegrationRuntimeEdition("Standard");
        public static IntegrationRuntimeEdition Enterprise { get; } = new IntegrationRuntimeEdition("Enterprise");

        public static bool operator ==(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEdition other && Equals(other);
        public bool Equals(IntegrationRuntimeEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this referenced entity.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEntityReferenceType : IEquatable<IntegrationRuntimeEntityReferenceType>
    {
        private readonly string _value;

        private IntegrationRuntimeEntityReferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEntityReferenceType IntegrationRuntimeReference { get; } = new IntegrationRuntimeEntityReferenceType("IntegrationRuntimeReference");
        public static IntegrationRuntimeEntityReferenceType LinkedServiceReference { get; } = new IntegrationRuntimeEntityReferenceType("LinkedServiceReference");

        public static bool operator ==(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEntityReferenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEntityReferenceType other && Equals(other);
        public bool Equals(IntegrationRuntimeEntityReferenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// License type for bringing your own license scenario.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeLicenseType : IEquatable<IntegrationRuntimeLicenseType>
    {
        private readonly string _value;

        private IntegrationRuntimeLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeLicenseType BasePrice { get; } = new IntegrationRuntimeLicenseType("BasePrice");
        public static IntegrationRuntimeLicenseType LicenseIncluded { get; } = new IntegrationRuntimeLicenseType("LicenseIncluded");

        public static bool operator ==(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeLicenseType other && Equals(other);
        public bool Equals(IntegrationRuntimeLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeSsisCatalogPricingTier : IEquatable<IntegrationRuntimeSsisCatalogPricingTier>
    {
        private readonly string _value;

        private IntegrationRuntimeSsisCatalogPricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeSsisCatalogPricingTier Basic { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Basic");
        public static IntegrationRuntimeSsisCatalogPricingTier Standard { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Standard");
        public static IntegrationRuntimeSsisCatalogPricingTier Premium { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Premium");
        public static IntegrationRuntimeSsisCatalogPricingTier PremiumRS { get; } = new IntegrationRuntimeSsisCatalogPricingTier("PremiumRS");

        public static bool operator ==(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeSsisCatalogPricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeSsisCatalogPricingTier other && Equals(other);
        public bool Equals(IntegrationRuntimeSsisCatalogPricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of integration runtime.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeType : IEquatable<IntegrationRuntimeType>
    {
        private readonly string _value;

        private IntegrationRuntimeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeType Managed { get; } = new IntegrationRuntimeType("Managed");
        public static IntegrationRuntimeType SelfHosted { get; } = new IntegrationRuntimeType("SelfHosted");

        public static bool operator ==(IntegrationRuntimeType left, IntegrationRuntimeType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeType left, IntegrationRuntimeType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeType other && Equals(other);
        public bool Equals(IntegrationRuntimeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of compute power that each node in the Big Data pool has.
    /// </summary>
    [EnumType]
    public readonly struct NodeSize : IEquatable<NodeSize>
    {
        private readonly string _value;

        private NodeSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSize None { get; } = new NodeSize("None");
        public static NodeSize Small { get; } = new NodeSize("Small");
        public static NodeSize Medium { get; } = new NodeSize("Medium");
        public static NodeSize Large { get; } = new NodeSize("Large");
        public static NodeSize XLarge { get; } = new NodeSize("XLarge");
        public static NodeSize XXLarge { get; } = new NodeSize("XXLarge");
        public static NodeSize XXXLarge { get; } = new NodeSize("XXXLarge");

        public static bool operator ==(NodeSize left, NodeSize right) => left.Equals(right);
        public static bool operator !=(NodeSize left, NodeSize right) => !left.Equals(right);

        public static explicit operator string(NodeSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSize other && Equals(other);
        public bool Equals(NodeSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of nodes that the Big Data pool provides.
    /// </summary>
    [EnumType]
    public readonly struct NodeSizeFamily : IEquatable<NodeSizeFamily>
    {
        private readonly string _value;

        private NodeSizeFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSizeFamily None { get; } = new NodeSizeFamily("None");
        public static NodeSizeFamily MemoryOptimized { get; } = new NodeSizeFamily("MemoryOptimized");

        public static bool operator ==(NodeSizeFamily left, NodeSizeFamily right) => left.Equals(right);
        public static bool operator !=(NodeSizeFamily left, NodeSizeFamily right) => !left.Equals(right);

        public static explicit operator string(NodeSizeFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSizeFamily other && Equals(other);
        public bool Equals(NodeSizeFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity for the workspace
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SensitivityLabelRank : IEquatable<SensitivityLabelRank>
    {
        private readonly string _value;

        private SensitivityLabelRank(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SensitivityLabelRank None { get; } = new SensitivityLabelRank("None");
        public static SensitivityLabelRank Low { get; } = new SensitivityLabelRank("Low");
        public static SensitivityLabelRank Medium { get; } = new SensitivityLabelRank("Medium");
        public static SensitivityLabelRank High { get; } = new SensitivityLabelRank("High");
        public static SensitivityLabelRank Critical { get; } = new SensitivityLabelRank("Critical");

        public static bool operator ==(SensitivityLabelRank left, SensitivityLabelRank right) => left.Equals(right);
        public static bool operator !=(SensitivityLabelRank left, SensitivityLabelRank right) => !left.Equals(right);

        public static explicit operator string(SensitivityLabelRank value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SensitivityLabelRank other && Equals(other);
        public bool Equals(SensitivityLabelRank other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage account type used to store backups for this sql pool.
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountType GRS { get; } = new StorageAccountType("GRS");
        public static StorageAccountType LRS { get; } = new StorageAccountType("LRS");
        public static StorageAccountType ZRS { get; } = new StorageAccountType("ZRS");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the database transparent data encryption.
    /// </summary>
    [EnumType]
    public readonly struct TransparentDataEncryptionStatus : IEquatable<TransparentDataEncryptionStatus>
    {
        private readonly string _value;

        private TransparentDataEncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransparentDataEncryptionStatus Enabled { get; } = new TransparentDataEncryptionStatus("Enabled");
        public static TransparentDataEncryptionStatus Disabled { get; } = new TransparentDataEncryptionStatus("Disabled");

        public static bool operator ==(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => left.Equals(right);
        public static bool operator !=(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(TransparentDataEncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransparentDataEncryptionStatus other && Equals(other);
        public bool Equals(TransparentDataEncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
