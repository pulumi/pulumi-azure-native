// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Synapse
{
    public static class GetEventGridDataConnection
    {
        /// <summary>
        /// Class representing an Event Grid data connection.
        /// API Version: 2021-04-01-preview.
        /// </summary>
        public static Task<GetEventGridDataConnectionResult> InvokeAsync(GetEventGridDataConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEventGridDataConnectionResult>("azure-native:synapse:getEventGridDataConnection", args ?? new GetEventGridDataConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Class representing an Event Grid data connection.
        /// API Version: 2021-04-01-preview.
        /// </summary>
        public static Output<GetEventGridDataConnectionResult> Invoke(GetEventGridDataConnectionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEventGridDataConnectionResult>("azure-native:synapse:getEventGridDataConnection", args ?? new GetEventGridDataConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventGridDataConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName", required: true)]
        public string DataConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the database in the Kusto pool.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto pool.
        /// </summary>
        [Input("kustoPoolName", required: true)]
        public string KustoPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetEventGridDataConnectionArgs()
        {
        }
    }

    public sealed class GetEventGridDataConnectionInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName", required: true)]
        public Input<string> DataConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the database in the Kusto pool.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto pool.
        /// </summary>
        [Input("kustoPoolName", required: true)]
        public Input<string> KustoPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetEventGridDataConnectionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEventGridDataConnectionResult
    {
        /// <summary>
        /// The name of blob storage event type to process.
        /// </summary>
        public readonly string? BlobStorageEventType;
        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        public readonly string ConsumerGroup;
        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        public readonly string? DataFormat;
        /// <summary>
        /// The resource ID where the event grid is configured to send events.
        /// </summary>
        public readonly string EventHubResourceId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file
        /// </summary>
        public readonly bool? IgnoreFirstRecord;
        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventGrid'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        public readonly string? MappingRuleName;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The resource ID of the storage account where the data resides.
        /// </summary>
        public readonly string StorageAccountResourceId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        public readonly string? TableName;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEventGridDataConnectionResult(
            string? blobStorageEventType,

            string consumerGroup,

            string? dataFormat,

            string eventHubResourceId,

            string id,

            bool? ignoreFirstRecord,

            string kind,

            string? location,

            string? mappingRuleName,

            string name,

            string provisioningState,

            string storageAccountResourceId,

            Outputs.SystemDataResponse systemData,

            string? tableName,

            string type)
        {
            BlobStorageEventType = blobStorageEventType;
            ConsumerGroup = consumerGroup;
            DataFormat = dataFormat;
            EventHubResourceId = eventHubResourceId;
            Id = id;
            IgnoreFirstRecord = ignoreFirstRecord;
            Kind = kind;
            Location = location;
            MappingRuleName = mappingRuleName;
            Name = name;
            ProvisioningState = provisioningState;
            StorageAccountResourceId = storageAccountResourceId;
            SystemData = systemData;
            TableName = tableName;
            Type = type;
        }
    }
}
