// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Synapse.V20210601Preview
{
    /// <summary>
    /// Class representing an Event Grid data connection.
    /// </summary>
    [AzureNativeResourceType("azure-native:synapse/v20210601preview:EventGridDataConnection")]
    public partial class EventGridDataConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of blob storage event type to process.
        /// </summary>
        [Output("blobStorageEventType")]
        public Output<string?> BlobStorageEventType { get; private set; } = null!;

        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        [Output("consumerGroup")]
        public Output<string> ConsumerGroup { get; private set; } = null!;

        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        [Output("dataFormat")]
        public Output<string?> DataFormat { get; private set; } = null!;

        /// <summary>
        /// The resource ID where the event grid is configured to send events.
        /// </summary>
        [Output("eventHubResourceId")]
        public Output<string> EventHubResourceId { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file
        /// </summary>
        [Output("ignoreFirstRecord")]
        public Output<bool?> IgnoreFirstRecord { get; private set; } = null!;

        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventGrid'.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        [Output("mappingRuleName")]
        public Output<string?> MappingRuleName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the storage account where the data resides.
        /// </summary>
        [Output("storageAccountResourceId")]
        public Output<string> StorageAccountResourceId { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        [Output("tableName")]
        public Output<string?> TableName { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventGridDataConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventGridDataConnection(string name, EventGridDataConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:synapse/v20210601preview:EventGridDataConnection", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }

        private EventGridDataConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:synapse/v20210601preview:EventGridDataConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static EventGridDataConnectionArgs MakeArgs(EventGridDataConnectionArgs args)
        {
            args ??= new EventGridDataConnectionArgs();
            args.Kind = "EventGrid";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:synapse:EventGridDataConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:synapse/v20210401preview:EventGridDataConnection"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventGridDataConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventGridDataConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EventGridDataConnection(name, id, options);
        }
    }

    public sealed class EventGridDataConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of blob storage event type to process.
        /// </summary>
        [Input("blobStorageEventType")]
        public InputUnion<string, Pulumi.AzureNative.Synapse.V20210601Preview.BlobStorageEventType>? BlobStorageEventType { get; set; }

        /// <summary>
        /// The event hub consumer group.
        /// </summary>
        [Input("consumerGroup", required: true)]
        public Input<string> ConsumerGroup { get; set; } = null!;

        /// <summary>
        /// The name of the data connection.
        /// </summary>
        [Input("dataConnectionName")]
        public Input<string>? DataConnectionName { get; set; }

        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// </summary>
        [Input("dataFormat")]
        public InputUnion<string, Pulumi.AzureNative.Synapse.V20210601Preview.EventGridDataFormat>? DataFormat { get; set; }

        /// <summary>
        /// The name of the database in the Kusto pool.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The resource ID where the event grid is configured to send events.
        /// </summary>
        [Input("eventHubResourceId", required: true)]
        public Input<string> EventHubResourceId { get; set; } = null!;

        /// <summary>
        /// A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file
        /// </summary>
        [Input("ignoreFirstRecord")]
        public Input<bool>? IgnoreFirstRecord { get; set; }

        /// <summary>
        /// Kind of the endpoint for the data connection
        /// Expected value is 'EventGrid'.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto pool.
        /// </summary>
        [Input("kustoPoolName", required: true)]
        public Input<string> KustoPoolName { get; set; } = null!;

        /// <summary>
        /// Resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// </summary>
        [Input("mappingRuleName")]
        public Input<string>? MappingRuleName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource ID of the storage account where the data resides.
        /// </summary>
        [Input("storageAccountResourceId", required: true)]
        public Input<string> StorageAccountResourceId { get; set; } = null!;

        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public EventGridDataConnectionArgs()
        {
        }
        public static new EventGridDataConnectionArgs Empty => new EventGridDataConnectionArgs();
    }
}
