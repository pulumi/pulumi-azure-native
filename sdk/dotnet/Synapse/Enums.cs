// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Synapse
{
    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuName : IEquatable<AzureSkuName>
    {
        private readonly string _value;

        private AzureSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuName Standard_DS13_v2_1TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+1TB_PS");
        public static AzureSkuName Standard_DS13_v2_2TB_PS { get; } = new AzureSkuName("Standard_DS13_v2+2TB_PS");
        public static AzureSkuName Standard_DS14_v2_3TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+3TB_PS");
        public static AzureSkuName Standard_DS14_v2_4TB_PS { get; } = new AzureSkuName("Standard_DS14_v2+4TB_PS");
        public static AzureSkuName Standard_D13_v2 { get; } = new AzureSkuName("Standard_D13_v2");
        public static AzureSkuName Standard_D14_v2 { get; } = new AzureSkuName("Standard_D14_v2");
        public static AzureSkuName Standard_L8s { get; } = new AzureSkuName("Standard_L8s");
        public static AzureSkuName Standard_L16s { get; } = new AzureSkuName("Standard_L16s");
        public static AzureSkuName Standard_L8s_v2 { get; } = new AzureSkuName("Standard_L8s_v2");
        public static AzureSkuName Standard_L16s_v2 { get; } = new AzureSkuName("Standard_L16s_v2");
        public static AzureSkuName Standard_D11_v2 { get; } = new AzureSkuName("Standard_D11_v2");
        public static AzureSkuName Standard_D12_v2 { get; } = new AzureSkuName("Standard_D12_v2");
        public static AzureSkuName Standard_L4s { get; } = new AzureSkuName("Standard_L4s");
        public static AzureSkuName Dev_No_SLA_Standard_D11_v2 { get; } = new AzureSkuName("Dev(No SLA)_Standard_D11_v2");
        public static AzureSkuName Standard_E64i_v3 { get; } = new AzureSkuName("Standard_E64i_v3");
        public static AzureSkuName Standard_E80ids_v4 { get; } = new AzureSkuName("Standard_E80ids_v4");
        public static AzureSkuName Standard_E2a_v4 { get; } = new AzureSkuName("Standard_E2a_v4");
        public static AzureSkuName Standard_E4a_v4 { get; } = new AzureSkuName("Standard_E4a_v4");
        public static AzureSkuName Standard_E8a_v4 { get; } = new AzureSkuName("Standard_E8a_v4");
        public static AzureSkuName Standard_E16a_v4 { get; } = new AzureSkuName("Standard_E16a_v4");
        public static AzureSkuName Standard_E8as_v4_1TB_PS { get; } = new AzureSkuName("Standard_E8as_v4+1TB_PS");
        public static AzureSkuName Standard_E8as_v4_2TB_PS { get; } = new AzureSkuName("Standard_E8as_v4+2TB_PS");
        public static AzureSkuName Standard_E16as_v4_3TB_PS { get; } = new AzureSkuName("Standard_E16as_v4+3TB_PS");
        public static AzureSkuName Standard_E16as_v4_4TB_PS { get; } = new AzureSkuName("Standard_E16as_v4+4TB_PS");
        public static AzureSkuName Dev_No_SLA_Standard_E2a_v4 { get; } = new AzureSkuName("Dev(No SLA)_Standard_E2a_v4");

        public static bool operator ==(AzureSkuName left, AzureSkuName right) => left.Equals(right);
        public static bool operator !=(AzureSkuName left, AzureSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuName other && Equals(other);
        public bool Equals(AzureSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSkuTier : IEquatable<AzureSkuTier>
    {
        private readonly string _value;

        private AzureSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSkuTier Basic { get; } = new AzureSkuTier("Basic");
        public static AzureSkuTier Standard { get; } = new AzureSkuTier("Standard");

        public static bool operator ==(AzureSkuTier left, AzureSkuTier right) => left.Equals(right);
        public static bool operator !=(AzureSkuTier left, AzureSkuTier right) => !left.Equals(right);

        public static explicit operator string(AzureSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSkuTier other && Equals(other);
        public bool Equals(AzureSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of blob storage event type to process.
    /// </summary>
    [EnumType]
    public readonly struct BlobStorageEventType : IEquatable<BlobStorageEventType>
    {
        private readonly string _value;

        private BlobStorageEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BlobStorageEventType Microsoft_Storage_BlobCreated { get; } = new BlobStorageEventType("Microsoft.Storage.BlobCreated");
        public static BlobStorageEventType Microsoft_Storage_BlobRenamed { get; } = new BlobStorageEventType("Microsoft.Storage.BlobRenamed");

        public static bool operator ==(BlobStorageEventType left, BlobStorageEventType right) => left.Equals(right);
        public static bool operator !=(BlobStorageEventType left, BlobStorageEventType right) => !left.Equals(right);

        public static explicit operator string(BlobStorageEventType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlobStorageEventType other && Equals(other);
        public bool Equals(BlobStorageEventType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Cluster principal role.
    /// </summary>
    [EnumType]
    public readonly struct ClusterPrincipalRole : IEquatable<ClusterPrincipalRole>
    {
        private readonly string _value;

        private ClusterPrincipalRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterPrincipalRole AllDatabasesAdmin { get; } = new ClusterPrincipalRole("AllDatabasesAdmin");
        public static ClusterPrincipalRole AllDatabasesViewer { get; } = new ClusterPrincipalRole("AllDatabasesViewer");

        public static bool operator ==(ClusterPrincipalRole left, ClusterPrincipalRole right) => left.Equals(right);
        public static bool operator !=(ClusterPrincipalRole left, ClusterPrincipalRole right) => !left.Equals(right);

        public static explicit operator string(ClusterPrincipalRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterPrincipalRole other && Equals(other);
        public bool Equals(ClusterPrincipalRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The event hub messages compression type
    /// </summary>
    [EnumType]
    public readonly struct Compression : IEquatable<Compression>
    {
        private readonly string _value;

        private Compression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Compression None { get; } = new Compression("None");
        public static Compression GZip { get; } = new Compression("GZip");

        public static bool operator ==(Compression left, Compression right) => left.Equals(right);
        public static bool operator !=(Compression left, Compression right) => !left.Equals(right);

        public static explicit operator string(Compression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Compression other && Equals(other);
        public bool Equals(Compression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the mode of sql pool creation.
    /// 
    /// Default: regular sql pool creation.
    /// 
    /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
    /// 
    /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
    /// 
    /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Recovery { get; } = new CreateMode("Recovery");
        public static CreateMode Restore { get; } = new CreateMode("Restore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the endpoint for the data connection
    /// </summary>
    [EnumType]
    public readonly struct DataConnectionKind : IEquatable<DataConnectionKind>
    {
        private readonly string _value;

        private DataConnectionKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataConnectionKind EventHub { get; } = new DataConnectionKind("EventHub");
        public static DataConnectionKind EventGrid { get; } = new DataConnectionKind("EventGrid");
        public static DataConnectionKind IotHub { get; } = new DataConnectionKind("IotHub");

        public static bool operator ==(DataConnectionKind left, DataConnectionKind right) => left.Equals(right);
        public static bool operator !=(DataConnectionKind left, DataConnectionKind right) => !left.Equals(right);

        public static explicit operator string(DataConnectionKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataConnectionKind other && Equals(other);
        public bool Equals(DataConnectionKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Compute type of the cluster which will execute data flow job.
    /// </summary>
    [EnumType]
    public readonly struct DataFlowComputeType : IEquatable<DataFlowComputeType>
    {
        private readonly string _value;

        private DataFlowComputeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataFlowComputeType General { get; } = new DataFlowComputeType("General");
        public static DataFlowComputeType MemoryOptimized { get; } = new DataFlowComputeType("MemoryOptimized");
        public static DataFlowComputeType ComputeOptimized { get; } = new DataFlowComputeType("ComputeOptimized");

        public static bool operator ==(DataFlowComputeType left, DataFlowComputeType right) => left.Equals(right);
        public static bool operator !=(DataFlowComputeType left, DataFlowComputeType right) => !left.Equals(right);

        public static explicit operator string(DataFlowComputeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataFlowComputeType other && Equals(other);
        public bool Equals(DataFlowComputeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Database principal role.
    /// </summary>
    [EnumType]
    public readonly struct DatabasePrincipalRole : IEquatable<DatabasePrincipalRole>
    {
        private readonly string _value;

        private DatabasePrincipalRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabasePrincipalRole Admin { get; } = new DatabasePrincipalRole("Admin");
        public static DatabasePrincipalRole Ingestor { get; } = new DatabasePrincipalRole("Ingestor");
        public static DatabasePrincipalRole Monitor { get; } = new DatabasePrincipalRole("Monitor");
        public static DatabasePrincipalRole User { get; } = new DatabasePrincipalRole("User");
        public static DatabasePrincipalRole UnrestrictedViewer { get; } = new DatabasePrincipalRole("UnrestrictedViewer");
        public static DatabasePrincipalRole Viewer { get; } = new DatabasePrincipalRole("Viewer");

        public static bool operator ==(DatabasePrincipalRole left, DatabasePrincipalRole right) => left.Equals(right);
        public static bool operator !=(DatabasePrincipalRole left, DatabasePrincipalRole right) => !left.Equals(right);

        public static explicit operator string(DatabasePrincipalRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabasePrincipalRole other && Equals(other);
        public bool Equals(DatabasePrincipalRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default principals modification kind
    /// </summary>
    [EnumType]
    public readonly struct DefaultPrincipalsModificationKind : IEquatable<DefaultPrincipalsModificationKind>
    {
        private readonly string _value;

        private DefaultPrincipalsModificationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultPrincipalsModificationKind Union { get; } = new DefaultPrincipalsModificationKind("Union");
        public static DefaultPrincipalsModificationKind Replace { get; } = new DefaultPrincipalsModificationKind("Replace");
        public static DefaultPrincipalsModificationKind None { get; } = new DefaultPrincipalsModificationKind("None");

        public static bool operator ==(DefaultPrincipalsModificationKind left, DefaultPrincipalsModificationKind right) => left.Equals(right);
        public static bool operator !=(DefaultPrincipalsModificationKind left, DefaultPrincipalsModificationKind right) => !left.Equals(right);

        public static explicit operator string(DefaultPrincipalsModificationKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultPrincipalsModificationKind other && Equals(other);
        public bool Equals(DefaultPrincipalsModificationKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The engine type
    /// </summary>
    [EnumType]
    public readonly struct EngineType : IEquatable<EngineType>
    {
        private readonly string _value;

        private EngineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EngineType V2 { get; } = new EngineType("V2");
        public static EngineType V3 { get; } = new EngineType("V3");

        public static bool operator ==(EngineType left, EngineType right) => left.Equals(right);
        public static bool operator !=(EngineType left, EngineType right) => !left.Equals(right);

        public static explicit operator string(EngineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EngineType other && Equals(other);
        public bool Equals(EngineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct EventGridDataFormat : IEquatable<EventGridDataFormat>
    {
        private readonly string _value;

        private EventGridDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventGridDataFormat MULTIJSON { get; } = new EventGridDataFormat("MULTIJSON");
        public static EventGridDataFormat JSON { get; } = new EventGridDataFormat("JSON");
        public static EventGridDataFormat CSV { get; } = new EventGridDataFormat("CSV");
        public static EventGridDataFormat TSV { get; } = new EventGridDataFormat("TSV");
        public static EventGridDataFormat SCSV { get; } = new EventGridDataFormat("SCSV");
        public static EventGridDataFormat SOHSV { get; } = new EventGridDataFormat("SOHSV");
        public static EventGridDataFormat PSV { get; } = new EventGridDataFormat("PSV");
        public static EventGridDataFormat TXT { get; } = new EventGridDataFormat("TXT");
        public static EventGridDataFormat RAW { get; } = new EventGridDataFormat("RAW");
        public static EventGridDataFormat SINGLEJSON { get; } = new EventGridDataFormat("SINGLEJSON");
        public static EventGridDataFormat AVRO { get; } = new EventGridDataFormat("AVRO");
        public static EventGridDataFormat TSVE { get; } = new EventGridDataFormat("TSVE");
        public static EventGridDataFormat PARQUET { get; } = new EventGridDataFormat("PARQUET");
        public static EventGridDataFormat ORC { get; } = new EventGridDataFormat("ORC");
        public static EventGridDataFormat APACHEAVRO { get; } = new EventGridDataFormat("APACHEAVRO");
        public static EventGridDataFormat W3CLOGFILE { get; } = new EventGridDataFormat("W3CLOGFILE");

        public static bool operator ==(EventGridDataFormat left, EventGridDataFormat right) => left.Equals(right);
        public static bool operator !=(EventGridDataFormat left, EventGridDataFormat right) => !left.Equals(right);

        public static explicit operator string(EventGridDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventGridDataFormat other && Equals(other);
        public bool Equals(EventGridDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct EventHubDataFormat : IEquatable<EventHubDataFormat>
    {
        private readonly string _value;

        private EventHubDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventHubDataFormat MULTIJSON { get; } = new EventHubDataFormat("MULTIJSON");
        public static EventHubDataFormat JSON { get; } = new EventHubDataFormat("JSON");
        public static EventHubDataFormat CSV { get; } = new EventHubDataFormat("CSV");
        public static EventHubDataFormat TSV { get; } = new EventHubDataFormat("TSV");
        public static EventHubDataFormat SCSV { get; } = new EventHubDataFormat("SCSV");
        public static EventHubDataFormat SOHSV { get; } = new EventHubDataFormat("SOHSV");
        public static EventHubDataFormat PSV { get; } = new EventHubDataFormat("PSV");
        public static EventHubDataFormat TXT { get; } = new EventHubDataFormat("TXT");
        public static EventHubDataFormat RAW { get; } = new EventHubDataFormat("RAW");
        public static EventHubDataFormat SINGLEJSON { get; } = new EventHubDataFormat("SINGLEJSON");
        public static EventHubDataFormat AVRO { get; } = new EventHubDataFormat("AVRO");
        public static EventHubDataFormat TSVE { get; } = new EventHubDataFormat("TSVE");
        public static EventHubDataFormat PARQUET { get; } = new EventHubDataFormat("PARQUET");
        public static EventHubDataFormat ORC { get; } = new EventHubDataFormat("ORC");
        public static EventHubDataFormat APACHEAVRO { get; } = new EventHubDataFormat("APACHEAVRO");
        public static EventHubDataFormat W3CLOGFILE { get; } = new EventHubDataFormat("W3CLOGFILE");

        public static bool operator ==(EventHubDataFormat left, EventHubDataFormat right) => left.Equals(right);
        public static bool operator !=(EventHubDataFormat left, EventHubDataFormat right) => !left.Equals(right);

        public static explicit operator string(EventHubDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventHubDataFormat other && Equals(other);
        public bool Equals(EventHubDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The edition for the SSIS Integration Runtime
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEdition : IEquatable<IntegrationRuntimeEdition>
    {
        private readonly string _value;

        private IntegrationRuntimeEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEdition Standard { get; } = new IntegrationRuntimeEdition("Standard");
        public static IntegrationRuntimeEdition Enterprise { get; } = new IntegrationRuntimeEdition("Enterprise");

        public static bool operator ==(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEdition other && Equals(other);
        public bool Equals(IntegrationRuntimeEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this referenced entity.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEntityReferenceType : IEquatable<IntegrationRuntimeEntityReferenceType>
    {
        private readonly string _value;

        private IntegrationRuntimeEntityReferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEntityReferenceType IntegrationRuntimeReference { get; } = new IntegrationRuntimeEntityReferenceType("IntegrationRuntimeReference");
        public static IntegrationRuntimeEntityReferenceType LinkedServiceReference { get; } = new IntegrationRuntimeEntityReferenceType("LinkedServiceReference");

        public static bool operator ==(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEntityReferenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEntityReferenceType other && Equals(other);
        public bool Equals(IntegrationRuntimeEntityReferenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// License type for bringing your own license scenario.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeLicenseType : IEquatable<IntegrationRuntimeLicenseType>
    {
        private readonly string _value;

        private IntegrationRuntimeLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeLicenseType BasePrice { get; } = new IntegrationRuntimeLicenseType("BasePrice");
        public static IntegrationRuntimeLicenseType LicenseIncluded { get; } = new IntegrationRuntimeLicenseType("LicenseIncluded");

        public static bool operator ==(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeLicenseType other && Equals(other);
        public bool Equals(IntegrationRuntimeLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeSsisCatalogPricingTier : IEquatable<IntegrationRuntimeSsisCatalogPricingTier>
    {
        private readonly string _value;

        private IntegrationRuntimeSsisCatalogPricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeSsisCatalogPricingTier Basic { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Basic");
        public static IntegrationRuntimeSsisCatalogPricingTier Standard { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Standard");
        public static IntegrationRuntimeSsisCatalogPricingTier Premium { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Premium");
        public static IntegrationRuntimeSsisCatalogPricingTier PremiumRS { get; } = new IntegrationRuntimeSsisCatalogPricingTier("PremiumRS");

        public static bool operator ==(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeSsisCatalogPricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeSsisCatalogPricingTier other && Equals(other);
        public bool Equals(IntegrationRuntimeSsisCatalogPricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of integration runtime.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeType : IEquatable<IntegrationRuntimeType>
    {
        private readonly string _value;

        private IntegrationRuntimeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeType Managed { get; } = new IntegrationRuntimeType("Managed");
        public static IntegrationRuntimeType SelfHosted { get; } = new IntegrationRuntimeType("SelfHosted");

        public static bool operator ==(IntegrationRuntimeType left, IntegrationRuntimeType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeType left, IntegrationRuntimeType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeType other && Equals(other);
        public bool Equals(IntegrationRuntimeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// </summary>
    [EnumType]
    public readonly struct IotHubDataFormat : IEquatable<IotHubDataFormat>
    {
        private readonly string _value;

        private IotHubDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IotHubDataFormat MULTIJSON { get; } = new IotHubDataFormat("MULTIJSON");
        public static IotHubDataFormat JSON { get; } = new IotHubDataFormat("JSON");
        public static IotHubDataFormat CSV { get; } = new IotHubDataFormat("CSV");
        public static IotHubDataFormat TSV { get; } = new IotHubDataFormat("TSV");
        public static IotHubDataFormat SCSV { get; } = new IotHubDataFormat("SCSV");
        public static IotHubDataFormat SOHSV { get; } = new IotHubDataFormat("SOHSV");
        public static IotHubDataFormat PSV { get; } = new IotHubDataFormat("PSV");
        public static IotHubDataFormat TXT { get; } = new IotHubDataFormat("TXT");
        public static IotHubDataFormat RAW { get; } = new IotHubDataFormat("RAW");
        public static IotHubDataFormat SINGLEJSON { get; } = new IotHubDataFormat("SINGLEJSON");
        public static IotHubDataFormat AVRO { get; } = new IotHubDataFormat("AVRO");
        public static IotHubDataFormat TSVE { get; } = new IotHubDataFormat("TSVE");
        public static IotHubDataFormat PARQUET { get; } = new IotHubDataFormat("PARQUET");
        public static IotHubDataFormat ORC { get; } = new IotHubDataFormat("ORC");
        public static IotHubDataFormat APACHEAVRO { get; } = new IotHubDataFormat("APACHEAVRO");
        public static IotHubDataFormat W3CLOGFILE { get; } = new IotHubDataFormat("W3CLOGFILE");

        public static bool operator ==(IotHubDataFormat left, IotHubDataFormat right) => left.Equals(right);
        public static bool operator !=(IotHubDataFormat left, IotHubDataFormat right) => !left.Equals(right);

        public static explicit operator string(IotHubDataFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IotHubDataFormat other && Equals(other);
        public bool Equals(IotHubDataFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the database
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind ReadWrite { get; } = new Kind("ReadWrite");
        public static Kind ReadOnlyFollowing { get; } = new Kind("ReadOnlyFollowing");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of compute power that each node in the Big Data pool has.
    /// </summary>
    [EnumType]
    public readonly struct NodeSize : IEquatable<NodeSize>
    {
        private readonly string _value;

        private NodeSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSize None { get; } = new NodeSize("None");
        public static NodeSize Small { get; } = new NodeSize("Small");
        public static NodeSize Medium { get; } = new NodeSize("Medium");
        public static NodeSize Large { get; } = new NodeSize("Large");
        public static NodeSize XLarge { get; } = new NodeSize("XLarge");
        public static NodeSize XXLarge { get; } = new NodeSize("XXLarge");
        public static NodeSize XXXLarge { get; } = new NodeSize("XXXLarge");

        public static bool operator ==(NodeSize left, NodeSize right) => left.Equals(right);
        public static bool operator !=(NodeSize left, NodeSize right) => !left.Equals(right);

        public static explicit operator string(NodeSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSize other && Equals(other);
        public bool Equals(NodeSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of nodes that the Big Data pool provides.
    /// </summary>
    [EnumType]
    public readonly struct NodeSizeFamily : IEquatable<NodeSizeFamily>
    {
        private readonly string _value;

        private NodeSizeFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSizeFamily None { get; } = new NodeSizeFamily("None");
        public static NodeSizeFamily MemoryOptimized { get; } = new NodeSizeFamily("MemoryOptimized");
        public static NodeSizeFamily HardwareAcceleratedFPGA { get; } = new NodeSizeFamily("HardwareAcceleratedFPGA");
        public static NodeSizeFamily HardwareAcceleratedGPU { get; } = new NodeSizeFamily("HardwareAcceleratedGPU");

        public static bool operator ==(NodeSizeFamily left, NodeSizeFamily right) => left.Equals(right);
        public static bool operator !=(NodeSizeFamily left, NodeSizeFamily right) => !left.Equals(right);

        public static explicit operator string(NodeSizeFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSizeFamily other && Equals(other);
        public bool Equals(NodeSizeFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Principal type.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType App { get; } = new PrincipalType("App");
        public static PrincipalType Group { get; } = new PrincipalType("Group");
        public static PrincipalType User { get; } = new PrincipalType("User");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity for the workspace
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SensitivityLabelRank : IEquatable<SensitivityLabelRank>
    {
        private readonly string _value;

        private SensitivityLabelRank(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SensitivityLabelRank None { get; } = new SensitivityLabelRank("None");
        public static SensitivityLabelRank Low { get; } = new SensitivityLabelRank("Low");
        public static SensitivityLabelRank Medium { get; } = new SensitivityLabelRank("Medium");
        public static SensitivityLabelRank High { get; } = new SensitivityLabelRank("High");
        public static SensitivityLabelRank Critical { get; } = new SensitivityLabelRank("Critical");

        public static bool operator ==(SensitivityLabelRank left, SensitivityLabelRank right) => left.Equals(right);
        public static bool operator !=(SensitivityLabelRank left, SensitivityLabelRank right) => !left.Equals(right);

        public static explicit operator string(SensitivityLabelRank value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SensitivityLabelRank other && Equals(other);
        public bool Equals(SensitivityLabelRank other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage account type used to store backups for this sql pool.
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountType GRS { get; } = new StorageAccountType("GRS");
        public static StorageAccountType LRS { get; } = new StorageAccountType("LRS");
        public static StorageAccountType ZRS { get; } = new StorageAccountType("ZRS");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the database transparent data encryption.
    /// </summary>
    [EnumType]
    public readonly struct TransparentDataEncryptionStatus : IEquatable<TransparentDataEncryptionStatus>
    {
        private readonly string _value;

        private TransparentDataEncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransparentDataEncryptionStatus Enabled { get; } = new TransparentDataEncryptionStatus("Enabled");
        public static TransparentDataEncryptionStatus Disabled { get; } = new TransparentDataEncryptionStatus("Disabled");

        public static bool operator ==(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => left.Equals(right);
        public static bool operator !=(TransparentDataEncryptionStatus left, TransparentDataEncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(TransparentDataEncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransparentDataEncryptionStatus other && Equals(other);
        public bool Equals(TransparentDataEncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable or Disable public network access to workspace
    /// </summary>
    [EnumType]
    public readonly struct WorkspacePublicNetworkAccess : IEquatable<WorkspacePublicNetworkAccess>
    {
        private readonly string _value;

        private WorkspacePublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspacePublicNetworkAccess Enabled { get; } = new WorkspacePublicNetworkAccess("Enabled");
        public static WorkspacePublicNetworkAccess Disabled { get; } = new WorkspacePublicNetworkAccess("Disabled");

        public static bool operator ==(WorkspacePublicNetworkAccess left, WorkspacePublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(WorkspacePublicNetworkAccess left, WorkspacePublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(WorkspacePublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspacePublicNetworkAccess other && Equals(other);
        public bool Equals(WorkspacePublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
