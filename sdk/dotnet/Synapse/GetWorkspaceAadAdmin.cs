// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Synapse
{
    public static class GetWorkspaceAadAdmin
    {
        /// <summary>
        /// Workspace active directory administrator
        /// API Version: 2021-03-01.
        /// </summary>
        public static Task<GetWorkspaceAadAdminResult> InvokeAsync(GetWorkspaceAadAdminArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceAadAdminResult>("azure-native:synapse:getWorkspaceAadAdmin", args ?? new GetWorkspaceAadAdminArgs(), options.WithDefaults());

        /// <summary>
        /// Workspace active directory administrator
        /// API Version: 2021-03-01.
        /// </summary>
        public static Output<GetWorkspaceAadAdminResult> Invoke(GetWorkspaceAadAdminInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWorkspaceAadAdminResult>("azure-native:synapse:getWorkspaceAadAdmin", args ?? new GetWorkspaceAadAdminInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceAadAdminArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetWorkspaceAadAdminArgs()
        {
        }
        public static new GetWorkspaceAadAdminArgs Empty => new GetWorkspaceAadAdminArgs();
    }

    public sealed class GetWorkspaceAadAdminInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetWorkspaceAadAdminInvokeArgs()
        {
        }
        public static new GetWorkspaceAadAdminInvokeArgs Empty => new GetWorkspaceAadAdminInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceAadAdminResult
    {
        /// <summary>
        /// Workspace active directory administrator type
        /// </summary>
        public readonly string? AdministratorType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Login of the workspace active directory administrator
        /// </summary>
        public readonly string? Login;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Object ID of the workspace active directory administrator
        /// </summary>
        public readonly string? Sid;
        /// <summary>
        /// Tenant ID of the workspace active directory administrator
        /// </summary>
        public readonly string? TenantId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWorkspaceAadAdminResult(
            string? administratorType,

            string id,

            string? login,

            string name,

            string? sid,

            string? tenantId,

            string type)
        {
            AdministratorType = administratorType;
            Id = id;
            Login = login;
            Name = name;
            Sid = sid;
            TenantId = tenantId;
            Type = type;
        }
    }
}
