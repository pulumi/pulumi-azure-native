// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Synapse.V20210501
{
    /// <summary>
    /// Specifies the mode of sql pool creation.
    /// 
    /// Default: regular sql pool creation.
    /// 
    /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
    /// 
    /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
    /// 
    /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Recovery { get; } = new CreateMode("Recovery");
        public static CreateMode Restore { get; } = new CreateMode("Restore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of compute power that each node in the Big Data pool has.
    /// </summary>
    [EnumType]
    public readonly struct NodeSize : IEquatable<NodeSize>
    {
        private readonly string _value;

        private NodeSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSize None { get; } = new NodeSize("None");
        public static NodeSize Small { get; } = new NodeSize("Small");
        public static NodeSize Medium { get; } = new NodeSize("Medium");
        public static NodeSize Large { get; } = new NodeSize("Large");
        public static NodeSize XLarge { get; } = new NodeSize("XLarge");
        public static NodeSize XXLarge { get; } = new NodeSize("XXLarge");
        public static NodeSize XXXLarge { get; } = new NodeSize("XXXLarge");

        public static bool operator ==(NodeSize left, NodeSize right) => left.Equals(right);
        public static bool operator !=(NodeSize left, NodeSize right) => !left.Equals(right);

        public static explicit operator string(NodeSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSize other && Equals(other);
        public bool Equals(NodeSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of nodes that the Big Data pool provides.
    /// </summary>
    [EnumType]
    public readonly struct NodeSizeFamily : IEquatable<NodeSizeFamily>
    {
        private readonly string _value;

        private NodeSizeFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeSizeFamily None { get; } = new NodeSizeFamily("None");
        public static NodeSizeFamily MemoryOptimized { get; } = new NodeSizeFamily("MemoryOptimized");
        public static NodeSizeFamily HardwareAcceleratedFPGA { get; } = new NodeSizeFamily("HardwareAcceleratedFPGA");
        public static NodeSizeFamily HardwareAcceleratedGPU { get; } = new NodeSizeFamily("HardwareAcceleratedGPU");

        public static bool operator ==(NodeSizeFamily left, NodeSizeFamily right) => left.Equals(right);
        public static bool operator !=(NodeSizeFamily left, NodeSizeFamily right) => !left.Equals(right);

        public static explicit operator string(NodeSizeFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeSizeFamily other && Equals(other);
        public bool Equals(NodeSizeFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity for the workspace
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage account type used to store backups for this sql pool.
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountType GRS { get; } = new StorageAccountType("GRS");
        public static StorageAccountType LRS { get; } = new StorageAccountType("LRS");
        public static StorageAccountType ZRS { get; } = new StorageAccountType("ZRS");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable or Disable public network access to workspace
    /// </summary>
    [EnumType]
    public readonly struct WorkspacePublicNetworkAccess : IEquatable<WorkspacePublicNetworkAccess>
    {
        private readonly string _value;

        private WorkspacePublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspacePublicNetworkAccess Enabled { get; } = new WorkspacePublicNetworkAccess("Enabled");
        public static WorkspacePublicNetworkAccess Disabled { get; } = new WorkspacePublicNetworkAccess("Disabled");

        public static bool operator ==(WorkspacePublicNetworkAccess left, WorkspacePublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(WorkspacePublicNetworkAccess left, WorkspacePublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(WorkspacePublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspacePublicNetworkAccess other && Equals(other);
        public bool Equals(WorkspacePublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
