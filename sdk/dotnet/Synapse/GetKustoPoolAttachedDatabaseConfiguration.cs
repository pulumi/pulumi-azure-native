// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Synapse
{
    public static class GetKustoPoolAttachedDatabaseConfiguration
    {
        /// <summary>
        /// Class representing an attached database configuration.
        /// API Version: 2021-06-01-preview.
        /// </summary>
        public static Task<GetKustoPoolAttachedDatabaseConfigurationResult> InvokeAsync(GetKustoPoolAttachedDatabaseConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKustoPoolAttachedDatabaseConfigurationResult>("azure-native:synapse:getKustoPoolAttachedDatabaseConfiguration", args ?? new GetKustoPoolAttachedDatabaseConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Class representing an attached database configuration.
        /// API Version: 2021-06-01-preview.
        /// </summary>
        public static Output<GetKustoPoolAttachedDatabaseConfigurationResult> Invoke(GetKustoPoolAttachedDatabaseConfigurationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKustoPoolAttachedDatabaseConfigurationResult>("azure-native:synapse:getKustoPoolAttachedDatabaseConfiguration", args ?? new GetKustoPoolAttachedDatabaseConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKustoPoolAttachedDatabaseConfigurationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached database configuration.
        /// </summary>
        [Input("attachedDatabaseConfigurationName", required: true)]
        public string AttachedDatabaseConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto pool.
        /// </summary>
        [Input("kustoPoolName", required: true)]
        public string KustoPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetKustoPoolAttachedDatabaseConfigurationArgs()
        {
        }
    }

    public sealed class GetKustoPoolAttachedDatabaseConfigurationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached database configuration.
        /// </summary>
        [Input("attachedDatabaseConfigurationName", required: true)]
        public Input<string> AttachedDatabaseConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the Kusto pool.
        /// </summary>
        [Input("kustoPoolName", required: true)]
        public Input<string> KustoPoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetKustoPoolAttachedDatabaseConfigurationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKustoPoolAttachedDatabaseConfigurationResult
    {
        /// <summary>
        /// The list of databases from the clusterResourceId which are currently attached to the kusto pool.
        /// </summary>
        public readonly ImmutableArray<string> AttachedDatabaseNames;
        /// <summary>
        /// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// The default principals modification kind
        /// </summary>
        public readonly string DefaultPrincipalsModificationKind;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The resource id of the kusto pool where the databases you would like to attach reside.
        /// </summary>
        public readonly string KustoPoolResourceId;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioned state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Table level sharing specifications
        /// </summary>
        public readonly Outputs.TableLevelSharingPropertiesResponse? TableLevelSharingProperties;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetKustoPoolAttachedDatabaseConfigurationResult(
            ImmutableArray<string> attachedDatabaseNames,

            string databaseName,

            string defaultPrincipalsModificationKind,

            string id,

            string kustoPoolResourceId,

            string? location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            Outputs.TableLevelSharingPropertiesResponse? tableLevelSharingProperties,

            string type)
        {
            AttachedDatabaseNames = attachedDatabaseNames;
            DatabaseName = databaseName;
            DefaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
            Id = id;
            KustoPoolResourceId = kustoPoolResourceId;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            TableLevelSharingProperties = tableLevelSharingProperties;
            Type = type;
        }
    }
}
