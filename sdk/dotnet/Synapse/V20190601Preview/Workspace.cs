// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Synapse.V20190601Preview
{
    /// <summary>
    /// A workspace
    /// </summary>
    public partial class Workspace : Pulumi.CustomResource
    {
        /// <summary>
        /// Babylon Configuration
        /// </summary>
        [Output("babylonConfiguration")]
        public Output<Outputs.BabylonConfigurationResponse?> BabylonConfiguration { get; private set; } = null!;

        /// <summary>
        /// Connectivity endpoints
        /// </summary>
        [Output("connectivityEndpoints")]
        public Output<ImmutableDictionary<string, string>?> ConnectivityEndpoints { get; private set; } = null!;

        /// <summary>
        /// Workspace default data lake storage account details
        /// </summary>
        [Output("defaultDataLakeStorage")]
        public Output<Outputs.DataLakeStorageAccountDetailsResponse?> DefaultDataLakeStorage { get; private set; } = null!;

        /// <summary>
        /// The encryption details of the workspace
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.EncryptionDetailsResponse?> Encryption { get; private set; } = null!;

        /// <summary>
        /// Workspace level configs and feature flags
        /// </summary>
        [Output("extraProperties")]
        public Output<ImmutableDictionary<string, object>> ExtraProperties { get; private set; } = null!;

        /// <summary>
        /// Identity of the workspace
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with '.'
        /// </summary>
        [Output("managedResourceGroupName")]
        public Output<string?> ManagedResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
        /// </summary>
        [Output("managedVirtualNetwork")]
        public Output<string?> ManagedVirtualNetwork { get; private set; } = null!;

        /// <summary>
        /// Managed Virtual Network Settings
        /// </summary>
        [Output("managedVirtualNetworkSettings")]
        public Output<Outputs.ManagedVirtualNetworkSettingsResponse?> ManagedVirtualNetworkSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Private endpoint connections to the workspace
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Resource provisioning state
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Login for workspace SQL active directory administrator
        /// </summary>
        [Output("sqlAdministratorLogin")]
        public Output<string?> SqlAdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// SQL administrator login password
        /// </summary>
        [Output("sqlAdministratorLoginPassword")]
        public Output<string?> SqlAdministratorLoginPassword { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Virtual Network profile
        /// </summary>
        [Output("virtualNetworkProfile")]
        public Output<Outputs.VirtualNetworkProfileResponse?> VirtualNetworkProfile { get; private set; } = null!;

        /// <summary>
        /// The workspace unique identifier
        /// </summary>
        [Output("workspaceUID")]
        public Output<string> WorkspaceUID { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:synapse/v20190601preview:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:synapse/v20190601preview:Workspace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, options);
        }
    }

    public sealed class WorkspaceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Babylon Configuration
        /// </summary>
        [Input("babylonConfiguration")]
        public Input<Inputs.BabylonConfigurationArgs>? BabylonConfiguration { get; set; }

        [Input("connectivityEndpoints")]
        private InputMap<string>? _connectivityEndpoints;

        /// <summary>
        /// Connectivity endpoints
        /// </summary>
        public InputMap<string> ConnectivityEndpoints
        {
            get => _connectivityEndpoints ?? (_connectivityEndpoints = new InputMap<string>());
            set => _connectivityEndpoints = value;
        }

        /// <summary>
        /// Workspace default data lake storage account details
        /// </summary>
        [Input("defaultDataLakeStorage")]
        public Input<Inputs.DataLakeStorageAccountDetailsArgs>? DefaultDataLakeStorage { get; set; }

        /// <summary>
        /// The encryption details of the workspace
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.EncryptionDetailsArgs>? Encryption { get; set; }

        /// <summary>
        /// Identity of the workspace
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with '.'
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        /// <summary>
        /// Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
        /// </summary>
        [Input("managedVirtualNetwork")]
        public Input<string>? ManagedVirtualNetwork { get; set; }

        /// <summary>
        /// Managed Virtual Network Settings
        /// </summary>
        [Input("managedVirtualNetworkSettings")]
        public Input<Inputs.ManagedVirtualNetworkSettingsArgs>? ManagedVirtualNetworkSettings { get; set; }

        [Input("privateEndpointConnections")]
        private InputList<Inputs.PrivateEndpointConnectionArgs>? _privateEndpointConnections;

        /// <summary>
        /// Private endpoint connections to the workspace
        /// </summary>
        public InputList<Inputs.PrivateEndpointConnectionArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Login for workspace SQL active directory administrator
        /// </summary>
        [Input("sqlAdministratorLogin")]
        public Input<string>? SqlAdministratorLogin { get; set; }

        /// <summary>
        /// SQL administrator login password
        /// </summary>
        [Input("sqlAdministratorLoginPassword")]
        public Input<string>? SqlAdministratorLoginPassword { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Virtual Network profile
        /// </summary>
        [Input("virtualNetworkProfile")]
        public Input<Inputs.VirtualNetworkProfileArgs>? VirtualNetworkProfile { get; set; }

        /// <summary>
        /// The name of the workspace
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public WorkspaceArgs()
        {
        }
    }
}
