// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage
{
    /// <summary>
    /// The Encryption Scope resource.
    /// Azure REST API version: 2022-09-01. Prior API version in Azure Native 1.x: 2021-02-01
    /// </summary>
    [AzureNativeResourceType("azure-native:storage:EncryptionScope")]
    public partial class EncryptionScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets the creation date and time of the encryption scope in UTC.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
        /// </summary>
        [Output("keyVaultProperties")]
        public Output<Outputs.EncryptionScopeKeyVaultPropertiesResponse?> KeyVaultProperties { get; private set; } = null!;

        /// <summary>
        /// Gets the last modification date and time of the encryption scope in UTC.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
        /// </summary>
        [Output("requireInfrastructureEncryption")]
        public Output<bool?> RequireInfrastructureEncryption { get; private set; } = null!;

        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EncryptionScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EncryptionScope(string name, EncryptionScopeArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storage:EncryptionScope", name, args ?? new EncryptionScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EncryptionScope(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storage:EncryptionScope", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210101:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210201:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210401:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210601:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210801:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210901:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20220501:EncryptionScope"},
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20220901:EncryptionScope"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EncryptionScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EncryptionScope Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EncryptionScope(name, id, options);
        }
    }

    public sealed class EncryptionScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
        /// </summary>
        [Input("encryptionScopeName")]
        public Input<string>? EncryptionScopeName { get; set; }

        /// <summary>
        /// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
        /// </summary>
        [Input("keyVaultProperties")]
        public Input<Inputs.EncryptionScopeKeyVaultPropertiesArgs>? KeyVaultProperties { get; set; }

        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
        /// </summary>
        [Input("requireInfrastructureEncryption")]
        public Input<bool>? RequireInfrastructureEncryption { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        [Input("source")]
        public InputUnion<string, Pulumi.AzureNative.Storage.EncryptionScopeSource>? Source { get; set; }

        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
        /// </summary>
        [Input("state")]
        public InputUnion<string, Pulumi.AzureNative.Storage.EncryptionScopeState>? State { get; set; }

        public EncryptionScopeArgs()
        {
        }
        public static new EncryptionScopeArgs Empty => new EncryptionScopeArgs();
    }
}
