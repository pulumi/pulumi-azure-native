// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage.V20230501
{
    public static class GetLocalUser
    {
        /// <summary>
        /// Get the local user of the storage account by username.
        /// </summary>
        public static Task<GetLocalUserResult> InvokeAsync(GetLocalUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocalUserResult>("azure-native:storage/v20230501:getLocalUser", args ?? new GetLocalUserArgs(), options.WithDefaults());

        /// <summary>
        /// Get the local user of the storage account by username.
        /// </summary>
        public static Output<GetLocalUserResult> Invoke(GetLocalUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocalUserResult>("azure-native:storage/v20230501:getLocalUser", args ?? new GetLocalUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocalUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
        /// </summary>
        [Input("username", required: true)]
        public string Username { get; set; } = null!;

        public GetLocalUserArgs()
        {
        }
        public static new GetLocalUserArgs Empty => new GetLocalUserArgs();
    }

    public sealed class GetLocalUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public GetLocalUserInvokeArgs()
        {
        }
        public static new GetLocalUserInvokeArgs Empty => new GetLocalUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocalUserResult
    {
        /// <summary>
        /// Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
        /// </summary>
        public readonly bool? AllowAclAuthorization;
        /// <summary>
        /// Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
        /// </summary>
        public readonly ImmutableArray<int> ExtendedGroups;
        /// <summary>
        /// An identifier for associating a group of users.
        /// </summary>
        public readonly int? GroupId;
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        public readonly bool? HasSharedKey;
        /// <summary>
        /// Indicates whether ssh key exists. Set it to false to remove existing SSH key.
        /// </summary>
        public readonly bool? HasSshKey;
        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        public readonly bool? HasSshPassword;
        /// <summary>
        /// Optional, local user home directory.
        /// </summary>
        public readonly string? HomeDirectory;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the local user is enabled for access with NFSv3 protocol.
        /// </summary>
        public readonly bool? IsNFSv3Enabled;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The permission scopes of the local user.
        /// </summary>
        public readonly ImmutableArray<Outputs.PermissionScopeResponse> PermissionScopes;
        /// <summary>
        /// A unique Security Identifier that is generated by the server.
        /// </summary>
        public readonly string Sid;
        /// <summary>
        /// Optional, local user ssh authorized keys for SFTP.
        /// </summary>
        public readonly ImmutableArray<Outputs.SshPublicKeyResponse> SshAuthorizedKeys;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A unique Identifier that is generated by the server.
        /// </summary>
        public readonly int UserId;

        [OutputConstructor]
        private GetLocalUserResult(
            bool? allowAclAuthorization,

            ImmutableArray<int> extendedGroups,

            int? groupId,

            bool? hasSharedKey,

            bool? hasSshKey,

            bool? hasSshPassword,

            string? homeDirectory,

            string id,

            bool? isNFSv3Enabled,

            string name,

            ImmutableArray<Outputs.PermissionScopeResponse> permissionScopes,

            string sid,

            ImmutableArray<Outputs.SshPublicKeyResponse> sshAuthorizedKeys,

            Outputs.SystemDataResponse systemData,

            string type,

            int userId)
        {
            AllowAclAuthorization = allowAclAuthorization;
            ExtendedGroups = extendedGroups;
            GroupId = groupId;
            HasSharedKey = hasSharedKey;
            HasSshKey = hasSshKey;
            HasSshPassword = hasSshPassword;
            HomeDirectory = homeDirectory;
            Id = id;
            IsNFSv3Enabled = isNFSv3Enabled;
            Name = name;
            PermissionScopes = permissionScopes;
            Sid = sid;
            SshAuthorizedKeys = sshAuthorizedKeys;
            SystemData = systemData;
            Type = type;
            UserId = userId;
        }
    }
}
