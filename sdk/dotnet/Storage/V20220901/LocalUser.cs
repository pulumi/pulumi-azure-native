// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage.V20220901
{
    /// <summary>
    /// The local user associated with the storage accounts.
    /// </summary>
    [AzureNativeResourceType("azure-native:storage/v20220901:LocalUser")]
    public partial class LocalUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Output("hasSharedKey")]
        public Output<bool?> HasSharedKey { get; private set; } = null!;

        /// <summary>
        /// Indicates whether ssh key exists. Set it to false to remove existing SSH key.
        /// </summary>
        [Output("hasSshKey")]
        public Output<bool?> HasSshKey { get; private set; } = null!;

        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Output("hasSshPassword")]
        public Output<bool?> HasSshPassword { get; private set; } = null!;

        /// <summary>
        /// Optional, local user home directory.
        /// </summary>
        [Output("homeDirectory")]
        public Output<string?> HomeDirectory { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The permission scopes of the local user.
        /// </summary>
        [Output("permissionScopes")]
        public Output<ImmutableArray<Outputs.PermissionScopeResponse>> PermissionScopes { get; private set; } = null!;

        /// <summary>
        /// A unique Security Identifier that is generated by the server.
        /// </summary>
        [Output("sid")]
        public Output<string> Sid { get; private set; } = null!;

        /// <summary>
        /// Optional, local user ssh authorized keys for SFTP.
        /// </summary>
        [Output("sshAuthorizedKeys")]
        public Output<ImmutableArray<Outputs.SshPublicKeyResponse>> SshAuthorizedKeys { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a LocalUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LocalUser(string name, LocalUserArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storage/v20220901:LocalUser", name, args ?? new LocalUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LocalUser(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storage/v20220901:LocalUser", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:storage:LocalUser" },
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210801:LocalUser" },
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20210901:LocalUser" },
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20220501:LocalUser" },
                    new global::Pulumi.Alias { Type = "azure-native:storage/v20230101:LocalUser" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LocalUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LocalUser Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new LocalUser(name, id, options);
        }
    }

    public sealed class LocalUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Input("hasSharedKey")]
        public Input<bool>? HasSharedKey { get; set; }

        /// <summary>
        /// Indicates whether ssh key exists. Set it to false to remove existing SSH key.
        /// </summary>
        [Input("hasSshKey")]
        public Input<bool>? HasSshKey { get; set; }

        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Input("hasSshPassword")]
        public Input<bool>? HasSshPassword { get; set; }

        /// <summary>
        /// Optional, local user home directory.
        /// </summary>
        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        [Input("permissionScopes")]
        private InputList<Inputs.PermissionScopeArgs>? _permissionScopes;

        /// <summary>
        /// The permission scopes of the local user.
        /// </summary>
        public InputList<Inputs.PermissionScopeArgs> PermissionScopes
        {
            get => _permissionScopes ?? (_permissionScopes = new InputList<Inputs.PermissionScopeArgs>());
            set => _permissionScopes = value;
        }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("sshAuthorizedKeys")]
        private InputList<Inputs.SshPublicKeyArgs>? _sshAuthorizedKeys;

        /// <summary>
        /// Optional, local user ssh authorized keys for SFTP.
        /// </summary>
        public InputList<Inputs.SshPublicKeyArgs> SshAuthorizedKeys
        {
            get => _sshAuthorizedKeys ?? (_sshAuthorizedKeys = new InputList<Inputs.SshPublicKeyArgs>());
            set => _sshAuthorizedKeys = value;
        }

        /// <summary>
        /// The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public LocalUserArgs()
        {
        }
        public static new LocalUserArgs Empty => new LocalUserArgs();
    }
}
