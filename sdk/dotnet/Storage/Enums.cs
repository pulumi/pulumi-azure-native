// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Storage
{
    /// <summary>
    /// The access tier of a storage blob.
    /// </summary>
    [EnumType]
    public readonly struct BlobAccessTier : IEquatable<BlobAccessTier>
    {
        private readonly string _value;

        private BlobAccessTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Optimized for storing data that is accessed frequently.
        /// </summary>
        public static BlobAccessTier Hot { get; } = new BlobAccessTier("Hot");
        /// <summary>
        /// Optimized for storing data that is infrequently accessed and stored for at least 30 days.
        /// </summary>
        public static BlobAccessTier Cool { get; } = new BlobAccessTier("Cool");
        /// <summary>
        /// Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
        /// </summary>
        public static BlobAccessTier Archive { get; } = new BlobAccessTier("Archive");

        public static bool operator ==(BlobAccessTier left, BlobAccessTier right) => left.Equals(right);
        public static bool operator !=(BlobAccessTier left, BlobAccessTier right) => !left.Equals(right);

        public static explicit operator string(BlobAccessTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlobAccessTier other && Equals(other);
        public bool Equals(BlobAccessTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of a storage blob to be created.
    /// </summary>
    [EnumType]
    public readonly struct BlobType : IEquatable<BlobType>
    {
        private readonly string _value;

        private BlobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Block blobs store text and binary data. Block blobs are made up of blocks of data that can be managed individually.
        /// </summary>
        public static BlobType Block { get; } = new BlobType("Block");
        /// <summary>
        /// Append blobs are made up of blocks like block blobs, but are optimized for append operations.
        /// </summary>
        public static BlobType Append { get; } = new BlobType("Append");

        public static bool operator ==(BlobType left, BlobType right) => left.Equals(right);
        public static bool operator !=(BlobType left, BlobType right) => !left.Equals(right);

        public static explicit operator string(BlobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlobType other && Equals(other);
        public bool Equals(BlobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
