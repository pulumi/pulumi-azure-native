// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage
{
    /// <summary>
    /// .
    /// </summary>
    [AzureNativeResourceType("azure-native:storage:BlobContainerLegalHold")]
    public partial class BlobContainerLegalHold : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the Storage Account.
        /// </summary>
        [Output("accountName")]
        public Output<string?> AccountName { get; private set; } = null!;

        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Output("allowProtectedAppendWritesAll")]
        public Output<bool?> AllowProtectedAppendWritesAll { get; private set; } = null!;

        /// <summary>
        /// Name of the Blob Container.
        /// </summary>
        [Output("containerName")]
        public Output<string?> ContainerName { get; private set; } = null!;

        /// <summary>
        /// Name of the resource group that contains the storage account.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string?> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a BlobContainerLegalHold resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlobContainerLegalHold(string name, BlobContainerLegalHoldArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storage:BlobContainerLegalHold", name, args ?? new BlobContainerLegalHoldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlobContainerLegalHold(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storage:BlobContainerLegalHold", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlobContainerLegalHold resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlobContainerLegalHold Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new BlobContainerLegalHold(name, id, options);
        }
    }

    public sealed class BlobContainerLegalHoldArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Storage Account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
        /// </summary>
        [Input("allowProtectedAppendWritesAll")]
        public Input<bool>? AllowProtectedAppendWritesAll { get; set; }

        /// <summary>
        /// Name of the Blob Container.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group that contains the storage account.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public BlobContainerLegalHoldArgs()
        {
        }
        public static new BlobContainerLegalHoldArgs Empty => new BlobContainerLegalHoldArgs();
    }
}
