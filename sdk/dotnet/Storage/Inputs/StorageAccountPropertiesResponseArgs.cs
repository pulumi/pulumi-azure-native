// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Storage.Inputs
{

    /// <summary>
    /// Properties of the storage account.
    /// </summary>
    public sealed class StorageAccountPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
        /// </summary>
        [Input("accessTier", required: true)]
        public Input<string> AccessTier { get; set; } = null!;

        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.
        /// </summary>
        [Input("allowBlobPublicAccess")]
        public Input<bool>? AllowBlobPublicAccess { get; set; }

        /// <summary>
        /// Provides the identity based authentication settings for Azure Files.
        /// </summary>
        [Input("azureFilesIdentityBasedAuthentication")]
        public Input<Inputs.AzureFilesIdentityBasedAuthenticationResponseArgs>? AzureFilesIdentityBasedAuthentication { get; set; }

        /// <summary>
        /// Blob restore status
        /// </summary>
        [Input("blobRestoreStatus", required: true)]
        public Input<Inputs.BlobRestoreStatusResponseArgs> BlobRestoreStatus { get; set; } = null!;

        /// <summary>
        /// Gets the creation date and time of the storage account in UTC.
        /// </summary>
        [Input("creationTime", required: true)]
        public Input<string> CreationTime { get; set; } = null!;

        /// <summary>
        /// Gets the custom domain the user assigned to this storage account.
        /// </summary>
        [Input("customDomain", required: true)]
        public Input<Inputs.CustomDomainResponseArgs> CustomDomain { get; set; } = null!;

        /// <summary>
        /// Gets the encryption settings on the account. If unspecified, the account is unencrypted.
        /// </summary>
        [Input("encryption", required: true)]
        public Input<Inputs.EncryptionResponseArgs> Encryption { get; set; } = null!;

        /// <summary>
        /// If the failover is in progress, the value will be true, otherwise, it will be null.
        /// </summary>
        [Input("failoverInProgress", required: true)]
        public Input<bool> FailoverInProgress { get; set; } = null!;

        /// <summary>
        /// Geo Replication Stats
        /// </summary>
        [Input("geoReplicationStats", required: true)]
        public Input<Inputs.GeoReplicationStatsResponseArgs> GeoReplicationStats { get; set; } = null!;

        /// <summary>
        /// Account HierarchicalNamespace enabled if sets to true.
        /// </summary>
        [Input("isHnsEnabled")]
        public Input<bool>? IsHnsEnabled { get; set; }

        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [Input("largeFileSharesState")]
        public Input<string>? LargeFileSharesState { get; set; }

        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Input("lastGeoFailoverTime", required: true)]
        public Input<string> LastGeoFailoverTime { get; set; } = null!;

        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Network rule set
        /// </summary>
        [Input("networkAcls", required: true)]
        public Input<Inputs.NetworkRuleSetResponseArgs> NetworkAcls { get; set; } = null!;

        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
        /// </summary>
        [Input("primaryEndpoints", required: true)]
        public Input<Inputs.EndpointsResponseArgs> PrimaryEndpoints { get; set; } = null!;

        /// <summary>
        /// Gets the location of the primary data center for the storage account.
        /// </summary>
        [Input("primaryLocation", required: true)]
        public Input<string> PrimaryLocation { get; set; } = null!;

        [Input("privateEndpointConnections", required: true)]
        private InputList<Inputs.PrivateEndpointConnectionResponseArgs>? _privateEndpointConnections;

        /// <summary>
        /// List of private endpoint connection associated with the specified storage account
        /// </summary>
        public InputList<Inputs.PrivateEndpointConnectionResponseArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionResponseArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// Gets the status of the storage account at the time the operation was called.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// Maintains information about the network routing choice opted by the user for data transfer
        /// </summary>
        [Input("routingPreference")]
        public Input<Inputs.RoutingPreferenceResponseArgs>? RoutingPreference { get; set; }

        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
        /// </summary>
        [Input("secondaryEndpoints", required: true)]
        public Input<Inputs.EndpointsResponseArgs> SecondaryEndpoints { get; set; } = null!;

        /// <summary>
        /// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Input("secondaryLocation", required: true)]
        public Input<string> SecondaryLocation { get; set; } = null!;

        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        [Input("statusOfPrimary", required: true)]
        public Input<string> StatusOfPrimary { get; set; } = null!;

        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Input("statusOfSecondary", required: true)]
        public Input<string> StatusOfSecondary { get; set; } = null!;

        /// <summary>
        /// Allows https traffic only to storage service if sets to true.
        /// </summary>
        [Input("supportsHttpsTrafficOnly")]
        public Input<bool>? SupportsHttpsTrafficOnly { get; set; }

        public StorageAccountPropertiesResponseArgs()
        {
        }
    }
}
