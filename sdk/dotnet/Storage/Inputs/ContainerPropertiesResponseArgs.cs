// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Storage.Inputs
{

    /// <summary>
    /// The properties of a container.
    /// </summary>
    public sealed class ContainerPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default the container to use specified encryption scope for all writes.
        /// </summary>
        [Input("defaultEncryptionScope")]
        public Input<string>? DefaultEncryptionScope { get; set; }

        /// <summary>
        /// Indicates whether the blob container was deleted.
        /// </summary>
        [Input("deleted", required: true)]
        public Input<bool> Deleted { get; set; } = null!;

        /// <summary>
        /// Blob container deletion time.
        /// </summary>
        [Input("deletedTime", required: true)]
        public Input<string> DeletedTime { get; set; } = null!;

        /// <summary>
        /// Block override of encryption scope from the container default.
        /// </summary>
        [Input("denyEncryptionScopeOverride")]
        public Input<bool>? DenyEncryptionScopeOverride { get; set; }

        /// <summary>
        /// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
        /// </summary>
        [Input("hasImmutabilityPolicy", required: true)]
        public Input<bool> HasImmutabilityPolicy { get; set; } = null!;

        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
        /// </summary>
        [Input("hasLegalHold", required: true)]
        public Input<bool> HasLegalHold { get; set; } = null!;

        /// <summary>
        /// The ImmutabilityPolicy property of the container.
        /// </summary>
        [Input("immutabilityPolicy", required: true)]
        public Input<Inputs.ImmutabilityPolicyPropertiesResponseArgs> ImmutabilityPolicy { get; set; } = null!;

        /// <summary>
        /// Returns the date and time the container was last modified.
        /// </summary>
        [Input("lastModifiedTime", required: true)]
        public Input<string> LastModifiedTime { get; set; } = null!;

        /// <summary>
        /// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
        /// </summary>
        [Input("leaseDuration", required: true)]
        public Input<string> LeaseDuration { get; set; } = null!;

        /// <summary>
        /// Lease state of the container.
        /// </summary>
        [Input("leaseState", required: true)]
        public Input<string> LeaseState { get; set; } = null!;

        /// <summary>
        /// The lease status of the container.
        /// </summary>
        [Input("leaseStatus", required: true)]
        public Input<string> LeaseStatus { get; set; } = null!;

        /// <summary>
        /// The LegalHold property of the container.
        /// </summary>
        [Input("legalHold", required: true)]
        public Input<Inputs.LegalHoldPropertiesResponseArgs> LegalHold { get; set; } = null!;

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A name-value pair to associate with the container as metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Specifies whether data in the container may be accessed publicly and the level of access.
        /// </summary>
        [Input("publicAccess")]
        public Input<string>? PublicAccess { get; set; }

        /// <summary>
        /// Remaining retention days for soft deleted blob container.
        /// </summary>
        [Input("remainingRetentionDays", required: true)]
        public Input<int> RemainingRetentionDays { get; set; } = null!;

        /// <summary>
        /// The version of the deleted blob container.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public ContainerPropertiesResponseArgs()
        {
        }
    }
}
