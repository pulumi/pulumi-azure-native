// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Storage.V20180201.Outputs
{

    [OutputType]
    public sealed class ContainerPropertiesResponseResult
    {
        /// <summary>
        /// The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
        /// </summary>
        public readonly bool HasImmutabilityPolicy;
        /// <summary>
        /// The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
        /// </summary>
        public readonly bool HasLegalHold;
        /// <summary>
        /// The ImmutabilityPolicy property of the container.
        /// </summary>
        public readonly Outputs.ImmutabilityPolicyPropertiesResponseResult ImmutabilityPolicy;
        /// <summary>
        /// Returns the date and time the container was last modified.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
        /// </summary>
        public readonly string LeaseDuration;
        /// <summary>
        /// Lease state of the container.
        /// </summary>
        public readonly string LeaseState;
        /// <summary>
        /// The lease status of the container.
        /// </summary>
        public readonly string LeaseStatus;
        /// <summary>
        /// The LegalHold property of the container.
        /// </summary>
        public readonly Outputs.LegalHoldPropertiesResponseResult LegalHold;
        /// <summary>
        /// A name-value pair to associate with the container as metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// Specifies whether data in the container may be accessed publicly and the level of access.
        /// </summary>
        public readonly string? PublicAccess;

        [OutputConstructor]
        private ContainerPropertiesResponseResult(
            bool hasImmutabilityPolicy,

            bool hasLegalHold,

            Outputs.ImmutabilityPolicyPropertiesResponseResult immutabilityPolicy,

            string lastModifiedTime,

            string leaseDuration,

            string leaseState,

            string leaseStatus,

            Outputs.LegalHoldPropertiesResponseResult legalHold,

            ImmutableDictionary<string, string>? metadata,

            string? publicAccess)
        {
            HasImmutabilityPolicy = hasImmutabilityPolicy;
            HasLegalHold = hasLegalHold;
            ImmutabilityPolicy = immutabilityPolicy;
            LastModifiedTime = lastModifiedTime;
            LeaseDuration = leaseDuration;
            LeaseState = leaseState;
            LeaseStatus = leaseStatus;
            LegalHold = legalHold;
            Metadata = metadata;
            PublicAccess = publicAccess;
        }
    }
}
