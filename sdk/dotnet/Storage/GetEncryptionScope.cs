// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage
{
    public static class GetEncryptionScope
    {
        /// <summary>
        /// The Encryption Scope resource.
        /// API Version: 2021-02-01.
        /// </summary>
        public static Task<GetEncryptionScopeResult> InvokeAsync(GetEncryptionScopeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEncryptionScopeResult>("azure-native:storage:getEncryptionScope", args ?? new GetEncryptionScopeArgs(), options.WithDefaults());

        /// <summary>
        /// The Encryption Scope resource.
        /// API Version: 2021-02-01.
        /// </summary>
        public static Output<GetEncryptionScopeResult> Invoke(GetEncryptionScopeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEncryptionScopeResult>("azure-native:storage:getEncryptionScope", args ?? new GetEncryptionScopeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptionScopeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
        /// </summary>
        [Input("encryptionScopeName", required: true)]
        public string EncryptionScopeName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEncryptionScopeArgs()
        {
        }
    }

    public sealed class GetEncryptionScopeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
        /// </summary>
        [Input("encryptionScopeName", required: true)]
        public Input<string> EncryptionScopeName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEncryptionScopeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEncryptionScopeResult
    {
        /// <summary>
        /// Gets the creation date and time of the encryption scope in UTC.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
        /// </summary>
        public readonly Outputs.EncryptionScopeKeyVaultPropertiesResponse? KeyVaultProperties;
        /// <summary>
        /// Gets the last modification date and time of the encryption scope in UTC.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
        /// </summary>
        public readonly bool? RequireInfrastructureEncryption;
        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEncryptionScopeResult(
            string creationTime,

            string id,

            Outputs.EncryptionScopeKeyVaultPropertiesResponse? keyVaultProperties,

            string lastModifiedTime,

            string name,

            bool? requireInfrastructureEncryption,

            string? source,

            string? state,

            string type)
        {
            CreationTime = creationTime;
            Id = id;
            KeyVaultProperties = keyVaultProperties;
            LastModifiedTime = lastModifiedTime;
            Name = name;
            RequireInfrastructureEncryption = requireInfrastructureEncryption;
            Source = source;
            State = state;
            Type = type;
        }
    }
}
