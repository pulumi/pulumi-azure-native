// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Storage.V20210601
{
    public static class GetObjectReplicationPolicy
    {
        /// <summary>
        /// The replication policy between two storage accounts. Multiple rules can be defined in one policy.
        /// </summary>
        public static Task<GetObjectReplicationPolicyResult> InvokeAsync(GetObjectReplicationPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetObjectReplicationPolicyResult>("azure-native:storage/v20210601:getObjectReplicationPolicy", args ?? new GetObjectReplicationPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// The replication policy between two storage accounts. Multiple rules can be defined in one policy.
        /// </summary>
        public static Output<GetObjectReplicationPolicyResult> Invoke(GetObjectReplicationPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetObjectReplicationPolicyResult>("azure-native:storage/v20210601:getObjectReplicationPolicy", args ?? new GetObjectReplicationPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObjectReplicationPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// For the destination account, provide the value 'default'. Configure the policy on the destination account first. For the source account, provide the value of the policy ID that is returned when you download the policy that was defined on the destination account. The policy is downloaded as a JSON file.
        /// </summary>
        [Input("objectReplicationPolicyId", required: true)]
        public string ObjectReplicationPolicyId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetObjectReplicationPolicyArgs()
        {
        }
        public static new GetObjectReplicationPolicyArgs Empty => new GetObjectReplicationPolicyArgs();
    }

    public sealed class GetObjectReplicationPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// For the destination account, provide the value 'default'. Configure the policy on the destination account first. For the source account, provide the value of the policy ID that is returned when you download the policy that was defined on the destination account. The policy is downloaded as a JSON file.
        /// </summary>
        [Input("objectReplicationPolicyId", required: true)]
        public Input<string> ObjectReplicationPolicyId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetObjectReplicationPolicyInvokeArgs()
        {
        }
        public static new GetObjectReplicationPolicyInvokeArgs Empty => new GetObjectReplicationPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetObjectReplicationPolicyResult
    {
        /// <summary>
        /// Required. Destination account name. It should be full resource id if allowCrossTenantReplication set to false.
        /// </summary>
        public readonly string DestinationAccount;
        /// <summary>
        /// Indicates when the policy is enabled on the source account.
        /// </summary>
        public readonly string EnabledTime;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A unique id for object replication policy.
        /// </summary>
        public readonly string PolicyId;
        /// <summary>
        /// The storage account object replication rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.ObjectReplicationPolicyRuleResponse> Rules;
        /// <summary>
        /// Required. Source account name. It should be full resource id if allowCrossTenantReplication set to false.
        /// </summary>
        public readonly string SourceAccount;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetObjectReplicationPolicyResult(
            string destinationAccount,

            string enabledTime,

            string id,

            string name,

            string policyId,

            ImmutableArray<Outputs.ObjectReplicationPolicyRuleResponse> rules,

            string sourceAccount,

            string type)
        {
            DestinationAccount = destinationAccount;
            EnabledTime = enabledTime;
            Id = id;
            Name = name;
            PolicyId = policyId;
            Rules = rules;
            SourceAccount = sourceAccount;
            Type = type;
        }
    }
}
