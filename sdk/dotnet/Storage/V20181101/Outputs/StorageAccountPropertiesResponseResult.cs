// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Storage.V20181101.Outputs
{

    [OutputType]
    public sealed class StorageAccountPropertiesResponseResult
    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
        /// </summary>
        public readonly string AccessTier;
        /// <summary>
        /// Enables Azure Files AAD Integration for SMB if sets to true.
        /// </summary>
        public readonly bool? AzureFilesAadIntegration;
        /// <summary>
        /// Gets the creation date and time of the storage account in UTC.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Gets the custom domain the user assigned to this storage account.
        /// </summary>
        public readonly Outputs.CustomDomainResponseResult CustomDomain;
        /// <summary>
        /// Gets the encryption settings on the account. If unspecified, the account is unencrypted.
        /// </summary>
        public readonly Outputs.EncryptionResponseResult Encryption;
        /// <summary>
        /// If the failover is in progress, the value will be true, otherwise, it will be null.
        /// </summary>
        public readonly bool FailoverInProgress;
        /// <summary>
        /// Geo Replication Stats
        /// </summary>
        public readonly Outputs.GeoReplicationStatsResponseResult GeoReplicationStats;
        /// <summary>
        /// Account HierarchicalNamespace enabled if sets to true.
        /// </summary>
        public readonly bool? IsHnsEnabled;
        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </summary>
        public readonly string LastGeoFailoverTime;
        /// <summary>
        /// Network rule set
        /// </summary>
        public readonly Outputs.NetworkRuleSetResponseResult NetworkAcls;
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
        /// </summary>
        public readonly Outputs.EndpointsResponseResult PrimaryEndpoints;
        /// <summary>
        /// Gets the location of the primary data center for the storage account.
        /// </summary>
        public readonly string PrimaryLocation;
        /// <summary>
        /// Gets the status of the storage account at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
        /// </summary>
        public readonly Outputs.EndpointsResponseResult SecondaryEndpoints;
        /// <summary>
        /// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </summary>
        public readonly string SecondaryLocation;
        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        public readonly string StatusOfPrimary;
        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
        /// </summary>
        public readonly string StatusOfSecondary;
        /// <summary>
        /// Allows https traffic only to storage service if sets to true.
        /// </summary>
        public readonly bool? SupportsHttpsTrafficOnly;

        [OutputConstructor]
        private StorageAccountPropertiesResponseResult(
            string accessTier,

            bool? azureFilesAadIntegration,

            string creationTime,

            Outputs.CustomDomainResponseResult customDomain,

            Outputs.EncryptionResponseResult encryption,

            bool failoverInProgress,

            Outputs.GeoReplicationStatsResponseResult geoReplicationStats,

            bool? isHnsEnabled,

            string lastGeoFailoverTime,

            Outputs.NetworkRuleSetResponseResult networkAcls,

            Outputs.EndpointsResponseResult primaryEndpoints,

            string primaryLocation,

            string provisioningState,

            Outputs.EndpointsResponseResult secondaryEndpoints,

            string secondaryLocation,

            string statusOfPrimary,

            string statusOfSecondary,

            bool? supportsHttpsTrafficOnly)
        {
            AccessTier = accessTier;
            AzureFilesAadIntegration = azureFilesAadIntegration;
            CreationTime = creationTime;
            CustomDomain = customDomain;
            Encryption = encryption;
            FailoverInProgress = failoverInProgress;
            GeoReplicationStats = geoReplicationStats;
            IsHnsEnabled = isHnsEnabled;
            LastGeoFailoverTime = lastGeoFailoverTime;
            NetworkAcls = networkAcls;
            PrimaryEndpoints = primaryEndpoints;
            PrimaryLocation = primaryLocation;
            ProvisioningState = provisioningState;
            SecondaryEndpoints = secondaryEndpoints;
            SecondaryLocation = secondaryLocation;
            StatusOfPrimary = statusOfPrimary;
            StatusOfSecondary = statusOfSecondary;
            SupportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
        }
    }
}
