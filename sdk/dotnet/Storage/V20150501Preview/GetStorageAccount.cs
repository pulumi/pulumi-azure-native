// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Storage.V20150501Preview
{
    public static class GetStorageAccount
    {
        public static Task<GetStorageAccountResult> InvokeAsync(GetStorageAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStorageAccountResult>("azure-nextgen:storage/v20150501preview:getStorageAccount", args ?? new GetStorageAccountArgs(), options.WithVersion());
    }


    public sealed class GetStorageAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetStorageAccountArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStorageAccountResult
    {
        /// <summary>
        /// Gets the type of the storage account.
        /// </summary>
        public readonly string? AccountType;
        /// <summary>
        /// Gets the creation date and time of the storage account in UTC.
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// Gets the user assigned custom domain assigned to this storage account.
        /// </summary>
        public readonly Outputs.CustomDomainResponse? CustomDomain;
        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
        /// </summary>
        public readonly string? LastGeoFailoverTime;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue or table object.Note that StandardZRS and PremiumLRS accounts only return the blob endpoint.
        /// </summary>
        public readonly Outputs.EndpointsResponse? PrimaryEndpoints;
        /// <summary>
        /// Gets the location of the primary for the storage account.
        /// </summary>
        public readonly string? PrimaryLocation;
        /// <summary>
        /// Gets the status of the storage account at the time the operation was called.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue or table object from the secondary location of the storage account. Only available if the accountType is StandardRAGRS.
        /// </summary>
        public readonly Outputs.EndpointsResponse? SecondaryEndpoints;
        /// <summary>
        /// Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
        /// </summary>
        public readonly string? SecondaryLocation;
        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        public readonly string? StatusOfPrimary;
        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS.
        /// </summary>
        public readonly string? StatusOfSecondary;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetStorageAccountResult(
            string? accountType,

            string? creationTime,

            Outputs.CustomDomainResponse? customDomain,

            string? lastGeoFailoverTime,

            string location,

            string name,

            Outputs.EndpointsResponse? primaryEndpoints,

            string? primaryLocation,

            string? provisioningState,

            Outputs.EndpointsResponse? secondaryEndpoints,

            string? secondaryLocation,

            string? statusOfPrimary,

            string? statusOfSecondary,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AccountType = accountType;
            CreationTime = creationTime;
            CustomDomain = customDomain;
            LastGeoFailoverTime = lastGeoFailoverTime;
            Location = location;
            Name = name;
            PrimaryEndpoints = primaryEndpoints;
            PrimaryLocation = primaryLocation;
            ProvisioningState = provisioningState;
            SecondaryEndpoints = secondaryEndpoints;
            SecondaryLocation = secondaryLocation;
            StatusOfPrimary = statusOfPrimary;
            StatusOfSecondary = statusOfSecondary;
            Tags = tags;
            Type = type;
        }
    }
}
