// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Storage.Latest
{
    /// <summary>
    /// Properties of the file share, including Id, resource name, resource type, Etag.
    /// </summary>
    public partial class FileShare : Pulumi.CustomResource
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
        /// </summary>
        [Output("accessTier")]
        public Output<string?> AccessTier { get; private set; } = null!;

        /// <summary>
        /// Indicates the last modification time for share access tier.
        /// </summary>
        [Output("accessTierChangeTime")]
        public Output<string> AccessTierChangeTime { get; private set; } = null!;

        /// <summary>
        /// Indicates if there is a pending transition for access tier.
        /// </summary>
        [Output("accessTierStatus")]
        public Output<string> AccessTierStatus { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the share was deleted.
        /// </summary>
        [Output("deleted")]
        public Output<bool> Deleted { get; private set; } = null!;

        /// <summary>
        /// The deleted time if the share was deleted.
        /// </summary>
        [Output("deletedTime")]
        public Output<string> DeletedTime { get; private set; } = null!;

        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Output("enabledProtocols")]
        public Output<string?> EnabledProtocols { get; private set; } = null!;

        /// <summary>
        /// Resource Etag.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Returns the date and time the share was last modified.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// A name-value pair to associate with the share as metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Remaining retention days for share that was soft deleted.
        /// </summary>
        [Output("remainingRetentionDays")]
        public Output<int> RemainingRetentionDays { get; private set; } = null!;

        /// <summary>
        /// The property is for NFS share only. The default is NoRootSquash.
        /// </summary>
        [Output("rootSquash")]
        public Output<string?> RootSquash { get; private set; } = null!;

        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
        /// </summary>
        [Output("shareQuota")]
        public Output<int?> ShareQuota { get; private set; } = null!;

        /// <summary>
        /// The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
        /// </summary>
        [Output("shareUsageBytes")]
        public Output<int> ShareUsageBytes { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The version of the share.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a FileShare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileShare(string name, FileShareArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:storage/latest:FileShare", name, args ?? new FileShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileShare(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:storage/latest:FileShare", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:storage/v20190401:FileShare"},
                    new Pulumi.Alias { Type = "azure-nextgen:storage/v20190601:FileShare"},
                    new Pulumi.Alias { Type = "azure-nextgen:storage/v20200801preview:FileShare"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileShare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileShare Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FileShare(name, id, options);
        }
    }

    public sealed class FileShareArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
        /// </summary>
        [Input("accessTier")]
        public Input<string>? AccessTier { get; set; }

        /// <summary>
        /// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The authentication protocol that is used for the file share. Can only be specified when creating a share.
        /// </summary>
        [Input("enabledProtocols")]
        public Input<string>? EnabledProtocols { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// A name-value pair to associate with the share as metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The property is for NFS share only. The default is NoRootSquash.
        /// </summary>
        [Input("rootSquash")]
        public Input<string>? RootSquash { get; set; }

        /// <summary>
        /// The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
        /// </summary>
        [Input("shareName", required: true)]
        public Input<string> ShareName { get; set; } = null!;

        /// <summary>
        /// The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
        /// </summary>
        [Input("shareQuota")]
        public Input<int>? ShareQuota { get; set; }

        public FileShareArgs()
        {
        }
    }
}
