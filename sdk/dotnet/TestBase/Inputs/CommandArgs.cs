// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TestBase.Inputs
{

    /// <summary>
    /// The command used in the test
    /// </summary>
    public sealed class CommandArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action of the command.
        /// </summary>
        [Input("action", required: true)]
        public InputUnion<string, Pulumi.AzureNative.TestBase.Action> Action { get; set; } = null!;

        /// <summary>
        /// Specifies whether to run the command even if a previous command is failed.
        /// </summary>
        [Input("alwaysRun")]
        public Input<bool>? AlwaysRun { get; set; }

        /// <summary>
        /// Specifies whether to apply update before the command.
        /// </summary>
        [Input("applyUpdateBefore")]
        public Input<bool>? ApplyUpdateBefore { get; set; }

        /// <summary>
        /// The content of the command. The content depends on source type.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The type of command content.
        /// </summary>
        [Input("contentType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.TestBase.ContentType> ContentType { get; set; } = null!;

        /// <summary>
        /// Specifies the max run time of the command.
        /// </summary>
        [Input("maxRunTime")]
        public Input<int>? MaxRunTime { get; set; }

        /// <summary>
        /// The name of the command.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies whether to restart the VM after the command executed.
        /// </summary>
        [Input("restartAfter")]
        public Input<bool>? RestartAfter { get; set; }

        /// <summary>
        /// Specifies whether to run the command in interactive mode.
        /// </summary>
        [Input("runAsInteractive")]
        public Input<bool>? RunAsInteractive { get; set; }

        /// <summary>
        /// Specifies whether to run the command as administrator.
        /// </summary>
        [Input("runElevated")]
        public Input<bool>? RunElevated { get; set; }

        public CommandArgs()
        {
        }
        public static new CommandArgs Empty => new CommandArgs();
    }
}
