// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TestBase.V20231101Preview
{
    /// <summary>
    /// The Test Base Draft Package resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:testbase/v20231101preview:DraftPackage")]
    public partial class DraftPackage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the app file.
        /// </summary>
        [Output("appFileName")]
        public Output<string?> AppFileName { get; private set; } = null!;

        /// <summary>
        /// Application name
        /// </summary>
        [Output("applicationName")]
        public Output<string?> ApplicationName { get; private set; } = null!;

        /// <summary>
        /// Comments added by user.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// The relative path of the folder hosting package files.
        /// </summary>
        [Output("draftPackagePath")]
        public Output<string> DraftPackagePath { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this draft package is used to edit a package.
        /// </summary>
        [Output("editPackage")]
        public Output<bool?> EditPackage { get; private set; } = null!;

        /// <summary>
        /// The executable launch command for script auto-fill. Will be used to run the application.
        /// </summary>
        [Output("executableLaunchCommand")]
        public Output<string?> ExecutableLaunchCommand { get; private set; } = null!;

        /// <summary>
        /// The list of first party applications to test along with user application.
        /// </summary>
        [Output("firstPartyApps")]
        public Output<ImmutableArray<Outputs.FirstPartyAppDefinitionResponse>> FirstPartyApps { get; private set; } = null!;

        /// <summary>
        /// The flighting ring for feature update.
        /// </summary>
        [Output("flightingRing")]
        public Output<string?> FlightingRing { get; private set; } = null!;

        /// <summary>
        /// The list of gallery apps to test along with user application.
        /// </summary>
        [Output("galleryApps")]
        public Output<ImmutableArray<Outputs.GalleryAppDefinitionResponse>> GalleryApps { get; private set; } = null!;

        /// <summary>
        /// The highlight files in the package.
        /// </summary>
        [Output("highlightedFiles")]
        public Output<ImmutableArray<Outputs.HighlightedFileResponse>> HighlightedFiles { get; private set; } = null!;

        /// <summary>
        /// Specifies the baseline os and target os for inplace upgrade.
        /// </summary>
        [Output("inplaceUpgradeOSPair")]
        public Output<Outputs.InplaceUpgradeOSInfoResponse?> InplaceUpgradeOSPair { get; private set; } = null!;

        /// <summary>
        /// The metadata of Intune enrollment.
        /// </summary>
        [Output("intuneEnrollmentMetadata")]
        public Output<Outputs.IntuneEnrollmentMetadataResponse?> IntuneEnrollmentMetadata { get; private set; } = null!;

        /// <summary>
        /// Metadata used to generate draft package folder and scripts.
        /// </summary>
        [Output("intuneMetadata")]
        public Output<Outputs.DraftPackageIntuneAppMetadataResponse?> IntuneMetadata { get; private set; } = null!;

        /// <summary>
        /// The UTC timestamp when the package was last modified.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the package id from which the draft package copied.
        /// </summary>
        [Output("packageId")]
        public Output<string?> PackageId { get; private set; } = null!;

        /// <summary>
        /// Tags of the package to be created.
        /// </summary>
        [Output("packageTags")]
        public Output<ImmutableDictionary<string, string>?> PackageTags { get; private set; } = null!;

        /// <summary>
        /// The process name for script auto-fill. Will be used to identify the application process.
        /// </summary>
        [Output("processName")]
        public Output<string?> ProcessName { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The source type.
        /// </summary>
        [Output("sourceType")]
        public Output<string?> SourceType { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tab state.
        /// </summary>
        [Output("tabState")]
        public Output<Outputs.TabStateResponse?> TabState { get; private set; } = null!;

        /// <summary>
        /// Specifies the target OSs of specific OS Update types.
        /// </summary>
        [Output("targetOSList")]
        public Output<ImmutableArray<Outputs.TargetOSInfoResponse>> TargetOSList { get; private set; } = null!;

        /// <summary>
        /// OOB, functional or flow driven. Mapped to the data in 'tests' property.
        /// </summary>
        [Output("testTypes")]
        public Output<ImmutableArray<string>> TestTypes { get; private set; } = null!;

        /// <summary>
        /// The detailed test information.
        /// </summary>
        [Output("tests")]
        public Output<ImmutableArray<Outputs.TestResponse>> Tests { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Indicates whether user choose to enable script auto-fill.
        /// </summary>
        [Output("useAutofill")]
        public Output<bool?> UseAutofill { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a sample package should be used instead of the one uploaded by the user.
        /// </summary>
        [Output("useSample")]
        public Output<bool?> UseSample { get; private set; } = null!;

        /// <summary>
        /// Application version
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;

        /// <summary>
        /// The relative path for a temporarily folder for package creation work.
        /// </summary>
        [Output("workingPath")]
        public Output<string> WorkingPath { get; private set; } = null!;


        /// <summary>
        /// Create a DraftPackage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DraftPackage(string name, DraftPackageArgs args, CustomResourceOptions? options = null)
            : base("azure-native:testbase/v20231101preview:DraftPackage", name, args ?? new DraftPackageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DraftPackage(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:testbase/v20231101preview:DraftPackage", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:testbase:DraftPackage" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DraftPackage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DraftPackage Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DraftPackage(name, id, options);
        }
    }

    public sealed class DraftPackageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the app file.
        /// </summary>
        [Input("appFileName")]
        public Input<string>? AppFileName { get; set; }

        /// <summary>
        /// Application name
        /// </summary>
        [Input("applicationName")]
        public Input<string>? ApplicationName { get; set; }

        /// <summary>
        /// Comments added by user.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// The resource name of the Test Base Draft Package.
        /// </summary>
        [Input("draftPackageName")]
        public Input<string>? DraftPackageName { get; set; }

        /// <summary>
        /// Specifies whether this draft package is used to edit a package.
        /// </summary>
        [Input("editPackage")]
        public Input<bool>? EditPackage { get; set; }

        /// <summary>
        /// The executable launch command for script auto-fill. Will be used to run the application.
        /// </summary>
        [Input("executableLaunchCommand")]
        public Input<string>? ExecutableLaunchCommand { get; set; }

        [Input("firstPartyApps")]
        private InputList<Inputs.FirstPartyAppDefinitionArgs>? _firstPartyApps;

        /// <summary>
        /// The list of first party applications to test along with user application.
        /// </summary>
        public InputList<Inputs.FirstPartyAppDefinitionArgs> FirstPartyApps
        {
            get => _firstPartyApps ?? (_firstPartyApps = new InputList<Inputs.FirstPartyAppDefinitionArgs>());
            set => _firstPartyApps = value;
        }

        /// <summary>
        /// The flighting ring for feature update.
        /// </summary>
        [Input("flightingRing")]
        public Input<string>? FlightingRing { get; set; }

        [Input("galleryApps")]
        private InputList<Inputs.GalleryAppDefinitionArgs>? _galleryApps;

        /// <summary>
        /// The list of gallery apps to test along with user application.
        /// </summary>
        public InputList<Inputs.GalleryAppDefinitionArgs> GalleryApps
        {
            get => _galleryApps ?? (_galleryApps = new InputList<Inputs.GalleryAppDefinitionArgs>());
            set => _galleryApps = value;
        }

        [Input("highlightedFiles")]
        private InputList<Inputs.HighlightedFileArgs>? _highlightedFiles;

        /// <summary>
        /// The highlight files in the package.
        /// </summary>
        public InputList<Inputs.HighlightedFileArgs> HighlightedFiles
        {
            get => _highlightedFiles ?? (_highlightedFiles = new InputList<Inputs.HighlightedFileArgs>());
            set => _highlightedFiles = value;
        }

        /// <summary>
        /// Specifies the baseline os and target os for inplace upgrade.
        /// </summary>
        [Input("inplaceUpgradeOSPair")]
        public Input<Inputs.InplaceUpgradeOSInfoArgs>? InplaceUpgradeOSPair { get; set; }

        /// <summary>
        /// The metadata of Intune enrollment.
        /// </summary>
        [Input("intuneEnrollmentMetadata")]
        public Input<Inputs.IntuneEnrollmentMetadataArgs>? IntuneEnrollmentMetadata { get; set; }

        /// <summary>
        /// Metadata used to generate draft package folder and scripts.
        /// </summary>
        [Input("intuneMetadata")]
        public Input<Inputs.DraftPackageIntuneAppMetadataArgs>? IntuneMetadata { get; set; }

        /// <summary>
        /// Specifies the package id from which the draft package copied.
        /// </summary>
        [Input("packageId")]
        public Input<string>? PackageId { get; set; }

        [Input("packageTags")]
        private InputMap<string>? _packageTags;

        /// <summary>
        /// Tags of the package to be created.
        /// </summary>
        public InputMap<string> PackageTags
        {
            get => _packageTags ?? (_packageTags = new InputMap<string>());
            set => _packageTags = value;
        }

        /// <summary>
        /// The process name for script auto-fill. Will be used to identify the application process.
        /// </summary>
        [Input("processName")]
        public Input<string>? ProcessName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The source type.
        /// </summary>
        [Input("sourceType")]
        public InputUnion<string, Pulumi.AzureNative.TestBase.V20231101Preview.DraftPackageSourceType>? SourceType { get; set; }

        /// <summary>
        /// Tab state.
        /// </summary>
        [Input("tabState")]
        public Input<Inputs.TabStateArgs>? TabState { get; set; }

        [Input("targetOSList")]
        private InputList<Inputs.TargetOSInfoArgs>? _targetOSList;

        /// <summary>
        /// Specifies the target OSs of specific OS Update types.
        /// </summary>
        public InputList<Inputs.TargetOSInfoArgs> TargetOSList
        {
            get => _targetOSList ?? (_targetOSList = new InputList<Inputs.TargetOSInfoArgs>());
            set => _targetOSList = value;
        }

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public Input<string> TestBaseAccountName { get; set; } = null!;

        [Input("testTypes")]
        private InputList<Union<string, Pulumi.AzureNative.TestBase.V20231101Preview.TestType>>? _testTypes;

        /// <summary>
        /// OOB, functional or flow driven. Mapped to the data in 'tests' property.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.TestBase.V20231101Preview.TestType>> TestTypes
        {
            get => _testTypes ?? (_testTypes = new InputList<Union<string, Pulumi.AzureNative.TestBase.V20231101Preview.TestType>>());
            set => _testTypes = value;
        }

        [Input("tests")]
        private InputList<Inputs.TestArgs>? _tests;

        /// <summary>
        /// The detailed test information.
        /// </summary>
        public InputList<Inputs.TestArgs> Tests
        {
            get => _tests ?? (_tests = new InputList<Inputs.TestArgs>());
            set => _tests = value;
        }

        /// <summary>
        /// Indicates whether user choose to enable script auto-fill.
        /// </summary>
        [Input("useAutofill")]
        public Input<bool>? UseAutofill { get; set; }

        /// <summary>
        /// Specifies whether a sample package should be used instead of the one uploaded by the user.
        /// </summary>
        [Input("useSample")]
        public Input<bool>? UseSample { get; set; }

        /// <summary>
        /// Application version
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public DraftPackageArgs()
        {
            EditPackage = false;
            SourceType = "Native";
        }
        public static new DraftPackageArgs Empty => new DraftPackageArgs();
    }
}
