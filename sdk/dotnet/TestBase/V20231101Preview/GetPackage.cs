// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TestBase.V20231101Preview
{
    public static class GetPackage
    {
        /// <summary>
        /// Gets a Test Base Package.
        /// </summary>
        public static Task<GetPackageResult> InvokeAsync(GetPackageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPackageResult>("azure-native:testbase/v20231101preview:getPackage", args ?? new GetPackageArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Test Base Package.
        /// </summary>
        public static Output<GetPackageResult> Invoke(GetPackageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPackageResult>("azure-native:testbase/v20231101preview:getPackage", args ?? new GetPackageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Package.
        /// </summary>
        [Input("packageName", required: true)]
        public string PackageName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public string TestBaseAccountName { get; set; } = null!;

        public GetPackageArgs()
        {
        }
        public static new GetPackageArgs Empty => new GetPackageArgs();
    }

    public sealed class GetPackageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Package.
        /// </summary>
        [Input("packageName", required: true)]
        public Input<string> PackageName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public Input<string> TestBaseAccountName { get; set; } = null!;

        public GetPackageInvokeArgs()
        {
        }
        public static new GetPackageInvokeArgs Empty => new GetPackageInvokeArgs();
    }


    [OutputType]
    public sealed class GetPackageResult
    {
        /// <summary>
        /// Application name
        /// </summary>
        public readonly string ApplicationName;
        /// <summary>
        /// The file path of the package.
        /// </summary>
        public readonly string? BlobPath;
        /// <summary>
        /// The id of draft package. Used to create or update this package from a draft package.
        /// </summary>
        public readonly string? DraftPackageId;
        /// <summary>
        /// The list of first party applications to test along with user application.
        /// </summary>
        public readonly ImmutableArray<Outputs.FirstPartyAppDefinitionResponse> FirstPartyApps;
        /// <summary>
        /// The flighting ring for feature update.
        /// </summary>
        public readonly string? FlightingRing;
        /// <summary>
        /// The list of gallery apps to test along with user application.
        /// </summary>
        public readonly ImmutableArray<Outputs.GalleryAppDefinitionResponse> GalleryApps;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the baseline os and target os for inplace upgrade.
        /// </summary>
        public readonly Outputs.InplaceUpgradeOSInfoResponse? InplaceUpgradeOSPair;
        /// <summary>
        /// The metadata of Intune enrollment.
        /// </summary>
        public readonly Outputs.IntuneEnrollmentMetadataResponse? IntuneEnrollmentMetadata;
        /// <summary>
        /// Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// The UTC timestamp when the package was last modified.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the package.
        /// </summary>
        public readonly string PackageStatus;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Specifies the target OSs of specific OS Update types.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetOSInfoResponse> TargetOSList;
        /// <summary>
        /// OOB, functional or flow driven. Mapped to the data in 'tests' property.
        /// </summary>
        public readonly ImmutableArray<string> TestTypes;
        /// <summary>
        /// The detailed test information.
        /// </summary>
        public readonly ImmutableArray<Outputs.TestResponse> Tests;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The validation results. There's validation on package when it's created or updated.
        /// </summary>
        public readonly ImmutableArray<Outputs.PackageValidationResultResponse> ValidationResults;
        /// <summary>
        /// Application version
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetPackageResult(
            string applicationName,

            string? blobPath,

            string? draftPackageId,

            ImmutableArray<Outputs.FirstPartyAppDefinitionResponse> firstPartyApps,

            string? flightingRing,

            ImmutableArray<Outputs.GalleryAppDefinitionResponse> galleryApps,

            string id,

            Outputs.InplaceUpgradeOSInfoResponse? inplaceUpgradeOSPair,

            Outputs.IntuneEnrollmentMetadataResponse? intuneEnrollmentMetadata,

            bool isEnabled,

            string lastModifiedTime,

            string location,

            string name,

            string packageStatus,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.TargetOSInfoResponse> targetOSList,

            ImmutableArray<string> testTypes,

            ImmutableArray<Outputs.TestResponse> tests,

            string type,

            ImmutableArray<Outputs.PackageValidationResultResponse> validationResults,

            string version)
        {
            ApplicationName = applicationName;
            BlobPath = blobPath;
            DraftPackageId = draftPackageId;
            FirstPartyApps = firstPartyApps;
            FlightingRing = flightingRing;
            GalleryApps = galleryApps;
            Id = id;
            InplaceUpgradeOSPair = inplaceUpgradeOSPair;
            IntuneEnrollmentMetadata = intuneEnrollmentMetadata;
            IsEnabled = isEnabled;
            LastModifiedTime = lastModifiedTime;
            Location = location;
            Name = name;
            PackageStatus = packageStatus;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            TargetOSList = targetOSList;
            TestTypes = testTypes;
            Tests = tests;
            Type = type;
            ValidationResults = validationResults;
            Version = version;
        }
    }
}
