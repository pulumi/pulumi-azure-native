// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.TestBase.V20231101Preview
{
    /// <summary>
    /// The action of the command.
    /// </summary>
    [EnumType]
    public readonly struct Action : IEquatable<Action>
    {
        private readonly string _value;

        private Action(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Action Install { get; } = new Action("Install");
        public static Action Launch { get; } = new Action("Launch");
        public static Action Close { get; } = new Action("Close");
        public static Action Uninstall { get; } = new Action("Uninstall");
        public static Action Custom { get; } = new Action("Custom");
        public static Action FlowDrivenCustom { get; } = new Action("FlowDrivenCustom");

        public static bool operator ==(Action left, Action right) => left.Equals(right);
        public static bool operator !=(Action left, Action right) => !left.Equals(right);

        public static explicit operator string(Action value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Action other && Equals(other);
        public bool Equals(Action other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The architecture of a first party application of a Test Base Account.
    /// </summary>
    [EnumType]
    public readonly struct Architecture : IEquatable<Architecture>
    {
        private readonly string _value;

        private Architecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Architecture X86 { get; } = new Architecture("x86");
        public static Architecture X64 { get; } = new Architecture("x64");
        public static Architecture Arm64 { get; } = new Architecture("arm64");

        public static bool operator ==(Architecture left, Architecture right) => left.Equals(right);
        public static bool operator !=(Architecture left, Architecture right) => !left.Equals(right);

        public static explicit operator string(Architecture value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Architecture other && Equals(other);
        public bool Equals(Architecture other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of command content.
    /// </summary>
    [EnumType]
    public readonly struct ContentType : IEquatable<ContentType>
    {
        private readonly string _value;

        private ContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContentType Inline { get; } = new ContentType("Inline");
        public static ContentType File { get; } = new ContentType("File");
        public static ContentType Path { get; } = new ContentType("Path");

        public static bool operator ==(ContentType left, ContentType right) => left.Equals(right);
        public static bool operator !=(ContentType left, ContentType right) => !left.Equals(right);

        public static explicit operator string(ContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentType other && Equals(other);
        public bool Equals(ContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Credential type.
    /// </summary>
    [EnumType]
    public readonly struct CredentialType : IEquatable<CredentialType>
    {
        private readonly string _value;

        private CredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Username password credential for intune enrollment.
        /// </summary>
        public static CredentialType IntuneAccount { get; } = new CredentialType("IntuneAccount");

        public static bool operator ==(CredentialType left, CredentialType right) => left.Equals(right);
        public static bool operator !=(CredentialType left, CredentialType right) => !left.Equals(right);

        public static explicit operator string(CredentialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CredentialType other && Equals(other);
        public bool Equals(CredentialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source type.
    /// </summary>
    [EnumType]
    public readonly struct DraftPackageSourceType : IEquatable<DraftPackageSourceType>
    {
        private readonly string _value;

        private DraftPackageSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DraftPackageSourceType Native { get; } = new DraftPackageSourceType("Native");
        public static DraftPackageSourceType IntuneWin { get; } = new DraftPackageSourceType("IntuneWin");
        public static DraftPackageSourceType TestBasePackage { get; } = new DraftPackageSourceType("TestBasePackage");
        public static DraftPackageSourceType GalleryApp { get; } = new DraftPackageSourceType("GalleryApp");
        public static DraftPackageSourceType IntuneEnrollment { get; } = new DraftPackageSourceType("IntuneEnrollment");

        public static bool operator ==(DraftPackageSourceType left, DraftPackageSourceType right) => left.Equals(right);
        public static bool operator !=(DraftPackageSourceType left, DraftPackageSourceType right) => !left.Equals(right);

        public static explicit operator string(DraftPackageSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DraftPackageSourceType other && Equals(other);
        public bool Equals(DraftPackageSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Engagements : IEquatable<Engagements>
    {
        private readonly string _value;

        private Engagements(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Engagements MVI { get; } = new Engagements("MVI");
        public static Engagements MVP { get; } = new Engagements("MVP");
        public static Engagements SUVP { get; } = new Engagements("SUVP");
        public static Engagements MAPP { get; } = new Engagements("MAPP");
        public static Engagements Other { get; } = new Engagements("Other");

        public static bool operator ==(Engagements left, Engagements right) => left.Equals(right);
        public static bool operator !=(Engagements left, Engagements right) => !left.Equals(right);

        public static explicit operator string(Engagements value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Engagements other && Equals(other);
        public bool Equals(Engagements other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource type for file uploading.
    /// </summary>
    [EnumType]
    public readonly struct FileUploadResourceType : IEquatable<FileUploadResourceType>
    {
        private readonly string _value;

        private FileUploadResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Upload file for package onboarding.
        /// </summary>
        public static FileUploadResourceType Package { get; } = new FileUploadResourceType("Package");
        /// <summary>
        /// Upload VHD file for image onboarding.
        /// </summary>
        public static FileUploadResourceType VHD { get; } = new FileUploadResourceType("VHD");

        public static bool operator ==(FileUploadResourceType left, FileUploadResourceType right) => left.Equals(right);
        public static bool operator !=(FileUploadResourceType left, FileUploadResourceType right) => !left.Equals(right);

        public static explicit operator string(FileUploadResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileUploadResourceType other && Equals(other);
        public bool Equals(FileUploadResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom image architecture.
    /// </summary>
    [EnumType]
    public readonly struct ImageArchitecture : IEquatable<ImageArchitecture>
    {
        private readonly string _value;

        private ImageArchitecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// 64-bit architecture.
        /// </summary>
        public static ImageArchitecture X64 { get; } = new ImageArchitecture("x64");

        public static bool operator ==(ImageArchitecture left, ImageArchitecture right) => left.Equals(right);
        public static bool operator !=(ImageArchitecture left, ImageArchitecture right) => !left.Equals(right);

        public static explicit operator string(ImageArchitecture value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageArchitecture other && Equals(other);
        public bool Equals(ImageArchitecture other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom image OS state.
    /// </summary>
    [EnumType]
    public readonly struct ImageOSState : IEquatable<ImageOSState>
    {
        private readonly string _value;

        private ImageOSState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Sysprep generalization processed.
        /// </summary>
        public static ImageOSState Generalized { get; } = new ImageOSState("Generalized");
        /// <summary>
        /// Fully kept with user specified settings.
        /// </summary>
        public static ImageOSState Specialized { get; } = new ImageOSState("Specialized");

        public static bool operator ==(ImageOSState left, ImageOSState right) => left.Equals(right);
        public static bool operator !=(ImageOSState left, ImageOSState right) => !left.Equals(right);

        public static explicit operator string(ImageOSState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageOSState other && Equals(other);
        public bool Equals(ImageOSState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom image security type.
    /// </summary>
    [EnumType]
    public readonly struct ImageSecurityType : IEquatable<ImageSecurityType>
    {
        private readonly string _value;

        private ImageSecurityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard security type.
        /// </summary>
        public static ImageSecurityType Standard { get; } = new ImageSecurityType("Standard");
        /// <summary>
        /// Specify higher security level compared to Standard.
        /// </summary>
        public static ImageSecurityType TrustedLaunch { get; } = new ImageSecurityType("TrustedLaunch");

        public static bool operator ==(ImageSecurityType left, ImageSecurityType right) => left.Equals(right);
        public static bool operator !=(ImageSecurityType left, ImageSecurityType right) => !left.Equals(right);

        public static explicit operator string(ImageSecurityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageSecurityType other && Equals(other);
        public bool Equals(ImageSecurityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom image source type.
    /// </summary>
    [EnumType]
    public readonly struct ImageSource : IEquatable<ImageSource>
    {
        private readonly string _value;

        private ImageSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown image source type.
        /// </summary>
        public static ImageSource Unknown { get; } = new ImageSource("Unknown");
        /// <summary>
        /// Specify image onboarding through VHD.
        /// </summary>
        public static ImageSource VHD { get; } = new ImageSource("VHD");

        public static bool operator ==(ImageSource left, ImageSource right) => left.Equals(right);
        public static bool operator !=(ImageSource left, ImageSource right) => !left.Equals(right);

        public static explicit operator string(ImageSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageSource other && Equals(other);
        public bool Equals(ImageSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the first party applications should be inter-operated with user's application.
    /// </summary>
    [EnumType]
    public readonly struct InteropExecutionMode : IEquatable<InteropExecutionMode>
    {
        private readonly string _value;

        private InteropExecutionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User application will test with the first party applications. For out-of-box tests, additional test cases for first party applications will also be run.
        /// </summary>
        public static InteropExecutionMode FirstPartyAppWithTests { get; } = new InteropExecutionMode("firstPartyAppWithTests");
        /// <summary>
        /// User application will test with the first party applications.
        /// </summary>
        public static InteropExecutionMode FirstPartyApp { get; } = new InteropExecutionMode("firstPartyApp");

        public static bool operator ==(InteropExecutionMode left, InteropExecutionMode right) => left.Equals(right);
        public static bool operator !=(InteropExecutionMode left, InteropExecutionMode right) => !left.Equals(right);

        public static explicit operator string(InteropExecutionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InteropExecutionMode other && Equals(other);
        public bool Equals(InteropExecutionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Extract status.
    /// </summary>
    [EnumType]
    public readonly struct IntuneExtractStatus : IEquatable<IntuneExtractStatus>
    {
        private readonly string _value;

        private IntuneExtractStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntuneExtractStatus Ready { get; } = new IntuneExtractStatus("Ready");
        public static IntuneExtractStatus Uploading { get; } = new IntuneExtractStatus("Uploading");
        public static IntuneExtractStatus UploadFailed { get; } = new IntuneExtractStatus("UploadFailed");
        public static IntuneExtractStatus ExtractFailed { get; } = new IntuneExtractStatus("ExtractFailed");
        public static IntuneExtractStatus NoDependencyApp { get; } = new IntuneExtractStatus("NoDependencyApp");

        public static bool operator ==(IntuneExtractStatus left, IntuneExtractStatus right) => left.Equals(right);
        public static bool operator !=(IntuneExtractStatus left, IntuneExtractStatus right) => !left.Equals(right);

        public static explicit operator string(IntuneExtractStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntuneExtractStatus other && Equals(other);
        public bool Equals(IntuneExtractStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the tabs when creating / cloning / editing a package.
    /// </summary>
    [EnumType]
    public readonly struct PackageStudioTabs : IEquatable<PackageStudioTabs>
    {
        private readonly string _value;

        private PackageStudioTabs(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackageStudioTabs Unspecified { get; } = new PackageStudioTabs("Unspecified");
        public static PackageStudioTabs BasicsTab { get; } = new PackageStudioTabs("BasicsTab");
        public static PackageStudioTabs ConfigureTestTab { get; } = new PackageStudioTabs("ConfigureTestTab");
        public static PackageStudioTabs EditPackageTab { get; } = new PackageStudioTabs("EditPackageTab");
        public static PackageStudioTabs TestMatrixTab { get; } = new PackageStudioTabs("TestMatrixTab");
        public static PackageStudioTabs TagsTab { get; } = new PackageStudioTabs("TagsTab");
        public static PackageStudioTabs ReviewAndCreateTab { get; } = new PackageStudioTabs("ReviewAndCreateTab");

        public static bool operator ==(PackageStudioTabs left, PackageStudioTabs right) => left.Equals(right);
        public static bool operator !=(PackageStudioTabs left, PackageStudioTabs right) => !left.Equals(right);

        public static explicit operator string(PackageStudioTabs value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackageStudioTabs other && Equals(other);
        public bool Equals(PackageStudioTabs other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RequestTypes : IEquatable<RequestTypes>
    {
        private readonly string _value;

        private RequestTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestTypes PreReleaseAccess { get; } = new RequestTypes("PreReleaseAccess");

        public static bool operator ==(RequestTypes left, RequestTypes right) => left.Equals(right);
        public static bool operator !=(RequestTypes left, RequestTypes right) => !left.Equals(right);

        public static explicit operator string(RequestTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestTypes other && Equals(other);
        public bool Equals(RequestTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (either system assigned, or none).
    /// </summary>
    [EnumType]
    public readonly struct SystemAssignedServiceIdentityType : IEquatable<SystemAssignedServiceIdentityType>
    {
        private readonly string _value;

        private SystemAssignedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemAssignedServiceIdentityType None { get; } = new SystemAssignedServiceIdentityType("None");
        public static SystemAssignedServiceIdentityType SystemAssigned { get; } = new SystemAssignedServiceIdentityType("SystemAssigned");

        public static bool operator ==(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(SystemAssignedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemAssignedServiceIdentityType other && Equals(other);
        public bool Equals(SystemAssignedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the test.
    /// </summary>
    [EnumType]
    public readonly struct TestType : IEquatable<TestType>
    {
        private readonly string _value;

        private TestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TestType OutOfBoxTest { get; } = new TestType("OutOfBoxTest");
        public static TestType FunctionalTest { get; } = new TestType("FunctionalTest");
        public static TestType FlowDrivenTest { get; } = new TestType("FlowDrivenTest");

        public static bool operator ==(TestType left, TestType right) => left.Equals(right);
        public static bool operator !=(TestType left, TestType right) => !left.Equals(right);

        public static explicit operator string(TestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestType other && Equals(other);
        public bool Equals(TestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of this particular SKU.
    /// </summary>
    [EnumType]
    public readonly struct Tier : IEquatable<Tier>
    {
        private readonly string _value;

        private Tier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Tier Standard { get; } = new Tier("Standard");

        public static bool operator ==(Tier left, Tier right) => left.Equals(right);
        public static bool operator !=(Tier left, Tier right) => !left.Equals(right);

        public static explicit operator string(Tier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Tier other && Equals(other);
        public bool Equals(Tier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
