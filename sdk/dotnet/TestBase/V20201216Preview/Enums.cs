// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.TestBase.V20201216Preview
{
    /// <summary>
    /// The action of the command.
    /// </summary>
    [EnumType]
    public readonly struct Action : IEquatable<Action>
    {
        private readonly string _value;

        private Action(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Action Install { get; } = new Action("Install");
        public static Action Launch { get; } = new Action("Launch");
        public static Action Close { get; } = new Action("Close");
        public static Action Uninstall { get; } = new Action("Uninstall");
        public static Action Custom { get; } = new Action("Custom");

        public static bool operator ==(Action left, Action right) => left.Equals(right);
        public static bool operator !=(Action left, Action right) => !left.Equals(right);

        public static explicit operator string(Action value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Action other && Equals(other);
        public bool Equals(Action other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of command content.
    /// </summary>
    [EnumType]
    public readonly struct ContentType : IEquatable<ContentType>
    {
        private readonly string _value;

        private ContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContentType Inline { get; } = new ContentType("Inline");
        public static ContentType File { get; } = new ContentType("File");
        public static ContentType Path { get; } = new ContentType("Path");

        public static bool operator ==(ContentType left, ContentType right) => left.Equals(right);
        public static bool operator !=(ContentType left, ContentType right) => !left.Equals(right);

        public static explicit operator string(ContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentType other && Equals(other);
        public bool Equals(ContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the test.
    /// </summary>
    [EnumType]
    public readonly struct TestType : IEquatable<TestType>
    {
        private readonly string _value;

        private TestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TestType OutOfBoxTest { get; } = new TestType("OutOfBoxTest");
        public static TestType FunctionalTest { get; } = new TestType("FunctionalTest");

        public static bool operator ==(TestType left, TestType right) => left.Equals(right);
        public static bool operator !=(TestType left, TestType right) => !left.Equals(right);

        public static explicit operator string(TestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestType other && Equals(other);
        public bool Equals(TestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of this particular SKU.
    /// </summary>
    [EnumType]
    public readonly struct Tier : IEquatable<Tier>
    {
        private readonly string _value;

        private Tier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Tier Standard { get; } = new Tier("Standard");

        public static bool operator ==(Tier left, Tier right) => left.Equals(right);
        public static bool operator !=(Tier left, Tier right) => !left.Equals(right);

        public static explicit operator string(Tier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Tier other && Equals(other);
        public bool Equals(Tier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
