// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TestBase.V20201216Preview
{
    [Obsolete(@"Version 2020-12-16-preview will be removed in v2 of the provider.")]
    public static class GetCustomerEvent
    {
        /// <summary>
        /// The Customer Notification Event resource.
        /// </summary>
        public static Task<GetCustomerEventResult> InvokeAsync(GetCustomerEventArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCustomerEventResult>("azure-native:testbase/v20201216preview:getCustomerEvent", args ?? new GetCustomerEventArgs(), options.WithDefaults());

        /// <summary>
        /// The Customer Notification Event resource.
        /// </summary>
        public static Output<GetCustomerEventResult> Invoke(GetCustomerEventInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCustomerEventResult>("azure-native:testbase/v20201216preview:getCustomerEvent", args ?? new GetCustomerEventInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomerEventArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Customer event.
        /// </summary>
        [Input("customerEventName", required: true)]
        public string CustomerEventName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public string TestBaseAccountName { get; set; } = null!;

        public GetCustomerEventArgs()
        {
        }
    }

    public sealed class GetCustomerEventInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Customer event.
        /// </summary>
        [Input("customerEventName", required: true)]
        public Input<string> CustomerEventName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public Input<string> TestBaseAccountName { get; set; } = null!;

        public GetCustomerEventInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCustomerEventResult
    {
        /// <summary>
        /// The name of the event subscribed to.
        /// </summary>
        public readonly string EventName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The notification event receivers.
        /// </summary>
        public readonly ImmutableArray<Outputs.NotificationEventReceiverResponse> Receivers;
        /// <summary>
        /// The system metadata relating to this resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCustomerEventResult(
            string eventName,

            string id,

            string name,

            ImmutableArray<Outputs.NotificationEventReceiverResponse> receivers,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            EventName = eventName;
            Id = id;
            Name = name;
            Receivers = receivers;
            SystemData = systemData;
            Type = type;
        }
    }
}
