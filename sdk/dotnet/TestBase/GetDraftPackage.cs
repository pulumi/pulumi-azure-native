// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.TestBase
{
    public static class GetDraftPackage
    {
        /// <summary>
        /// Gets a Test Base Draft Package.
        /// Azure REST API version: 2023-11-01-preview.
        /// </summary>
        public static Task<GetDraftPackageResult> InvokeAsync(GetDraftPackageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDraftPackageResult>("azure-native:testbase:getDraftPackage", args ?? new GetDraftPackageArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Test Base Draft Package.
        /// Azure REST API version: 2023-11-01-preview.
        /// </summary>
        public static Output<GetDraftPackageResult> Invoke(GetDraftPackageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDraftPackageResult>("azure-native:testbase:getDraftPackage", args ?? new GetDraftPackageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDraftPackageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Draft Package.
        /// </summary>
        [Input("draftPackageName", required: true)]
        public string DraftPackageName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public string TestBaseAccountName { get; set; } = null!;

        public GetDraftPackageArgs()
        {
        }
        public static new GetDraftPackageArgs Empty => new GetDraftPackageArgs();
    }

    public sealed class GetDraftPackageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name of the Test Base Draft Package.
        /// </summary>
        [Input("draftPackageName", required: true)]
        public Input<string> DraftPackageName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource name of the Test Base Account.
        /// </summary>
        [Input("testBaseAccountName", required: true)]
        public Input<string> TestBaseAccountName { get; set; } = null!;

        public GetDraftPackageInvokeArgs()
        {
        }
        public static new GetDraftPackageInvokeArgs Empty => new GetDraftPackageInvokeArgs();
    }


    [OutputType]
    public sealed class GetDraftPackageResult
    {
        /// <summary>
        /// The name of the app file.
        /// </summary>
        public readonly string? AppFileName;
        /// <summary>
        /// Application name
        /// </summary>
        public readonly string? ApplicationName;
        /// <summary>
        /// Comments added by user.
        /// </summary>
        public readonly string? Comments;
        /// <summary>
        /// The relative path of the folder hosting package files.
        /// </summary>
        public readonly string DraftPackagePath;
        /// <summary>
        /// Specifies whether this draft package is used to edit a package.
        /// </summary>
        public readonly bool? EditPackage;
        /// <summary>
        /// The executable launch command for script auto-fill. Will be used to run the application.
        /// </summary>
        public readonly string? ExecutableLaunchCommand;
        /// <summary>
        /// The list of first party applications to test along with user application.
        /// </summary>
        public readonly ImmutableArray<Outputs.FirstPartyAppDefinitionResponse> FirstPartyApps;
        /// <summary>
        /// The flighting ring for feature update.
        /// </summary>
        public readonly string? FlightingRing;
        /// <summary>
        /// The list of gallery apps to test along with user application.
        /// </summary>
        public readonly ImmutableArray<Outputs.GalleryAppDefinitionResponse> GalleryApps;
        /// <summary>
        /// The highlight files in the package.
        /// </summary>
        public readonly ImmutableArray<Outputs.HighlightedFileResponse> HighlightedFiles;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the baseline os and target os for inplace upgrade.
        /// </summary>
        public readonly Outputs.InplaceUpgradeOSInfoResponse? InplaceUpgradeOSPair;
        /// <summary>
        /// The metadata of Intune enrollment.
        /// </summary>
        public readonly Outputs.IntuneEnrollmentMetadataResponse? IntuneEnrollmentMetadata;
        /// <summary>
        /// Metadata used to generate draft package folder and scripts.
        /// </summary>
        public readonly Outputs.DraftPackageIntuneAppMetadataResponse? IntuneMetadata;
        /// <summary>
        /// The UTC timestamp when the package was last modified.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the package id from which the draft package copied.
        /// </summary>
        public readonly string? PackageId;
        /// <summary>
        /// Tags of the package to be created.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? PackageTags;
        /// <summary>
        /// The process name for script auto-fill. Will be used to identify the application process.
        /// </summary>
        public readonly string? ProcessName;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The source type.
        /// </summary>
        public readonly string? SourceType;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tab state.
        /// </summary>
        public readonly Outputs.TabStateResponse? TabState;
        /// <summary>
        /// Specifies the target OSs of specific OS Update types.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetOSInfoResponse> TargetOSList;
        /// <summary>
        /// OOB, functional or flow driven. Mapped to the data in 'tests' property.
        /// </summary>
        public readonly ImmutableArray<string> TestTypes;
        /// <summary>
        /// The detailed test information.
        /// </summary>
        public readonly ImmutableArray<Outputs.TestResponse> Tests;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Indicates whether user choose to enable script auto-fill.
        /// </summary>
        public readonly bool? UseAutofill;
        /// <summary>
        /// Specifies whether a sample package should be used instead of the one uploaded by the user.
        /// </summary>
        public readonly bool? UseSample;
        /// <summary>
        /// Application version
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// The relative path for a temporarily folder for package creation work.
        /// </summary>
        public readonly string WorkingPath;

        [OutputConstructor]
        private GetDraftPackageResult(
            string? appFileName,

            string? applicationName,

            string? comments,

            string draftPackagePath,

            bool? editPackage,

            string? executableLaunchCommand,

            ImmutableArray<Outputs.FirstPartyAppDefinitionResponse> firstPartyApps,

            string? flightingRing,

            ImmutableArray<Outputs.GalleryAppDefinitionResponse> galleryApps,

            ImmutableArray<Outputs.HighlightedFileResponse> highlightedFiles,

            string id,

            Outputs.InplaceUpgradeOSInfoResponse? inplaceUpgradeOSPair,

            Outputs.IntuneEnrollmentMetadataResponse? intuneEnrollmentMetadata,

            Outputs.DraftPackageIntuneAppMetadataResponse? intuneMetadata,

            string lastModifiedTime,

            string name,

            string? packageId,

            ImmutableDictionary<string, string>? packageTags,

            string? processName,

            string provisioningState,

            string? sourceType,

            Outputs.SystemDataResponse systemData,

            Outputs.TabStateResponse? tabState,

            ImmutableArray<Outputs.TargetOSInfoResponse> targetOSList,

            ImmutableArray<string> testTypes,

            ImmutableArray<Outputs.TestResponse> tests,

            string type,

            bool? useAutofill,

            bool? useSample,

            string? version,

            string workingPath)
        {
            AppFileName = appFileName;
            ApplicationName = applicationName;
            Comments = comments;
            DraftPackagePath = draftPackagePath;
            EditPackage = editPackage;
            ExecutableLaunchCommand = executableLaunchCommand;
            FirstPartyApps = firstPartyApps;
            FlightingRing = flightingRing;
            GalleryApps = galleryApps;
            HighlightedFiles = highlightedFiles;
            Id = id;
            InplaceUpgradeOSPair = inplaceUpgradeOSPair;
            IntuneEnrollmentMetadata = intuneEnrollmentMetadata;
            IntuneMetadata = intuneMetadata;
            LastModifiedTime = lastModifiedTime;
            Name = name;
            PackageId = packageId;
            PackageTags = packageTags;
            ProcessName = processName;
            ProvisioningState = provisioningState;
            SourceType = sourceType;
            SystemData = systemData;
            TabState = tabState;
            TargetOSList = targetOSList;
            TestTypes = testTypes;
            Tests = tests;
            Type = type;
            UseAutofill = useAutofill;
            UseSample = useSample;
            Version = version;
            WorkingPath = workingPath;
        }
    }
}
