// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HDInsight.V20231101Preview.Inputs
{

    /// <summary>
    /// Cluster profile.
    /// </summary>
    public sealed class ClusterProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
        /// </summary>
        [Input("authorizationProfile", required: true)]
        public Input<Inputs.AuthorizationProfileArgs> AuthorizationProfile { get; set; } = null!;

        /// <summary>
        /// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
        /// </summary>
        [Input("autoscaleProfile")]
        public Input<Inputs.AutoscaleProfileArgs>? AutoscaleProfile { get; set; }

        /// <summary>
        /// Cluster access profile.
        /// </summary>
        [Input("clusterAccessProfile")]
        public Input<Inputs.ClusterAccessProfileArgs>? ClusterAccessProfile { get; set; }

        /// <summary>
        /// Version with 3/4 part.
        /// </summary>
        [Input("clusterVersion", required: true)]
        public Input<string> ClusterVersion { get; set; } = null!;

        /// <summary>
        /// The Flink cluster profile.
        /// </summary>
        [Input("flinkProfile")]
        public Input<Inputs.FlinkProfileArgs>? FlinkProfile { get; set; }

        /// <summary>
        /// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
        /// </summary>
        [Input("identityProfile")]
        public Input<Inputs.IdentityProfileArgs>? IdentityProfile { get; set; }

        /// <summary>
        /// The Kafka cluster profile.
        /// </summary>
        [Input("kafkaProfile")]
        public Input<Inputs.KafkaProfileArgs>? KafkaProfile { get; set; }

        /// <summary>
        /// LLAP cluster profile.
        /// </summary>
        [Input("llapProfile")]
        public Input<object>? LlapProfile { get; set; }

        /// <summary>
        /// Cluster log analytics profile to enable or disable OMS agent for cluster.
        /// </summary>
        [Input("logAnalyticsProfile")]
        public Input<Inputs.ClusterLogAnalyticsProfileArgs>? LogAnalyticsProfile { get; set; }

        /// <summary>
        /// Version with three part.
        /// </summary>
        [Input("ossVersion", required: true)]
        public Input<string> OssVersion { get; set; } = null!;

        /// <summary>
        /// Cluster Prometheus profile.
        /// </summary>
        [Input("prometheusProfile")]
        public Input<Inputs.ClusterPrometheusProfileArgs>? PrometheusProfile { get; set; }

        /// <summary>
        /// Cluster Ranger plugin profile.
        /// </summary>
        [Input("rangerPluginProfile")]
        public Input<Inputs.ClusterRangerPluginProfileArgs>? RangerPluginProfile { get; set; }

        /// <summary>
        /// The ranger cluster profile.
        /// </summary>
        [Input("rangerProfile")]
        public Input<Inputs.RangerProfileArgs>? RangerProfile { get; set; }

        [Input("scriptActionProfiles")]
        private InputList<Inputs.ScriptActionProfileArgs>? _scriptActionProfiles;

        /// <summary>
        /// The script action profile list.
        /// </summary>
        public InputList<Inputs.ScriptActionProfileArgs> ScriptActionProfiles
        {
            get => _scriptActionProfiles ?? (_scriptActionProfiles = new InputList<Inputs.ScriptActionProfileArgs>());
            set => _scriptActionProfiles = value;
        }

        /// <summary>
        /// The cluster secret profile.
        /// </summary>
        [Input("secretsProfile")]
        public Input<Inputs.SecretsProfileArgs>? SecretsProfile { get; set; }

        [Input("serviceConfigsProfiles")]
        private InputList<Inputs.ClusterServiceConfigsProfileArgs>? _serviceConfigsProfiles;

        /// <summary>
        /// The service configs profiles.
        /// </summary>
        public InputList<Inputs.ClusterServiceConfigsProfileArgs> ServiceConfigsProfiles
        {
            get => _serviceConfigsProfiles ?? (_serviceConfigsProfiles = new InputList<Inputs.ClusterServiceConfigsProfileArgs>());
            set => _serviceConfigsProfiles = value;
        }

        /// <summary>
        /// The spark cluster profile.
        /// </summary>
        [Input("sparkProfile")]
        public Input<Inputs.SparkProfileArgs>? SparkProfile { get; set; }

        /// <summary>
        /// Ssh profile for the cluster.
        /// </summary>
        [Input("sshProfile")]
        public Input<Inputs.SshProfileArgs>? SshProfile { get; set; }

        /// <summary>
        /// Stub cluster profile.
        /// </summary>
        [Input("stubProfile")]
        public Input<object>? StubProfile { get; set; }

        /// <summary>
        /// Trino Cluster profile.
        /// </summary>
        [Input("trinoProfile")]
        public Input<Inputs.TrinoProfileArgs>? TrinoProfile { get; set; }

        public ClusterProfileArgs()
        {
        }
        public static new ClusterProfileArgs Empty => new ClusterProfileArgs();
    }
}
