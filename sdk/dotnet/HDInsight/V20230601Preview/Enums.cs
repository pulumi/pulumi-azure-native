// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HDInsight.V20230601Preview
{
    /// <summary>
    /// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
    /// </summary>
    [EnumType]
    public readonly struct AutoscaleType : IEquatable<AutoscaleType>
    {
        private readonly string _value;

        private AutoscaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoscaleType ScheduleBased { get; } = new AutoscaleType("ScheduleBased");
        public static AutoscaleType LoadBased { get; } = new AutoscaleType("LoadBased");

        public static bool operator ==(AutoscaleType left, AutoscaleType right) => left.Equals(right);
        public static bool operator !=(AutoscaleType left, AutoscaleType right) => !left.Equals(right);

        public static explicit operator string(AutoscaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoscaleType other && Equals(other);
        public bool Equals(AutoscaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The comparison operator.
    /// </summary>
    [EnumType]
    public readonly struct ComparisonOperator : IEquatable<ComparisonOperator>
    {
        private readonly string _value;

        private ComparisonOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ComparisonOperator GreaterThan { get; } = new ComparisonOperator("greaterThan");
        public static ComparisonOperator GreaterThanOrEqual { get; } = new ComparisonOperator("greaterThanOrEqual");
        public static ComparisonOperator LessThan { get; } = new ComparisonOperator("lessThan");
        public static ComparisonOperator LessThanOrEqual { get; } = new ComparisonOperator("lessThanOrEqual");

        public static bool operator ==(ComparisonOperator left, ComparisonOperator right) => left.Equals(right);
        public static bool operator !=(ComparisonOperator left, ComparisonOperator right) => !left.Equals(right);

        public static explicit operator string(ComparisonOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ComparisonOperator other && Equals(other);
        public bool Equals(ComparisonOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
    /// </summary>
    [EnumType]
    public readonly struct ContentEncoding : IEquatable<ContentEncoding>
    {
        private readonly string _value;

        private ContentEncoding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContentEncoding Base64 { get; } = new ContentEncoding("Base64");
        public static ContentEncoding None { get; } = new ContentEncoding("None");

        public static bool operator ==(ContentEncoding left, ContentEncoding right) => left.Equals(right);
        public static bool operator !=(ContentEncoding left, ContentEncoding right) => !left.Equals(right);

        public static explicit operator string(ContentEncoding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentEncoding other && Equals(other);
        public bool Equals(ContentEncoding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of key vault object: secret, key or certificate.
    /// </summary>
    [EnumType]
    public readonly struct KeyVaultObjectType : IEquatable<KeyVaultObjectType>
    {
        private readonly string _value;

        private KeyVaultObjectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyVaultObjectType Key { get; } = new KeyVaultObjectType("Key");
        public static KeyVaultObjectType Secret { get; } = new KeyVaultObjectType("Secret");
        public static KeyVaultObjectType Certificate { get; } = new KeyVaultObjectType("Certificate");

        public static bool operator ==(KeyVaultObjectType left, KeyVaultObjectType right) => left.Equals(right);
        public static bool operator !=(KeyVaultObjectType left, KeyVaultObjectType right) => !left.Equals(right);

        public static explicit operator string(KeyVaultObjectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyVaultObjectType other && Equals(other);
        public bool Equals(KeyVaultObjectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action type.
    /// </summary>
    [EnumType]
    public readonly struct ScaleActionType : IEquatable<ScaleActionType>
    {
        private readonly string _value;

        private ScaleActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleActionType Scaleup { get; } = new ScaleActionType("scaleup");
        public static ScaleActionType Scaledown { get; } = new ScaleActionType("scaledown");

        public static bool operator ==(ScaleActionType left, ScaleActionType right) => left.Equals(right);
        public static bool operator !=(ScaleActionType left, ScaleActionType right) => !left.Equals(right);

        public static explicit operator string(ScaleActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleActionType other && Equals(other);
        public bool Equals(ScaleActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ScheduleDay : IEquatable<ScheduleDay>
    {
        private readonly string _value;

        private ScheduleDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleDay Sunday { get; } = new ScheduleDay("Sunday");
        public static ScheduleDay Monday { get; } = new ScheduleDay("Monday");
        public static ScheduleDay Tuesday { get; } = new ScheduleDay("Tuesday");
        public static ScheduleDay Wednesday { get; } = new ScheduleDay("Wednesday");
        public static ScheduleDay Thursday { get; } = new ScheduleDay("Thursday");
        public static ScheduleDay Friday { get; } = new ScheduleDay("Friday");
        public static ScheduleDay Saturday { get; } = new ScheduleDay("Saturday");

        public static bool operator ==(ScheduleDay left, ScheduleDay right) => left.Equals(right);
        public static bool operator !=(ScheduleDay left, ScheduleDay right) => !left.Equals(right);

        public static explicit operator string(ScheduleDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleDay other && Equals(other);
        public bool Equals(ScheduleDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
