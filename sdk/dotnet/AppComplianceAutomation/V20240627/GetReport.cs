// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppComplianceAutomation.V20240627
{
    public static class GetReport
    {
        /// <summary>
        /// Get the AppComplianceAutomation report and its properties.
        /// </summary>
        public static Task<GetReportResult> InvokeAsync(GetReportArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReportResult>("azure-native:appcomplianceautomation/v20240627:getReport", args ?? new GetReportArgs(), options.WithDefaults());

        /// <summary>
        /// Get the AppComplianceAutomation report and its properties.
        /// </summary>
        public static Output<GetReportResult> Invoke(GetReportInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReportResult>("azure-native:appcomplianceautomation/v20240627:getReport", args ?? new GetReportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReportArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public string ReportName { get; set; } = null!;

        public GetReportArgs()
        {
        }
        public static new GetReportArgs Empty => new GetReportArgs();
    }

    public sealed class GetReportInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        public GetReportInvokeArgs()
        {
        }
        public static new GetReportInvokeArgs Empty => new GetReportInvokeArgs();
    }


    [OutputType]
    public sealed class GetReportResult
    {
        /// <summary>
        /// List of synchronized certification records.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertSyncRecordResponse> CertRecords;
        /// <summary>
        /// Report compliance status.
        /// </summary>
        public readonly Outputs.ReportComplianceStatusResponse ComplianceStatus;
        /// <summary>
        /// List of report error codes.
        /// </summary>
        public readonly ImmutableArray<string> Errors;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Report last collection trigger time.
        /// </summary>
        public readonly string LastTriggerTime;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Report next collection trigger time.
        /// </summary>
        public readonly string NextTriggerTime;
        /// <summary>
        /// A list of comma-separated offerGuids indicates a series of offerGuids that map to the report. For example, "00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002" and "00000000-0000-0000-0000-000000000003".
        /// </summary>
        public readonly string? OfferGuid;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of resource data.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceMetadataResponse> Resources;
        /// <summary>
        /// Report status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The information of 'bring your own storage' binding to the report
        /// </summary>
        public readonly Outputs.StorageInfoResponse? StorageInfo;
        /// <summary>
        /// List of subscription Ids.
        /// </summary>
        public readonly ImmutableArray<string> Subscriptions;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Report's tenant id.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Report collection trigger time's time zone, the available list can be obtained by executing "Get-TimeZone -ListAvailable" in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time".
        /// </summary>
        public readonly string TimeZone;
        /// <summary>
        /// Report collection trigger time.
        /// </summary>
        public readonly string TriggerTime;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetReportResult(
            ImmutableArray<Outputs.CertSyncRecordResponse> certRecords,

            Outputs.ReportComplianceStatusResponse complianceStatus,

            ImmutableArray<string> errors,

            string id,

            string lastTriggerTime,

            string name,

            string nextTriggerTime,

            string? offerGuid,

            string provisioningState,

            ImmutableArray<Outputs.ResourceMetadataResponse> resources,

            string status,

            Outputs.StorageInfoResponse? storageInfo,

            ImmutableArray<string> subscriptions,

            Outputs.SystemDataResponse systemData,

            string tenantId,

            string timeZone,

            string triggerTime,

            string type)
        {
            CertRecords = certRecords;
            ComplianceStatus = complianceStatus;
            Errors = errors;
            Id = id;
            LastTriggerTime = lastTriggerTime;
            Name = name;
            NextTriggerTime = nextTriggerTime;
            OfferGuid = offerGuid;
            ProvisioningState = provisioningState;
            Resources = resources;
            Status = status;
            StorageInfo = storageInfo;
            Subscriptions = subscriptions;
            SystemData = systemData;
            TenantId = tenantId;
            TimeZone = timeZone;
            TriggerTime = triggerTime;
            Type = type;
        }
    }
}
