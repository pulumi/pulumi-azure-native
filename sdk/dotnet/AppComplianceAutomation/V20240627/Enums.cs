// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AppComplianceAutomation.V20240627
{
    /// <summary>
    /// content type
    /// </summary>
    [EnumType]
    public readonly struct ContentType : IEquatable<ContentType>
    {
        private readonly string _value;

        private ContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The content type is application/json.
        /// </summary>
        public static ContentType ApplicationJson { get; } = new ContentType("application/json");

        public static bool operator ==(ContentType left, ContentType right) => left.Equals(right);
        public static bool operator !=(ContentType left, ContentType right) => !left.Equals(right);

        public static explicit operator string(ContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentType other && Equals(other);
        public bool Equals(ContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether to enable ssl verification
    /// </summary>
    [EnumType]
    public readonly struct EnableSslVerification : IEquatable<EnableSslVerification>
    {
        private readonly string _value;

        private EnableSslVerification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The ssl verification is enabled.
        /// </summary>
        public static EnableSslVerification True { get; } = new EnableSslVerification("true");
        /// <summary>
        /// The ssl verification is not enabled.
        /// </summary>
        public static EnableSslVerification False { get; } = new EnableSslVerification("false");

        public static bool operator ==(EnableSslVerification left, EnableSslVerification right) => left.Equals(right);
        public static bool operator !=(EnableSslVerification left, EnableSslVerification right) => !left.Equals(right);

        public static explicit operator string(EnableSslVerification value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableSslVerification other && Equals(other);
        public bool Equals(EnableSslVerification other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Evidence type.
    /// </summary>
    [EnumType]
    public readonly struct EvidenceType : IEquatable<EvidenceType>
    {
        private readonly string _value;

        private EvidenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The evidence is a file.
        /// </summary>
        public static EvidenceType File { get; } = new EvidenceType("File");
        /// <summary>
        /// The evidence auto collected by App Compliance Automation.
        /// </summary>
        public static EvidenceType AutoCollectedEvidence { get; } = new EvidenceType("AutoCollectedEvidence");
        /// <summary>
        /// The evidence is data.
        /// </summary>
        public static EvidenceType Data { get; } = new EvidenceType("Data");

        public static bool operator ==(EvidenceType left, EvidenceType right) => left.Equals(right);
        public static bool operator !=(EvidenceType left, EvidenceType right) => !left.Equals(right);

        public static explicit operator string(EvidenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EvidenceType other && Equals(other);
        public bool Equals(EvidenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// notification event.
    /// </summary>
    [EnumType]
    public readonly struct NotificationEvent : IEquatable<NotificationEvent>
    {
        private readonly string _value;

        private NotificationEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The subscribed report's snapshot is successfully generated.
        /// </summary>
        public static NotificationEvent Generate_snapshot_success { get; } = new NotificationEvent("generate_snapshot_success");
        /// <summary>
        /// The subscribed report's snapshot is failed to generate.
        /// </summary>
        public static NotificationEvent Generate_snapshot_failed { get; } = new NotificationEvent("generate_snapshot_failed");
        /// <summary>
        /// The subscribed report failed while collecting the assessments.
        /// </summary>
        public static NotificationEvent Assessment_failure { get; } = new NotificationEvent("assessment_failure");
        /// <summary>
        /// The subscribed report's configuration is changed.
        /// </summary>
        public static NotificationEvent Report_configuration_changes { get; } = new NotificationEvent("report_configuration_changes");
        /// <summary>
        /// The subscribed report is deleted.
        /// </summary>
        public static NotificationEvent Report_deletion { get; } = new NotificationEvent("report_deletion");

        public static bool operator ==(NotificationEvent left, NotificationEvent right) => left.Equals(right);
        public static bool operator !=(NotificationEvent left, NotificationEvent right) => !left.Equals(right);

        public static explicit operator string(NotificationEvent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationEvent other && Equals(other);
        public bool Equals(NotificationEvent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource Origin.
    /// </summary>
    [EnumType]
    public readonly struct ResourceOrigin : IEquatable<ResourceOrigin>
    {
        private readonly string _value;

        private ResourceOrigin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The resource is from Azure.
        /// </summary>
        public static ResourceOrigin Azure { get; } = new ResourceOrigin("Azure");
        /// <summary>
        /// The resource is from AWS.
        /// </summary>
        public static ResourceOrigin AWS { get; } = new ResourceOrigin("AWS");
        /// <summary>
        /// The resource is from GCP.
        /// </summary>
        public static ResourceOrigin GCP { get; } = new ResourceOrigin("GCP");

        public static bool operator ==(ResourceOrigin left, ResourceOrigin right) => left.Equals(right);
        public static bool operator !=(ResourceOrigin left, ResourceOrigin right) => !left.Equals(right);

        public static explicit operator string(ResourceOrigin value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceOrigin other && Equals(other);
        public bool Equals(ResourceOrigin other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether to send notification under any event.
    /// </summary>
    [EnumType]
    public readonly struct SendAllEvents : IEquatable<SendAllEvents>
    {
        private readonly string _value;

        private SendAllEvents(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Need send notification under any event.
        /// </summary>
        public static SendAllEvents True { get; } = new SendAllEvents("true");
        /// <summary>
        /// No need to send notification under any event.
        /// </summary>
        public static SendAllEvents False { get; } = new SendAllEvents("false");

        public static bool operator ==(SendAllEvents left, SendAllEvents right) => left.Equals(right);
        public static bool operator !=(SendAllEvents left, SendAllEvents right) => !left.Equals(right);

        public static explicit operator string(SendAllEvents value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SendAllEvents other && Equals(other);
        public bool Equals(SendAllEvents other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether to update webhookKey.
    /// </summary>
    [EnumType]
    public readonly struct UpdateWebhookKey : IEquatable<UpdateWebhookKey>
    {
        private readonly string _value;

        private UpdateWebhookKey(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Need update the webhook key.
        /// </summary>
        public static UpdateWebhookKey True { get; } = new UpdateWebhookKey("true");
        /// <summary>
        /// No need to update the webhook key.
        /// </summary>
        public static UpdateWebhookKey False { get; } = new UpdateWebhookKey("false");

        public static bool operator ==(UpdateWebhookKey left, UpdateWebhookKey right) => left.Equals(right);
        public static bool operator !=(UpdateWebhookKey left, UpdateWebhookKey right) => !left.Equals(right);

        public static explicit operator string(UpdateWebhookKey value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpdateWebhookKey other && Equals(other);
        public bool Equals(UpdateWebhookKey other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Webhook status.
    /// </summary>
    [EnumType]
    public readonly struct WebhookStatus : IEquatable<WebhookStatus>
    {
        private readonly string _value;

        private WebhookStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The webhook is enabled.
        /// </summary>
        public static WebhookStatus Enabled { get; } = new WebhookStatus("Enabled");
        /// <summary>
        /// The webhook is disabled.
        /// </summary>
        public static WebhookStatus Disabled { get; } = new WebhookStatus("Disabled");

        public static bool operator ==(WebhookStatus left, WebhookStatus right) => left.Equals(right);
        public static bool operator !=(WebhookStatus left, WebhookStatus right) => !left.Equals(right);

        public static explicit operator string(WebhookStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebhookStatus other && Equals(other);
        public bool Equals(WebhookStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
