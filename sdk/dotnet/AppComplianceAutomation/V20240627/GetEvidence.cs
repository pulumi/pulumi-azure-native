// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppComplianceAutomation.V20240627
{
    public static class GetEvidence
    {
        /// <summary>
        /// Get the evidence metadata
        /// </summary>
        public static Task<GetEvidenceResult> InvokeAsync(GetEvidenceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvidenceResult>("azure-native:appcomplianceautomation/v20240627:getEvidence", args ?? new GetEvidenceArgs(), options.WithDefaults());

        /// <summary>
        /// Get the evidence metadata
        /// </summary>
        public static Output<GetEvidenceResult> Invoke(GetEvidenceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvidenceResult>("azure-native:appcomplianceautomation/v20240627:getEvidence", args ?? new GetEvidenceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvidenceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The evidence name.
        /// </summary>
        [Input("evidenceName", required: true)]
        public string EvidenceName { get; set; } = null!;

        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public string ReportName { get; set; } = null!;

        public GetEvidenceArgs()
        {
        }
        public static new GetEvidenceArgs Empty => new GetEvidenceArgs();
    }

    public sealed class GetEvidenceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The evidence name.
        /// </summary>
        [Input("evidenceName", required: true)]
        public Input<string> EvidenceName { get; set; } = null!;

        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        public GetEvidenceInvokeArgs()
        {
        }
        public static new GetEvidenceInvokeArgs Empty => new GetEvidenceInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvidenceResult
    {
        /// <summary>
        /// Control id.
        /// </summary>
        public readonly string? ControlId;
        /// <summary>
        /// Evidence type.
        /// </summary>
        public readonly string? EvidenceType;
        /// <summary>
        /// Extra data considered as evidence.
        /// </summary>
        public readonly string? ExtraData;
        /// <summary>
        /// The path of the file in storage.
        /// </summary>
        public readonly string FilePath;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Responsibility id.
        /// </summary>
        public readonly string? ResponsibilityId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEvidenceResult(
            string? controlId,

            string? evidenceType,

            string? extraData,

            string filePath,

            string id,

            string name,

            string provisioningState,

            string? responsibilityId,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            ControlId = controlId;
            EvidenceType = evidenceType;
            ExtraData = extraData;
            FilePath = filePath;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            ResponsibilityId = responsibilityId;
            SystemData = systemData;
            Type = type;
        }
    }
}
