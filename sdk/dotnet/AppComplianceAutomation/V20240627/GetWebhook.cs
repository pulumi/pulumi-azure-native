// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppComplianceAutomation.V20240627
{
    public static class GetWebhook
    {
        /// <summary>
        /// Get the AppComplianceAutomation webhook and its properties.
        /// </summary>
        public static Task<GetWebhookResult> InvokeAsync(GetWebhookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebhookResult>("azure-native:appcomplianceautomation/v20240627:getWebhook", args ?? new GetWebhookArgs(), options.WithDefaults());

        /// <summary>
        /// Get the AppComplianceAutomation webhook and its properties.
        /// </summary>
        public static Output<GetWebhookResult> Invoke(GetWebhookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebhookResult>("azure-native:appcomplianceautomation/v20240627:getWebhook", args ?? new GetWebhookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebhookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public string ReportName { get; set; } = null!;

        /// <summary>
        /// Webhook Name.
        /// </summary>
        [Input("webhookName", required: true)]
        public string WebhookName { get; set; } = null!;

        public GetWebhookArgs()
        {
        }
        public static new GetWebhookArgs Empty => new GetWebhookArgs();
    }

    public sealed class GetWebhookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        /// <summary>
        /// Webhook Name.
        /// </summary>
        [Input("webhookName", required: true)]
        public Input<string> WebhookName { get; set; } = null!;

        public GetWebhookInvokeArgs()
        {
        }
        public static new GetWebhookInvokeArgs Empty => new GetWebhookInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebhookResult
    {
        /// <summary>
        /// content type
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// webhook deliveryStatus
        /// </summary>
        public readonly string DeliveryStatus;
        /// <summary>
        /// whether to enable ssl verification
        /// </summary>
        public readonly string? EnableSslVerification;
        /// <summary>
        /// under which event notification should be sent.
        /// </summary>
        public readonly ImmutableArray<string> Events;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// webhook payload url
        /// </summary>
        public readonly string? PayloadUrl;
        /// <summary>
        /// Azure Resource Provisioning State
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// whether to send notification under any event.
        /// </summary>
        public readonly string? SendAllEvents;
        /// <summary>
        /// Webhook status.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tenant id.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// whether to update webhookKey.
        /// </summary>
        public readonly string? UpdateWebhookKey;
        /// <summary>
        /// Webhook id in database.
        /// </summary>
        public readonly string WebhookId;
        /// <summary>
        /// webhook secret token. If not set, this field value is null; otherwise, please set a string value.
        /// </summary>
        public readonly string? WebhookKey;
        /// <summary>
        /// whether webhookKey is enabled.
        /// </summary>
        public readonly string WebhookKeyEnabled;

        [OutputConstructor]
        private GetWebhookResult(
            string? contentType,

            string deliveryStatus,

            string? enableSslVerification,

            ImmutableArray<string> events,

            string id,

            string name,

            string? payloadUrl,

            string provisioningState,

            string? sendAllEvents,

            string? status,

            Outputs.SystemDataResponse systemData,

            string tenantId,

            string type,

            string? updateWebhookKey,

            string webhookId,

            string? webhookKey,

            string webhookKeyEnabled)
        {
            ContentType = contentType;
            DeliveryStatus = deliveryStatus;
            EnableSslVerification = enableSslVerification;
            Events = events;
            Id = id;
            Name = name;
            PayloadUrl = payloadUrl;
            ProvisioningState = provisioningState;
            SendAllEvents = sendAllEvents;
            Status = status;
            SystemData = systemData;
            TenantId = tenantId;
            Type = type;
            UpdateWebhookKey = updateWebhookKey;
            WebhookId = webhookId;
            WebhookKey = webhookKey;
            WebhookKeyEnabled = webhookKeyEnabled;
        }
    }
}
