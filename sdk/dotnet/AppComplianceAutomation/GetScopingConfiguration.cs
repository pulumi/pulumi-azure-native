// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppComplianceAutomation
{
    public static class GetScopingConfiguration
    {
        /// <summary>
        /// Get the AppComplianceAutomation scoping configuration of the specific report.
        /// Azure REST API version: 2024-06-27.
        /// </summary>
        public static Task<GetScopingConfigurationResult> InvokeAsync(GetScopingConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScopingConfigurationResult>("azure-native:appcomplianceautomation:getScopingConfiguration", args ?? new GetScopingConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Get the AppComplianceAutomation scoping configuration of the specific report.
        /// Azure REST API version: 2024-06-27.
        /// </summary>
        public static Output<GetScopingConfigurationResult> Invoke(GetScopingConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopingConfigurationResult>("azure-native:appcomplianceautomation:getScopingConfiguration", args ?? new GetScopingConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScopingConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public string ReportName { get; set; } = null!;

        /// <summary>
        /// The scoping configuration of the specific report.
        /// </summary>
        [Input("scopingConfigurationName", required: true)]
        public string ScopingConfigurationName { get; set; } = null!;

        public GetScopingConfigurationArgs()
        {
        }
        public static new GetScopingConfigurationArgs Empty => new GetScopingConfigurationArgs();
    }

    public sealed class GetScopingConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Report Name.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        /// <summary>
        /// The scoping configuration of the specific report.
        /// </summary>
        [Input("scopingConfigurationName", required: true)]
        public Input<string> ScopingConfigurationName { get; set; } = null!;

        public GetScopingConfigurationInvokeArgs()
        {
        }
        public static new GetScopingConfigurationInvokeArgs Empty => new GetScopingConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetScopingConfigurationResult
    {
        /// <summary>
        /// List of scoping question answers.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScopingAnswerResponse> Answers;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScopingConfigurationResult(
            ImmutableArray<Outputs.ScopingAnswerResponse> answers,

            string id,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Answers = answers;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
