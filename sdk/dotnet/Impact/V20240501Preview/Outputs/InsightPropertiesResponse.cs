// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Impact.V20240501Preview.Outputs
{

    /// <summary>
    /// Impact category properties.
    /// </summary>
    [OutputType]
    public sealed class InsightPropertiesResponse
    {
        /// <summary>
        /// additional details of the insight.
        /// </summary>
        public readonly object? AdditionalDetails;
        /// <summary>
        /// category of the insight.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// Contains title &amp; description for the insight
        /// </summary>
        public readonly Outputs.ContentResponse Content;
        /// <summary>
        /// Identifier of the event that has been correlated with this insight. This can be used to aggregate insights for the same event.
        /// </summary>
        public readonly string? EventId;
        /// <summary>
        /// Time of the event, which has been correlated the impact.
        /// </summary>
        public readonly string? EventTime;
        /// <summary>
        /// Identifier that can be used to group similar insights.
        /// </summary>
        public readonly string? GroupId;
        /// <summary>
        /// details of of the impact for which insight has been generated.
        /// </summary>
        public readonly Outputs.ImpactDetailsResponse Impact;
        /// <summary>
        /// unique id of the insight.
        /// </summary>
        public readonly string InsightUniqueId;
        /// <summary>
        /// Resource provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// status of the insight. example resolved, repaired, other.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private InsightPropertiesResponse(
            object? additionalDetails,

            string category,

            Outputs.ContentResponse content,

            string? eventId,

            string? eventTime,

            string? groupId,

            Outputs.ImpactDetailsResponse impact,

            string insightUniqueId,

            string provisioningState,

            string? status)
        {
            AdditionalDetails = additionalDetails;
            Category = category;
            Content = content;
            EventId = eventId;
            EventTime = eventTime;
            GroupId = groupId;
            Impact = impact;
            InsightUniqueId = insightUniqueId;
            ProvisioningState = provisioningState;
            Status = status;
        }
    }
}
