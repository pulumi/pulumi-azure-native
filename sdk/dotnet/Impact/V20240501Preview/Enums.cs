// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Impact.V20240501Preview
{
    /// <summary>
    /// Degree of confidence on the impact being a platform issue
    /// </summary>
    [EnumType]
    public readonly struct ConfidenceLevel : IEquatable<ConfidenceLevel>
    {
        private readonly string _value;

        private ConfidenceLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Low confidence on azure being the source of impact
        /// </summary>
        public static ConfidenceLevel Low { get; } = new ConfidenceLevel("Low");
        /// <summary>
        /// Medium confidence on azure being the source of impact
        /// </summary>
        public static ConfidenceLevel Medium { get; } = new ConfidenceLevel("Medium");
        /// <summary>
        /// High confidence on azure being the source of impact
        /// </summary>
        public static ConfidenceLevel High { get; } = new ConfidenceLevel("High");

        public static bool operator ==(ConfidenceLevel left, ConfidenceLevel right) => left.Equals(right);
        public static bool operator !=(ConfidenceLevel left, ConfidenceLevel right) => !left.Equals(right);

        public static explicit operator string(ConfidenceLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfidenceLevel other && Equals(other);
        public bool Equals(ConfidenceLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Client incident source. ex : source system name where the incident is created
    /// </summary>
    [EnumType]
    public readonly struct IncidentSource : IEquatable<IncidentSource>
    {
        private readonly string _value;

        private IncidentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// When source of Incident is AzureDevops
        /// </summary>
        public static IncidentSource AzureDevops { get; } = new IncidentSource("AzureDevops");
        /// <summary>
        /// When source of Incident is Microsoft ICM
        /// </summary>
        public static IncidentSource ICM { get; } = new IncidentSource("ICM");
        /// <summary>
        /// When source of Incident is Jira
        /// </summary>
        public static IncidentSource Jira { get; } = new IncidentSource("Jira");
        /// <summary>
        /// When source of Incident is ServiceNow
        /// </summary>
        public static IncidentSource ServiceNow { get; } = new IncidentSource("ServiceNow");
        /// <summary>
        /// When source of Incident is Other
        /// </summary>
        public static IncidentSource Other { get; } = new IncidentSource("Other");

        public static bool operator ==(IncidentSource left, IncidentSource right) => left.Equals(right);
        public static bool operator !=(IncidentSource left, IncidentSource right) => !left.Equals(right);

        public static explicit operator string(IncidentSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentSource other && Equals(other);
        public bool Equals(IncidentSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
    /// </summary>
    [EnumType]
    public readonly struct MetricUnit : IEquatable<MetricUnit>
    {
        private readonly string _value;

        private MetricUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// When measurement is in ByteSeconds
        /// </summary>
        public static MetricUnit ByteSeconds { get; } = new MetricUnit("ByteSeconds");
        /// <summary>
        /// When measurement is in Bytes
        /// </summary>
        public static MetricUnit Bytes { get; } = new MetricUnit("Bytes");
        /// <summary>
        /// When measurement is in BytesPerSecond
        /// </summary>
        public static MetricUnit BytesPerSecond { get; } = new MetricUnit("BytesPerSecond");
        /// <summary>
        /// When measurement is in Cores
        /// </summary>
        public static MetricUnit Cores { get; } = new MetricUnit("Cores");
        /// <summary>
        /// When measurement is in Count
        /// </summary>
        public static MetricUnit Count { get; } = new MetricUnit("Count");
        /// <summary>
        /// When measurement is in CountPerSecond
        /// </summary>
        public static MetricUnit CountPerSecond { get; } = new MetricUnit("CountPerSecond");
        /// <summary>
        /// When measurement is in MilliCores
        /// </summary>
        public static MetricUnit MilliCores { get; } = new MetricUnit("MilliCores");
        /// <summary>
        /// When measurement is in MilliSeconds
        /// </summary>
        public static MetricUnit MilliSeconds { get; } = new MetricUnit("MilliSeconds");
        /// <summary>
        /// When measurement is in NanoCores
        /// </summary>
        public static MetricUnit NanoCores { get; } = new MetricUnit("NanoCores");
        /// <summary>
        /// When measurement is in Percent
        /// </summary>
        public static MetricUnit Percent { get; } = new MetricUnit("Percent");
        /// <summary>
        /// When measurement is in Seconds
        /// </summary>
        public static MetricUnit Seconds { get; } = new MetricUnit("Seconds");
        /// <summary>
        /// When measurement is in Other than listed
        /// </summary>
        public static MetricUnit Other { get; } = new MetricUnit("Other");

        public static bool operator ==(MetricUnit left, MetricUnit right) => left.Equals(right);
        public static bool operator !=(MetricUnit left, MetricUnit right) => !left.Equals(right);

        public static explicit operator string(MetricUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetricUnit other && Equals(other);
        public bool Equals(MetricUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// connector type
    /// </summary>
    [EnumType]
    public readonly struct Platform : IEquatable<Platform>
    {
        private readonly string _value;

        private Platform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Type of Azure Monitor
        /// </summary>
        public static Platform AzureMonitor { get; } = new Platform("AzureMonitor");

        public static bool operator ==(Platform left, Platform right) => left.Equals(right);
        public static bool operator !=(Platform left, Platform right) => !left.Equals(right);

        public static explicit operator string(Platform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Platform other && Equals(other);
        public bool Equals(Platform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol used for the connection
    /// </summary>
    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// When communication protocol is TCP
        /// </summary>
        public static Protocol TCP { get; } = new Protocol("TCP");
        /// <summary>
        /// When communication protocol is UDP
        /// </summary>
        public static Protocol UDP { get; } = new Protocol("UDP");
        /// <summary>
        /// When communication protocol is HTTP
        /// </summary>
        public static Protocol HTTP { get; } = new Protocol("HTTP");
        /// <summary>
        /// When communication protocol is HTTPS
        /// </summary>
        public static Protocol HTTPS { get; } = new Protocol("HTTPS");
        /// <summary>
        /// When communication protocol is RDP
        /// </summary>
        public static Protocol RDP { get; } = new Protocol("RDP");
        /// <summary>
        /// When communication protocol is FTP
        /// </summary>
        public static Protocol FTP { get; } = new Protocol("FTP");
        /// <summary>
        /// When communication protocol is SSH
        /// </summary>
        public static Protocol SSH { get; } = new Protocol("SSH");
        /// <summary>
        /// When communication protocol is Other
        /// </summary>
        public static Protocol Other { get; } = new Protocol("Other");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tool used to interact with Azure. SDK, AzPortal, etc.., Other
    /// </summary>
    [EnumType]
    public readonly struct Toolset : IEquatable<Toolset>
    {
        private readonly string _value;

        private Toolset(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If communication toolset is Terraform
        /// </summary>
        public static Toolset Terraform { get; } = new Toolset("Terraform");
        /// <summary>
        /// If communication toolset is Puppet
        /// </summary>
        public static Toolset Puppet { get; } = new Toolset("Puppet");
        /// <summary>
        /// If communication toolset is Chef
        /// </summary>
        public static Toolset Chef { get; } = new Toolset("Chef");
        /// <summary>
        /// If communication toolset is SDK
        /// </summary>
        public static Toolset SDK { get; } = new Toolset("SDK");
        /// <summary>
        /// If communication toolset is Ansible
        /// </summary>
        public static Toolset Ansible { get; } = new Toolset("Ansible");
        /// <summary>
        /// If communication toolset is ARM
        /// </summary>
        public static Toolset ARM { get; } = new Toolset("ARM");
        /// <summary>
        /// If communication toolset is Portal
        /// </summary>
        public static Toolset Portal { get; } = new Toolset("Portal");
        /// <summary>
        /// If communication toolset is Shell
        /// </summary>
        public static Toolset Shell { get; } = new Toolset("Shell");
        /// <summary>
        /// If communication toolset is Other
        /// </summary>
        public static Toolset Other { get; } = new Toolset("Other");

        public static bool operator ==(Toolset left, Toolset right) => left.Equals(right);
        public static bool operator !=(Toolset left, Toolset right) => !left.Equals(right);

        public static explicit operator string(Toolset value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Toolset other && Equals(other);
        public bool Equals(Toolset other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
