// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Impact.Inputs
{

    /// <summary>
    /// Workload impact properties
    /// </summary>
    public sealed class WorkloadImpactPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional fields related to impact, applicable fields per resource type are list under /impactCategories API
        /// </summary>
        [Input("additionalProperties")]
        public Input<object>? AdditionalProperties { get; set; }

        [Input("armCorrelationIds")]
        private InputList<string>? _armCorrelationIds;

        /// <summary>
        /// The ARM correlation ids, this is important field for control plane related impacts
        /// </summary>
        public InputList<string> ArmCorrelationIds
        {
            get => _armCorrelationIds ?? (_armCorrelationIds = new InputList<string>());
            set => _armCorrelationIds = value;
        }

        /// <summary>
        /// Client incident details ex: incidentId , incident source
        /// </summary>
        [Input("clientIncidentDetails")]
        public Input<Inputs.ClientIncidentDetailsArgs>? ClientIncidentDetails { get; set; }

        /// <summary>
        /// Degree of confidence on the impact being a platform issue
        /// </summary>
        [Input("confidenceLevel")]
        public InputUnion<string, Pulumi.AzureNative.Impact.ConfidenceLevel>? ConfidenceLevel { get; set; }

        /// <summary>
        /// Details about connectivity issue. Applicable when root resource causing the issue is not identified. For example, when a VM is impacted due to a network issue, the impacted resource is identified as the VM, but the root cause is the network. In such cases, the connectivity field will have the details about the network issue
        /// </summary>
        [Input("connectivity")]
        public Input<Inputs.ConnectivityArgs>? Connectivity { get; set; }

        /// <summary>
        /// Time at which impact has ended 
        /// </summary>
        [Input("endDateTime")]
        public Input<string>? EndDateTime { get; set; }

        /// <summary>
        /// ARM error code and error message associated with the impact
        /// </summary>
        [Input("errorDetails")]
        public Input<Inputs.ErrorDetailPropertiesArgs>? ErrorDetails { get; set; }

        /// <summary>
        /// Category of the impact,  details can found from /impactCategories API
        /// </summary>
        [Input("impactCategory", required: true)]
        public Input<string> ImpactCategory { get; set; } = null!;

        /// <summary>
        /// A detailed description of the impact
        /// </summary>
        [Input("impactDescription")]
        public Input<string>? ImpactDescription { get; set; }

        /// <summary>
        /// Use this field to group impacts
        /// </summary>
        [Input("impactGroupId")]
        public Input<string>? ImpactGroupId { get; set; }

        /// <summary>
        /// Azure resource id of the impacted resource
        /// </summary>
        [Input("impactedResourceId", required: true)]
        public Input<string> ImpactedResourceId { get; set; } = null!;

        [Input("performance")]
        private InputList<Inputs.PerformanceArgs>? _performance;

        /// <summary>
        /// Details about performance issue. Applicable for performance impacts.
        /// </summary>
        public InputList<Inputs.PerformanceArgs> Performance
        {
            get => _performance ?? (_performance = new InputList<Inputs.PerformanceArgs>());
            set => _performance = value;
        }

        /// <summary>
        /// Time at which impact was observed 
        /// </summary>
        [Input("startDateTime", required: true)]
        public Input<string> StartDateTime { get; set; } = null!;

        /// <summary>
        /// Information about the impacted workload
        /// </summary>
        [Input("workload")]
        public Input<Inputs.WorkloadArgs>? Workload { get; set; }

        public WorkloadImpactPropertiesArgs()
        {
        }
        public static new WorkloadImpactPropertiesArgs Empty => new WorkloadImpactPropertiesArgs();
    }
}
