// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Scom.V20230707Preview
{
    /// <summary>
    /// Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
    /// </summary>
    [EnumType]
    public readonly struct HybridLicenseType : IEquatable<HybridLicenseType>
    {
        private readonly string _value;

        private HybridLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HybridLicenseType None { get; } = new HybridLicenseType("None");
        public static HybridLicenseType AzureHybridBenefit { get; } = new HybridLicenseType("AzureHybridBenefit");

        public static bool operator ==(HybridLicenseType left, HybridLicenseType right) => left.Equals(right);
        public static bool operator !=(HybridLicenseType left, HybridLicenseType right) => !left.Equals(right);

        public static explicit operator string(HybridLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HybridLicenseType other && Equals(other);
        public bool Equals(HybridLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType SystemAssigned_UserAssigned { get; } = new ManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
