// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DevOpsInfrastructure.V20231213Preview
{
    /// <summary>
    /// Determines who has admin permissions to the Azure DevOps pool.
    /// </summary>
    [EnumType]
    public readonly struct AzureDevOpsPermissionType : IEquatable<AzureDevOpsPermissionType>
    {
        private readonly string _value;

        private AzureDevOpsPermissionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Pool will inherit permissions from the project or organization.
        /// </summary>
        public static AzureDevOpsPermissionType Inherit { get; } = new AzureDevOpsPermissionType("Inherit");
        /// <summary>
        /// Only the pool creator will be an admin of the pool.
        /// </summary>
        public static AzureDevOpsPermissionType CreatorOnly { get; } = new AzureDevOpsPermissionType("CreatorOnly");
        /// <summary>
        /// Only the specified accounts will be admins of the pool.
        /// </summary>
        public static AzureDevOpsPermissionType SpecificAccounts { get; } = new AzureDevOpsPermissionType("SpecificAccounts");

        public static bool operator ==(AzureDevOpsPermissionType left, AzureDevOpsPermissionType right) => left.Equals(right);
        public static bool operator !=(AzureDevOpsPermissionType left, AzureDevOpsPermissionType right) => !left.Equals(right);

        public static explicit operator string(AzureDevOpsPermissionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureDevOpsPermissionType other && Equals(other);
        public bool Equals(AzureDevOpsPermissionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines how the service should be run. By default, this will be set to Service.
    /// </summary>
    [EnumType]
    public readonly struct LogonType : IEquatable<LogonType>
    {
        private readonly string _value;

        private LogonType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Run as a service.
        /// </summary>
        public static LogonType Service { get; } = new LogonType("Service");
        /// <summary>
        /// Run in interactive mode.
        /// </summary>
        public static LogonType Interactive { get; } = new LogonType("Interactive");

        public static bool operator ==(LogonType left, LogonType right) => left.Equals(right);
        public static bool operator !=(LogonType left, LogonType right) => !left.Equals(right);

        public static explicit operator string(LogonType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogonType other && Equals(other);
        public bool Equals(LogonType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Azure SKU name of the machines in the pool.
    /// </summary>
    [EnumType]
    public readonly struct OsDiskStorageAccountType : IEquatable<OsDiskStorageAccountType>
    {
        private readonly string _value;

        private OsDiskStorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard OS disk type.
        /// </summary>
        public static OsDiskStorageAccountType Standard { get; } = new OsDiskStorageAccountType("Standard");
        /// <summary>
        /// Premium OS disk type.
        /// </summary>
        public static OsDiskStorageAccountType Premium { get; } = new OsDiskStorageAccountType("Premium");
        /// <summary>
        /// Standard SSD OS disk type.
        /// </summary>
        public static OsDiskStorageAccountType StandardSSD { get; } = new OsDiskStorageAccountType("StandardSSD");

        public static bool operator ==(OsDiskStorageAccountType left, OsDiskStorageAccountType right) => left.Equals(right);
        public static bool operator !=(OsDiskStorageAccountType left, OsDiskStorageAccountType right) => !left.Equals(right);

        public static explicit operator string(OsDiskStorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsDiskStorageAccountType other && Equals(other);
        public bool Equals(OsDiskStorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the current operation.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a succeeded operation.
        /// </summary>
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        /// <summary>
        /// Represents a failed operation.
        /// </summary>
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        /// <summary>
        /// Represents a canceled operation.
        /// </summary>
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        /// <summary>
        /// Represents a pending operation.
        /// </summary>
        public static ProvisioningState Provisioning { get; } = new ProvisioningState("Provisioning");
        /// <summary>
        /// Represents a pending operation.
        /// </summary>
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");
        /// <summary>
        /// Represents an operation under deletion.
        /// </summary>
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        /// <summary>
        /// Represents an accepted operation.
        /// </summary>
        public static ProvisioningState Accepted { get; } = new ProvisioningState("Accepted");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
