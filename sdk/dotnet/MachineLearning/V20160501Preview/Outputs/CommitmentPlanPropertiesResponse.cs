// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.MachineLearning.V20160501Preview.Outputs
{

    [OutputType]
    public sealed class CommitmentPlanPropertiesResponse
    {
        /// <summary>
        /// Indicates whether usage beyond the commitment plan's included quantities will be charged.
        /// </summary>
        public readonly bool ChargeForOverage;
        /// <summary>
        /// Indicates whether the commitment plan will incur a charge.
        /// </summary>
        public readonly bool ChargeForPlan;
        /// <summary>
        /// The date at which this commitment plan was created, in ISO 8601 format.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The included resource quantities this plan gives you.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PlanQuantityResponse> IncludedQuantities;
        /// <summary>
        /// The maximum number of commitment associations that can be children of this commitment plan.
        /// </summary>
        public readonly int MaxAssociationLimit;
        /// <summary>
        /// The maximum scale-out capacity for this commitment plan.
        /// </summary>
        public readonly int MaxCapacityLimit;
        /// <summary>
        /// The minimum scale-out capacity for this commitment plan.
        /// </summary>
        public readonly int MinCapacityLimit;
        /// <summary>
        /// The Azure meter which will be used to charge for this commitment plan.
        /// </summary>
        public readonly string PlanMeter;
        /// <summary>
        /// The frequency at which this commitment plan's included quantities are refilled.
        /// </summary>
        public readonly int RefillFrequencyInDays;
        /// <summary>
        /// Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.
        /// </summary>
        public readonly bool SuspendPlanOnOverage;

        [OutputConstructor]
        private CommitmentPlanPropertiesResponse(
            bool chargeForOverage,

            bool chargeForPlan,

            string creationDate,

            ImmutableDictionary<string, Outputs.PlanQuantityResponse> includedQuantities,

            int maxAssociationLimit,

            int maxCapacityLimit,

            int minCapacityLimit,

            string planMeter,

            int refillFrequencyInDays,

            bool suspendPlanOnOverage)
        {
            ChargeForOverage = chargeForOverage;
            ChargeForPlan = chargeForPlan;
            CreationDate = creationDate;
            IncludedQuantities = includedQuantities;
            MaxAssociationLimit = maxAssociationLimit;
            MaxCapacityLimit = maxCapacityLimit;
            MinCapacityLimit = minCapacityLimit;
            PlanMeter = planMeter;
            RefillFrequencyInDays = refillFrequencyInDays;
            SuspendPlanOnOverage = suspendPlanOnOverage;
        }
    }
}
