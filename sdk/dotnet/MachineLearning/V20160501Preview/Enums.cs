// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.MachineLearning.V20160501Preview
{
    /// <summary>
    /// Asset's type.
    /// </summary>
    [EnumType]
    public readonly struct AssetType : IEquatable<AssetType>
    {
        private readonly string _value;

        private AssetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssetType Module { get; } = new AssetType("Module");
        public static AssetType Resource { get; } = new AssetType("Resource");

        public static bool operator ==(AssetType left, AssetType right) => left.Equals(right);
        public static bool operator !=(AssetType left, AssetType right) => !left.Equals(right);

        public static explicit operator string(AssetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetType other && Equals(other);
        public bool Equals(AssetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Additional format information for the data type.
    /// </summary>
    [EnumType]
    public readonly struct ColumnFormat : IEquatable<ColumnFormat>
    {
        private readonly string _value;

        private ColumnFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ColumnFormat Byte { get; } = new ColumnFormat("Byte");
        public static ColumnFormat Char { get; } = new ColumnFormat("Char");
        public static ColumnFormat Complex64 { get; } = new ColumnFormat("Complex64");
        public static ColumnFormat Complex128 { get; } = new ColumnFormat("Complex128");
        public static ColumnFormat Date_time { get; } = new ColumnFormat("Date-time");
        public static ColumnFormat Date_timeOffset { get; } = new ColumnFormat("Date-timeOffset");
        public static ColumnFormat Double { get; } = new ColumnFormat("Double");
        public static ColumnFormat Duration { get; } = new ColumnFormat("Duration");
        public static ColumnFormat Float { get; } = new ColumnFormat("Float");
        public static ColumnFormat Int8 { get; } = new ColumnFormat("Int8");
        public static ColumnFormat Int16 { get; } = new ColumnFormat("Int16");
        public static ColumnFormat Int32 { get; } = new ColumnFormat("Int32");
        public static ColumnFormat Int64 { get; } = new ColumnFormat("Int64");
        public static ColumnFormat Uint8 { get; } = new ColumnFormat("Uint8");
        public static ColumnFormat Uint16 { get; } = new ColumnFormat("Uint16");
        public static ColumnFormat Uint32 { get; } = new ColumnFormat("Uint32");
        public static ColumnFormat Uint64 { get; } = new ColumnFormat("Uint64");

        public static bool operator ==(ColumnFormat left, ColumnFormat right) => left.Equals(right);
        public static bool operator !=(ColumnFormat left, ColumnFormat right) => !left.Equals(right);

        public static explicit operator string(ColumnFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ColumnFormat other && Equals(other);
        public bool Equals(ColumnFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data type of the column.
    /// </summary>
    [EnumType]
    public readonly struct ColumnType : IEquatable<ColumnType>
    {
        private readonly string _value;

        private ColumnType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ColumnType Boolean { get; } = new ColumnType("Boolean");
        public static ColumnType Integer { get; } = new ColumnType("Integer");
        public static ColumnType Number { get; } = new ColumnType("Number");
        public static ColumnType String { get; } = new ColumnType("String");

        public static bool operator ==(ColumnType left, ColumnType right) => left.Equals(right);
        public static bool operator !=(ColumnType left, ColumnType right) => !left.Equals(right);

        public static explicit operator string(ColumnType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ColumnType other && Equals(other);
        public bool Equals(ColumnType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr).
    /// </summary>
    [EnumType]
    public readonly struct DiagnosticsLevel : IEquatable<DiagnosticsLevel>
    {
        private readonly string _value;

        private DiagnosticsLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiagnosticsLevel None { get; } = new DiagnosticsLevel("None");
        public static DiagnosticsLevel Error { get; } = new DiagnosticsLevel("Error");
        public static DiagnosticsLevel All { get; } = new DiagnosticsLevel("All");

        public static bool operator ==(DiagnosticsLevel left, DiagnosticsLevel right) => left.Equals(right);
        public static bool operator !=(DiagnosticsLevel left, DiagnosticsLevel right) => !left.Equals(right);

        public static explicit operator string(DiagnosticsLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiagnosticsLevel other && Equals(other);
        public bool Equals(DiagnosticsLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Port data type.
    /// </summary>
    [EnumType]
    public readonly struct InputPortType : IEquatable<InputPortType>
    {
        private readonly string _value;

        private InputPortType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InputPortType Dataset { get; } = new InputPortType("Dataset");

        public static bool operator ==(InputPortType left, InputPortType right) => left.Equals(right);
        public static bool operator !=(InputPortType left, InputPortType right) => !left.Equals(right);

        public static explicit operator string(InputPortType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InputPortType other && Equals(other);
        public bool Equals(InputPortType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Port data type.
    /// </summary>
    [EnumType]
    public readonly struct OutputPortType : IEquatable<OutputPortType>
    {
        private readonly string _value;

        private OutputPortType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OutputPortType Dataset { get; } = new OutputPortType("Dataset");

        public static bool operator ==(OutputPortType left, OutputPortType right) => left.Equals(right);
        public static bool operator !=(OutputPortType left, OutputPortType right) => !left.Equals(right);

        public static explicit operator string(OutputPortType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutputPortType other && Equals(other);
        public bool Equals(OutputPortType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Graph parameter's type.
    /// </summary>
    [EnumType]
    public readonly struct ParameterType : IEquatable<ParameterType>
    {
        private readonly string _value;

        private ParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ParameterType String { get; } = new ParameterType("String");
        public static ParameterType Int { get; } = new ParameterType("Int");
        public static ParameterType Float { get; } = new ParameterType("Float");
        public static ParameterType Enumerated { get; } = new ParameterType("Enumerated");
        public static ParameterType Script { get; } = new ParameterType("Script");
        public static ParameterType Mode { get; } = new ParameterType("Mode");
        public static ParameterType Credential { get; } = new ParameterType("Credential");
        public static ParameterType Boolean { get; } = new ParameterType("Boolean");
        public static ParameterType Double { get; } = new ParameterType("Double");
        public static ParameterType ColumnPicker { get; } = new ParameterType("ColumnPicker");
        public static ParameterType ParameterRange { get; } = new ParameterType("ParameterRange");
        public static ParameterType DataGatewayName { get; } = new ParameterType("DataGatewayName");

        public static bool operator ==(ParameterType left, ParameterType right) => left.Equals(right);
        public static bool operator !=(ParameterType left, ParameterType right) => !left.Equals(right);

        public static explicit operator string(ParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ParameterType other && Equals(other);
        public bool Equals(ParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
