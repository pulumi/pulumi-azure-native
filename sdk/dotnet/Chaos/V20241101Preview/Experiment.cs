// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Chaos.V20241101Preview
{
    /// <summary>
    /// Model that represents a Experiment resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:chaos/v20241101preview:Experiment")]
    public partial class Experiment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional customer-managed Storage account where Experiment schema will be stored.
        /// </summary>
        [Output("customerDataStorage")]
        public Output<Outputs.CustomerDataStoragePropertiesResponse?> CustomerDataStorage { get; private set; } = null!;

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Most recent provisioning state for the given experiment resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// List of selectors.
        /// </summary>
        [Output("selectors")]
        public Output<ImmutableArray<Union<Outputs.ChaosTargetListSelectorResponse, Outputs.ChaosTargetQuerySelectorResponse>>> Selectors { get; private set; } = null!;

        /// <summary>
        /// List of steps.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.ChaosExperimentStepResponse>> Steps { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Experiment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Experiment(string name, ExperimentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:chaos/v20241101preview:Experiment", name, args ?? new ExperimentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Experiment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:chaos/v20241101preview:Experiment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20210915preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20220701preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20221001preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20230401preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20230415preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20230901preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20231027preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20231101:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20240101:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20240322preview:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos/v20250101:Experiment" },
                    new global::Pulumi.Alias { Type = "azure-native:chaos:Experiment" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Experiment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Experiment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Experiment(name, id, options);
        }
    }

    public sealed class ExperimentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional customer-managed Storage account where Experiment schema will be stored.
        /// </summary>
        [Input("customerDataStorage")]
        public Input<Inputs.CustomerDataStoragePropertiesArgs>? CustomerDataStorage { get; set; }

        /// <summary>
        /// String that represents a Experiment resource name.
        /// </summary>
        [Input("experimentName")]
        public Input<string>? ExperimentName { get; set; }

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("selectors", required: true)]
        private InputList<Union<Inputs.ChaosTargetListSelectorArgs, Inputs.ChaosTargetQuerySelectorArgs>>? _selectors;

        /// <summary>
        /// List of selectors.
        /// </summary>
        public InputList<Union<Inputs.ChaosTargetListSelectorArgs, Inputs.ChaosTargetQuerySelectorArgs>> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Union<Inputs.ChaosTargetListSelectorArgs, Inputs.ChaosTargetQuerySelectorArgs>>());
            set => _selectors = value;
        }

        [Input("steps", required: true)]
        private InputList<Inputs.ChaosExperimentStepArgs>? _steps;

        /// <summary>
        /// List of steps.
        /// </summary>
        public InputList<Inputs.ChaosExperimentStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.ChaosExperimentStepArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ExperimentArgs()
        {
        }
        public static new ExperimentArgs Empty => new ExperimentArgs();
    }
}
