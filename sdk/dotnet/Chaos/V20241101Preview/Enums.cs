// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Chaos.V20241101Preview
{
    /// <summary>
    /// Chaos experiment action discriminator type
    /// </summary>
    [EnumType]
    public readonly struct ExperimentActionType : IEquatable<ExperimentActionType>
    {
        private readonly string _value;

        private ExperimentActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExperimentActionType Delay { get; } = new ExperimentActionType("delay");
        public static ExperimentActionType Discrete { get; } = new ExperimentActionType("discrete");
        public static ExperimentActionType Continuous { get; } = new ExperimentActionType("continuous");

        public static bool operator ==(ExperimentActionType left, ExperimentActionType right) => left.Equals(right);
        public static bool operator !=(ExperimentActionType left, ExperimentActionType right) => !left.Equals(right);

        public static explicit operator string(ExperimentActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExperimentActionType other && Equals(other);
        public bool Equals(ExperimentActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Chaos target filter discriminator type
    /// </summary>
    [EnumType]
    public readonly struct FilterType : IEquatable<FilterType>
    {
        private readonly string _value;

        private FilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Simple filter type.
        /// </summary>
        public static FilterType Simple { get; } = new FilterType("Simple");

        public static bool operator ==(FilterType left, FilterType right) => left.Equals(right);
        public static bool operator !=(FilterType left, FilterType right) => !left.Equals(right);

        public static explicit operator string(FilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterType other && Equals(other);
        public bool Equals(FilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Public Network Access Control for PrivateAccess resource.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessOption : IEquatable<PublicNetworkAccessOption>
    {
        private readonly string _value;

        private PublicNetworkAccessOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enabled access.
        /// </summary>
        public static PublicNetworkAccessOption Enabled { get; } = new PublicNetworkAccessOption("Enabled");
        /// <summary>
        /// Disabled access.
        /// </summary>
        public static PublicNetworkAccessOption Disabled { get; } = new PublicNetworkAccessOption("Disabled");

        public static bool operator ==(PublicNetworkAccessOption left, PublicNetworkAccessOption right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessOption left, PublicNetworkAccessOption right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessOption other && Equals(other);
        public bool Equals(PublicNetworkAccessOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Chaos target selector discriminator type
    /// </summary>
    [EnumType]
    public readonly struct SelectorType : IEquatable<SelectorType>
    {
        private readonly string _value;

        private SelectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// List selector type.
        /// </summary>
        public static SelectorType List { get; } = new SelectorType("List");
        /// <summary>
        /// Query selector type.
        /// </summary>
        public static SelectorType Query { get; } = new SelectorType("Query");

        public static bool operator ==(SelectorType left, SelectorType right) => left.Equals(right);
        public static bool operator !=(SelectorType left, SelectorType right) => !left.Equals(right);

        public static explicit operator string(SelectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SelectorType other && Equals(other);
        public bool Equals(SelectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum of the Target reference type.
    /// </summary>
    [EnumType]
    public readonly struct TargetReferenceType : IEquatable<TargetReferenceType>
    {
        private readonly string _value;

        private TargetReferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Chaos target reference type.
        /// </summary>
        public static TargetReferenceType ChaosTarget { get; } = new TargetReferenceType("ChaosTarget");

        public static bool operator ==(TargetReferenceType left, TargetReferenceType right) => left.Equals(right);
        public static bool operator !=(TargetReferenceType left, TargetReferenceType right) => !left.Equals(right);

        public static explicit operator string(TargetReferenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetReferenceType other && Equals(other);
        public bool Equals(TargetReferenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
