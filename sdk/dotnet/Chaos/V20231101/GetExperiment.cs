// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Chaos.V20231101
{
    public static class GetExperiment
    {
        /// <summary>
        /// Get a Experiment resource.
        /// </summary>
        public static Task<GetExperimentResult> InvokeAsync(GetExperimentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExperimentResult>("azure-native:chaos/v20231101:getExperiment", args ?? new GetExperimentArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Experiment resource.
        /// </summary>
        public static Output<GetExperimentResult> Invoke(GetExperimentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExperimentResult>("azure-native:chaos/v20231101:getExperiment", args ?? new GetExperimentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExperimentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// String that represents a Experiment resource name.
        /// </summary>
        [Input("experimentName", required: true)]
        public string ExperimentName { get; set; } = null!;

        /// <summary>
        /// String that represents an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExperimentArgs()
        {
        }
        public static new GetExperimentArgs Empty => new GetExperimentArgs();
    }

    public sealed class GetExperimentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// String that represents a Experiment resource name.
        /// </summary>
        [Input("experimentName", required: true)]
        public Input<string> ExperimentName { get; set; } = null!;

        /// <summary>
        /// String that represents an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExperimentInvokeArgs()
        {
        }
        public static new GetExperimentInvokeArgs Empty => new GetExperimentInvokeArgs();
    }


    [OutputType]
    public sealed class GetExperimentResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the experiment resource.
        /// </summary>
        public readonly Outputs.ResourceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The properties of the experiment resource.
        /// </summary>
        public readonly Outputs.ExperimentPropertiesResponse Properties;
        /// <summary>
        /// The system metadata of the experiment resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExperimentResult(
            string id,

            Outputs.ResourceIdentityResponse? identity,

            string location,

            string name,

            Outputs.ExperimentPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
