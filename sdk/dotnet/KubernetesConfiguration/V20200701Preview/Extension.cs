// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20200701Preview
{
    /// <summary>
    /// The Extension Instance object.
    /// </summary>
    [AzureNativeResourceType("azure-native:kubernetesconfiguration/v20200701preview:Extension")]
    public partial class Extension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag to note if this instance participates in auto upgrade of minor version, or not.
        /// </summary>
        [Output("autoUpgradeMinorVersion")]
        public Output<bool?> AutoUpgradeMinorVersion { get; private set; } = null!;

        /// <summary>
        /// Configuration settings that are sensitive, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        [Output("configurationProtectedSettings")]
        public Output<ImmutableDictionary<string, string>?> ConfigurationProtectedSettings { get; private set; } = null!;

        /// <summary>
        /// Configuration settings, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        [Output("configurationSettings")]
        public Output<ImmutableDictionary<string, string>?> ConfigurationSettings { get; private set; } = null!;

        /// <summary>
        /// DateLiteral (per ISO8601) noting the time the resource was created by the client (user).
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Error information from the Agent - e.g. errors during installation.
        /// </summary>
        [Output("errorInfo")]
        public Output<Outputs.ErrorDefinitionResponse> ErrorInfo { get; private set; } = null!;

        /// <summary>
        /// Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
        /// </summary>
        [Output("extensionType")]
        public Output<string?> ExtensionType { get; private set; } = null!;

        /// <summary>
        /// The identity of the configuration.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ConfigurationIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Status of installation of this instance of the extension.
        /// </summary>
        [Output("installState")]
        public Output<string> InstallState { get; private set; } = null!;

        /// <summary>
        /// DateLiteral (per ISO8601) noting the time the resource was modified by the client (user).
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// DateLiteral (per ISO8601) noting the time of last status from the agent.
        /// </summary>
        [Output("lastStatusTime")]
        public Output<string> LastStatusTime { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ReleaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
        /// </summary>
        [Output("releaseTrain")]
        public Output<string?> ReleaseTrain { get; private set; } = null!;

        /// <summary>
        /// Scope at which the extension instance is installed.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.ScopeResponse?> Scope { get; private set; } = null!;

        /// <summary>
        /// Status from this instance of the extension.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ExtensionStatusResponse>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse?> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Version of the extension for this extension instance, if it is 'pinned' to a specific version. autoUpgradeMinorVersion must be 'false'.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Extension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Extension(string name, ExtensionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:kubernetesconfiguration/v20200701preview:Extension", name, args ?? new ExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Extension(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:kubernetesconfiguration/v20200701preview:Extension", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20210501preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20210901:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20211101preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20220101preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20220301:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20220402preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20220701:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20221101:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:kubernetesconfiguration/v20230501:Extension"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Extension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Extension Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Extension(name, id, options);
        }
    }

    public sealed class ExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to note if this instance participates in auto upgrade of minor version, or not.
        /// </summary>
        [Input("autoUpgradeMinorVersion")]
        public Input<bool>? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public Input<string> ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public Input<string> ClusterRp { get; set; } = null!;

        [Input("configurationProtectedSettings")]
        private InputMap<string>? _configurationProtectedSettings;

        /// <summary>
        /// Configuration settings that are sensitive, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        public InputMap<string> ConfigurationProtectedSettings
        {
            get => _configurationProtectedSettings ?? (_configurationProtectedSettings = new InputMap<string>());
            set => _configurationProtectedSettings = value;
        }

        [Input("configurationSettings")]
        private InputMap<string>? _configurationSettings;

        /// <summary>
        /// Configuration settings, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        public InputMap<string> ConfigurationSettings
        {
            get => _configurationSettings ?? (_configurationSettings = new InputMap<string>());
            set => _configurationSettings = value;
        }

        /// <summary>
        /// Name of an instance of the Extension.
        /// </summary>
        [Input("extensionInstanceName")]
        public Input<string>? ExtensionInstanceName { get; set; }

        /// <summary>
        /// Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
        /// </summary>
        [Input("extensionType")]
        public Input<string>? ExtensionType { get; set; }

        /// <summary>
        /// The identity of the configuration.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ConfigurationIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// ReleaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
        /// </summary>
        [Input("releaseTrain")]
        public Input<string>? ReleaseTrain { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Scope at which the extension instance is installed.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.ScopeArgs>? Scope { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ExtensionStatusArgs>? _statuses;

        /// <summary>
        /// Status from this instance of the extension.
        /// </summary>
        public InputList<Inputs.ExtensionStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ExtensionStatusArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Version of the extension for this extension instance, if it is 'pinned' to a specific version. autoUpgradeMinorVersion must be 'false'.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ExtensionArgs()
        {
        }
        public static new ExtensionArgs Empty => new ExtensionArgs();
    }
}
