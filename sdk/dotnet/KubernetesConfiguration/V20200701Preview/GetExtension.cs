// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20200701Preview
{
    public static class GetExtension
    {
        /// <summary>
        /// The Extension Instance object.
        /// </summary>
        public static Task<GetExtensionResult> InvokeAsync(GetExtensionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExtensionResult>("azure-native:kubernetesconfiguration/v20200701preview:getExtension", args ?? new GetExtensionArgs(), options.WithDefaults());

        /// <summary>
        /// The Extension Instance object.
        /// </summary>
        public static Output<GetExtensionResult> Invoke(GetExtensionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExtensionResult>("azure-native:kubernetesconfiguration/v20200701preview:getExtension", args ?? new GetExtensionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExtensionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public string ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public string ClusterRp { get; set; } = null!;

        /// <summary>
        /// Name of an instance of the Extension.
        /// </summary>
        [Input("extensionInstanceName", required: true)]
        public string ExtensionInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExtensionArgs()
        {
        }
    }

    public sealed class GetExtensionInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public Input<string> ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public Input<string> ClusterRp { get; set; } = null!;

        /// <summary>
        /// Name of an instance of the Extension.
        /// </summary>
        [Input("extensionInstanceName", required: true)]
        public Input<string> ExtensionInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExtensionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExtensionResult
    {
        /// <summary>
        /// Flag to note if this instance participates in auto upgrade of minor version, or not.
        /// </summary>
        public readonly bool? AutoUpgradeMinorVersion;
        /// <summary>
        /// Configuration settings that are sensitive, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ConfigurationProtectedSettings;
        /// <summary>
        /// Configuration settings, as name-value pairs for configuring this instance of the extension.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ConfigurationSettings;
        /// <summary>
        /// DateLiteral (per ISO8601) noting the time the resource was created by the client (user).
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Error information from the Agent - e.g. errors during installation.
        /// </summary>
        public readonly Outputs.ErrorDefinitionResponse ErrorInfo;
        /// <summary>
        /// Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
        /// </summary>
        public readonly string? ExtensionType;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the configuration.
        /// </summary>
        public readonly Outputs.ConfigurationIdentityResponse? Identity;
        /// <summary>
        /// Status of installation of this instance of the extension.
        /// </summary>
        public readonly string InstallState;
        /// <summary>
        /// DateLiteral (per ISO8601) noting the time the resource was modified by the client (user).
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// DateLiteral (per ISO8601) noting the time of last status from the agent.
        /// </summary>
        public readonly string LastStatusTime;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ReleaseTrain this extension instance participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
        /// </summary>
        public readonly string? ReleaseTrain;
        /// <summary>
        /// Scope at which the extension instance is installed.
        /// </summary>
        public readonly Outputs.ScopeResponse? Scope;
        /// <summary>
        /// Status from this instance of the extension.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExtensionStatusResponse> Statuses;
        /// <summary>
        /// Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
        /// </summary>
        public readonly Outputs.SystemDataResponse? SystemData;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the extension for this extension instance, if it is 'pinned' to a specific version. autoUpgradeMinorVersion must be 'false'.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetExtensionResult(
            bool? autoUpgradeMinorVersion,

            ImmutableDictionary<string, string>? configurationProtectedSettings,

            ImmutableDictionary<string, string>? configurationSettings,

            string creationTime,

            Outputs.ErrorDefinitionResponse errorInfo,

            string? extensionType,

            string id,

            Outputs.ConfigurationIdentityResponse? identity,

            string installState,

            string lastModifiedTime,

            string lastStatusTime,

            string name,

            string? releaseTrain,

            Outputs.ScopeResponse? scope,

            ImmutableArray<Outputs.ExtensionStatusResponse> statuses,

            Outputs.SystemDataResponse? systemData,

            string type,

            string? version)
        {
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            ConfigurationProtectedSettings = configurationProtectedSettings;
            ConfigurationSettings = configurationSettings;
            CreationTime = creationTime;
            ErrorInfo = errorInfo;
            ExtensionType = extensionType;
            Id = id;
            Identity = identity;
            InstallState = installState;
            LastModifiedTime = lastModifiedTime;
            LastStatusTime = lastStatusTime;
            Name = name;
            ReleaseTrain = releaseTrain;
            Scope = scope;
            Statuses = statuses;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
