// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20241101
{
    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct AKSIdentityType : IEquatable<AKSIdentityType>
    {
        private readonly string _value;

        private AKSIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AKSIdentityType SystemAssigned { get; } = new AKSIdentityType("SystemAssigned");
        public static AKSIdentityType UserAssigned { get; } = new AKSIdentityType("UserAssigned");

        public static bool operator ==(AKSIdentityType left, AKSIdentityType right) => left.Equals(right);
        public static bool operator !=(AKSIdentityType left, AKSIdentityType right) => !left.Equals(right);

        public static explicit operator string(AKSIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AKSIdentityType other && Equals(other);
        public bool Equals(AKSIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Level of the status.
    /// </summary>
    [EnumType]
    public readonly struct LevelType : IEquatable<LevelType>
    {
        private readonly string _value;

        private LevelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LevelType Error { get; } = new LevelType("Error");
        public static LevelType Warning { get; } = new LevelType("Warning");
        public static LevelType Information { get; } = new LevelType("Information");

        public static bool operator ==(LevelType left, LevelType right) => left.Equals(right);
        public static bool operator !=(LevelType left, LevelType right) => !left.Equals(right);

        public static explicit operator string(LevelType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LevelType other && Equals(other);
        public bool Equals(LevelType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'.
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperationType Extract { get; } = new OperationType("extract");
        public static OperationType Copy { get; } = new OperationType("copy");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the provider used for authentication.
    /// </summary>
    [EnumType]
    public readonly struct ProviderType : IEquatable<ProviderType>
    {
        private readonly string _value;

        private ProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure provider can be used to authenticate to Azure DevOps repositories using Managed Identity.
        /// </summary>
        public static ProviderType Azure { get; } = new ProviderType("Azure");
        /// <summary>
        /// Generic is the default provider that indicates secret-based authentication mechanism.
        /// </summary>
        public static ProviderType Generic { get; } = new ProviderType("Generic");

        public static bool operator ==(ProviderType left, ProviderType right) => left.Equals(right);
        public static bool operator !=(ProviderType left, ProviderType right) => !left.Equals(right);

        public static explicit operator string(ProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderType other && Equals(other);
        public bool Equals(ProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scope at which the operator will be installed.
    /// </summary>
    [EnumType]
    public readonly struct ScopeType : IEquatable<ScopeType>
    {
        private readonly string _value;

        private ScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScopeType Cluster { get; } = new ScopeType("cluster");
        public static ScopeType @Namespace { get; } = new ScopeType("namespace");

        public static bool operator ==(ScopeType left, ScopeType right) => left.Equals(right);
        public static bool operator !=(ScopeType left, ScopeType right) => !left.Equals(right);

        public static explicit operator string(ScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScopeType other && Equals(other);
        public bool Equals(ScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source Kind to pull the configuration data from.
    /// </summary>
    [EnumType]
    public readonly struct SourceKindType : IEquatable<SourceKindType>
    {
        private readonly string _value;

        private SourceKindType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceKindType GitRepository { get; } = new SourceKindType("GitRepository");
        public static SourceKindType Bucket { get; } = new SourceKindType("Bucket");
        public static SourceKindType AzureBlob { get; } = new SourceKindType("AzureBlob");
        public static SourceKindType OCIRepository { get; } = new SourceKindType("OCIRepository");

        public static bool operator ==(SourceKindType left, SourceKindType right) => left.Equals(right);
        public static bool operator !=(SourceKindType left, SourceKindType right) => !left.Equals(right);

        public static explicit operator string(SourceKindType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceKindType other && Equals(other);
        public bool Equals(SourceKindType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
