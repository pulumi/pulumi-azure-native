// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.KubernetesConfiguration.V20191101Preview
{
    public static class GetSourceControlConfiguration
    {
        public static Task<GetSourceControlConfigurationResult> InvokeAsync(GetSourceControlConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSourceControlConfigurationResult>("azure-nextgen:kubernetesconfiguration/v20191101preview:getSourceControlConfiguration", args ?? new GetSourceControlConfigurationArgs(), options.WithVersion());
    }


    public sealed class GetSourceControlConfigurationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public string ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public string ClusterRp { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Source Control Configuration.
        /// </summary>
        [Input("sourceControlConfigurationName", required: true)]
        public string SourceControlConfigurationName { get; set; } = null!;

        public GetSourceControlConfigurationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSourceControlConfigurationResult
    {
        /// <summary>
        /// Compliance Status of the Configuration
        /// </summary>
        public readonly Outputs.ComplianceStatusResponse ComplianceStatus;
        /// <summary>
        /// Option to enable Helm Operator for this git configuration.
        /// </summary>
        public readonly string? EnableHelmOperator;
        /// <summary>
        /// Properties for Helm operator.
        /// </summary>
        public readonly Outputs.HelmOperatorPropertiesResponse? HelmOperatorProperties;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Instance name of the operator - identifying the specific configuration.
        /// </summary>
        public readonly string? OperatorInstanceName;
        /// <summary>
        /// The namespace to which this operator is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only.
        /// </summary>
        public readonly string? OperatorNamespace;
        /// <summary>
        /// Any Parameters for the Operator instance in string format.
        /// </summary>
        public readonly string? OperatorParams;
        /// <summary>
        /// Scope at which the operator will be installed.
        /// </summary>
        public readonly string? OperatorScope;
        /// <summary>
        /// Type of the operator
        /// </summary>
        public readonly string? OperatorType;
        /// <summary>
        /// The provisioning state of the resource provider.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Public Key associated with this SourceControl configuration (either generated within the cluster or provided by the user).
        /// </summary>
        public readonly string RepositoryPublicKey;
        /// <summary>
        /// Url of the SourceControl Repository.
        /// </summary>
        public readonly string? RepositoryUrl;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSourceControlConfigurationResult(
            Outputs.ComplianceStatusResponse complianceStatus,

            string? enableHelmOperator,

            Outputs.HelmOperatorPropertiesResponse? helmOperatorProperties,

            string name,

            string? operatorInstanceName,

            string? operatorNamespace,

            string? operatorParams,

            string? operatorScope,

            string? operatorType,

            string provisioningState,

            string repositoryPublicKey,

            string? repositoryUrl,

            string type)
        {
            ComplianceStatus = complianceStatus;
            EnableHelmOperator = enableHelmOperator;
            HelmOperatorProperties = helmOperatorProperties;
            Name = name;
            OperatorInstanceName = operatorInstanceName;
            OperatorNamespace = operatorNamespace;
            OperatorParams = operatorParams;
            OperatorScope = operatorScope;
            OperatorType = operatorType;
            ProvisioningState = provisioningState;
            RepositoryPublicKey = repositoryPublicKey;
            RepositoryUrl = repositoryUrl;
            Type = type;
        }
    }
}
