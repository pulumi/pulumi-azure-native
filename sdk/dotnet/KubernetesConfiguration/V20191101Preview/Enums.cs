// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.KubernetesConfiguration.V20191101Preview
{
    /// <summary>
    /// Option to enable Helm Operator for this git configuration.
    /// </summary>
    [EnumType]
    public readonly struct EnableHelmOperator : IEquatable<EnableHelmOperator>
    {
        private readonly string _value;

        private EnableHelmOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableHelmOperator @True { get; } = new EnableHelmOperator("true");
        public static EnableHelmOperator @False { get; } = new EnableHelmOperator("false");

        public static bool operator ==(EnableHelmOperator left, EnableHelmOperator right) => left.Equals(right);
        public static bool operator !=(EnableHelmOperator left, EnableHelmOperator right) => !left.Equals(right);

        public static explicit operator string(EnableHelmOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableHelmOperator other && Equals(other);
        public bool Equals(EnableHelmOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scope at which the operator will be installed.
    /// </summary>
    [EnumType]
    public readonly struct OperatorScope : IEquatable<OperatorScope>
    {
        private readonly string _value;

        private OperatorScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatorScope Cluster { get; } = new OperatorScope("cluster");
        public static OperatorScope @Namespace { get; } = new OperatorScope("namespace");

        public static bool operator ==(OperatorScope left, OperatorScope right) => left.Equals(right);
        public static bool operator !=(OperatorScope left, OperatorScope right) => !left.Equals(right);

        public static explicit operator string(OperatorScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatorScope other && Equals(other);
        public bool Equals(OperatorScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the operator
    /// </summary>
    [EnumType]
    public readonly struct OperatorType : IEquatable<OperatorType>
    {
        private readonly string _value;

        private OperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatorType Flux { get; } = new OperatorType("Flux");

        public static bool operator ==(OperatorType left, OperatorType right) => left.Equals(right);
        public static bool operator !=(OperatorType left, OperatorType right) => !left.Equals(right);

        public static explicit operator string(OperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatorType other && Equals(other);
        public bool Equals(OperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
