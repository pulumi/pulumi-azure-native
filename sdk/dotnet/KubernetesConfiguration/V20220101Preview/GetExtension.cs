// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20220101Preview
{
    public static class GetExtension
    {
        /// <summary>
        /// The Extension object.
        /// </summary>
        public static Task<GetExtensionResult> InvokeAsync(GetExtensionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExtensionResult>("azure-native:kubernetesconfiguration/v20220101preview:getExtension", args ?? new GetExtensionArgs(), options.WithDefaults());

        /// <summary>
        /// The Extension object.
        /// </summary>
        public static Output<GetExtensionResult> Invoke(GetExtensionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExtensionResult>("azure-native:kubernetesconfiguration/v20220101preview:getExtension", args ?? new GetExtensionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExtensionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public string ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public string ClusterRp { get; set; } = null!;

        /// <summary>
        /// Name of the Extension.
        /// </summary>
        [Input("extensionName", required: true)]
        public string ExtensionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExtensionArgs()
        {
        }
        public static new GetExtensionArgs Empty => new GetExtensionArgs();
    }

    public sealed class GetExtensionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the kubernetes cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterResourceName", required: true)]
        public Input<string> ClusterResourceName { get; set; } = null!;

        /// <summary>
        /// The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
        /// </summary>
        [Input("clusterRp", required: true)]
        public Input<string> ClusterRp { get; set; } = null!;

        /// <summary>
        /// Name of the Extension.
        /// </summary>
        [Input("extensionName", required: true)]
        public Input<string> ExtensionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExtensionInvokeArgs()
        {
        }
        public static new GetExtensionInvokeArgs Empty => new GetExtensionInvokeArgs();
    }


    [OutputType]
    public sealed class GetExtensionResult
    {
        /// <summary>
        /// Identity of the Extension resource in an AKS cluster
        /// </summary>
        public readonly Outputs.ExtensionResponseAksAssignedIdentity? AksAssignedIdentity;
        /// <summary>
        /// Flag to note if this extension participates in auto upgrade of minor version, or not.
        /// </summary>
        public readonly bool? AutoUpgradeMinorVersion;
        /// <summary>
        /// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ConfigurationProtectedSettings;
        /// <summary>
        /// Configuration settings, as name-value pairs for configuring this extension.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ConfigurationSettings;
        /// <summary>
        /// Custom Location settings properties.
        /// </summary>
        public readonly ImmutableDictionary<string, string> CustomLocationSettings;
        /// <summary>
        /// Error information from the Agent - e.g. errors during installation.
        /// </summary>
        public readonly Outputs.ErrorDetailResponse ErrorInfo;
        /// <summary>
        /// Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher.
        /// </summary>
        public readonly string? ExtensionType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity of the Extension resource
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Uri of the Helm package
        /// </summary>
        public readonly string PackageUri;
        /// <summary>
        /// Status of installation of this extension.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
        /// </summary>
        public readonly string? ReleaseTrain;
        /// <summary>
        /// Scope at which the extension is installed.
        /// </summary>
        public readonly Outputs.ScopeResponse? Scope;
        /// <summary>
        /// Status from this extension.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExtensionStatusResponse> Statuses;
        /// <summary>
        /// Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the extension for this extension, if it is 'pinned' to a specific version. autoUpgradeMinorVersion must be 'false'.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetExtensionResult(
            Outputs.ExtensionResponseAksAssignedIdentity? aksAssignedIdentity,

            bool? autoUpgradeMinorVersion,

            ImmutableDictionary<string, string>? configurationProtectedSettings,

            ImmutableDictionary<string, string>? configurationSettings,

            ImmutableDictionary<string, string> customLocationSettings,

            Outputs.ErrorDetailResponse errorInfo,

            string? extensionType,

            string id,

            Outputs.IdentityResponse? identity,

            string name,

            string packageUri,

            string provisioningState,

            string? releaseTrain,

            Outputs.ScopeResponse? scope,

            ImmutableArray<Outputs.ExtensionStatusResponse> statuses,

            Outputs.SystemDataResponse systemData,

            string type,

            string? version)
        {
            AksAssignedIdentity = aksAssignedIdentity;
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            ConfigurationProtectedSettings = configurationProtectedSettings;
            ConfigurationSettings = configurationSettings;
            CustomLocationSettings = customLocationSettings;
            ErrorInfo = errorInfo;
            ExtensionType = extensionType;
            Id = id;
            Identity = identity;
            Name = name;
            PackageUri = packageUri;
            ProvisioningState = provisioningState;
            ReleaseTrain = releaseTrain;
            Scope = scope;
            Statuses = statuses;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
