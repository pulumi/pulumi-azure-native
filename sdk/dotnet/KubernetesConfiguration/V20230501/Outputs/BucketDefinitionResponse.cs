// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20230501.Outputs
{

    /// <summary>
    /// Parameters to reconcile to the Bucket source kind type.
    /// </summary>
    [OutputType]
    public sealed class BucketDefinitionResponse
    {
        /// <summary>
        /// Plaintext access key used to securely access the S3 bucket
        /// </summary>
        public readonly string? AccessKey;
        /// <summary>
        /// The bucket name to sync from the url endpoint for the flux configuration.
        /// </summary>
        public readonly string? BucketName;
        /// <summary>
        /// Specify whether to use insecure communication when puling data from the S3 bucket.
        /// </summary>
        public readonly bool? Insecure;
        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
        /// </summary>
        public readonly string? LocalAuthRef;
        /// <summary>
        /// The interval at which to re-reconcile the cluster bucket source with the remote.
        /// </summary>
        public readonly double? SyncIntervalInSeconds;
        /// <summary>
        /// The maximum time to attempt to reconcile the cluster bucket source with the remote.
        /// </summary>
        public readonly double? TimeoutInSeconds;
        /// <summary>
        /// The URL to sync for the flux configuration S3 bucket.
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private BucketDefinitionResponse(
            string? accessKey,

            string? bucketName,

            bool? insecure,

            string? localAuthRef,

            double? syncIntervalInSeconds,

            double? timeoutInSeconds,

            string? url)
        {
            AccessKey = accessKey;
            BucketName = bucketName;
            Insecure = insecure;
            LocalAuthRef = localAuthRef;
            SyncIntervalInSeconds = syncIntervalInSeconds;
            TimeoutInSeconds = timeoutInSeconds;
            Url = url;
        }
    }
}
