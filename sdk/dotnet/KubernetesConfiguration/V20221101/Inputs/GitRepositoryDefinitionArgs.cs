// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesConfiguration.V20221101.Inputs
{

    /// <summary>
    /// Parameters to reconcile to the GitRepository source kind type.
    /// </summary>
    public sealed class GitRepositoryDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
        /// </summary>
        [Input("httpsCACert")]
        public Input<string>? HttpsCACert { get; set; }

        /// <summary>
        /// Plaintext HTTPS username used to access private git repositories over HTTPS
        /// </summary>
        [Input("httpsUser")]
        public Input<string>? HttpsUser { get; set; }

        /// <summary>
        /// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
        /// </summary>
        [Input("localAuthRef")]
        public Input<string>? LocalAuthRef { get; set; }

        /// <summary>
        /// The source reference for the GitRepository object.
        /// </summary>
        [Input("repositoryRef")]
        public Input<Inputs.RepositoryRefDefinitionArgs>? RepositoryRef { get; set; }

        /// <summary>
        /// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
        /// </summary>
        [Input("sshKnownHosts")]
        public Input<string>? SshKnownHosts { get; set; }

        /// <summary>
        /// The interval at which to re-reconcile the cluster git repository source with the remote.
        /// </summary>
        [Input("syncIntervalInSeconds")]
        public Input<double>? SyncIntervalInSeconds { get; set; }

        /// <summary>
        /// The maximum time to attempt to reconcile the cluster git repository source with the remote.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<double>? TimeoutInSeconds { get; set; }

        /// <summary>
        /// The URL to sync for the flux configuration git repository.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public GitRepositoryDefinitionArgs()
        {
            SyncIntervalInSeconds = 600;
            TimeoutInSeconds = 600;
        }
        public static new GitRepositoryDefinitionArgs Empty => new GitRepositoryDefinitionArgs();
    }
}
