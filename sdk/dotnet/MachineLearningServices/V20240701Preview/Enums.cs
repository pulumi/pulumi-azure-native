// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MachineLearningServices.V20240701Preview
{
    /// <summary>
    /// Indicates whether or not the encryption is enabled for the workspace.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionStatus : IEquatable<EncryptionStatus>
    {
        private readonly string _value;

        private EncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionStatus Enabled { get; } = new EncryptionStatus("Enabled");
        public static EncryptionStatus Disabled { get; } = new EncryptionStatus("Disabled");

        public static bool operator ==(EncryptionStatus left, EncryptionStatus right) => left.Equals(right);
        public static bool operator !=(EncryptionStatus left, EncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(EncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionStatus other && Equals(other);
        public bool Equals(EncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Connection status of the service consumer with the service provider
    /// Possible state transitions
    /// Pending -&gt; Approved (Service provider approves the connection request)
    /// Pending -&gt; Rejected (Service provider rejects the connection request)
    /// Pending -&gt; Disconnected (Service provider deletes the connection)
    /// Approved -&gt; Rejected (Service provider rejects the approved connection)
    /// Approved -&gt; Disconnected (Service provider deletes the connection)
    /// Rejected -&gt; Pending (Service consumer re-initiates the connection request that was rejected)
    /// Rejected -&gt; Disconnected (Service provider deletes the connection)
    /// </summary>
    [EnumType]
    public readonly struct EndpointServiceConnectionStatus : IEquatable<EndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private EndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointServiceConnectionStatus Approved { get; } = new EndpointServiceConnectionStatus("Approved");
        public static EndpointServiceConnectionStatus Pending { get; } = new EndpointServiceConnectionStatus("Pending");
        public static EndpointServiceConnectionStatus Rejected { get; } = new EndpointServiceConnectionStatus("Rejected");
        public static EndpointServiceConnectionStatus Disconnected { get; } = new EndpointServiceConnectionStatus("Disconnected");
        public static EndpointServiceConnectionStatus Timeout { get; } = new EndpointServiceConnectionStatus("Timeout");

        public static bool operator ==(EndpointServiceConnectionStatus left, EndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(EndpointServiceConnectionStatus left, EndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(EndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(EndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Isolation mode for the managed network of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct IsolationMode : IEquatable<IsolationMode>
    {
        private readonly string _value;

        private IsolationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsolationMode Disabled { get; } = new IsolationMode("Disabled");
        public static IsolationMode AllowInternetOutbound { get; } = new IsolationMode("AllowInternetOutbound");
        public static IsolationMode AllowOnlyApprovedOutbound { get; } = new IsolationMode("AllowOnlyApprovedOutbound");

        public static bool operator ==(IsolationMode left, IsolationMode right) => left.Equals(right);
        public static bool operator !=(IsolationMode left, IsolationMode right) => !left.Equals(right);

        public static explicit operator string(IsolationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsolationMode other && Equals(other);
        public bool Equals(IsolationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status for the managed network of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct ManagedNetworkStatus : IEquatable<ManagedNetworkStatus>
    {
        private readonly string _value;

        private ManagedNetworkStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedNetworkStatus Inactive { get; } = new ManagedNetworkStatus("Inactive");
        public static ManagedNetworkStatus Active { get; } = new ManagedNetworkStatus("Active");

        public static bool operator ==(ManagedNetworkStatus left, ManagedNetworkStatus right) => left.Equals(right);
        public static bool operator !=(ManagedNetworkStatus left, ManagedNetworkStatus right) => !left.Equals(right);

        public static explicit operator string(ManagedNetworkStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedNetworkStatus other && Equals(other);
        public bool Equals(ManagedNetworkStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether requests from Public Network are allowed.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action enum for networking rule.
    /// </summary>
    [EnumType]
    public readonly struct RuleAction : IEquatable<RuleAction>
    {
        private readonly string _value;

        private RuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleAction Allow { get; } = new RuleAction("Allow");
        public static RuleAction Deny { get; } = new RuleAction("Deny");

        public static bool operator ==(RuleAction left, RuleAction right) => left.Equals(right);
        public static bool operator !=(RuleAction left, RuleAction right) => !left.Equals(right);

        public static explicit operator string(RuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleAction other && Equals(other);
        public bool Equals(RuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Category of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleCategory : IEquatable<RuleCategory>
    {
        private readonly string _value;

        private RuleCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleCategory Required { get; } = new RuleCategory("Required");
        public static RuleCategory Recommended { get; } = new RuleCategory("Recommended");
        public static RuleCategory UserDefined { get; } = new RuleCategory("UserDefined");
        public static RuleCategory Dependency { get; } = new RuleCategory("Dependency");

        public static bool operator ==(RuleCategory left, RuleCategory right) => left.Equals(right);
        public static bool operator !=(RuleCategory left, RuleCategory right) => !left.Equals(right);

        public static explicit operator string(RuleCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleCategory other && Equals(other);
        public bool Equals(RuleCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleStatus : IEquatable<RuleStatus>
    {
        private readonly string _value;

        private RuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleStatus Inactive { get; } = new RuleStatus("Inactive");
        public static RuleStatus Active { get; } = new RuleStatus("Active");

        public static bool operator ==(RuleStatus left, RuleStatus right) => left.Equals(right);
        public static bool operator !=(RuleStatus left, RuleStatus right) => !left.Equals(right);

        public static explicit operator string(RuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleStatus other && Equals(other);
        public bool Equals(RuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleType : IEquatable<RuleType>
    {
        private readonly string _value;

        private RuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleType FQDN { get; } = new RuleType("FQDN");
        public static RuleType PrivateEndpoint { get; } = new RuleType("PrivateEndpoint");
        public static RuleType ServiceTag { get; } = new RuleType("ServiceTag");

        public static bool operator ==(RuleType left, RuleType right) => left.Equals(right);
        public static bool operator !=(RuleType left, RuleType right) => !left.Equals(right);

        public static explicit operator string(RuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleType other && Equals(other);
        public bool Equals(RuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Free { get; } = new SkuTier("Free");
        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
