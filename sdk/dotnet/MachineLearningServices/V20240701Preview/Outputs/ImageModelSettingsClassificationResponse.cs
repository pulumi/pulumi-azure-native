// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240701Preview.Outputs
{

    /// <summary>
    /// Settings used for training the model.
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    /// </summary>
    [OutputType]
    public sealed class ImageModelSettingsClassificationResponse
    {
        /// <summary>
        /// Settings for advanced scenarios.
        /// </summary>
        public readonly string? AdvancedSettings;
        /// <summary>
        /// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
        /// </summary>
        public readonly bool? AmsGradient;
        /// <summary>
        /// Settings for using Augmentations.
        /// </summary>
        public readonly string? Augmentations;
        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Beta1;
        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Beta2;
        /// <summary>
        /// Frequency to store model checkpoints. Must be a positive integer.
        /// </summary>
        public readonly int? CheckpointFrequency;
        /// <summary>
        /// The pretrained checkpoint model for incremental training.
        /// </summary>
        public readonly Outputs.MLFlowModelJobInputResponse? CheckpointModel;
        /// <summary>
        /// The id of a previous run that has a pretrained checkpoint for incremental training.
        /// </summary>
        public readonly string? CheckpointRunId;
        /// <summary>
        /// Whether to use distributed training.
        /// </summary>
        public readonly bool? Distributed;
        /// <summary>
        /// Enable early stopping logic during training.
        /// </summary>
        public readonly bool? EarlyStopping;
        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        public readonly int? EarlyStoppingDelay;
        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        public readonly int? EarlyStoppingPatience;
        /// <summary>
        /// Enable normalization when exporting ONNX model.
        /// </summary>
        public readonly bool? EnableOnnxNormalization;
        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        public readonly int? EvaluationFrequency;
        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        public readonly int? GradientAccumulationStep;
        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly int? LayersToFreeze;
        /// <summary>
        /// Initial learning rate. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? LearningRate;
        /// <summary>
        /// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
        /// </summary>
        public readonly string? LearningRateScheduler;
        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly string? ModelName;
        /// <summary>
        /// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Momentum;
        /// <summary>
        /// Enable nesterov when optimizer is 'sgd'.
        /// </summary>
        public readonly bool? Nesterov;
        /// <summary>
        /// Number of training epochs. Must be a positive integer.
        /// </summary>
        public readonly int? NumberOfEpochs;
        /// <summary>
        /// Number of data loader workers. Must be a non-negative integer.
        /// </summary>
        public readonly int? NumberOfWorkers;
        /// <summary>
        /// Type of optimizer.
        /// </summary>
        public readonly string? Optimizer;
        /// <summary>
        /// Random seed to be used when using deterministic training.
        /// </summary>
        public readonly int? RandomSeed;
        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? StepLRGamma;
        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        public readonly int? StepLRStepSize;
        /// <summary>
        /// Training batch size. Must be a positive integer.
        /// </summary>
        public readonly int? TrainingBatchSize;
        /// <summary>
        /// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
        /// </summary>
        public readonly int? TrainingCropSize;
        /// <summary>
        /// Validation batch size. Must be a positive integer.
        /// </summary>
        public readonly int? ValidationBatchSize;
        /// <summary>
        /// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
        /// </summary>
        public readonly int? ValidationCropSize;
        /// <summary>
        /// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
        /// </summary>
        public readonly int? ValidationResizeSize;
        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? WarmupCosineLRCycles;
        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        public readonly int? WarmupCosineLRWarmupEpochs;
        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        public readonly double? WeightDecay;
        /// <summary>
        /// Weighted loss. The accepted values are 0 for no weighted loss.
        /// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
        /// </summary>
        public readonly int? WeightedLoss;

        [OutputConstructor]
        private ImageModelSettingsClassificationResponse(
            string? advancedSettings,

            bool? amsGradient,

            string? augmentations,

            double? beta1,

            double? beta2,

            int? checkpointFrequency,

            Outputs.MLFlowModelJobInputResponse? checkpointModel,

            string? checkpointRunId,

            bool? distributed,

            bool? earlyStopping,

            int? earlyStoppingDelay,

            int? earlyStoppingPatience,

            bool? enableOnnxNormalization,

            int? evaluationFrequency,

            int? gradientAccumulationStep,

            int? layersToFreeze,

            double? learningRate,

            string? learningRateScheduler,

            string? modelName,

            double? momentum,

            bool? nesterov,

            int? numberOfEpochs,

            int? numberOfWorkers,

            string? optimizer,

            int? randomSeed,

            double? stepLRGamma,

            int? stepLRStepSize,

            int? trainingBatchSize,

            int? trainingCropSize,

            int? validationBatchSize,

            int? validationCropSize,

            int? validationResizeSize,

            double? warmupCosineLRCycles,

            int? warmupCosineLRWarmupEpochs,

            double? weightDecay,

            int? weightedLoss)
        {
            AdvancedSettings = advancedSettings;
            AmsGradient = amsGradient;
            Augmentations = augmentations;
            Beta1 = beta1;
            Beta2 = beta2;
            CheckpointFrequency = checkpointFrequency;
            CheckpointModel = checkpointModel;
            CheckpointRunId = checkpointRunId;
            Distributed = distributed;
            EarlyStopping = earlyStopping;
            EarlyStoppingDelay = earlyStoppingDelay;
            EarlyStoppingPatience = earlyStoppingPatience;
            EnableOnnxNormalization = enableOnnxNormalization;
            EvaluationFrequency = evaluationFrequency;
            GradientAccumulationStep = gradientAccumulationStep;
            LayersToFreeze = layersToFreeze;
            LearningRate = learningRate;
            LearningRateScheduler = learningRateScheduler;
            ModelName = modelName;
            Momentum = momentum;
            Nesterov = nesterov;
            NumberOfEpochs = numberOfEpochs;
            NumberOfWorkers = numberOfWorkers;
            Optimizer = optimizer;
            RandomSeed = randomSeed;
            StepLRGamma = stepLRGamma;
            StepLRStepSize = stepLRStepSize;
            TrainingBatchSize = trainingBatchSize;
            TrainingCropSize = trainingCropSize;
            ValidationBatchSize = validationBatchSize;
            ValidationCropSize = validationCropSize;
            ValidationResizeSize = validationResizeSize;
            WarmupCosineLRCycles = warmupCosineLRCycles;
            WarmupCosineLRWarmupEpochs = warmupCosineLRWarmupEpochs;
            WeightDecay = weightDecay;
            WeightedLoss = weightedLoss;
        }
    }
}
