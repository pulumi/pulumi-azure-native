// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240701Preview.Outputs
{

    [OutputType]
    public sealed class DataCollectorResponse
    {
        /// <summary>
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.CollectionResponse> Collections;
        /// <summary>
        /// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
        /// </summary>
        public readonly Outputs.RequestLoggingResponse? RequestLogging;
        /// <summary>
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </summary>
        public readonly string? RollingRate;

        [OutputConstructor]
        private DataCollectorResponse(
            ImmutableDictionary<string, Outputs.CollectionResponse> collections,

            Outputs.RequestLoggingResponse? requestLogging,

            string? rollingRate)
        {
            Collections = collections;
            RequestLogging = requestLogging;
            RollingRate = rollingRate;
        }
    }
}
