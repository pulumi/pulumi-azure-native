// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MachineLearningServices.V20200501Preview
{
    /// <summary>
    /// Specifies dataset type.
    /// </summary>
    [EnumType]
    public readonly struct DatasetType : IEquatable<DatasetType>
    {
        private readonly string _value;

        private DatasetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetType Tabular { get; } = new DatasetType("tabular");
        public static DatasetType File { get; } = new DatasetType("file");

        public static bool operator ==(DatasetType left, DatasetType right) => left.Equals(right);
        public static bool operator !=(DatasetType left, DatasetType right) => !left.Equals(right);

        public static explicit operator string(DatasetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetType other && Equals(other);
        public bool Equals(DatasetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies datastore type.
    /// </summary>
    [EnumType]
    public readonly struct DatastoreTypeArm : IEquatable<DatastoreTypeArm>
    {
        private readonly string _value;

        private DatastoreTypeArm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatastoreTypeArm Blob { get; } = new DatastoreTypeArm("blob");
        public static DatastoreTypeArm Adls { get; } = new DatastoreTypeArm("adls");
        public static DatastoreTypeArm Adls_gen2 { get; } = new DatastoreTypeArm("adls-gen2");
        public static DatastoreTypeArm Dbfs { get; } = new DatastoreTypeArm("dbfs");
        public static DatastoreTypeArm File { get; } = new DatastoreTypeArm("file");
        public static DatastoreTypeArm Mysqldb { get; } = new DatastoreTypeArm("mysqldb");
        public static DatastoreTypeArm Sqldb { get; } = new DatastoreTypeArm("sqldb");
        public static DatastoreTypeArm Psqldb { get; } = new DatastoreTypeArm("psqldb");

        public static bool operator ==(DatastoreTypeArm left, DatastoreTypeArm right) => left.Equals(right);
        public static bool operator !=(DatastoreTypeArm left, DatastoreTypeArm right) => !left.Equals(right);

        public static explicit operator string(DatastoreTypeArm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatastoreTypeArm other && Equals(other);
        public bool Equals(DatastoreTypeArm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Header type.
    /// </summary>
    [EnumType]
    public readonly struct Header : IEquatable<Header>
    {
        private readonly string _value;

        private Header(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Header All_files_have_same_headers { get; } = new Header("all_files_have_same_headers");
        public static Header Only_first_file_has_headers { get; } = new Header("only_first_file_has_headers");
        public static Header No_headers { get; } = new Header("no_headers");
        public static Header Combine_all_files_headers { get; } = new Header("combine_all_files_headers");

        public static bool operator ==(Header left, Header right) => left.Equals(right);
        public static bool operator !=(Header left, Header right) => !left.Equals(right);

        public static explicit operator string(Header value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Header other && Equals(other);
        public bool Equals(Header other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data source type.
    /// </summary>
    [EnumType]
    public readonly struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        private SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceType Delimited_files { get; } = new SourceType("delimited_files");
        public static SourceType Json_lines_files { get; } = new SourceType("json_lines_files");
        public static SourceType Parquet_files { get; } = new SourceType("parquet_files");

        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);

        public static explicit operator string(SourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceType other && Equals(other);
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
