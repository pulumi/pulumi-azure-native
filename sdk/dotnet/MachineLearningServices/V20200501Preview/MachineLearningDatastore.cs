// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.MachineLearningServices.V20200501Preview
{
    /// <summary>
    /// Machine Learning datastore object wrapped into ARM resource envelope.
    /// </summary>
    public partial class MachineLearningDatastore : Pulumi.CustomResource
    {
        /// <summary>
        /// The identity of the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Datastore properties
        /// </summary>
        [Output("properties")]
        public Output<Outputs.DatastoreResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// The sku of the workspace.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Contains resource tags defined as key/value pairs.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MachineLearningDatastore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MachineLearningDatastore(string name, MachineLearningDatastoreArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:machinelearningservices/v20200501preview:MachineLearningDatastore", name, args ?? new MachineLearningDatastoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MachineLearningDatastore(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:machinelearningservices/v20200501preview:MachineLearningDatastore", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MachineLearningDatastore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MachineLearningDatastore Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MachineLearningDatastore(name, id, options);
        }
    }

    public sealed class MachineLearningDatastoreArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account Key of storage account.
        /// </summary>
        [Input("accountKey")]
        public Input<string>? AccountKey { get; set; }

        /// <summary>
        /// The name of the storage account.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The resource group the ADLS store belongs to. Defaults to selected resource group.
        /// </summary>
        [Input("adlsResourceGroup")]
        public Input<string>? AdlsResourceGroup { get; set; }

        /// <summary>
        /// The ID of the subscription the ADLS store belongs to. Defaults to selected subscription.
        /// </summary>
        [Input("adlsSubscriptionId")]
        public Input<string>? AdlsSubscriptionId { get; set; }

        /// <summary>
        /// Authority url used to authenticate the user.
        /// </summary>
        [Input("authorityUrl")]
        public Input<string>? AuthorityUrl { get; set; }

        /// <summary>
        /// The service principal's client/application ID.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The service principal's secret.
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// The name of the azure blob container.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// Specifies datastore type.
        /// </summary>
        [Input("dataStoreType", required: true)]
        public Input<string> DataStoreType { get; set; } = null!;

        /// <summary>
        /// The database name.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The Datastore name.
        /// </summary>
        [Input("datastoreName", required: true)]
        public Input<string> DatastoreName { get; set; } = null!;

        /// <summary>
        /// The description of the datastore.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The endpoint of the server.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// This sets the ssl value of the server. Defaults to true if not set.
        /// </summary>
        [Input("enforceSSL")]
        public Input<bool>? EnforceSSL { get; set; }

        /// <summary>
        /// The file system name of the ADLS Gen2.
        /// </summary>
        [Input("fileSystem")]
        public Input<string>? FileSystem { get; set; }

        /// <summary>
        /// Include datastore secret in response.
        /// </summary>
        [Input("includeSecret")]
        public Input<bool>? IncludeSecret { get; set; }

        /// <summary>
        /// The name of the datastore.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The port number.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// The protocol to be used
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Name of the resource group in which workspace is located.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Determines what operations will be performed.
        /// </summary>
        [Input("resourceUrl")]
        public Input<string>? ResourceUrl { get; set; }

        /// <summary>
        /// Sas Token of storage account.
        /// </summary>
        [Input("sasToken")]
        public Input<string>? SasToken { get; set; }

        /// <summary>
        /// The SQL/MySQL/PostgreSQL server name
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// The name of the file share.
        /// </summary>
        [Input("shareName")]
        public Input<string>? ShareName { get; set; }

        /// <summary>
        /// Skip validation that ensures data can be loaded from the dataset before registration.
        /// </summary>
        [Input("skipValidation")]
        public Input<bool>? SkipValidation { get; set; }

        /// <summary>
        /// The resource group of the storage account. Defaults to selected resource group
        /// </summary>
        [Input("storageAccountResourceGroup")]
        public Input<string>? StorageAccountResourceGroup { get; set; }

        /// <summary>
        /// The subscription ID of the storage account. Defaults to selected subscription
        /// </summary>
        [Input("storageAccountSubscriptionId")]
        public Input<string>? StorageAccountSubscriptionId { get; set; }

        /// <summary>
        /// The ADLS store name.
        /// </summary>
        [Input("storeName")]
        public Input<string>? StoreName { get; set; }

        /// <summary>
        /// The service principal Tenant ID.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The user ID.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// The username of the database user.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// Name of Azure Machine Learning workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        /// <summary>
        /// If set to true, datastore support data access authenticated with Workspace MSI.
        /// </summary>
        [Input("workspaceSystemAssignedIdentity")]
        public Input<bool>? WorkspaceSystemAssignedIdentity { get; set; }

        public MachineLearningDatastoreArgs()
        {
        }
    }
}
