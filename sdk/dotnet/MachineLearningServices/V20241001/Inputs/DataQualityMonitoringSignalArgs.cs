// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20241001.Inputs
{

    public sealed class DataQualityMonitoringSignalArgs : global::Pulumi.ResourceArgs
    {
        [Input("featureDataTypeOverride")]
        private InputMap<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringFeatureDataType>>? _featureDataTypeOverride;

        /// <summary>
        /// A dictionary that maps feature names to their respective data types.
        /// </summary>
        public InputMap<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringFeatureDataType>> FeatureDataTypeOverride
        {
            get => _featureDataTypeOverride ?? (_featureDataTypeOverride = new InputMap<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringFeatureDataType>>());
            set => _featureDataTypeOverride = value;
        }

        /// <summary>
        /// The settings for computing feature importance.
        /// </summary>
        [Input("featureImportanceSettings")]
        public Input<Inputs.FeatureImportanceSettingsArgs>? FeatureImportanceSettings { get; set; }

        /// <summary>
        /// The features to calculate drift over.
        /// </summary>
        [Input("features")]
        public object? Features { get; set; }

        [Input("metricThresholds", required: true)]
        private InputList<Union<Inputs.CategoricalDataQualityMetricThresholdArgs, Inputs.NumericalDataQualityMetricThresholdArgs>>? _metricThresholds;

        /// <summary>
        /// [Required] A list of metrics to calculate and their associated thresholds.
        /// </summary>
        public InputList<Union<Inputs.CategoricalDataQualityMetricThresholdArgs, Inputs.NumericalDataQualityMetricThresholdArgs>> MetricThresholds
        {
            get => _metricThresholds ?? (_metricThresholds = new InputList<Union<Inputs.CategoricalDataQualityMetricThresholdArgs, Inputs.NumericalDataQualityMetricThresholdArgs>>());
            set => _metricThresholds = value;
        }

        [Input("notificationTypes")]
        private InputList<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringNotificationType>>? _notificationTypes;

        /// <summary>
        /// The current notification mode for this signal.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringNotificationType>> NotificationTypes
        {
            get => _notificationTypes ?? (_notificationTypes = new InputList<Union<string, Pulumi.AzureNative.MachineLearningServices.V20241001.MonitoringNotificationType>>());
            set => _notificationTypes = value;
        }

        /// <summary>
        /// [Required] The data produced by the production service which drift will be calculated for.
        /// </summary>
        [Input("productionData", required: true)]
        public object ProductionData { get; set; } = null!;

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// Property dictionary. Properties can be added, but not removed or altered.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// [Required] The data to calculate drift against.
        /// </summary>
        [Input("referenceData", required: true)]
        public object ReferenceData { get; set; } = null!;

        /// <summary>
        /// 
        /// Expected value is 'DataQuality'.
        /// </summary>
        [Input("signalType", required: true)]
        public Input<string> SignalType { get; set; } = null!;

        public DataQualityMonitoringSignalArgs()
        {
        }
        public static new DataQualityMonitoringSignalArgs Empty => new DataQualityMonitoringSignalArgs();
    }
}
