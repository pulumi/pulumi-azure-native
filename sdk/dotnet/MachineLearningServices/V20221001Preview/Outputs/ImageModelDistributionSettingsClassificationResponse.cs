// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20221001Preview.Outputs
{

    /// <summary>
    /// Distribution expressions to sweep over values of model settings.
    /// &lt;example&gt;
    /// Some examples are:
    /// &lt;code&gt;
    /// ModelName = "choice('seresnext', 'resnest50')";
    /// LearningRate = "uniform(0.001, 0.01)";
    /// LayersToFreeze = "choice(0, 2)";
    /// &lt;/code&gt;&lt;/example&gt;
    /// For more details on how to compose distribution expressions please check the documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    /// </summary>
    [OutputType]
    public sealed class ImageModelDistributionSettingsClassificationResponse
    {
        /// <summary>
        /// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
        /// </summary>
        public readonly string? AmsGradient;
        /// <summary>
        /// Settings for using Augmentations.
        /// </summary>
        public readonly string? Augmentations;
        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? Beta1;
        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? Beta2;
        /// <summary>
        /// Whether to use distributer training.
        /// </summary>
        public readonly string? Distributed;
        /// <summary>
        /// Enable early stopping logic during training.
        /// </summary>
        public readonly string? EarlyStopping;
        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        public readonly string? EarlyStoppingDelay;
        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        public readonly string? EarlyStoppingPatience;
        /// <summary>
        /// Enable normalization when exporting ONNX model.
        /// </summary>
        public readonly string? EnableOnnxNormalization;
        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        public readonly string? EvaluationFrequency;
        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        public readonly string? GradientAccumulationStep;
        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly string? LayersToFreeze;
        /// <summary>
        /// Initial learning rate. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? LearningRate;
        /// <summary>
        /// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
        /// </summary>
        public readonly string? LearningRateScheduler;
        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly string? ModelName;
        /// <summary>
        /// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? Momentum;
        /// <summary>
        /// Enable nesterov when optimizer is 'sgd'.
        /// </summary>
        public readonly string? Nesterov;
        /// <summary>
        /// Number of training epochs. Must be a positive integer.
        /// </summary>
        public readonly string? NumberOfEpochs;
        /// <summary>
        /// Number of data loader workers. Must be a non-negative integer.
        /// </summary>
        public readonly string? NumberOfWorkers;
        /// <summary>
        /// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
        /// </summary>
        public readonly string? Optimizer;
        /// <summary>
        /// Random seed to be used when using deterministic training.
        /// </summary>
        public readonly string? RandomSeed;
        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? StepLRGamma;
        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        public readonly string? StepLRStepSize;
        /// <summary>
        /// Training batch size. Must be a positive integer.
        /// </summary>
        public readonly string? TrainingBatchSize;
        /// <summary>
        /// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
        /// </summary>
        public readonly string? TrainingCropSize;
        /// <summary>
        /// Validation batch size. Must be a positive integer.
        /// </summary>
        public readonly string? ValidationBatchSize;
        /// <summary>
        /// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
        /// </summary>
        public readonly string? ValidationCropSize;
        /// <summary>
        /// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
        /// </summary>
        public readonly string? ValidationResizeSize;
        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly string? WarmupCosineLRCycles;
        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        public readonly string? WarmupCosineLRWarmupEpochs;
        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        public readonly string? WeightDecay;
        /// <summary>
        /// Weighted loss. The accepted values are 0 for no weighted loss.
        /// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
        /// </summary>
        public readonly string? WeightedLoss;

        [OutputConstructor]
        private ImageModelDistributionSettingsClassificationResponse(
            string? amsGradient,

            string? augmentations,

            string? beta1,

            string? beta2,

            string? distributed,

            string? earlyStopping,

            string? earlyStoppingDelay,

            string? earlyStoppingPatience,

            string? enableOnnxNormalization,

            string? evaluationFrequency,

            string? gradientAccumulationStep,

            string? layersToFreeze,

            string? learningRate,

            string? learningRateScheduler,

            string? modelName,

            string? momentum,

            string? nesterov,

            string? numberOfEpochs,

            string? numberOfWorkers,

            string? optimizer,

            string? randomSeed,

            string? stepLRGamma,

            string? stepLRStepSize,

            string? trainingBatchSize,

            string? trainingCropSize,

            string? validationBatchSize,

            string? validationCropSize,

            string? validationResizeSize,

            string? warmupCosineLRCycles,

            string? warmupCosineLRWarmupEpochs,

            string? weightDecay,

            string? weightedLoss)
        {
            AmsGradient = amsGradient;
            Augmentations = augmentations;
            Beta1 = beta1;
            Beta2 = beta2;
            Distributed = distributed;
            EarlyStopping = earlyStopping;
            EarlyStoppingDelay = earlyStoppingDelay;
            EarlyStoppingPatience = earlyStoppingPatience;
            EnableOnnxNormalization = enableOnnxNormalization;
            EvaluationFrequency = evaluationFrequency;
            GradientAccumulationStep = gradientAccumulationStep;
            LayersToFreeze = layersToFreeze;
            LearningRate = learningRate;
            LearningRateScheduler = learningRateScheduler;
            ModelName = modelName;
            Momentum = momentum;
            Nesterov = nesterov;
            NumberOfEpochs = numberOfEpochs;
            NumberOfWorkers = numberOfWorkers;
            Optimizer = optimizer;
            RandomSeed = randomSeed;
            StepLRGamma = stepLRGamma;
            StepLRStepSize = stepLRStepSize;
            TrainingBatchSize = trainingBatchSize;
            TrainingCropSize = trainingCropSize;
            ValidationBatchSize = validationBatchSize;
            ValidationCropSize = validationCropSize;
            ValidationResizeSize = validationResizeSize;
            WarmupCosineLRCycles = warmupCosineLRCycles;
            WarmupCosineLRWarmupEpochs = warmupCosineLRWarmupEpochs;
            WeightDecay = weightDecay;
            WeightedLoss = weightedLoss;
        }
    }
}
