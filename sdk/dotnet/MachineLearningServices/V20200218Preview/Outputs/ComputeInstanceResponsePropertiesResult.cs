// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.MachineLearningServices.V20200218Preview.Outputs
{

    [OutputType]
    public sealed class ComputeInstanceResponsePropertiesResult
    {
        /// <summary>
        /// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
        /// </summary>
        public readonly string? ApplicationSharingPolicy;
        /// <summary>
        /// Describes available applications and their endpoints on this ComputeInstance.
        /// </summary>
        public readonly ImmutableArray<Outputs.ComputeInstanceApplicationResponseResult> Applications;
        /// <summary>
        /// The Compute Instance Authorization type. Available values are personal (default).
        /// </summary>
        public readonly string? ComputeInstanceAuthorizationType;
        /// <summary>
        /// Describes all connectivity endpoints available for this ComputeInstance.
        /// </summary>
        public readonly Outputs.ComputeInstanceConnectivityEndpointsResponseResult ConnectivityEndpoints;
        /// <summary>
        /// Describes information on user who created this ComputeInstance.
        /// </summary>
        public readonly Outputs.ComputeInstanceCreatedByResponseResult CreatedBy;
        /// <summary>
        /// Collection of errors encountered on this ComputeInstance.
        /// </summary>
        public readonly ImmutableArray<Outputs.MachineLearningServiceErrorResponseResult> Errors;
        /// <summary>
        /// Settings for a personal compute instance.
        /// </summary>
        public readonly Outputs.PersonalComputeInstanceSettingsResponseResult? PersonalComputeInstanceSettings;
        /// <summary>
        /// Specifies policy and settings for SSH access.
        /// </summary>
        public readonly Outputs.ComputeInstanceSshSettingsResponseResult? SshSettings;
        /// <summary>
        /// The current state of this ComputeInstance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Virtual network subnet resource ID the compute nodes belong to.
        /// </summary>
        public readonly Outputs.ResourceIdResponseResult? Subnet;
        /// <summary>
        /// Virtual Machine Size
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private ComputeInstanceResponsePropertiesResult(
            string? applicationSharingPolicy,

            ImmutableArray<Outputs.ComputeInstanceApplicationResponseResult> applications,

            string? computeInstanceAuthorizationType,

            Outputs.ComputeInstanceConnectivityEndpointsResponseResult connectivityEndpoints,

            Outputs.ComputeInstanceCreatedByResponseResult createdBy,

            ImmutableArray<Outputs.MachineLearningServiceErrorResponseResult> errors,

            Outputs.PersonalComputeInstanceSettingsResponseResult? personalComputeInstanceSettings,

            Outputs.ComputeInstanceSshSettingsResponseResult? sshSettings,

            string state,

            Outputs.ResourceIdResponseResult? subnet,

            string? vmSize)
        {
            ApplicationSharingPolicy = applicationSharingPolicy;
            Applications = applications;
            ComputeInstanceAuthorizationType = computeInstanceAuthorizationType;
            ConnectivityEndpoints = connectivityEndpoints;
            CreatedBy = createdBy;
            Errors = errors;
            PersonalComputeInstanceSettings = personalComputeInstanceSettings;
            SshSettings = sshSettings;
            State = state;
            Subnet = subnet;
            VmSize = vmSize;
        }
    }
}
