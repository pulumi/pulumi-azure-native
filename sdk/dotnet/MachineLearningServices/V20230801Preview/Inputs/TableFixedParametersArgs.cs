// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230801Preview.Inputs
{

    /// <summary>
    /// Fixed training parameters that won't be swept over during AutoML Table training.
    /// </summary>
    public sealed class TableFixedParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the boosting type, e.g gbdt for XGBoost.
        /// </summary>
        [Input("booster")]
        public Input<string>? Booster { get; set; }

        /// <summary>
        /// Specify the boosting type, e.g gbdt for LightGBM.
        /// </summary>
        [Input("boostingType")]
        public Input<string>? BoostingType { get; set; }

        /// <summary>
        /// Specify the grow policy, which controls the way new nodes are added to the tree.
        /// </summary>
        [Input("growPolicy")]
        public Input<string>? GrowPolicy { get; set; }

        /// <summary>
        /// The learning rate for the training procedure.
        /// </summary>
        [Input("learningRate")]
        public Input<double>? LearningRate { get; set; }

        /// <summary>
        /// Specify the Maximum number of discrete bins to bucket continuous features .
        /// </summary>
        [Input("maxBin")]
        public Input<int>? MaxBin { get; set; }

        /// <summary>
        /// Specify the max depth to limit the tree depth explicitly.
        /// </summary>
        [Input("maxDepth")]
        public Input<int>? MaxDepth { get; set; }

        /// <summary>
        /// Specify the max leaves to limit the tree leaves explicitly.
        /// </summary>
        [Input("maxLeaves")]
        public Input<int>? MaxLeaves { get; set; }

        /// <summary>
        /// The minimum number of data per leaf.
        /// </summary>
        [Input("minDataInLeaf")]
        public Input<int>? MinDataInLeaf { get; set; }

        /// <summary>
        /// Minimum loss reduction required to make a further partition on a leaf node of the tree.
        /// </summary>
        [Input("minSplitGain")]
        public Input<double>? MinSplitGain { get; set; }

        /// <summary>
        /// The name of the model to train.
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// Specify the number of trees (or rounds) in an model.
        /// </summary>
        [Input("nEstimators")]
        public Input<int>? NEstimators { get; set; }

        /// <summary>
        /// Specify the number of leaves.
        /// </summary>
        [Input("numLeaves")]
        public Input<int>? NumLeaves { get; set; }

        /// <summary>
        /// The name of the preprocessor to use.
        /// </summary>
        [Input("preprocessorName")]
        public Input<string>? PreprocessorName { get; set; }

        /// <summary>
        /// L1 regularization term on weights.
        /// </summary>
        [Input("regAlpha")]
        public Input<double>? RegAlpha { get; set; }

        /// <summary>
        /// L2 regularization term on weights.
        /// </summary>
        [Input("regLambda")]
        public Input<double>? RegLambda { get; set; }

        /// <summary>
        /// Subsample ratio of the training instance.
        /// </summary>
        [Input("subsample")]
        public Input<double>? Subsample { get; set; }

        /// <summary>
        /// Frequency of subsample.
        /// </summary>
        [Input("subsampleFreq")]
        public Input<double>? SubsampleFreq { get; set; }

        /// <summary>
        /// Specify the tree method.
        /// </summary>
        [Input("treeMethod")]
        public Input<string>? TreeMethod { get; set; }

        /// <summary>
        /// If true, center before scaling the data with StandardScalar.
        /// </summary>
        [Input("withMean")]
        public Input<bool>? WithMean { get; set; }

        /// <summary>
        /// If true, scaling the data with Unit Variance with StandardScalar.
        /// </summary>
        [Input("withStd")]
        public Input<bool>? WithStd { get; set; }

        public TableFixedParametersArgs()
        {
            WithMean = false;
            WithStd = false;
        }
        public static new TableFixedParametersArgs Empty => new TableFixedParametersArgs();
    }
}
