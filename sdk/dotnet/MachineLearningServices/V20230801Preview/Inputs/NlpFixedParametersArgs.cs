// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230801Preview.Inputs
{

    /// <summary>
    /// Fixed training parameters that won't be swept over during AutoML NLP training.
    /// </summary>
    public sealed class NlpFixedParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of steps to accumulate gradients over before running a backward pass.
        /// </summary>
        [Input("gradientAccumulationSteps")]
        public Input<int>? GradientAccumulationSteps { get; set; }

        /// <summary>
        /// The learning rate for the training procedure.
        /// </summary>
        [Input("learningRate")]
        public Input<double>? LearningRate { get; set; }

        /// <summary>
        /// The type of learning rate schedule to use during the training procedure.
        /// </summary>
        [Input("learningRateScheduler")]
        public InputUnion<string, Pulumi.AzureNative.MachineLearningServices.V20230801Preview.NlpLearningRateScheduler>? LearningRateScheduler { get; set; }

        /// <summary>
        /// The name of the model to train.
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// Number of training epochs.
        /// </summary>
        [Input("numberOfEpochs")]
        public Input<int>? NumberOfEpochs { get; set; }

        /// <summary>
        /// The batch size for the training procedure.
        /// </summary>
        [Input("trainingBatchSize")]
        public Input<int>? TrainingBatchSize { get; set; }

        /// <summary>
        /// The batch size to be used during evaluation.
        /// </summary>
        [Input("validationBatchSize")]
        public Input<int>? ValidationBatchSize { get; set; }

        /// <summary>
        /// The warmup ratio, used alongside LrSchedulerType.
        /// </summary>
        [Input("warmupRatio")]
        public Input<double>? WarmupRatio { get; set; }

        /// <summary>
        /// The weight decay for the training procedure.
        /// </summary>
        [Input("weightDecay")]
        public Input<double>? WeightDecay { get; set; }

        public NlpFixedParametersArgs()
        {
            LearningRateScheduler = "None";
        }
        public static new NlpFixedParametersArgs Empty => new NlpFixedParametersArgs();
    }
}
