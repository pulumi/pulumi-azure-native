// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401Preview
{
    /// <summary>
    /// Level at which content is filtered.
    /// </summary>
    [EnumType]
    public readonly struct AllowedContentLevel : IEquatable<AllowedContentLevel>
    {
        private readonly string _value;

        private AllowedContentLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowedContentLevel Low { get; } = new AllowedContentLevel("Low");
        public static AllowedContentLevel Medium { get; } = new AllowedContentLevel("Medium");
        public static AllowedContentLevel High { get; } = new AllowedContentLevel("High");

        public static bool operator ==(AllowedContentLevel left, AllowedContentLevel right) => left.Equals(right);
        public static bool operator !=(AllowedContentLevel left, AllowedContentLevel right) => !left.Equals(right);

        public static explicit operator string(AllowedContentLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowedContentLevel other && Equals(other);
        public bool Equals(AllowedContentLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Deployment model version upgrade option.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentModelVersionUpgradeOption : IEquatable<DeploymentModelVersionUpgradeOption>
    {
        private readonly string _value;

        private DeploymentModelVersionUpgradeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentModelVersionUpgradeOption OnceNewDefaultVersionAvailable { get; } = new DeploymentModelVersionUpgradeOption("OnceNewDefaultVersionAvailable");
        public static DeploymentModelVersionUpgradeOption OnceCurrentVersionExpired { get; } = new DeploymentModelVersionUpgradeOption("OnceCurrentVersionExpired");
        public static DeploymentModelVersionUpgradeOption NoAutoUpgrade { get; } = new DeploymentModelVersionUpgradeOption("NoAutoUpgrade");

        public static bool operator ==(DeploymentModelVersionUpgradeOption left, DeploymentModelVersionUpgradeOption right) => left.Equals(right);
        public static bool operator !=(DeploymentModelVersionUpgradeOption left, DeploymentModelVersionUpgradeOption right) => !left.Equals(right);

        public static explicit operator string(DeploymentModelVersionUpgradeOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentModelVersionUpgradeOption other && Equals(other);
        public bool Equals(DeploymentModelVersionUpgradeOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content source to apply the Content Filters.
    /// </summary>
    [EnumType]
    public readonly struct RaiPolicyContentSource : IEquatable<RaiPolicyContentSource>
    {
        private readonly string _value;

        private RaiPolicyContentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RaiPolicyContentSource Prompt { get; } = new RaiPolicyContentSource("Prompt");
        public static RaiPolicyContentSource Completion { get; } = new RaiPolicyContentSource("Completion");

        public static bool operator ==(RaiPolicyContentSource left, RaiPolicyContentSource right) => left.Equals(right);
        public static bool operator !=(RaiPolicyContentSource left, RaiPolicyContentSource right) => !left.Equals(right);

        public static explicit operator string(RaiPolicyContentSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RaiPolicyContentSource other && Equals(other);
        public bool Equals(RaiPolicyContentSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content Filters mode.
    /// </summary>
    [EnumType]
    public readonly struct RaiPolicyMode : IEquatable<RaiPolicyMode>
    {
        private readonly string _value;

        private RaiPolicyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RaiPolicyMode Default { get; } = new RaiPolicyMode("Default");
        public static RaiPolicyMode Deferred { get; } = new RaiPolicyMode("Deferred");
        public static RaiPolicyMode Blocking { get; } = new RaiPolicyMode("Blocking");

        public static bool operator ==(RaiPolicyMode left, RaiPolicyMode right) => left.Equals(right);
        public static bool operator !=(RaiPolicyMode left, RaiPolicyMode right) => !left.Equals(right);

        public static explicit operator string(RaiPolicyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RaiPolicyMode other && Equals(other);
        public bool Equals(RaiPolicyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content Filters policy type.
    /// </summary>
    [EnumType]
    public readonly struct RaiPolicyType : IEquatable<RaiPolicyType>
    {
        private readonly string _value;

        private RaiPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RaiPolicyType UserManaged { get; } = new RaiPolicyType("UserManaged");
        public static RaiPolicyType SystemManaged { get; } = new RaiPolicyType("SystemManaged");

        public static bool operator ==(RaiPolicyType left, RaiPolicyType right) => left.Equals(right);
        public static bool operator !=(RaiPolicyType left, RaiPolicyType right) => !left.Equals(right);

        public static explicit operator string(RaiPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RaiPolicyType other && Equals(other);
        public bool Equals(RaiPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
