// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401Preview.Inputs
{

    /// <summary>
    /// Environment configuration options.
    /// </summary>
    public sealed class PoolEnvironmentConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARM resource ID of the environment specification for the inference pool.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// Environment variables configuration for the inference pool.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Liveness probe monitors the health of the container regularly.
        /// </summary>
        [Input("livenessProbe")]
        public Input<Inputs.ProbeSettingsArgs>? LivenessProbe { get; set; }

        /// <summary>
        /// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
        /// </summary>
        [Input("readinessProbe")]
        public Input<Inputs.ProbeSettingsArgs>? ReadinessProbe { get; set; }

        /// <summary>
        /// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
        /// </summary>
        [Input("startupProbe")]
        public Input<Inputs.ProbeSettingsArgs>? StartupProbe { get; set; }

        public PoolEnvironmentConfigurationArgs()
        {
        }
        public static new PoolEnvironmentConfigurationArgs Empty => new PoolEnvironmentConfigurationArgs();
    }
}
