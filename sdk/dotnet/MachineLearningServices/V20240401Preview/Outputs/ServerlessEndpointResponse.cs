// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401Preview.Outputs
{

    [OutputType]
    public sealed class ServerlessEndpointResponse
    {
        /// <summary>
        /// Specifies the authentication mode for the Serverless endpoint.
        /// </summary>
        public readonly string? AuthMode;
        /// <summary>
        /// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
        /// will be allocated capacity from the specified capacity reservation group.
        /// </summary>
        public readonly Outputs.ServerlessEndpointCapacityReservationResponse? CapacityReservation;
        /// <summary>
        /// State of the Serverless Endpoint.
        /// </summary>
        public readonly string EndpointState;
        /// <summary>
        /// The inference uri to target when making requests against the serverless endpoint
        /// </summary>
        public readonly Outputs.ServerlessInferenceEndpointResponse InferenceEndpoint;
        /// <summary>
        /// The MarketplaceSubscription ARM ID associated to this ServerlessEndpoint.
        /// </summary>
        public readonly string MarketplaceSubscriptionId;
        /// <summary>
        /// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
        /// </summary>
        public readonly Outputs.ModelSettingsResponse? ModelSettings;
        /// <summary>
        /// The publisher-defined Serverless Offer to provision the endpoint with.
        /// </summary>
        public readonly Outputs.ServerlessOfferResponse? Offer;
        /// <summary>
        /// Provisioning state for the endpoint.
        /// </summary>
        public readonly string ProvisioningState;

        [OutputConstructor]
        private ServerlessEndpointResponse(
            string? authMode,

            Outputs.ServerlessEndpointCapacityReservationResponse? capacityReservation,

            string endpointState,

            Outputs.ServerlessInferenceEndpointResponse inferenceEndpoint,

            string marketplaceSubscriptionId,

            Outputs.ModelSettingsResponse? modelSettings,

            Outputs.ServerlessOfferResponse? offer,

            string provisioningState)
        {
            AuthMode = authMode;
            CapacityReservation = capacityReservation;
            EndpointState = endpointState;
            InferenceEndpoint = inferenceEndpoint;
            MarketplaceSubscriptionId = marketplaceSubscriptionId;
            ModelSettings = modelSettings;
            Offer = offer;
            ProvisioningState = provisioningState;
        }
    }
}
