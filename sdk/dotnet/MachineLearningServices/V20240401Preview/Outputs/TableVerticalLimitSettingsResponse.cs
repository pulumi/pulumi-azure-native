// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401Preview.Outputs
{

    /// <summary>
    /// Job execution constraints.
    /// </summary>
    [OutputType]
    public sealed class TableVerticalLimitSettingsResponse
    {
        /// <summary>
        /// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
        /// </summary>
        public readonly bool? EnableEarlyTermination;
        /// <summary>
        /// Exit score for the AutoML job.
        /// </summary>
        public readonly double? ExitScore;
        /// <summary>
        /// Maximum Concurrent iterations.
        /// </summary>
        public readonly int? MaxConcurrentTrials;
        /// <summary>
        /// Max cores per iteration.
        /// </summary>
        public readonly int? MaxCoresPerTrial;
        /// <summary>
        /// Maximum nodes to use for the experiment.
        /// </summary>
        public readonly int? MaxNodes;
        /// <summary>
        /// Number of iterations.
        /// </summary>
        public readonly int? MaxTrials;
        /// <summary>
        /// Number of concurrent sweeping runs that user wants to trigger.
        /// </summary>
        public readonly int? SweepConcurrentTrials;
        /// <summary>
        /// Number of sweeping runs that user wants to trigger.
        /// </summary>
        public readonly int? SweepTrials;
        /// <summary>
        /// AutoML job timeout.
        /// </summary>
        public readonly string? Timeout;
        /// <summary>
        /// Iteration timeout.
        /// </summary>
        public readonly string? TrialTimeout;

        [OutputConstructor]
        private TableVerticalLimitSettingsResponse(
            bool? enableEarlyTermination,

            double? exitScore,

            int? maxConcurrentTrials,

            int? maxCoresPerTrial,

            int? maxNodes,

            int? maxTrials,

            int? sweepConcurrentTrials,

            int? sweepTrials,

            string? timeout,

            string? trialTimeout)
        {
            EnableEarlyTermination = enableEarlyTermination;
            ExitScore = exitScore;
            MaxConcurrentTrials = maxConcurrentTrials;
            MaxCoresPerTrial = maxCoresPerTrial;
            MaxNodes = maxNodes;
            MaxTrials = maxTrials;
            SweepConcurrentTrials = sweepConcurrentTrials;
            SweepTrials = sweepTrials;
            Timeout = timeout;
            TrialTimeout = trialTimeout;
        }
    }
}
