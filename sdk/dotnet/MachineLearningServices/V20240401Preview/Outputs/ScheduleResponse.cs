// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401Preview.Outputs
{

    /// <summary>
    /// Base definition of a schedule
    /// </summary>
    [OutputType]
    public sealed class ScheduleResponse
    {
        /// <summary>
        /// [Required] Specifies the action of the schedule
        /// </summary>
        public readonly object Action;
        /// <summary>
        /// The asset description text.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of schedule.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Is the schedule enabled?
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// The asset property dictionary.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Properties;
        /// <summary>
        /// Provisioning state for the schedule.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Tag dictionary. Tags can be added, removed, and updated.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// [Required] Specifies the trigger details
        /// </summary>
        public readonly Union<Outputs.CronTriggerResponse, Outputs.RecurrenceTriggerResponse> Trigger;

        [OutputConstructor]
        private ScheduleResponse(
            object action,

            string? description,

            string? displayName,

            bool? isEnabled,

            ImmutableDictionary<string, string>? properties,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            Union<Outputs.CronTriggerResponse, Outputs.RecurrenceTriggerResponse> trigger)
        {
            Action = action;
            Description = description;
            DisplayName = displayName;
            IsEnabled = isEnabled;
            Properties = properties;
            ProvisioningState = provisioningState;
            Tags = tags;
            Trigger = trigger;
        }
    }
}
