// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230401Preview.Outputs
{

    /// <summary>
    /// Forecasting Training related configuration.
    /// </summary>
    [OutputType]
    public sealed class ForecastingTrainingSettingsResponse
    {
        /// <summary>
        /// Allowed models for forecasting task.
        /// </summary>
        public readonly ImmutableArray<string> AllowedTrainingAlgorithms;
        /// <summary>
        /// Blocked models for forecasting task.
        /// </summary>
        public readonly ImmutableArray<string> BlockedTrainingAlgorithms;
        /// <summary>
        /// Enable recommendation of DNN models.
        /// </summary>
        public readonly bool? EnableDnnTraining;
        /// <summary>
        /// Flag to turn on explainability on best model.
        /// </summary>
        public readonly bool? EnableModelExplainability;
        /// <summary>
        /// Flag for enabling onnx compatible models.
        /// </summary>
        public readonly bool? EnableOnnxCompatibleModels;
        /// <summary>
        /// Enable stack ensemble run.
        /// </summary>
        public readonly bool? EnableStackEnsemble;
        /// <summary>
        /// Enable voting ensemble run.
        /// </summary>
        public readonly bool? EnableVoteEnsemble;
        /// <summary>
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </summary>
        public readonly string? EnsembleModelDownloadTimeout;
        /// <summary>
        /// Stack ensemble settings for stack ensemble run.
        /// </summary>
        public readonly Outputs.StackEnsembleSettingsResponse? StackEnsembleSettings;
        /// <summary>
        /// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
        /// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
        /// If 'NonDistributed' then only non distributed algorithms are chosen.
        /// </summary>
        public readonly string? TrainingMode;

        [OutputConstructor]
        private ForecastingTrainingSettingsResponse(
            ImmutableArray<string> allowedTrainingAlgorithms,

            ImmutableArray<string> blockedTrainingAlgorithms,

            bool? enableDnnTraining,

            bool? enableModelExplainability,

            bool? enableOnnxCompatibleModels,

            bool? enableStackEnsemble,

            bool? enableVoteEnsemble,

            string? ensembleModelDownloadTimeout,

            Outputs.StackEnsembleSettingsResponse? stackEnsembleSettings,

            string? trainingMode)
        {
            AllowedTrainingAlgorithms = allowedTrainingAlgorithms;
            BlockedTrainingAlgorithms = blockedTrainingAlgorithms;
            EnableDnnTraining = enableDnnTraining;
            EnableModelExplainability = enableModelExplainability;
            EnableOnnxCompatibleModels = enableOnnxCompatibleModels;
            EnableStackEnsemble = enableStackEnsemble;
            EnableVoteEnsemble = enableVoteEnsemble;
            EnsembleModelDownloadTimeout = ensembleModelDownloadTimeout;
            StackEnsembleSettings = stackEnsembleSettings;
            TrainingMode = trainingMode;
        }
    }
}
