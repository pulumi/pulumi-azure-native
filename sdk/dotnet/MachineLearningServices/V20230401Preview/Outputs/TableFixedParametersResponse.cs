// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230401Preview.Outputs
{

    /// <summary>
    /// Fixed training parameters that won't be swept over during AutoML Table training.
    /// </summary>
    [OutputType]
    public sealed class TableFixedParametersResponse
    {
        /// <summary>
        /// Specify the boosting type, e.g gbdt for XGBoost.
        /// </summary>
        public readonly string? Booster;
        /// <summary>
        /// Specify the boosting type, e.g gbdt for LightGBM.
        /// </summary>
        public readonly string? BoostingType;
        /// <summary>
        /// Specify the grow policy, which controls the way new nodes are added to the tree.
        /// </summary>
        public readonly string? GrowPolicy;
        /// <summary>
        /// The learning rate for the training procedure.
        /// </summary>
        public readonly double? LearningRate;
        /// <summary>
        /// Specify the Maximum number of discrete bins to bucket continuous features .
        /// </summary>
        public readonly int? MaxBin;
        /// <summary>
        /// Specify the max depth to limit the tree depth explicitly.
        /// </summary>
        public readonly int? MaxDepth;
        /// <summary>
        /// Specify the max leaves to limit the tree leaves explicitly.
        /// </summary>
        public readonly int? MaxLeaves;
        /// <summary>
        /// The minimum number of data per leaf.
        /// </summary>
        public readonly int? MinDataInLeaf;
        /// <summary>
        /// Minimum loss reduction required to make a further partition on a leaf node of the tree.
        /// </summary>
        public readonly double? MinSplitGain;
        /// <summary>
        /// The name of the model to train.
        /// </summary>
        public readonly string? ModelName;
        /// <summary>
        /// Specify the number of trees (or rounds) in an model.
        /// </summary>
        public readonly int? NEstimators;
        /// <summary>
        /// Specify the number of leaves.
        /// </summary>
        public readonly int? NumLeaves;
        /// <summary>
        /// The name of the preprocessor to use.
        /// </summary>
        public readonly string? PreprocessorName;
        /// <summary>
        /// L1 regularization term on weights.
        /// </summary>
        public readonly double? RegAlpha;
        /// <summary>
        /// L2 regularization term on weights.
        /// </summary>
        public readonly double? RegLambda;
        /// <summary>
        /// Subsample ratio of the training instance.
        /// </summary>
        public readonly double? Subsample;
        /// <summary>
        /// Frequency of subsample.
        /// </summary>
        public readonly double? SubsampleFreq;
        /// <summary>
        /// Specify the tree method.
        /// </summary>
        public readonly string? TreeMethod;
        /// <summary>
        /// If true, center before scaling the data with StandardScalar.
        /// </summary>
        public readonly bool? WithMean;
        /// <summary>
        /// If true, scaling the data with Unit Variance with StandardScalar.
        /// </summary>
        public readonly bool? WithStd;

        [OutputConstructor]
        private TableFixedParametersResponse(
            string? booster,

            string? boostingType,

            string? growPolicy,

            double? learningRate,

            int? maxBin,

            int? maxDepth,

            int? maxLeaves,

            int? minDataInLeaf,

            double? minSplitGain,

            string? modelName,

            int? nEstimators,

            int? numLeaves,

            string? preprocessorName,

            double? regAlpha,

            double? regLambda,

            double? subsample,

            double? subsampleFreq,

            string? treeMethod,

            bool? withMean,

            bool? withStd)
        {
            Booster = booster;
            BoostingType = boostingType;
            GrowPolicy = growPolicy;
            LearningRate = learningRate;
            MaxBin = maxBin;
            MaxDepth = maxDepth;
            MaxLeaves = maxLeaves;
            MinDataInLeaf = minDataInLeaf;
            MinSplitGain = minSplitGain;
            ModelName = modelName;
            NEstimators = nEstimators;
            NumLeaves = numLeaves;
            PreprocessorName = preprocessorName;
            RegAlpha = regAlpha;
            RegLambda = regLambda;
            Subsample = subsample;
            SubsampleFreq = subsampleFreq;
            TreeMethod = treeMethod;
            WithMean = withMean;
            WithStd = withStd;
        }
    }
}
