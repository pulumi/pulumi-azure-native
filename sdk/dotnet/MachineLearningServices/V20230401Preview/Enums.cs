// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MachineLearningServices.V20230401Preview
{
    /// <summary>
    /// When to check if an asset is expired
    /// </summary>
    [EnumType]
    public readonly struct AutoDeleteCondition : IEquatable<AutoDeleteCondition>
    {
        private readonly string _value;

        private AutoDeleteCondition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoDeleteCondition CreatedGreaterThan { get; } = new AutoDeleteCondition("CreatedGreaterThan");
        public static AutoDeleteCondition LastAccessedGreaterThan { get; } = new AutoDeleteCondition("LastAccessedGreaterThan");

        public static bool operator ==(AutoDeleteCondition left, AutoDeleteCondition right) => left.Equals(right);
        public static bool operator !=(AutoDeleteCondition left, AutoDeleteCondition right) => !left.Equals(right);

        public static explicit operator string(AutoDeleteCondition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoDeleteCondition other && Equals(other);
        public bool Equals(AutoDeleteCondition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to determine the email notification type.
    /// </summary>
    [EnumType]
    public readonly struct EmailNotificationEnableType : IEquatable<EmailNotificationEnableType>
    {
        private readonly string _value;

        private EmailNotificationEnableType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EmailNotificationEnableType JobCompleted { get; } = new EmailNotificationEnableType("JobCompleted");
        public static EmailNotificationEnableType JobFailed { get; } = new EmailNotificationEnableType("JobFailed");
        public static EmailNotificationEnableType JobCancelled { get; } = new EmailNotificationEnableType("JobCancelled");

        public static bool operator ==(EmailNotificationEnableType left, EmailNotificationEnableType right) => left.Equals(right);
        public static bool operator !=(EmailNotificationEnableType left, EmailNotificationEnableType right) => !left.Equals(right);

        public static explicit operator string(EmailNotificationEnableType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EmailNotificationEnableType other && Equals(other);
        public bool Equals(EmailNotificationEnableType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether or not the encryption is enabled for the workspace.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionStatus : IEquatable<EncryptionStatus>
    {
        private readonly string _value;

        private EncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionStatus Enabled { get; } = new EncryptionStatus("Enabled");
        public static EncryptionStatus Disabled { get; } = new EncryptionStatus("Disabled");

        public static bool operator ==(EncryptionStatus left, EncryptionStatus right) => left.Equals(right);
        public static bool operator !=(EncryptionStatus left, EncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(EncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionStatus other && Equals(other);
        public bool Equals(EncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the data type
    /// </summary>
    [EnumType]
    public readonly struct FeatureDataType : IEquatable<FeatureDataType>
    {
        private readonly string _value;

        private FeatureDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureDataType String { get; } = new FeatureDataType("String");
        public static FeatureDataType Integer { get; } = new FeatureDataType("Integer");
        public static FeatureDataType Long { get; } = new FeatureDataType("Long");
        public static FeatureDataType Float { get; } = new FeatureDataType("Float");
        public static FeatureDataType Double { get; } = new FeatureDataType("Double");
        public static FeatureDataType Binary { get; } = new FeatureDataType("Binary");
        public static FeatureDataType Datetime { get; } = new FeatureDataType("Datetime");
        public static FeatureDataType Boolean { get; } = new FeatureDataType("Boolean");

        public static bool operator ==(FeatureDataType left, FeatureDataType right) => left.Equals(right);
        public static bool operator !=(FeatureDataType left, FeatureDataType right) => !left.Equals(right);

        public static explicit operator string(FeatureDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureDataType other && Equals(other);
        public bool Equals(FeatureDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Specifies the type of identity framework.
    /// </summary>
    [EnumType]
    public readonly struct IdentityConfigurationType : IEquatable<IdentityConfigurationType>
    {
        private readonly string _value;

        private IdentityConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityConfigurationType Managed { get; } = new IdentityConfigurationType("Managed");
        public static IdentityConfigurationType AMLToken { get; } = new IdentityConfigurationType("AMLToken");
        public static IdentityConfigurationType UserIdentity { get; } = new IdentityConfigurationType("UserIdentity");

        public static bool operator ==(IdentityConfigurationType left, IdentityConfigurationType right) => left.Equals(right);
        public static bool operator !=(IdentityConfigurationType left, IdentityConfigurationType right) => !left.Equals(right);

        public static explicit operator string(IdentityConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityConfigurationType other && Equals(other);
        public bool Equals(IdentityConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Annotation type of image labeling job.
    /// </summary>
    [EnumType]
    public readonly struct ImageAnnotationType : IEquatable<ImageAnnotationType>
    {
        private readonly string _value;

        private ImageAnnotationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageAnnotationType Classification { get; } = new ImageAnnotationType("Classification");
        public static ImageAnnotationType BoundingBox { get; } = new ImageAnnotationType("BoundingBox");
        public static ImageAnnotationType InstanceSegmentation { get; } = new ImageAnnotationType("InstanceSegmentation");

        public static bool operator ==(ImageAnnotationType left, ImageAnnotationType right) => left.Equals(right);
        public static bool operator !=(ImageAnnotationType left, ImageAnnotationType right) => !left.Equals(right);

        public static explicit operator string(ImageAnnotationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageAnnotationType other && Equals(other);
        public bool Equals(ImageAnnotationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to enable incremental data refresh.
    /// </summary>
    [EnumType]
    public readonly struct IncrementalDataRefresh : IEquatable<IncrementalDataRefresh>
    {
        private readonly string _value;

        private IncrementalDataRefresh(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IncrementalDataRefresh Enabled { get; } = new IncrementalDataRefresh("Enabled");
        public static IncrementalDataRefresh Disabled { get; } = new IncrementalDataRefresh("Disabled");

        public static bool operator ==(IncrementalDataRefresh left, IncrementalDataRefresh right) => left.Equals(right);
        public static bool operator !=(IncrementalDataRefresh left, IncrementalDataRefresh right) => !left.Equals(right);

        public static explicit operator string(IncrementalDataRefresh value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncrementalDataRefresh other && Equals(other);
        public bool Equals(IncrementalDataRefresh other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Isolation mode for the managed network of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct IsolationMode : IEquatable<IsolationMode>
    {
        private readonly string _value;

        private IsolationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsolationMode Disabled { get; } = new IsolationMode("Disabled");
        public static IsolationMode AllowInternetOutbound { get; } = new IsolationMode("AllowInternetOutbound");
        public static IsolationMode AllowOnlyApprovedOutbound { get; } = new IsolationMode("AllowOnlyApprovedOutbound");

        public static bool operator ==(IsolationMode left, IsolationMode right) => left.Equals(right);
        public static bool operator !=(IsolationMode left, IsolationMode right) => !left.Equals(right);

        public static explicit operator string(IsolationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsolationMode other && Equals(other);
        public bool Equals(IsolationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Specifies the type of job.
    /// </summary>
    [EnumType]
    public readonly struct JobType : IEquatable<JobType>
    {
        private readonly string _value;

        private JobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobType AutoML { get; } = new JobType("AutoML");
        public static JobType Command { get; } = new JobType("Command");
        public static JobType Labeling { get; } = new JobType("Labeling");
        public static JobType Sweep { get; } = new JobType("Sweep");
        public static JobType Pipeline { get; } = new JobType("Pipeline");
        public static JobType Spark { get; } = new JobType("Spark");

        public static bool operator ==(JobType left, JobType right) => left.Equals(right);
        public static bool operator !=(JobType left, JobType right) => !left.Equals(right);

        public static explicit operator string(JobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobType other && Equals(other);
        public bool Equals(JobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Indicates whether MLAssist feature is enabled.
    /// </summary>
    [EnumType]
    public readonly struct MLAssistConfigurationType : IEquatable<MLAssistConfigurationType>
    {
        private readonly string _value;

        private MLAssistConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MLAssistConfigurationType Enabled { get; } = new MLAssistConfigurationType("Enabled");
        public static MLAssistConfigurationType Disabled { get; } = new MLAssistConfigurationType("Disabled");

        public static bool operator ==(MLAssistConfigurationType left, MLAssistConfigurationType right) => left.Equals(right);
        public static bool operator !=(MLAssistConfigurationType left, MLAssistConfigurationType right) => !left.Equals(right);

        public static explicit operator string(MLAssistConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MLAssistConfigurationType other && Equals(other);
        public bool Equals(MLAssistConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status for the managed network of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct ManagedNetworkStatus : IEquatable<ManagedNetworkStatus>
    {
        private readonly string _value;

        private ManagedNetworkStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedNetworkStatus Inactive { get; } = new ManagedNetworkStatus("Inactive");
        public static ManagedNetworkStatus Active { get; } = new ManagedNetworkStatus("Active");

        public static bool operator ==(ManagedNetworkStatus left, ManagedNetworkStatus right) => left.Equals(right);
        public static bool operator !=(ManagedNetworkStatus left, ManagedNetworkStatus right) => !left.Equals(right);

        public static explicit operator string(ManagedNetworkStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedNetworkStatus other && Equals(other);
        public bool Equals(ManagedNetworkStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the stores to which materialization should happen
    /// </summary>
    [EnumType]
    public readonly struct MaterializationStoreType : IEquatable<MaterializationStoreType>
    {
        private readonly string _value;

        private MaterializationStoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MaterializationStoreType None { get; } = new MaterializationStoreType("None");
        public static MaterializationStoreType Online { get; } = new MaterializationStoreType("Online");
        public static MaterializationStoreType Offline { get; } = new MaterializationStoreType("Offline");
        public static MaterializationStoreType OnlineAndOffline { get; } = new MaterializationStoreType("OnlineAndOffline");

        public static bool operator ==(MaterializationStoreType left, MaterializationStoreType right) => left.Equals(right);
        public static bool operator !=(MaterializationStoreType left, MaterializationStoreType right) => !left.Equals(right);

        public static explicit operator string(MaterializationStoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MaterializationStoreType other && Equals(other);
        public bool Equals(MaterializationStoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Media type of the job.
    /// </summary>
    [EnumType]
    public readonly struct MediaType : IEquatable<MediaType>
    {
        private readonly string _value;

        private MediaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MediaType Image { get; } = new MediaType("Image");
        public static MediaType Text { get; } = new MediaType("Text");

        public static bool operator ==(MediaType left, MediaType right) => left.Equals(right);
        public static bool operator !=(MediaType left, MediaType right) => !left.Equals(right);

        public static explicit operator string(MediaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MediaType other && Equals(other);
        public bool Equals(MediaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether it is allowed to select multiple classes in this category.
    /// </summary>
    [EnumType]
    public readonly struct MultiSelect : IEquatable<MultiSelect>
    {
        private readonly string _value;

        private MultiSelect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MultiSelect Enabled { get; } = new MultiSelect("Enabled");
        public static MultiSelect Disabled { get; } = new MultiSelect("Disabled");

        public static bool operator ==(MultiSelect left, MultiSelect right) => left.Equals(right);
        public static bool operator !=(MultiSelect left, MultiSelect right) => !left.Equals(right);

        public static explicit operator string(MultiSelect value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MultiSelect other && Equals(other);
        public bool Equals(MultiSelect other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Type of the Nodes value
    /// </summary>
    [EnumType]
    public readonly struct NodesValueType : IEquatable<NodesValueType>
    {
        private readonly string _value;

        private NodesValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodesValueType All { get; } = new NodesValueType("All");
        public static NodesValueType Custom { get; } = new NodesValueType("Custom");

        public static bool operator ==(NodesValueType left, NodesValueType right) => left.Equals(right);
        public static bool operator !=(NodesValueType left, NodesValueType right) => !left.Equals(right);

        public static explicit operator string(NodesValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodesValueType other && Equals(other);
        public bool Equals(NodesValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");
        public static PrivateEndpointServiceConnectionStatus Disconnected { get; } = new PrivateEndpointServiceConnectionStatus("Disconnected");
        public static PrivateEndpointServiceConnectionStatus Timeout { get; } = new PrivateEndpointServiceConnectionStatus("Timeout");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether requests from Public Network are allowed.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] The frequency to trigger schedule.
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceFrequency : IEquatable<RecurrenceFrequency>
    {
        private readonly string _value;

        private RecurrenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Minute frequency
        /// </summary>
        public static RecurrenceFrequency Minute { get; } = new RecurrenceFrequency("Minute");
        /// <summary>
        /// Hour frequency
        /// </summary>
        public static RecurrenceFrequency Hour { get; } = new RecurrenceFrequency("Hour");
        /// <summary>
        /// Day frequency
        /// </summary>
        public static RecurrenceFrequency Day { get; } = new RecurrenceFrequency("Day");
        /// <summary>
        /// Week frequency
        /// </summary>
        public static RecurrenceFrequency Week { get; } = new RecurrenceFrequency("Week");
        /// <summary>
        /// Month frequency
        /// </summary>
        public static RecurrenceFrequency Month { get; } = new RecurrenceFrequency("Month");

        public static bool operator ==(RecurrenceFrequency left, RecurrenceFrequency right) => left.Equals(right);
        public static bool operator !=(RecurrenceFrequency left, RecurrenceFrequency right) => !left.Equals(right);

        public static explicit operator string(RecurrenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceFrequency other && Equals(other);
        public bool Equals(RecurrenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Category of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleCategory : IEquatable<RuleCategory>
    {
        private readonly string _value;

        private RuleCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleCategory Required { get; } = new RuleCategory("Required");
        public static RuleCategory Recommended { get; } = new RuleCategory("Recommended");
        public static RuleCategory UserDefined { get; } = new RuleCategory("UserDefined");

        public static bool operator ==(RuleCategory left, RuleCategory right) => left.Equals(right);
        public static bool operator !=(RuleCategory left, RuleCategory right) => !left.Equals(right);

        public static explicit operator string(RuleCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleCategory other && Equals(other);
        public bool Equals(RuleCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleStatus : IEquatable<RuleStatus>
    {
        private readonly string _value;

        private RuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleStatus Inactive { get; } = new RuleStatus("Inactive");
        public static RuleStatus Active { get; } = new RuleStatus("Active");

        public static bool operator ==(RuleStatus left, RuleStatus right) => left.Equals(right);
        public static bool operator !=(RuleStatus left, RuleStatus right) => !left.Equals(right);

        public static explicit operator string(RuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleStatus other && Equals(other);
        public bool Equals(RuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of a managed network Outbound Rule of a machine learning workspace.
    /// </summary>
    [EnumType]
    public readonly struct RuleType : IEquatable<RuleType>
    {
        private readonly string _value;

        private RuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleType FQDN { get; } = new RuleType("FQDN");
        public static RuleType PrivateEndpoint { get; } = new RuleType("PrivateEndpoint");
        public static RuleType ServiceTag { get; } = new RuleType("ServiceTag");

        public static bool operator ==(RuleType left, RuleType right) => left.Equals(right);
        public static bool operator !=(RuleType left, RuleType right) => !left.Equals(right);

        public static explicit operator string(RuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleType other && Equals(other);
        public bool Equals(RuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Free { get; } = new SkuTier("Free");
        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Annotation type of text labeling job.
    /// </summary>
    [EnumType]
    public readonly struct TextAnnotationType : IEquatable<TextAnnotationType>
    {
        private readonly string _value;

        private TextAnnotationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TextAnnotationType Classification { get; } = new TextAnnotationType("Classification");
        public static TextAnnotationType NamedEntityRecognition { get; } = new TextAnnotationType("NamedEntityRecognition");

        public static bool operator ==(TextAnnotationType left, TextAnnotationType right) => left.Equals(right);
        public static bool operator !=(TextAnnotationType left, TextAnnotationType right) => !left.Equals(right);

        public static explicit operator string(TextAnnotationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TextAnnotationType other && Equals(other);
        public bool Equals(TextAnnotationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] 
    /// </summary>
    [EnumType]
    public readonly struct TriggerType : IEquatable<TriggerType>
    {
        private readonly string _value;

        private TriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerType Recurrence { get; } = new TriggerType("Recurrence");
        public static TriggerType Cron { get; } = new TriggerType("Cron");

        public static bool operator ==(TriggerType left, TriggerType right) => left.Equals(right);
        public static bool operator !=(TriggerType left, TriggerType right) => !left.Equals(right);

        public static explicit operator string(TriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerType other && Equals(other);
        public bool Equals(TriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// [Required] Specifies the type of service to send a callback
    /// </summary>
    [EnumType]
    public readonly struct WebhookType : IEquatable<WebhookType>
    {
        private readonly string _value;

        private WebhookType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebhookType AzureDevOps { get; } = new WebhookType("AzureDevOps");

        public static bool operator ==(WebhookType left, WebhookType right) => left.Equals(right);
        public static bool operator !=(WebhookType left, WebhookType right) => !left.Equals(right);

        public static explicit operator string(WebhookType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebhookType other && Equals(other);
        public bool Equals(WebhookType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum of weekday
    /// </summary>
    [EnumType]
    public readonly struct WeekDay : IEquatable<WeekDay>
    {
        private readonly string _value;

        private WeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Monday weekday
        /// </summary>
        public static WeekDay Monday { get; } = new WeekDay("Monday");
        /// <summary>
        /// Tuesday weekday
        /// </summary>
        public static WeekDay Tuesday { get; } = new WeekDay("Tuesday");
        /// <summary>
        /// Wednesday weekday
        /// </summary>
        public static WeekDay Wednesday { get; } = new WeekDay("Wednesday");
        /// <summary>
        /// Thursday weekday
        /// </summary>
        public static WeekDay Thursday { get; } = new WeekDay("Thursday");
        /// <summary>
        /// Friday weekday
        /// </summary>
        public static WeekDay Friday { get; } = new WeekDay("Friday");
        /// <summary>
        /// Saturday weekday
        /// </summary>
        public static WeekDay Saturday { get; } = new WeekDay("Saturday");
        /// <summary>
        /// Sunday weekday
        /// </summary>
        public static WeekDay Sunday { get; } = new WeekDay("Sunday");

        public static bool operator ==(WeekDay left, WeekDay right) => left.Equals(right);
        public static bool operator !=(WeekDay left, WeekDay right) => !left.Equals(right);

        public static explicit operator string(WeekDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekDay other && Equals(other);
        public bool Equals(WeekDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
