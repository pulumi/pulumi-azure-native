// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.MachineLearningServices.Latest.Outputs
{

    [OutputType]
    public sealed class ContainerResourceRequirementsResponse
    {
        /// <summary>
        /// The minimum amount of CPU cores to be used by the container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </summary>
        public readonly double? Cpu;
        /// <summary>
        /// The maximum amount of CPU cores allowed to be used by the container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </summary>
        public readonly double? CpuLimit;
        /// <summary>
        /// The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
        /// </summary>
        public readonly int? Fpga;
        /// <summary>
        /// The number of GPU cores in the container.
        /// </summary>
        public readonly int? Gpu;
        /// <summary>
        /// The minimum amount of memory (in GB) to be used by the container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </summary>
        public readonly double? MemoryInGB;
        /// <summary>
        /// The maximum amount of memory (in GB) allowed to be used by the container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </summary>
        public readonly double? MemoryInGBLimit;

        [OutputConstructor]
        private ContainerResourceRequirementsResponse(
            double? cpu,

            double? cpuLimit,

            int? fpga,

            int? gpu,

            double? memoryInGB,

            double? memoryInGBLimit)
        {
            Cpu = cpu;
            CpuLimit = cpuLimit;
            Fpga = fpga;
            Gpu = gpu;
            MemoryInGB = memoryInGB;
            MemoryInGBLimit = memoryInGBLimit;
        }
    }
}
