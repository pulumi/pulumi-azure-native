// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230201Preview.Outputs
{

    /// <summary>
    /// Dto object representing the feature set job
    /// </summary>
    [OutputType]
    public sealed class FeaturesetJobResponse
    {
        /// <summary>
        /// Specifies the created date
        /// </summary>
        public readonly string? CreatedDate;
        /// <summary>
        /// Specifies the display name
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Specifies the duration
        /// </summary>
        public readonly string? Duration;
        /// <summary>
        /// Specifies the experiment id
        /// </summary>
        public readonly string? ExperimentId;
        /// <summary>
        /// Specifies the backfill feature window to be materialized
        /// </summary>
        public readonly Outputs.FeatureWindowResponse? FeatureWindow;
        /// <summary>
        /// Specifies the job id
        /// </summary>
        public readonly string? JobId;
        /// <summary>
        /// Specifies the job status
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Specifies the tags if any
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Specifies the feature store job type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private FeaturesetJobResponse(
            string? createdDate,

            string? displayName,

            string? duration,

            string? experimentId,

            Outputs.FeatureWindowResponse? featureWindow,

            string? jobId,

            string? status,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            CreatedDate = createdDate;
            DisplayName = displayName;
            Duration = duration;
            ExperimentId = experimentId;
            FeatureWindow = featureWindow;
            JobId = jobId;
            Status = status;
            Tags = tags;
            Type = type;
        }
    }
}
