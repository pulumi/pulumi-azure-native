// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230201Preview.Outputs
{

    [OutputType]
    public sealed class RecurrenceTriggerResponse
    {
        /// <summary>
        /// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
        /// Recommented format would be "2022-06-01T00:00:01"
        /// If not present, the schedule will run indefinitely
        /// </summary>
        public readonly string? EndTime;
        /// <summary>
        /// [Required] The frequency to trigger schedule.
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// [Required] Specifies schedule interval in conjunction with frequency
        /// </summary>
        public readonly int Interval;
        /// <summary>
        /// The recurrence schedule.
        /// </summary>
        public readonly Outputs.RecurrenceScheduleResponse? Schedule;
        /// <summary>
        /// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
        /// </summary>
        public readonly string? TimeZone;
        /// <summary>
        /// 
        /// Expected value is 'Recurrence'.
        /// </summary>
        public readonly string TriggerType;

        [OutputConstructor]
        private RecurrenceTriggerResponse(
            string? endTime,

            string frequency,

            int interval,

            Outputs.RecurrenceScheduleResponse? schedule,

            string? startTime,

            string? timeZone,

            string triggerType)
        {
            EndTime = endTime;
            Frequency = frequency;
            Interval = interval;
            Schedule = schedule;
            StartTime = startTime;
            TimeZone = timeZone;
            TriggerType = triggerType;
        }
    }
}
