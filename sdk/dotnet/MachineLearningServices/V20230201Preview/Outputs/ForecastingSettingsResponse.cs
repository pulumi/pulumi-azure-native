// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230201Preview.Outputs
{

    /// <summary>
    /// Forecasting specific parameters.
    /// </summary>
    [OutputType]
    public sealed class ForecastingSettingsResponse
    {
        /// <summary>
        /// Country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
        /// </summary>
        public readonly string? CountryOrRegionForHolidays;
        /// <summary>
        /// Number of periods between the origin time of one CV fold and the next fold. For
        /// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        /// three days apart.
        /// </summary>
        public readonly int? CvStepSize;
        /// <summary>
        /// Flag for generating lags for the numeric features with 'auto' or null.
        /// </summary>
        public readonly string? FeatureLags;
        /// <summary>
        /// The desired maximum forecast horizon in units of time-series frequency.
        /// </summary>
        public readonly Union<Outputs.AutoForecastHorizonResponse, Outputs.CustomForecastHorizonResponse>? ForecastHorizon;
        /// <summary>
        /// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
        /// </summary>
        public readonly string? Frequency;
        /// <summary>
        /// Set time series seasonality as an integer multiple of the series frequency.
        /// If seasonality is set to 'auto', it will be inferred.
        /// </summary>
        public readonly Union<Outputs.AutoSeasonalityResponse, Outputs.CustomSeasonalityResponse>? Seasonality;
        /// <summary>
        /// The parameter defining how if AutoML should handle short time series.
        /// </summary>
        public readonly string? ShortSeriesHandlingConfig;
        /// <summary>
        /// The function to be used to aggregate the time series target column to conform to a user specified frequency.
        /// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
        /// </summary>
        public readonly string? TargetAggregateFunction;
        /// <summary>
        /// The number of past periods to lag from the target column.
        /// </summary>
        public readonly Union<Outputs.AutoTargetLagsResponse, Outputs.CustomTargetLagsResponse>? TargetLags;
        /// <summary>
        /// The number of past periods used to create a rolling window average of the target column.
        /// </summary>
        public readonly Union<Outputs.AutoTargetRollingWindowSizeResponse, Outputs.CustomTargetRollingWindowSizeResponse>? TargetRollingWindowSize;
        /// <summary>
        /// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
        /// </summary>
        public readonly string? TimeColumnName;
        /// <summary>
        /// The names of columns used to group a timeseries. It can be used to create multiple series.
        /// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
        /// </summary>
        public readonly ImmutableArray<string> TimeSeriesIdColumnNames;
        /// <summary>
        /// Configure STL Decomposition of the time-series target column.
        /// </summary>
        public readonly string? UseStl;

        [OutputConstructor]
        private ForecastingSettingsResponse(
            string? countryOrRegionForHolidays,

            int? cvStepSize,

            string? featureLags,

            Union<Outputs.AutoForecastHorizonResponse, Outputs.CustomForecastHorizonResponse>? forecastHorizon,

            string? frequency,

            Union<Outputs.AutoSeasonalityResponse, Outputs.CustomSeasonalityResponse>? seasonality,

            string? shortSeriesHandlingConfig,

            string? targetAggregateFunction,

            Union<Outputs.AutoTargetLagsResponse, Outputs.CustomTargetLagsResponse>? targetLags,

            Union<Outputs.AutoTargetRollingWindowSizeResponse, Outputs.CustomTargetRollingWindowSizeResponse>? targetRollingWindowSize,

            string? timeColumnName,

            ImmutableArray<string> timeSeriesIdColumnNames,

            string? useStl)
        {
            CountryOrRegionForHolidays = countryOrRegionForHolidays;
            CvStepSize = cvStepSize;
            FeatureLags = featureLags;
            ForecastHorizon = forecastHorizon;
            Frequency = frequency;
            Seasonality = seasonality;
            ShortSeriesHandlingConfig = shortSeriesHandlingConfig;
            TargetAggregateFunction = targetAggregateFunction;
            TargetLags = targetLags;
            TargetRollingWindowSize = targetRollingWindowSize;
            TimeColumnName = timeColumnName;
            TimeSeriesIdColumnNames = timeSeriesIdColumnNames;
            UseStl = useStl;
        }
    }
}
