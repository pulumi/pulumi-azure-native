// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230201Preview.Outputs
{

    /// <summary>
    /// Settings used for training the model.
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    /// </summary>
    [OutputType]
    public sealed class ImageModelSettingsObjectDetectionResponse
    {
        /// <summary>
        /// Settings for advanced scenarios.
        /// </summary>
        public readonly string? AdvancedSettings;
        /// <summary>
        /// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
        /// </summary>
        public readonly bool? AmsGradient;
        /// <summary>
        /// Settings for using Augmentations.
        /// </summary>
        public readonly string? Augmentations;
        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Beta1;
        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Beta2;
        /// <summary>
        /// Maximum number of detections per image, for all classes. Must be a positive integer.
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly int? BoxDetectionsPerImage;
        /// <summary>
        /// During inference, only return proposals with a classification score greater than
        /// BoxScoreThreshold. Must be a float in the range[0, 1].
        /// </summary>
        public readonly double? BoxScoreThreshold;
        /// <summary>
        /// Frequency to store model checkpoints. Must be a positive integer.
        /// </summary>
        public readonly int? CheckpointFrequency;
        /// <summary>
        /// The pretrained checkpoint model for incremental training.
        /// </summary>
        public readonly Outputs.MLFlowModelJobInputResponse? CheckpointModel;
        /// <summary>
        /// The id of a previous run that has a pretrained checkpoint for incremental training.
        /// </summary>
        public readonly string? CheckpointRunId;
        /// <summary>
        /// Whether to use distributed training.
        /// </summary>
        public readonly bool? Distributed;
        /// <summary>
        /// Enable early stopping logic during training.
        /// </summary>
        public readonly bool? EarlyStopping;
        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        public readonly int? EarlyStoppingDelay;
        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        public readonly int? EarlyStoppingPatience;
        /// <summary>
        /// Enable normalization when exporting ONNX model.
        /// </summary>
        public readonly bool? EnableOnnxNormalization;
        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        public readonly int? EvaluationFrequency;
        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        public readonly int? GradientAccumulationStep;
        /// <summary>
        /// Image size for train and validation. Must be a positive integer.
        /// Note: The training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is only supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly int? ImageSize;
        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly int? LayersToFreeze;
        /// <summary>
        /// Initial learning rate. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? LearningRate;
        /// <summary>
        /// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
        /// </summary>
        public readonly string? LearningRateScheduler;
        /// <summary>
        /// Maximum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly int? MaxSize;
        /// <summary>
        /// Minimum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly int? MinSize;
        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        public readonly string? ModelName;
        /// <summary>
        /// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
        /// Note: training run may get into CUDA OOM if the model size is too big.
        /// Note: This settings is only supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly string? ModelSize;
        /// <summary>
        /// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? Momentum;
        /// <summary>
        /// Enable multi-scale image by varying image size by +/- 50%.
        /// Note: training run may get into CUDA OOM if no sufficient GPU memory.
        /// Note: This settings is only supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly bool? MultiScale;
        /// <summary>
        /// Enable nesterov when optimizer is 'sgd'.
        /// </summary>
        public readonly bool? Nesterov;
        /// <summary>
        /// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? NmsIouThreshold;
        /// <summary>
        /// Number of training epochs. Must be a positive integer.
        /// </summary>
        public readonly int? NumberOfEpochs;
        /// <summary>
        /// Number of data loader workers. Must be a non-negative integer.
        /// </summary>
        public readonly int? NumberOfWorkers;
        /// <summary>
        /// Type of optimizer.
        /// </summary>
        public readonly string? Optimizer;
        /// <summary>
        /// Random seed to be used when using deterministic training.
        /// </summary>
        public readonly int? RandomSeed;
        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? StepLRGamma;
        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        public readonly int? StepLRStepSize;
        /// <summary>
        /// The grid size to use for tiling each image. Note: TileGridSize must not be
        /// None to enable small object detection logic. A string containing two integers in mxn format.
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly string? TileGridSize;
        /// <summary>
        /// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly double? TileOverlapRatio;
        /// <summary>
        /// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
        /// Used in validation/ inference. Must be float in the range [0, 1].
        /// Note: This settings is not supported for the 'yolov5' algorithm.
        /// </summary>
        public readonly double? TilePredictionsNmsThreshold;
        /// <summary>
        /// Training batch size. Must be a positive integer.
        /// </summary>
        public readonly int? TrainingBatchSize;
        /// <summary>
        /// Validation batch size. Must be a positive integer.
        /// </summary>
        public readonly int? ValidationBatchSize;
        /// <summary>
        /// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
        /// </summary>
        public readonly double? ValidationIouThreshold;
        /// <summary>
        /// Metric computation method to use for validation metrics.
        /// </summary>
        public readonly string? ValidationMetricType;
        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        public readonly double? WarmupCosineLRCycles;
        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        public readonly int? WarmupCosineLRWarmupEpochs;
        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        public readonly double? WeightDecay;

        [OutputConstructor]
        private ImageModelSettingsObjectDetectionResponse(
            string? advancedSettings,

            bool? amsGradient,

            string? augmentations,

            double? beta1,

            double? beta2,

            int? boxDetectionsPerImage,

            double? boxScoreThreshold,

            int? checkpointFrequency,

            Outputs.MLFlowModelJobInputResponse? checkpointModel,

            string? checkpointRunId,

            bool? distributed,

            bool? earlyStopping,

            int? earlyStoppingDelay,

            int? earlyStoppingPatience,

            bool? enableOnnxNormalization,

            int? evaluationFrequency,

            int? gradientAccumulationStep,

            int? imageSize,

            int? layersToFreeze,

            double? learningRate,

            string? learningRateScheduler,

            int? maxSize,

            int? minSize,

            string? modelName,

            string? modelSize,

            double? momentum,

            bool? multiScale,

            bool? nesterov,

            double? nmsIouThreshold,

            int? numberOfEpochs,

            int? numberOfWorkers,

            string? optimizer,

            int? randomSeed,

            double? stepLRGamma,

            int? stepLRStepSize,

            string? tileGridSize,

            double? tileOverlapRatio,

            double? tilePredictionsNmsThreshold,

            int? trainingBatchSize,

            int? validationBatchSize,

            double? validationIouThreshold,

            string? validationMetricType,

            double? warmupCosineLRCycles,

            int? warmupCosineLRWarmupEpochs,

            double? weightDecay)
        {
            AdvancedSettings = advancedSettings;
            AmsGradient = amsGradient;
            Augmentations = augmentations;
            Beta1 = beta1;
            Beta2 = beta2;
            BoxDetectionsPerImage = boxDetectionsPerImage;
            BoxScoreThreshold = boxScoreThreshold;
            CheckpointFrequency = checkpointFrequency;
            CheckpointModel = checkpointModel;
            CheckpointRunId = checkpointRunId;
            Distributed = distributed;
            EarlyStopping = earlyStopping;
            EarlyStoppingDelay = earlyStoppingDelay;
            EarlyStoppingPatience = earlyStoppingPatience;
            EnableOnnxNormalization = enableOnnxNormalization;
            EvaluationFrequency = evaluationFrequency;
            GradientAccumulationStep = gradientAccumulationStep;
            ImageSize = imageSize;
            LayersToFreeze = layersToFreeze;
            LearningRate = learningRate;
            LearningRateScheduler = learningRateScheduler;
            MaxSize = maxSize;
            MinSize = minSize;
            ModelName = modelName;
            ModelSize = modelSize;
            Momentum = momentum;
            MultiScale = multiScale;
            Nesterov = nesterov;
            NmsIouThreshold = nmsIouThreshold;
            NumberOfEpochs = numberOfEpochs;
            NumberOfWorkers = numberOfWorkers;
            Optimizer = optimizer;
            RandomSeed = randomSeed;
            StepLRGamma = stepLRGamma;
            StepLRStepSize = stepLRStepSize;
            TileGridSize = tileGridSize;
            TileOverlapRatio = tileOverlapRatio;
            TilePredictionsNmsThreshold = tilePredictionsNmsThreshold;
            TrainingBatchSize = trainingBatchSize;
            ValidationBatchSize = validationBatchSize;
            ValidationIouThreshold = validationIouThreshold;
            ValidationMetricType = validationMetricType;
            WarmupCosineLRCycles = warmupCosineLRCycles;
            WarmupCosineLRWarmupEpochs = warmupCosineLRWarmupEpochs;
            WeightDecay = weightDecay;
        }
    }
}
