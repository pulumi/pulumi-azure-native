// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230201Preview.Inputs
{

    /// <summary>
    /// Stringified search spaces for each parameter. See below examples.
    /// </summary>
    public sealed class NlpParameterSubspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of steps to accumulate gradients over before running a backward pass.
        /// </summary>
        [Input("gradientAccumulationSteps")]
        public Input<string>? GradientAccumulationSteps { get; set; }

        /// <summary>
        /// The learning rate for the training procedure.
        /// </summary>
        [Input("learningRate")]
        public Input<string>? LearningRate { get; set; }

        /// <summary>
        /// The type of learning rate schedule to use during the training procedure.
        /// </summary>
        [Input("learningRateScheduler")]
        public Input<string>? LearningRateScheduler { get; set; }

        /// <summary>
        /// The name of the model to train.
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// Number of training epochs.
        /// </summary>
        [Input("numberOfEpochs")]
        public Input<string>? NumberOfEpochs { get; set; }

        /// <summary>
        /// The batch size for the training procedure.
        /// </summary>
        [Input("trainingBatchSize")]
        public Input<string>? TrainingBatchSize { get; set; }

        /// <summary>
        /// The batch size to be used during evaluation.
        /// </summary>
        [Input("validationBatchSize")]
        public Input<string>? ValidationBatchSize { get; set; }

        /// <summary>
        /// The warmup ratio, used alongside LrSchedulerType.
        /// </summary>
        [Input("warmupRatio")]
        public Input<string>? WarmupRatio { get; set; }

        /// <summary>
        /// The weight decay for the training procedure.
        /// </summary>
        [Input("weightDecay")]
        public Input<string>? WeightDecay { get; set; }

        public NlpParameterSubspaceArgs()
        {
        }
        public static new NlpParameterSubspaceArgs Empty => new NlpParameterSubspaceArgs();
    }
}
