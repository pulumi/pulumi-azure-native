// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.Outputs
{

    /// <summary>
    /// Class to represent configuration settings for Docker Build
    /// </summary>
    [OutputType]
    public sealed class DockerBuildResponse
    {
        /// <summary>
        /// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
        /// The path is relative to the asset path which must contain a single Blob URI value.
        /// &lt;seealso href="https://docs.docker.com/engine/context/working-with-contexts/" /&gt;
        /// </summary>
        public readonly string? Context;
        /// <summary>
        /// Enum to determine docker specification type. Must be either Build or Image.
        /// Expected value is 'Build'.
        /// </summary>
        public readonly string DockerSpecificationType;
        /// <summary>
        /// [Required] Docker command line instructions to assemble an image.
        /// &lt;seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" /&gt;
        /// </summary>
        public readonly string Dockerfile;
        /// <summary>
        /// The platform information of the docker image.
        /// </summary>
        public readonly Outputs.DockerImagePlatformResponse? Platform;

        [OutputConstructor]
        private DockerBuildResponse(
            string? context,

            string dockerSpecificationType,

            string dockerfile,

            Outputs.DockerImagePlatformResponse? platform)
        {
            Context = context;
            DockerSpecificationType = dockerSpecificationType;
            Dockerfile = dockerfile;
            Platform = platform;
        }
    }
}
