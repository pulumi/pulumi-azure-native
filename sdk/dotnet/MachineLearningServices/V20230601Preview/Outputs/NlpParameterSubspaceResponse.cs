// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230601Preview.Outputs
{

    /// <summary>
    /// Stringified search spaces for each parameter. See below examples.
    /// </summary>
    [OutputType]
    public sealed class NlpParameterSubspaceResponse
    {
        /// <summary>
        /// Number of steps to accumulate gradients over before running a backward pass.
        /// </summary>
        public readonly string? GradientAccumulationSteps;
        /// <summary>
        /// The learning rate for the training procedure.
        /// </summary>
        public readonly string? LearningRate;
        /// <summary>
        /// The type of learning rate schedule to use during the training procedure.
        /// </summary>
        public readonly string? LearningRateScheduler;
        /// <summary>
        /// The name of the model to train.
        /// </summary>
        public readonly string? ModelName;
        /// <summary>
        /// Number of training epochs.
        /// </summary>
        public readonly string? NumberOfEpochs;
        /// <summary>
        /// The batch size for the training procedure.
        /// </summary>
        public readonly string? TrainingBatchSize;
        /// <summary>
        /// The batch size to be used during evaluation.
        /// </summary>
        public readonly string? ValidationBatchSize;
        /// <summary>
        /// The warmup ratio, used alongside LrSchedulerType.
        /// </summary>
        public readonly string? WarmupRatio;
        /// <summary>
        /// The weight decay for the training procedure.
        /// </summary>
        public readonly string? WeightDecay;

        [OutputConstructor]
        private NlpParameterSubspaceResponse(
            string? gradientAccumulationSteps,

            string? learningRate,

            string? learningRateScheduler,

            string? modelName,

            string? numberOfEpochs,

            string? trainingBatchSize,

            string? validationBatchSize,

            string? warmupRatio,

            string? weightDecay)
        {
            GradientAccumulationSteps = gradientAccumulationSteps;
            LearningRate = learningRate;
            LearningRateScheduler = learningRateScheduler;
            ModelName = modelName;
            NumberOfEpochs = numberOfEpochs;
            TrainingBatchSize = trainingBatchSize;
            ValidationBatchSize = validationBatchSize;
            WarmupRatio = warmupRatio;
            WeightDecay = weightDecay;
        }
    }
}
