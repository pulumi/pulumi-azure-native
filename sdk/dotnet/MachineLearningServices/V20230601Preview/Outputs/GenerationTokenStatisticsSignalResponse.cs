// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230601Preview.Outputs
{

    /// <summary>
    /// Generation token statistics signal definition.
    /// </summary>
    [OutputType]
    public sealed class GenerationTokenStatisticsSignalResponse
    {
        /// <summary>
        /// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
        /// </summary>
        public readonly ImmutableArray<Outputs.GenerationTokenStatisticsMetricThresholdResponse> MetricThresholds;
        /// <summary>
        /// The current notification mode for this signal.
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// Gets or sets the target data for computing metrics.
        /// </summary>
        public readonly object? ProductionData;
        /// <summary>
        /// Property dictionary. Properties can be added, but not removed or altered.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Properties;
        /// <summary>
        /// [Required] The sample rate of the target data, should be greater than 0 and at most 1.
        /// </summary>
        public readonly double SamplingRate;
        /// <summary>
        /// 
        /// Expected value is 'GenerationTokenStatistics'.
        /// </summary>
        public readonly string SignalType;

        [OutputConstructor]
        private GenerationTokenStatisticsSignalResponse(
            ImmutableArray<Outputs.GenerationTokenStatisticsMetricThresholdResponse> metricThresholds,

            string? mode,

            object? productionData,

            ImmutableDictionary<string, string>? properties,

            double samplingRate,

            string signalType)
        {
            MetricThresholds = metricThresholds;
            Mode = mode;
            ProductionData = productionData;
            Properties = properties;
            SamplingRate = samplingRate;
            SignalType = signalType;
        }
    }
}
