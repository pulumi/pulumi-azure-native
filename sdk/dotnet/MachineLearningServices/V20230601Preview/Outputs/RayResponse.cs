// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20230601Preview.Outputs
{

    /// <summary>
    /// Ray distribution configuration.
    /// </summary>
    [OutputType]
    public sealed class RayResponse
    {
        /// <summary>
        /// The address of Ray head node.
        /// </summary>
        public readonly string? Address;
        /// <summary>
        /// The port to bind the dashboard server to.
        /// </summary>
        public readonly int? DashboardPort;
        /// <summary>
        /// Enum to determine the job distribution type.
        /// Expected value is 'Ray'.
        /// </summary>
        public readonly string DistributionType;
        /// <summary>
        /// Additional arguments passed to ray start in head node.
        /// </summary>
        public readonly string? HeadNodeAdditionalArgs;
        /// <summary>
        /// Provide this argument to start the Ray dashboard GUI.
        /// </summary>
        public readonly bool? IncludeDashboard;
        /// <summary>
        /// The port of the head ray process.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Additional arguments passed to ray start in worker node.
        /// </summary>
        public readonly string? WorkerNodeAdditionalArgs;

        [OutputConstructor]
        private RayResponse(
            string? address,

            int? dashboardPort,

            string distributionType,

            string? headNodeAdditionalArgs,

            bool? includeDashboard,

            int? port,

            string? workerNodeAdditionalArgs)
        {
            Address = address;
            DashboardPort = dashboardPort;
            DistributionType = distributionType;
            HeadNodeAdditionalArgs = headNodeAdditionalArgs;
            IncludeDashboard = includeDashboard;
            Port = port;
            WorkerNodeAdditionalArgs = workerNodeAdditionalArgs;
        }
    }
}
