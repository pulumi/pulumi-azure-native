// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20241001Preview.Inputs
{

    /// <summary>
    /// Compute Instance properties
    /// </summary>
    public sealed class ComputeInstancePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
        /// </summary>
        [Input("applicationSharingPolicy")]
        public InputUnion<string, Pulumi.AzureNative.MachineLearningServices.V20241001Preview.ApplicationSharingPolicy>? ApplicationSharingPolicy { get; set; }

        /// <summary>
        /// Specifies settings for autologger.
        /// </summary>
        [Input("autologgerSettings")]
        public Input<Inputs.ComputeInstanceAutologgerSettingsArgs>? AutologgerSettings { get; set; }

        /// <summary>
        /// The Compute Instance Authorization type. Available values are personal (default).
        /// </summary>
        [Input("computeInstanceAuthorizationType")]
        public InputUnion<string, Pulumi.AzureNative.MachineLearningServices.V20241001Preview.ComputeInstanceAuthorizationType>? ComputeInstanceAuthorizationType { get; set; }

        [Input("customServices")]
        private InputList<Inputs.CustomServiceArgs>? _customServices;

        /// <summary>
        /// List of Custom Services added to the compute.
        /// </summary>
        public InputList<Inputs.CustomServiceArgs> CustomServices
        {
            get => _customServices ?? (_customServices = new InputList<Inputs.CustomServiceArgs>());
            set => _customServices = value;
        }

        /// <summary>
        /// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
        /// </summary>
        [Input("enableNodePublicIp")]
        public Input<bool>? EnableNodePublicIp { get; set; }

        /// <summary>
        /// Enable Auto OS Patching. Possible values are: true, false.
        /// </summary>
        [Input("enableOSPatching")]
        public Input<bool>? EnableOSPatching { get; set; }

        /// <summary>
        /// Enable root access. Possible values are: true, false.
        /// </summary>
        [Input("enableRootAccess")]
        public Input<bool>? EnableRootAccess { get; set; }

        /// <summary>
        /// Enable SSO (single sign on). Possible values are: true, false.
        /// </summary>
        [Input("enableSSO")]
        public Input<bool>? EnableSSO { get; set; }

        /// <summary>
        /// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
        /// </summary>
        [Input("idleTimeBeforeShutdown")]
        public Input<string>? IdleTimeBeforeShutdown { get; set; }

        /// <summary>
        /// Settings for a personal compute instance.
        /// </summary>
        [Input("personalComputeInstanceSettings")]
        public Input<Inputs.PersonalComputeInstanceSettingsArgs>? PersonalComputeInstanceSettings { get; set; }

        /// <summary>
        /// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
        /// </summary>
        [Input("releaseQuotaOnStop")]
        public Input<bool>? ReleaseQuotaOnStop { get; set; }

        /// <summary>
        /// The list of schedules to be applied on the computes.
        /// </summary>
        [Input("schedules")]
        public Input<Inputs.ComputeSchedulesArgs>? Schedules { get; set; }

        /// <summary>
        /// Details of customized scripts to execute for setting up the cluster.
        /// </summary>
        [Input("setupScripts")]
        public Input<Inputs.SetupScriptsArgs>? SetupScripts { get; set; }

        /// <summary>
        /// Specifies policy and settings for SSH access.
        /// </summary>
        [Input("sshSettings")]
        public Input<Inputs.ComputeInstanceSshSettingsArgs>? SshSettings { get; set; }

        /// <summary>
        /// Virtual network subnet resource ID the compute nodes belong to.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.ResourceIdArgs>? Subnet { get; set; }

        /// <summary>
        /// Virtual Machine Size
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public ComputeInstancePropertiesArgs()
        {
            ApplicationSharingPolicy = "Shared";
            ComputeInstanceAuthorizationType = "personal";
            EnableOSPatching = false;
            EnableRootAccess = true;
            EnableSSO = true;
            ReleaseQuotaOnStop = false;
        }
        public static new ComputeInstancePropertiesArgs Empty => new ComputeInstancePropertiesArgs();
    }
}
