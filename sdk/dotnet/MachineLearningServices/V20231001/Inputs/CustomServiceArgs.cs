// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20231001.Inputs
{

    /// <summary>
    /// Specifies the custom service configuration
    /// </summary>
    public sealed class CustomServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes the docker settings for the image
        /// </summary>
        [Input("docker")]
        public Input<Inputs.DockerArgs>? Docker { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.EndpointArgs>? _endpoints;

        /// <summary>
        /// Configuring the endpoints for the container
        /// </summary>
        public InputList<Inputs.EndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.EndpointArgs>());
            set => _endpoints = value;
        }

        [Input("environmentVariables")]
        private InputMap<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// Environment Variable for the container
        /// </summary>
        public InputMap<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Describes the Image Specifications
        /// </summary>
        [Input("image")]
        public Input<Inputs.ImageArgs>? Image { get; set; }

        /// <summary>
        /// Name of the Custom Service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("volumes")]
        private InputList<Inputs.VolumeDefinitionArgs>? _volumes;

        /// <summary>
        /// Configuring the volumes for the container
        /// </summary>
        public InputList<Inputs.VolumeDefinitionArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeDefinitionArgs>());
            set => _volumes = value;
        }

        public CustomServiceArgs()
        {
        }
        public static new CustomServiceArgs Empty => new CustomServiceArgs();
    }
}
