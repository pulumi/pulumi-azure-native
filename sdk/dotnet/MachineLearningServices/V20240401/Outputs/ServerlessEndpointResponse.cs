// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20240401.Outputs
{

    [OutputType]
    public sealed class ServerlessEndpointResponse
    {
        /// <summary>
        /// [Required] Specifies the authentication mode for the Serverless endpoint.
        /// </summary>
        public readonly string AuthMode;
        /// <summary>
        /// Specifies the content safety options. If omitted, the default content safety settings will be configured
        /// </summary>
        public readonly Outputs.ContentSafetyResponse? ContentSafety;
        /// <summary>
        /// The current state of the ServerlessEndpoint.
        /// </summary>
        public readonly string EndpointState;
        /// <summary>
        /// The inference uri to target when making requests against the serverless endpoint
        /// </summary>
        public readonly Outputs.ServerlessInferenceEndpointResponse InferenceEndpoint;
        /// <summary>
        /// The MarketplaceSubscription Azure ID associated to this ServerlessEndpoint.
        /// </summary>
        public readonly string MarketplaceSubscriptionId;
        /// <summary>
        /// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
        /// </summary>
        public readonly Outputs.ModelSettingsResponse? ModelSettings;
        /// <summary>
        /// Provisioning state for the endpoint.
        /// </summary>
        public readonly string ProvisioningState;

        [OutputConstructor]
        private ServerlessEndpointResponse(
            string authMode,

            Outputs.ContentSafetyResponse? contentSafety,

            string endpointState,

            Outputs.ServerlessInferenceEndpointResponse inferenceEndpoint,

            string marketplaceSubscriptionId,

            Outputs.ModelSettingsResponse? modelSettings,

            string provisioningState)
        {
            AuthMode = authMode;
            ContentSafety = contentSafety;
            EndpointState = endpointState;
            InferenceEndpoint = inferenceEndpoint;
            MarketplaceSubscriptionId = marketplaceSubscriptionId;
            ModelSettings = modelSettings;
            ProvisioningState = provisioningState;
        }
    }
}
