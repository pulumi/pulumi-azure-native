// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MachineLearningServices.V20220601Preview.Inputs
{

    /// <summary>
    /// Distribution expressions to sweep over values of model settings.
    /// &lt;example&gt;
    /// Some examples are:
    /// &lt;code&gt;
    /// ModelName = "choice('seresnext', 'resnest50')";
    /// LearningRate = "uniform(0.001, 0.01)";
    /// LayersToFreeze = "choice(0, 2)";
    /// &lt;/code&gt;&lt;/example&gt;
    /// For more details on how to compose distribution expressions please check the documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
    /// For more information on the available settings please visit the official documentation:
    /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
    /// </summary>
    public sealed class ImageModelDistributionSettingsClassificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
        /// </summary>
        [Input("amsGradient")]
        public Input<string>? AmsGradient { get; set; }

        /// <summary>
        /// Settings for using Augmentations.
        /// </summary>
        [Input("augmentations")]
        public Input<string>? Augmentations { get; set; }

        /// <summary>
        /// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Input("beta1")]
        public Input<string>? Beta1 { get; set; }

        /// <summary>
        /// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
        /// </summary>
        [Input("beta2")]
        public Input<string>? Beta2 { get; set; }

        /// <summary>
        /// Whether to use distributer training.
        /// </summary>
        [Input("distributed")]
        public Input<string>? Distributed { get; set; }

        /// <summary>
        /// Enable early stopping logic during training.
        /// </summary>
        [Input("earlyStopping")]
        public Input<string>? EarlyStopping { get; set; }

        /// <summary>
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </summary>
        [Input("earlyStoppingDelay")]
        public Input<string>? EarlyStoppingDelay { get; set; }

        /// <summary>
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </summary>
        [Input("earlyStoppingPatience")]
        public Input<string>? EarlyStoppingPatience { get; set; }

        /// <summary>
        /// Enable normalization when exporting ONNX model.
        /// </summary>
        [Input("enableOnnxNormalization")]
        public Input<string>? EnableOnnxNormalization { get; set; }

        /// <summary>
        /// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
        /// </summary>
        [Input("evaluationFrequency")]
        public Input<string>? EvaluationFrequency { get; set; }

        /// <summary>
        /// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </summary>
        [Input("gradientAccumulationStep")]
        public Input<string>? GradientAccumulationStep { get; set; }

        /// <summary>
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for 'seresnext' means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Input("layersToFreeze")]
        public Input<string>? LayersToFreeze { get; set; }

        /// <summary>
        /// Initial learning rate. Must be a float in the range [0, 1].
        /// </summary>
        [Input("learningRate")]
        public Input<string>? LearningRate { get; set; }

        /// <summary>
        /// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
        /// </summary>
        [Input("learningRateScheduler")]
        public Input<string>? LearningRateScheduler { get; set; }

        /// <summary>
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
        /// </summary>
        [Input("momentum")]
        public Input<string>? Momentum { get; set; }

        /// <summary>
        /// Enable nesterov when optimizer is 'sgd'.
        /// </summary>
        [Input("nesterov")]
        public Input<string>? Nesterov { get; set; }

        /// <summary>
        /// Number of training epochs. Must be a positive integer.
        /// </summary>
        [Input("numberOfEpochs")]
        public Input<string>? NumberOfEpochs { get; set; }

        /// <summary>
        /// Number of data loader workers. Must be a non-negative integer.
        /// </summary>
        [Input("numberOfWorkers")]
        public Input<string>? NumberOfWorkers { get; set; }

        /// <summary>
        /// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
        /// </summary>
        [Input("optimizer")]
        public Input<string>? Optimizer { get; set; }

        /// <summary>
        /// Random seed to be used when using deterministic training.
        /// </summary>
        [Input("randomSeed")]
        public Input<string>? RandomSeed { get; set; }

        /// <summary>
        /// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
        /// </summary>
        [Input("stepLRGamma")]
        public Input<string>? StepLRGamma { get; set; }

        /// <summary>
        /// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
        /// </summary>
        [Input("stepLRStepSize")]
        public Input<string>? StepLRStepSize { get; set; }

        /// <summary>
        /// Training batch size. Must be a positive integer.
        /// </summary>
        [Input("trainingBatchSize")]
        public Input<string>? TrainingBatchSize { get; set; }

        /// <summary>
        /// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
        /// </summary>
        [Input("trainingCropSize")]
        public Input<string>? TrainingCropSize { get; set; }

        /// <summary>
        /// Validation batch size. Must be a positive integer.
        /// </summary>
        [Input("validationBatchSize")]
        public Input<string>? ValidationBatchSize { get; set; }

        /// <summary>
        /// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
        /// </summary>
        [Input("validationCropSize")]
        public Input<string>? ValidationCropSize { get; set; }

        /// <summary>
        /// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
        /// </summary>
        [Input("validationResizeSize")]
        public Input<string>? ValidationResizeSize { get; set; }

        /// <summary>
        /// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
        /// </summary>
        [Input("warmupCosineLRCycles")]
        public Input<string>? WarmupCosineLRCycles { get; set; }

        /// <summary>
        /// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
        /// </summary>
        [Input("warmupCosineLRWarmupEpochs")]
        public Input<string>? WarmupCosineLRWarmupEpochs { get; set; }

        /// <summary>
        /// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
        /// </summary>
        [Input("weightDecay")]
        public Input<string>? WeightDecay { get; set; }

        /// <summary>
        /// Weighted loss. The accepted values are 0 for no weighted loss.
        /// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
        /// </summary>
        [Input("weightedLoss")]
        public Input<string>? WeightedLoss { get; set; }

        public ImageModelDistributionSettingsClassificationArgs()
        {
        }
        public static new ImageModelDistributionSettingsClassificationArgs Empty => new ImageModelDistributionSettingsClassificationArgs();
    }
}
