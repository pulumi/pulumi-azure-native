// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataMigration.V20220330Preview
{
    public static class GetService
    {
        /// <summary>
        /// A Database Migration Service resource
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("azure-native:datamigration/v20220330preview:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// A Database Migration Service resource
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceResult>("azure-native:datamigration/v20220330preview:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource group
        /// </summary>
        [Input("groupName", required: true)]
        public string GroupName { get; set; } = null!;

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetServiceArgs()
        {
        }
    }

    public sealed class GetServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource group
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The time delay before the service is auto-stopped when idle.
        /// </summary>
        public readonly string? AutoStopDelay;
        /// <summary>
        /// Whether service resources should be deleted when stopped. (Turned on by default)
        /// </summary>
        public readonly bool? DeleteResourcesOnStop;
        /// <summary>
        /// HTTP strong entity tag value. Ignored if submitted
        /// </summary>
        public readonly string? Etag;
        public readonly string Id;
        /// <summary>
        /// The resource kind. Only 'vm' (the default) is supported.
        /// </summary>
        public readonly string? Kind;
        public readonly string? Location;
        public readonly string Name;
        /// <summary>
        /// The resource's provisioning state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The public key of the service, used to encrypt secrets sent to the service
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// Service SKU
        /// </summary>
        public readonly Outputs.ServiceSkuResponse? Sku;
        public readonly Outputs.SystemDataResponse SystemData;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string Type;
        /// <summary>
        /// The ID of the Microsoft.Network/networkInterfaces resource which the service have
        /// </summary>
        public readonly string? VirtualNicId;
        /// <summary>
        /// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
        /// </summary>
        public readonly string? VirtualSubnetId;

        [OutputConstructor]
        private GetServiceResult(
            string? autoStopDelay,

            bool? deleteResourcesOnStop,

            string? etag,

            string id,

            string? kind,

            string? location,

            string name,

            string provisioningState,

            string? publicKey,

            Outputs.ServiceSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? virtualNicId,

            string? virtualSubnetId)
        {
            AutoStopDelay = autoStopDelay;
            DeleteResourcesOnStop = deleteResourcesOnStop;
            Etag = etag;
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            PublicKey = publicKey;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VirtualNicId = virtualNicId;
            VirtualSubnetId = virtualSubnetId;
        }
    }
}
