// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataMigration.Outputs
{

    [OutputType]
    public sealed class NodeMonitoringDataResponse
    {
        /// <summary>
        ///  Unmatched properties from the message are deserialized in this collection.
        /// </summary>
        public readonly ImmutableDictionary<string, object> AdditionalProperties;
        /// <summary>
        /// Available memory (MB) on the integration runtime node.
        /// </summary>
        public readonly int AvailableMemoryInMB;
        /// <summary>
        /// Maximum concurrent jobs on the integration runtime node.
        /// </summary>
        public readonly int ConcurrentJobsLimit;
        /// <summary>
        /// The number of jobs currently running on the integration runtime node.
        /// </summary>
        public readonly int ConcurrentJobsRunning;
        /// <summary>
        /// CPU percentage on the integration runtime node.
        /// </summary>
        public readonly int CpuUtilization;
        /// <summary>
        /// The maximum concurrent jobs in this integration runtime.
        /// </summary>
        public readonly int MaxConcurrentJobs;
        /// <summary>
        /// Name of the integration runtime node.
        /// </summary>
        public readonly string NodeName;
        /// <summary>
        /// Received bytes on the integration runtime node.
        /// </summary>
        public readonly double ReceivedBytes;
        /// <summary>
        /// Sent bytes on the integration runtime node.
        /// </summary>
        public readonly double SentBytes;

        [OutputConstructor]
        private NodeMonitoringDataResponse(
            ImmutableDictionary<string, object> additionalProperties,

            int availableMemoryInMB,

            int concurrentJobsLimit,

            int concurrentJobsRunning,

            int cpuUtilization,

            int maxConcurrentJobs,

            string nodeName,

            double receivedBytes,

            double sentBytes)
        {
            AdditionalProperties = additionalProperties;
            AvailableMemoryInMB = availableMemoryInMB;
            ConcurrentJobsLimit = concurrentJobsLimit;
            ConcurrentJobsRunning = concurrentJobsRunning;
            CpuUtilization = cpuUtilization;
            MaxConcurrentJobs = maxConcurrentJobs;
            NodeName = nodeName;
            ReceivedBytes = receivedBytes;
            SentBytes = sentBytes;
        }
    }
}
