// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataMigration.Outputs
{

    [OutputType]
    public sealed class MongoDbDatabaseInfoResponse
    {
        /// <summary>
        /// The average document size, or -1 if the average size is unknown
        /// </summary>
        public readonly double AverageDocumentSize;
        /// <summary>
        /// A list of supported collections in a MongoDB database
        /// </summary>
        public readonly ImmutableArray<Outputs.MongoDbCollectionInfoResponse> Collections;
        /// <summary>
        /// The estimated total data size, in bytes, or -1 if the size is unknown.
        /// </summary>
        public readonly double DataSize;
        /// <summary>
        /// The estimated total number of documents, or -1 if the document count is unknown
        /// </summary>
        public readonly double DocumentCount;
        /// <summary>
        /// The unqualified name of the database or collection
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The qualified name of the database or collection. For a collection, this is the database-qualified name.
        /// </summary>
        public readonly string QualifiedName;
        /// <summary>
        /// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
        /// </summary>
        public readonly bool SupportsSharding;

        [OutputConstructor]
        private MongoDbDatabaseInfoResponse(
            double averageDocumentSize,

            ImmutableArray<Outputs.MongoDbCollectionInfoResponse> collections,

            double dataSize,

            double documentCount,

            string name,

            string qualifiedName,

            bool supportsSharding)
        {
            AverageDocumentSize = averageDocumentSize;
            Collections = collections;
            DataSize = dataSize;
            DocumentCount = documentCount;
            Name = name;
            QualifiedName = qualifiedName;
            SupportsSharding = supportsSharding;
        }
    }
}
