// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataMigration.V20230715Preview
{
    /// <summary>
    /// Database Migration Resource for Mongo to CosmosDb.
    /// </summary>
    [AzureNativeResourceType("azure-native:datamigration/v20230715preview:DatabaseMigrationsMongoToCosmosDbvCoreMongo")]
    public partial class DatabaseMigrationsMongoToCosmosDbvCoreMongo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of Mongo Collections to be migrated.
        /// </summary>
        [Output("collectionList")]
        public Output<ImmutableArray<Outputs.MongoMigrationCollectionResponse>> CollectionList { get; private set; } = null!;

        /// <summary>
        /// Database migration end time.
        /// </summary>
        [Output("endedOn")]
        public Output<string> EndedOn { get; private set; } = null!;

        /// <summary>
        /// 
        /// Expected value is 'MongoToCosmosDbMongo'.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Error details in case of migration failure.
        /// </summary>
        [Output("migrationFailureError")]
        public Output<Outputs.ErrorInfoResponse> MigrationFailureError { get; private set; } = null!;

        /// <summary>
        /// ID for current migration operation.
        /// </summary>
        [Output("migrationOperationId")]
        public Output<string?> MigrationOperationId { get; private set; } = null!;

        /// <summary>
        /// Resource Id of the Migration Service.
        /// </summary>
        [Output("migrationService")]
        public Output<string?> MigrationService { get; private set; } = null!;

        /// <summary>
        /// Migration status.
        /// </summary>
        [Output("migrationStatus")]
        public Output<string> MigrationStatus { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Error message for migration provisioning failure, if any.
        /// </summary>
        [Output("provisioningError")]
        public Output<string?> ProvisioningError { get; private set; } = null!;

        /// <summary>
        /// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Resource Id of the target resource.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Source Mongo connection details.
        /// </summary>
        [Output("sourceMongoConnection")]
        public Output<Outputs.MongoConnectionInformationResponse?> SourceMongoConnection { get; private set; } = null!;

        /// <summary>
        /// Database migration start time.
        /// </summary>
        [Output("startedOn")]
        public Output<string> StartedOn { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Target Cosmos DB Mongo connection details.
        /// </summary>
        [Output("targetMongoConnection")]
        public Output<Outputs.MongoConnectionInformationResponse?> TargetMongoConnection { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseMigrationsMongoToCosmosDbvCoreMongo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseMigrationsMongoToCosmosDbvCoreMongo(string name, DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs args, CustomResourceOptions? options = null)
            : base("azure-native:datamigration/v20230715preview:DatabaseMigrationsMongoToCosmosDbvCoreMongo", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseMigrationsMongoToCosmosDbvCoreMongo(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:datamigration/v20230715preview:DatabaseMigrationsMongoToCosmosDbvCoreMongo", name, null, MakeResourceOptions(options, id))
        {
        }

        private static DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs MakeArgs(DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs args)
        {
            args ??= new DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs();
            args.Kind = "MongoToCosmosDbMongo";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:datamigration:DatabaseMigrationsMongoToCosmosDbvCoreMongo" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseMigrationsMongoToCosmosDbvCoreMongo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseMigrationsMongoToCosmosDbvCoreMongo Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabaseMigrationsMongoToCosmosDbvCoreMongo(name, id, options);
        }
    }

    public sealed class DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs : global::Pulumi.ResourceArgs
    {
        [Input("collectionList")]
        private InputList<Inputs.MongoMigrationCollectionArgs>? _collectionList;

        /// <summary>
        /// List of Mongo Collections to be migrated.
        /// </summary>
        public InputList<Inputs.MongoMigrationCollectionArgs> CollectionList
        {
            get => _collectionList ?? (_collectionList = new InputList<Inputs.MongoMigrationCollectionArgs>());
            set => _collectionList = value;
        }

        /// <summary>
        /// 
        /// Expected value is 'MongoToCosmosDbMongo'.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// Name of the migration.
        /// </summary>
        [Input("migrationName")]
        public Input<string>? MigrationName { get; set; }

        /// <summary>
        /// ID for current migration operation.
        /// </summary>
        [Input("migrationOperationId")]
        public Input<string>? MigrationOperationId { get; set; }

        /// <summary>
        /// Resource Id of the Migration Service.
        /// </summary>
        [Input("migrationService")]
        public Input<string>? MigrationService { get; set; }

        /// <summary>
        /// Error message for migration provisioning failure, if any.
        /// </summary>
        [Input("provisioningError")]
        public Input<string>? ProvisioningError { get; set; }

        /// <summary>
        /// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Resource Id of the target resource.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Source Mongo connection details.
        /// </summary>
        [Input("sourceMongoConnection")]
        public Input<Inputs.MongoConnectionInformationArgs>? SourceMongoConnection { get; set; }

        /// <summary>
        /// Target Cosmos DB Mongo connection details.
        /// </summary>
        [Input("targetMongoConnection")]
        public Input<Inputs.MongoConnectionInformationArgs>? TargetMongoConnection { get; set; }

        /// <summary>
        /// The name of the target resource/account.
        /// </summary>
        [Input("targetResourceName", required: true)]
        public Input<string> TargetResourceName { get; set; } = null!;

        public DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs()
        {
        }
        public static new DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs Empty => new DatabaseMigrationsMongoToCosmosDbvCoreMongoArgs();
    }
}
