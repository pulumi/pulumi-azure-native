// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataMigration.V20171115Preview.Inputs
{

    /// <summary>
    /// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
    /// </summary>
    public sealed class MigrateSqlServerSqlDbTaskInputArgs : Pulumi.ResourceArgs
    {
        [Input("selectedDatabases", required: true)]
        private InputList<Inputs.MigrateSqlServerSqlDbDatabaseInputArgs>? _selectedDatabases;

        /// <summary>
        /// Databases to migrate
        /// </summary>
        public InputList<Inputs.MigrateSqlServerSqlDbDatabaseInputArgs> SelectedDatabases
        {
            get => _selectedDatabases ?? (_selectedDatabases = new InputList<Inputs.MigrateSqlServerSqlDbDatabaseInputArgs>());
            set => _selectedDatabases = value;
        }

        /// <summary>
        /// Information for connecting to source
        /// </summary>
        [Input("sourceConnectionInfo", required: true)]
        public Input<Inputs.SqlConnectionInfoArgs> SourceConnectionInfo { get; set; } = null!;

        /// <summary>
        /// Information for connecting to target
        /// </summary>
        [Input("targetConnectionInfo", required: true)]
        public Input<Inputs.SqlConnectionInfoArgs> TargetConnectionInfo { get; set; } = null!;

        /// <summary>
        /// Options for enabling various post migration validations. Available options, 
        ///  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data. 
        ///  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
        /// </summary>
        [Input("validationOptions")]
        public Input<Inputs.MigrationValidationOptionsArgs>? ValidationOptions { get; set; }

        public MigrateSqlServerSqlDbTaskInputArgs()
        {
        }
    }
}
