// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataMigration
{
    /// <summary>
    /// A SQL Migration Service.
    /// 
    /// Uses Azure REST API version 2023-07-15-preview. In version 2.x of the Azure Native provider, it used API version 2022-03-30-preview.
    /// 
    /// Other available API versions: 2021-10-30-preview, 2022-01-30-preview, 2022-03-30-preview, 2025-03-15-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native datamigration [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:datamigration:SqlMigrationService")]
    public partial class SqlMigrationService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Current state of the Integration runtime.
        /// </summary>
        [Output("integrationRuntimeState")]
        public Output<string> IntegrationRuntimeState { get; private set; } = null!;

        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state to track the async operation status.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SqlMigrationService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlMigrationService(string name, SqlMigrationServiceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:datamigration:SqlMigrationService", name, args ?? new SqlMigrationServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlMigrationService(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:datamigration:SqlMigrationService", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:datamigration/v20211030preview:SqlMigrationService" },
                    new global::Pulumi.Alias { Type = "azure-native:datamigration/v20220130preview:SqlMigrationService" },
                    new global::Pulumi.Alias { Type = "azure-native:datamigration/v20220330preview:SqlMigrationService" },
                    new global::Pulumi.Alias { Type = "azure-native:datamigration/v20230715preview:SqlMigrationService" },
                    new global::Pulumi.Alias { Type = "azure-native:datamigration/v20250315preview:SqlMigrationService" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlMigrationService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlMigrationService Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SqlMigrationService(name, id, options);
        }
    }

    public sealed class SqlMigrationServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the SQL Migration Service.
        /// </summary>
        [Input("sqlMigrationServiceName")]
        public Input<string>? SqlMigrationServiceName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SqlMigrationServiceArgs()
        {
        }
        public static new SqlMigrationServiceArgs Empty => new SqlMigrationServiceArgs();
    }
}
