// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DataMigration.V20180419
{
    /// <summary>
    /// Authentication type to use for connection
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationType : IEquatable<AuthenticationType>
    {
        private readonly string _value;

        private AuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthenticationType None { get; } = new AuthenticationType("None");
        public static AuthenticationType WindowsAuthentication { get; } = new AuthenticationType("WindowsAuthentication");
        public static AuthenticationType SqlAuthentication { get; } = new AuthenticationType("SqlAuthentication");
        public static AuthenticationType ActiveDirectoryIntegrated { get; } = new AuthenticationType("ActiveDirectoryIntegrated");
        public static AuthenticationType ActiveDirectoryPassword { get; } = new AuthenticationType("ActiveDirectoryPassword");

        public static bool operator ==(AuthenticationType left, AuthenticationType right) => left.Equals(right);
        public static bool operator !=(AuthenticationType left, AuthenticationType right) => !left.Equals(right);

        public static explicit operator string(AuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationType other && Equals(other);
        public bool Equals(AuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backup Mode to specify whether to use existing backup or create new backup.
    /// </summary>
    [EnumType]
    public readonly struct BackupMode : IEquatable<BackupMode>
    {
        private readonly string _value;

        private BackupMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupMode CreateBackup { get; } = new BackupMode("CreateBackup");
        public static BackupMode ExistingBackup { get; } = new BackupMode("ExistingBackup");

        public static bool operator ==(BackupMode left, BackupMode right) => left.Equals(right);
        public static bool operator !=(BackupMode left, BackupMode right) => !left.Equals(right);

        public static explicit operator string(BackupMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupMode other && Equals(other);
        public bool Equals(BackupMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source platform for the project
    /// </summary>
    [EnumType]
    public readonly struct ProjectSourcePlatform : IEquatable<ProjectSourcePlatform>
    {
        private readonly string _value;

        private ProjectSourcePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectSourcePlatform SQL { get; } = new ProjectSourcePlatform("SQL");
        public static ProjectSourcePlatform Unknown { get; } = new ProjectSourcePlatform("Unknown");

        public static bool operator ==(ProjectSourcePlatform left, ProjectSourcePlatform right) => left.Equals(right);
        public static bool operator !=(ProjectSourcePlatform left, ProjectSourcePlatform right) => !left.Equals(right);

        public static explicit operator string(ProjectSourcePlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectSourcePlatform other && Equals(other);
        public bool Equals(ProjectSourcePlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target platform for the project
    /// </summary>
    [EnumType]
    public readonly struct ProjectTargetPlatform : IEquatable<ProjectTargetPlatform>
    {
        private readonly string _value;

        private ProjectTargetPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectTargetPlatform SQLDB { get; } = new ProjectTargetPlatform("SQLDB");
        public static ProjectTargetPlatform Unknown { get; } = new ProjectTargetPlatform("Unknown");

        public static bool operator ==(ProjectTargetPlatform left, ProjectTargetPlatform right) => left.Equals(right);
        public static bool operator !=(ProjectTargetPlatform left, ProjectTargetPlatform right) => !left.Equals(right);

        public static explicit operator string(ProjectTargetPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectTargetPlatform other && Equals(other);
        public bool Equals(ProjectTargetPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Permission group for validations
    /// </summary>
    [EnumType]
    public readonly struct ServerLevelPermissionsGroup : IEquatable<ServerLevelPermissionsGroup>
    {
        private readonly string _value;

        private ServerLevelPermissionsGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerLevelPermissionsGroup Default { get; } = new ServerLevelPermissionsGroup("Default");
        public static ServerLevelPermissionsGroup MigrationFromSqlServerToAzureDB { get; } = new ServerLevelPermissionsGroup("MigrationFromSqlServerToAzureDB");
        public static ServerLevelPermissionsGroup MigrationFromSqlServerToAzureMI { get; } = new ServerLevelPermissionsGroup("MigrationFromSqlServerToAzureMI");
        public static ServerLevelPermissionsGroup MigrationFromMySQLToAzureDBForMySQL { get; } = new ServerLevelPermissionsGroup("MigrationFromMySQLToAzureDBForMySQL");

        public static bool operator ==(ServerLevelPermissionsGroup left, ServerLevelPermissionsGroup right) => left.Equals(right);
        public static bool operator !=(ServerLevelPermissionsGroup left, ServerLevelPermissionsGroup right) => !left.Equals(right);

        public static explicit operator string(ServerLevelPermissionsGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerLevelPermissionsGroup other && Equals(other);
        public bool Equals(ServerLevelPermissionsGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server platform type for connection
    /// </summary>
    [EnumType]
    public readonly struct SqlSourcePlatform : IEquatable<SqlSourcePlatform>
    {
        private readonly string _value;

        private SqlSourcePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlSourcePlatform SqlOnPrem { get; } = new SqlSourcePlatform("SqlOnPrem");

        public static bool operator ==(SqlSourcePlatform left, SqlSourcePlatform right) => left.Equals(right);
        public static bool operator !=(SqlSourcePlatform left, SqlSourcePlatform right) => !left.Equals(right);

        public static explicit operator string(SqlSourcePlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlSourcePlatform other && Equals(other);
        public bool Equals(SqlSourcePlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
