// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataMigration.V20180715Preview.Outputs
{

    [OutputType]
    public sealed class MigrateSqlServerSqlDbSyncDatabaseInputResponse
    {
        /// <summary>
        /// Unique identifier for database
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Migration settings which tune the migration behavior
        /// </summary>
        public readonly ImmutableDictionary<string, string>? MigrationSetting;
        /// <summary>
        /// Name of database
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Schema name to be migrated
        /// </summary>
        public readonly string? SchemaName;
        /// <summary>
        /// Source settings to tune source endpoint migration behavior
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SourceSetting;
        /// <summary>
        /// Mapping of source to target tables
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TableMap;
        /// <summary>
        /// Target database name
        /// </summary>
        public readonly string? TargetDatabaseName;
        /// <summary>
        /// Target settings to tune target endpoint migration behavior
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TargetSetting;

        [OutputConstructor]
        private MigrateSqlServerSqlDbSyncDatabaseInputResponse(
            string? id,

            ImmutableDictionary<string, string>? migrationSetting,

            string? name,

            string? schemaName,

            ImmutableDictionary<string, string>? sourceSetting,

            ImmutableDictionary<string, string>? tableMap,

            string? targetDatabaseName,

            ImmutableDictionary<string, string>? targetSetting)
        {
            Id = id;
            MigrationSetting = migrationSetting;
            Name = name;
            SchemaName = schemaName;
            SourceSetting = sourceSetting;
            TableMap = tableMap;
            TargetDatabaseName = targetDatabaseName;
            TargetSetting = targetSetting;
        }
    }
}
