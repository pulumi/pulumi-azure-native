// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DataMigration.V20180715Preview
{
    /// <summary>
    /// Authentication type to use for connection
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationType : IEquatable<AuthenticationType>
    {
        private readonly string _value;

        private AuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthenticationType None { get; } = new AuthenticationType("None");
        public static AuthenticationType WindowsAuthentication { get; } = new AuthenticationType("WindowsAuthentication");
        public static AuthenticationType SqlAuthentication { get; } = new AuthenticationType("SqlAuthentication");
        public static AuthenticationType ActiveDirectoryIntegrated { get; } = new AuthenticationType("ActiveDirectoryIntegrated");
        public static AuthenticationType ActiveDirectoryPassword { get; } = new AuthenticationType("ActiveDirectoryPassword");

        public static bool operator ==(AuthenticationType left, AuthenticationType right) => left.Equals(right);
        public static bool operator !=(AuthenticationType left, AuthenticationType right) => !left.Equals(right);

        public static explicit operator string(AuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationType other && Equals(other);
        public bool Equals(AuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backup Mode to specify whether to use existing backup or create new backup.
    /// </summary>
    [EnumType]
    public readonly struct BackupMode : IEquatable<BackupMode>
    {
        private readonly string _value;

        private BackupMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupMode CreateBackup { get; } = new BackupMode("CreateBackup");
        public static BackupMode ExistingBackup { get; } = new BackupMode("ExistingBackup");

        public static bool operator ==(BackupMode left, BackupMode right) => left.Equals(right);
        public static bool operator !=(BackupMode left, BackupMode right) => !left.Equals(right);

        public static explicit operator string(BackupMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupMode other && Equals(other);
        public bool Equals(BackupMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes how changes will be replicated from the source to the target. The default is OneTime.
    /// </summary>
    [EnumType]
    public readonly struct MongoDbReplication : IEquatable<MongoDbReplication>
    {
        private readonly string _value;

        private MongoDbReplication(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MongoDbReplication Disabled { get; } = new MongoDbReplication("Disabled");
        public static MongoDbReplication OneTime { get; } = new MongoDbReplication("OneTime");
        public static MongoDbReplication Continuous { get; } = new MongoDbReplication("Continuous");

        public static bool operator ==(MongoDbReplication left, MongoDbReplication right) => left.Equals(right);
        public static bool operator !=(MongoDbReplication left, MongoDbReplication right) => !left.Equals(right);

        public static explicit operator string(MongoDbReplication value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MongoDbReplication other && Equals(other);
        public bool Equals(MongoDbReplication other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The field ordering
    /// </summary>
    [EnumType]
    public readonly struct MongoDbShardKeyOrder : IEquatable<MongoDbShardKeyOrder>
    {
        private readonly string _value;

        private MongoDbShardKeyOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MongoDbShardKeyOrder Forward { get; } = new MongoDbShardKeyOrder("Forward");
        public static MongoDbShardKeyOrder Reverse { get; } = new MongoDbShardKeyOrder("Reverse");
        public static MongoDbShardKeyOrder Hashed { get; } = new MongoDbShardKeyOrder("Hashed");

        public static bool operator ==(MongoDbShardKeyOrder left, MongoDbShardKeyOrder right) => left.Equals(right);
        public static bool operator !=(MongoDbShardKeyOrder left, MongoDbShardKeyOrder right) => !left.Equals(right);

        public static explicit operator string(MongoDbShardKeyOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MongoDbShardKeyOrder other && Equals(other);
        public bool Equals(MongoDbShardKeyOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source platform for the project
    /// </summary>
    [EnumType]
    public readonly struct ProjectSourcePlatform : IEquatable<ProjectSourcePlatform>
    {
        private readonly string _value;

        private ProjectSourcePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectSourcePlatform SQL { get; } = new ProjectSourcePlatform("SQL");
        public static ProjectSourcePlatform MySQL { get; } = new ProjectSourcePlatform("MySQL");
        public static ProjectSourcePlatform PostgreSql { get; } = new ProjectSourcePlatform("PostgreSql");
        public static ProjectSourcePlatform MongoDb { get; } = new ProjectSourcePlatform("MongoDb");
        public static ProjectSourcePlatform Unknown { get; } = new ProjectSourcePlatform("Unknown");

        public static bool operator ==(ProjectSourcePlatform left, ProjectSourcePlatform right) => left.Equals(right);
        public static bool operator !=(ProjectSourcePlatform left, ProjectSourcePlatform right) => !left.Equals(right);

        public static explicit operator string(ProjectSourcePlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectSourcePlatform other && Equals(other);
        public bool Equals(ProjectSourcePlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target platform for the project
    /// </summary>
    [EnumType]
    public readonly struct ProjectTargetPlatform : IEquatable<ProjectTargetPlatform>
    {
        private readonly string _value;

        private ProjectTargetPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectTargetPlatform SQLDB { get; } = new ProjectTargetPlatform("SQLDB");
        public static ProjectTargetPlatform SQLMI { get; } = new ProjectTargetPlatform("SQLMI");
        public static ProjectTargetPlatform AzureDbForMySql { get; } = new ProjectTargetPlatform("AzureDbForMySql");
        public static ProjectTargetPlatform AzureDbForPostgreSql { get; } = new ProjectTargetPlatform("AzureDbForPostgreSql");
        public static ProjectTargetPlatform MongoDb { get; } = new ProjectTargetPlatform("MongoDb");
        public static ProjectTargetPlatform Unknown { get; } = new ProjectTargetPlatform("Unknown");

        public static bool operator ==(ProjectTargetPlatform left, ProjectTargetPlatform right) => left.Equals(right);
        public static bool operator !=(ProjectTargetPlatform left, ProjectTargetPlatform right) => !left.Equals(right);

        public static explicit operator string(ProjectTargetPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectTargetPlatform other && Equals(other);
        public bool Equals(ProjectTargetPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Permission group for validations
    /// </summary>
    [EnumType]
    public readonly struct ServerLevelPermissionsGroup : IEquatable<ServerLevelPermissionsGroup>
    {
        private readonly string _value;

        private ServerLevelPermissionsGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerLevelPermissionsGroup Default { get; } = new ServerLevelPermissionsGroup("Default");
        public static ServerLevelPermissionsGroup MigrationFromSqlServerToAzureDB { get; } = new ServerLevelPermissionsGroup("MigrationFromSqlServerToAzureDB");
        public static ServerLevelPermissionsGroup MigrationFromSqlServerToAzureMI { get; } = new ServerLevelPermissionsGroup("MigrationFromSqlServerToAzureMI");
        public static ServerLevelPermissionsGroup MigrationFromMySQLToAzureDBForMySQL { get; } = new ServerLevelPermissionsGroup("MigrationFromMySQLToAzureDBForMySQL");

        public static bool operator ==(ServerLevelPermissionsGroup left, ServerLevelPermissionsGroup right) => left.Equals(right);
        public static bool operator !=(ServerLevelPermissionsGroup left, ServerLevelPermissionsGroup right) => !left.Equals(right);

        public static explicit operator string(ServerLevelPermissionsGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerLevelPermissionsGroup other && Equals(other);
        public bool Equals(ServerLevelPermissionsGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server platform type for connection
    /// </summary>
    [EnumType]
    public readonly struct SqlSourcePlatform : IEquatable<SqlSourcePlatform>
    {
        private readonly string _value;

        private SqlSourcePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlSourcePlatform SqlOnPrem { get; } = new SqlSourcePlatform("SqlOnPrem");

        public static bool operator ==(SqlSourcePlatform left, SqlSourcePlatform right) => left.Equals(right);
        public static bool operator !=(SqlSourcePlatform left, SqlSourcePlatform right) => !left.Equals(right);

        public static explicit operator string(SqlSourcePlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlSourcePlatform other && Equals(other);
        public bool Equals(SqlSourcePlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The overwrite option for the SSIS project migration
    /// </summary>
    [EnumType]
    public readonly struct SsisMigrationOverwriteOption : IEquatable<SsisMigrationOverwriteOption>
    {
        private readonly string _value;

        private SsisMigrationOverwriteOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SsisMigrationOverwriteOption Ignore { get; } = new SsisMigrationOverwriteOption("Ignore");
        public static SsisMigrationOverwriteOption Overwrite { get; } = new SsisMigrationOverwriteOption("Overwrite");

        public static bool operator ==(SsisMigrationOverwriteOption left, SsisMigrationOverwriteOption right) => left.Equals(right);
        public static bool operator !=(SsisMigrationOverwriteOption left, SsisMigrationOverwriteOption right) => !left.Equals(right);

        public static explicit operator string(SsisMigrationOverwriteOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SsisMigrationOverwriteOption other && Equals(other);
        public bool Equals(SsisMigrationOverwriteOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SSIS store type of source, only SSIS catalog is supported now in DMS
    /// </summary>
    [EnumType]
    public readonly struct SsisStoreType : IEquatable<SsisStoreType>
    {
        private readonly string _value;

        private SsisStoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SsisStoreType SsisCatalog { get; } = new SsisStoreType("SsisCatalog");

        public static bool operator ==(SsisStoreType left, SsisStoreType right) => left.Equals(right);
        public static bool operator !=(SsisStoreType left, SsisStoreType right) => !left.Equals(right);

        public static explicit operator string(SsisStoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SsisStoreType other && Equals(other);
        public bool Equals(SsisStoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
