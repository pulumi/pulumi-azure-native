// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ProviderHub.V20201120
{
    [EnumType]
    public readonly struct ExtensionCategory : IEquatable<ExtensionCategory>
    {
        private readonly string _value;

        private ExtensionCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtensionCategory NotSpecified { get; } = new ExtensionCategory("NotSpecified");
        public static ExtensionCategory ResourceCreationValidate { get; } = new ExtensionCategory("ResourceCreationValidate");
        public static ExtensionCategory ResourceCreationBegin { get; } = new ExtensionCategory("ResourceCreationBegin");
        public static ExtensionCategory ResourceCreationCompleted { get; } = new ExtensionCategory("ResourceCreationCompleted");
        public static ExtensionCategory ResourceReadValidate { get; } = new ExtensionCategory("ResourceReadValidate");
        public static ExtensionCategory ResourceReadBegin { get; } = new ExtensionCategory("ResourceReadBegin");
        public static ExtensionCategory ResourcePatchValidate { get; } = new ExtensionCategory("ResourcePatchValidate");
        public static ExtensionCategory ResourcePatchCompleted { get; } = new ExtensionCategory("ResourcePatchCompleted");
        public static ExtensionCategory ResourceDeletionValidate { get; } = new ExtensionCategory("ResourceDeletionValidate");
        public static ExtensionCategory ResourceDeletionBegin { get; } = new ExtensionCategory("ResourceDeletionBegin");
        public static ExtensionCategory ResourceDeletionCompleted { get; } = new ExtensionCategory("ResourceDeletionCompleted");
        public static ExtensionCategory ResourcePostAction { get; } = new ExtensionCategory("ResourcePostAction");
        public static ExtensionCategory SubscriptionLifecycleNotification { get; } = new ExtensionCategory("SubscriptionLifecycleNotification");
        public static ExtensionCategory ResourcePatchBegin { get; } = new ExtensionCategory("ResourcePatchBegin");
        public static ExtensionCategory ResourceMoveBegin { get; } = new ExtensionCategory("ResourceMoveBegin");
        public static ExtensionCategory ResourceMoveCompleted { get; } = new ExtensionCategory("ResourceMoveCompleted");

        public static bool operator ==(ExtensionCategory left, ExtensionCategory right) => left.Equals(right);
        public static bool operator !=(ExtensionCategory left, ExtensionCategory right) => !left.Equals(right);

        public static explicit operator string(ExtensionCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtensionCategory other && Equals(other);
        public bool Equals(ExtensionCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ExtensionOptionType : IEquatable<ExtensionOptionType>
    {
        private readonly string _value;

        private ExtensionOptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtensionOptionType NotSpecified { get; } = new ExtensionOptionType("NotSpecified");
        public static ExtensionOptionType DoNotMergeExistingReadOnlyAndSecretProperties { get; } = new ExtensionOptionType("DoNotMergeExistingReadOnlyAndSecretProperties");
        public static ExtensionOptionType IncludeInternalMetadata { get; } = new ExtensionOptionType("IncludeInternalMetadata");

        public static bool operator ==(ExtensionOptionType left, ExtensionOptionType right) => left.Equals(right);
        public static bool operator !=(ExtensionOptionType left, ExtensionOptionType right) => !left.Equals(right);

        public static explicit operator string(ExtensionOptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtensionOptionType other && Equals(other);
        public bool Equals(ExtensionOptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FeaturesPolicy : IEquatable<FeaturesPolicy>
    {
        private readonly string _value;

        private FeaturesPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeaturesPolicy Any { get; } = new FeaturesPolicy("Any");
        public static FeaturesPolicy All { get; } = new FeaturesPolicy("All");

        public static bool operator ==(FeaturesPolicy left, FeaturesPolicy right) => left.Equals(right);
        public static bool operator !=(FeaturesPolicy left, FeaturesPolicy right) => !left.Equals(right);

        public static explicit operator string(FeaturesPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeaturesPolicy other && Equals(other);
        public bool Equals(FeaturesPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IdentityManagementTypes : IEquatable<IdentityManagementTypes>
    {
        private readonly string _value;

        private IdentityManagementTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityManagementTypes NotSpecified { get; } = new IdentityManagementTypes("NotSpecified");
        public static IdentityManagementTypes SystemAssigned { get; } = new IdentityManagementTypes("SystemAssigned");
        public static IdentityManagementTypes UserAssigned { get; } = new IdentityManagementTypes("UserAssigned");
        public static IdentityManagementTypes Actor { get; } = new IdentityManagementTypes("Actor");
        public static IdentityManagementTypes DelegatedResourceIdentity { get; } = new IdentityManagementTypes("DelegatedResourceIdentity");

        public static bool operator ==(IdentityManagementTypes left, IdentityManagementTypes right) => left.Equals(right);
        public static bool operator !=(IdentityManagementTypes left, IdentityManagementTypes right) => !left.Equals(right);

        public static explicit operator string(IdentityManagementTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityManagementTypes other && Equals(other);
        public bool Equals(IdentityManagementTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LoggingDetails : IEquatable<LoggingDetails>
    {
        private readonly string _value;

        private LoggingDetails(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoggingDetails None { get; } = new LoggingDetails("None");
        public static LoggingDetails Body { get; } = new LoggingDetails("Body");

        public static bool operator ==(LoggingDetails left, LoggingDetails right) => left.Equals(right);
        public static bool operator !=(LoggingDetails left, LoggingDetails right) => !left.Equals(right);

        public static explicit operator string(LoggingDetails value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggingDetails other && Equals(other);
        public bool Equals(LoggingDetails other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LoggingDirections : IEquatable<LoggingDirections>
    {
        private readonly string _value;

        private LoggingDirections(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoggingDirections None { get; } = new LoggingDirections("None");
        public static LoggingDirections Request { get; } = new LoggingDirections("Request");
        public static LoggingDirections Response { get; } = new LoggingDirections("Response");

        public static bool operator ==(LoggingDirections left, LoggingDirections right) => left.Equals(right);
        public static bool operator !=(LoggingDirections left, LoggingDirections right) => !left.Equals(right);

        public static explicit operator string(LoggingDirections value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggingDirections other && Equals(other);
        public bool Equals(LoggingDirections other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MessageScope : IEquatable<MessageScope>
    {
        private readonly string _value;

        private MessageScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MessageScope NotSpecified { get; } = new MessageScope("NotSpecified");
        public static MessageScope RegisteredSubscriptions { get; } = new MessageScope("RegisteredSubscriptions");

        public static bool operator ==(MessageScope left, MessageScope right) => left.Equals(right);
        public static bool operator !=(MessageScope left, MessageScope right) => !left.Equals(right);

        public static explicit operator string(MessageScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MessageScope other && Equals(other);
        public bool Equals(MessageScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NotificationMode : IEquatable<NotificationMode>
    {
        private readonly string _value;

        private NotificationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotificationMode NotSpecified { get; } = new NotificationMode("NotSpecified");
        public static NotificationMode EventHub { get; } = new NotificationMode("EventHub");
        public static NotificationMode WebHook { get; } = new NotificationMode("WebHook");

        public static bool operator ==(NotificationMode left, NotificationMode right) => left.Equals(right);
        public static bool operator !=(NotificationMode left, NotificationMode right) => !left.Equals(right);

        public static explicit operator string(NotificationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationMode other && Equals(other);
        public bool Equals(NotificationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OptInHeaderType : IEquatable<OptInHeaderType>
    {
        private readonly string _value;

        private OptInHeaderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OptInHeaderType NotSpecified { get; } = new OptInHeaderType("NotSpecified");
        public static OptInHeaderType SignedUserToken { get; } = new OptInHeaderType("SignedUserToken");
        public static OptInHeaderType ClientGroupMembership { get; } = new OptInHeaderType("ClientGroupMembership");
        public static OptInHeaderType SignedAuxiliaryTokens { get; } = new OptInHeaderType("SignedAuxiliaryTokens");
        public static OptInHeaderType UnboundedClientGroupMembership { get; } = new OptInHeaderType("UnboundedClientGroupMembership");

        public static bool operator ==(OptInHeaderType left, OptInHeaderType right) => left.Equals(right);
        public static bool operator !=(OptInHeaderType left, OptInHeaderType right) => !left.Equals(right);

        public static explicit operator string(OptInHeaderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OptInHeaderType other && Equals(other);
        public bool Equals(OptInHeaderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PreflightOption : IEquatable<PreflightOption>
    {
        private readonly string _value;

        private PreflightOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreflightOption None { get; } = new PreflightOption("None");
        public static PreflightOption ContinueDeploymentOnFailure { get; } = new PreflightOption("ContinueDeploymentOnFailure");
        public static PreflightOption DefaultValidationOnly { get; } = new PreflightOption("DefaultValidationOnly");

        public static bool operator ==(PreflightOption left, PreflightOption right) => left.Equals(right);
        public static bool operator !=(PreflightOption left, PreflightOption right) => !left.Equals(right);

        public static explicit operator string(PreflightOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreflightOption other && Equals(other);
        public bool Equals(PreflightOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState NotSpecified { get; } = new ProvisioningState("NotSpecified");
        public static ProvisioningState Accepted { get; } = new ProvisioningState("Accepted");
        public static ProvisioningState Running { get; } = new ProvisioningState("Running");
        public static ProvisioningState Creating { get; } = new ProvisioningState("Creating");
        public static ProvisioningState Created { get; } = new ProvisioningState("Created");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        public static ProvisioningState Deleted { get; } = new ProvisioningState("Deleted");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState MovingResources { get; } = new ProvisioningState("MovingResources");
        public static ProvisioningState TransientFailure { get; } = new ProvisioningState("TransientFailure");
        public static ProvisioningState RolloutInProgress { get; } = new ProvisioningState("RolloutInProgress");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Regionality : IEquatable<Regionality>
    {
        private readonly string _value;

        private Regionality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Regionality NotSpecified { get; } = new Regionality("NotSpecified");
        public static Regionality Global { get; } = new Regionality("Global");
        public static Regionality Regional { get; } = new Regionality("Regional");

        public static bool operator ==(Regionality left, Regionality right) => left.Equals(right);
        public static bool operator !=(Regionality left, Regionality right) => !left.Equals(right);

        public static explicit operator string(Regionality value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Regionality other && Equals(other);
        public bool Equals(Regionality other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResourceDeletionPolicy : IEquatable<ResourceDeletionPolicy>
    {
        private readonly string _value;

        private ResourceDeletionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceDeletionPolicy NotSpecified { get; } = new ResourceDeletionPolicy("NotSpecified");
        public static ResourceDeletionPolicy CascadeDeleteAll { get; } = new ResourceDeletionPolicy("CascadeDeleteAll");
        public static ResourceDeletionPolicy CascadeDeleteProxyOnlyChildren { get; } = new ResourceDeletionPolicy("CascadeDeleteProxyOnlyChildren");

        public static bool operator ==(ResourceDeletionPolicy left, ResourceDeletionPolicy right) => left.Equals(right);
        public static bool operator !=(ResourceDeletionPolicy left, ResourceDeletionPolicy right) => !left.Equals(right);

        public static explicit operator string(ResourceDeletionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceDeletionPolicy other && Equals(other);
        public bool Equals(ResourceDeletionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResourceProviderCapabilitiesEffect : IEquatable<ResourceProviderCapabilitiesEffect>
    {
        private readonly string _value;

        private ResourceProviderCapabilitiesEffect(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceProviderCapabilitiesEffect NotSpecified { get; } = new ResourceProviderCapabilitiesEffect("NotSpecified");
        public static ResourceProviderCapabilitiesEffect Allow { get; } = new ResourceProviderCapabilitiesEffect("Allow");
        public static ResourceProviderCapabilitiesEffect Disallow { get; } = new ResourceProviderCapabilitiesEffect("Disallow");

        public static bool operator ==(ResourceProviderCapabilitiesEffect left, ResourceProviderCapabilitiesEffect right) => left.Equals(right);
        public static bool operator !=(ResourceProviderCapabilitiesEffect left, ResourceProviderCapabilitiesEffect right) => !left.Equals(right);

        public static explicit operator string(ResourceProviderCapabilitiesEffect value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceProviderCapabilitiesEffect other && Equals(other);
        public bool Equals(ResourceProviderCapabilitiesEffect other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResourceProviderType : IEquatable<ResourceProviderType>
    {
        private readonly string _value;

        private ResourceProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceProviderType NotSpecified { get; } = new ResourceProviderType("NotSpecified");
        public static ResourceProviderType Internal { get; } = new ResourceProviderType("Internal");
        public static ResourceProviderType External { get; } = new ResourceProviderType("External");
        public static ResourceProviderType Hidden { get; } = new ResourceProviderType("Hidden");
        public static ResourceProviderType RegistrationFree { get; } = new ResourceProviderType("RegistrationFree");
        public static ResourceProviderType LegacyRegistrationRequired { get; } = new ResourceProviderType("LegacyRegistrationRequired");
        public static ResourceProviderType TenantOnly { get; } = new ResourceProviderType("TenantOnly");
        public static ResourceProviderType AuthorizationFree { get; } = new ResourceProviderType("AuthorizationFree");

        public static bool operator ==(ResourceProviderType left, ResourceProviderType right) => left.Equals(right);
        public static bool operator !=(ResourceProviderType left, ResourceProviderType right) => !left.Equals(right);

        public static explicit operator string(ResourceProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceProviderType other && Equals(other);
        public bool Equals(ResourceProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RoutingType : IEquatable<RoutingType>
    {
        private readonly string _value;

        private RoutingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingType Default { get; } = new RoutingType("Default");
        public static RoutingType ProxyOnly { get; } = new RoutingType("ProxyOnly");
        public static RoutingType HostBased { get; } = new RoutingType("HostBased");
        public static RoutingType Extension { get; } = new RoutingType("Extension");
        public static RoutingType Tenant { get; } = new RoutingType("Tenant");
        public static RoutingType Fanout { get; } = new RoutingType("Fanout");
        public static RoutingType LocationBased { get; } = new RoutingType("LocationBased");
        public static RoutingType Failover { get; } = new RoutingType("Failover");
        public static RoutingType CascadeExtension { get; } = new RoutingType("CascadeExtension");

        public static bool operator ==(RoutingType left, RoutingType right) => left.Equals(right);
        public static bool operator !=(RoutingType left, RoutingType right) => !left.Equals(right);

        public static explicit operator string(RoutingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingType other && Equals(other);
        public bool Equals(RoutingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SkuScaleType : IEquatable<SkuScaleType>
    {
        private readonly string _value;

        private SkuScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuScaleType None { get; } = new SkuScaleType("None");
        public static SkuScaleType Manual { get; } = new SkuScaleType("Manual");
        public static SkuScaleType Automatic { get; } = new SkuScaleType("Automatic");

        public static bool operator ==(SkuScaleType left, SkuScaleType right) => left.Equals(right);
        public static bool operator !=(SkuScaleType left, SkuScaleType right) => !left.Equals(right);

        public static explicit operator string(SkuScaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuScaleType other && Equals(other);
        public bool Equals(SkuScaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SubscriptionNotificationOperation : IEquatable<SubscriptionNotificationOperation>
    {
        private readonly string _value;

        private SubscriptionNotificationOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionNotificationOperation NotDefined { get; } = new SubscriptionNotificationOperation("NotDefined");
        public static SubscriptionNotificationOperation DeleteAllResources { get; } = new SubscriptionNotificationOperation("DeleteAllResources");
        public static SubscriptionNotificationOperation SoftDeleteAllResources { get; } = new SubscriptionNotificationOperation("SoftDeleteAllResources");
        public static SubscriptionNotificationOperation NoOp { get; } = new SubscriptionNotificationOperation("NoOp");
        public static SubscriptionNotificationOperation BillingCancellation { get; } = new SubscriptionNotificationOperation("BillingCancellation");
        public static SubscriptionNotificationOperation UndoSoftDelete { get; } = new SubscriptionNotificationOperation("UndoSoftDelete");

        public static bool operator ==(SubscriptionNotificationOperation left, SubscriptionNotificationOperation right) => left.Equals(right);
        public static bool operator !=(SubscriptionNotificationOperation left, SubscriptionNotificationOperation right) => !left.Equals(right);

        public static explicit operator string(SubscriptionNotificationOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionNotificationOperation other && Equals(other);
        public bool Equals(SubscriptionNotificationOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState NotDefined { get; } = new SubscriptionState("NotDefined");
        public static SubscriptionState Enabled { get; } = new SubscriptionState("Enabled");
        public static SubscriptionState Warned { get; } = new SubscriptionState("Warned");
        public static SubscriptionState PastDue { get; } = new SubscriptionState("PastDue");
        public static SubscriptionState Disabled { get; } = new SubscriptionState("Disabled");
        public static SubscriptionState Deleted { get; } = new SubscriptionState("Deleted");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SubscriptionTransitioningState : IEquatable<SubscriptionTransitioningState>
    {
        private readonly string _value;

        private SubscriptionTransitioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionTransitioningState Registered { get; } = new SubscriptionTransitioningState("Registered");
        public static SubscriptionTransitioningState Unregistered { get; } = new SubscriptionTransitioningState("Unregistered");
        public static SubscriptionTransitioningState Warned { get; } = new SubscriptionTransitioningState("Warned");
        public static SubscriptionTransitioningState Suspended { get; } = new SubscriptionTransitioningState("Suspended");
        public static SubscriptionTransitioningState Deleted { get; } = new SubscriptionTransitioningState("Deleted");
        public static SubscriptionTransitioningState WarnedToRegistered { get; } = new SubscriptionTransitioningState("WarnedToRegistered");
        public static SubscriptionTransitioningState WarnedToSuspended { get; } = new SubscriptionTransitioningState("WarnedToSuspended");
        public static SubscriptionTransitioningState WarnedToDeleted { get; } = new SubscriptionTransitioningState("WarnedToDeleted");
        public static SubscriptionTransitioningState WarnedToUnregistered { get; } = new SubscriptionTransitioningState("WarnedToUnregistered");
        public static SubscriptionTransitioningState SuspendedToRegistered { get; } = new SubscriptionTransitioningState("SuspendedToRegistered");
        public static SubscriptionTransitioningState SuspendedToWarned { get; } = new SubscriptionTransitioningState("SuspendedToWarned");
        public static SubscriptionTransitioningState SuspendedToDeleted { get; } = new SubscriptionTransitioningState("SuspendedToDeleted");
        public static SubscriptionTransitioningState SuspendedToUnregistered { get; } = new SubscriptionTransitioningState("SuspendedToUnregistered");

        public static bool operator ==(SubscriptionTransitioningState left, SubscriptionTransitioningState right) => left.Equals(right);
        public static bool operator !=(SubscriptionTransitioningState left, SubscriptionTransitioningState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionTransitioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionTransitioningState other && Equals(other);
        public bool Equals(SubscriptionTransitioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThrottlingMetricType : IEquatable<ThrottlingMetricType>
    {
        private readonly string _value;

        private ThrottlingMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThrottlingMetricType NotSpecified { get; } = new ThrottlingMetricType("NotSpecified");
        public static ThrottlingMetricType NumberOfRequests { get; } = new ThrottlingMetricType("NumberOfRequests");
        public static ThrottlingMetricType NumberOfResources { get; } = new ThrottlingMetricType("NumberOfResources");

        public static bool operator ==(ThrottlingMetricType left, ThrottlingMetricType right) => left.Equals(right);
        public static bool operator !=(ThrottlingMetricType left, ThrottlingMetricType right) => !left.Equals(right);

        public static explicit operator string(ThrottlingMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThrottlingMetricType other && Equals(other);
        public bool Equals(ThrottlingMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
