// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ProviderHub.Inputs
{

    public sealed class ProviderRegistrationPropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<Inputs.ResourceProviderCapabilitiesArgs>? _capabilities;

        /// <summary>
        /// The capabilities.
        /// </summary>
        public InputList<Inputs.ResourceProviderCapabilitiesArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.ResourceProviderCapabilitiesArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// The cross tenant token validation.
        /// </summary>
        [Input("crossTenantTokenValidation")]
        public InputUnion<string, Pulumi.AzureNative.ProviderHub.CrossTenantTokenValidation>? CrossTenantTokenValidation { get; set; }

        /// <summary>
        /// Custom manifest version.
        /// </summary>
        [Input("customManifestVersion")]
        public Input<string>? CustomManifestVersion { get; set; }

        /// <summary>
        /// The dsts configuration.
        /// </summary>
        [Input("dstsConfiguration")]
        public Input<Inputs.ResourceProviderManifestPropertiesDstsConfigurationArgs>? DstsConfiguration { get; set; }

        /// <summary>
        /// The enable tenant linked notification.
        /// </summary>
        [Input("enableTenantLinkedNotification")]
        public Input<bool>? EnableTenantLinkedNotification { get; set; }

        /// <summary>
        /// The features rule.
        /// </summary>
        [Input("featuresRule")]
        public Input<Inputs.ResourceProviderManifestPropertiesFeaturesRuleArgs>? FeaturesRule { get; set; }

        [Input("globalNotificationEndpoints")]
        private InputList<Inputs.ResourceProviderEndpointArgs>? _globalNotificationEndpoints;

        /// <summary>
        /// The global notification endpoints.
        /// </summary>
        public InputList<Inputs.ResourceProviderEndpointArgs> GlobalNotificationEndpoints
        {
            get => _globalNotificationEndpoints ?? (_globalNotificationEndpoints = new InputList<Inputs.ResourceProviderEndpointArgs>());
            set => _globalNotificationEndpoints = value;
        }

        /// <summary>
        /// Legacy namespace.
        /// </summary>
        [Input("legacyNamespace")]
        public Input<string>? LegacyNamespace { get; set; }

        [Input("legacyRegistrations")]
        private InputList<string>? _legacyRegistrations;

        /// <summary>
        /// Legacy registrations.
        /// </summary>
        public InputList<string> LegacyRegistrations
        {
            get => _legacyRegistrations ?? (_legacyRegistrations = new InputList<string>());
            set => _legacyRegistrations = value;
        }

        [Input("linkedNotificationRules")]
        private InputList<Inputs.FanoutLinkedNotificationRuleArgs>? _linkedNotificationRules;

        /// <summary>
        /// The linked notification rules.
        /// </summary>
        public InputList<Inputs.FanoutLinkedNotificationRuleArgs> LinkedNotificationRules
        {
            get => _linkedNotificationRules ?? (_linkedNotificationRules = new InputList<Inputs.FanoutLinkedNotificationRuleArgs>());
            set => _linkedNotificationRules = value;
        }

        /// <summary>
        /// The resource provider management.
        /// </summary>
        [Input("management")]
        public Input<Inputs.ResourceProviderManifestPropertiesManagementArgs>? Management { get; set; }

        [Input("managementGroupGlobalNotificationEndpoints")]
        private InputList<Inputs.ResourceProviderEndpointArgs>? _managementGroupGlobalNotificationEndpoints;

        /// <summary>
        /// Management groups global notification endpoints.
        /// </summary>
        public InputList<Inputs.ResourceProviderEndpointArgs> ManagementGroupGlobalNotificationEndpoints
        {
            get => _managementGroupGlobalNotificationEndpoints ?? (_managementGroupGlobalNotificationEndpoints = new InputList<Inputs.ResourceProviderEndpointArgs>());
            set => _managementGroupGlobalNotificationEndpoints = value;
        }

        /// <summary>
        /// The metadata.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Notification options.
        /// </summary>
        [Input("notificationOptions")]
        public InputUnion<string, Pulumi.AzureNative.ProviderHub.NotificationOptions>? NotificationOptions { get; set; }

        /// <summary>
        /// Notification settings.
        /// </summary>
        [Input("notificationSettings")]
        public Input<Inputs.ResourceProviderManifestPropertiesNotificationSettingsArgs>? NotificationSettings { get; set; }

        [Input("notifications")]
        private InputList<Inputs.NotificationArgs>? _notifications;

        /// <summary>
        /// The notifications.
        /// </summary>
        public InputList<Inputs.NotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.NotificationArgs>());
            set => _notifications = value;
        }

        [Input("optionalFeatures")]
        private InputList<string>? _optionalFeatures;

        /// <summary>
        /// Optional features.
        /// </summary>
        public InputList<string> OptionalFeatures
        {
            get => _optionalFeatures ?? (_optionalFeatures = new InputList<string>());
            set => _optionalFeatures = value;
        }

        /// <summary>
        /// The private resource provider configuration.
        /// </summary>
        [Input("privateResourceProviderConfiguration")]
        public Input<Inputs.ProviderRegistrationPropertiesPrivateResourceProviderConfigurationArgs>? PrivateResourceProviderConfiguration { get; set; }

        /// <summary>
        /// The provider authentication.
        /// </summary>
        [Input("providerAuthentication")]
        public Input<Inputs.ResourceProviderManifestPropertiesProviderAuthenticationArgs>? ProviderAuthentication { get; set; }

        [Input("providerAuthorizations")]
        private InputList<Inputs.ResourceProviderAuthorizationArgs>? _providerAuthorizations;

        /// <summary>
        /// The provider authorizations.
        /// </summary>
        public InputList<Inputs.ResourceProviderAuthorizationArgs> ProviderAuthorizations
        {
            get => _providerAuthorizations ?? (_providerAuthorizations = new InputList<Inputs.ResourceProviderAuthorizationArgs>());
            set => _providerAuthorizations = value;
        }

        /// <summary>
        /// The provider hub metadata.
        /// </summary>
        [Input("providerHubMetadata")]
        public Input<Inputs.ProviderRegistrationPropertiesProviderHubMetadataArgs>? ProviderHubMetadata { get; set; }

        /// <summary>
        /// The provider type.
        /// </summary>
        [Input("providerType")]
        public InputUnion<string, Pulumi.AzureNative.ProviderHub.ResourceProviderType>? ProviderType { get; set; }

        /// <summary>
        /// The provider version.
        /// </summary>
        [Input("providerVersion")]
        public Input<string>? ProviderVersion { get; set; }

        /// <summary>
        /// The request header options.
        /// </summary>
        [Input("requestHeaderOptions")]
        public Input<Inputs.ResourceProviderManifestPropertiesRequestHeaderOptionsArgs>? RequestHeaderOptions { get; set; }

        [Input("requiredFeatures")]
        private InputList<string>? _requiredFeatures;

        /// <summary>
        /// The required features.
        /// </summary>
        public InputList<string> RequiredFeatures
        {
            get => _requiredFeatures ?? (_requiredFeatures = new InputList<string>());
            set => _requiredFeatures = value;
        }

        /// <summary>
        /// Resource group lock option during move.
        /// </summary>
        [Input("resourceGroupLockOptionDuringMove")]
        public Input<Inputs.ResourceProviderManifestPropertiesResourceGroupLockOptionDuringMoveArgs>? ResourceGroupLockOptionDuringMove { get; set; }

        [Input("resourceHydrationAccounts")]
        private InputList<Inputs.ResourceHydrationAccountArgs>? _resourceHydrationAccounts;

        /// <summary>
        /// resource hydration accounts
        /// </summary>
        public InputList<Inputs.ResourceHydrationAccountArgs> ResourceHydrationAccounts
        {
            get => _resourceHydrationAccounts ?? (_resourceHydrationAccounts = new InputList<Inputs.ResourceHydrationAccountArgs>());
            set => _resourceHydrationAccounts = value;
        }

        /// <summary>
        /// The resource provider authorization rules.
        /// </summary>
        [Input("resourceProviderAuthorizationRules")]
        public Input<Inputs.ResourceProviderAuthorizationRulesArgs>? ResourceProviderAuthorizationRules { get; set; }

        /// <summary>
        /// Response options.
        /// </summary>
        [Input("responseOptions")]
        public Input<Inputs.ResourceProviderManifestPropertiesResponseOptionsArgs>? ResponseOptions { get; set; }

        /// <summary>
        /// The service name.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("services")]
        private InputList<Inputs.ResourceProviderServiceArgs>? _services;

        /// <summary>
        /// The services.
        /// </summary>
        public InputList<Inputs.ResourceProviderServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ResourceProviderServiceArgs>());
            set => _services = value;
        }

        /// <summary>
        /// The subscription lifecycle notification specifications.
        /// </summary>
        [Input("subscriptionLifecycleNotificationSpecifications")]
        public Input<Inputs.ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs>? SubscriptionLifecycleNotificationSpecifications { get; set; }

        /// <summary>
        /// The template deployment options.
        /// </summary>
        [Input("templateDeploymentOptions")]
        public Input<Inputs.ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs>? TemplateDeploymentOptions { get; set; }

        /// <summary>
        /// The token auth configuration.
        /// </summary>
        [Input("tokenAuthConfiguration")]
        public Input<Inputs.TokenAuthConfigurationArgs>? TokenAuthConfiguration { get; set; }

        public ProviderRegistrationPropertiesArgs()
        {
        }
        public static new ProviderRegistrationPropertiesArgs Empty => new ProviderRegistrationPropertiesArgs();
    }
}
