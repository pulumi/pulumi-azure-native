// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ProviderHub.Outputs
{

    [OutputType]
    public sealed class ProviderRegistrationPropertiesResponse
    {
        /// <summary>
        /// The capabilities.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceProviderCapabilitiesResponse> Capabilities;
        /// <summary>
        /// The cross tenant token validation.
        /// </summary>
        public readonly string? CrossTenantTokenValidation;
        /// <summary>
        /// Custom manifest version.
        /// </summary>
        public readonly string? CustomManifestVersion;
        /// <summary>
        /// The dsts configuration.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseDstsConfiguration? DstsConfiguration;
        /// <summary>
        /// The enable tenant linked notification.
        /// </summary>
        public readonly bool? EnableTenantLinkedNotification;
        /// <summary>
        /// The features rule.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseFeaturesRule? FeaturesRule;
        /// <summary>
        /// The global notification endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceProviderEndpointResponse> GlobalNotificationEndpoints;
        /// <summary>
        /// Legacy namespace.
        /// </summary>
        public readonly string? LegacyNamespace;
        /// <summary>
        /// Legacy registrations.
        /// </summary>
        public readonly ImmutableArray<string> LegacyRegistrations;
        /// <summary>
        /// The linked notification rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.FanoutLinkedNotificationRuleResponse> LinkedNotificationRules;
        /// <summary>
        /// The resource provider management.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseManagement? Management;
        /// <summary>
        /// Management groups global notification endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceProviderEndpointResponse> ManagementGroupGlobalNotificationEndpoints;
        /// <summary>
        /// The metadata.
        /// </summary>
        public readonly object? Metadata;
        /// <summary>
        /// The namespace.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Notification options.
        /// </summary>
        public readonly string? NotificationOptions;
        /// <summary>
        /// Notification settings.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseNotificationSettings? NotificationSettings;
        /// <summary>
        /// The notifications.
        /// </summary>
        public readonly ImmutableArray<Outputs.NotificationResponse> Notifications;
        /// <summary>
        /// Optional features.
        /// </summary>
        public readonly ImmutableArray<string> OptionalFeatures;
        /// <summary>
        /// The private resource provider configuration.
        /// </summary>
        public readonly Outputs.ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration? PrivateResourceProviderConfiguration;
        /// <summary>
        /// The provider authentication.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseProviderAuthentication? ProviderAuthentication;
        /// <summary>
        /// The provider authorizations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceProviderAuthorizationResponse> ProviderAuthorizations;
        /// <summary>
        /// The provider hub metadata.
        /// </summary>
        public readonly Outputs.ProviderRegistrationPropertiesResponseProviderHubMetadata? ProviderHubMetadata;
        /// <summary>
        /// The provider type.
        /// </summary>
        public readonly string? ProviderType;
        /// <summary>
        /// The provider version.
        /// </summary>
        public readonly string? ProviderVersion;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The request header options.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseRequestHeaderOptions? RequestHeaderOptions;
        /// <summary>
        /// The required features.
        /// </summary>
        public readonly ImmutableArray<string> RequiredFeatures;
        /// <summary>
        /// Resource group lock option during move.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove? ResourceGroupLockOptionDuringMove;
        /// <summary>
        /// resource hydration accounts
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceHydrationAccountResponse> ResourceHydrationAccounts;
        /// <summary>
        /// The resource provider authorization rules.
        /// </summary>
        public readonly Outputs.ResourceProviderAuthorizationRulesResponse? ResourceProviderAuthorizationRules;
        /// <summary>
        /// Response options.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseResponseOptions? ResponseOptions;
        /// <summary>
        /// The service name.
        /// </summary>
        public readonly string? ServiceName;
        /// <summary>
        /// The services.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceProviderServiceResponse> Services;
        /// <summary>
        /// The subscription lifecycle notification specifications.
        /// </summary>
        public readonly Outputs.ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications? SubscriptionLifecycleNotificationSpecifications;
        /// <summary>
        /// The template deployment options.
        /// </summary>
        public readonly Outputs.ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions? TemplateDeploymentOptions;
        /// <summary>
        /// The token auth configuration.
        /// </summary>
        public readonly Outputs.TokenAuthConfigurationResponse? TokenAuthConfiguration;

        [OutputConstructor]
        private ProviderRegistrationPropertiesResponse(
            ImmutableArray<Outputs.ResourceProviderCapabilitiesResponse> capabilities,

            string? crossTenantTokenValidation,

            string? customManifestVersion,

            Outputs.ResourceProviderManifestPropertiesResponseDstsConfiguration? dstsConfiguration,

            bool? enableTenantLinkedNotification,

            Outputs.ResourceProviderManifestPropertiesResponseFeaturesRule? featuresRule,

            ImmutableArray<Outputs.ResourceProviderEndpointResponse> globalNotificationEndpoints,

            string? legacyNamespace,

            ImmutableArray<string> legacyRegistrations,

            ImmutableArray<Outputs.FanoutLinkedNotificationRuleResponse> linkedNotificationRules,

            Outputs.ResourceProviderManifestPropertiesResponseManagement? management,

            ImmutableArray<Outputs.ResourceProviderEndpointResponse> managementGroupGlobalNotificationEndpoints,

            object? metadata,

            string? @namespace,

            string? notificationOptions,

            Outputs.ResourceProviderManifestPropertiesResponseNotificationSettings? notificationSettings,

            ImmutableArray<Outputs.NotificationResponse> notifications,

            ImmutableArray<string> optionalFeatures,

            Outputs.ProviderRegistrationPropertiesResponsePrivateResourceProviderConfiguration? privateResourceProviderConfiguration,

            Outputs.ResourceProviderManifestPropertiesResponseProviderAuthentication? providerAuthentication,

            ImmutableArray<Outputs.ResourceProviderAuthorizationResponse> providerAuthorizations,

            Outputs.ProviderRegistrationPropertiesResponseProviderHubMetadata? providerHubMetadata,

            string? providerType,

            string? providerVersion,

            string provisioningState,

            Outputs.ResourceProviderManifestPropertiesResponseRequestHeaderOptions? requestHeaderOptions,

            ImmutableArray<string> requiredFeatures,

            Outputs.ResourceProviderManifestPropertiesResponseResourceGroupLockOptionDuringMove? resourceGroupLockOptionDuringMove,

            ImmutableArray<Outputs.ResourceHydrationAccountResponse> resourceHydrationAccounts,

            Outputs.ResourceProviderAuthorizationRulesResponse? resourceProviderAuthorizationRules,

            Outputs.ResourceProviderManifestPropertiesResponseResponseOptions? responseOptions,

            string? serviceName,

            ImmutableArray<Outputs.ResourceProviderServiceResponse> services,

            Outputs.ProviderRegistrationPropertiesResponseSubscriptionLifecycleNotificationSpecifications? subscriptionLifecycleNotificationSpecifications,

            Outputs.ResourceProviderManifestPropertiesResponseTemplateDeploymentOptions? templateDeploymentOptions,

            Outputs.TokenAuthConfigurationResponse? tokenAuthConfiguration)
        {
            Capabilities = capabilities;
            CrossTenantTokenValidation = crossTenantTokenValidation;
            CustomManifestVersion = customManifestVersion;
            DstsConfiguration = dstsConfiguration;
            EnableTenantLinkedNotification = enableTenantLinkedNotification;
            FeaturesRule = featuresRule;
            GlobalNotificationEndpoints = globalNotificationEndpoints;
            LegacyNamespace = legacyNamespace;
            LegacyRegistrations = legacyRegistrations;
            LinkedNotificationRules = linkedNotificationRules;
            Management = management;
            ManagementGroupGlobalNotificationEndpoints = managementGroupGlobalNotificationEndpoints;
            Metadata = metadata;
            Namespace = @namespace;
            NotificationOptions = notificationOptions;
            NotificationSettings = notificationSettings;
            Notifications = notifications;
            OptionalFeatures = optionalFeatures;
            PrivateResourceProviderConfiguration = privateResourceProviderConfiguration;
            ProviderAuthentication = providerAuthentication;
            ProviderAuthorizations = providerAuthorizations;
            ProviderHubMetadata = providerHubMetadata;
            ProviderType = providerType;
            ProviderVersion = providerVersion;
            ProvisioningState = provisioningState;
            RequestHeaderOptions = requestHeaderOptions;
            RequiredFeatures = requiredFeatures;
            ResourceGroupLockOptionDuringMove = resourceGroupLockOptionDuringMove;
            ResourceHydrationAccounts = resourceHydrationAccounts;
            ResourceProviderAuthorizationRules = resourceProviderAuthorizationRules;
            ResponseOptions = responseOptions;
            ServiceName = serviceName;
            Services = services;
            SubscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
            TemplateDeploymentOptions = templateDeploymentOptions;
            TokenAuthConfiguration = tokenAuthConfiguration;
        }
    }
}
