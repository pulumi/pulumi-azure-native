// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ProviderHub.Outputs
{

    [OutputType]
    public sealed class ResourceProviderAuthorizationResponse
    {
        /// <summary>
        /// The allowed third party extensions.
        /// </summary>
        public readonly ImmutableArray<Outputs.ThirdPartyExtensionResponse> AllowedThirdPartyExtensions;
        /// <summary>
        /// The application id.
        /// </summary>
        public readonly string? ApplicationId;
        /// <summary>
        /// The grouping tag.
        /// </summary>
        public readonly string? GroupingTag;
        /// <summary>
        /// Managed by authorization.
        /// </summary>
        public readonly Outputs.ResourceProviderAuthorizationResponseManagedByAuthorization? ManagedByAuthorization;
        /// <summary>
        /// The managed by role definition id.
        /// </summary>
        public readonly string? ManagedByRoleDefinitionId;
        /// <summary>
        /// The role definition id.
        /// </summary>
        public readonly string? RoleDefinitionId;

        [OutputConstructor]
        private ResourceProviderAuthorizationResponse(
            ImmutableArray<Outputs.ThirdPartyExtensionResponse> allowedThirdPartyExtensions,

            string? applicationId,

            string? groupingTag,

            Outputs.ResourceProviderAuthorizationResponseManagedByAuthorization? managedByAuthorization,

            string? managedByRoleDefinitionId,

            string? roleDefinitionId)
        {
            AllowedThirdPartyExtensions = allowedThirdPartyExtensions;
            ApplicationId = applicationId;
            GroupingTag = groupingTag;
            ManagedByAuthorization = managedByAuthorization;
            ManagedByRoleDefinitionId = managedByRoleDefinitionId;
            RoleDefinitionId = roleDefinitionId;
        }
    }
}
