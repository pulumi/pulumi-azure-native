// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppConfiguration
{
    public static class GetConfigurationStore
    {
        /// <summary>
        /// Gets the properties of the specified configuration store.
        /// Azure REST API version: 2023-03-01.
        /// 
        /// Other available API versions: 2019-02-01-preview, 2023-08-01-preview, 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Task<GetConfigurationStoreResult> InvokeAsync(GetConfigurationStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationStoreResult>("azure-native:appconfiguration:getConfigurationStore", args ?? new GetConfigurationStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified configuration store.
        /// Azure REST API version: 2023-03-01.
        /// 
        /// Other available API versions: 2019-02-01-preview, 2023-08-01-preview, 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Output<GetConfigurationStoreResult> Invoke(GetConfigurationStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationStoreResult>("azure-native:appconfiguration:getConfigurationStore", args ?? new GetConfigurationStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the configuration store.
        /// </summary>
        [Input("configStoreName", required: true)]
        public string ConfigStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConfigurationStoreArgs()
        {
        }
        public static new GetConfigurationStoreArgs Empty => new GetConfigurationStoreArgs();
    }

    public sealed class GetConfigurationStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the configuration store.
        /// </summary>
        [Input("configStoreName", required: true)]
        public Input<string> ConfigStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConfigurationStoreInvokeArgs()
        {
        }
        public static new GetConfigurationStoreInvokeArgs Empty => new GetConfigurationStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationStoreResult
    {
        /// <summary>
        /// The creation date of configuration store.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// Disables all authentication methods other than AAD authentication.
        /// </summary>
        public readonly bool? DisableLocalAuth;
        /// <summary>
        /// Property specifying whether protection against purge is enabled for this configuration store.
        /// </summary>
        public readonly bool? EnablePurgeProtection;
        /// <summary>
        /// The encryption settings of the configuration store.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponse? Encryption;
        /// <summary>
        /// The DNS endpoint where the configuration store API will be available.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed identity information, if configured.
        /// </summary>
        public readonly Outputs.ResourceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of private endpoint connections that are set up for this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionReferenceResponse> PrivateEndpointConnections;
        /// <summary>
        /// The provisioning state of the configuration store.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Control permission for data plane traffic coming from public networks while private endpoint is enabled.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The sku of the configuration store.
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// The amount of time in days that the configuration store will be retained when it is soft deleted.
        /// </summary>
        public readonly int? SoftDeleteRetentionInDays;
        /// <summary>
        /// Resource system metadata.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetConfigurationStoreResult(
            string creationDate,

            bool? disableLocalAuth,

            bool? enablePurgeProtection,

            Outputs.EncryptionPropertiesResponse? encryption,

            string endpoint,

            string id,

            Outputs.ResourceIdentityResponse? identity,

            string location,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionReferenceResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.SkuResponse sku,

            int? softDeleteRetentionInDays,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            CreationDate = creationDate;
            DisableLocalAuth = disableLocalAuth;
            EnablePurgeProtection = enablePurgeProtection;
            Encryption = encryption;
            Endpoint = endpoint;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SoftDeleteRetentionInDays = softDeleteRetentionInDays;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
