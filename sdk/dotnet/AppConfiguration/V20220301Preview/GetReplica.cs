// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppConfiguration.V20220301Preview
{
    public static class GetReplica
    {
        /// <summary>
        /// The replica resource.
        /// </summary>
        public static Task<GetReplicaResult> InvokeAsync(GetReplicaArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReplicaResult>("azure-native:appconfiguration/v20220301preview:getReplica", args ?? new GetReplicaArgs(), options.WithDefaults());

        /// <summary>
        /// The replica resource.
        /// </summary>
        public static Output<GetReplicaResult> Invoke(GetReplicaInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetReplicaResult>("azure-native:appconfiguration/v20220301preview:getReplica", args ?? new GetReplicaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicaArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the configuration store.
        /// </summary>
        [Input("configStoreName", required: true)]
        public string ConfigStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the replica.
        /// </summary>
        [Input("replicaName", required: true)]
        public string ReplicaName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetReplicaArgs()
        {
        }
    }

    public sealed class GetReplicaInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the configuration store.
        /// </summary>
        [Input("configStoreName", required: true)]
        public Input<string> ConfigStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the replica.
        /// </summary>
        [Input("replicaName", required: true)]
        public Input<string> ReplicaName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetReplicaInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReplicaResult
    {
        /// <summary>
        /// The URI of the replica where the replica API will be available.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the replica.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the replica.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the replica.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource system metadata.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetReplicaResult(
            string endpoint,

            string id,

            string? location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Endpoint = endpoint;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
