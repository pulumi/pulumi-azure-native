// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AppConfiguration.V20230801Preview
{
    /// <summary>
    /// The data plane proxy authentication mode. This property manages the authentication mode of request to the data plane resources.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        private AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The local authentication mode. Users are not required to have data plane permissions if local authentication is not disabled.
        /// </summary>
        public static AuthenticationMode Local { get; } = new AuthenticationMode("Local");
        /// <summary>
        /// The pass-through authentication mode. User identity will be passed through from ARM, requiring user to have data plane action permissions (Available via App Configuration Data Owner/ App Configuration Data Reader).
        /// </summary>
        public static AuthenticationMode Pass_through { get; } = new AuthenticationMode("Pass-through");

        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMode other && Equals(other);
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The private link service connection status.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionStatus : IEquatable<ConnectionStatus>
    {
        private readonly string _value;

        private ConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionStatus Pending { get; } = new ConnectionStatus("Pending");
        public static ConnectionStatus Approved { get; } = new ConnectionStatus("Approved");
        public static ConnectionStatus Rejected { get; } = new ConnectionStatus("Rejected");
        public static ConnectionStatus Disconnected { get; } = new ConnectionStatus("Disconnected");

        public static bool operator ==(ConnectionStatus left, ConnectionStatus right) => left.Equals(right);
        public static bool operator !=(ConnectionStatus left, ConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(ConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionStatus other && Equals(other);
        public bool Equals(ConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the configuration store need to be recovered.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Recover { get; } = new CreateMode("Recover");
        public static CreateMode Default { get; } = new CreateMode("Default");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned_UserAssigned { get; } = new IdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data plane proxy private link delegation. This property manages if a request from delegated ARM private link is allowed when the data plane resource requires private link.
    /// </summary>
    [EnumType]
    public readonly struct PrivateLinkDelegation : IEquatable<PrivateLinkDelegation>
    {
        private readonly string _value;

        private PrivateLinkDelegation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ARM private endpoint is required if the resource requires private link.
        /// </summary>
        public static PrivateLinkDelegation Enabled { get; } = new PrivateLinkDelegation("Enabled");
        /// <summary>
        /// Request is denied if the resource requires private link.
        /// </summary>
        public static PrivateLinkDelegation Disabled { get; } = new PrivateLinkDelegation("Disabled");

        public static bool operator ==(PrivateLinkDelegation left, PrivateLinkDelegation right) => left.Equals(right);
        public static bool operator !=(PrivateLinkDelegation left, PrivateLinkDelegation right) => !left.Equals(right);

        public static explicit operator string(PrivateLinkDelegation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateLinkDelegation other && Equals(other);
        public bool Equals(PrivateLinkDelegation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Control permission for data plane traffic coming from public networks while private endpoint is enabled.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
