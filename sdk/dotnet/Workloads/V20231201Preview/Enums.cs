// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads.V20231201Preview
{
    /// <summary>
    /// The App Service plan tier.
    /// </summary>
    [EnumType]
    public readonly struct AppServicePlanTier : IEquatable<AppServicePlanTier>
    {
        private readonly string _value;

        private AppServicePlanTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Elastic Premium plan
        /// </summary>
        public static AppServicePlanTier ElasticPremium { get; } = new AppServicePlanTier("ElasticPremium");
        /// <summary>
        /// Dedicated Premium V3 plan
        /// </summary>
        public static AppServicePlanTier PremiumV3 { get; } = new AppServicePlanTier("PremiumV3");

        public static bool operator ==(AppServicePlanTier left, AppServicePlanTier right) => left.Equals(right);
        public static bool operator !=(AppServicePlanTier left, AppServicePlanTier right) => !left.Equals(right);

        public static explicit operator string(AppServicePlanTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppServicePlanTier other && Equals(other);
        public bool Equals(AppServicePlanTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
    /// </summary>
    [EnumType]
    public readonly struct RoutingPreference : IEquatable<RoutingPreference>
    {
        private readonly string _value;

        private RoutingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default routing preference. Only RFC1918 traffic is routed to the customer VNET.
        /// </summary>
        public static RoutingPreference Default { get; } = new RoutingPreference("Default");
        /// <summary>
        /// Route all traffic to the customer VNET.
        /// </summary>
        public static RoutingPreference RouteAll { get; } = new RoutingPreference("RouteAll");

        public static bool operator ==(RoutingPreference left, RoutingPreference right) => left.Equals(right);
        public static bool operator !=(RoutingPreference left, RoutingPreference right) => !left.Equals(right);

        public static explicit operator string(RoutingPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingPreference other && Equals(other);
        public bool Equals(RoutingPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets certificate preference if secure communication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct SslPreference : IEquatable<SslPreference>
    {
        private readonly string _value;

        private SslPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Secure communication is disabled.
        /// </summary>
        public static SslPreference Disabled { get; } = new SslPreference("Disabled");
        /// <summary>
        /// Secure communication is enabled with root certificate.
        /// </summary>
        public static SslPreference RootCertificate { get; } = new SslPreference("RootCertificate");
        /// <summary>
        /// Secure communication is enabled with server certificate.
        /// </summary>
        public static SslPreference ServerCertificate { get; } = new SslPreference("ServerCertificate");

        public static bool operator ==(SslPreference left, SslPreference right) => left.Equals(right);
        public static bool operator !=(SslPreference left, SslPreference right) => !left.Equals(right);

        public static explicit operator string(SslPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslPreference other && Equals(other);
        public bool Equals(SslPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
