// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads.V20240901
{
    /// <summary>
    /// Defines the disk sku name.
    /// </summary>
    [EnumType]
    public readonly struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        private DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard LRS Disk SKU.
        /// </summary>
        public static DiskSkuName Standard_LRS { get; } = new DiskSkuName("Standard_LRS");
        /// <summary>
        /// Premium_LRS Disk SKU.
        /// </summary>
        public static DiskSkuName Premium_LRS { get; } = new DiskSkuName("Premium_LRS");
        /// <summary>
        /// StandardSSD_LRS Disk SKU.
        /// </summary>
        public static DiskSkuName StandardSSD_LRS { get; } = new DiskSkuName("StandardSSD_LRS");
        /// <summary>
        /// UltraSSD_LRS Disk SKU.
        /// </summary>
        public static DiskSkuName UltraSSD_LRS { get; } = new DiskSkuName("UltraSSD_LRS");
        /// <summary>
        /// Premium_ZRS Disk SKU.
        /// </summary>
        public static DiskSkuName Premium_ZRS { get; } = new DiskSkuName("Premium_ZRS");
        /// <summary>
        /// StandardSSD_ZRS Disk SKU.
        /// </summary>
        public static DiskSkuName StandardSSD_ZRS { get; } = new DiskSkuName("StandardSSD_ZRS");
        /// <summary>
        /// PremiumV2_LRS Disk SKU.
        /// </summary>
        public static DiskSkuName PremiumV2_LRS { get; } = new DiskSkuName("PremiumV2_LRS");

        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);

        public static explicit operator string(DiskSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskSkuName other && Equals(other);
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of file share config, eg: Mount/CreateAndMount/Skip.
    /// </summary>
    [EnumType]
    public readonly struct FileShareConfigurationType : IEquatable<FileShareConfigurationType>
    {
        private readonly string _value;

        private FileShareConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Skip creating the file share.
        /// </summary>
        public static FileShareConfigurationType Skip { get; } = new FileShareConfigurationType("Skip");
        /// <summary>
        /// Fileshare will be created and mounted by service.
        /// </summary>
        public static FileShareConfigurationType CreateAndMount { get; } = new FileShareConfigurationType("CreateAndMount");
        /// <summary>
        /// Existing fileshare provided will be mounted by service.
        /// </summary>
        public static FileShareConfigurationType Mount { get; } = new FileShareConfigurationType("Mount");

        public static bool operator ==(FileShareConfigurationType left, FileShareConfigurationType right) => left.Equals(right);
        public static bool operator !=(FileShareConfigurationType left, FileShareConfigurationType right) => !left.Equals(right);

        public static explicit operator string(FileShareConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileShareConfigurationType other && Equals(other);
        public bool Equals(FileShareConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
    /// </summary>
    [EnumType]
    public readonly struct ManagedResourcesNetworkAccessType : IEquatable<ManagedResourcesNetworkAccessType>
    {
        private readonly string _value;

        private ManagedResourcesNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Managed resources will be deployed with public network access enabled.
        /// </summary>
        public static ManagedResourcesNetworkAccessType Public { get; } = new ManagedResourcesNetworkAccessType("Public");
        /// <summary>
        /// Managed resources will be deployed with public network access disabled.
        /// </summary>
        public static ManagedResourcesNetworkAccessType Private { get; } = new ManagedResourcesNetworkAccessType("Private");

        public static bool operator ==(ManagedResourcesNetworkAccessType left, ManagedResourcesNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(ManagedResourcesNetworkAccessType left, ManagedResourcesNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(ManagedResourcesNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedResourcesNetworkAccessType other && Equals(other);
        public bool Equals(ManagedResourcesNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pattern type to be used for resource naming.
    /// </summary>
    [EnumType]
    public readonly struct NamingPatternType : IEquatable<NamingPatternType>
    {
        private readonly string _value;

        private NamingPatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Full resource names that will be created by service.
        /// </summary>
        public static NamingPatternType FullResourceName { get; } = new NamingPatternType("FullResourceName");

        public static bool operator ==(NamingPatternType left, NamingPatternType right) => left.Equals(right);
        public static bool operator !=(NamingPatternType left, NamingPatternType right) => !left.Equals(right);

        public static explicit operator string(NamingPatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamingPatternType other && Equals(other);
        public bool Equals(NamingPatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS Type
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Linux OS Type.
        /// </summary>
        public static OSType Linux { get; } = new OSType("Linux");
        /// <summary>
        /// Windows OS Type.
        /// </summary>
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The configuration type. Eg: Deployment/Discovery
    /// </summary>
    [EnumType]
    public readonly struct SAPConfigurationType : IEquatable<SAPConfigurationType>
    {
        private readonly string _value;

        private SAPConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SAP system will be deployed by service. No OS configurations will be done.
        /// </summary>
        public static SAPConfigurationType Deployment { get; } = new SAPConfigurationType("Deployment");
        /// <summary>
        /// Existing SAP system will be registered.
        /// </summary>
        public static SAPConfigurationType Discovery { get; } = new SAPConfigurationType("Discovery");
        /// <summary>
        /// SAP system will be deployed by service. OS configurations will be done.
        /// </summary>
        public static SAPConfigurationType DeploymentWithOSConfig { get; } = new SAPConfigurationType("DeploymentWithOSConfig");

        public static bool operator ==(SAPConfigurationType left, SAPConfigurationType right) => left.Equals(right);
        public static bool operator !=(SAPConfigurationType left, SAPConfigurationType right) => !left.Equals(right);

        public static explicit operator string(SAPConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPConfigurationType other && Equals(other);
        public bool Equals(SAPConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DB scale method.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseScaleMethod : IEquatable<SAPDatabaseScaleMethod>
    {
        private readonly string _value;

        private SAPDatabaseScaleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ScaleUp Hana Database deployment type
        /// </summary>
        public static SAPDatabaseScaleMethod ScaleUp { get; } = new SAPDatabaseScaleMethod("ScaleUp");

        public static bool operator ==(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseScaleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseScaleMethod other && Equals(other);
        public bool Equals(SAPDatabaseScaleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database type.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseType : IEquatable<SAPDatabaseType>
    {
        private readonly string _value;

        private SAPDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// HANA Database type of SAP system.
        /// </summary>
        public static SAPDatabaseType HANA { get; } = new SAPDatabaseType("HANA");
        /// <summary>
        /// DB2 database type of the SAP system.
        /// </summary>
        public static SAPDatabaseType DB2 { get; } = new SAPDatabaseType("DB2");

        public static bool operator ==(SAPDatabaseType left, SAPDatabaseType right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseType left, SAPDatabaseType right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseType other && Equals(other);
        public bool Equals(SAPDatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type. Eg: SingleServer/ThreeTier
    /// </summary>
    [EnumType]
    public readonly struct SAPDeploymentType : IEquatable<SAPDeploymentType>
    {
        private readonly string _value;

        private SAPDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SAP Single server deployment type.
        /// </summary>
        public static SAPDeploymentType SingleServer { get; } = new SAPDeploymentType("SingleServer");
        /// <summary>
        /// SAP Distributed deployment type.
        /// </summary>
        public static SAPDeploymentType ThreeTier { get; } = new SAPDeploymentType("ThreeTier");

        public static bool operator ==(SAPDeploymentType left, SAPDeploymentType right) => left.Equals(right);
        public static bool operator !=(SAPDeploymentType left, SAPDeploymentType right) => !left.Equals(right);

        public static explicit operator string(SAPDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDeploymentType other && Equals(other);
        public bool Equals(SAPDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the environment type - Production/Non Production.
    /// </summary>
    [EnumType]
    public readonly struct SAPEnvironmentType : IEquatable<SAPEnvironmentType>
    {
        private readonly string _value;

        private SAPEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Non Production SAP system.
        /// </summary>
        public static SAPEnvironmentType NonProd { get; } = new SAPEnvironmentType("NonProd");
        /// <summary>
        /// Production SAP system.
        /// </summary>
        public static SAPEnvironmentType Prod { get; } = new SAPEnvironmentType("Prod");

        public static bool operator ==(SAPEnvironmentType left, SAPEnvironmentType right) => left.Equals(right);
        public static bool operator !=(SAPEnvironmentType left, SAPEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(SAPEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPEnvironmentType other && Equals(other);
        public bool Equals(SAPEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The high availability type.
    /// </summary>
    [EnumType]
    public readonly struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        private SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// HA deployment with availability sets.
        /// </summary>
        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType("AvailabilitySet");
        /// <summary>
        /// HA deployment with availability zones.
        /// </summary>
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType("AvailabilityZone");

        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);

        public static explicit operator string(SAPHighAvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPHighAvailabilityType other && Equals(other);
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the SAP Product type.
    /// </summary>
    [EnumType]
    public readonly struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        private SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SAP Product ECC.
        /// </summary>
        public static SAPProductType ECC { get; } = new SAPProductType("ECC");
        /// <summary>
        /// SAP Product S4HANA.
        /// </summary>
        public static SAPProductType S4HANA { get; } = new SAPProductType("S4HANA");
        /// <summary>
        /// SAP Products other than the ones listed.
        /// </summary>
        public static SAPProductType Other { get; } = new SAPProductType("Other");

        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);

        public static explicit operator string(SAPProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPProductType other && Equals(other);
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SAP software installation type.
    /// </summary>
    [EnumType]
    public readonly struct SAPSoftwareInstallationType : IEquatable<SAPSoftwareInstallationType>
    {
        private readonly string _value;

        private SAPSoftwareInstallationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SAP Install managed by service.
        /// </summary>
        public static SAPSoftwareInstallationType ServiceInitiated { get; } = new SAPSoftwareInstallationType("ServiceInitiated");
        /// <summary>
        /// SAP Install without OS Config.
        /// </summary>
        public static SAPSoftwareInstallationType SAPInstallWithoutOSConfig { get; } = new SAPSoftwareInstallationType("SAPInstallWithoutOSConfig");
        /// <summary>
        /// External software installation type.
        /// </summary>
        public static SAPSoftwareInstallationType External { get; } = new SAPSoftwareInstallationType("External");

        public static bool operator ==(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => left.Equals(right);
        public static bool operator !=(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => !left.Equals(right);

        public static explicit operator string(SAPSoftwareInstallationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPSoftwareInstallationType other && Equals(other);
        public bool Equals(SAPSoftwareInstallationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity assigned to this resource.
    /// </summary>
    [EnumType]
    public readonly struct SAPVirtualInstanceIdentityType : IEquatable<SAPVirtualInstanceIdentityType>
    {
        private readonly string _value;

        private SAPVirtualInstanceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No managed identity.
        /// </summary>
        public static SAPVirtualInstanceIdentityType None { get; } = new SAPVirtualInstanceIdentityType("None");
        /// <summary>
        /// User assigned managed identity.
        /// </summary>
        public static SAPVirtualInstanceIdentityType UserAssigned { get; } = new SAPVirtualInstanceIdentityType("UserAssigned");

        public static bool operator ==(SAPVirtualInstanceIdentityType left, SAPVirtualInstanceIdentityType right) => left.Equals(right);
        public static bool operator !=(SAPVirtualInstanceIdentityType left, SAPVirtualInstanceIdentityType right) => !left.Equals(right);

        public static explicit operator string(SAPVirtualInstanceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPVirtualInstanceIdentityType other && Equals(other);
        public bool Equals(SAPVirtualInstanceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
