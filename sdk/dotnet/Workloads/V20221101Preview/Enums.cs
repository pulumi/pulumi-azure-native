// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads.V20221101Preview
{
    /// <summary>
    /// The DB scale method.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseScaleMethod : IEquatable<SAPDatabaseScaleMethod>
    {
        private readonly string _value;

        private SAPDatabaseScaleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseScaleMethod ScaleUp { get; } = new SAPDatabaseScaleMethod("ScaleUp");

        public static bool operator ==(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseScaleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseScaleMethod other && Equals(other);
        public bool Equals(SAPDatabaseScaleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database type. Eg: HANA, DB2, etc
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseType : IEquatable<SAPDatabaseType>
    {
        private readonly string _value;

        private SAPDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseType HANA { get; } = new SAPDatabaseType("HANA");
        public static SAPDatabaseType DB2 { get; } = new SAPDatabaseType("DB2");

        public static bool operator ==(SAPDatabaseType left, SAPDatabaseType right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseType left, SAPDatabaseType right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseType other && Equals(other);
        public bool Equals(SAPDatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type. Eg: SingleServer/ThreeTier
    /// </summary>
    [EnumType]
    public readonly struct SAPDeploymentType : IEquatable<SAPDeploymentType>
    {
        private readonly string _value;

        private SAPDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDeploymentType SingleServer { get; } = new SAPDeploymentType("SingleServer");
        public static SAPDeploymentType ThreeTier { get; } = new SAPDeploymentType("ThreeTier");

        public static bool operator ==(SAPDeploymentType left, SAPDeploymentType right) => left.Equals(right);
        public static bool operator !=(SAPDeploymentType left, SAPDeploymentType right) => !left.Equals(right);

        public static explicit operator string(SAPDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDeploymentType other && Equals(other);
        public bool Equals(SAPDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the environment type - Production/Non Production.
    /// </summary>
    [EnumType]
    public readonly struct SAPEnvironmentType : IEquatable<SAPEnvironmentType>
    {
        private readonly string _value;

        private SAPEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPEnvironmentType NonProd { get; } = new SAPEnvironmentType("NonProd");
        public static SAPEnvironmentType Prod { get; } = new SAPEnvironmentType("Prod");

        public static bool operator ==(SAPEnvironmentType left, SAPEnvironmentType right) => left.Equals(right);
        public static bool operator !=(SAPEnvironmentType left, SAPEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(SAPEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPEnvironmentType other && Equals(other);
        public bool Equals(SAPEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The high availability type.
    /// </summary>
    [EnumType]
    public readonly struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        private SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType("AvailabilitySet");
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType("AvailabilityZone");

        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);

        public static explicit operator string(SAPHighAvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPHighAvailabilityType other && Equals(other);
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the SAP Product type.
    /// </summary>
    [EnumType]
    public readonly struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        private SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPProductType ECC { get; } = new SAPProductType("ECC");
        public static SAPProductType S4HANA { get; } = new SAPProductType("S4HANA");
        public static SAPProductType Other { get; } = new SAPProductType("Other");

        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);

        public static explicit operator string(SAPProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPProductType other && Equals(other);
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
