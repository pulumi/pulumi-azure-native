// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads
{
    /// <summary>
    /// Whether to enable Azure front door
    /// </summary>
    [EnumType]
    public readonly struct AzureFrontDoorEnabled : IEquatable<AzureFrontDoorEnabled>
    {
        private readonly string _value;

        private AzureFrontDoorEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFrontDoorEnabled Enabled { get; } = new AzureFrontDoorEnabled("Enabled");
        public static AzureFrontDoorEnabled Disabled { get; } = new AzureFrontDoorEnabled("Disabled");

        public static bool operator ==(AzureFrontDoorEnabled left, AzureFrontDoorEnabled right) => left.Equals(right);
        public static bool operator !=(AzureFrontDoorEnabled left, AzureFrontDoorEnabled right) => !left.Equals(right);

        public static explicit operator string(AzureFrontDoorEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFrontDoorEnabled other && Equals(other);
        public bool Equals(AzureFrontDoorEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of file share config.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType Skip { get; } = new ConfigurationType("Skip");
        public static ConfigurationType CreateAndMount { get; } = new ConfigurationType("CreateAndMount");
        public static ConfigurationType Mount { get; } = new ConfigurationType("Mount");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of the server SKU
    /// </summary>
    [EnumType]
    public readonly struct DatabaseTier : IEquatable<DatabaseTier>
    {
        private readonly string _value;

        private DatabaseTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseTier Burstable { get; } = new DatabaseTier("Burstable");
        public static DatabaseTier GeneralPurpose { get; } = new DatabaseTier("GeneralPurpose");
        public static DatabaseTier MemoryOptimized { get; } = new DatabaseTier("MemoryOptimized");

        public static bool operator ==(DatabaseTier left, DatabaseTier right) => left.Equals(right);
        public static bool operator !=(DatabaseTier left, DatabaseTier right) => !left.Equals(right);

        public static explicit operator string(DatabaseTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseTier other && Equals(other);
        public bool Equals(DatabaseTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Database type
    /// </summary>
    [EnumType]
    public readonly struct DatabaseType : IEquatable<DatabaseType>
    {
        private readonly string _value;

        private DatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseType MySql { get; } = new DatabaseType("MySql");

        public static bool operator ==(DatabaseType left, DatabaseType right) => left.Equals(right);
        public static bool operator !=(DatabaseType left, DatabaseType right) => !left.Equals(right);

        public static explicit operator string(DatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseType other && Equals(other);
        public bool Equals(DatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the disk sku name.
    /// </summary>
    [EnumType]
    public readonly struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        private DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskSkuName Standard_LRS { get; } = new DiskSkuName("Standard_LRS");
        public static DiskSkuName Premium_LRS { get; } = new DiskSkuName("Premium_LRS");
        public static DiskSkuName StandardSSD_LRS { get; } = new DiskSkuName("StandardSSD_LRS");
        public static DiskSkuName UltraSSD_LRS { get; } = new DiskSkuName("UltraSSD_LRS");
        public static DiskSkuName Premium_ZRS { get; } = new DiskSkuName("Premium_ZRS");
        public static DiskSkuName StandardSSD_ZRS { get; } = new DiskSkuName("StandardSSD_ZRS");
        public static DiskSkuName PremiumV2_LRS { get; } = new DiskSkuName("PremiumV2_LRS");

        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);

        public static explicit operator string(DiskSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskSkuName other && Equals(other);
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type
    /// </summary>
    [EnumType]
    public readonly struct DiskStorageType : IEquatable<DiskStorageType>
    {
        private readonly string _value;

        private DiskStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskStorageType Premium_LRS { get; } = new DiskStorageType("Premium_LRS");
        public static DiskStorageType Standard_LRS { get; } = new DiskStorageType("Standard_LRS");
        public static DiskStorageType StandardSSD_LRS { get; } = new DiskStorageType("StandardSSD_LRS");

        public static bool operator ==(DiskStorageType left, DiskStorageType right) => left.Equals(right);
        public static bool operator !=(DiskStorageType left, DiskStorageType right) => !left.Equals(right);

        public static explicit operator string(DiskStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskStorageType other && Equals(other);
        public bool Equals(DiskStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable Azure backup for the workload
    /// </summary>
    [EnumType]
    public readonly struct EnableBackup : IEquatable<EnableBackup>
    {
        private readonly string _value;

        private EnableBackup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableBackup Enabled { get; } = new EnableBackup("Enabled");
        public static EnableBackup Disabled { get; } = new EnableBackup("Disabled");

        public static bool operator ==(EnableBackup left, EnableBackup right) => left.Equals(right);
        public static bool operator !=(EnableBackup left, EnableBackup right) => !left.Equals(right);

        public static explicit operator string(EnableBackup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableBackup other && Equals(other);
        public bool Equals(EnableBackup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable SSL enforcement on the database
    /// </summary>
    [EnumType]
    public readonly struct EnableSslEnforcement : IEquatable<EnableSslEnforcement>
    {
        private readonly string _value;

        private EnableSslEnforcement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableSslEnforcement Enabled { get; } = new EnableSslEnforcement("Enabled");
        public static EnableSslEnforcement Disabled { get; } = new EnableSslEnforcement("Disabled");

        public static bool operator ==(EnableSslEnforcement left, EnableSslEnforcement right) => left.Equals(right);
        public static bool operator !=(EnableSslEnforcement left, EnableSslEnforcement right) => !left.Equals(right);

        public static explicit operator string(EnableSslEnforcement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableSslEnforcement other && Equals(other);
        public bool Equals(EnableSslEnforcement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// File share backing storage type
    /// </summary>
    [EnumType]
    public readonly struct FileShareStorageType : IEquatable<FileShareStorageType>
    {
        private readonly string _value;

        private FileShareStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FileShareStorageType Standard_LRS { get; } = new FileShareStorageType("Standard_LRS");
        public static FileShareStorageType Standard_GRS { get; } = new FileShareStorageType("Standard_GRS");
        public static FileShareStorageType Standard_ZRS { get; } = new FileShareStorageType("Standard_ZRS");
        public static FileShareStorageType Premium_LRS { get; } = new FileShareStorageType("Premium_LRS");

        public static bool operator ==(FileShareStorageType left, FileShareStorageType right) => left.Equals(right);
        public static bool operator !=(FileShareStorageType left, FileShareStorageType right) => !left.Equals(right);

        public static explicit operator string(FileShareStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileShareStorageType other && Equals(other);
        public bool Equals(FileShareStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Share type
    /// </summary>
    [EnumType]
    public readonly struct FileShareType : IEquatable<FileShareType>
    {
        private readonly string _value;

        private FileShareType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FileShareType NfsOnController { get; } = new FileShareType("NfsOnController");
        public static FileShareType AzureFiles { get; } = new FileShareType("AzureFiles");

        public static bool operator ==(FileShareType left, FileShareType right) => left.Equals(right);
        public static bool operator !=(FileShareType left, FileShareType right) => !left.Equals(right);

        public static explicit operator string(FileShareType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileShareType other && Equals(other);
        public bool Equals(FileShareType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable HA for the server
    /// </summary>
    [EnumType]
    public readonly struct HAEnabled : IEquatable<HAEnabled>
    {
        private readonly string _value;

        private HAEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HAEnabled Enabled { get; } = new HAEnabled("Enabled");
        public static HAEnabled Disabled { get; } = new HAEnabled("Disabled");

        public static bool operator ==(HAEnabled left, HAEnabled right) => left.Equals(right);
        public static bool operator !=(HAEnabled left, HAEnabled right) => !left.Equals(right);

        public static explicit operator string(HAEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HAEnabled other && Equals(other);
        public bool Equals(HAEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Load balancer type
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerType : IEquatable<LoadBalancerType>
    {
        private readonly string _value;

        private LoadBalancerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerType ApplicationGateway { get; } = new LoadBalancerType("ApplicationGateway");
        public static LoadBalancerType LoadBalancer { get; } = new LoadBalancerType("LoadBalancer");

        public static bool operator ==(LoadBalancerType left, LoadBalancerType right) => left.Equals(right);
        public static bool operator !=(LoadBalancerType left, LoadBalancerType right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerType other && Equals(other);
        public bool Equals(LoadBalancerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of manage identity
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pattern type to be used for resource naming.
    /// </summary>
    [EnumType]
    public readonly struct NamingPatternType : IEquatable<NamingPatternType>
    {
        private readonly string _value;

        private NamingPatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamingPatternType FullResourceName { get; } = new NamingPatternType("FullResourceName");

        public static bool operator ==(NamingPatternType left, NamingPatternType right) => left.Equals(right);
        public static bool operator !=(NamingPatternType left, NamingPatternType right) => !left.Equals(right);

        public static explicit operator string(NamingPatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamingPatternType other && Equals(other);
        public bool Equals(NamingPatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OS image offer
    /// </summary>
    [EnumType]
    public readonly struct OSImageOffer : IEquatable<OSImageOffer>
    {
        private readonly string _value;

        private OSImageOffer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSImageOffer UbuntuServer { get; } = new OSImageOffer("UbuntuServer");

        public static bool operator ==(OSImageOffer left, OSImageOffer right) => left.Equals(right);
        public static bool operator !=(OSImageOffer left, OSImageOffer right) => !left.Equals(right);

        public static explicit operator string(OSImageOffer value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSImageOffer other && Equals(other);
        public bool Equals(OSImageOffer other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OS image publisher
    /// </summary>
    [EnumType]
    public readonly struct OSImagePublisher : IEquatable<OSImagePublisher>
    {
        private readonly string _value;

        private OSImagePublisher(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSImagePublisher Canonical { get; } = new OSImagePublisher("Canonical");

        public static bool operator ==(OSImagePublisher left, OSImagePublisher right) => left.Equals(right);
        public static bool operator !=(OSImagePublisher left, OSImagePublisher right) => !left.Equals(right);

        public static explicit operator string(OSImagePublisher value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSImagePublisher other && Equals(other);
        public bool Equals(OSImagePublisher other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OS image sku
    /// </summary>
    [EnumType]
    public readonly struct OSImageSku : IEquatable<OSImageSku>
    {
        private readonly string _value;

        private OSImageSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSImageSku OSImageSku_18_04_LTS { get; } = new OSImageSku("18.04-LTS");
        public static OSImageSku OSImageSku_16_04_LTS { get; } = new OSImageSku("16.04-LTS");

        public static bool operator ==(OSImageSku left, OSImageSku right) => left.Equals(right);
        public static bool operator !=(OSImageSku left, OSImageSku right) => !left.Equals(right);

        public static explicit operator string(OSImageSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSImageSku other && Equals(other);
        public bool Equals(OSImageSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OS image version
    /// </summary>
    [EnumType]
    public readonly struct OSImageVersion : IEquatable<OSImageVersion>
    {
        private readonly string _value;

        private OSImageVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSImageVersion Latest { get; } = new OSImageVersion("latest");

        public static bool operator ==(OSImageVersion left, OSImageVersion right) => left.Equals(right);
        public static bool operator !=(OSImageVersion left, OSImageVersion right) => !left.Equals(right);

        public static explicit operator string(OSImageVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSImageVersion other && Equals(other);
        public bool Equals(OSImageVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS Type
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSType Linux { get; } = new OSType("Linux");
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// PHP version
    /// </summary>
    [EnumType]
    public readonly struct PHPVersion : IEquatable<PHPVersion>
    {
        private readonly string _value;

        private PHPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PHPVersion PHPVersion_7_2 { get; } = new PHPVersion("7.2");
        public static PHPVersion PHPVersion_7_3 { get; } = new PHPVersion("7.3");
        public static PHPVersion PHPVersion_7_4 { get; } = new PHPVersion("7.4");

        public static bool operator ==(PHPVersion left, PHPVersion right) => left.Equals(right);
        public static bool operator !=(PHPVersion left, PHPVersion right) => !left.Equals(right);

        public static explicit operator string(PHPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PHPVersion other && Equals(other);
        public bool Equals(PHPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Cache family
    /// </summary>
    [EnumType]
    public readonly struct RedisCacheFamily : IEquatable<RedisCacheFamily>
    {
        private readonly string _value;

        private RedisCacheFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisCacheFamily C { get; } = new RedisCacheFamily("C");
        public static RedisCacheFamily P { get; } = new RedisCacheFamily("P");

        public static bool operator ==(RedisCacheFamily left, RedisCacheFamily right) => left.Equals(right);
        public static bool operator !=(RedisCacheFamily left, RedisCacheFamily right) => !left.Equals(right);

        public static explicit operator string(RedisCacheFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisCacheFamily other && Equals(other);
        public bool Equals(RedisCacheFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
    /// </summary>
    [EnumType]
    public readonly struct RoutingPreference : IEquatable<RoutingPreference>
    {
        private readonly string _value;

        private RoutingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingPreference Default { get; } = new RoutingPreference("Default");
        public static RoutingPreference RouteAll { get; } = new RoutingPreference("RouteAll");

        public static bool operator ==(RoutingPreference left, RoutingPreference right) => left.Equals(right);
        public static bool operator !=(RoutingPreference left, RoutingPreference right) => !left.Equals(right);

        public static explicit operator string(RoutingPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingPreference other && Equals(other);
        public bool Equals(RoutingPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The configuration Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPConfigurationType : IEquatable<SAPConfigurationType>
    {
        private readonly string _value;

        private SAPConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPConfigurationType Deployment { get; } = new SAPConfigurationType("Deployment");
        public static SAPConfigurationType Discovery { get; } = new SAPConfigurationType("Discovery");
        public static SAPConfigurationType DeploymentWithOSConfig { get; } = new SAPConfigurationType("DeploymentWithOSConfig");

        public static bool operator ==(SAPConfigurationType left, SAPConfigurationType right) => left.Equals(right);
        public static bool operator !=(SAPConfigurationType left, SAPConfigurationType right) => !left.Equals(right);

        public static explicit operator string(SAPConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPConfigurationType other && Equals(other);
        public bool Equals(SAPConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DB scale method.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseScaleMethod : IEquatable<SAPDatabaseScaleMethod>
    {
        private readonly string _value;

        private SAPDatabaseScaleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseScaleMethod ScaleUp { get; } = new SAPDatabaseScaleMethod("ScaleUp");

        public static bool operator ==(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseScaleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseScaleMethod other && Equals(other);
        public bool Equals(SAPDatabaseScaleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database type. Eg: HANA, DB2, etc
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseType : IEquatable<SAPDatabaseType>
    {
        private readonly string _value;

        private SAPDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseType HANA { get; } = new SAPDatabaseType("HANA");
        public static SAPDatabaseType DB2 { get; } = new SAPDatabaseType("DB2");

        public static bool operator ==(SAPDatabaseType left, SAPDatabaseType right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseType left, SAPDatabaseType right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseType other && Equals(other);
        public bool Equals(SAPDatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type. Eg: SingleServer/ThreeTier
    /// </summary>
    [EnumType]
    public readonly struct SAPDeploymentType : IEquatable<SAPDeploymentType>
    {
        private readonly string _value;

        private SAPDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDeploymentType SingleServer { get; } = new SAPDeploymentType("SingleServer");
        public static SAPDeploymentType ThreeTier { get; } = new SAPDeploymentType("ThreeTier");

        public static bool operator ==(SAPDeploymentType left, SAPDeploymentType right) => left.Equals(right);
        public static bool operator !=(SAPDeploymentType left, SAPDeploymentType right) => !left.Equals(right);

        public static explicit operator string(SAPDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDeploymentType other && Equals(other);
        public bool Equals(SAPDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the environment type - Production/Non Production.
    /// </summary>
    [EnumType]
    public readonly struct SAPEnvironmentType : IEquatable<SAPEnvironmentType>
    {
        private readonly string _value;

        private SAPEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPEnvironmentType NonProd { get; } = new SAPEnvironmentType("NonProd");
        public static SAPEnvironmentType Prod { get; } = new SAPEnvironmentType("Prod");

        public static bool operator ==(SAPEnvironmentType left, SAPEnvironmentType right) => left.Equals(right);
        public static bool operator !=(SAPEnvironmentType left, SAPEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(SAPEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPEnvironmentType other && Equals(other);
        public bool Equals(SAPEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The high availability type.
    /// </summary>
    [EnumType]
    public readonly struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        private SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType("AvailabilitySet");
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType("AvailabilityZone");

        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);

        public static explicit operator string(SAPHighAvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPHighAvailabilityType other && Equals(other);
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the SAP Product type.
    /// </summary>
    [EnumType]
    public readonly struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        private SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPProductType ECC { get; } = new SAPProductType("ECC");
        public static SAPProductType S4HANA { get; } = new SAPProductType("S4HANA");
        public static SAPProductType Other { get; } = new SAPProductType("Other");

        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);

        public static explicit operator string(SAPProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPProductType other && Equals(other);
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SAP software installation Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPSoftwareInstallationType : IEquatable<SAPSoftwareInstallationType>
    {
        private readonly string _value;

        private SAPSoftwareInstallationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPSoftwareInstallationType ServiceInitiated { get; } = new SAPSoftwareInstallationType("ServiceInitiated");
        public static SAPSoftwareInstallationType SAPInstallWithoutOSConfig { get; } = new SAPSoftwareInstallationType("SAPInstallWithoutOSConfig");
        public static SAPSoftwareInstallationType External { get; } = new SAPSoftwareInstallationType("External");

        public static bool operator ==(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => left.Equals(right);
        public static bool operator !=(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => !left.Equals(right);

        public static explicit operator string(SAPSoftwareInstallationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPSoftwareInstallationType other && Equals(other);
        public bool Equals(SAPSoftwareInstallationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Search type
    /// </summary>
    [EnumType]
    public readonly struct SearchType : IEquatable<SearchType>
    {
        private readonly string _value;

        private SearchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SearchType Elastic { get; } = new SearchType("Elastic");

        public static bool operator ==(SearchType left, SearchType right) => left.Equals(right);
        public static bool operator !=(SearchType left, SearchType right) => !left.Equals(right);

        public static explicit operator string(SearchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SearchType other && Equals(other);
        public bool Equals(SearchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Free { get; } = new SkuTier("Free");
        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets certificate preference if secure communication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct SslPreference : IEquatable<SslPreference>
    {
        private readonly string _value;

        private SslPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslPreference Disabled { get; } = new SslPreference("Disabled");
        public static SslPreference RootCertificate { get; } = new SslPreference("RootCertificate");
        public static SslPreference ServerCertificate { get; } = new SslPreference("ServerCertificate");

        public static bool operator ==(SslPreference left, SslPreference right) => left.Equals(right);
        public static bool operator !=(SslPreference left, SslPreference right) => !left.Equals(right);

        public static explicit operator string(SslPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslPreference other && Equals(other);
        public bool Equals(SslPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Application version
    /// </summary>
    [EnumType]
    public readonly struct WordpressVersions : IEquatable<WordpressVersions>
    {
        private readonly string _value;

        private WordpressVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WordpressVersions WordpressVersions_5_4_3 { get; } = new WordpressVersions("5.4.3");
        public static WordpressVersions WordpressVersions_5_4_2 { get; } = new WordpressVersions("5.4.2");
        public static WordpressVersions WordpressVersions_5_4_1 { get; } = new WordpressVersions("5.4.1");
        public static WordpressVersions WordpressVersions_5_4 { get; } = new WordpressVersions("5.4");

        public static bool operator ==(WordpressVersions left, WordpressVersions right) => left.Equals(right);
        public static bool operator !=(WordpressVersions left, WordpressVersions right) => !left.Equals(right);

        public static explicit operator string(WordpressVersions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WordpressVersions other && Equals(other);
        public bool Equals(WordpressVersions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates which kind of php workload this resource represent e.g WordPress
    /// </summary>
    [EnumType]
    public readonly struct WorkloadKind : IEquatable<WorkloadKind>
    {
        private readonly string _value;

        private WorkloadKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadKind WordPress { get; } = new WorkloadKind("WordPress");

        public static bool operator ==(WorkloadKind left, WorkloadKind right) => left.Equals(right);
        public static bool operator !=(WorkloadKind left, WorkloadKind right) => !left.Equals(right);

        public static explicit operator string(WorkloadKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadKind other && Equals(other);
        public bool Equals(WorkloadKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
