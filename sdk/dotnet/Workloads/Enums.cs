// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads
{
    /// <summary>
    /// The type of file share config.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType Skip { get; } = new ConfigurationType("Skip");
        public static ConfigurationType CreateAndMount { get; } = new ConfigurationType("CreateAndMount");
        public static ConfigurationType Mount { get; } = new ConfigurationType("Mount");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the disk sku name.
    /// </summary>
    [EnumType]
    public readonly struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        private DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskSkuName Standard_LRS { get; } = new DiskSkuName("Standard_LRS");
        public static DiskSkuName Premium_LRS { get; } = new DiskSkuName("Premium_LRS");
        public static DiskSkuName StandardSSD_LRS { get; } = new DiskSkuName("StandardSSD_LRS");
        public static DiskSkuName UltraSSD_LRS { get; } = new DiskSkuName("UltraSSD_LRS");
        public static DiskSkuName Premium_ZRS { get; } = new DiskSkuName("Premium_ZRS");
        public static DiskSkuName StandardSSD_ZRS { get; } = new DiskSkuName("StandardSSD_ZRS");
        public static DiskSkuName PremiumV2_LRS { get; } = new DiskSkuName("PremiumV2_LRS");

        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);

        public static explicit operator string(DiskSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskSkuName other && Equals(other);
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of manage identity
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pattern type to be used for resource naming.
    /// </summary>
    [EnumType]
    public readonly struct NamingPatternType : IEquatable<NamingPatternType>
    {
        private readonly string _value;

        private NamingPatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamingPatternType FullResourceName { get; } = new NamingPatternType("FullResourceName");

        public static bool operator ==(NamingPatternType left, NamingPatternType right) => left.Equals(right);
        public static bool operator !=(NamingPatternType left, NamingPatternType right) => !left.Equals(right);

        public static explicit operator string(NamingPatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamingPatternType other && Equals(other);
        public bool Equals(NamingPatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS Type
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSType Linux { get; } = new OSType("Linux");
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
    /// </summary>
    [EnumType]
    public readonly struct RoutingPreference : IEquatable<RoutingPreference>
    {
        private readonly string _value;

        private RoutingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingPreference Default { get; } = new RoutingPreference("Default");
        public static RoutingPreference RouteAll { get; } = new RoutingPreference("RouteAll");

        public static bool operator ==(RoutingPreference left, RoutingPreference right) => left.Equals(right);
        public static bool operator !=(RoutingPreference left, RoutingPreference right) => !left.Equals(right);

        public static explicit operator string(RoutingPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingPreference other && Equals(other);
        public bool Equals(RoutingPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The configuration Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPConfigurationType : IEquatable<SAPConfigurationType>
    {
        private readonly string _value;

        private SAPConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPConfigurationType Deployment { get; } = new SAPConfigurationType("Deployment");
        public static SAPConfigurationType Discovery { get; } = new SAPConfigurationType("Discovery");
        public static SAPConfigurationType DeploymentWithOSConfig { get; } = new SAPConfigurationType("DeploymentWithOSConfig");

        public static bool operator ==(SAPConfigurationType left, SAPConfigurationType right) => left.Equals(right);
        public static bool operator !=(SAPConfigurationType left, SAPConfigurationType right) => !left.Equals(right);

        public static explicit operator string(SAPConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPConfigurationType other && Equals(other);
        public bool Equals(SAPConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DB scale method.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseScaleMethod : IEquatable<SAPDatabaseScaleMethod>
    {
        private readonly string _value;

        private SAPDatabaseScaleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseScaleMethod ScaleUp { get; } = new SAPDatabaseScaleMethod("ScaleUp");

        public static bool operator ==(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseScaleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseScaleMethod other && Equals(other);
        public bool Equals(SAPDatabaseScaleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database type. Eg: HANA, DB2, etc
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseType : IEquatable<SAPDatabaseType>
    {
        private readonly string _value;

        private SAPDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseType HANA { get; } = new SAPDatabaseType("HANA");
        public static SAPDatabaseType DB2 { get; } = new SAPDatabaseType("DB2");

        public static bool operator ==(SAPDatabaseType left, SAPDatabaseType right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseType left, SAPDatabaseType right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseType other && Equals(other);
        public bool Equals(SAPDatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type. Eg: SingleServer/ThreeTier
    /// </summary>
    [EnumType]
    public readonly struct SAPDeploymentType : IEquatable<SAPDeploymentType>
    {
        private readonly string _value;

        private SAPDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDeploymentType SingleServer { get; } = new SAPDeploymentType("SingleServer");
        public static SAPDeploymentType ThreeTier { get; } = new SAPDeploymentType("ThreeTier");

        public static bool operator ==(SAPDeploymentType left, SAPDeploymentType right) => left.Equals(right);
        public static bool operator !=(SAPDeploymentType left, SAPDeploymentType right) => !left.Equals(right);

        public static explicit operator string(SAPDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDeploymentType other && Equals(other);
        public bool Equals(SAPDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the environment type - Production/Non Production.
    /// </summary>
    [EnumType]
    public readonly struct SAPEnvironmentType : IEquatable<SAPEnvironmentType>
    {
        private readonly string _value;

        private SAPEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPEnvironmentType NonProd { get; } = new SAPEnvironmentType("NonProd");
        public static SAPEnvironmentType Prod { get; } = new SAPEnvironmentType("Prod");

        public static bool operator ==(SAPEnvironmentType left, SAPEnvironmentType right) => left.Equals(right);
        public static bool operator !=(SAPEnvironmentType left, SAPEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(SAPEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPEnvironmentType other && Equals(other);
        public bool Equals(SAPEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The high availability type.
    /// </summary>
    [EnumType]
    public readonly struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        private SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType("AvailabilitySet");
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType("AvailabilityZone");

        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);

        public static explicit operator string(SAPHighAvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPHighAvailabilityType other && Equals(other);
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the SAP Product type.
    /// </summary>
    [EnumType]
    public readonly struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        private SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPProductType ECC { get; } = new SAPProductType("ECC");
        public static SAPProductType S4HANA { get; } = new SAPProductType("S4HANA");
        public static SAPProductType Other { get; } = new SAPProductType("Other");

        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);

        public static explicit operator string(SAPProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPProductType other && Equals(other);
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SAP software installation Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPSoftwareInstallationType : IEquatable<SAPSoftwareInstallationType>
    {
        private readonly string _value;

        private SAPSoftwareInstallationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPSoftwareInstallationType ServiceInitiated { get; } = new SAPSoftwareInstallationType("ServiceInitiated");
        public static SAPSoftwareInstallationType SAPInstallWithoutOSConfig { get; } = new SAPSoftwareInstallationType("SAPInstallWithoutOSConfig");
        public static SAPSoftwareInstallationType External { get; } = new SAPSoftwareInstallationType("External");

        public static bool operator ==(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => left.Equals(right);
        public static bool operator !=(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => !left.Equals(right);

        public static explicit operator string(SAPSoftwareInstallationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPSoftwareInstallationType other && Equals(other);
        public bool Equals(SAPSoftwareInstallationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets certificate preference if secure communication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct SslPreference : IEquatable<SslPreference>
    {
        private readonly string _value;

        private SslPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslPreference Disabled { get; } = new SslPreference("Disabled");
        public static SslPreference RootCertificate { get; } = new SslPreference("RootCertificate");
        public static SslPreference ServerCertificate { get; } = new SslPreference("ServerCertificate");

        public static bool operator ==(SslPreference left, SslPreference right) => left.Equals(right);
        public static bool operator !=(SslPreference left, SslPreference right) => !left.Equals(right);

        public static explicit operator string(SslPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslPreference other && Equals(other);
        public bool Equals(SslPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
