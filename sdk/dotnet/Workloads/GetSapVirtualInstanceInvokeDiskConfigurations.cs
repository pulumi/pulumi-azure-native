// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads
{
    public static class GetSapVirtualInstanceInvokeDiskConfigurations
    {
        /// <summary>
        /// Get the SAP Disk Configuration Layout prod/non-prod SAP System.
        /// Azure REST API version: 2024-09-01.
        /// </summary>
        public static Task<GetSapVirtualInstanceInvokeDiskConfigurationsResult> InvokeAsync(GetSapVirtualInstanceInvokeDiskConfigurationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSapVirtualInstanceInvokeDiskConfigurationsResult>("azure-native:workloads:getSapVirtualInstanceInvokeDiskConfigurations", args ?? new GetSapVirtualInstanceInvokeDiskConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// Get the SAP Disk Configuration Layout prod/non-prod SAP System.
        /// Azure REST API version: 2024-09-01.
        /// </summary>
        public static Output<GetSapVirtualInstanceInvokeDiskConfigurationsResult> Invoke(GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSapVirtualInstanceInvokeDiskConfigurationsResult>("azure-native:workloads:getSapVirtualInstanceInvokeDiskConfigurations", args ?? new GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSapVirtualInstanceInvokeDiskConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The geo-location where the SAP resources will be created.
        /// </summary>
        [Input("appLocation", required: true)]
        public string AppLocation { get; set; } = null!;

        /// <summary>
        /// The database type. Eg: HANA, DB2, etc
        /// </summary>
        [Input("databaseType", required: true)]
        public Union<string, Pulumi.AzureNative.Workloads.SAPDatabaseType> DatabaseType { get; set; } = null!;

        /// <summary>
        /// The VM SKU for database instance.
        /// </summary>
        [Input("dbVmSku", required: true)]
        public string DbVmSku { get; set; } = null!;

        /// <summary>
        /// The deployment type. Eg: SingleServer/ThreeTier
        /// </summary>
        [Input("deploymentType", required: true)]
        public Union<string, Pulumi.AzureNative.Workloads.SAPDeploymentType> DeploymentType { get; set; } = null!;

        /// <summary>
        /// Defines the environment type - Production/Non Production.
        /// </summary>
        [Input("environment", required: true)]
        public Union<string, Pulumi.AzureNative.Workloads.SAPEnvironmentType> Environment { get; set; } = null!;

        /// <summary>
        /// The name of the Azure region.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// Defines the SAP Product type.
        /// </summary>
        [Input("sapProduct", required: true)]
        public Union<string, Pulumi.AzureNative.Workloads.SAPProductType> SapProduct { get; set; } = null!;

        public GetSapVirtualInstanceInvokeDiskConfigurationsArgs()
        {
        }
        public static new GetSapVirtualInstanceInvokeDiskConfigurationsArgs Empty => new GetSapVirtualInstanceInvokeDiskConfigurationsArgs();
    }

    public sealed class GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The geo-location where the SAP resources will be created.
        /// </summary>
        [Input("appLocation", required: true)]
        public Input<string> AppLocation { get; set; } = null!;

        /// <summary>
        /// The database type. Eg: HANA, DB2, etc
        /// </summary>
        [Input("databaseType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Workloads.SAPDatabaseType> DatabaseType { get; set; } = null!;

        /// <summary>
        /// The VM SKU for database instance.
        /// </summary>
        [Input("dbVmSku", required: true)]
        public Input<string> DbVmSku { get; set; } = null!;

        /// <summary>
        /// The deployment type. Eg: SingleServer/ThreeTier
        /// </summary>
        [Input("deploymentType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Workloads.SAPDeploymentType> DeploymentType { get; set; } = null!;

        /// <summary>
        /// Defines the environment type - Production/Non Production.
        /// </summary>
        [Input("environment", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Workloads.SAPEnvironmentType> Environment { get; set; } = null!;

        /// <summary>
        /// The name of the Azure region.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Defines the SAP Product type.
        /// </summary>
        [Input("sapProduct", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Workloads.SAPProductType> SapProduct { get; set; } = null!;

        public GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs()
        {
        }
        public static new GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs Empty => new GetSapVirtualInstanceInvokeDiskConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSapVirtualInstanceInvokeDiskConfigurationsResult
    {
        /// <summary>
        /// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.SAPDiskConfigurationResponse>? VolumeConfigurations;

        [OutputConstructor]
        private GetSapVirtualInstanceInvokeDiskConfigurationsResult(ImmutableDictionary<string, Outputs.SAPDiskConfigurationResponse>? volumeConfigurations)
        {
            VolumeConfigurations = volumeConfigurations;
        }
    }
}
