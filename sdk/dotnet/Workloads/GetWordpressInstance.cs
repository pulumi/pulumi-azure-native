// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads
{
    public static class GetWordpressInstance
    {
        /// <summary>
        /// WordPress instance resource
        /// API Version: 2021-12-01-preview.
        /// </summary>
        public static Task<GetWordpressInstanceResult> InvokeAsync(GetWordpressInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWordpressInstanceResult>("azure-native:workloads:getWordpressInstance", args ?? new GetWordpressInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// WordPress instance resource
        /// API Version: 2021-12-01-preview.
        /// </summary>
        public static Output<GetWordpressInstanceResult> Invoke(GetWordpressInstanceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWordpressInstanceResult>("azure-native:workloads:getWordpressInstance", args ?? new GetWordpressInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWordpressInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Php workload name
        /// </summary>
        [Input("phpWorkloadName", required: true)]
        public string PhpWorkloadName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetWordpressInstanceArgs()
        {
        }
        public static new GetWordpressInstanceArgs Empty => new GetWordpressInstanceArgs();
    }

    public sealed class GetWordpressInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Php workload name
        /// </summary>
        [Input("phpWorkloadName", required: true)]
        public Input<string> PhpWorkloadName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetWordpressInstanceInvokeArgs()
        {
        }
        public static new GetWordpressInstanceInvokeArgs Empty => new GetWordpressInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetWordpressInstanceResult
    {
        /// <summary>
        /// Database name used by the application
        /// </summary>
        public readonly string? DatabaseName;
        /// <summary>
        /// User name used by the application to connect to database
        /// </summary>
        public readonly string? DatabaseUser;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// WordPress instance provisioning state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Site Url to access the WordPress application
        /// </summary>
        public readonly string SiteUrl;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Application version
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetWordpressInstanceResult(
            string? databaseName,

            string? databaseUser,

            string id,

            string name,

            string provisioningState,

            string siteUrl,

            Outputs.SystemDataResponse systemData,

            string type,

            string version)
        {
            DatabaseName = databaseName;
            DatabaseUser = databaseUser;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SiteUrl = siteUrl;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
