// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads.V20230401
{
    public static class Getmonitor
    {
        /// <summary>
        /// Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
        /// </summary>
        public static Task<GetmonitorResult> InvokeAsync(GetmonitorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetmonitorResult>("azure-native:workloads/v20230401:getmonitor", args ?? new GetmonitorArgs(), options.WithDefaults());

        /// <summary>
        /// Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
        /// </summary>
        public static Output<GetmonitorResult> Invoke(GetmonitorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetmonitorResult>("azure-native:workloads/v20230401:getmonitor", args ?? new GetmonitorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetmonitorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("monitorName", required: true)]
        public string MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetmonitorArgs()
        {
        }
        public static new GetmonitorArgs Empty => new GetmonitorArgs();
    }

    public sealed class GetmonitorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetmonitorInvokeArgs()
        {
        }
        public static new GetmonitorInvokeArgs Empty => new GetmonitorInvokeArgs();
    }


    [OutputType]
    public sealed class GetmonitorResult
    {
        /// <summary>
        /// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
        /// </summary>
        public readonly string? AppLocation;
        /// <summary>
        /// Defines the SAP monitor errors.
        /// </summary>
        public readonly Outputs.MonitorPropertiesResponseErrors Errors;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// [currently not in use] Managed service identity(user assigned identities)
        /// </summary>
        public readonly Outputs.UserAssignedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceArmId;
        /// <summary>
        /// Managed resource group configuration
        /// </summary>
        public readonly Outputs.ManagedRGConfigurationResponse? ManagedResourceGroupConfiguration;
        /// <summary>
        /// The subnet which the SAP monitor will be deployed in
        /// </summary>
        public readonly string? MonitorSubnet;
        /// <summary>
        /// The ARM ID of the MSI used for SAP monitoring.
        /// </summary>
        public readonly string MsiArmId;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of provisioning of the SAP monitor.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
        /// </summary>
        public readonly string? RoutingPreference;
        /// <summary>
        /// The ARM ID of the Storage account used for SAP monitoring.
        /// </summary>
        public readonly string StorageAccountArmId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created which do not support zone redundancy.
        /// </summary>
        public readonly string? ZoneRedundancyPreference;

        [OutputConstructor]
        private GetmonitorResult(
            string? appLocation,

            Outputs.MonitorPropertiesResponseErrors errors,

            string id,

            Outputs.UserAssignedServiceIdentityResponse? identity,

            string location,

            string? logAnalyticsWorkspaceArmId,

            Outputs.ManagedRGConfigurationResponse? managedResourceGroupConfiguration,

            string? monitorSubnet,

            string msiArmId,

            string name,

            string provisioningState,

            string? routingPreference,

            string storageAccountArmId,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? zoneRedundancyPreference)
        {
            AppLocation = appLocation;
            Errors = errors;
            Id = id;
            Identity = identity;
            Location = location;
            LogAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            MonitorSubnet = monitorSubnet;
            MsiArmId = msiArmId;
            Name = name;
            ProvisioningState = provisioningState;
            RoutingPreference = routingPreference;
            StorageAccountArmId = storageAccountArmId;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            ZoneRedundancyPreference = zoneRedundancyPreference;
        }
    }
}
