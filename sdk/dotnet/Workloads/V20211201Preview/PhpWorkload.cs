// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads.V20211201Preview
{
    /// <summary>
    /// Php workload resource
    /// </summary>
    [AzureNativeResourceType("azure-native:workloads/v20211201preview:PhpWorkload")]
    public partial class PhpWorkload : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Admin user profile used for VM and VMSS
        /// </summary>
        [Output("adminUserProfile")]
        public Output<Outputs.UserProfileResponse> AdminUserProfile { get; private set; } = null!;

        /// <summary>
        /// The infra resources for PHP workload will be created in this location
        /// </summary>
        [Output("appLocation")]
        public Output<string> AppLocation { get; private set; } = null!;

        /// <summary>
        /// Backup profile
        /// </summary>
        [Output("backupProfile")]
        public Output<Outputs.BackupProfileResponse?> BackupProfile { get; private set; } = null!;

        /// <summary>
        /// Cache profile
        /// </summary>
        [Output("cacheProfile")]
        public Output<Outputs.CacheProfileResponse?> CacheProfile { get; private set; } = null!;

        /// <summary>
        /// Controller VM profile
        /// </summary>
        [Output("controllerProfile")]
        public Output<Outputs.NodeProfileResponse> ControllerProfile { get; private set; } = null!;

        /// <summary>
        /// Database profile
        /// </summary>
        [Output("databaseProfile")]
        public Output<Outputs.DatabaseProfileResponse> DatabaseProfile { get; private set; } = null!;

        /// <summary>
        /// File share profile
        /// </summary>
        [Output("fileshareProfile")]
        public Output<Outputs.FileshareProfileResponse?> FileshareProfile { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource. Currently not supported
        /// </summary>
        [Output("identity")]
        public Output<Outputs.PhpWorkloadResourceResponseIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Indicates which kind of php workload this resource represent e.g WordPress
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Managed resource group configuration of the workload
        /// </summary>
        [Output("managedResourceGroupConfiguration")]
        public Output<Outputs.ManagedRGConfigurationResponse?> ManagedResourceGroupConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network profile
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.NetworkProfileResponse?> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// PHP profile
        /// </summary>
        [Output("phpProfile")]
        public Output<Outputs.PhpProfileResponse?> PhpProfile { get; private set; } = null!;

        /// <summary>
        /// Php workload resource provisioning state
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Search profile
        /// </summary>
        [Output("searchProfile")]
        public Output<Outputs.SearchProfileResponse?> SearchProfile { get; private set; } = null!;

        /// <summary>
        /// Site profile
        /// </summary>
        [Output("siteProfile")]
        public Output<Outputs.SiteProfileResponse?> SiteProfile { get; private set; } = null!;

        /// <summary>
        /// Php workloads SKU
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// VMSS web nodes profile
        /// </summary>
        [Output("webNodesProfile")]
        public Output<Outputs.VmssNodesProfileResponse> WebNodesProfile { get; private set; } = null!;


        /// <summary>
        /// Create a PhpWorkload resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PhpWorkload(string name, PhpWorkloadArgs args, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20211201preview:PhpWorkload", name, args ?? new PhpWorkloadArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PhpWorkload(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:workloads/v20211201preview:PhpWorkload", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:workloads:PhpWorkload"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PhpWorkload resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PhpWorkload Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PhpWorkload(name, id, options);
        }
    }

    public sealed class PhpWorkloadArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Admin user profile used for VM and VMSS
        /// </summary>
        [Input("adminUserProfile", required: true)]
        public Input<Inputs.UserProfileArgs> AdminUserProfile { get; set; } = null!;

        /// <summary>
        /// The infra resources for PHP workload will be created in this location
        /// </summary>
        [Input("appLocation", required: true)]
        public Input<string> AppLocation { get; set; } = null!;

        /// <summary>
        /// Backup profile
        /// </summary>
        [Input("backupProfile")]
        public Input<Inputs.BackupProfileArgs>? BackupProfile { get; set; }

        /// <summary>
        /// Cache profile
        /// </summary>
        [Input("cacheProfile")]
        public Input<Inputs.CacheProfileArgs>? CacheProfile { get; set; }

        /// <summary>
        /// Controller VM profile
        /// </summary>
        [Input("controllerProfile", required: true)]
        public Input<Inputs.NodeProfileArgs> ControllerProfile { get; set; } = null!;

        /// <summary>
        /// Database profile
        /// </summary>
        [Input("databaseProfile", required: true)]
        public Input<Inputs.DatabaseProfileArgs> DatabaseProfile { get; set; } = null!;

        /// <summary>
        /// File share profile
        /// </summary>
        [Input("fileshareProfile")]
        public Input<Inputs.FileshareProfileArgs>? FileshareProfile { get; set; }

        /// <summary>
        /// Identity for the resource. Currently not supported
        /// </summary>
        [Input("identity")]
        public Input<Inputs.PhpWorkloadResourceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Indicates which kind of php workload this resource represent e.g WordPress
        /// </summary>
        [Input("kind", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Workloads.V20211201Preview.WorkloadKind> Kind { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Managed resource group configuration of the workload
        /// </summary>
        [Input("managedResourceGroupConfiguration")]
        public Input<Inputs.ManagedRGConfigurationArgs>? ManagedResourceGroupConfiguration { get; set; }

        /// <summary>
        /// Network profile
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// PHP profile
        /// </summary>
        [Input("phpProfile")]
        public Input<Inputs.PhpProfileArgs>? PhpProfile { get; set; }

        /// <summary>
        /// Php workload name
        /// </summary>
        [Input("phpWorkloadName")]
        public Input<string>? PhpWorkloadName { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Search profile
        /// </summary>
        [Input("searchProfile")]
        public Input<Inputs.SearchProfileArgs>? SearchProfile { get; set; }

        /// <summary>
        /// Site profile
        /// </summary>
        [Input("siteProfile")]
        public Input<Inputs.SiteProfileArgs>? SiteProfile { get; set; }

        /// <summary>
        /// Php workloads SKU
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// VMSS web nodes profile
        /// </summary>
        [Input("webNodesProfile", required: true)]
        public Input<Inputs.VmssNodesProfileArgs> WebNodesProfile { get; set; } = null!;

        public PhpWorkloadArgs()
        {
        }
        public static new PhpWorkloadArgs Empty => new PhpWorkloadArgs();
    }
}
