// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Workloads.V20231001Preview.Inputs
{

    /// <summary>
    /// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
    /// </summary>
    public sealed class SSLConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
        /// </summary>
        [Input("sslCryptoProvider")]
        public InputUnion<string, Pulumi.AzureNative.Workloads.V20231001Preview.SslCryptoProvider>? SslCryptoProvider { get; set; }

        /// <summary>
        /// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
        /// </summary>
        [Input("sslHostNameInCertificate")]
        public Input<string>? SslHostNameInCertificate { get; set; }

        /// <summary>
        /// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        /// </summary>
        [Input("sslKeyStore")]
        public Input<string>? SslKeyStore { get; set; }

        /// <summary>
        /// Specify the name of the trust store file that contains the serverâ€™s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
        /// </summary>
        [Input("sslTrustStore")]
        public Input<string>? SslTrustStore { get; set; }

        public SSLConfigurationArgs()
        {
        }
        public static new SSLConfigurationArgs Empty => new SSLConfigurationArgs();
    }
}
