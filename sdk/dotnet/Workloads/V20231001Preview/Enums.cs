// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Workloads.V20231001Preview
{
    /// <summary>
    /// The type of backup, VM, SQL or HANA.
    /// </summary>
    [EnumType]
    public readonly struct BackupType : IEquatable<BackupType>
    {
        private readonly string _value;

        private BackupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupType VM { get; } = new BackupType("VM");
        public static BackupType SQL { get; } = new BackupType("SQL");
        public static BackupType HANA { get; } = new BackupType("HANA");

        public static bool operator ==(BackupType left, BackupType right) => left.Equals(right);
        public static bool operator !=(BackupType left, BackupType right) => !left.Equals(right);

        public static explicit operator string(BackupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupType other && Equals(other);
        public bool Equals(BackupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of file share config.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType Skip { get; } = new ConfigurationType("Skip");
        public static ConfigurationType CreateAndMount { get; } = new ConfigurationType("CreateAndMount");
        public static ConfigurationType Mount { get; } = new ConfigurationType("Mount");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the disk sku name.
    /// </summary>
    [EnumType]
    public readonly struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        private DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskSkuName Standard_LRS { get; } = new DiskSkuName("Standard_LRS");
        public static DiskSkuName Premium_LRS { get; } = new DiskSkuName("Premium_LRS");
        public static DiskSkuName StandardSSD_LRS { get; } = new DiskSkuName("StandardSSD_LRS");
        public static DiskSkuName UltraSSD_LRS { get; } = new DiskSkuName("UltraSSD_LRS");
        public static DiskSkuName Premium_ZRS { get; } = new DiskSkuName("Premium_ZRS");
        public static DiskSkuName StandardSSD_ZRS { get; } = new DiskSkuName("StandardSSD_ZRS");
        public static DiskSkuName PremiumV2_LRS { get; } = new DiskSkuName("PremiumV2_LRS");

        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);

        public static explicit operator string(DiskSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskSkuName other && Equals(other);
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The policy type.
    /// </summary>
    [EnumType]
    public readonly struct IAASVMPolicyType : IEquatable<IAASVMPolicyType>
    {
        private readonly string _value;

        private IAASVMPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IAASVMPolicyType Invalid { get; } = new IAASVMPolicyType("Invalid");
        public static IAASVMPolicyType V1 { get; } = new IAASVMPolicyType("V1");
        public static IAASVMPolicyType V2 { get; } = new IAASVMPolicyType("V2");

        public static bool operator ==(IAASVMPolicyType left, IAASVMPolicyType right) => left.Equals(right);
        public static bool operator !=(IAASVMPolicyType left, IAASVMPolicyType right) => !left.Equals(right);

        public static explicit operator string(IAASVMPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IAASVMPolicyType other && Equals(other);
        public bool Equals(IAASVMPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
    /// </summary>
    [EnumType]
    public readonly struct ManagedResourcesNetworkAccessType : IEquatable<ManagedResourcesNetworkAccessType>
    {
        private readonly string _value;

        private ManagedResourcesNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedResourcesNetworkAccessType Public { get; } = new ManagedResourcesNetworkAccessType("Public");
        public static ManagedResourcesNetworkAccessType Private { get; } = new ManagedResourcesNetworkAccessType("Private");

        public static bool operator ==(ManagedResourcesNetworkAccessType left, ManagedResourcesNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(ManagedResourcesNetworkAccessType left, ManagedResourcesNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(ManagedResourcesNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedResourcesNetworkAccessType other && Equals(other);
        public bool Equals(ManagedResourcesNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed service identity for all identities.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MonthOfYear : IEquatable<MonthOfYear>
    {
        private readonly string _value;

        private MonthOfYear(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonthOfYear Invalid { get; } = new MonthOfYear("Invalid");
        public static MonthOfYear January { get; } = new MonthOfYear("January");
        public static MonthOfYear February { get; } = new MonthOfYear("February");
        public static MonthOfYear March { get; } = new MonthOfYear("March");
        public static MonthOfYear April { get; } = new MonthOfYear("April");
        public static MonthOfYear May { get; } = new MonthOfYear("May");
        public static MonthOfYear June { get; } = new MonthOfYear("June");
        public static MonthOfYear July { get; } = new MonthOfYear("July");
        public static MonthOfYear August { get; } = new MonthOfYear("August");
        public static MonthOfYear September { get; } = new MonthOfYear("September");
        public static MonthOfYear October { get; } = new MonthOfYear("October");
        public static MonthOfYear November { get; } = new MonthOfYear("November");
        public static MonthOfYear December { get; } = new MonthOfYear("December");

        public static bool operator ==(MonthOfYear left, MonthOfYear right) => left.Equals(right);
        public static bool operator !=(MonthOfYear left, MonthOfYear right) => !left.Equals(right);

        public static explicit operator string(MonthOfYear value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonthOfYear other && Equals(other);
        public bool Equals(MonthOfYear other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pattern type to be used for resource naming.
    /// </summary>
    [EnumType]
    public readonly struct NamingPatternType : IEquatable<NamingPatternType>
    {
        private readonly string _value;

        private NamingPatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamingPatternType FullResourceName { get; } = new NamingPatternType("FullResourceName");

        public static bool operator ==(NamingPatternType left, NamingPatternType right) => left.Equals(right);
        public static bool operator !=(NamingPatternType left, NamingPatternType right) => !left.Equals(right);

        public static explicit operator string(NamingPatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamingPatternType other && Equals(other);
        public bool Equals(NamingPatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS Type
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSType Linux { get; } = new OSType("Linux");
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of backup policy type
    /// </summary>
    [EnumType]
    public readonly struct PolicyType : IEquatable<PolicyType>
    {
        private readonly string _value;

        private PolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyType Invalid { get; } = new PolicyType("Invalid");
        public static PolicyType Full { get; } = new PolicyType("Full");
        public static PolicyType Differential { get; } = new PolicyType("Differential");
        public static PolicyType Log { get; } = new PolicyType("Log");
        public static PolicyType CopyOnlyFull { get; } = new PolicyType("CopyOnlyFull");
        public static PolicyType Incremental { get; } = new PolicyType("Incremental");
        public static PolicyType SnapshotFull { get; } = new PolicyType("SnapshotFull");
        public static PolicyType SnapshotCopyOnlyFull { get; } = new PolicyType("SnapshotCopyOnlyFull");

        public static bool operator ==(PolicyType left, PolicyType right) => left.Equals(right);
        public static bool operator !=(PolicyType left, PolicyType right) => !left.Equals(right);

        public static explicit operator string(PolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyType other && Equals(other);
        public bool Equals(PolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Retention duration type: days/weeks/months/years
    /// Used only if TieringMode is set to TierAfter
    /// </summary>
    [EnumType]
    public readonly struct RetentionDurationType : IEquatable<RetentionDurationType>
    {
        private readonly string _value;

        private RetentionDurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionDurationType Invalid { get; } = new RetentionDurationType("Invalid");
        public static RetentionDurationType Days { get; } = new RetentionDurationType("Days");
        public static RetentionDurationType Weeks { get; } = new RetentionDurationType("Weeks");
        public static RetentionDurationType Months { get; } = new RetentionDurationType("Months");
        public static RetentionDurationType Years { get; } = new RetentionDurationType("Years");

        public static bool operator ==(RetentionDurationType left, RetentionDurationType right) => left.Equals(right);
        public static bool operator !=(RetentionDurationType left, RetentionDurationType right) => !left.Equals(right);

        public static explicit operator string(RetentionDurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionDurationType other && Equals(other);
        public bool Equals(RetentionDurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Retention schedule format for yearly retention policy.
    /// </summary>
    [EnumType]
    public readonly struct RetentionScheduleFormat : IEquatable<RetentionScheduleFormat>
    {
        private readonly string _value;

        private RetentionScheduleFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionScheduleFormat Invalid { get; } = new RetentionScheduleFormat("Invalid");
        public static RetentionScheduleFormat Daily { get; } = new RetentionScheduleFormat("Daily");
        public static RetentionScheduleFormat Weekly { get; } = new RetentionScheduleFormat("Weekly");

        public static bool operator ==(RetentionScheduleFormat left, RetentionScheduleFormat right) => left.Equals(right);
        public static bool operator !=(RetentionScheduleFormat left, RetentionScheduleFormat right) => !left.Equals(right);

        public static explicit operator string(RetentionScheduleFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionScheduleFormat other && Equals(other);
        public bool Equals(RetentionScheduleFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
    /// </summary>
    [EnumType]
    public readonly struct RoutingPreference : IEquatable<RoutingPreference>
    {
        private readonly string _value;

        private RoutingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingPreference Default { get; } = new RoutingPreference("Default");
        public static RoutingPreference RouteAll { get; } = new RoutingPreference("RouteAll");

        public static bool operator ==(RoutingPreference left, RoutingPreference right) => left.Equals(right);
        public static bool operator !=(RoutingPreference left, RoutingPreference right) => !left.Equals(right);

        public static explicit operator string(RoutingPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingPreference other && Equals(other);
        public bool Equals(RoutingPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The configuration Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPConfigurationType : IEquatable<SAPConfigurationType>
    {
        private readonly string _value;

        private SAPConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPConfigurationType Deployment { get; } = new SAPConfigurationType("Deployment");
        public static SAPConfigurationType Discovery { get; } = new SAPConfigurationType("Discovery");
        public static SAPConfigurationType DeploymentWithOSConfig { get; } = new SAPConfigurationType("DeploymentWithOSConfig");

        public static bool operator ==(SAPConfigurationType left, SAPConfigurationType right) => left.Equals(right);
        public static bool operator !=(SAPConfigurationType left, SAPConfigurationType right) => !left.Equals(right);

        public static explicit operator string(SAPConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPConfigurationType other && Equals(other);
        public bool Equals(SAPConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The DB scale method.
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseScaleMethod : IEquatable<SAPDatabaseScaleMethod>
    {
        private readonly string _value;

        private SAPDatabaseScaleMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseScaleMethod ScaleUp { get; } = new SAPDatabaseScaleMethod("ScaleUp");

        public static bool operator ==(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseScaleMethod left, SAPDatabaseScaleMethod right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseScaleMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseScaleMethod other && Equals(other);
        public bool Equals(SAPDatabaseScaleMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The database type. Eg: HANA, DB2, etc
    /// </summary>
    [EnumType]
    public readonly struct SAPDatabaseType : IEquatable<SAPDatabaseType>
    {
        private readonly string _value;

        private SAPDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDatabaseType HANA { get; } = new SAPDatabaseType("HANA");
        public static SAPDatabaseType DB2 { get; } = new SAPDatabaseType("DB2");

        public static bool operator ==(SAPDatabaseType left, SAPDatabaseType right) => left.Equals(right);
        public static bool operator !=(SAPDatabaseType left, SAPDatabaseType right) => !left.Equals(right);

        public static explicit operator string(SAPDatabaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDatabaseType other && Equals(other);
        public bool Equals(SAPDatabaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type. Eg: SingleServer/ThreeTier
    /// </summary>
    [EnumType]
    public readonly struct SAPDeploymentType : IEquatable<SAPDeploymentType>
    {
        private readonly string _value;

        private SAPDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPDeploymentType SingleServer { get; } = new SAPDeploymentType("SingleServer");
        public static SAPDeploymentType ThreeTier { get; } = new SAPDeploymentType("ThreeTier");

        public static bool operator ==(SAPDeploymentType left, SAPDeploymentType right) => left.Equals(right);
        public static bool operator !=(SAPDeploymentType left, SAPDeploymentType right) => !left.Equals(right);

        public static explicit operator string(SAPDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPDeploymentType other && Equals(other);
        public bool Equals(SAPDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the environment type - Production/Non Production.
    /// </summary>
    [EnumType]
    public readonly struct SAPEnvironmentType : IEquatable<SAPEnvironmentType>
    {
        private readonly string _value;

        private SAPEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPEnvironmentType NonProd { get; } = new SAPEnvironmentType("NonProd");
        public static SAPEnvironmentType Prod { get; } = new SAPEnvironmentType("Prod");

        public static bool operator ==(SAPEnvironmentType left, SAPEnvironmentType right) => left.Equals(right);
        public static bool operator !=(SAPEnvironmentType left, SAPEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(SAPEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPEnvironmentType other && Equals(other);
        public bool Equals(SAPEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The high availability type.
    /// </summary>
    [EnumType]
    public readonly struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        private SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType("AvailabilitySet");
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType("AvailabilityZone");

        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);

        public static explicit operator string(SAPHighAvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPHighAvailabilityType other && Equals(other);
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the SAP Product type.
    /// </summary>
    [EnumType]
    public readonly struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        private SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPProductType ECC { get; } = new SAPProductType("ECC");
        public static SAPProductType S4HANA { get; } = new SAPProductType("S4HANA");
        public static SAPProductType Other { get; } = new SAPProductType("Other");

        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);

        public static explicit operator string(SAPProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPProductType other && Equals(other);
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SAP software installation Type.
    /// </summary>
    [EnumType]
    public readonly struct SAPSoftwareInstallationType : IEquatable<SAPSoftwareInstallationType>
    {
        private readonly string _value;

        private SAPSoftwareInstallationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SAPSoftwareInstallationType ServiceInitiated { get; } = new SAPSoftwareInstallationType("ServiceInitiated");
        public static SAPSoftwareInstallationType SAPInstallWithoutOSConfig { get; } = new SAPSoftwareInstallationType("SAPInstallWithoutOSConfig");
        public static SAPSoftwareInstallationType External { get; } = new SAPSoftwareInstallationType("External");

        public static bool operator ==(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => left.Equals(right);
        public static bool operator !=(SAPSoftwareInstallationType left, SAPSoftwareInstallationType right) => !left.Equals(right);

        public static explicit operator string(SAPSoftwareInstallationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SAPSoftwareInstallationType other && Equals(other);
        public bool Equals(SAPSoftwareInstallationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Frequency of the schedule operation of this policy.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleRunType : IEquatable<ScheduleRunType>
    {
        private readonly string _value;

        private ScheduleRunType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleRunType Invalid { get; } = new ScheduleRunType("Invalid");
        public static ScheduleRunType Daily { get; } = new ScheduleRunType("Daily");
        public static ScheduleRunType Weekly { get; } = new ScheduleRunType("Weekly");
        public static ScheduleRunType Hourly { get; } = new ScheduleRunType("Hourly");

        public static bool operator ==(ScheduleRunType left, ScheduleRunType right) => left.Equals(right);
        public static bool operator !=(ScheduleRunType left, ScheduleRunType right) => !left.Equals(right);

        public static explicit operator string(ScheduleRunType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleRunType other && Equals(other);
        public bool Equals(ScheduleRunType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
    /// </summary>
    [EnumType]
    public readonly struct SslCryptoProvider : IEquatable<SslCryptoProvider>
    {
        private readonly string _value;

        private SslCryptoProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslCryptoProvider Commoncrypto { get; } = new SslCryptoProvider("commoncrypto");
        public static SslCryptoProvider Openssl { get; } = new SslCryptoProvider("openssl");

        public static bool operator ==(SslCryptoProvider left, SslCryptoProvider right) => left.Equals(right);
        public static bool operator !=(SslCryptoProvider left, SslCryptoProvider right) => !left.Equals(right);

        public static explicit operator string(SslCryptoProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslCryptoProvider other && Equals(other);
        public bool Equals(SslCryptoProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets certificate preference if secure communication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct SslPreference : IEquatable<SslPreference>
    {
        private readonly string _value;

        private SslPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslPreference Disabled { get; } = new SslPreference("Disabled");
        public static SslPreference RootCertificate { get; } = new SslPreference("RootCertificate");
        public static SslPreference ServerCertificate { get; } = new SslPreference("ServerCertificate");

        public static bool operator ==(SslPreference left, SslPreference right) => left.Equals(right);
        public static bool operator !=(SslPreference left, SslPreference right) => !left.Equals(right);

        public static explicit operator string(SslPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslPreference other && Equals(other);
        public bool Equals(SslPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tiering Mode to control automatic tiering of recovery points. Supported values are:
    /// 1. TierRecommended: Tier all recovery points recommended to be tiered
    /// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
    /// 3. DoNotTier: Do not tier any recovery points
    /// </summary>
    [EnumType]
    public readonly struct TieringMode : IEquatable<TieringMode>
    {
        private readonly string _value;

        private TieringMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TieringMode Invalid { get; } = new TieringMode("Invalid");
        public static TieringMode TierRecommended { get; } = new TieringMode("TierRecommended");
        public static TieringMode TierAfter { get; } = new TieringMode("TierAfter");
        public static TieringMode DoNotTier { get; } = new TieringMode("DoNotTier");

        public static bool operator ==(TieringMode left, TieringMode right) => left.Equals(right);
        public static bool operator !=(TieringMode left, TieringMode right) => !left.Equals(right);

        public static explicit operator string(TieringMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TieringMode other && Equals(other);
        public bool Equals(TieringMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The vault type, whether it is existing or has to be created.
    /// </summary>
    [EnumType]
    public readonly struct VaultType : IEquatable<VaultType>
    {
        private readonly string _value;

        private VaultType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VaultType Existing { get; } = new VaultType("Existing");
        public static VaultType New { get; } = new VaultType("New");

        public static bool operator ==(VaultType left, VaultType right) => left.Equals(right);
        public static bool operator !=(VaultType left, VaultType right) => !left.Equals(right);

        public static explicit operator string(VaultType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VaultType other && Equals(other);
        public bool Equals(VaultType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WeekOfMonth : IEquatable<WeekOfMonth>
    {
        private readonly string _value;

        private WeekOfMonth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekOfMonth First { get; } = new WeekOfMonth("First");
        public static WeekOfMonth Second { get; } = new WeekOfMonth("Second");
        public static WeekOfMonth Third { get; } = new WeekOfMonth("Third");
        public static WeekOfMonth Fourth { get; } = new WeekOfMonth("Fourth");
        public static WeekOfMonth Last { get; } = new WeekOfMonth("Last");
        public static WeekOfMonth Invalid { get; } = new WeekOfMonth("Invalid");

        public static bool operator ==(WeekOfMonth left, WeekOfMonth right) => left.Equals(right);
        public static bool operator !=(WeekOfMonth left, WeekOfMonth right) => !left.Equals(right);

        public static explicit operator string(WeekOfMonth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekOfMonth other && Equals(other);
        public bool Equals(WeekOfMonth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of workload for the backup management
    /// </summary>
    [EnumType]
    public readonly struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        private WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadType Invalid { get; } = new WorkloadType("Invalid");
        public static WorkloadType VM { get; } = new WorkloadType("VM");
        public static WorkloadType FileFolder { get; } = new WorkloadType("FileFolder");
        public static WorkloadType AzureSqlDb { get; } = new WorkloadType("AzureSqlDb");
        public static WorkloadType SQLDB { get; } = new WorkloadType("SQLDB");
        public static WorkloadType Exchange { get; } = new WorkloadType("Exchange");
        public static WorkloadType Sharepoint { get; } = new WorkloadType("Sharepoint");
        public static WorkloadType VMwareVM { get; } = new WorkloadType("VMwareVM");
        public static WorkloadType SystemState { get; } = new WorkloadType("SystemState");
        public static WorkloadType Client { get; } = new WorkloadType("Client");
        public static WorkloadType GenericDataSource { get; } = new WorkloadType("GenericDataSource");
        public static WorkloadType SQLDataBase { get; } = new WorkloadType("SQLDataBase");
        public static WorkloadType AzureFileShare { get; } = new WorkloadType("AzureFileShare");
        public static WorkloadType SAPHanaDatabase { get; } = new WorkloadType("SAPHanaDatabase");
        public static WorkloadType SAPAseDatabase { get; } = new WorkloadType("SAPAseDatabase");
        public static WorkloadType SAPHanaDBInstance { get; } = new WorkloadType("SAPHanaDBInstance");

        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);

        public static explicit operator string(WorkloadType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadType other && Equals(other);
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
