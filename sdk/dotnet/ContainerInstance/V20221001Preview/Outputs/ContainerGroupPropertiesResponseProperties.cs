// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance.V20221001Preview.Outputs
{

    /// <summary>
    /// The container group properties
    /// </summary>
    [OutputType]
    public sealed class ContainerGroupPropertiesResponseProperties
    {
        /// <summary>
        /// The properties for confidential container group
        /// </summary>
        public readonly Outputs.ConfidentialComputePropertiesResponse? ConfidentialComputeProperties;
        /// <summary>
        /// The containers within the container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerResponse> Containers;
        /// <summary>
        /// The diagnostic information for a container group.
        /// </summary>
        public readonly Outputs.ContainerGroupDiagnosticsResponse? Diagnostics;
        /// <summary>
        /// The DNS config information for a container group.
        /// </summary>
        public readonly Outputs.DnsConfigurationResponse? DnsConfig;
        /// <summary>
        /// The encryption properties for a container group.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponse? EncryptionProperties;
        /// <summary>
        /// extensions used by virtual kubelet
        /// </summary>
        public readonly ImmutableArray<Outputs.DeploymentExtensionSpecResponse> Extensions;
        /// <summary>
        /// The image registry credentials by which the container group is created from.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageRegistryCredentialResponse> ImageRegistryCredentials;
        /// <summary>
        /// The init containers for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.InitContainerDefinitionResponse> InitContainers;
        /// <summary>
        /// The instance view of the container group. Only valid in response.
        /// </summary>
        public readonly Outputs.ContainerGroupPropertiesResponseInstanceView InstanceView;
        /// <summary>
        /// The IP address type of the container group.
        /// </summary>
        public readonly Outputs.IpAddressResponse? IpAddress;
        /// <summary>
        /// The operating system type required by the containers in the container group.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The priority of the container group.
        /// </summary>
        public readonly string? Priority;
        /// <summary>
        /// The provisioning state of the container group. This only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        public readonly string? RestartPolicy;
        /// <summary>
        /// The SKU for a container group.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// The subnet resource IDs for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupSubnetIdResponse> SubnetIds;
        /// <summary>
        /// The list of volumes that can be mounted by containers in this container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeResponse> Volumes;

        [OutputConstructor]
        private ContainerGroupPropertiesResponseProperties(
            Outputs.ConfidentialComputePropertiesResponse? confidentialComputeProperties,

            ImmutableArray<Outputs.ContainerResponse> containers,

            Outputs.ContainerGroupDiagnosticsResponse? diagnostics,

            Outputs.DnsConfigurationResponse? dnsConfig,

            Outputs.EncryptionPropertiesResponse? encryptionProperties,

            ImmutableArray<Outputs.DeploymentExtensionSpecResponse> extensions,

            ImmutableArray<Outputs.ImageRegistryCredentialResponse> imageRegistryCredentials,

            ImmutableArray<Outputs.InitContainerDefinitionResponse> initContainers,

            Outputs.ContainerGroupPropertiesResponseInstanceView instanceView,

            Outputs.IpAddressResponse? ipAddress,

            string osType,

            string? priority,

            string provisioningState,

            string? restartPolicy,

            string? sku,

            ImmutableArray<Outputs.ContainerGroupSubnetIdResponse> subnetIds,

            ImmutableArray<Outputs.VolumeResponse> volumes)
        {
            ConfidentialComputeProperties = confidentialComputeProperties;
            Containers = containers;
            Diagnostics = diagnostics;
            DnsConfig = dnsConfig;
            EncryptionProperties = encryptionProperties;
            Extensions = extensions;
            ImageRegistryCredentials = imageRegistryCredentials;
            InitContainers = initContainers;
            InstanceView = instanceView;
            IpAddress = ipAddress;
            OsType = osType;
            Priority = priority;
            ProvisioningState = provisioningState;
            RestartPolicy = restartPolicy;
            Sku = sku;
            SubnetIds = subnetIds;
            Volumes = volumes;
        }
    }
}
