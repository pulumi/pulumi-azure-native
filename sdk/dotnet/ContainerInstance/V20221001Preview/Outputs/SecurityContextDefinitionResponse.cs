// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance.V20221001Preview.Outputs
{

    /// <summary>
    /// The security context for the container.
    /// </summary>
    [OutputType]
    public sealed class SecurityContextDefinitionResponse
    {
        /// <summary>
        /// A boolean value indicating whether the init process can elevate its privileges
        /// </summary>
        public readonly bool? AllowPrivilegeEscalation;
        /// <summary>
        /// The capabilities to add or drop from a container.
        /// </summary>
        public readonly Outputs.SecurityContextCapabilitiesDefinitionResponse? Capabilities;
        /// <summary>
        /// The flag to determine if the container permissions is elevated to Privileged.
        /// </summary>
        public readonly bool? Privileged;
        /// <summary>
        /// Sets the User GID for the container.
        /// </summary>
        public readonly int? RunAsGroup;
        /// <summary>
        /// Sets the User UID for the container.
        /// </summary>
        public readonly int? RunAsUser;
        /// <summary>
        /// a base64 encoded string containing the contents of the JSON in the seccomp profile
        /// </summary>
        public readonly string? SeccompProfile;

        [OutputConstructor]
        private SecurityContextDefinitionResponse(
            bool? allowPrivilegeEscalation,

            Outputs.SecurityContextCapabilitiesDefinitionResponse? capabilities,

            bool? privileged,

            int? runAsGroup,

            int? runAsUser,

            string? seccompProfile)
        {
            AllowPrivilegeEscalation = allowPrivilegeEscalation;
            Capabilities = capabilities;
            Privileged = privileged;
            RunAsGroup = runAsGroup;
            RunAsUser = runAsUser;
            SeccompProfile = seccompProfile;
        }
    }
}
