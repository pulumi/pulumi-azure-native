// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance.V20241101Preview
{
    public static class GetCGProfile
    {
        /// <summary>
        /// Get the properties of the specified container group profile.
        /// </summary>
        public static Task<GetCGProfileResult> InvokeAsync(GetCGProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCGProfileResult>("azure-native:containerinstance/v20241101preview:getCGProfile", args ?? new GetCGProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Get the properties of the specified container group profile.
        /// </summary>
        public static Output<GetCGProfileResult> Invoke(GetCGProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCGProfileResult>("azure-native:containerinstance/v20241101preview:getCGProfile", args ?? new GetCGProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCGProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ContainerGroupProfile name.
        /// </summary>
        [Input("containerGroupProfileName", required: true)]
        public string ContainerGroupProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCGProfileArgs()
        {
        }
        public static new GetCGProfileArgs Empty => new GetCGProfileArgs();
    }

    public sealed class GetCGProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ContainerGroupProfile name.
        /// </summary>
        [Input("containerGroupProfileName", required: true)]
        public Input<string> ContainerGroupProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCGProfileInvokeArgs()
        {
        }
        public static new GetCGProfileInvokeArgs Empty => new GetCGProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetCGProfileResult
    {
        /// <summary>
        /// The properties for confidential container group
        /// </summary>
        public readonly Outputs.ConfidentialComputePropertiesResponse? ConfidentialComputeProperties;
        /// <summary>
        /// The containers within the container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerResponse> Containers;
        /// <summary>
        /// The diagnostic information for a container group.
        /// </summary>
        public readonly Outputs.ContainerGroupDiagnosticsResponse? Diagnostics;
        /// <summary>
        /// The encryption properties for a container group.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponse? EncryptionProperties;
        /// <summary>
        /// extensions used by virtual kubelet
        /// </summary>
        public readonly ImmutableArray<Outputs.DeploymentExtensionSpecResponse> Extensions;
        /// <summary>
        /// The resource id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The image registry credentials by which the container group is created from.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageRegistryCredentialResponse> ImageRegistryCredentials;
        /// <summary>
        /// The init containers for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.InitContainerDefinitionResponse> InitContainers;
        /// <summary>
        /// The IP address type of the container group.
        /// </summary>
        public readonly Outputs.IpAddressResponse? IpAddress;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The operating system type required by the containers in the container group.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The priority of the container group.
        /// </summary>
        public readonly string? Priority;
        /// <summary>
        /// Registered revisions are calculated at request time based off the records in the table logs.
        /// </summary>
        public readonly ImmutableArray<double> RegisteredRevisions;
        /// <summary>
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        public readonly string? RestartPolicy;
        /// <summary>
        /// Container group profile current revision number
        /// </summary>
        public readonly double? Revision;
        /// <summary>
        /// The container security properties.
        /// </summary>
        public readonly Outputs.SecurityContextDefinitionResponse? SecurityContext;
        /// <summary>
        /// Shutdown grace period for containers in a container group.
        /// </summary>
        public readonly string? ShutdownGracePeriod;
        /// <summary>
        /// The SKU for a container group.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Post completion time to live for containers of a CG
        /// </summary>
        public readonly string? TimeToLive;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Gets or sets Krypton use property.
        /// </summary>
        public readonly bool? UseKrypton;
        /// <summary>
        /// The list of volumes that can be mounted by containers in this container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeResponse> Volumes;
        /// <summary>
        /// The zones for the container group.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetCGProfileResult(
            Outputs.ConfidentialComputePropertiesResponse? confidentialComputeProperties,

            ImmutableArray<Outputs.ContainerResponse> containers,

            Outputs.ContainerGroupDiagnosticsResponse? diagnostics,

            Outputs.EncryptionPropertiesResponse? encryptionProperties,

            ImmutableArray<Outputs.DeploymentExtensionSpecResponse> extensions,

            string id,

            ImmutableArray<Outputs.ImageRegistryCredentialResponse> imageRegistryCredentials,

            ImmutableArray<Outputs.InitContainerDefinitionResponse> initContainers,

            Outputs.IpAddressResponse? ipAddress,

            string? location,

            string name,

            string? osType,

            string? priority,

            ImmutableArray<double> registeredRevisions,

            string? restartPolicy,

            double? revision,

            Outputs.SecurityContextDefinitionResponse? securityContext,

            string? shutdownGracePeriod,

            string? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? timeToLive,

            string type,

            bool? useKrypton,

            ImmutableArray<Outputs.VolumeResponse> volumes,

            ImmutableArray<string> zones)
        {
            ConfidentialComputeProperties = confidentialComputeProperties;
            Containers = containers;
            Diagnostics = diagnostics;
            EncryptionProperties = encryptionProperties;
            Extensions = extensions;
            Id = id;
            ImageRegistryCredentials = imageRegistryCredentials;
            InitContainers = initContainers;
            IpAddress = ipAddress;
            Location = location;
            Name = name;
            OsType = osType;
            Priority = priority;
            RegisteredRevisions = registeredRevisions;
            RestartPolicy = restartPolicy;
            Revision = revision;
            SecurityContext = securityContext;
            ShutdownGracePeriod = shutdownGracePeriod;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            TimeToLive = timeToLive;
            Type = type;
            UseKrypton = useKrypton;
            Volumes = volumes;
            Zones = zones;
        }
    }
}
