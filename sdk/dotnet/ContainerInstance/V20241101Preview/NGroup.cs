// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance.V20241101Preview
{
    /// <summary>
    /// Describes the NGroups resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:containerinstance/v20241101preview:NGroup")]
    public partial class NGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Container Group Profiles that could be used in the NGroups resource.
        /// </summary>
        [Output("containerGroupProfiles")]
        public Output<ImmutableArray<Outputs.ContainerGroupProfileStubResponse>> ContainerGroupProfiles { get; private set; } = null!;

        /// <summary>
        /// The elastic profile.
        /// </summary>
        [Output("elasticProfile")]
        public Output<Outputs.ElasticProfileResponse?> ElasticProfile { get; private set; } = null!;

        /// <summary>
        /// The identity of the NGroup, if configured.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.NGroupIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        /// </summary>
        [Output("placementProfile")]
        public Output<Outputs.PlacementProfileResponse?> PlacementProfile { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Used by the customer to specify the way to update the Container Groups in NGroup.
        /// </summary>
        [Output("updateProfile")]
        public Output<Outputs.UpdateProfileResponse?> UpdateProfile { get; private set; } = null!;

        /// <summary>
        /// The zones for the container group.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a NGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NGroup(string name, NGroupArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerinstance/v20241101preview:NGroup", name, args ?? new NGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerinstance/v20241101preview:NGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerinstance/v20240901preview:NGroup" },
                    new global::Pulumi.Alias { Type = "azure-native:containerinstance:NGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NGroup(name, id, options);
        }
    }

    public sealed class NGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("containerGroupProfiles")]
        private InputList<Inputs.ContainerGroupProfileStubArgs>? _containerGroupProfiles;

        /// <summary>
        /// The Container Group Profiles that could be used in the NGroups resource.
        /// </summary>
        public InputList<Inputs.ContainerGroupProfileStubArgs> ContainerGroupProfiles
        {
            get => _containerGroupProfiles ?? (_containerGroupProfiles = new InputList<Inputs.ContainerGroupProfileStubArgs>());
            set => _containerGroupProfiles = value;
        }

        /// <summary>
        /// The elastic profile.
        /// </summary>
        [Input("elasticProfile")]
        public Input<Inputs.ElasticProfileArgs>? ElasticProfile { get; set; }

        /// <summary>
        /// The identity of the NGroup, if configured.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.NGroupIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The NGroups name.
        /// </summary>
        [Input("ngroupsName")]
        public Input<string>? NgroupsName { get; set; }

        /// <summary>
        /// Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        /// </summary>
        [Input("placementProfile")]
        public Input<Inputs.PlacementProfileArgs>? PlacementProfile { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Used by the customer to specify the way to update the Container Groups in NGroup.
        /// </summary>
        [Input("updateProfile")]
        public Input<Inputs.UpdateProfileArgs>? UpdateProfile { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// The zones for the container group.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public NGroupArgs()
        {
        }
        public static new NGroupArgs Empty => new NGroupArgs();
    }
}
