// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance.V20230201Preview
{
    public static class GetContainerGroup
    {
        /// <summary>
        /// Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
        /// </summary>
        public static Task<GetContainerGroupResult> InvokeAsync(GetContainerGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerGroupResult>("azure-native:containerinstance/v20230201preview:getContainerGroup", args ?? new GetContainerGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
        /// </summary>
        public static Output<GetContainerGroupResult> Invoke(GetContainerGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerGroupResult>("azure-native:containerinstance/v20230201preview:getContainerGroup", args ?? new GetContainerGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container group.
        /// </summary>
        [Input("containerGroupName", required: true)]
        public string ContainerGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetContainerGroupArgs()
        {
        }
        public static new GetContainerGroupArgs Empty => new GetContainerGroupArgs();
    }

    public sealed class GetContainerGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container group.
        /// </summary>
        [Input("containerGroupName", required: true)]
        public Input<string> ContainerGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetContainerGroupInvokeArgs()
        {
        }
        public static new GetContainerGroupInvokeArgs Empty => new GetContainerGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerGroupResult
    {
        /// <summary>
        /// The containers within the container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerResponse> Containers;
        /// <summary>
        /// The diagnostic information for a container group.
        /// </summary>
        public readonly Outputs.ContainerGroupDiagnosticsResponse? Diagnostics;
        /// <summary>
        /// The DNS config information for a container group.
        /// </summary>
        public readonly Outputs.DnsConfigurationResponse? DnsConfig;
        /// <summary>
        /// The encryption properties for a container group.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponse? EncryptionProperties;
        /// <summary>
        /// extensions used by virtual kubelet
        /// </summary>
        public readonly ImmutableArray<Outputs.DeploymentExtensionSpecResponse> Extensions;
        /// <summary>
        /// The resource id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the container group, if configured.
        /// </summary>
        public readonly Outputs.ContainerGroupIdentityResponse? Identity;
        /// <summary>
        /// The image registry credentials by which the container group is created from.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageRegistryCredentialResponse> ImageRegistryCredentials;
        /// <summary>
        /// The init containers for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.InitContainerDefinitionResponse> InitContainers;
        /// <summary>
        /// The instance view of the container group. Only valid in response.
        /// </summary>
        public readonly Outputs.ContainerGroupPropertiesResponseInstanceView InstanceView;
        /// <summary>
        /// The IP address type of the container group.
        /// </summary>
        public readonly Outputs.IpAddressResponse? IpAddress;
        /// <summary>
        /// Flag indicating whether a custom value was provided for the provisioningTimeoutInSeconds property
        /// </summary>
        public readonly string IsCustomProvisioningTimeout;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The operating system type required by the containers in the container group.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The provisioning state of the container group. This only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Time in seconds in which a container group deployment would timeout and fail. The allowed maximum value is 1800 seconds. If value is not provided, property is given maximum value by default.
        /// </summary>
        public readonly int? ProvisioningTimeoutInSeconds;
        /// <summary>
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        public readonly string? RestartPolicy;
        /// <summary>
        /// The SKU for a container group.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// The subnet resource IDs for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupSubnetIdResponse> SubnetIds;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The list of volumes that can be mounted by containers in this container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeResponse> Volumes;
        /// <summary>
        /// The zones for the container group.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetContainerGroupResult(
            ImmutableArray<Outputs.ContainerResponse> containers,

            Outputs.ContainerGroupDiagnosticsResponse? diagnostics,

            Outputs.DnsConfigurationResponse? dnsConfig,

            Outputs.EncryptionPropertiesResponse? encryptionProperties,

            ImmutableArray<Outputs.DeploymentExtensionSpecResponse> extensions,

            string id,

            Outputs.ContainerGroupIdentityResponse? identity,

            ImmutableArray<Outputs.ImageRegistryCredentialResponse> imageRegistryCredentials,

            ImmutableArray<Outputs.InitContainerDefinitionResponse> initContainers,

            Outputs.ContainerGroupPropertiesResponseInstanceView instanceView,

            Outputs.IpAddressResponse? ipAddress,

            string isCustomProvisioningTimeout,

            string? location,

            string name,

            string osType,

            string provisioningState,

            int? provisioningTimeoutInSeconds,

            string? restartPolicy,

            string? sku,

            ImmutableArray<Outputs.ContainerGroupSubnetIdResponse> subnetIds,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.VolumeResponse> volumes,

            ImmutableArray<string> zones)
        {
            Containers = containers;
            Diagnostics = diagnostics;
            DnsConfig = dnsConfig;
            EncryptionProperties = encryptionProperties;
            Extensions = extensions;
            Id = id;
            Identity = identity;
            ImageRegistryCredentials = imageRegistryCredentials;
            InitContainers = initContainers;
            InstanceView = instanceView;
            IpAddress = ipAddress;
            IsCustomProvisioningTimeout = isCustomProvisioningTimeout;
            Location = location;
            Name = name;
            OsType = osType;
            ProvisioningState = provisioningState;
            ProvisioningTimeoutInSeconds = provisioningTimeoutInSeconds;
            RestartPolicy = restartPolicy;
            Sku = sku;
            SubnetIds = subnetIds;
            Tags = tags;
            Type = type;
            Volumes = volumes;
            Zones = zones;
        }
    }
}
