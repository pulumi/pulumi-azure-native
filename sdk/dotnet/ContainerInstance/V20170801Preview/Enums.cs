// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ContainerInstance.V20170801Preview
{
    /// <summary>
    /// Specifies if the IP is exposed to the public internet.
    /// </summary>
    [EnumType]
    public readonly struct ContainerGroupIpAddressType : IEquatable<ContainerGroupIpAddressType>
    {
        private readonly string _value;

        private ContainerGroupIpAddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerGroupIpAddressType Public { get; } = new ContainerGroupIpAddressType("Public");

        public static bool operator ==(ContainerGroupIpAddressType left, ContainerGroupIpAddressType right) => left.Equals(right);
        public static bool operator !=(ContainerGroupIpAddressType left, ContainerGroupIpAddressType right) => !left.Equals(right);

        public static explicit operator string(ContainerGroupIpAddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerGroupIpAddressType other && Equals(other);
        public bool Equals(ContainerGroupIpAddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol associated with the port.
    /// </summary>
    [EnumType]
    public readonly struct ContainerGroupNetworkProtocol : IEquatable<ContainerGroupNetworkProtocol>
    {
        private readonly string _value;

        private ContainerGroupNetworkProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerGroupNetworkProtocol TCP { get; } = new ContainerGroupNetworkProtocol("TCP");
        public static ContainerGroupNetworkProtocol UDP { get; } = new ContainerGroupNetworkProtocol("UDP");

        public static bool operator ==(ContainerGroupNetworkProtocol left, ContainerGroupNetworkProtocol right) => left.Equals(right);
        public static bool operator !=(ContainerGroupNetworkProtocol left, ContainerGroupNetworkProtocol right) => !left.Equals(right);

        public static explicit operator string(ContainerGroupNetworkProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerGroupNetworkProtocol other && Equals(other);
        public bool Equals(ContainerGroupNetworkProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Restart policy for all containers within the container group. Currently the only available option is `always`.
    /// </summary>
    [EnumType]
    public readonly struct ContainerRestartPolicy : IEquatable<ContainerRestartPolicy>
    {
        private readonly string _value;

        private ContainerRestartPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerRestartPolicy Always { get; } = new ContainerRestartPolicy("always");

        public static bool operator ==(ContainerRestartPolicy left, ContainerRestartPolicy right) => left.Equals(right);
        public static bool operator !=(ContainerRestartPolicy left, ContainerRestartPolicy right) => !left.Equals(right);

        public static explicit operator string(ContainerRestartPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerRestartPolicy other && Equals(other);
        public bool Equals(ContainerRestartPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operating system type required by the containers in the container group.
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystemTypes : IEquatable<OperatingSystemTypes>
    {
        private readonly string _value;

        private OperatingSystemTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystemTypes Windows { get; } = new OperatingSystemTypes("Windows");
        public static OperatingSystemTypes Linux { get; } = new OperatingSystemTypes("Linux");

        public static bool operator ==(OperatingSystemTypes left, OperatingSystemTypes right) => left.Equals(right);
        public static bool operator !=(OperatingSystemTypes left, OperatingSystemTypes right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemTypes other && Equals(other);
        public bool Equals(OperatingSystemTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
