// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ContainerInstance.Inputs
{

    /// <summary>
    /// The container group properties
    /// </summary>
    public sealed class ContainerGroupPropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("containers", required: true)]
        private InputList<Inputs.ContainerArgs>? _containers;

        /// <summary>
        /// The containers within the container group.
        /// </summary>
        public InputList<Inputs.ContainerArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ContainerArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// The diagnostic information for a container group.
        /// </summary>
        [Input("diagnostics")]
        public Input<Inputs.ContainerGroupDiagnosticsArgs>? Diagnostics { get; set; }

        /// <summary>
        /// The DNS config information for a container group.
        /// </summary>
        [Input("dnsConfig")]
        public Input<Inputs.DnsConfigurationArgs>? DnsConfig { get; set; }

        /// <summary>
        /// The encryption properties for a container group.
        /// </summary>
        [Input("encryptionProperties")]
        public Input<Inputs.EncryptionPropertiesArgs>? EncryptionProperties { get; set; }

        [Input("imageRegistryCredentials")]
        private InputList<Inputs.ImageRegistryCredentialArgs>? _imageRegistryCredentials;

        /// <summary>
        /// The image registry credentials by which the container group is created from.
        /// </summary>
        public InputList<Inputs.ImageRegistryCredentialArgs> ImageRegistryCredentials
        {
            get => _imageRegistryCredentials ?? (_imageRegistryCredentials = new InputList<Inputs.ImageRegistryCredentialArgs>());
            set => _imageRegistryCredentials = value;
        }

        [Input("initContainers")]
        private InputList<Inputs.InitContainerDefinitionArgs>? _initContainers;

        /// <summary>
        /// The init containers for a container group.
        /// </summary>
        public InputList<Inputs.InitContainerDefinitionArgs> InitContainers
        {
            get => _initContainers ?? (_initContainers = new InputList<Inputs.InitContainerDefinitionArgs>());
            set => _initContainers = value;
        }

        /// <summary>
        /// The IP address type of the container group.
        /// </summary>
        [Input("ipAddress")]
        public Input<Inputs.IpAddressArgs>? IpAddress { get; set; }

        /// <summary>
        /// The network profile information for a container group.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.ContainerGroupNetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// The operating system type required by the containers in the container group.
        /// </summary>
        [Input("osType", required: true)]
        public Input<string> OsType { get; set; } = null!;

        /// <summary>
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        [Input("restartPolicy")]
        public Input<string>? RestartPolicy { get; set; }

        /// <summary>
        /// The SKU for a container group.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("volumes")]
        private InputList<Inputs.VolumeArgs>? _volumes;

        /// <summary>
        /// The list of volumes that can be mounted by containers in this container group.
        /// </summary>
        public InputList<Inputs.VolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeArgs>());
            set => _volumes = value;
        }

        public ContainerGroupPropertiesArgs()
        {
        }
    }
}
