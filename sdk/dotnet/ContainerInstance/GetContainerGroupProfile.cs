// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerInstance
{
    public static class GetContainerGroupProfile
    {
        /// <summary>
        /// Gets the properties of the specified container group profile in the specified subscription and resource group. The operation returns the properties of container group profile including containers, image registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
        /// Azure REST API version: 2024-05-01-preview.
        /// </summary>
        public static Task<GetContainerGroupProfileResult> InvokeAsync(GetContainerGroupProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerGroupProfileResult>("azure-native:containerinstance:getContainerGroupProfile", args ?? new GetContainerGroupProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified container group profile in the specified subscription and resource group. The operation returns the properties of container group profile including containers, image registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
        /// Azure REST API version: 2024-05-01-preview.
        /// </summary>
        public static Output<GetContainerGroupProfileResult> Invoke(GetContainerGroupProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerGroupProfileResult>("azure-native:containerinstance:getContainerGroupProfile", args ?? new GetContainerGroupProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerGroupProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container group profile.
        /// </summary>
        [Input("containerGroupProfileName", required: true)]
        public string ContainerGroupProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetContainerGroupProfileArgs()
        {
        }
        public static new GetContainerGroupProfileArgs Empty => new GetContainerGroupProfileArgs();
    }

    public sealed class GetContainerGroupProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container group profile.
        /// </summary>
        [Input("containerGroupProfileName", required: true)]
        public Input<string> ContainerGroupProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetContainerGroupProfileInvokeArgs()
        {
        }
        public static new GetContainerGroupProfileInvokeArgs Empty => new GetContainerGroupProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerGroupProfileResult
    {
        /// <summary>
        /// The properties for confidential container group
        /// </summary>
        public readonly Outputs.ConfidentialComputePropertiesResponse? ConfidentialComputeProperties;
        /// <summary>
        /// The containers within the container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerResponse> Containers;
        /// <summary>
        /// The diagnostic information for a container group.
        /// </summary>
        public readonly Outputs.ContainerGroupDiagnosticsResponse? Diagnostics;
        /// <summary>
        /// The encryption properties for a container group.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponse? EncryptionProperties;
        /// <summary>
        /// extensions used by virtual kubelet
        /// </summary>
        public readonly ImmutableArray<Outputs.DeploymentExtensionSpecResponse> Extensions;
        /// <summary>
        /// The resource id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The image registry credentials by which the container group is created from.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageRegistryCredentialResponse> ImageRegistryCredentials;
        /// <summary>
        /// The init containers for a container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.InitContainerDefinitionResponse> InitContainers;
        /// <summary>
        /// The IP address type of the container group.
        /// </summary>
        public readonly Outputs.IpAddressResponse? IpAddress;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The operating system type required by the containers in the container group.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The priority of the container group.
        /// </summary>
        public readonly string? Priority;
        /// <summary>
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// </summary>
        public readonly string? RestartPolicy;
        /// <summary>
        /// The container group profile current revision number. This only appears in the response.
        /// </summary>
        public readonly int Revision;
        /// <summary>
        /// The SKU for a container group.
        /// </summary>
        public readonly string? Sku;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The list of volumes that can be mounted by containers in this container group.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeResponse> Volumes;
        /// <summary>
        /// The zones for the container group.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetContainerGroupProfileResult(
            Outputs.ConfidentialComputePropertiesResponse? confidentialComputeProperties,

            ImmutableArray<Outputs.ContainerResponse> containers,

            Outputs.ContainerGroupDiagnosticsResponse? diagnostics,

            Outputs.EncryptionPropertiesResponse? encryptionProperties,

            ImmutableArray<Outputs.DeploymentExtensionSpecResponse> extensions,

            string id,

            ImmutableArray<Outputs.ImageRegistryCredentialResponse> imageRegistryCredentials,

            ImmutableArray<Outputs.InitContainerDefinitionResponse> initContainers,

            Outputs.IpAddressResponse? ipAddress,

            string? location,

            string name,

            string osType,

            string? priority,

            string? restartPolicy,

            int revision,

            string? sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.VolumeResponse> volumes,

            ImmutableArray<string> zones)
        {
            ConfidentialComputeProperties = confidentialComputeProperties;
            Containers = containers;
            Diagnostics = diagnostics;
            EncryptionProperties = encryptionProperties;
            Extensions = extensions;
            Id = id;
            ImageRegistryCredentials = imageRegistryCredentials;
            InitContainers = initContainers;
            IpAddress = ipAddress;
            Location = location;
            Name = name;
            OsType = osType;
            Priority = priority;
            RestartPolicy = restartPolicy;
            Revision = revision;
            Sku = sku;
            Tags = tags;
            Type = type;
            Volumes = volumes;
            Zones = zones;
        }
    }
}
