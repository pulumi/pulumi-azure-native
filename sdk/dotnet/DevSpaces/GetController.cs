// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevSpaces
{
    public static class GetController
    {
        /// <summary>
        /// 
        /// API Version: 2019-04-01.
        /// </summary>
        public static Task<GetControllerResult> InvokeAsync(GetControllerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetControllerResult>("azure-native:devspaces:getController", args ?? new GetControllerArgs(), options.WithDefaults());

        /// <summary>
        /// 
        /// API Version: 2019-04-01.
        /// </summary>
        public static Output<GetControllerResult> Invoke(GetControllerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetControllerResult>("azure-native:devspaces:getController", args ?? new GetControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetControllerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetControllerArgs()
        {
        }
        public static new GetControllerArgs Empty => new GetControllerArgs();
    }

    public sealed class GetControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetControllerInvokeArgs()
        {
        }
        public static new GetControllerInvokeArgs Empty => new GetControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetControllerResult
    {
        /// <summary>
        /// DNS name for accessing DataPlane services
        /// </summary>
        public readonly string DataPlaneFqdn;
        /// <summary>
        /// DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
        /// </summary>
        public readonly string HostSuffix;
        /// <summary>
        /// Fully qualified resource Id for the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Region where the Azure resource is located.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Azure Dev Spaces Controller.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Model representing SKU for Azure Dev Spaces Controller.
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// Tags for the Azure resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// DNS of the target container host's API server
        /// </summary>
        public readonly string TargetContainerHostApiServerFqdn;
        /// <summary>
        /// Resource ID of the target container host
        /// </summary>
        public readonly string TargetContainerHostResourceId;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetControllerResult(
            string dataPlaneFqdn,

            string hostSuffix,

            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.SkuResponse sku,

            ImmutableDictionary<string, string>? tags,

            string targetContainerHostApiServerFqdn,

            string targetContainerHostResourceId,

            string type)
        {
            DataPlaneFqdn = dataPlaneFqdn;
            HostSuffix = hostSuffix;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Sku = sku;
            Tags = tags;
            TargetContainerHostApiServerFqdn = targetContainerHostApiServerFqdn;
            TargetContainerHostResourceId = targetContainerHostResourceId;
            Type = type;
        }
    }
}
