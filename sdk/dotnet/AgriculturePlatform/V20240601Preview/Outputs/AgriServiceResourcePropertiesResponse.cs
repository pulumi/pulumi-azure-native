// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AgriculturePlatform.V20240601Preview.Outputs
{

    /// <summary>
    /// Details of the Agriculture AgriDataManager.
    /// </summary>
    [OutputType]
    public sealed class AgriServiceResourcePropertiesResponse
    {
        /// <summary>
        /// Config of the AgriService instance.
        /// </summary>
        public readonly Outputs.AgriServiceConfigResponse? Config;
        /// <summary>
        /// Data connector credentials of AgriService instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataConnectorCredentialMapResponse> DataConnectorCredentials;
        /// <summary>
        /// AgriService installed solutions.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstalledSolutionMapResponse> InstalledSolutions;
        /// <summary>
        /// Managed On Behalf Of Configuration.
        /// </summary>
        public readonly Outputs.ManagedOnBehalfOfConfigurationResponse ManagedOnBehalfOfConfiguration;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;

        [OutputConstructor]
        private AgriServiceResourcePropertiesResponse(
            Outputs.AgriServiceConfigResponse? config,

            ImmutableArray<Outputs.DataConnectorCredentialMapResponse> dataConnectorCredentials,

            ImmutableArray<Outputs.InstalledSolutionMapResponse> installedSolutions,

            Outputs.ManagedOnBehalfOfConfigurationResponse managedOnBehalfOfConfiguration,

            string provisioningState)
        {
            Config = config;
            DataConnectorCredentials = dataConnectorCredentials;
            InstalledSolutions = installedSolutions;
            ManagedOnBehalfOfConfiguration = managedOnBehalfOfConfiguration;
            ProvisioningState = provisioningState;
        }
    }
}
