// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Advisor
{
    /// <summary>
    /// The Advisor assessment result data structure.
    /// Azure REST API version: 2023-09-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:advisor:Assessment")]
    public partial class Assessment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Assessment Id.
        /// </summary>
        [Output("assessmentId")]
        public Output<string> AssessmentId { get; private set; } = null!;

        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Assessment Type Description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Assessment Type Locale.
        /// </summary>
        [Output("locale")]
        public Output<string?> Locale { get; private set; } = null!;

        /// <summary>
        /// Assessment Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Assessment Score.
        /// </summary>
        [Output("score")]
        public Output<int> Score { get; private set; } = null!;

        /// <summary>
        /// Assessment State.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource Type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Assessment Type Id.
        /// </summary>
        [Output("typeId")]
        public Output<string?> TypeId { get; private set; } = null!;

        /// <summary>
        /// Assessment Type Version.
        /// </summary>
        [Output("typeVersion")]
        public Output<string> TypeVersion { get; private set; } = null!;

        /// <summary>
        /// Workload Id.
        /// </summary>
        [Output("workloadId")]
        public Output<string?> WorkloadId { get; private set; } = null!;

        /// <summary>
        /// Workload Name.
        /// </summary>
        [Output("workloadName")]
        public Output<string> WorkloadName { get; private set; } = null!;


        /// <summary>
        /// Create a Assessment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Assessment(string name, AssessmentArgs? args = null, CustomResourceOptions? options = null)
            : base("azure-native:advisor:Assessment", name, args ?? new AssessmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Assessment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:advisor:Assessment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:advisor/v20230901preview:Assessment" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Assessment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Assessment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Assessment(name, id, options);
        }
    }

    public sealed class AssessmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advisor assessment name.
        /// </summary>
        [Input("assessmentName")]
        public Input<string>? AssessmentName { get; set; }

        /// <summary>
        /// Assessment Type Locale.
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        /// <summary>
        /// Assessment Type Id.
        /// </summary>
        [Input("typeId")]
        public Input<string>? TypeId { get; set; }

        /// <summary>
        /// Workload Id.
        /// </summary>
        [Input("workloadId")]
        public Input<string>? WorkloadId { get; set; }

        public AssessmentArgs()
        {
        }
        public static new AssessmentArgs Empty => new AssessmentArgs();
    }
}
