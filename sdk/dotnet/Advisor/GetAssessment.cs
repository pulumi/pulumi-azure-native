// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Advisor
{
    public static class GetAssessment
    {
        /// <summary>
        /// Get a existing Azure Advisor assessment.
        /// 
        /// Uses Azure REST API version 2023-09-01-preview.
        /// 
        /// Other available API versions: 2024-11-18-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native advisor [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetAssessmentResult> InvokeAsync(GetAssessmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAssessmentResult>("azure-native:advisor:getAssessment", args ?? new GetAssessmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get a existing Azure Advisor assessment.
        /// 
        /// Uses Azure REST API version 2023-09-01-preview.
        /// 
        /// Other available API versions: 2024-11-18-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native advisor [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetAssessmentResult> Invoke(GetAssessmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAssessmentResult>("azure-native:advisor:getAssessment", args ?? new GetAssessmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a existing Azure Advisor assessment.
        /// 
        /// Uses Azure REST API version 2023-09-01-preview.
        /// 
        /// Other available API versions: 2024-11-18-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native advisor [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetAssessmentResult> Invoke(GetAssessmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAssessmentResult>("azure-native:advisor:getAssessment", args ?? new GetAssessmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssessmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Advisor assessment name.
        /// </summary>
        [Input("assessmentName", required: true)]
        public string AssessmentName { get; set; } = null!;

        public GetAssessmentArgs()
        {
        }
        public static new GetAssessmentArgs Empty => new GetAssessmentArgs();
    }

    public sealed class GetAssessmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Advisor assessment name.
        /// </summary>
        [Input("assessmentName", required: true)]
        public Input<string> AssessmentName { get; set; } = null!;

        public GetAssessmentInvokeArgs()
        {
        }
        public static new GetAssessmentInvokeArgs Empty => new GetAssessmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetAssessmentResult
    {
        /// <summary>
        /// Assessment Id.
        /// </summary>
        public readonly string AssessmentId;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Assessment Type Description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Assessment Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Assessment Type Locale.
        /// </summary>
        public readonly string? Locale;
        /// <summary>
        /// Assessment Name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Assessment Score.
        /// </summary>
        public readonly int Score;
        /// <summary>
        /// Assessment State.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource Type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Assessment Type Id.
        /// </summary>
        public readonly string? TypeId;
        /// <summary>
        /// Assessment Type Version.
        /// </summary>
        public readonly string TypeVersion;
        /// <summary>
        /// Workload Id.
        /// </summary>
        public readonly string? WorkloadId;
        /// <summary>
        /// Workload Name.
        /// </summary>
        public readonly string WorkloadName;

        [OutputConstructor]
        private GetAssessmentResult(
            string assessmentId,

            string azureApiVersion,

            string description,

            string id,

            string? locale,

            string name,

            int score,

            string state,

            Outputs.SystemDataResponse systemData,

            string type,

            string? typeId,

            string typeVersion,

            string? workloadId,

            string workloadName)
        {
            AssessmentId = assessmentId;
            AzureApiVersion = azureApiVersion;
            Description = description;
            Id = id;
            Locale = locale;
            Name = name;
            Score = score;
            State = state;
            SystemData = systemData;
            Type = type;
            TypeId = typeId;
            TypeVersion = typeVersion;
            WorkloadId = workloadId;
            WorkloadName = workloadName;
        }
    }
}
