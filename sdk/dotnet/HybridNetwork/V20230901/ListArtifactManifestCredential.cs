// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridNetwork.V20230901
{
    public static class ListArtifactManifestCredential
    {
        /// <summary>
        /// List credential for publishing artifacts defined in artifact manifest.
        /// </summary>
        public static Task<ListArtifactManifestCredentialResult> InvokeAsync(ListArtifactManifestCredentialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListArtifactManifestCredentialResult>("azure-native:hybridnetwork/v20230901:listArtifactManifestCredential", args ?? new ListArtifactManifestCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// List credential for publishing artifacts defined in artifact manifest.
        /// </summary>
        public static Output<ListArtifactManifestCredentialResult> Invoke(ListArtifactManifestCredentialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListArtifactManifestCredentialResult>("azure-native:hybridnetwork/v20230901:listArtifactManifestCredential", args ?? new ListArtifactManifestCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListArtifactManifestCredentialArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the artifact manifest.
        /// </summary>
        [Input("artifactManifestName", required: true)]
        public string ArtifactManifestName { get; set; } = null!;

        /// <summary>
        /// The name of the artifact store.
        /// </summary>
        [Input("artifactStoreName", required: true)]
        public string ArtifactStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the publisher.
        /// </summary>
        [Input("publisherName", required: true)]
        public string PublisherName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public ListArtifactManifestCredentialArgs()
        {
        }
        public static new ListArtifactManifestCredentialArgs Empty => new ListArtifactManifestCredentialArgs();
    }

    public sealed class ListArtifactManifestCredentialInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the artifact manifest.
        /// </summary>
        [Input("artifactManifestName", required: true)]
        public Input<string> ArtifactManifestName { get; set; } = null!;

        /// <summary>
        /// The name of the artifact store.
        /// </summary>
        [Input("artifactStoreName", required: true)]
        public Input<string> ArtifactStoreName { get; set; } = null!;

        /// <summary>
        /// The name of the publisher.
        /// </summary>
        [Input("publisherName", required: true)]
        public Input<string> PublisherName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ListArtifactManifestCredentialInvokeArgs()
        {
        }
        public static new ListArtifactManifestCredentialInvokeArgs Empty => new ListArtifactManifestCredentialInvokeArgs();
    }


    [OutputType]
    public sealed class ListArtifactManifestCredentialResult
    {
        /// <summary>
        /// The credential type.
        /// </summary>
        public readonly string CredentialType;

        [OutputConstructor]
        private ListArtifactManifestCredentialResult(string credentialType)
        {
            CredentialType = credentialType;
        }
    }
}
