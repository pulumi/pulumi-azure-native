// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.HybridNetwork.V20200101Preview
{
    public static class GetNetworkFunction
    {
        public static Task<GetNetworkFunctionResult> InvokeAsync(GetNetworkFunctionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkFunctionResult>("azure-nextgen:hybridnetwork/v20200101preview:getNetworkFunction", args ?? new GetNetworkFunctionArgs(), options.WithVersion());
    }


    public sealed class GetNetworkFunctionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network function resource.
        /// </summary>
        [Input("networkFunctionName", required: true)]
        public string NetworkFunctionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkFunctionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkFunctionResult
    {
        /// <summary>
        /// The reference to the device resource.
        /// </summary>
        public readonly Outputs.SubResourceResponse? Device;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The resource URI of the managed application.
        /// </summary>
        public readonly Outputs.SubResourceResponse ManagedApplication;
        /// <summary>
        /// The parameters for the managed application.
        /// </summary>
        public readonly object? ManagedApplicationParameters;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network function configurations from the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkFunctionUserConfigurationResponse> NetworkFunctionUserConfigurations;
        /// <summary>
        /// The provisioning state of the network function resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The service key for the network function resource.
        /// </summary>
        public readonly string ServiceKey;
        /// <summary>
        /// The sku name for the network function.
        /// </summary>
        public readonly string? SkuName;
        /// <summary>
        /// The sku type for the network function.
        /// </summary>
        public readonly string SkuType;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The vendor name for the network function.
        /// </summary>
        public readonly string? VendorName;
        /// <summary>
        /// The vendor provisioning state for the network function resource.
        /// </summary>
        public readonly string VendorProvisioningState;

        [OutputConstructor]
        private GetNetworkFunctionResult(
            Outputs.SubResourceResponse? device,

            string? etag,

            string location,

            Outputs.SubResourceResponse managedApplication,

            object? managedApplicationParameters,

            string name,

            ImmutableArray<Outputs.NetworkFunctionUserConfigurationResponse> networkFunctionUserConfigurations,

            string provisioningState,

            string serviceKey,

            string? skuName,

            string skuType,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? vendorName,

            string vendorProvisioningState)
        {
            Device = device;
            Etag = etag;
            Location = location;
            ManagedApplication = managedApplication;
            ManagedApplicationParameters = managedApplicationParameters;
            Name = name;
            NetworkFunctionUserConfigurations = networkFunctionUserConfigurations;
            ProvisioningState = provisioningState;
            ServiceKey = serviceKey;
            SkuName = skuName;
            SkuType = skuType;
            Tags = tags;
            Type = type;
            VendorName = vendorName;
            VendorProvisioningState = vendorProvisioningState;
        }
    }
}
