// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridNetwork.V20240415.Outputs
{

    /// <summary>
    /// NetworkFunction with secrets.
    /// </summary>
    [OutputType]
    public sealed class NetworkFunctionValueWithSecretsResponse
    {
        /// <summary>
        /// Indicates if software updates are allowed during deployment.
        /// </summary>
        public readonly bool? AllowSoftwareUpdate;
        /// <summary>
        /// The secret type which indicates if secret or not.
        /// Expected value is 'Secret'.
        /// </summary>
        public readonly string ConfigurationType;
        /// <summary>
        /// The network function definition group name for the network function.
        /// </summary>
        public readonly string? NetworkFunctionDefinitionGroupName;
        /// <summary>
        /// The location of the network function definition offering.
        /// </summary>
        public readonly string? NetworkFunctionDefinitionOfferingLocation;
        /// <summary>
        /// The network function definition version for the network function.
        /// </summary>
        public readonly string? NetworkFunctionDefinitionVersion;
        /// <summary>
        /// The network function definition version resource reference.
        /// </summary>
        public readonly Union<Outputs.OpenDeploymentResourceReferenceResponse, Outputs.SecretDeploymentResourceReferenceResponse>? NetworkFunctionDefinitionVersionResourceReference;
        /// <summary>
        /// The nfviId for the network function.
        /// </summary>
        public readonly string? NfviId;
        /// <summary>
        /// The nfvi type for the network function.
        /// </summary>
        public readonly string? NfviType;
        /// <summary>
        /// The provisioning state of the network function resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The publisher name for the network function.
        /// </summary>
        public readonly string? PublisherName;
        /// <summary>
        /// The scope of the publisher.
        /// </summary>
        public readonly string? PublisherScope;
        /// <summary>
        /// The role configuration override values from the user.
        /// </summary>
        public readonly ImmutableArray<string> RoleOverrideValues;

        [OutputConstructor]
        private NetworkFunctionValueWithSecretsResponse(
            bool? allowSoftwareUpdate,

            string configurationType,

            string? networkFunctionDefinitionGroupName,

            string? networkFunctionDefinitionOfferingLocation,

            string? networkFunctionDefinitionVersion,

            Union<Outputs.OpenDeploymentResourceReferenceResponse, Outputs.SecretDeploymentResourceReferenceResponse>? networkFunctionDefinitionVersionResourceReference,

            string? nfviId,

            string? nfviType,

            string provisioningState,

            string? publisherName,

            string? publisherScope,

            ImmutableArray<string> roleOverrideValues)
        {
            AllowSoftwareUpdate = allowSoftwareUpdate;
            ConfigurationType = configurationType;
            NetworkFunctionDefinitionGroupName = networkFunctionDefinitionGroupName;
            NetworkFunctionDefinitionOfferingLocation = networkFunctionDefinitionOfferingLocation;
            NetworkFunctionDefinitionVersion = networkFunctionDefinitionVersion;
            NetworkFunctionDefinitionVersionResourceReference = networkFunctionDefinitionVersionResourceReference;
            NfviId = nfviId;
            NfviType = nfviType;
            ProvisioningState = provisioningState;
            PublisherName = publisherName;
            PublisherScope = publisherScope;
            RoleOverrideValues = roleOverrideValues;
        }
    }
}
