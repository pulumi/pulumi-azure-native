// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HybridNetwork
{
    /// <summary>
    /// The application enablement.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationEnablement : IEquatable<ApplicationEnablement>
    {
        private readonly string _value;

        private ApplicationEnablement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationEnablement Unknown { get; } = new ApplicationEnablement("Unknown");
        public static ApplicationEnablement Enabled { get; } = new ApplicationEnablement("Enabled");
        public static ApplicationEnablement Disabled { get; } = new ApplicationEnablement("Disabled");

        public static bool operator ==(ApplicationEnablement left, ApplicationEnablement right) => left.Equals(right);
        public static bool operator !=(ApplicationEnablement left, ApplicationEnablement right) => !left.Equals(right);

        public static explicit operator string(ApplicationEnablement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationEnablement other && Equals(other);
        public bool Equals(ApplicationEnablement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The replication strategy.
    /// </summary>
    [EnumType]
    public readonly struct ArtifactReplicationStrategy : IEquatable<ArtifactReplicationStrategy>
    {
        private readonly string _value;

        private ArtifactReplicationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArtifactReplicationStrategy Unknown { get; } = new ArtifactReplicationStrategy("Unknown");
        public static ArtifactReplicationStrategy SingleReplication { get; } = new ArtifactReplicationStrategy("SingleReplication");

        public static bool operator ==(ArtifactReplicationStrategy left, ArtifactReplicationStrategy right) => left.Equals(right);
        public static bool operator !=(ArtifactReplicationStrategy left, ArtifactReplicationStrategy right) => !left.Equals(right);

        public static explicit operator string(ArtifactReplicationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArtifactReplicationStrategy other && Equals(other);
        public bool Equals(ArtifactReplicationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The artifact store type.
    /// </summary>
    [EnumType]
    public readonly struct ArtifactStoreType : IEquatable<ArtifactStoreType>
    {
        private readonly string _value;

        private ArtifactStoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArtifactStoreType Unknown { get; } = new ArtifactStoreType("Unknown");
        public static ArtifactStoreType AzureContainerRegistry { get; } = new ArtifactStoreType("AzureContainerRegistry");
        public static ArtifactStoreType AzureStorageAccount { get; } = new ArtifactStoreType("AzureStorageAccount");

        public static bool operator ==(ArtifactStoreType left, ArtifactStoreType right) => left.Equals(right);
        public static bool operator !=(ArtifactStoreType left, ArtifactStoreType right) => !left.Equals(right);

        public static explicit operator string(ArtifactStoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArtifactStoreType other && Equals(other);
        public bool Equals(ArtifactStoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The artifact type.
    /// </summary>
    [EnumType]
    public readonly struct ArtifactType : IEquatable<ArtifactType>
    {
        private readonly string _value;

        private ArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArtifactType Unknown { get; } = new ArtifactType("Unknown");
        public static ArtifactType OCIArtifact { get; } = new ArtifactType("OCIArtifact");
        public static ArtifactType VhdImageFile { get; } = new ArtifactType("VhdImageFile");
        public static ArtifactType ArmTemplate { get; } = new ArtifactType("ArmTemplate");
        public static ArtifactType ImageFile { get; } = new ArtifactType("ImageFile");

        public static bool operator ==(ArtifactType left, ArtifactType right) => left.Equals(right);
        public static bool operator !=(ArtifactType left, ArtifactType right) => !left.Equals(right);

        public static explicit operator string(ArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArtifactType other && Equals(other);
        public bool Equals(ArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The artifact type.
    /// </summary>
    [EnumType]
    public readonly struct AzureArcKubernetesArtifactType : IEquatable<AzureArcKubernetesArtifactType>
    {
        private readonly string _value;

        private AzureArcKubernetesArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureArcKubernetesArtifactType Unknown { get; } = new AzureArcKubernetesArtifactType("Unknown");
        public static AzureArcKubernetesArtifactType HelmPackage { get; } = new AzureArcKubernetesArtifactType("HelmPackage");

        public static bool operator ==(AzureArcKubernetesArtifactType left, AzureArcKubernetesArtifactType right) => left.Equals(right);
        public static bool operator !=(AzureArcKubernetesArtifactType left, AzureArcKubernetesArtifactType right) => !left.Equals(right);

        public static explicit operator string(AzureArcKubernetesArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureArcKubernetesArtifactType other && Equals(other);
        public bool Equals(AzureArcKubernetesArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The artifact type.
    /// </summary>
    [EnumType]
    public readonly struct AzureCoreArtifactType : IEquatable<AzureCoreArtifactType>
    {
        private readonly string _value;

        private AzureCoreArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureCoreArtifactType Unknown { get; } = new AzureCoreArtifactType("Unknown");
        public static AzureCoreArtifactType VhdImageFile { get; } = new AzureCoreArtifactType("VhdImageFile");
        public static AzureCoreArtifactType ArmTemplate { get; } = new AzureCoreArtifactType("ArmTemplate");

        public static bool operator ==(AzureCoreArtifactType left, AzureCoreArtifactType right) => left.Equals(right);
        public static bool operator !=(AzureCoreArtifactType left, AzureCoreArtifactType right) => !left.Equals(right);

        public static explicit operator string(AzureCoreArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureCoreArtifactType other && Equals(other);
        public bool Equals(AzureCoreArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The artifact type.
    /// </summary>
    [EnumType]
    public readonly struct AzureOperatorNexusArtifactType : IEquatable<AzureOperatorNexusArtifactType>
    {
        private readonly string _value;

        private AzureOperatorNexusArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureOperatorNexusArtifactType Unknown { get; } = new AzureOperatorNexusArtifactType("Unknown");
        public static AzureOperatorNexusArtifactType ImageFile { get; } = new AzureOperatorNexusArtifactType("ImageFile");
        public static AzureOperatorNexusArtifactType ArmTemplate { get; } = new AzureOperatorNexusArtifactType("ArmTemplate");

        public static bool operator ==(AzureOperatorNexusArtifactType left, AzureOperatorNexusArtifactType right) => left.Equals(right);
        public static bool operator !=(AzureOperatorNexusArtifactType left, AzureOperatorNexusArtifactType right) => !left.Equals(right);

        public static explicit operator string(AzureOperatorNexusArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureOperatorNexusArtifactType other && Equals(other);
        public bool Equals(AzureOperatorNexusArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The value which indicates if configuration values are secrets
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationGroupValueConfigurationType : IEquatable<ConfigurationGroupValueConfigurationType>
    {
        private readonly string _value;

        private ConfigurationGroupValueConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationGroupValueConfigurationType Unknown { get; } = new ConfigurationGroupValueConfigurationType("Unknown");
        public static ConfigurationGroupValueConfigurationType Secret { get; } = new ConfigurationGroupValueConfigurationType("Secret");
        public static ConfigurationGroupValueConfigurationType Open { get; } = new ConfigurationGroupValueConfigurationType("Open");

        public static bool operator ==(ConfigurationGroupValueConfigurationType left, ConfigurationGroupValueConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationGroupValueConfigurationType left, ConfigurationGroupValueConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationGroupValueConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationGroupValueConfigurationType other && Equals(other);
        public bool Equals(ConfigurationGroupValueConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network function type.
    /// </summary>
    [EnumType]
    public readonly struct ContainerizedNetworkFunctionNFVIType : IEquatable<ContainerizedNetworkFunctionNFVIType>
    {
        private readonly string _value;

        private ContainerizedNetworkFunctionNFVIType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerizedNetworkFunctionNFVIType Unknown { get; } = new ContainerizedNetworkFunctionNFVIType("Unknown");
        public static ContainerizedNetworkFunctionNFVIType AzureArcKubernetes { get; } = new ContainerizedNetworkFunctionNFVIType("AzureArcKubernetes");

        public static bool operator ==(ContainerizedNetworkFunctionNFVIType left, ContainerizedNetworkFunctionNFVIType right) => left.Equals(right);
        public static bool operator !=(ContainerizedNetworkFunctionNFVIType left, ContainerizedNetworkFunctionNFVIType right) => !left.Equals(right);

        public static explicit operator string(ContainerizedNetworkFunctionNFVIType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerizedNetworkFunctionNFVIType other && Equals(other);
        public bool Equals(ContainerizedNetworkFunctionNFVIType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the device.
    /// </summary>
    [EnumType]
    public readonly struct DeviceType : IEquatable<DeviceType>
    {
        private readonly string _value;

        private DeviceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeviceType Unknown { get; } = new DeviceType("Unknown");
        public static DeviceType AzureStackEdge { get; } = new DeviceType("AzureStackEdge");

        public static bool operator ==(DeviceType left, DeviceType right) => left.Equals(right);
        public static bool operator !=(DeviceType left, DeviceType right) => !left.Equals(right);

        public static explicit operator string(DeviceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeviceType other && Equals(other);
        public bool Equals(DeviceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the virtual machine should be created.
    /// </summary>
    [EnumType]
    public readonly struct DiskCreateOptionTypes : IEquatable<DiskCreateOptionTypes>
    {
        private readonly string _value;

        private DiskCreateOptionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskCreateOptionTypes Unknown { get; } = new DiskCreateOptionTypes("Unknown");
        public static DiskCreateOptionTypes Empty { get; } = new DiskCreateOptionTypes("Empty");

        public static bool operator ==(DiskCreateOptionTypes left, DiskCreateOptionTypes right) => left.Equals(right);
        public static bool operator !=(DiskCreateOptionTypes left, DiskCreateOptionTypes right) => !left.Equals(right);

        public static explicit operator string(DiskCreateOptionTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskCreateOptionTypes other && Equals(other);
        public bool Equals(DiskCreateOptionTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP address allocation method.
    /// </summary>
    [EnumType]
    public readonly struct IPAllocationMethod : IEquatable<IPAllocationMethod>
    {
        private readonly string _value;

        private IPAllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAllocationMethod Unknown { get; } = new IPAllocationMethod("Unknown");
        public static IPAllocationMethod Static { get; } = new IPAllocationMethod("Static");
        public static IPAllocationMethod Dynamic { get; } = new IPAllocationMethod("Dynamic");

        public static bool operator ==(IPAllocationMethod left, IPAllocationMethod right) => left.Equals(right);
        public static bool operator !=(IPAllocationMethod left, IPAllocationMethod right) => !left.Equals(right);

        public static explicit operator string(IPAllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAllocationMethod other && Equals(other);
        public bool Equals(IPAllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP address version.
    /// </summary>
    [EnumType]
    public readonly struct IPVersion : IEquatable<IPVersion>
    {
        private readonly string _value;

        private IPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPVersion Unknown { get; } = new IPVersion("Unknown");
        public static IPVersion IPv4 { get; } = new IPVersion("IPv4");

        public static bool operator ==(IPVersion left, IPVersion right) => left.Equals(right);
        public static bool operator !=(IPVersion left, IPVersion right) => !left.Equals(right);

        public static explicit operator string(IPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPVersion other && Equals(other);
        public bool Equals(IPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The resource reference arm id type.
    /// </summary>
    [EnumType]
    public readonly struct IdType : IEquatable<IdType>
    {
        private readonly string _value;

        private IdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdType Unknown { get; } = new IdType("Unknown");
        public static IdType Open { get; } = new IdType("Open");
        public static IdType Secret { get; } = new IdType("Secret");

        public static bool operator ==(IdType left, IdType right) => left.Equals(right);
        public static bool operator !=(IdType left, IdType right) => !left.Equals(right);

        public static explicit operator string(IdType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdType other && Equals(other);
        public bool Equals(IdType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The NFVI type.
    /// </summary>
    [EnumType]
    public readonly struct NFVIType : IEquatable<NFVIType>
    {
        private readonly string _value;

        private NFVIType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NFVIType Unknown { get; } = new NFVIType("Unknown");
        public static NFVIType AzureArcKubernetes { get; } = new NFVIType("AzureArcKubernetes");
        public static NFVIType AzureCore { get; } = new NFVIType("AzureCore");
        public static NFVIType AzureOperatorNexus { get; } = new NFVIType("AzureOperatorNexus");

        public static bool operator ==(NFVIType left, NFVIType right) => left.Equals(right);
        public static bool operator !=(NFVIType left, NFVIType right) => !left.Equals(right);

        public static explicit operator string(NFVIType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NFVIType other && Equals(other);
        public bool Equals(NFVIType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Role type.
    /// </summary>
    [EnumType]
    public readonly struct NetworkFunctionRoleConfigurationType : IEquatable<NetworkFunctionRoleConfigurationType>
    {
        private readonly string _value;

        private NetworkFunctionRoleConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkFunctionRoleConfigurationType Unknown { get; } = new NetworkFunctionRoleConfigurationType("Unknown");
        public static NetworkFunctionRoleConfigurationType VirtualMachine { get; } = new NetworkFunctionRoleConfigurationType("VirtualMachine");

        public static bool operator ==(NetworkFunctionRoleConfigurationType left, NetworkFunctionRoleConfigurationType right) => left.Equals(right);
        public static bool operator !=(NetworkFunctionRoleConfigurationType left, NetworkFunctionRoleConfigurationType right) => !left.Equals(right);

        public static explicit operator string(NetworkFunctionRoleConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkFunctionRoleConfigurationType other && Equals(other);
        public bool Equals(NetworkFunctionRoleConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network function type.
    /// </summary>
    [EnumType]
    public readonly struct NetworkFunctionType : IEquatable<NetworkFunctionType>
    {
        private readonly string _value;

        private NetworkFunctionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkFunctionType Unknown { get; } = new NetworkFunctionType("Unknown");
        public static NetworkFunctionType VirtualNetworkFunction { get; } = new NetworkFunctionType("VirtualNetworkFunction");
        public static NetworkFunctionType ContainerizedNetworkFunction { get; } = new NetworkFunctionType("ContainerizedNetworkFunction");

        public static bool operator ==(NetworkFunctionType left, NetworkFunctionType right) => left.Equals(right);
        public static bool operator !=(NetworkFunctionType left, NetworkFunctionType right) => !left.Equals(right);

        public static explicit operator string(NetworkFunctionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkFunctionType other && Equals(other);
        public bool Equals(NetworkFunctionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS type.
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystemTypes : IEquatable<OperatingSystemTypes>
    {
        private readonly string _value;

        private OperatingSystemTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystemTypes Unknown { get; } = new OperatingSystemTypes("Unknown");
        public static OperatingSystemTypes Windows { get; } = new OperatingSystemTypes("Windows");
        public static OperatingSystemTypes Linux { get; } = new OperatingSystemTypes("Linux");

        public static bool operator ==(OperatingSystemTypes left, OperatingSystemTypes right) => left.Equals(right);
        public static bool operator !=(OperatingSystemTypes left, OperatingSystemTypes right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemTypes other && Equals(other);
        public bool Equals(OperatingSystemTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The publisher scope.
    /// </summary>
    [EnumType]
    public readonly struct PublisherScope : IEquatable<PublisherScope>
    {
        private readonly string _value;

        private PublisherScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublisherScope Unknown { get; } = new PublisherScope("Unknown");
        public static PublisherScope Private { get; } = new PublisherScope("Private");

        public static bool operator ==(PublisherScope left, PublisherScope right) => left.Equals(right);
        public static bool operator !=(PublisherScope left, PublisherScope right) => !left.Equals(right);

        public static explicit operator string(PublisherScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublisherScope other && Equals(other);
        public bool Equals(PublisherScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sku deployment mode.
    /// </summary>
    [EnumType]
    public readonly struct SkuDeploymentMode : IEquatable<SkuDeploymentMode>
    {
        private readonly string _value;

        private SkuDeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuDeploymentMode Unknown { get; } = new SkuDeploymentMode("Unknown");
        public static SkuDeploymentMode Azure { get; } = new SkuDeploymentMode("Azure");
        public static SkuDeploymentMode PrivateEdgeZone { get; } = new SkuDeploymentMode("PrivateEdgeZone");

        public static bool operator ==(SkuDeploymentMode left, SkuDeploymentMode right) => left.Equals(right);
        public static bool operator !=(SkuDeploymentMode left, SkuDeploymentMode right) => !left.Equals(right);

        public static explicit operator string(SkuDeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuDeploymentMode other && Equals(other);
        public bool Equals(SkuDeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of this Sku
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Basic { get; } = new SkuName("Basic");
        public static SkuName Standard { get; } = new SkuName("Standard");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sku type.
    /// </summary>
    [EnumType]
    public readonly struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        private SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuType Unknown { get; } = new SkuType("Unknown");
        public static SkuType EvolvedPacketCore { get; } = new SkuType("EvolvedPacketCore");
        public static SkuType SDWAN { get; } = new SkuType("SDWAN");
        public static SkuType Firewall { get; } = new SkuType("Firewall");

        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);

        public static explicit operator string(SkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuType other && Equals(other);
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The template type.
    /// </summary>
    [EnumType]
    public readonly struct TemplateType : IEquatable<TemplateType>
    {
        private readonly string _value;

        private TemplateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateType Unknown { get; } = new TemplateType("Unknown");
        public static TemplateType ArmTemplate { get; } = new TemplateType("ArmTemplate");

        public static bool operator ==(TemplateType left, TemplateType right) => left.Equals(right);
        public static bool operator !=(TemplateType left, TemplateType right) => !left.Equals(right);

        public static explicit operator string(TemplateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateType other && Equals(other);
        public bool Equals(TemplateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The resource element template type.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Unknown { get; } = new Type("Unknown");
        public static Type ArmResourceDefinition { get; } = new Type("ArmResourceDefinition");
        public static Type NetworkFunctionDefinition { get; } = new Type("NetworkFunctionDefinition");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the VM switch.
    /// </summary>
    [EnumType]
    public readonly struct VMSwitchType : IEquatable<VMSwitchType>
    {
        private readonly string _value;

        private VMSwitchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VMSwitchType Unknown { get; } = new VMSwitchType("Unknown");
        public static VMSwitchType Management { get; } = new VMSwitchType("Management");
        public static VMSwitchType Wan { get; } = new VMSwitchType("Wan");
        public static VMSwitchType Lan { get; } = new VMSwitchType("Lan");

        public static bool operator ==(VMSwitchType left, VMSwitchType right) => left.Equals(right);
        public static bool operator !=(VMSwitchType left, VMSwitchType right) => !left.Equals(right);

        public static explicit operator string(VMSwitchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMSwitchType other && Equals(other);
        public bool Equals(VMSwitchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The size of the virtual machine.
    /// </summary>
    [EnumType]
    public readonly struct VirtualMachineSizeTypes : IEquatable<VirtualMachineSizeTypes>
    {
        private readonly string _value;

        private VirtualMachineSizeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualMachineSizeTypes Unknown { get; } = new VirtualMachineSizeTypes("Unknown");
        public static VirtualMachineSizeTypes Standard_D1_v2 { get; } = new VirtualMachineSizeTypes("Standard_D1_v2");
        public static VirtualMachineSizeTypes Standard_D2_v2 { get; } = new VirtualMachineSizeTypes("Standard_D2_v2");
        public static VirtualMachineSizeTypes Standard_D3_v2 { get; } = new VirtualMachineSizeTypes("Standard_D3_v2");
        public static VirtualMachineSizeTypes Standard_D4_v2 { get; } = new VirtualMachineSizeTypes("Standard_D4_v2");
        public static VirtualMachineSizeTypes Standard_D5_v2 { get; } = new VirtualMachineSizeTypes("Standard_D5_v2");
        public static VirtualMachineSizeTypes Standard_D11_v2 { get; } = new VirtualMachineSizeTypes("Standard_D11_v2");
        public static VirtualMachineSizeTypes Standard_D12_v2 { get; } = new VirtualMachineSizeTypes("Standard_D12_v2");
        public static VirtualMachineSizeTypes Standard_D13_v2 { get; } = new VirtualMachineSizeTypes("Standard_D13_v2");
        public static VirtualMachineSizeTypes Standard_DS1_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS1_v2");
        public static VirtualMachineSizeTypes Standard_DS2_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS2_v2");
        public static VirtualMachineSizeTypes Standard_DS3_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS3_v2");
        public static VirtualMachineSizeTypes Standard_DS4_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS4_v2");
        public static VirtualMachineSizeTypes Standard_DS5_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS5_v2");
        public static VirtualMachineSizeTypes Standard_DS11_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS11_v2");
        public static VirtualMachineSizeTypes Standard_DS12_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS12_v2");
        public static VirtualMachineSizeTypes Standard_DS13_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS13_v2");
        public static VirtualMachineSizeTypes Standard_F1 { get; } = new VirtualMachineSizeTypes("Standard_F1");
        public static VirtualMachineSizeTypes Standard_F2 { get; } = new VirtualMachineSizeTypes("Standard_F2");
        public static VirtualMachineSizeTypes Standard_F4 { get; } = new VirtualMachineSizeTypes("Standard_F4");
        public static VirtualMachineSizeTypes Standard_F8 { get; } = new VirtualMachineSizeTypes("Standard_F8");
        public static VirtualMachineSizeTypes Standard_F16 { get; } = new VirtualMachineSizeTypes("Standard_F16");
        public static VirtualMachineSizeTypes Standard_F1s { get; } = new VirtualMachineSizeTypes("Standard_F1s");
        public static VirtualMachineSizeTypes Standard_F2s { get; } = new VirtualMachineSizeTypes("Standard_F2s");
        public static VirtualMachineSizeTypes Standard_F4s { get; } = new VirtualMachineSizeTypes("Standard_F4s");
        public static VirtualMachineSizeTypes Standard_F8s { get; } = new VirtualMachineSizeTypes("Standard_F8s");
        public static VirtualMachineSizeTypes Standard_F16s { get; } = new VirtualMachineSizeTypes("Standard_F16s");

        public static bool operator ==(VirtualMachineSizeTypes left, VirtualMachineSizeTypes right) => left.Equals(right);
        public static bool operator !=(VirtualMachineSizeTypes left, VirtualMachineSizeTypes right) => !left.Equals(right);

        public static explicit operator string(VirtualMachineSizeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualMachineSizeTypes other && Equals(other);
        public bool Equals(VirtualMachineSizeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network function type.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkFunctionNFVIType : IEquatable<VirtualNetworkFunctionNFVIType>
    {
        private readonly string _value;

        private VirtualNetworkFunctionNFVIType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkFunctionNFVIType Unknown { get; } = new VirtualNetworkFunctionNFVIType("Unknown");
        public static VirtualNetworkFunctionNFVIType AzureCore { get; } = new VirtualNetworkFunctionNFVIType("AzureCore");
        public static VirtualNetworkFunctionNFVIType AzureOperatorNexus { get; } = new VirtualNetworkFunctionNFVIType("AzureOperatorNexus");

        public static bool operator ==(VirtualNetworkFunctionNFVIType left, VirtualNetworkFunctionNFVIType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkFunctionNFVIType left, VirtualNetworkFunctionNFVIType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkFunctionNFVIType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkFunctionNFVIType other && Equals(other);
        public bool Equals(VirtualNetworkFunctionNFVIType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
