// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.HybridNetwork
{
    /// <summary>
    /// The type of the device.
    /// </summary>
    [EnumType]
    public readonly struct DeviceType : IEquatable<DeviceType>
    {
        private readonly string _value;

        private DeviceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeviceType Unknown { get; } = new DeviceType("Unknown");
        public static DeviceType AzureStackEdge { get; } = new DeviceType("AzureStackEdge");

        public static bool operator ==(DeviceType left, DeviceType right) => left.Equals(right);
        public static bool operator !=(DeviceType left, DeviceType right) => !left.Equals(right);

        public static explicit operator string(DeviceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeviceType other && Equals(other);
        public bool Equals(DeviceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the virtual machine should be created.
    /// </summary>
    [EnumType]
    public readonly struct DiskCreateOptionTypes : IEquatable<DiskCreateOptionTypes>
    {
        private readonly string _value;

        private DiskCreateOptionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskCreateOptionTypes Unknown { get; } = new DiskCreateOptionTypes("Unknown");
        public static DiskCreateOptionTypes Empty { get; } = new DiskCreateOptionTypes("Empty");

        public static bool operator ==(DiskCreateOptionTypes left, DiskCreateOptionTypes right) => left.Equals(right);
        public static bool operator !=(DiskCreateOptionTypes left, DiskCreateOptionTypes right) => !left.Equals(right);

        public static explicit operator string(DiskCreateOptionTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskCreateOptionTypes other && Equals(other);
        public bool Equals(DiskCreateOptionTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP address allocation method.
    /// </summary>
    [EnumType]
    public readonly struct IPAllocationMethod : IEquatable<IPAllocationMethod>
    {
        private readonly string _value;

        private IPAllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAllocationMethod Unknown { get; } = new IPAllocationMethod("Unknown");
        public static IPAllocationMethod Static { get; } = new IPAllocationMethod("Static");
        public static IPAllocationMethod Dynamic { get; } = new IPAllocationMethod("Dynamic");

        public static bool operator ==(IPAllocationMethod left, IPAllocationMethod right) => left.Equals(right);
        public static bool operator !=(IPAllocationMethod left, IPAllocationMethod right) => !left.Equals(right);

        public static explicit operator string(IPAllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAllocationMethod other && Equals(other);
        public bool Equals(IPAllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IP address version.
    /// </summary>
    [EnumType]
    public readonly struct IPVersion : IEquatable<IPVersion>
    {
        private readonly string _value;

        private IPVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPVersion Unknown { get; } = new IPVersion("Unknown");
        public static IPVersion IPv4 { get; } = new IPVersion("IPv4");

        public static bool operator ==(IPVersion left, IPVersion right) => left.Equals(right);
        public static bool operator !=(IPVersion left, IPVersion right) => !left.Equals(right);

        public static explicit operator string(IPVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPVersion other && Equals(other);
        public bool Equals(IPVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Role type.
    /// </summary>
    [EnumType]
    public readonly struct NetworkFunctionRoleConfigurationType : IEquatable<NetworkFunctionRoleConfigurationType>
    {
        private readonly string _value;

        private NetworkFunctionRoleConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkFunctionRoleConfigurationType Unknown { get; } = new NetworkFunctionRoleConfigurationType("Unknown");
        public static NetworkFunctionRoleConfigurationType VirtualMachine { get; } = new NetworkFunctionRoleConfigurationType("VirtualMachine");

        public static bool operator ==(NetworkFunctionRoleConfigurationType left, NetworkFunctionRoleConfigurationType right) => left.Equals(right);
        public static bool operator !=(NetworkFunctionRoleConfigurationType left, NetworkFunctionRoleConfigurationType right) => !left.Equals(right);

        public static explicit operator string(NetworkFunctionRoleConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkFunctionRoleConfigurationType other && Equals(other);
        public bool Equals(NetworkFunctionRoleConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OS type.
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystemTypes : IEquatable<OperatingSystemTypes>
    {
        private readonly string _value;

        private OperatingSystemTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystemTypes Unknown { get; } = new OperatingSystemTypes("Unknown");
        public static OperatingSystemTypes Windows { get; } = new OperatingSystemTypes("Windows");
        public static OperatingSystemTypes Linux { get; } = new OperatingSystemTypes("Linux");

        public static bool operator ==(OperatingSystemTypes left, OperatingSystemTypes right) => left.Equals(right);
        public static bool operator !=(OperatingSystemTypes left, OperatingSystemTypes right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemTypes other && Equals(other);
        public bool Equals(OperatingSystemTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sku deployment mode.
    /// </summary>
    [EnumType]
    public readonly struct SkuDeploymentMode : IEquatable<SkuDeploymentMode>
    {
        private readonly string _value;

        private SkuDeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuDeploymentMode Unknown { get; } = new SkuDeploymentMode("Unknown");
        public static SkuDeploymentMode Azure { get; } = new SkuDeploymentMode("Azure");
        public static SkuDeploymentMode PrivateEdgeZone { get; } = new SkuDeploymentMode("PrivateEdgeZone");

        public static bool operator ==(SkuDeploymentMode left, SkuDeploymentMode right) => left.Equals(right);
        public static bool operator !=(SkuDeploymentMode left, SkuDeploymentMode right) => !left.Equals(right);

        public static explicit operator string(SkuDeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuDeploymentMode other && Equals(other);
        public bool Equals(SkuDeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sku type.
    /// </summary>
    [EnumType]
    public readonly struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        private SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuType Unknown { get; } = new SkuType("Unknown");
        public static SkuType EvolvedPacketCore { get; } = new SkuType("EvolvedPacketCore");
        public static SkuType SDWAN { get; } = new SkuType("SDWAN");
        public static SkuType Firewall { get; } = new SkuType("Firewall");

        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);

        public static explicit operator string(SkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuType other && Equals(other);
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the VM switch.
    /// </summary>
    [EnumType]
    public readonly struct VMSwitchType : IEquatable<VMSwitchType>
    {
        private readonly string _value;

        private VMSwitchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VMSwitchType Unknown { get; } = new VMSwitchType("Unknown");
        public static VMSwitchType Management { get; } = new VMSwitchType("Management");
        public static VMSwitchType Wan { get; } = new VMSwitchType("Wan");
        public static VMSwitchType Lan { get; } = new VMSwitchType("Lan");

        public static bool operator ==(VMSwitchType left, VMSwitchType right) => left.Equals(right);
        public static bool operator !=(VMSwitchType left, VMSwitchType right) => !left.Equals(right);

        public static explicit operator string(VMSwitchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMSwitchType other && Equals(other);
        public bool Equals(VMSwitchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The size of the virtual machine.
    /// </summary>
    [EnumType]
    public readonly struct VirtualMachineSizeTypes : IEquatable<VirtualMachineSizeTypes>
    {
        private readonly string _value;

        private VirtualMachineSizeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualMachineSizeTypes Unknown { get; } = new VirtualMachineSizeTypes("Unknown");
        public static VirtualMachineSizeTypes Standard_D1_v2 { get; } = new VirtualMachineSizeTypes("Standard_D1_v2");
        public static VirtualMachineSizeTypes Standard_D2_v2 { get; } = new VirtualMachineSizeTypes("Standard_D2_v2");
        public static VirtualMachineSizeTypes Standard_D3_v2 { get; } = new VirtualMachineSizeTypes("Standard_D3_v2");
        public static VirtualMachineSizeTypes Standard_D4_v2 { get; } = new VirtualMachineSizeTypes("Standard_D4_v2");
        public static VirtualMachineSizeTypes Standard_D5_v2 { get; } = new VirtualMachineSizeTypes("Standard_D5_v2");
        public static VirtualMachineSizeTypes Standard_D11_v2 { get; } = new VirtualMachineSizeTypes("Standard_D11_v2");
        public static VirtualMachineSizeTypes Standard_D12_v2 { get; } = new VirtualMachineSizeTypes("Standard_D12_v2");
        public static VirtualMachineSizeTypes Standard_D13_v2 { get; } = new VirtualMachineSizeTypes("Standard_D13_v2");
        public static VirtualMachineSizeTypes Standard_DS1_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS1_v2");
        public static VirtualMachineSizeTypes Standard_DS2_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS2_v2");
        public static VirtualMachineSizeTypes Standard_DS3_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS3_v2");
        public static VirtualMachineSizeTypes Standard_DS4_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS4_v2");
        public static VirtualMachineSizeTypes Standard_DS5_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS5_v2");
        public static VirtualMachineSizeTypes Standard_DS11_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS11_v2");
        public static VirtualMachineSizeTypes Standard_DS12_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS12_v2");
        public static VirtualMachineSizeTypes Standard_DS13_v2 { get; } = new VirtualMachineSizeTypes("Standard_DS13_v2");
        public static VirtualMachineSizeTypes Standard_F1 { get; } = new VirtualMachineSizeTypes("Standard_F1");
        public static VirtualMachineSizeTypes Standard_F2 { get; } = new VirtualMachineSizeTypes("Standard_F2");
        public static VirtualMachineSizeTypes Standard_F4 { get; } = new VirtualMachineSizeTypes("Standard_F4");
        public static VirtualMachineSizeTypes Standard_F8 { get; } = new VirtualMachineSizeTypes("Standard_F8");
        public static VirtualMachineSizeTypes Standard_F16 { get; } = new VirtualMachineSizeTypes("Standard_F16");
        public static VirtualMachineSizeTypes Standard_F1s { get; } = new VirtualMachineSizeTypes("Standard_F1s");
        public static VirtualMachineSizeTypes Standard_F2s { get; } = new VirtualMachineSizeTypes("Standard_F2s");
        public static VirtualMachineSizeTypes Standard_F4s { get; } = new VirtualMachineSizeTypes("Standard_F4s");
        public static VirtualMachineSizeTypes Standard_F8s { get; } = new VirtualMachineSizeTypes("Standard_F8s");
        public static VirtualMachineSizeTypes Standard_F16s { get; } = new VirtualMachineSizeTypes("Standard_F16s");

        public static bool operator ==(VirtualMachineSizeTypes left, VirtualMachineSizeTypes right) => left.Equals(right);
        public static bool operator !=(VirtualMachineSizeTypes left, VirtualMachineSizeTypes right) => !left.Equals(right);

        public static explicit operator string(VirtualMachineSizeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualMachineSizeTypes other && Equals(other);
        public bool Equals(VirtualMachineSizeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
