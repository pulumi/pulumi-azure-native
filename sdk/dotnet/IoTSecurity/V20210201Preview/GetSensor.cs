// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTSecurity.V20210201Preview
{
    public static class GetSensor
    {
        /// <summary>
        /// IoT sensor model
        /// </summary>
        public static Task<GetSensorResult> InvokeAsync(GetSensorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSensorResult>("azure-native:iotsecurity/v20210201preview:getSensor", args ?? new GetSensorArgs(), options.WithVersion());
    }


    public sealed class GetSensorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// Name of the IoT sensor
        /// </summary>
        [Input("sensorName", required: true)]
        public string SensorName { get; set; } = null!;

        public GetSensorArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSensorResult
    {
        /// <summary>
        /// Last connectivity time of the IoT sensor
        /// </summary>
        public readonly string ConnectivityTime;
        /// <summary>
        /// Dynamic mode status of the IoT sensor
        /// </summary>
        public readonly bool DynamicLearning;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Learning mode status of the IoT sensor
        /// </summary>
        public readonly bool LearningMode;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status of the IoT sensor
        /// </summary>
        public readonly string SensorStatus;
        /// <summary>
        /// Version of the IoT sensor
        /// </summary>
        public readonly string SensorVersion;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// TI Automatic mode status of the IoT sensor
        /// </summary>
        public readonly bool? TiAutomaticUpdates;
        /// <summary>
        /// TI Status of the IoT sensor
        /// </summary>
        public readonly string TiStatus;
        /// <summary>
        /// TI Version of the IoT sensor
        /// </summary>
        public readonly string TiVersion;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Zone of the IoT sensor
        /// </summary>
        public readonly string? Zone;

        [OutputConstructor]
        private GetSensorResult(
            string connectivityTime,

            bool dynamicLearning,

            string id,

            bool learningMode,

            string name,

            string sensorStatus,

            string sensorVersion,

            Outputs.SystemDataResponse systemData,

            bool? tiAutomaticUpdates,

            string tiStatus,

            string tiVersion,

            string type,

            string? zone)
        {
            ConnectivityTime = connectivityTime;
            DynamicLearning = dynamicLearning;
            Id = id;
            LearningMode = learningMode;
            Name = name;
            SensorStatus = sensorStatus;
            SensorVersion = sensorVersion;
            SystemData = systemData;
            TiAutomaticUpdates = tiAutomaticUpdates;
            TiStatus = tiStatus;
            TiVersion = tiVersion;
            Type = type;
            Zone = zone;
        }
    }
}
