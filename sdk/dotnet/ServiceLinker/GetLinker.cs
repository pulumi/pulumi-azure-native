// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceLinker
{
    public static class GetLinker
    {
        /// <summary>
        /// Linker of source and target resource
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Task<GetLinkerResult> InvokeAsync(GetLinkerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLinkerResult>("azure-native:servicelinker:getLinker", args ?? new GetLinkerArgs(), options.WithDefaults());

        /// <summary>
        /// Linker of source and target resource
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Output<GetLinkerResult> Invoke(GetLinkerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLinkerResult>("azure-native:servicelinker:getLinker", args ?? new GetLinkerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinkerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name Linker resource.
        /// </summary>
        [Input("linkerName", required: true)]
        public string LinkerName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetLinkerArgs()
        {
        }
    }

    public sealed class GetLinkerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name Linker resource.
        /// </summary>
        [Input("linkerName", required: true)]
        public Input<string> LinkerName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public GetLinkerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLinkerResult
    {
        /// <summary>
        /// The authentication type.
        /// </summary>
        public readonly object? AuthInfo;
        /// <summary>
        /// The application client type
        /// </summary>
        public readonly string? ClientType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state. 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// An option to store secret value in secure place
        /// </summary>
        public readonly Outputs.SecretStoreResponse? SecretStore;
        /// <summary>
        /// The system data.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The resource Id of target service.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VNet solution.
        /// </summary>
        public readonly Outputs.VNetSolutionResponse? VNetSolution;

        [OutputConstructor]
        private GetLinkerResult(
            object? authInfo,

            string? clientType,

            string id,

            string name,

            string provisioningState,

            Outputs.SecretStoreResponse? secretStore,

            Outputs.SystemDataResponse systemData,

            string? targetId,

            string type,

            Outputs.VNetSolutionResponse? vNetSolution)
        {
            AuthInfo = authInfo;
            ClientType = clientType;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SecretStore = secretStore;
            SystemData = systemData;
            TargetId = targetId;
            Type = type;
            VNetSolution = vNetSolution;
        }
    }
}
