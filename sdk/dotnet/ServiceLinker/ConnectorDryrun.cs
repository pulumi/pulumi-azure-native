// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceLinker
{
    /// <summary>
    /// a dryrun job resource
    /// Azure REST API version: 2022-11-01-preview.
    /// 
    /// Other available API versions: 2023-04-01-preview, 2024-04-01, 2024-07-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:servicelinker:ConnectorDryrun")]
    public partial class ConnectorDryrun : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// the preview of the operations for creation
        /// </summary>
        [Output("operationPreviews")]
        public Output<ImmutableArray<Outputs.DryrunOperationPreviewResponse>> OperationPreviews { get; private set; } = null!;

        /// <summary>
        /// The parameters of the dryrun
        /// </summary>
        [Output("parameters")]
        public Output<Outputs.CreateOrUpdateDryrunParametersResponse?> Parameters { get; private set; } = null!;

        /// <summary>
        /// the result of the dryrun
        /// </summary>
        [Output("prerequisiteResults")]
        public Output<ImmutableArray<Union<Outputs.BasicErrorDryrunPrerequisiteResultResponse, Outputs.PermissionsMissingDryrunPrerequisiteResultResponse>>> PrerequisiteResults { get; private set; } = null!;

        /// <summary>
        /// The provisioning state. 
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectorDryrun resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectorDryrun(string name, ConnectorDryrunArgs args, CustomResourceOptions? options = null)
            : base("azure-native:servicelinker:ConnectorDryrun", name, args ?? new ConnectorDryrunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectorDryrun(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:servicelinker:ConnectorDryrun", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:servicelinker/v20221101preview:ConnectorDryrun" },
                    new global::Pulumi.Alias { Type = "azure-native:servicelinker/v20230401preview:ConnectorDryrun" },
                    new global::Pulumi.Alias { Type = "azure-native:servicelinker/v20240401:ConnectorDryrun" },
                    new global::Pulumi.Alias { Type = "azure-native:servicelinker/v20240701preview:ConnectorDryrun" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectorDryrun resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectorDryrun Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ConnectorDryrun(name, id, options);
        }
    }

    public sealed class ConnectorDryrunArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of dryrun.
        /// </summary>
        [Input("dryrunName")]
        public Input<string>? DryrunName { get; set; }

        /// <summary>
        /// The name of Azure region.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The parameters of the dryrun
        /// </summary>
        [Input("parameters")]
        public Input<Inputs.CreateOrUpdateDryrunParametersArgs>? Parameters { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public ConnectorDryrunArgs()
        {
        }
        public static new ConnectorDryrunArgs Empty => new ConnectorDryrunArgs();
    }
}
