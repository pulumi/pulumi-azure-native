// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceLinker
{
    public static class GetConnector
    {
        /// <summary>
        /// Returns Connector resource for a given name.
        /// API Version: 2022-11-01-preview.
        /// </summary>
        public static Task<GetConnectorResult> InvokeAsync(GetConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectorResult>("azure-native:servicelinker:getConnector", args ?? new GetConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Returns Connector resource for a given name.
        /// API Version: 2022-11-01-preview.
        /// </summary>
        public static Output<GetConnectorResult> Invoke(GetConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectorResult>("azure-native:servicelinker:getConnector", args ?? new GetConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of resource.
        /// </summary>
        [Input("connectorName", required: true)]
        public string ConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of Azure region.
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        [Input("subscriptionId")]
        public string? SubscriptionId { get; set; }

        public GetConnectorArgs()
        {
        }
        public static new GetConnectorArgs Empty => new GetConnectorArgs();
    }

    public sealed class GetConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of resource.
        /// </summary>
        [Input("connectorName", required: true)]
        public Input<string> ConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of Azure region.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public GetConnectorInvokeArgs()
        {
        }
        public static new GetConnectorInvokeArgs Empty => new GetConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectorResult
    {
        /// <summary>
        /// The authentication type.
        /// </summary>
        public readonly object? AuthInfo;
        /// <summary>
        /// The application client type
        /// </summary>
        public readonly string? ClientType;
        /// <summary>
        /// The connection information consumed by applications, including secrets, connection strings.
        /// </summary>
        public readonly Outputs.ConfigurationInfoResponse? ConfigurationInfo;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state. 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The network solution.
        /// </summary>
        public readonly Outputs.PublicNetworkSolutionResponse? PublicNetworkSolution;
        /// <summary>
        /// connection scope in source service.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// An option to store secret value in secure place
        /// </summary>
        public readonly Outputs.SecretStoreResponse? SecretStore;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The target service properties
        /// </summary>
        public readonly object? TargetService;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VNet solution.
        /// </summary>
        public readonly Outputs.VNetSolutionResponse? VNetSolution;

        [OutputConstructor]
        private GetConnectorResult(
            object? authInfo,

            string? clientType,

            Outputs.ConfigurationInfoResponse? configurationInfo,

            string id,

            string name,

            string provisioningState,

            Outputs.PublicNetworkSolutionResponse? publicNetworkSolution,

            string? scope,

            Outputs.SecretStoreResponse? secretStore,

            Outputs.SystemDataResponse systemData,

            object? targetService,

            string type,

            Outputs.VNetSolutionResponse? vNetSolution)
        {
            AuthInfo = authInfo;
            ClientType = clientType;
            ConfigurationInfo = configurationInfo;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            PublicNetworkSolution = publicNetworkSolution;
            Scope = scope;
            SecretStore = secretStore;
            SystemData = systemData;
            TargetService = targetService;
            Type = type;
            VNetSolution = vNetSolution;
        }
    }
}
