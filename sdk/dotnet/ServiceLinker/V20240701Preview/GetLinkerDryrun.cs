// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceLinker.V20240701Preview
{
    public static class GetLinkerDryrun
    {
        /// <summary>
        /// get a dryrun job
        /// </summary>
        public static Task<GetLinkerDryrunResult> InvokeAsync(GetLinkerDryrunArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLinkerDryrunResult>("azure-native:servicelinker/v20240701preview:getLinkerDryrun", args ?? new GetLinkerDryrunArgs(), options.WithDefaults());

        /// <summary>
        /// get a dryrun job
        /// </summary>
        public static Output<GetLinkerDryrunResult> Invoke(GetLinkerDryrunInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLinkerDryrunResult>("azure-native:servicelinker/v20240701preview:getLinkerDryrun", args ?? new GetLinkerDryrunInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinkerDryrunArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of dryrun.
        /// </summary>
        [Input("dryrunName", required: true)]
        public string DryrunName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetLinkerDryrunArgs()
        {
        }
        public static new GetLinkerDryrunArgs Empty => new GetLinkerDryrunArgs();
    }

    public sealed class GetLinkerDryrunInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of dryrun.
        /// </summary>
        [Input("dryrunName", required: true)]
        public Input<string> DryrunName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource to be connected.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public GetLinkerDryrunInvokeArgs()
        {
        }
        public static new GetLinkerDryrunInvokeArgs Empty => new GetLinkerDryrunInvokeArgs();
    }


    [OutputType]
    public sealed class GetLinkerDryrunResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// the preview of the operations for creation
        /// </summary>
        public readonly ImmutableArray<Outputs.DryrunOperationPreviewResponse> OperationPreviews;
        /// <summary>
        /// The parameters of the dryrun
        /// </summary>
        public readonly Outputs.CreateOrUpdateDryrunParametersResponse? Parameters;
        /// <summary>
        /// the result of the dryrun
        /// </summary>
        public readonly ImmutableArray<Union<Outputs.BasicErrorDryrunPrerequisiteResultResponse, Outputs.PermissionsMissingDryrunPrerequisiteResultResponse>> PrerequisiteResults;
        /// <summary>
        /// The provisioning state. 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLinkerDryrunResult(
            string id,

            string name,

            ImmutableArray<Outputs.DryrunOperationPreviewResponse> operationPreviews,

            Outputs.CreateOrUpdateDryrunParametersResponse? parameters,

            ImmutableArray<Union<Outputs.BasicErrorDryrunPrerequisiteResultResponse, Outputs.PermissionsMissingDryrunPrerequisiteResultResponse>> prerequisiteResults,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Id = id;
            Name = name;
            OperationPreviews = operationPreviews;
            Parameters = parameters;
            PrerequisiteResults = prerequisiteResults;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
