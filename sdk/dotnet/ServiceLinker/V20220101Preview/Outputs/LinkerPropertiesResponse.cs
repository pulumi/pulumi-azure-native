// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceLinker.V20220101Preview.Outputs
{

    /// <summary>
    /// The properties of the linker.
    /// </summary>
    [OutputType]
    public sealed class LinkerPropertiesResponse
    {
        /// <summary>
        /// The authentication type.
        /// </summary>
        public readonly object? AuthInfo;
        /// <summary>
        /// The application client type
        /// </summary>
        public readonly string? ClientType;
        /// <summary>
        /// The provisioning state. 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// connection scope in source service.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// An option to store secret value in secure place
        /// </summary>
        public readonly Outputs.SecretStoreResponse? SecretStore;
        /// <summary>
        /// The target service properties
        /// </summary>
        public readonly object? TargetService;
        /// <summary>
        /// The VNet solution.
        /// </summary>
        public readonly Outputs.VNetSolutionResponse? VNetSolution;

        [OutputConstructor]
        private LinkerPropertiesResponse(
            object? authInfo,

            string? clientType,

            string provisioningState,

            string? scope,

            Outputs.SecretStoreResponse? secretStore,

            object? targetService,

            Outputs.VNetSolutionResponse? vNetSolution)
        {
            AuthInfo = authInfo;
            ClientType = clientType;
            ProvisioningState = provisioningState;
            Scope = scope;
            SecretStore = secretStore;
            TargetService = targetService;
            VNetSolution = vNetSolution;
        }
    }
}
