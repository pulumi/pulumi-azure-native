// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ElasticSan.V20240501
{
    public static class GetElasticSan
    {
        /// <summary>
        /// Get a ElasticSan.
        /// </summary>
        public static Task<GetElasticSanResult> InvokeAsync(GetElasticSanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetElasticSanResult>("azure-native:elasticsan/v20240501:getElasticSan", args ?? new GetElasticSanArgs(), options.WithDefaults());

        /// <summary>
        /// Get a ElasticSan.
        /// </summary>
        public static Output<GetElasticSanResult> Invoke(GetElasticSanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetElasticSanResult>("azure-native:elasticsan/v20240501:getElasticSan", args ?? new GetElasticSanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetElasticSanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ElasticSan.
        /// </summary>
        [Input("elasticSanName", required: true)]
        public string ElasticSanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetElasticSanArgs()
        {
        }
        public static new GetElasticSanArgs Empty => new GetElasticSanArgs();
    }

    public sealed class GetElasticSanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ElasticSan.
        /// </summary>
        [Input("elasticSanName", required: true)]
        public Input<string> ElasticSanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetElasticSanInvokeArgs()
        {
        }
        public static new GetElasticSanInvokeArgs Empty => new GetElasticSanInvokeArgs();
    }


    [OutputType]
    public sealed class GetElasticSanResult
    {
        /// <summary>
        /// Logical zone for Elastic San resource; example: ["1"].
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// Base size of the Elastic San appliance in TiB.
        /// </summary>
        public readonly double BaseSizeTiB;
        /// <summary>
        /// Extended size of the Elastic San appliance in TiB.
        /// </summary>
        public readonly double ExtendedCapacitySizeTiB;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of Private Endpoint Connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// State of the operation on the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Allow or disallow public network access to ElasticSan. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// resource sku
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Total Provisioned IOPS of the Elastic San appliance.
        /// </summary>
        public readonly double TotalIops;
        /// <summary>
        /// Total Provisioned MBps Elastic San appliance.
        /// </summary>
        public readonly double TotalMBps;
        /// <summary>
        /// Total size of the Elastic San appliance in TB.
        /// </summary>
        public readonly double TotalSizeTiB;
        /// <summary>
        /// Total size of the provisioned Volumes in GiB.
        /// </summary>
        public readonly double TotalVolumeSizeGiB;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Total number of volume groups in this Elastic San appliance.
        /// </summary>
        public readonly double VolumeGroupCount;

        [OutputConstructor]
        private GetElasticSanResult(
            ImmutableArray<string> availabilityZones,

            double baseSizeTiB,

            double extendedCapacitySizeTiB,

            string id,

            string location,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.SkuResponse sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            double totalIops,

            double totalMBps,

            double totalSizeTiB,

            double totalVolumeSizeGiB,

            string type,

            double volumeGroupCount)
        {
            AvailabilityZones = availabilityZones;
            BaseSizeTiB = baseSizeTiB;
            ExtendedCapacitySizeTiB = extendedCapacitySizeTiB;
            Id = id;
            Location = location;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            TotalIops = totalIops;
            TotalMBps = totalMBps;
            TotalSizeTiB = totalSizeTiB;
            TotalVolumeSizeGiB = totalVolumeSizeGiB;
            Type = type;
            VolumeGroupCount = volumeGroupCount;
        }
    }
}
