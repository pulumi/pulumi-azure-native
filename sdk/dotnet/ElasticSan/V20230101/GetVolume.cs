// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ElasticSan.V20230101
{
    public static class GetVolume
    {
        /// <summary>
        /// Get an Volume.
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("azure-native:elasticsan/v20230101:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an Volume.
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("azure-native:elasticsan/v20230101:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ElasticSan.
        /// </summary>
        [Input("elasticSanName", required: true)]
        public string ElasticSanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VolumeGroup.
        /// </summary>
        [Input("volumeGroupName", required: true)]
        public string VolumeGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Volume.
        /// </summary>
        [Input("volumeName", required: true)]
        public string VolumeName { get; set; } = null!;

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ElasticSan.
        /// </summary>
        [Input("elasticSanName", required: true)]
        public Input<string> ElasticSanName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VolumeGroup.
        /// </summary>
        [Input("volumeGroupName", required: true)]
        public Input<string> VolumeGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Volume.
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// State of the operation on the resource.
        /// </summary>
        public readonly Outputs.SourceCreationDataResponse? CreationData;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Parent resource information.
        /// </summary>
        public readonly Outputs.ManagedByInfoResponse? ManagedBy;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of the operation on the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Volume size.
        /// </summary>
        public readonly double SizeGiB;
        /// <summary>
        /// Storage target information
        /// </summary>
        public readonly Outputs.IscsiTargetInfoResponse StorageTarget;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique Id of the volume in GUID format
        /// </summary>
        public readonly string VolumeId;

        [OutputConstructor]
        private GetVolumeResult(
            Outputs.SourceCreationDataResponse? creationData,

            string id,

            Outputs.ManagedByInfoResponse? managedBy,

            string name,

            string provisioningState,

            double sizeGiB,

            Outputs.IscsiTargetInfoResponse storageTarget,

            Outputs.SystemDataResponse systemData,

            string type,

            string volumeId)
        {
            CreationData = creationData;
            Id = id;
            ManagedBy = managedBy;
            Name = name;
            ProvisioningState = provisioningState;
            SizeGiB = sizeGiB;
            StorageTarget = storageTarget;
            SystemData = systemData;
            Type = type;
            VolumeId = volumeId;
        }
    }
}
