// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Mission
{
    /// <summary>
    /// Action Performed by approver
    /// </summary>
    [EnumType]
    public readonly struct ActionPerformed : IEquatable<ActionPerformed>
    {
        private readonly string _value;

        private ActionPerformed(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Action was Approved
        /// </summary>
        public static ActionPerformed Approved { get; } = new ActionPerformed("Approved");
        /// <summary>
        /// Action was Rejected
        /// </summary>
        public static ActionPerformed Rejected { get; } = new ActionPerformed("Rejected");

        public static bool operator ==(ActionPerformed left, ActionPerformed right) => left.Equals(right);
        public static bool operator !=(ActionPerformed left, ActionPerformed right) => !left.Equals(right);

        public static explicit operator string(ActionPerformed value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionPerformed other && Equals(other);
        public bool Equals(ActionPerformed other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Approval required for deploying service catalog templates (Required or NotRequired).
    /// </summary>
    [EnumType]
    public readonly struct ApprovalPolicy : IEquatable<ApprovalPolicy>
    {
        private readonly string _value;

        private ApprovalPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Approval will be required for the specified action.
        /// </summary>
        public static ApprovalPolicy Required { get; } = new ApprovalPolicy("Required");
        /// <summary>
        /// Approval will not be required for the specified action.
        /// </summary>
        public static ApprovalPolicy NotRequired { get; } = new ApprovalPolicy("NotRequired");

        public static bool operator ==(ApprovalPolicy left, ApprovalPolicy right) => left.Equals(right);
        public static bool operator !=(ApprovalPolicy left, ApprovalPolicy right) => !left.Equals(right);

        public static explicit operator string(ApprovalPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApprovalPolicy other && Equals(other);
        public bool Equals(ApprovalPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the approval. Uses ApprovalStatus enum.
    /// </summary>
    [EnumType]
    public readonly struct ApprovalStatus : IEquatable<ApprovalStatus>
    {
        private readonly string _value;

        private ApprovalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ApprovalStatus Type Approved
        /// </summary>
        public static ApprovalStatus Approved { get; } = new ApprovalStatus("Approved");
        /// <summary>
        /// ApprovalStatus Type Rejected
        /// </summary>
        public static ApprovalStatus Rejected { get; } = new ApprovalStatus("Rejected");
        /// <summary>
        /// ApprovalStatus Type Pending
        /// </summary>
        public static ApprovalStatus Pending { get; } = new ApprovalStatus("Pending");
        /// <summary>
        /// ApprovalStatus Type Deleted
        /// </summary>
        public static ApprovalStatus Deleted { get; } = new ApprovalStatus("Deleted");
        /// <summary>
        /// ApprovalStatus Type Expired
        /// </summary>
        public static ApprovalStatus Expired { get; } = new ApprovalStatus("Expired");

        public static bool operator ==(ApprovalStatus left, ApprovalStatus right) => left.Equals(right);
        public static bool operator !=(ApprovalStatus left, ApprovalStatus right) => !left.Equals(right);

        public static explicit operator string(ApprovalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApprovalStatus other && Equals(other);
        public bool Equals(ApprovalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Community Endpoint Protocol Enum
    /// </summary>
    [EnumType]
    public readonly struct CommunityEndpointProtocol : IEquatable<CommunityEndpointProtocol>
    {
        private readonly string _value;

        private CommunityEndpointProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// CommunityEndpointProtocol Type ANY
        /// </summary>
        public static CommunityEndpointProtocol ANY { get; } = new CommunityEndpointProtocol("ANY");
        /// <summary>
        /// CommunityEndpointProtocol Type TCP
        /// </summary>
        public static CommunityEndpointProtocol TCP { get; } = new CommunityEndpointProtocol("TCP");
        /// <summary>
        /// CommunityEndpointProtocol Type UDP
        /// </summary>
        public static CommunityEndpointProtocol UDP { get; } = new CommunityEndpointProtocol("UDP");
        /// <summary>
        /// CommunityEndpointProtocol Type ICMP
        /// </summary>
        public static CommunityEndpointProtocol ICMP { get; } = new CommunityEndpointProtocol("ICMP");
        /// <summary>
        /// CommunityEndpointProtocol Type ESP
        /// </summary>
        public static CommunityEndpointProtocol ESP { get; } = new CommunityEndpointProtocol("ESP");
        /// <summary>
        /// CommunityEndpointProtocol Type AH
        /// </summary>
        public static CommunityEndpointProtocol AH { get; } = new CommunityEndpointProtocol("AH");
        /// <summary>
        /// CommunityEndpointProtocol Type HTTPS
        /// </summary>
        public static CommunityEndpointProtocol HTTPS { get; } = new CommunityEndpointProtocol("HTTPS");
        /// <summary>
        /// CommunityEndpointProtocol Type HTTP
        /// </summary>
        public static CommunityEndpointProtocol HTTP { get; } = new CommunityEndpointProtocol("HTTP");

        public static bool operator ==(CommunityEndpointProtocol left, CommunityEndpointProtocol right) => left.Equals(right);
        public static bool operator !=(CommunityEndpointProtocol left, CommunityEndpointProtocol right) => !left.Equals(right);

        public static explicit operator string(CommunityEndpointProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommunityEndpointProtocol other && Equals(other);
        public bool Equals(CommunityEndpointProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Destination Type.
    /// </summary>
    [EnumType]
    public readonly struct DestinationType : IEquatable<DestinationType>
    {
        private readonly string _value;

        private DestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// DestinationType Type FQDN
        /// </summary>
        public static DestinationType FQDN { get; } = new DestinationType("FQDN");
        /// <summary>
        /// DestinationType Type FQDNTag
        /// </summary>
        public static DestinationType FQDNTag { get; } = new DestinationType("FQDNTag");
        /// <summary>
        /// DestinationType Type IPAddress
        /// </summary>
        public static DestinationType IPAddress { get; } = new DestinationType("IPAddress");
        /// <summary>
        /// DestinationType Type PrivateNetwork
        /// </summary>
        public static DestinationType PrivateNetwork { get; } = new DestinationType("PrivateNetwork");

        public static bool operator ==(DestinationType left, DestinationType right) => left.Equals(right);
        public static bool operator !=(DestinationType left, DestinationType right) => !left.Equals(right);

        public static explicit operator string(DestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationType other && Equals(other);
        public bool Equals(DestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Diagnostic Destination.
    /// </summary>
    [EnumType]
    public readonly struct DiagnosticDestination : IEquatable<DiagnosticDestination>
    {
        private readonly string _value;

        private DiagnosticDestination(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// DiagnosticDestination Type CommunityOnly
        /// </summary>
        public static DiagnosticDestination CommunityOnly { get; } = new DiagnosticDestination("CommunityOnly");
        /// <summary>
        /// DiagnosticDestination Type EnclaveOnly
        /// </summary>
        public static DiagnosticDestination EnclaveOnly { get; } = new DiagnosticDestination("EnclaveOnly");
        /// <summary>
        /// DiagnosticDestination Type Both
        /// </summary>
        public static DiagnosticDestination Both { get; } = new DiagnosticDestination("Both");

        public static bool operator ==(DiagnosticDestination left, DiagnosticDestination right) => left.Equals(right);
        public static bool operator !=(DiagnosticDestination left, DiagnosticDestination right) => !left.Equals(right);

        public static explicit operator string(DiagnosticDestination value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiagnosticDestination other && Equals(other);
        public bool Equals(DiagnosticDestination other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enclave Endpoint Protocol Enum
    /// </summary>
    [EnumType]
    public readonly struct EnclaveEndpointProtocol : IEquatable<EnclaveEndpointProtocol>
    {
        private readonly string _value;

        private EnclaveEndpointProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// EndpointProtocol Type ANY
        /// </summary>
        public static EnclaveEndpointProtocol ANY { get; } = new EnclaveEndpointProtocol("ANY");
        /// <summary>
        /// EndpointProtocol Type TCP
        /// </summary>
        public static EnclaveEndpointProtocol TCP { get; } = new EnclaveEndpointProtocol("TCP");
        /// <summary>
        /// EndpointProtocol Type UDP
        /// </summary>
        public static EnclaveEndpointProtocol UDP { get; } = new EnclaveEndpointProtocol("UDP");
        /// <summary>
        /// EndpointProtocol Type ICMP
        /// </summary>
        public static EnclaveEndpointProtocol ICMP { get; } = new EnclaveEndpointProtocol("ICMP");
        /// <summary>
        /// EndpointProtocol Type ESP
        /// </summary>
        public static EnclaveEndpointProtocol ESP { get; } = new EnclaveEndpointProtocol("ESP");
        /// <summary>
        /// EndpointProtocol Type AH
        /// </summary>
        public static EnclaveEndpointProtocol AH { get; } = new EnclaveEndpointProtocol("AH");

        public static bool operator ==(EnclaveEndpointProtocol left, EnclaveEndpointProtocol right) => left.Equals(right);
        public static bool operator !=(EnclaveEndpointProtocol left, EnclaveEndpointProtocol right) => !left.Equals(right);

        public static explicit operator string(EnclaveEndpointProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnclaveEndpointProtocol other && Equals(other);
        public bool Equals(EnclaveEndpointProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initiative enforcement (Enabled or Disabled).
    /// </summary>
    [EnumType]
    public readonly struct Enforcement : IEquatable<Enforcement>
    {
        private readonly string _value;

        private Enforcement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Enforcement Enabled { get; } = new Enforcement("Enabled");
        public static Enforcement Disabled { get; } = new Enforcement("Disabled");

        public static bool operator ==(Enforcement left, Enforcement right) => left.Equals(right);
        public static bool operator !=(Enforcement left, Enforcement right) => !left.Equals(right);

        public static explicit operator string(Enforcement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Enforcement other && Equals(other);
        public bool Equals(Enforcement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
    /// </summary>
    [EnumType]
    public readonly struct FirewallSKU : IEquatable<FirewallSKU>
    {
        private readonly string _value;

        private FirewallSKU(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// FirewallSKU Basic
        /// </summary>
        public static FirewallSKU Basic { get; } = new FirewallSKU("Basic");
        /// <summary>
        /// FirwallSKU Standard
        /// </summary>
        public static FirewallSKU Standard { get; } = new FirewallSKU("Standard");
        /// <summary>
        /// FirewallSKU Premium
        /// </summary>
        public static FirewallSKU Premium { get; } = new FirewallSKU("Premium");

        public static bool operator ==(FirewallSKU left, FirewallSKU right) => left.Equals(right);
        public static bool operator !=(FirewallSKU left, FirewallSKU right) => !left.Equals(right);

        public static explicit operator string(FirewallSKU value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallSKU other && Equals(other);
        public bool Equals(FirewallSKU other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Justification for entering or exiting Maintenance Mode
    /// </summary>
    [EnumType]
    public readonly struct Justification : IEquatable<Justification>
    {
        private readonly string _value;

        private Justification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Justification Networking { get; } = new Justification("Networking");
        public static Justification Governance { get; } = new Justification("Governance");
        public static Justification Off { get; } = new Justification("Off");

        public static bool operator ==(Justification left, Justification right) => left.Equals(right);
        public static bool operator !=(Justification left, Justification right) => !left.Equals(right);

        public static explicit operator string(Justification value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Justification other && Equals(other);
        public bool Equals(Justification other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current mode of Maintenance Mode Configuration
    /// </summary>
    [EnumType]
    public readonly struct Mode : IEquatable<Mode>
    {
        private readonly string _value;

        private Mode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Mode On { get; } = new Mode("On");
        public static Mode CanNotDelete { get; } = new Mode("CanNotDelete");
        public static Mode Off { get; } = new Mode("Off");
        public static Mode General { get; } = new Mode("General");
        public static Mode Advanced { get; } = new Mode("Advanced");

        public static bool operator ==(Mode left, Mode right) => left.Equals(right);
        public static bool operator !=(Mode left, Mode right) => !left.Equals(right);

        public static explicit operator string(Mode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Mode other && Equals(other);
        public bool Equals(Mode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
    /// </summary>
    [EnumType]
    public readonly struct Option : IEquatable<Option>
    {
        private readonly string _value;

        private Option(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Option Allow { get; } = new Option("Allow");
        public static Option Deny { get; } = new Option("Deny");
        public static Option ExceptionOnly { get; } = new Option("ExceptionOnly");
        public static Option NotApplicable { get; } = new Option("NotApplicable");

        public static bool operator ==(Option left, Option right) => left.Equals(right);
        public static bool operator !=(Option left, Option right) => !left.Equals(right);

        public static explicit operator string(Option value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Option other && Equals(other);
        public bool Equals(Option other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enforcement mode for policy. AuditOnly, Enforce, or None.
    /// </summary>
    [EnumType]
    public readonly struct PolicyAction : IEquatable<PolicyAction>
    {
        private readonly string _value;

        private PolicyAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyAction AuditOnly { get; } = new PolicyAction("AuditOnly");
        public static PolicyAction Enforce { get; } = new PolicyAction("Enforce");
        public static PolicyAction None { get; } = new PolicyAction("None");

        public static bool operator ==(PolicyAction left, PolicyAction right) => left.Equals(right);
        public static bool operator !=(PolicyAction left, PolicyAction right) => !left.Equals(right);

        public static explicit operator string(PolicyAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyAction other && Equals(other);
        public bool Equals(PolicyAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
    /// </summary>
    [EnumType]
    public readonly struct PolicyOverride : IEquatable<PolicyOverride>
    {
        private readonly string _value;

        private PolicyOverride(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyOverride Enclave { get; } = new PolicyOverride("Enclave");
        public static PolicyOverride None { get; } = new PolicyOverride("None");

        public static bool operator ==(PolicyOverride left, PolicyOverride right) => left.Equals(right);
        public static bool operator !=(PolicyOverride left, PolicyOverride right) => !left.Equals(right);

        public static explicit operator string(PolicyOverride value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyOverride other && Equals(other);
        public bool Equals(PolicyOverride other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Service ID
    /// </summary>
    [EnumType]
    public readonly struct ServiceIdentifier : IEquatable<ServiceIdentifier>
    {
        private readonly string _value;

        private ServiceIdentifier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Service identifier for AKS
        /// </summary>
        public static ServiceIdentifier AKS { get; } = new ServiceIdentifier("AKS");
        /// <summary>
        /// Service identifier for App Service
        /// </summary>
        public static ServiceIdentifier AppService { get; } = new ServiceIdentifier("AppService");
        /// <summary>
        /// Service identifier for Azure Firewalls
        /// </summary>
        public static ServiceIdentifier AzureFirewalls { get; } = new ServiceIdentifier("AzureFirewalls");
        /// <summary>
        /// Service identifier for Container Registry
        /// </summary>
        public static ServiceIdentifier ContainerRegistry { get; } = new ServiceIdentifier("ContainerRegistry");
        /// <summary>
        /// Service identifier for CosmosDB
        /// </summary>
        public static ServiceIdentifier CosmosDB { get; } = new ServiceIdentifier("CosmosDB");
        /// <summary>
        /// Service identifier for Data Connectors
        /// </summary>
        public static ServiceIdentifier DataConnectors { get; } = new ServiceIdentifier("DataConnectors");
        /// <summary>
        /// Service identifier for Insights
        /// </summary>
        public static ServiceIdentifier Insights { get; } = new ServiceIdentifier("Insights");
        /// <summary>
        /// Service identifier for Key Vault
        /// </summary>
        public static ServiceIdentifier KeyVault { get; } = new ServiceIdentifier("KeyVault");
        /// <summary>
        /// Service identifier for Logic
        /// </summary>
        public static ServiceIdentifier Logic { get; } = new ServiceIdentifier("Logic");
        /// <summary>
        /// Service identifier for Microsoft SQL
        /// </summary>
        public static ServiceIdentifier MicrosoftSql { get; } = new ServiceIdentifier("MicrosoftSQL");
        /// <summary>
        /// Service identifier for Monitoring
        /// </summary>
        public static ServiceIdentifier Monitoring { get; } = new ServiceIdentifier("Monitoring");
        /// <summary>
        /// Service identifier for PostgreSQL
        /// </summary>
        public static ServiceIdentifier PostgreSql { get; } = new ServiceIdentifier("PostgreSQL");
        /// <summary>
        /// Service identifier for Private DNS Zones
        /// </summary>
        public static ServiceIdentifier PrivateDNSZones { get; } = new ServiceIdentifier("PrivateDNSZones");
        /// <summary>
        /// Service identifier for Service Bus
        /// </summary>
        public static ServiceIdentifier ServiceBus { get; } = new ServiceIdentifier("ServiceBus");
        /// <summary>
        /// Service identifier for Storage
        /// </summary>
        public static ServiceIdentifier Storage { get; } = new ServiceIdentifier("Storage");

        public static bool operator ==(ServiceIdentifier left, ServiceIdentifier right) => left.Equals(right);
        public static bool operator !=(ServiceIdentifier left, ServiceIdentifier right) => !left.Equals(right);

        public static explicit operator string(ServiceIdentifier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceIdentifier other && Equals(other);
        public bool Equals(ServiceIdentifier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the transitHub.
    /// </summary>
    [EnumType]
    public readonly struct TransitHubState : IEquatable<TransitHubState>
    {
        private readonly string _value;

        private TransitHubState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// TransitHubState Type PendingApproval
        /// </summary>
        public static TransitHubState PendingApproval { get; } = new TransitHubState("PendingApproval");
        /// <summary>
        /// TransitHubState Type Approved
        /// </summary>
        public static TransitHubState Approved { get; } = new TransitHubState("Approved");
        /// <summary>
        /// TransitHubState Type PendingUpdate
        /// </summary>
        public static TransitHubState PendingUpdate { get; } = new TransitHubState("PendingUpdate");
        /// <summary>
        /// TransitHubState Type Active
        /// </summary>
        public static TransitHubState Active { get; } = new TransitHubState("Active");
        /// <summary>
        /// TransitHubState Type Failed
        /// </summary>
        public static TransitHubState Failed { get; } = new TransitHubState("Failed");

        public static bool operator ==(TransitHubState left, TransitHubState right) => left.Equals(right);
        public static bool operator !=(TransitHubState left, TransitHubState right) => !left.Equals(right);

        public static explicit operator string(TransitHubState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransitHubState other && Equals(other);
        public bool Equals(TransitHubState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Transit Option Type.
    /// </summary>
    [EnumType]
    public readonly struct TransitOptionType : IEquatable<TransitOptionType>
    {
        private readonly string _value;

        private TransitOptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// TransitOptionType ExpressRoute
        /// </summary>
        public static TransitOptionType ExpressRoute { get; } = new TransitOptionType("ExpressRoute");
        /// <summary>
        /// TransitOptionType Gateway
        /// </summary>
        public static TransitOptionType Gateway { get; } = new TransitOptionType("Gateway");
        /// <summary>
        /// TransitOptionType Peering
        /// </summary>
        public static TransitOptionType Peering { get; } = new TransitOptionType("Peering");

        public static bool operator ==(TransitOptionType left, TransitOptionType right) => left.Equals(right);
        public static bool operator !=(TransitOptionType left, TransitOptionType right) => !left.Equals(right);

        public static explicit operator string(TransitOptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransitOptionType other && Equals(other);
        public bool Equals(TransitOptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the object id. We currently allow users, groups, and service principals
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type User { get; } = new Type("User");
        public static Type Group { get; } = new Type("Group");
        public static Type ServicePrincipal { get; } = new Type("ServicePrincipal");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
