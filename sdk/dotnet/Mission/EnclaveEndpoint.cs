// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    /// <summary>
    /// EnclaveEndpoint Model Resource
    /// 
    /// Uses Azure REST API version 2024-12-01-preview.
    /// 
    /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:mission:EnclaveEndpoint")]
    public partial class EnclaveEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning State.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// List of resource ids created by community endpoint.
        /// </summary>
        [Output("resourceCollection")]
        public Output<ImmutableArray<string>> ResourceCollection { get; private set; } = null!;

        /// <summary>
        /// Enclave Endpoint Rule Collection.
        /// </summary>
        [Output("ruleCollection")]
        public Output<ImmutableArray<Outputs.EnclaveEndpointDestinationRuleResponse>> RuleCollection { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EnclaveEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnclaveEndpoint(string name, EnclaveEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure-native:mission:EnclaveEndpoint", name, args ?? new EnclaveEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnclaveEndpoint(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:mission:EnclaveEndpoint", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20240601preview:EnclaveEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20241201preview:EnclaveEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20250501preview:EnclaveEndpoint" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnclaveEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnclaveEndpoint Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EnclaveEndpoint(name, id, options);
        }
    }

    public sealed class EnclaveEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Enclave Endpoint Resource
        /// </summary>
        [Input("enclaveEndpointName")]
        public Input<string>? EnclaveEndpointName { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("ruleCollection", required: true)]
        private InputList<Inputs.EnclaveEndpointDestinationRuleArgs>? _ruleCollection;

        /// <summary>
        /// Enclave Endpoint Rule Collection.
        /// </summary>
        public InputList<Inputs.EnclaveEndpointDestinationRuleArgs> RuleCollection
        {
            get => _ruleCollection ?? (_ruleCollection = new InputList<Inputs.EnclaveEndpointDestinationRuleArgs>());
            set => _ruleCollection = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName", required: true)]
        public Input<string> VirtualEnclaveName { get; set; } = null!;

        public EnclaveEndpointArgs()
        {
        }
        public static new EnclaveEndpointArgs Empty => new EnclaveEndpointArgs();
    }
}
