// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    /// <summary>
    /// Community Model Resource
    /// 
    /// Uses Azure REST API version 2025-05-01-preview.
    /// 
    /// Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:mission:Community")]
    public partial class Community : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Address Space.
        /// </summary>
        [Output("addressSpace")]
        public Output<string?> AddressSpace { get; private set; } = null!;

        /// <summary>
        /// Approval requirements for various actions on the community's resources.
        /// </summary>
        [Output("approvalSettings")]
        public Output<Outputs.ApprovalSettingsResponse?> ApprovalSettings { get; private set; } = null!;

        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Community role assignments
        /// </summary>
        [Output("communityRoleAssignments")]
        public Output<ImmutableArray<Outputs.RoleAssignmentItemResponse>> CommunityRoleAssignments { get; private set; } = null!;

        /// <summary>
        /// DNS Servers.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        /// </summary>
        [Output("firewallSku")]
        public Output<string?> FirewallSku { get; private set; } = null!;

        /// <summary>
        /// List of services governed by a community.
        /// </summary>
        [Output("governedServiceList")]
        public Output<ImmutableArray<Outputs.GovernedServiceItemResponse>> GovernedServiceList { get; private set; } = null!;

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        [Output("maintenanceModeConfiguration")]
        public Output<Outputs.MaintenanceModeConfigurationModelResponse?> MaintenanceModeConfiguration { get; private set; } = null!;

        /// <summary>
        /// Managed On Behalf Of Configuration.
        /// </summary>
        [Output("managedOnBehalfOfConfiguration")]
        public Output<Outputs.ManagedOnBehalfOfConfigurationResponse> ManagedOnBehalfOfConfiguration { get; private set; } = null!;

        /// <summary>
        /// Managed resource group name.
        /// </summary>
        [Output("managedResourceGroupName")]
        public Output<string> ManagedResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        /// </summary>
        [Output("policyOverride")]
        public Output<string?> PolicyOverride { get; private set; } = null!;

        /// <summary>
        /// Provisioning State.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// List of resource ids created by communities.
        /// </summary>
        [Output("resourceCollection")]
        public Output<ImmutableArray<string>> ResourceCollection { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Community resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Community(string name, CommunityArgs args, CustomResourceOptions? options = null)
            : base("azure-native:mission:Community", name, args ?? new CommunityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Community(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:mission:Community", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20240601preview:Community" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20241201preview:Community" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20250501preview:Community" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Community resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Community Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Community(name, id, options);
        }
    }

    public sealed class CommunityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address Space.
        /// </summary>
        [Input("addressSpace")]
        public Input<string>? AddressSpace { get; set; }

        /// <summary>
        /// Approval requirements for various actions on the community's resources.
        /// </summary>
        [Input("approvalSettings")]
        public Input<Inputs.ApprovalSettingsArgs>? ApprovalSettings { get; set; }

        /// <summary>
        /// The name of the communityResource Resource
        /// </summary>
        [Input("communityName")]
        public Input<string>? CommunityName { get; set; }

        [Input("communityRoleAssignments")]
        private InputList<Inputs.RoleAssignmentItemArgs>? _communityRoleAssignments;

        /// <summary>
        /// Community role assignments
        /// </summary>
        public InputList<Inputs.RoleAssignmentItemArgs> CommunityRoleAssignments
        {
            get => _communityRoleAssignments ?? (_communityRoleAssignments = new InputList<Inputs.RoleAssignmentItemArgs>());
            set => _communityRoleAssignments = value;
        }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// DNS Servers.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
        /// </summary>
        [Input("firewallSku")]
        public InputUnion<string, Pulumi.AzureNative.Mission.FirewallSKU>? FirewallSku { get; set; }

        [Input("governedServiceList")]
        private InputList<Inputs.GovernedServiceItemArgs>? _governedServiceList;

        /// <summary>
        /// List of services governed by a community.
        /// </summary>
        public InputList<Inputs.GovernedServiceItemArgs> GovernedServiceList
        {
            get => _governedServiceList ?? (_governedServiceList = new InputList<Inputs.GovernedServiceItemArgs>());
            set => _governedServiceList = value;
        }

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        [Input("maintenanceModeConfiguration")]
        public Input<Inputs.MaintenanceModeConfigurationModelArgs>? MaintenanceModeConfiguration { get; set; }

        /// <summary>
        /// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
        /// </summary>
        [Input("policyOverride")]
        public InputUnion<string, Pulumi.AzureNative.Mission.PolicyOverride>? PolicyOverride { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CommunityArgs()
        {
            FirewallSku = "Standard";
        }
        public static new CommunityArgs Empty => new CommunityArgs();
    }
}
