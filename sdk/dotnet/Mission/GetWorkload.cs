// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    public static class GetWorkload
    {
        /// <summary>
        /// Get a WorkloadResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetWorkloadResult> InvokeAsync(GetWorkloadArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkloadResult>("azure-native:mission:getWorkload", args ?? new GetWorkloadArgs(), options.WithDefaults());

        /// <summary>
        /// Get a WorkloadResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetWorkloadResult> Invoke(GetWorkloadInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkloadResult>("azure-native:mission:getWorkload", args ?? new GetWorkloadInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a WorkloadResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetWorkloadResult> Invoke(GetWorkloadInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkloadResult>("azure-native:mission:getWorkload", args ?? new GetWorkloadInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkloadArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName", required: true)]
        public string VirtualEnclaveName { get; set; } = null!;

        /// <summary>
        /// The name of the workloadResource Resource
        /// </summary>
        [Input("workloadName", required: true)]
        public string WorkloadName { get; set; } = null!;

        public GetWorkloadArgs()
        {
        }
        public static new GetWorkloadArgs Empty => new GetWorkloadArgs();
    }

    public sealed class GetWorkloadInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName", required: true)]
        public Input<string> VirtualEnclaveName { get; set; } = null!;

        /// <summary>
        /// The name of the workloadResource Resource
        /// </summary>
        [Input("workloadName", required: true)]
        public Input<string> WorkloadName { get; set; } = null!;

        public GetWorkloadInvokeArgs()
        {
        }
        public static new GetWorkloadInvokeArgs Empty => new GetWorkloadInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkloadResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning State.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of resource group ids.
        /// </summary>
        public readonly ImmutableArray<string> ResourceGroupCollection;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWorkloadResult(
            string azureApiVersion,

            string id,

            string location,

            string name,

            string provisioningState,

            ImmutableArray<string> resourceGroupCollection,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ResourceGroupCollection = resourceGroupCollection;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
