// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    public static class GetCommunity
    {
        /// <summary>
        /// Get a CommunityResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetCommunityResult> InvokeAsync(GetCommunityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCommunityResult>("azure-native:mission:getCommunity", args ?? new GetCommunityArgs(), options.WithDefaults());

        /// <summary>
        /// Get a CommunityResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetCommunityResult> Invoke(GetCommunityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommunityResult>("azure-native:mission:getCommunity", args ?? new GetCommunityInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a CommunityResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetCommunityResult> Invoke(GetCommunityInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommunityResult>("azure-native:mission:getCommunity", args ?? new GetCommunityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCommunityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the communityResource Resource
        /// </summary>
        [Input("communityName", required: true)]
        public string CommunityName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCommunityArgs()
        {
        }
        public static new GetCommunityArgs Empty => new GetCommunityArgs();
    }

    public sealed class GetCommunityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the communityResource Resource
        /// </summary>
        [Input("communityName", required: true)]
        public Input<string> CommunityName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCommunityInvokeArgs()
        {
        }
        public static new GetCommunityInvokeArgs Empty => new GetCommunityInvokeArgs();
    }


    [OutputType]
    public sealed class GetCommunityResult
    {
        /// <summary>
        /// Address Space.
        /// </summary>
        public readonly string? AddressSpace;
        /// <summary>
        /// Approval requirements for various actions on the community's resources.
        /// </summary>
        public readonly Outputs.ApprovalSettingsResponse? ApprovalSettings;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Community role assignments
        /// </summary>
        public readonly ImmutableArray<Outputs.RoleAssignmentItemResponse> CommunityRoleAssignments;
        /// <summary>
        /// DNS Servers.
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// List of services governed by a community.
        /// </summary>
        public readonly ImmutableArray<Outputs.GovernedServiceItemResponse> GovernedServiceList;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        public readonly Outputs.MaintenanceModeConfigurationModelResponse? MaintenanceModeConfiguration;
        /// <summary>
        /// Managed resource group name.
        /// </summary>
        public readonly Outputs.ManagedResourceGroupConfigurationResponse ManagedResourceGroupConfiguration;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning State.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of resource ids created by communities.
        /// </summary>
        public readonly ImmutableArray<string> ResourceCollection;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCommunityResult(
            string? addressSpace,

            Outputs.ApprovalSettingsResponse? approvalSettings,

            string azureApiVersion,

            ImmutableArray<Outputs.RoleAssignmentItemResponse> communityRoleAssignments,

            ImmutableArray<string> dnsServers,

            ImmutableArray<Outputs.GovernedServiceItemResponse> governedServiceList,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string location,

            Outputs.MaintenanceModeConfigurationModelResponse? maintenanceModeConfiguration,

            Outputs.ManagedResourceGroupConfigurationResponse managedResourceGroupConfiguration,

            string name,

            string provisioningState,

            ImmutableArray<string> resourceCollection,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AddressSpace = addressSpace;
            ApprovalSettings = approvalSettings;
            AzureApiVersion = azureApiVersion;
            CommunityRoleAssignments = communityRoleAssignments;
            DnsServers = dnsServers;
            GovernedServiceList = governedServiceList;
            Id = id;
            Identity = identity;
            Location = location;
            MaintenanceModeConfiguration = maintenanceModeConfiguration;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            Name = name;
            ProvisioningState = provisioningState;
            ResourceCollection = resourceCollection;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
