// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    public static class GetVirtualEnclave
    {
        /// <summary>
        /// Get a EnclaveResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetVirtualEnclaveResult> InvokeAsync(GetVirtualEnclaveArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualEnclaveResult>("azure-native:mission:getVirtualEnclave", args ?? new GetVirtualEnclaveArgs(), options.WithDefaults());

        /// <summary>
        /// Get a EnclaveResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetVirtualEnclaveResult> Invoke(GetVirtualEnclaveInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualEnclaveResult>("azure-native:mission:getVirtualEnclave", args ?? new GetVirtualEnclaveInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a EnclaveResource
        /// 
        /// Uses Azure REST API version 2024-12-01-preview.
        /// 
        /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetVirtualEnclaveResult> Invoke(GetVirtualEnclaveInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualEnclaveResult>("azure-native:mission:getVirtualEnclave", args ?? new GetVirtualEnclaveInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualEnclaveArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName", required: true)]
        public string VirtualEnclaveName { get; set; } = null!;

        public GetVirtualEnclaveArgs()
        {
        }
        public static new GetVirtualEnclaveArgs Empty => new GetVirtualEnclaveArgs();
    }

    public sealed class GetVirtualEnclaveInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName", required: true)]
        public Input<string> VirtualEnclaveName { get; set; } = null!;

        public GetVirtualEnclaveInvokeArgs()
        {
        }
        public static new GetVirtualEnclaveInvokeArgs Empty => new GetVirtualEnclaveInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualEnclaveResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Deploy Bastion service (True or False).
        /// </summary>
        public readonly bool? BastionEnabled;
        /// <summary>
        /// Community Resource Id.
        /// </summary>
        public readonly string CommunityResourceId;
        /// <summary>
        /// Enclave Address Spaces
        /// </summary>
        public readonly Outputs.EnclaveAddressSpacesModelResponse EnclaveAddressSpaces;
        /// <summary>
        /// Enclave default settings.
        /// </summary>
        public readonly Outputs.EnclaveDefaultSettingsModelResponse? EnclaveDefaultSettings;
        /// <summary>
        /// Enclave role assignments
        /// </summary>
        public readonly ImmutableArray<Outputs.RoleAssignmentItemResponse> EnclaveRoleAssignments;
        /// <summary>
        /// Virtual Network.
        /// </summary>
        public readonly Outputs.EnclaveVirtualNetworkModelResponse EnclaveVirtualNetwork;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        public readonly Outputs.MaintenanceModeConfigurationModelResponse? MaintenanceModeConfiguration;
        /// <summary>
        /// Managed resource group name.
        /// </summary>
        public readonly Outputs.ManagedResourceGroupConfigurationResponse ManagedResourceGroupConfiguration;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning State.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// List of resource ids created by Virtual Enclave.
        /// </summary>
        public readonly ImmutableArray<string> ResourceCollection;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Workload role assignments
        /// </summary>
        public readonly ImmutableArray<Outputs.RoleAssignmentItemResponse> WorkloadRoleAssignments;

        [OutputConstructor]
        private GetVirtualEnclaveResult(
            string azureApiVersion,

            bool? bastionEnabled,

            string communityResourceId,

            Outputs.EnclaveAddressSpacesModelResponse enclaveAddressSpaces,

            Outputs.EnclaveDefaultSettingsModelResponse? enclaveDefaultSettings,

            ImmutableArray<Outputs.RoleAssignmentItemResponse> enclaveRoleAssignments,

            Outputs.EnclaveVirtualNetworkModelResponse enclaveVirtualNetwork,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string location,

            Outputs.MaintenanceModeConfigurationModelResponse? maintenanceModeConfiguration,

            Outputs.ManagedResourceGroupConfigurationResponse managedResourceGroupConfiguration,

            string name,

            string provisioningState,

            ImmutableArray<string> resourceCollection,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.RoleAssignmentItemResponse> workloadRoleAssignments)
        {
            AzureApiVersion = azureApiVersion;
            BastionEnabled = bastionEnabled;
            CommunityResourceId = communityResourceId;
            EnclaveAddressSpaces = enclaveAddressSpaces;
            EnclaveDefaultSettings = enclaveDefaultSettings;
            EnclaveRoleAssignments = enclaveRoleAssignments;
            EnclaveVirtualNetwork = enclaveVirtualNetwork;
            Id = id;
            Identity = identity;
            Location = location;
            MaintenanceModeConfiguration = maintenanceModeConfiguration;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            Name = name;
            ProvisioningState = provisioningState;
            ResourceCollection = resourceCollection;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            WorkloadRoleAssignments = workloadRoleAssignments;
        }
    }
}
