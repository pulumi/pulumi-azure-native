// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Mission
{
    /// <summary>
    /// Virtual Enclave Model Resource
    /// 
    /// Uses Azure REST API version 2024-12-01-preview.
    /// 
    /// Other available API versions: 2024-06-01-preview, 2025-05-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:mission:VirtualEnclave")]
    public partial class VirtualEnclave : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Deploy Bastion service (True or False).
        /// </summary>
        [Output("bastionEnabled")]
        public Output<bool?> BastionEnabled { get; private set; } = null!;

        /// <summary>
        /// Community Resource Id.
        /// </summary>
        [Output("communityResourceId")]
        public Output<string> CommunityResourceId { get; private set; } = null!;

        /// <summary>
        /// Enclave Address Spaces
        /// </summary>
        [Output("enclaveAddressSpaces")]
        public Output<Outputs.EnclaveAddressSpacesModelResponse> EnclaveAddressSpaces { get; private set; } = null!;

        /// <summary>
        /// Enclave default settings.
        /// </summary>
        [Output("enclaveDefaultSettings")]
        public Output<Outputs.EnclaveDefaultSettingsModelResponse?> EnclaveDefaultSettings { get; private set; } = null!;

        /// <summary>
        /// Enclave role assignments
        /// </summary>
        [Output("enclaveRoleAssignments")]
        public Output<ImmutableArray<Outputs.RoleAssignmentItemResponse>> EnclaveRoleAssignments { get; private set; } = null!;

        /// <summary>
        /// Virtual Network.
        /// </summary>
        [Output("enclaveVirtualNetwork")]
        public Output<Outputs.EnclaveVirtualNetworkModelResponse> EnclaveVirtualNetwork { get; private set; } = null!;

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        [Output("maintenanceModeConfiguration")]
        public Output<Outputs.MaintenanceModeConfigurationModelResponse?> MaintenanceModeConfiguration { get; private set; } = null!;

        /// <summary>
        /// Managed resource group name.
        /// </summary>
        [Output("managedResourceGroupConfiguration")]
        public Output<Outputs.ManagedResourceGroupConfigurationResponse> ManagedResourceGroupConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning State.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// List of resource ids created by Virtual Enclave.
        /// </summary>
        [Output("resourceCollection")]
        public Output<ImmutableArray<string>> ResourceCollection { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Workload role assignments
        /// </summary>
        [Output("workloadRoleAssignments")]
        public Output<ImmutableArray<Outputs.RoleAssignmentItemResponse>> WorkloadRoleAssignments { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualEnclave resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualEnclave(string name, VirtualEnclaveArgs args, CustomResourceOptions? options = null)
            : base("azure-native:mission:VirtualEnclave", name, args ?? new VirtualEnclaveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualEnclave(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:mission:VirtualEnclave", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20240601preview:VirtualEnclave" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20241201preview:VirtualEnclave" },
                    new global::Pulumi.Alias { Type = "azure-native:mission/v20250501preview:VirtualEnclave" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualEnclave resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualEnclave Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualEnclave(name, id, options);
        }
    }

    public sealed class VirtualEnclaveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deploy Bastion service (True or False).
        /// </summary>
        [Input("bastionEnabled")]
        public Input<bool>? BastionEnabled { get; set; }

        /// <summary>
        /// Community Resource Id.
        /// </summary>
        [Input("communityResourceId", required: true)]
        public Input<string> CommunityResourceId { get; set; } = null!;

        /// <summary>
        /// Enclave default settings.
        /// </summary>
        [Input("enclaveDefaultSettings")]
        public Input<Inputs.EnclaveDefaultSettingsModelArgs>? EnclaveDefaultSettings { get; set; }

        [Input("enclaveRoleAssignments")]
        private InputList<Inputs.RoleAssignmentItemArgs>? _enclaveRoleAssignments;

        /// <summary>
        /// Enclave role assignments
        /// </summary>
        public InputList<Inputs.RoleAssignmentItemArgs> EnclaveRoleAssignments
        {
            get => _enclaveRoleAssignments ?? (_enclaveRoleAssignments = new InputList<Inputs.RoleAssignmentItemArgs>());
            set => _enclaveRoleAssignments = value;
        }

        /// <summary>
        /// Virtual Network.
        /// </summary>
        [Input("enclaveVirtualNetwork", required: true)]
        public Input<Inputs.EnclaveVirtualNetworkModelArgs> EnclaveVirtualNetwork { get; set; } = null!;

        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Maintenance Mode configuration.
        /// </summary>
        [Input("maintenanceModeConfiguration")]
        public Input<Inputs.MaintenanceModeConfigurationModelArgs>? MaintenanceModeConfiguration { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the enclaveResource Resource
        /// </summary>
        [Input("virtualEnclaveName")]
        public Input<string>? VirtualEnclaveName { get; set; }

        [Input("workloadRoleAssignments")]
        private InputList<Inputs.RoleAssignmentItemArgs>? _workloadRoleAssignments;

        /// <summary>
        /// Workload role assignments
        /// </summary>
        public InputList<Inputs.RoleAssignmentItemArgs> WorkloadRoleAssignments
        {
            get => _workloadRoleAssignments ?? (_workloadRoleAssignments = new InputList<Inputs.RoleAssignmentItemArgs>());
            set => _workloadRoleAssignments = value;
        }

        public VirtualEnclaveArgs()
        {
            BastionEnabled = false;
        }
        public static new VirtualEnclaveArgs Empty => new VirtualEnclaveArgs();
    }
}
