// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer
{
    public static class GetPipelineTopology
    {
        /// <summary>
        /// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
        /// 
        ///   - Parameters: list of user defined parameters that can be references across the topology nodes.
        ///   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
        ///   - Processors: list of nodes which perform data analysis or transformations.
        ///   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Task<GetPipelineTopologyResult> InvokeAsync(GetPipelineTopologyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPipelineTopologyResult>("azure-native:videoanalyzer:getPipelineTopology", args ?? new GetPipelineTopologyArgs(), options.WithDefaults());

        /// <summary>
        /// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
        /// 
        ///   - Parameters: list of user defined parameters that can be references across the topology nodes.
        ///   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
        ///   - Processors: list of nodes which perform data analysis or transformations.
        ///   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Output<GetPipelineTopologyResult> Invoke(GetPipelineTopologyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPipelineTopologyResult>("azure-native:videoanalyzer:getPipelineTopology", args ?? new GetPipelineTopologyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelineTopologyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// Pipeline topology unique identifier.
        /// </summary>
        [Input("pipelineTopologyName", required: true)]
        public string PipelineTopologyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPipelineTopologyArgs()
        {
        }
    }

    public sealed class GetPipelineTopologyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Pipeline topology unique identifier.
        /// </summary>
        [Input("pipelineTopologyName", required: true)]
        public Input<string> PipelineTopologyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPipelineTopologyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPipelineTopologyResult
    {
        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Topology kind.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.ParameterDeclarationResponse> Parameters;
        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        public readonly ImmutableArray<Outputs.EncoderProcessorResponse> Processors;
        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        public readonly ImmutableArray<Outputs.VideoSinkResponse> Sinks;
        /// <summary>
        /// Describes the properties of a SKU.
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        public readonly ImmutableArray<Union<Outputs.RtspSourceResponse, Outputs.VideoSourceResponse>> Sources;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPipelineTopologyResult(
            string? description,

            string id,

            string kind,

            string name,

            ImmutableArray<Outputs.ParameterDeclarationResponse> parameters,

            ImmutableArray<Outputs.EncoderProcessorResponse> processors,

            ImmutableArray<Outputs.VideoSinkResponse> sinks,

            Outputs.SkuResponse sku,

            ImmutableArray<Union<Outputs.RtspSourceResponse, Outputs.VideoSourceResponse>> sources,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Description = description;
            Id = id;
            Kind = kind;
            Name = name;
            Parameters = parameters;
            Processors = processors;
            Sinks = sinks;
            Sku = sku;
            Sources = sources;
            SystemData = systemData;
            Type = type;
        }
    }
}
