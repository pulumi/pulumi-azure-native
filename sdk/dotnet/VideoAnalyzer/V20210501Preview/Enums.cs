// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.VideoAnalyzer.V20210501Preview
{
    /// <summary>
    /// Elliptical curve algorithm to be used: ES256, ES384 or ES512.
    /// </summary>
    [EnumType]
    public readonly struct AccessPolicyEccAlgo : IEquatable<AccessPolicyEccAlgo>
    {
        private readonly string _value;

        private AccessPolicyEccAlgo(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ES265
        /// </summary>
        public static AccessPolicyEccAlgo ES256 { get; } = new AccessPolicyEccAlgo("ES256");
        /// <summary>
        /// ES384
        /// </summary>
        public static AccessPolicyEccAlgo ES384 { get; } = new AccessPolicyEccAlgo("ES384");
        /// <summary>
        /// ES512
        /// </summary>
        public static AccessPolicyEccAlgo ES512 { get; } = new AccessPolicyEccAlgo("ES512");

        public static bool operator ==(AccessPolicyEccAlgo left, AccessPolicyEccAlgo right) => left.Equals(right);
        public static bool operator !=(AccessPolicyEccAlgo left, AccessPolicyEccAlgo right) => !left.Equals(right);

        public static explicit operator string(AccessPolicyEccAlgo value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPolicyEccAlgo other && Equals(other);
        public bool Equals(AccessPolicyEccAlgo other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the access level granted by this policy.
    /// </summary>
    [EnumType]
    public readonly struct AccessPolicyRole : IEquatable<AccessPolicyRole>
    {
        private readonly string _value;

        private AccessPolicyRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Reader role allows for read-only operations to be performed through the client APIs.
        /// </summary>
        public static AccessPolicyRole Reader { get; } = new AccessPolicyRole("Reader");

        public static bool operator ==(AccessPolicyRole left, AccessPolicyRole right) => left.Equals(right);
        public static bool operator !=(AccessPolicyRole left, AccessPolicyRole right) => !left.Equals(right);

        public static explicit operator string(AccessPolicyRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPolicyRole other && Equals(other);
        public bool Equals(AccessPolicyRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// RSA algorithm to be used: RS256, RS384 or RS512.
    /// </summary>
    [EnumType]
    public readonly struct AccessPolicyRsaAlgo : IEquatable<AccessPolicyRsaAlgo>
    {
        private readonly string _value;

        private AccessPolicyRsaAlgo(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// RS256
        /// </summary>
        public static AccessPolicyRsaAlgo RS256 { get; } = new AccessPolicyRsaAlgo("RS256");
        /// <summary>
        /// RS384
        /// </summary>
        public static AccessPolicyRsaAlgo RS384 { get; } = new AccessPolicyRsaAlgo("RS384");
        /// <summary>
        /// RS512
        /// </summary>
        public static AccessPolicyRsaAlgo RS512 { get; } = new AccessPolicyRsaAlgo("RS512");

        public static bool operator ==(AccessPolicyRsaAlgo left, AccessPolicyRsaAlgo right) => left.Equals(right);
        public static bool operator !=(AccessPolicyRsaAlgo left, AccessPolicyRsaAlgo right) => !left.Equals(right);

        public static explicit operator string(AccessPolicyRsaAlgo value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPolicyRsaAlgo other && Equals(other);
        public bool Equals(AccessPolicyRsaAlgo other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of key used to encrypt the Account Key.
    /// </summary>
    [EnumType]
    public readonly struct AccountEncryptionKeyType : IEquatable<AccountEncryptionKeyType>
    {
        private readonly string _value;

        private AccountEncryptionKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Account Key is encrypted with a System Key.
        /// </summary>
        public static AccountEncryptionKeyType SystemKey { get; } = new AccountEncryptionKeyType("SystemKey");
        /// <summary>
        /// The Account Key is encrypted with a Customer Key.
        /// </summary>
        public static AccountEncryptionKeyType CustomerKey { get; } = new AccountEncryptionKeyType("CustomerKey");

        public static bool operator ==(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => left.Equals(right);
        public static bool operator !=(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => !left.Equals(right);

        public static explicit operator string(AccountEncryptionKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccountEncryptionKeyType other && Equals(other);
        public bool Equals(AccountEncryptionKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
