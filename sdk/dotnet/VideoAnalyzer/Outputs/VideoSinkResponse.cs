// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer.Outputs
{

    /// <summary>
    /// Video sink in a live topology allows for video and audio to be captured, optionally archived, and published via a video resource. If archiving is enabled, this results in a video of type 'archive'. If used in a batch topology, this allows for video and audio to be stored as a file, and published via a video resource of type 'file'
    /// </summary>
    [OutputType]
    public sealed class VideoSinkResponse
    {
        /// <summary>
        /// An array of upstream node references within the topology to be used as inputs for this node.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeInputResponse> Inputs;
        /// <summary>
        /// Node name. Must be unique within the topology.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.VideoAnalyzer.VideoSink'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Optional video properties to be used in case a new video resource needs to be created on the service.
        /// </summary>
        public readonly Outputs.VideoCreationPropertiesResponse? VideoCreationProperties;
        /// <summary>
        /// Name of a new or existing video resource used to capture and publish content. Note: if downstream of RTSP source, and if disableArchive is set to true, then no content is archived.
        /// </summary>
        public readonly string VideoName;
        /// <summary>
        /// Options to change how the video sink publishes content via the video resource. This property is only allowed for topologies where "kind" is set to "live".
        /// </summary>
        public readonly Outputs.VideoPublishingOptionsResponse? VideoPublishingOptions;

        [OutputConstructor]
        private VideoSinkResponse(
            ImmutableArray<Outputs.NodeInputResponse> inputs,

            string name,

            string type,

            Outputs.VideoCreationPropertiesResponse? videoCreationProperties,

            string videoName,

            Outputs.VideoPublishingOptionsResponse? videoPublishingOptions)
        {
            Inputs = inputs;
            Name = name;
            Type = type;
            VideoCreationProperties = videoCreationProperties;
            VideoName = videoName;
            VideoPublishingOptions = videoPublishingOptions;
        }
    }
}
