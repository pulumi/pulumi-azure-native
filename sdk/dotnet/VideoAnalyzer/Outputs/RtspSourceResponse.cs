// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer.Outputs
{

    /// <summary>
    /// RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline.
    /// </summary>
    [OutputType]
    public sealed class RtspSourceResponse
    {
        /// <summary>
        /// RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers.
        /// </summary>
        public readonly Union<Outputs.TlsEndpointResponse, Outputs.UnsecuredEndpointResponse> Endpoint;
        /// <summary>
        /// Node name. Must be unique within the topology.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
        /// </summary>
        public readonly string? Transport;
        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.VideoAnalyzer.RtspSource'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private RtspSourceResponse(
            Union<Outputs.TlsEndpointResponse, Outputs.UnsecuredEndpointResponse> endpoint,

            string name,

            string? transport,

            string type)
        {
            Endpoint = endpoint;
            Name = name;
            Transport = transport;
            Type = type;
        }
    }
}
