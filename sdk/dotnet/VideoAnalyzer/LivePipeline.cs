// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer
{
    /// <summary>
    /// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of content for a unique RTSP camera.
    /// API Version: 2021-11-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:videoanalyzer:LivePipeline")]
    public partial class LivePipeline : Pulumi.CustomResource
    {
        /// <summary>
        /// Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
        /// </summary>
        [Output("bitrateKbps")]
        public Output<int> BitrateKbps { get; private set; } = null!;

        /// <summary>
        /// An optional description for the pipeline.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.ParameterDefinitionResponse>> Parameters { get; private set; } = null!;

        /// <summary>
        /// Current state of the pipeline (read-only).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition.
        /// </summary>
        [Output("topologyName")]
        public Output<string> TopologyName { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a LivePipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LivePipeline(string name, LivePipelineArgs args, CustomResourceOptions? options = null)
            : base("azure-native:videoanalyzer:LivePipeline", name, args ?? new LivePipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LivePipeline(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:videoanalyzer:LivePipeline", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:videoanalyzer/v20211101preview:LivePipeline"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LivePipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LivePipeline Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new LivePipeline(name, id, options);
        }
    }

    public sealed class LivePipelineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
        /// </summary>
        [Input("bitrateKbps", required: true)]
        public Input<int> BitrateKbps { get; set; } = null!;

        /// <summary>
        /// An optional description for the pipeline.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Live pipeline unique identifier.
        /// </summary>
        [Input("livePipelineName")]
        public Input<string>? LivePipelineName { get; set; }

        [Input("parameters")]
        private InputList<Inputs.ParameterDefinitionArgs>? _parameters;

        /// <summary>
        /// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden.
        /// </summary>
        public InputList<Inputs.ParameterDefinitionArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.ParameterDefinitionArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition.
        /// </summary>
        [Input("topologyName", required: true)]
        public Input<string> TopologyName { get; set; } = null!;

        public LivePipelineArgs()
        {
        }
    }
}
