// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer
{
    public static class GetLivePipeline
    {
        /// <summary>
        /// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of content for a unique RTSP camera.
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Task<GetLivePipelineResult> InvokeAsync(GetLivePipelineArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLivePipelineResult>("azure-native:videoanalyzer:getLivePipeline", args ?? new GetLivePipelineArgs(), options.WithDefaults());

        /// <summary>
        /// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of content for a unique RTSP camera.
        /// API Version: 2021-11-01-preview.
        /// </summary>
        public static Output<GetLivePipelineResult> Invoke(GetLivePipelineInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLivePipelineResult>("azure-native:videoanalyzer:getLivePipeline", args ?? new GetLivePipelineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLivePipelineArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// Live pipeline unique identifier.
        /// </summary>
        [Input("livePipelineName", required: true)]
        public string LivePipelineName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLivePipelineArgs()
        {
        }
    }

    public sealed class GetLivePipelineInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Live pipeline unique identifier.
        /// </summary>
        [Input("livePipelineName", required: true)]
        public Input<string> LivePipelineName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLivePipelineInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLivePipelineResult
    {
        /// <summary>
        /// Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
        /// </summary>
        public readonly int BitrateKbps;
        /// <summary>
        /// An optional description for the pipeline.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden.
        /// </summary>
        public readonly ImmutableArray<Outputs.ParameterDefinitionResponse> Parameters;
        /// <summary>
        /// Current state of the pipeline (read-only).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition.
        /// </summary>
        public readonly string TopologyName;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLivePipelineResult(
            int bitrateKbps,

            string? description,

            string id,

            string name,

            ImmutableArray<Outputs.ParameterDefinitionResponse> parameters,

            string state,

            Outputs.SystemDataResponse systemData,

            string topologyName,

            string type)
        {
            BitrateKbps = bitrateKbps;
            Description = description;
            Id = id;
            Name = name;
            Parameters = parameters;
            State = state;
            SystemData = systemData;
            TopologyName = topologyName;
            Type = type;
        }
    }
}
