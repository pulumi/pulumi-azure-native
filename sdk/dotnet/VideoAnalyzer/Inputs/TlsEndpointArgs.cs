// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer.Inputs
{

    /// <summary>
    /// TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
    /// </summary>
    public sealed class TlsEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Credentials to be presented to the endpoint.
        /// </summary>
        [Input("credentials", required: true)]
        public Input<Inputs.UsernamePasswordCredentialsArgs> Credentials { get; set; } = null!;

        /// <summary>
        /// List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video Analyzer's list of trusted authorities should be used.
        /// </summary>
        [Input("trustedCertificates")]
        public Input<Inputs.PemCertificateListArgs>? TrustedCertificates { get; set; }

        /// <summary>
        /// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically used when the endpoint is behind a firewall.
        /// </summary>
        [Input("tunnel")]
        public Input<Inputs.SecureIotDeviceRemoteTunnelArgs>? Tunnel { get; set; }

        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.VideoAnalyzer.TlsEndpoint'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The endpoint URL for Video Analyzer to connect to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Validation options to use when authenticating a TLS connection. By default, strict validation is used.
        /// </summary>
        [Input("validationOptions")]
        public Input<Inputs.TlsValidationOptionsArgs>? ValidationOptions { get; set; }

        public TlsEndpointArgs()
        {
        }
        public static new TlsEndpointArgs Empty => new TlsEndpointArgs();
    }
}
