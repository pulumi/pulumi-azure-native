// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer.Inputs
{

    /// <summary>
    /// Properties for access validation based on JSON Web Tokens (JWT).
    /// </summary>
    public sealed class JwtAuthenticationArgs : global::Pulumi.ResourceArgs
    {
        [Input("audiences")]
        private InputList<string>? _audiences;

        /// <summary>
        /// List of expected token audiences. Token audience is valid if it matches at least one of the given values.
        /// </summary>
        public InputList<string> Audiences
        {
            get => _audiences ?? (_audiences = new InputList<string>());
            set => _audiences = value;
        }

        [Input("claims")]
        private InputList<Inputs.TokenClaimArgs>? _claims;

        /// <summary>
        /// List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
        /// </summary>
        public InputList<Inputs.TokenClaimArgs> Claims
        {
            get => _claims ?? (_claims = new InputList<Inputs.TokenClaimArgs>());
            set => _claims = value;
        }

        [Input("issuers")]
        private InputList<string>? _issuers;

        /// <summary>
        /// List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
        /// </summary>
        public InputList<string> Issuers
        {
            get => _issuers ?? (_issuers = new InputList<string>());
            set => _issuers = value;
        }

        [Input("keys")]
        private InputList<Union<Inputs.EccTokenKeyArgs, Inputs.RsaTokenKeyArgs>>? _keys;

        /// <summary>
        /// List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key.
        /// </summary>
        public InputList<Union<Inputs.EccTokenKeyArgs, Inputs.RsaTokenKeyArgs>> Keys
        {
            get => _keys ?? (_keys = new InputList<Union<Inputs.EccTokenKeyArgs, Inputs.RsaTokenKeyArgs>>());
            set => _keys = value;
        }

        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.VideoAnalyzer.JwtAuthentication'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public JwtAuthenticationArgs()
        {
        }
        public static new JwtAuthenticationArgs Empty => new JwtAuthenticationArgs();
    }
}
