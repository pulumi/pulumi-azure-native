// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VideoAnalyzer
{
    /// <summary>
    /// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
    /// 
    ///   - Parameters: list of user defined parameters that can be references across the topology nodes.
    ///   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
    ///   - Processors: list of nodes which perform data analysis or transformations.
    ///   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
    ///     API Version: 2021-11-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:videoanalyzer:PipelineTopology")]
    public partial class PipelineTopology : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Topology kind.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.ParameterDeclarationResponse>> Parameters { get; private set; } = null!;

        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        [Output("processors")]
        public Output<ImmutableArray<Outputs.EncoderProcessorResponse>> Processors { get; private set; } = null!;

        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        [Output("sinks")]
        public Output<ImmutableArray<Outputs.VideoSinkResponse>> Sinks { get; private set; } = null!;

        /// <summary>
        /// Describes the properties of a SKU.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse> Sku { get; private set; } = null!;

        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Union<Outputs.RtspSourceResponse, Outputs.VideoSourceResponse>>> Sources { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PipelineTopology resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PipelineTopology(string name, PipelineTopologyArgs args, CustomResourceOptions? options = null)
            : base("azure-native:videoanalyzer:PipelineTopology", name, args ?? new PipelineTopologyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PipelineTopology(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:videoanalyzer:PipelineTopology", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:videoanalyzer/v20211101preview:PipelineTopology"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PipelineTopology resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PipelineTopology Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PipelineTopology(name, id, options);
        }
    }

    public sealed class PipelineTopologyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Video Analyzer account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Topology kind.
        /// </summary>
        [Input("kind", required: true)]
        public InputUnion<string, Pulumi.AzureNative.VideoAnalyzer.Kind> Kind { get; set; } = null!;

        [Input("parameters")]
        private InputList<Inputs.ParameterDeclarationArgs>? _parameters;

        /// <summary>
        /// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
        /// </summary>
        public InputList<Inputs.ParameterDeclarationArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.ParameterDeclarationArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// Pipeline topology unique identifier.
        /// </summary>
        [Input("pipelineTopologyName")]
        public Input<string>? PipelineTopologyName { get; set; }

        [Input("processors")]
        private InputList<Inputs.EncoderProcessorArgs>? _processors;

        /// <summary>
        /// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
        /// </summary>
        public InputList<Inputs.EncoderProcessorArgs> Processors
        {
            get => _processors ?? (_processors = new InputList<Inputs.EncoderProcessorArgs>());
            set => _processors = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("sinks", required: true)]
        private InputList<Inputs.VideoSinkArgs>? _sinks;

        /// <summary>
        /// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
        /// </summary>
        public InputList<Inputs.VideoSinkArgs> Sinks
        {
            get => _sinks ?? (_sinks = new InputList<Inputs.VideoSinkArgs>());
            set => _sinks = value;
        }

        /// <summary>
        /// Describes the properties of a SKU.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.SkuArgs> Sku { get; set; } = null!;

        [Input("sources", required: true)]
        private InputList<Union<Inputs.RtspSourceArgs, Inputs.VideoSourceArgs>>? _sources;

        /// <summary>
        /// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
        /// </summary>
        public InputList<Union<Inputs.RtspSourceArgs, Inputs.VideoSourceArgs>> Sources
        {
            get => _sources ?? (_sources = new InputList<Union<Inputs.RtspSourceArgs, Inputs.VideoSourceArgs>>());
            set => _sources = value;
        }

        public PipelineTopologyArgs()
        {
        }
        public static new PipelineTopologyArgs Empty => new PipelineTopologyArgs();
    }
}
