// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AadIam.V20200701Preview
{
    public static class GetAzureADMetric
    {
        /// <summary>
        /// Gets a azureADMetrics instance with a given name.
        /// </summary>
        public static Task<GetAzureADMetricResult> InvokeAsync(GetAzureADMetricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzureADMetricResult>("azure-native:aadiam/v20200701preview:getAzureADMetric", args ?? new GetAzureADMetricArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a azureADMetrics instance with a given name.
        /// </summary>
        public static Output<GetAzureADMetricResult> Invoke(GetAzureADMetricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureADMetricResult>("azure-native:aadiam/v20200701preview:getAzureADMetric", args ?? new GetAzureADMetricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureADMetricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the azureADMetrics instance.
        /// </summary>
        [Input("azureADMetricsName", required: true)]
        public string AzureADMetricsName { get; set; } = null!;

        /// <summary>
        /// Name of an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAzureADMetricArgs()
        {
        }
        public static new GetAzureADMetricArgs Empty => new GetAzureADMetricArgs();
    }

    public sealed class GetAzureADMetricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the azureADMetrics instance.
        /// </summary>
        [Input("azureADMetricsName", required: true)]
        public Input<string> AzureADMetricsName { get; set; } = null!;

        /// <summary>
        /// Name of an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAzureADMetricInvokeArgs()
        {
        }
        public static new GetAzureADMetricInvokeArgs Empty => new GetAzureADMetricInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureADMetricResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly Outputs.AzureADMetricsPropertiesFormatResponse Properties;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAzureADMetricResult(
            string id,

            string location,

            string name,

            Outputs.AzureADMetricsPropertiesFormatResponse properties,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
