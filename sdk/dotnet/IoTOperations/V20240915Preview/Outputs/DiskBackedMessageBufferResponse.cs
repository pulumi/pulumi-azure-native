// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.V20240915Preview.Outputs
{

    /// <summary>
    /// DiskBackedMessageBuffer properties
    /// </summary>
    [OutputType]
    public sealed class DiskBackedMessageBufferResponse
    {
        /// <summary>
        /// Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer. See &lt;https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes&gt; for details.
        /// </summary>
        public readonly Outputs.VolumeClaimSpecResponse? EphemeralVolumeClaimSpec;
        /// <summary>
        /// The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See &lt;https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&gt; for details.
        /// </summary>
        public readonly string MaxSize;
        /// <summary>
        /// Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
        /// </summary>
        public readonly Outputs.VolumeClaimSpecResponse? PersistentVolumeClaimSpec;

        [OutputConstructor]
        private DiskBackedMessageBufferResponse(
            Outputs.VolumeClaimSpecResponse? ephemeralVolumeClaimSpec,

            string maxSize,

            Outputs.VolumeClaimSpecResponse? persistentVolumeClaimSpec)
        {
            EphemeralVolumeClaimSpec = ephemeralVolumeClaimSpec;
            MaxSize = maxSize;
            PersistentVolumeClaimSpec = persistentVolumeClaimSpec;
        }
    }
}
