// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.V20240701Preview.Outputs
{

    /// <summary>
    /// DataFlow BuiltIn Transformation properties
    /// </summary>
    [OutputType]
    public sealed class DataFlowBuiltInTransformationResponse
    {
        /// <summary>
        /// Enrich data from Broker State Store. Dataset references a key in Broker State Store.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataFlowBuiltInTransformationDatasetResponse> Datasets;
        /// <summary>
        /// Filters input record or datapoints based on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataFlowBuiltInTransformationFilterResponse> Filter;
        /// <summary>
        /// Maps input to output message.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataFlowBuiltInTransformationMapResponse> Map;
        /// <summary>
        /// Reference to the schema that describes the output of the transformation.
        /// </summary>
        public readonly string? SchemaRef;
        /// <summary>
        /// Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet. Default: Json
        /// </summary>
        public readonly string? SerializationFormat;

        [OutputConstructor]
        private DataFlowBuiltInTransformationResponse(
            ImmutableArray<Outputs.DataFlowBuiltInTransformationDatasetResponse> datasets,

            ImmutableArray<Outputs.DataFlowBuiltInTransformationFilterResponse> filter,

            ImmutableArray<Outputs.DataFlowBuiltInTransformationMapResponse> map,

            string? schemaRef,

            string? serializationFormat)
        {
            Datasets = datasets;
            Filter = filter;
            Map = map;
            SchemaRef = schemaRef;
            SerializationFormat = serializationFormat;
        }
    }
}
