// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.V20240701Preview.Inputs
{

    /// <summary>
    /// Automatic TLS server certificate management with cert-manager
    /// </summary>
    public sealed class AutomaticCertMethodArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// cert-manager issuerRef.
        /// </summary>
        [Input("issuerRef", required: true)]
        public Input<Inputs.CertManagerIssuerRefArgs> IssuerRef { get; set; } = null!;

        /// <summary>
        /// Type of certificate private key.
        /// </summary>
        [Input("privateKey")]
        public Input<Inputs.CertManagerPrivateKeyArgs>? PrivateKey { get; set; }

        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        /// </summary>
        [Input("renewBefore")]
        public Input<string>? RenewBefore { get; set; }

        /// <summary>
        /// Additional Subject Alternative Names (SANs) to include in the certificate.
        /// </summary>
        [Input("san")]
        public Input<Inputs.SanForCertArgs>? San { get; set; }

        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.
        /// </summary>
        [Input("secretRef")]
        public Input<string>? SecretRef { get; set; }

        public AutomaticCertMethodArgs()
        {
        }
        public static new AutomaticCertMethodArgs Empty => new AutomaticCertMethodArgs();
    }
}
