// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.IoTOperations.V20240815Preview
{
    /// <summary>
    /// Custom authentication configuration.
    /// </summary>
    [EnumType]
    public readonly struct BrokerAuthenticationMethod : IEquatable<BrokerAuthenticationMethod>
    {
        private readonly string _value;

        private BrokerAuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Custom authentication configuration.
        /// </summary>
        public static BrokerAuthenticationMethod Custom { get; } = new BrokerAuthenticationMethod("Custom");
        /// <summary>
        /// ServiceAccountToken authentication configuration.
        /// </summary>
        public static BrokerAuthenticationMethod ServiceAccountToken { get; } = new BrokerAuthenticationMethod("ServiceAccountToken");
        /// <summary>
        /// X.509 authentication configuration.
        /// </summary>
        public static BrokerAuthenticationMethod X509 { get; } = new BrokerAuthenticationMethod("X509");

        public static bool operator ==(BrokerAuthenticationMethod left, BrokerAuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(BrokerAuthenticationMethod left, BrokerAuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(BrokerAuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerAuthenticationMethod other && Equals(other);
        public bool Equals(BrokerAuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Memory profile of Broker.
    /// </summary>
    [EnumType]
    public readonly struct BrokerMemoryProfile : IEquatable<BrokerMemoryProfile>
    {
        private readonly string _value;

        private BrokerMemoryProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tiny memory profile.
        /// </summary>
        public static BrokerMemoryProfile Tiny { get; } = new BrokerMemoryProfile("Tiny");
        /// <summary>
        /// Low memory profile.
        /// </summary>
        public static BrokerMemoryProfile Low { get; } = new BrokerMemoryProfile("Low");
        /// <summary>
        /// Medium memory profile.
        /// </summary>
        public static BrokerMemoryProfile Medium { get; } = new BrokerMemoryProfile("Medium");
        /// <summary>
        /// High memory profile.
        /// </summary>
        public static BrokerMemoryProfile High { get; } = new BrokerMemoryProfile("High");

        public static bool operator ==(BrokerMemoryProfile left, BrokerMemoryProfile right) => left.Equals(right);
        public static bool operator !=(BrokerMemoryProfile left, BrokerMemoryProfile right) => !left.Equals(right);

        public static explicit operator string(BrokerMemoryProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerMemoryProfile other && Equals(other);
        public bool Equals(BrokerMemoryProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable or disable websockets.
    /// </summary>
    [EnumType]
    public readonly struct BrokerProtocolType : IEquatable<BrokerProtocolType>
    {
        private readonly string _value;

        private BrokerProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// protocol broker
        /// </summary>
        public static BrokerProtocolType Mqtt { get; } = new BrokerProtocolType("Mqtt");
        /// <summary>
        /// protocol websocket
        /// </summary>
        public static BrokerProtocolType WebSockets { get; } = new BrokerProtocolType("WebSockets");

        public static bool operator ==(BrokerProtocolType left, BrokerProtocolType right) => left.Equals(right);
        public static bool operator !=(BrokerProtocolType left, BrokerProtocolType right) => !left.Equals(right);

        public static explicit operator string(BrokerProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerProtocolType other && Equals(other);
        public bool Equals(BrokerProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
    /// </summary>
    [EnumType]
    public readonly struct BrokerResourceDefinitionMethods : IEquatable<BrokerResourceDefinitionMethods>
    {
        private readonly string _value;

        private BrokerResourceDefinitionMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Allowed Connecting to Broker
        /// </summary>
        public static BrokerResourceDefinitionMethods Connect { get; } = new BrokerResourceDefinitionMethods("Connect");
        /// <summary>
        /// Allowed Publishing to Broker
        /// </summary>
        public static BrokerResourceDefinitionMethods Publish { get; } = new BrokerResourceDefinitionMethods("Publish");
        /// <summary>
        /// Allowed Subscribing to Broker
        /// </summary>
        public static BrokerResourceDefinitionMethods Subscribe { get; } = new BrokerResourceDefinitionMethods("Subscribe");

        public static bool operator ==(BrokerResourceDefinitionMethods left, BrokerResourceDefinitionMethods right) => left.Equals(right);
        public static bool operator !=(BrokerResourceDefinitionMethods left, BrokerResourceDefinitionMethods right) => !left.Equals(right);

        public static explicit operator string(BrokerResourceDefinitionMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerResourceDefinitionMethods other && Equals(other);
        public bool Equals(BrokerResourceDefinitionMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// kind of issuer (Issuer or ClusterIssuer).
    /// </summary>
    [EnumType]
    public readonly struct CertManagerIssuerKind : IEquatable<CertManagerIssuerKind>
    {
        private readonly string _value;

        private CertManagerIssuerKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Issuer kind.
        /// </summary>
        public static CertManagerIssuerKind Issuer { get; } = new CertManagerIssuerKind("Issuer");
        /// <summary>
        /// ClusterIssuer kind.
        /// </summary>
        public static CertManagerIssuerKind ClusterIssuer { get; } = new CertManagerIssuerKind("ClusterIssuer");

        public static bool operator ==(CertManagerIssuerKind left, CertManagerIssuerKind right) => left.Equals(right);
        public static bool operator !=(CertManagerIssuerKind left, CertManagerIssuerKind right) => !left.Equals(right);

        public static explicit operator string(CertManagerIssuerKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertManagerIssuerKind other && Equals(other);
        public bool Equals(CertManagerIssuerKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Cloud event mapping config.
    /// </summary>
    [EnumType]
    public readonly struct CloudEventAttributeType : IEquatable<CloudEventAttributeType>
    {
        private readonly string _value;

        private CloudEventAttributeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Propagate type
        /// </summary>
        public static CloudEventAttributeType Propagate { get; } = new CloudEventAttributeType("Propagate");
        /// <summary>
        /// CreateOrRemap type
        /// </summary>
        public static CloudEventAttributeType CreateOrRemap { get; } = new CloudEventAttributeType("CreateOrRemap");

        public static bool operator ==(CloudEventAttributeType left, CloudEventAttributeType right) => left.Equals(right);
        public static bool operator !=(CloudEventAttributeType left, CloudEventAttributeType right) => !left.Equals(right);

        public static explicit operator string(CloudEventAttributeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudEventAttributeType other && Equals(other);
        public bool Equals(CloudEventAttributeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode of Authentication.
    /// </summary>
    [EnumType]
    public readonly struct DataLakeStorageAuthMethod : IEquatable<DataLakeStorageAuthMethod>
    {
        private readonly string _value;

        private DataLakeStorageAuthMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SystemAssignedManagedIdentity type
        /// </summary>
        public static DataLakeStorageAuthMethod SystemAssignedManagedIdentity { get; } = new DataLakeStorageAuthMethod("SystemAssignedManagedIdentity");
        /// <summary>
        /// UserAssignedManagedIdentity type
        /// </summary>
        public static DataLakeStorageAuthMethod UserAssignedManagedIdentity { get; } = new DataLakeStorageAuthMethod("UserAssignedManagedIdentity");
        /// <summary>
        /// AccessToken Option
        /// </summary>
        public static DataLakeStorageAuthMethod AccessToken { get; } = new DataLakeStorageAuthMethod("AccessToken");

        public static bool operator ==(DataLakeStorageAuthMethod left, DataLakeStorageAuthMethod right) => left.Equals(right);
        public static bool operator !=(DataLakeStorageAuthMethod left, DataLakeStorageAuthMethod right) => !left.Equals(right);

        public static explicit operator string(DataLakeStorageAuthMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataLakeStorageAuthMethod other && Equals(other);
        public bool Equals(DataLakeStorageAuthMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of SASL authentication. Can be PLAIN, SCRAM-SHA-256, or SCRAM-SHA-512.
    /// </summary>
    [EnumType]
    public readonly struct DataflowEndpointAuthenticationSaslType : IEquatable<DataflowEndpointAuthenticationSaslType>
    {
        private readonly string _value;

        private DataflowEndpointAuthenticationSaslType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// PLAIN Type
        /// </summary>
        public static DataflowEndpointAuthenticationSaslType Plain { get; } = new DataflowEndpointAuthenticationSaslType("Plain");
        /// <summary>
        /// SCRAM_SHA_256 Type
        /// </summary>
        public static DataflowEndpointAuthenticationSaslType ScramSha256 { get; } = new DataflowEndpointAuthenticationSaslType("ScramSha256");
        /// <summary>
        /// SCRAM_SHA_512 Type
        /// </summary>
        public static DataflowEndpointAuthenticationSaslType ScramSha512 { get; } = new DataflowEndpointAuthenticationSaslType("ScramSha512");

        public static bool operator ==(DataflowEndpointAuthenticationSaslType left, DataflowEndpointAuthenticationSaslType right) => left.Equals(right);
        public static bool operator !=(DataflowEndpointAuthenticationSaslType left, DataflowEndpointAuthenticationSaslType right) => !left.Equals(right);

        public static explicit operator string(DataflowEndpointAuthenticationSaslType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowEndpointAuthenticationSaslType other && Equals(other);
        public bool Equals(DataflowEndpointAuthenticationSaslType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of location of the data in the workspace. Can be either tables or files.
    /// </summary>
    [EnumType]
    public readonly struct DataflowEndpointFabricPathType : IEquatable<DataflowEndpointFabricPathType>
    {
        private readonly string _value;

        private DataflowEndpointFabricPathType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// FILES Type
        /// </summary>
        public static DataflowEndpointFabricPathType Files { get; } = new DataflowEndpointFabricPathType("Files");
        /// <summary>
        /// TABLES Type
        /// </summary>
        public static DataflowEndpointFabricPathType Tables { get; } = new DataflowEndpointFabricPathType("Tables");

        public static bool operator ==(DataflowEndpointFabricPathType left, DataflowEndpointFabricPathType right) => left.Equals(right);
        public static bool operator !=(DataflowEndpointFabricPathType left, DataflowEndpointFabricPathType right) => !left.Equals(right);

        public static explicit operator string(DataflowEndpointFabricPathType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowEndpointFabricPathType other && Equals(other);
        public bool Equals(DataflowEndpointFabricPathType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kafka acks. Can be all, one, or zero. No effect if the endpoint is used as a source.
    /// </summary>
    [EnumType]
    public readonly struct DataflowEndpointKafkaAcks : IEquatable<DataflowEndpointKafkaAcks>
    {
        private readonly string _value;

        private DataflowEndpointKafkaAcks(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ZERO Option
        /// </summary>
        public static DataflowEndpointKafkaAcks Zero { get; } = new DataflowEndpointKafkaAcks("Zero");
        /// <summary>
        /// ONE Option
        /// </summary>
        public static DataflowEndpointKafkaAcks One { get; } = new DataflowEndpointKafkaAcks("One");
        /// <summary>
        /// ALL Option
        /// </summary>
        public static DataflowEndpointKafkaAcks All { get; } = new DataflowEndpointKafkaAcks("All");

        public static bool operator ==(DataflowEndpointKafkaAcks left, DataflowEndpointKafkaAcks right) => left.Equals(right);
        public static bool operator !=(DataflowEndpointKafkaAcks left, DataflowEndpointKafkaAcks right) => !left.Equals(right);

        public static explicit operator string(DataflowEndpointKafkaAcks value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowEndpointKafkaAcks other && Equals(other);
        public bool Equals(DataflowEndpointKafkaAcks other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Compression. Can be none, gzip, lz4, or snappy. No effect if the endpoint is used as a source.
    /// </summary>
    [EnumType]
    public readonly struct DataflowEndpointKafkaCompression : IEquatable<DataflowEndpointKafkaCompression>
    {
        private readonly string _value;

        private DataflowEndpointKafkaCompression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// NONE Option
        /// </summary>
        public static DataflowEndpointKafkaCompression None { get; } = new DataflowEndpointKafkaCompression("None");
        /// <summary>
        /// Gzip Option
        /// </summary>
        public static DataflowEndpointKafkaCompression Gzip { get; } = new DataflowEndpointKafkaCompression("Gzip");
        /// <summary>
        /// SNAPPY Option
        /// </summary>
        public static DataflowEndpointKafkaCompression Snappy { get; } = new DataflowEndpointKafkaCompression("Snappy");
        /// <summary>
        /// LZ4 Option
        /// </summary>
        public static DataflowEndpointKafkaCompression Lz4 { get; } = new DataflowEndpointKafkaCompression("Lz4");

        public static bool operator ==(DataflowEndpointKafkaCompression left, DataflowEndpointKafkaCompression right) => left.Equals(right);
        public static bool operator !=(DataflowEndpointKafkaCompression left, DataflowEndpointKafkaCompression right) => !left.Equals(right);

        public static explicit operator string(DataflowEndpointKafkaCompression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowEndpointKafkaCompression other && Equals(other);
        public bool Equals(DataflowEndpointKafkaCompression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Partition handling strategy. Can be default or static. No effect if the endpoint is used as a source.
    /// </summary>
    [EnumType]
    public readonly struct DataflowEndpointKafkaPartitionStrategy : IEquatable<DataflowEndpointKafkaPartitionStrategy>
    {
        private readonly string _value;

        private DataflowEndpointKafkaPartitionStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default: Assigns messages to random partitions, using a round-robin algorithm.
        /// </summary>
        public static DataflowEndpointKafkaPartitionStrategy Default { get; } = new DataflowEndpointKafkaPartitionStrategy("Default");
        /// <summary>
        /// Static: Assigns messages to a fixed partition number that's derived from the instance ID of the dataflow.
        /// </summary>
        public static DataflowEndpointKafkaPartitionStrategy Static { get; } = new DataflowEndpointKafkaPartitionStrategy("Static");
        /// <summary>
        /// TOPIC Option
        /// </summary>
        public static DataflowEndpointKafkaPartitionStrategy Topic { get; } = new DataflowEndpointKafkaPartitionStrategy("Topic");
        /// <summary>
        /// PROPERTY Option
        /// </summary>
        public static DataflowEndpointKafkaPartitionStrategy Property { get; } = new DataflowEndpointKafkaPartitionStrategy("Property");

        public static bool operator ==(DataflowEndpointKafkaPartitionStrategy left, DataflowEndpointKafkaPartitionStrategy right) => left.Equals(right);
        public static bool operator !=(DataflowEndpointKafkaPartitionStrategy left, DataflowEndpointKafkaPartitionStrategy right) => !left.Equals(right);

        public static explicit operator string(DataflowEndpointKafkaPartitionStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowEndpointKafkaPartitionStrategy other && Equals(other);
        public bool Equals(DataflowEndpointKafkaPartitionStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of transformation.
    /// </summary>
    [EnumType]
    public readonly struct DataflowMappingType : IEquatable<DataflowMappingType>
    {
        private readonly string _value;

        private DataflowMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// New Properties type
        /// </summary>
        public static DataflowMappingType NewProperties { get; } = new DataflowMappingType("NewProperties");
        /// <summary>
        /// Rename type
        /// </summary>
        public static DataflowMappingType Rename { get; } = new DataflowMappingType("Rename");
        /// <summary>
        /// Compute type
        /// </summary>
        public static DataflowMappingType Compute { get; } = new DataflowMappingType("Compute");
        /// <summary>
        /// Pass-through type
        /// </summary>
        public static DataflowMappingType PassThrough { get; } = new DataflowMappingType("PassThrough");
        /// <summary>
        /// Built in function type
        /// </summary>
        public static DataflowMappingType BuiltInFunction { get; } = new DataflowMappingType("BuiltInFunction");

        public static bool operator ==(DataflowMappingType left, DataflowMappingType right) => left.Equals(right);
        public static bool operator !=(DataflowMappingType left, DataflowMappingType right) => !left.Equals(right);

        public static explicit operator string(DataflowMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataflowMappingType other && Equals(other);
        public bool Equals(DataflowMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Endpoint Type.
    /// </summary>
    [EnumType]
    public readonly struct EndpointType : IEquatable<EndpointType>
    {
        private readonly string _value;

        private EndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Data Explorer Type
        /// </summary>
        public static EndpointType DataExplorer { get; } = new EndpointType("DataExplorer");
        /// <summary>
        /// Azure Data Lake Type
        /// </summary>
        public static EndpointType DataLakeStorage { get; } = new EndpointType("DataLakeStorage");
        /// <summary>
        /// Microsoft Fabric Type
        /// </summary>
        public static EndpointType FabricOneLake { get; } = new EndpointType("FabricOneLake");
        /// <summary>
        /// Kafka Type
        /// </summary>
        public static EndpointType Kafka { get; } = new EndpointType("Kafka");
        /// <summary>
        /// Local Storage Type
        /// </summary>
        public static EndpointType LocalStorage { get; } = new EndpointType("LocalStorage");
        /// <summary>
        /// Broker Type
        /// </summary>
        public static EndpointType Mqtt { get; } = new EndpointType("Mqtt");

        public static bool operator ==(EndpointType left, EndpointType right) => left.Equals(right);
        public static bool operator !=(EndpointType left, EndpointType right) => !left.Equals(right);

        public static explicit operator string(EndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointType other && Equals(other);
        public bool Equals(EndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of ExtendedLocation.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationType : IEquatable<ExtendedLocationType>
    {
        private readonly string _value;

        private ExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// CustomLocation type
        /// </summary>
        public static ExtendedLocationType CustomLocation { get; } = new ExtendedLocationType("CustomLocation");

        public static bool operator ==(ExtendedLocationType left, ExtendedLocationType right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationType left, ExtendedLocationType right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationType other && Equals(other);
        public bool Equals(ExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of dataflow operation.
    /// </summary>
    [EnumType]
    public readonly struct FilterType : IEquatable<FilterType>
    {
        private readonly string _value;

        private FilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Filter type
        /// </summary>
        public static FilterType Filter { get; } = new FilterType("Filter");

        public static bool operator ==(FilterType left, FilterType right) => left.Equals(right);
        public static bool operator !=(FilterType left, FilterType right) => !left.Equals(right);

        public static explicit operator string(FilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterType other && Equals(other);
        public bool Equals(FilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode of Authentication.
    /// </summary>
    [EnumType]
    public readonly struct KafkaAuthMethod : IEquatable<KafkaAuthMethod>
    {
        private readonly string _value;

        private KafkaAuthMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SystemAssignedManagedIdentity type
        /// </summary>
        public static KafkaAuthMethod SystemAssignedManagedIdentity { get; } = new KafkaAuthMethod("SystemAssignedManagedIdentity");
        /// <summary>
        /// UserAssignedManagedIdentity type
        /// </summary>
        public static KafkaAuthMethod UserAssignedManagedIdentity { get; } = new KafkaAuthMethod("UserAssignedManagedIdentity");
        /// <summary>
        /// Sasl Option
        /// </summary>
        public static KafkaAuthMethod Sasl { get; } = new KafkaAuthMethod("Sasl");
        /// <summary>
        /// x509Certificate Option
        /// </summary>
        public static KafkaAuthMethod X509Certificate { get; } = new KafkaAuthMethod("X509Certificate");
        /// <summary>
        /// Anonymous Option
        /// </summary>
        public static KafkaAuthMethod Anonymous { get; } = new KafkaAuthMethod("Anonymous");

        public static bool operator ==(KafkaAuthMethod left, KafkaAuthMethod right) => left.Equals(right);
        public static bool operator !=(KafkaAuthMethod left, KafkaAuthMethod right) => !left.Equals(right);

        public static explicit operator string(KafkaAuthMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KafkaAuthMethod other && Equals(other);
        public bool Equals(KafkaAuthMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode of Authentication.
    /// </summary>
    [EnumType]
    public readonly struct MqttAuthMethod : IEquatable<MqttAuthMethod>
    {
        private readonly string _value;

        private MqttAuthMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SystemAssignedManagedIdentity type
        /// </summary>
        public static MqttAuthMethod SystemAssignedManagedIdentity { get; } = new MqttAuthMethod("SystemAssignedManagedIdentity");
        /// <summary>
        /// UserAssignedManagedIdentity type
        /// </summary>
        public static MqttAuthMethod UserAssignedManagedIdentity { get; } = new MqttAuthMethod("UserAssignedManagedIdentity");
        /// <summary>
        /// ServiceAccountToken Option
        /// </summary>
        public static MqttAuthMethod ServiceAccountToken { get; } = new MqttAuthMethod("ServiceAccountToken");
        /// <summary>
        /// x509Certificate Option
        /// </summary>
        public static MqttAuthMethod X509Certificate { get; } = new MqttAuthMethod("X509Certificate");
        /// <summary>
        /// Anonymous Option
        /// </summary>
        public static MqttAuthMethod Anonymous { get; } = new MqttAuthMethod("Anonymous");

        public static bool operator ==(MqttAuthMethod left, MqttAuthMethod right) => left.Equals(right);
        public static bool operator !=(MqttAuthMethod left, MqttAuthMethod right) => !left.Equals(right);

        public static explicit operator string(MqttAuthMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MqttAuthMethod other && Equals(other);
        public bool Equals(MqttAuthMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not to keep the retain setting.
    /// </summary>
    [EnumType]
    public readonly struct MqttRetainType : IEquatable<MqttRetainType>
    {
        private readonly string _value;

        private MqttRetainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Retain the messages.
        /// </summary>
        public static MqttRetainType Keep { get; } = new MqttRetainType("Keep");
        /// <summary>
        /// Never retain messages.
        /// </summary>
        public static MqttRetainType Never { get; } = new MqttRetainType("Never");

        public static bool operator ==(MqttRetainType left, MqttRetainType right) => left.Equals(right);
        public static bool operator !=(MqttRetainType left, MqttRetainType right) => !left.Equals(right);

        public static explicit operator string(MqttRetainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MqttRetainType other && Equals(other);
        public bool Equals(MqttRetainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of operation.
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Dataflow Source Operation
        /// </summary>
        public static OperationType Source { get; } = new OperationType("Source");
        /// <summary>
        /// Dataflow Destination Operation
        /// </summary>
        public static OperationType Destination { get; } = new OperationType("Destination");
        /// <summary>
        /// Dataflow BuiltIn Transformation Operation
        /// </summary>
        public static OperationType BuiltInTransformation { get; } = new OperationType("BuiltInTransformation");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This determines if the Schema Registry service is enabled.
    /// </summary>
    [EnumType]
    public readonly struct OperationalMode : IEquatable<OperationalMode>
    {
        private readonly string _value;

        private OperationalMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enabled is equivalent to True
        /// </summary>
        public static OperationalMode Enabled { get; } = new OperationalMode("Enabled");
        /// <summary>
        /// Disabled is equivalent to False.
        /// </summary>
        public static OperationalMode Disabled { get; } = new OperationalMode("Disabled");

        public static bool operator ==(OperationalMode left, OperationalMode right) => left.Equals(right);
        public static bool operator !=(OperationalMode left, OperationalMode right) => !left.Equals(right);

        public static explicit operator string(OperationalMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationalMode other && Equals(other);
        public bool Equals(OperationalMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    /// </summary>
    [EnumType]
    public readonly struct OperatorValues : IEquatable<OperatorValues>
    {
        private readonly string _value;

        private OperatorValues(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// In operator.
        /// </summary>
        public static OperatorValues In { get; } = new OperatorValues("In");
        /// <summary>
        /// NotIn operator.
        /// </summary>
        public static OperatorValues NotIn { get; } = new OperatorValues("NotIn");
        /// <summary>
        /// Exists operator.
        /// </summary>
        public static OperatorValues Exists { get; } = new OperatorValues("Exists");
        /// <summary>
        /// DoesNotExist operator.
        /// </summary>
        public static OperatorValues DoesNotExist { get; } = new OperatorValues("DoesNotExist");

        public static bool operator ==(OperatorValues left, OperatorValues right) => left.Equals(right);
        public static bool operator !=(OperatorValues left, OperatorValues right) => !left.Equals(right);

        public static explicit operator string(OperatorValues value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatorValues other && Equals(other);
        public bool Equals(OperatorValues other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// algorithm for private key.
    /// </summary>
    [EnumType]
    public readonly struct PrivateKeyAlgorithm : IEquatable<PrivateKeyAlgorithm>
    {
        private readonly string _value;

        private PrivateKeyAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Algorithm - ec256.
        /// </summary>
        public static PrivateKeyAlgorithm Ec256 { get; } = new PrivateKeyAlgorithm("Ec256");
        /// <summary>
        /// Algorithm - ec384.
        /// </summary>
        public static PrivateKeyAlgorithm Ec384 { get; } = new PrivateKeyAlgorithm("Ec384");
        /// <summary>
        /// Algorithm - ec521.
        /// </summary>
        public static PrivateKeyAlgorithm Ec521 { get; } = new PrivateKeyAlgorithm("Ec521");
        /// <summary>
        /// Algorithm - ed25519.
        /// </summary>
        public static PrivateKeyAlgorithm Ed25519 { get; } = new PrivateKeyAlgorithm("Ed25519");
        /// <summary>
        /// Algorithm - rsa2048.
        /// </summary>
        public static PrivateKeyAlgorithm Rsa2048 { get; } = new PrivateKeyAlgorithm("Rsa2048");
        /// <summary>
        /// Algorithm - rsa4096.
        /// </summary>
        public static PrivateKeyAlgorithm Rsa4096 { get; } = new PrivateKeyAlgorithm("Rsa4096");
        /// <summary>
        /// Algorithm - rsa8192.
        /// </summary>
        public static PrivateKeyAlgorithm Rsa8192 { get; } = new PrivateKeyAlgorithm("Rsa8192");

        public static bool operator ==(PrivateKeyAlgorithm left, PrivateKeyAlgorithm right) => left.Equals(right);
        public static bool operator !=(PrivateKeyAlgorithm left, PrivateKeyAlgorithm right) => !left.Equals(right);

        public static explicit operator string(PrivateKeyAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateKeyAlgorithm other && Equals(other);
        public bool Equals(PrivateKeyAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// cert-manager private key rotationPolicy.
    /// </summary>
    [EnumType]
    public readonly struct PrivateKeyRotationPolicy : IEquatable<PrivateKeyRotationPolicy>
    {
        private readonly string _value;

        private PrivateKeyRotationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Rotation Policy - Always.
        /// </summary>
        public static PrivateKeyRotationPolicy Always { get; } = new PrivateKeyRotationPolicy("Always");
        /// <summary>
        /// Rotation Policy - Never.
        /// </summary>
        public static PrivateKeyRotationPolicy Never { get; } = new PrivateKeyRotationPolicy("Never");

        public static bool operator ==(PrivateKeyRotationPolicy left, PrivateKeyRotationPolicy right) => left.Equals(right);
        public static bool operator !=(PrivateKeyRotationPolicy left, PrivateKeyRotationPolicy right) => !left.Equals(right);

        public static explicit operator string(PrivateKeyRotationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateKeyRotationPolicy other && Equals(other);
        public bool Equals(PrivateKeyRotationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kubernetes Service type of this listener.
    /// </summary>
    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cluster IP Service.
        /// </summary>
        public static ServiceType ClusterIp { get; } = new ServiceType("ClusterIp");
        /// <summary>
        /// Load Balancer Service.
        /// </summary>
        public static ServiceType LoadBalancer { get; } = new ServiceType("LoadBalancer");
        /// <summary>
        /// Node Port Service.
        /// </summary>
        public static ServiceType NodePort { get; } = new ServiceType("NodePort");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content is a JSON Schema. Allowed: JSON Schema/draft-7.
    /// </summary>
    [EnumType]
    public readonly struct SourceSerializationFormat : IEquatable<SourceSerializationFormat>
    {
        private readonly string _value;

        private SourceSerializationFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// JSON Format
        /// </summary>
        public static SourceSerializationFormat Json { get; } = new SourceSerializationFormat("Json");

        public static bool operator ==(SourceSerializationFormat left, SourceSerializationFormat right) => left.Equals(right);
        public static bool operator !=(SourceSerializationFormat left, SourceSerializationFormat right) => !left.Equals(right);

        public static explicit operator string(SourceSerializationFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceSerializationFormat other && Equals(other);
        public bool Equals(SourceSerializationFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Give access for `Read`, `Write` and `ReadWrite` access level.
    /// </summary>
    [EnumType]
    public readonly struct StateStoreResourceDefinitionMethods : IEquatable<StateStoreResourceDefinitionMethods>
    {
        private readonly string _value;

        private StateStoreResourceDefinitionMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Get/KeyNotify from Store
        /// </summary>
        public static StateStoreResourceDefinitionMethods Read { get; } = new StateStoreResourceDefinitionMethods("Read");
        /// <summary>
        /// Set/Delete in Store
        /// </summary>
        public static StateStoreResourceDefinitionMethods Write { get; } = new StateStoreResourceDefinitionMethods("Write");
        /// <summary>
        /// Allowed all operations on Store - Get/KeyNotify/Set/Delete
        /// </summary>
        public static StateStoreResourceDefinitionMethods ReadWrite { get; } = new StateStoreResourceDefinitionMethods("ReadWrite");

        public static bool operator ==(StateStoreResourceDefinitionMethods left, StateStoreResourceDefinitionMethods right) => left.Equals(right);
        public static bool operator !=(StateStoreResourceDefinitionMethods left, StateStoreResourceDefinitionMethods right) => !left.Equals(right);

        public static explicit operator string(StateStoreResourceDefinitionMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StateStoreResourceDefinitionMethods other && Equals(other);
        public bool Equals(StateStoreResourceDefinitionMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Allowed keyTypes pattern, string, binary. The key type used for matching, for example pattern tries to match the key to a glob-style pattern and string checks key is equal to value provided in keys.
    /// </summary>
    [EnumType]
    public readonly struct StateStoreResourceKeyTypes : IEquatable<StateStoreResourceKeyTypes>
    {
        private readonly string _value;

        private StateStoreResourceKeyTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Key type - pattern
        /// </summary>
        public static StateStoreResourceKeyTypes Pattern { get; } = new StateStoreResourceKeyTypes("Pattern");
        /// <summary>
        /// Key type - string
        /// </summary>
        public static StateStoreResourceKeyTypes String { get; } = new StateStoreResourceKeyTypes("String");
        /// <summary>
        /// Key type - binary
        /// </summary>
        public static StateStoreResourceKeyTypes Binary { get; } = new StateStoreResourceKeyTypes("Binary");

        public static bool operator ==(StateStoreResourceKeyTypes left, StateStoreResourceKeyTypes right) => left.Equals(right);
        public static bool operator !=(StateStoreResourceKeyTypes left, StateStoreResourceKeyTypes right) => !left.Equals(right);

        public static explicit operator string(StateStoreResourceKeyTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StateStoreResourceKeyTypes other && Equals(other);
        public bool Equals(StateStoreResourceKeyTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The strategy to use for dropping messages from the queue.
    /// </summary>
    [EnumType]
    public readonly struct SubscriberMessageDropStrategy : IEquatable<SubscriberMessageDropStrategy>
    {
        private readonly string _value;

        private SubscriberMessageDropStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Messages are never dropped.
        /// </summary>
        public static SubscriberMessageDropStrategy None { get; } = new SubscriberMessageDropStrategy("None");
        /// <summary>
        /// The oldest message is dropped.
        /// </summary>
        public static SubscriberMessageDropStrategy DropOldest { get; } = new SubscriberMessageDropStrategy("DropOldest");

        public static bool operator ==(SubscriberMessageDropStrategy left, SubscriberMessageDropStrategy right) => left.Equals(right);
        public static bool operator !=(SubscriberMessageDropStrategy left, SubscriberMessageDropStrategy right) => !left.Equals(right);

        public static explicit operator string(SubscriberMessageDropStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriberMessageDropStrategy other && Equals(other);
        public bool Equals(SubscriberMessageDropStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode of TLS server certificate management.
    /// </summary>
    [EnumType]
    public readonly struct TlsCertMethodMode : IEquatable<TlsCertMethodMode>
    {
        private readonly string _value;

        private TlsCertMethodMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatic TLS server certificate configuration.
        /// </summary>
        public static TlsCertMethodMode Automatic { get; } = new TlsCertMethodMode("Automatic");
        /// <summary>
        /// Manual TLS server certificate configuration.
        /// </summary>
        public static TlsCertMethodMode Manual { get; } = new TlsCertMethodMode("Manual");

        public static bool operator ==(TlsCertMethodMode left, TlsCertMethodMode right) => left.Equals(right);
        public static bool operator !=(TlsCertMethodMode left, TlsCertMethodMode right) => !left.Equals(right);

        public static explicit operator string(TlsCertMethodMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TlsCertMethodMode other && Equals(other);
        public bool Equals(TlsCertMethodMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet. Default: Json
    /// </summary>
    [EnumType]
    public readonly struct TransformationSerializationFormat : IEquatable<TransformationSerializationFormat>
    {
        private readonly string _value;

        private TransformationSerializationFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Delta Format
        /// </summary>
        public static TransformationSerializationFormat Delta { get; } = new TransformationSerializationFormat("Delta");
        /// <summary>
        /// JSON Format
        /// </summary>
        public static TransformationSerializationFormat Json { get; } = new TransformationSerializationFormat("Json");
        /// <summary>
        /// Parquet Format
        /// </summary>
        public static TransformationSerializationFormat Parquet { get; } = new TransformationSerializationFormat("Parquet");

        public static bool operator ==(TransformationSerializationFormat left, TransformationSerializationFormat right) => left.Equals(right);
        public static bool operator !=(TransformationSerializationFormat left, TransformationSerializationFormat right) => !left.Equals(right);

        public static explicit operator string(TransformationSerializationFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransformationSerializationFormat other && Equals(other);
        public bool Equals(TransformationSerializationFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
