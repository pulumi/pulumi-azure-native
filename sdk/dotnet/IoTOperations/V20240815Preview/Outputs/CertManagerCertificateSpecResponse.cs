// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.V20240815Preview.Outputs
{

    /// <summary>
    /// Automatic TLS server certificate management with cert-manager
    /// </summary>
    [OutputType]
    public sealed class CertManagerCertificateSpecResponse
    {
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        /// </summary>
        public readonly string? Duration;
        /// <summary>
        /// cert-manager issuerRef.
        /// </summary>
        public readonly Outputs.CertManagerIssuerRefResponse IssuerRef;
        /// <summary>
        /// Type of certificate private key.
        /// </summary>
        public readonly Outputs.CertManagerPrivateKeyResponse? PrivateKey;
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
        /// </summary>
        public readonly string? RenewBefore;
        /// <summary>
        /// Additional Subject Alternative Names (SANs) to include in the certificate.
        /// </summary>
        public readonly Outputs.SanForCertResponse? San;
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.
        /// </summary>
        public readonly string? SecretName;

        [OutputConstructor]
        private CertManagerCertificateSpecResponse(
            string? duration,

            Outputs.CertManagerIssuerRefResponse issuerRef,

            Outputs.CertManagerPrivateKeyResponse? privateKey,

            string? renewBefore,

            Outputs.SanForCertResponse? san,

            string? secretName)
        {
            Duration = duration;
            IssuerRef = issuerRef;
            PrivateKey = privateKey;
            RenewBefore = renewBefore;
            San = san;
            SecretName = secretName;
        }
    }
}
