// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.Inputs
{

    /// <summary>
    /// AkriConnectorsMqttConnectionConfiguration properties.
    /// </summary>
    public sealed class AkriConnectorsMqttConnectionConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication properties.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.AkriConnectorsServiceAccountAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// KeepAlive for connection in seconds.
        /// </summary>
        [Input("keepAliveSeconds")]
        public Input<int>? KeepAliveSeconds { get; set; }

        /// <summary>
        /// The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
        /// </summary>
        [Input("maxInflightMessages")]
        public Input<int>? MaxInflightMessages { get; set; }

        /// <summary>
        /// The protocol to use for the connection. Currently only `mqtt` is supported.
        /// </summary>
        [Input("protocol")]
        public InputUnion<string, Pulumi.AzureNative.IoTOperations.AkriConnectorsMqttProtocolType>? Protocol { get; set; }

        /// <summary>
        /// Session expiry in seconds.
        /// </summary>
        [Input("sessionExpirySeconds")]
        public Input<int>? SessionExpirySeconds { get; set; }

        /// <summary>
        /// TLS configuration.
        /// </summary>
        [Input("tls")]
        public Input<Inputs.TlsPropertiesArgs>? Tls { get; set; }

        public AkriConnectorsMqttConnectionConfigurationArgs()
        {
        }
        public static new AkriConnectorsMqttConnectionConfigurationArgs Empty => new AkriConnectorsMqttConnectionConfigurationArgs();
    }
}
