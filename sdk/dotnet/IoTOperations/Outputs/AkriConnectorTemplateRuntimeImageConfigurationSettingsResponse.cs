// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.Outputs
{

    /// <summary>
    /// AkriConnectorTemplateRuntimeImageConfiguration properties.
    /// </summary>
    [OutputType]
    public sealed class AkriConnectorTemplateRuntimeImageConfigurationSettingsResponse
    {
        /// <summary>
        /// The image name without any registry reference, tag or digest.
        /// </summary>
        public readonly string ImageName;
        /// <summary>
        /// The pull policy of the image.
        /// </summary>
        public readonly string? ImagePullPolicy;
        /// <summary>
        /// The registry settings for the image. You can omit this field if using the default docker hub repository or using a local image.
        /// </summary>
        public readonly Union<Outputs.AkriConnectorsContainerRegistryResponse, Outputs.AkriConnectorsRegistryEndpointRefResponse>? RegistrySettings;
        /// <summary>
        /// The number of replicas to be set up.
        /// </summary>
        public readonly int? Replicas;
        /// <summary>
        /// Optional image tag or digest. If not specified, the default tag is `latest`.
        /// </summary>
        public readonly Union<Outputs.AkriConnectorsDigestResponse, Outputs.AkriConnectorsTagResponse>? TagDigestSettings;

        [OutputConstructor]
        private AkriConnectorTemplateRuntimeImageConfigurationSettingsResponse(
            string imageName,

            string? imagePullPolicy,

            Union<Outputs.AkriConnectorsContainerRegistryResponse, Outputs.AkriConnectorsRegistryEndpointRefResponse>? registrySettings,

            int? replicas,

            Union<Outputs.AkriConnectorsDigestResponse, Outputs.AkriConnectorsTagResponse>? tagDigestSettings)
        {
            ImageName = imageName;
            ImagePullPolicy = imagePullPolicy;
            RegistrySettings = registrySettings;
            Replicas = replicas;
            TagDigestSettings = tagDigestSettings;
        }
    }
}
