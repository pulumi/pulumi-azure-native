// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperations.Outputs
{

    /// <summary>
    /// AkriConnectorsMqttConnectionConfiguration properties.
    /// </summary>
    [OutputType]
    public sealed class AkriConnectorsMqttConnectionConfigurationResponse
    {
        /// <summary>
        /// Authentication properties.
        /// </summary>
        public readonly Outputs.AkriConnectorsServiceAccountAuthenticationResponse? Authentication;
        /// <summary>
        /// Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;.
        /// </summary>
        public readonly string? Host;
        /// <summary>
        /// KeepAlive for connection in seconds.
        /// </summary>
        public readonly int? KeepAliveSeconds;
        /// <summary>
        /// The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
        /// </summary>
        public readonly int? MaxInflightMessages;
        /// <summary>
        /// The protocol to use for the connection. Currently only `mqtt` is supported.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Session expiry in seconds.
        /// </summary>
        public readonly int? SessionExpirySeconds;
        /// <summary>
        /// TLS configuration.
        /// </summary>
        public readonly Outputs.TlsPropertiesResponse? Tls;

        [OutputConstructor]
        private AkriConnectorsMqttConnectionConfigurationResponse(
            Outputs.AkriConnectorsServiceAccountAuthenticationResponse? authentication,

            string? host,

            int? keepAliveSeconds,

            int? maxInflightMessages,

            string? protocol,

            int? sessionExpirySeconds,

            Outputs.TlsPropertiesResponse? tls)
        {
            Authentication = authentication;
            Host = host;
            KeepAliveSeconds = keepAliveSeconds;
            MaxInflightMessages = maxInflightMessages;
            Protocol = protocol;
            SessionExpirySeconds = sessionExpirySeconds;
            Tls = tls;
        }
    }
}
