// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801Preview.Outputs
{

    [OutputType]
    public sealed class ApiEntityResponse
    {
        /// <summary>
        /// API definition Url - url where the swagger can be downloaded from
        /// </summary>
        public readonly string? ApiDefinitionUrl;
        /// <summary>
        /// Backend service definition
        /// </summary>
        public readonly Outputs.BackendServiceDefinitionResponse? BackendService;
        /// <summary>
        /// Capabilities
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// Timestamp of last connection change.
        /// </summary>
        public readonly string? ChangedTime;
        /// <summary>
        /// Connection parameters
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ConnectionParameterResponse>? ConnectionParameters;
        /// <summary>
        /// Timestamp of the connection creation
        /// </summary>
        public readonly string? CreatedTime;
        /// <summary>
        /// the URL path of this API when exposed via APIM
        /// </summary>
        public readonly Outputs.GeneralApiInformationResponse? GeneralInformation;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Free form object for the data caller wants to store
        /// </summary>
        public readonly object? Metadata;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// the URL path of this API when exposed via APIM
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// API policies
        /// </summary>
        public readonly Outputs.ApiPoliciesResponse? Policies;
        /// <summary>
        /// Protocols supported by the front end - http/https
        /// </summary>
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// Read only property returning the runtime endpoints where the API can be called
        /// </summary>
        public readonly ImmutableArray<string> RuntimeUrls;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ApiEntityResponse(
            string? apiDefinitionUrl,

            Outputs.BackendServiceDefinitionResponse? backendService,

            ImmutableArray<string> capabilities,

            string? changedTime,

            ImmutableDictionary<string, Outputs.ConnectionParameterResponse>? connectionParameters,

            string? createdTime,

            Outputs.GeneralApiInformationResponse? generalInformation,

            string? id,

            string? kind,

            string location,

            object? metadata,

            string? name,

            string? path,

            Outputs.ApiPoliciesResponse? policies,

            ImmutableArray<string> protocols,

            ImmutableArray<string> runtimeUrls,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            ApiDefinitionUrl = apiDefinitionUrl;
            BackendService = backendService;
            Capabilities = capabilities;
            ChangedTime = changedTime;
            ConnectionParameters = connectionParameters;
            CreatedTime = createdTime;
            GeneralInformation = generalInformation;
            Id = id;
            Kind = kind;
            Location = location;
            Metadata = metadata;
            Name = name;
            Path = path;
            Policies = policies;
            Protocols = protocols;
            RuntimeUrls = runtimeUrls;
            Tags = tags;
            Type = type;
        }
    }
}
