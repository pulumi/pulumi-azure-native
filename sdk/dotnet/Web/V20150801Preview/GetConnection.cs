// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801Preview
{
    public static class GetConnection
    {
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("azure-nextgen:web/v20150801preview:getConnection", args ?? new GetConnectionArgs(), options.WithVersion());
    }


    public sealed class GetConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection name.
        /// </summary>
        [Input("connectionName", required: true)]
        public string ConnectionName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// expanded connection provider name
        /// </summary>
        public readonly Outputs.ExpandedParentApiEntityResponse? Api;
        /// <summary>
        /// Timestamp of last connection change.
        /// </summary>
        public readonly string? ChangedTime;
        /// <summary>
        /// Timestamp of the connection creation
        /// </summary>
        public readonly string? CreatedTime;
        /// <summary>
        /// Custom login setting values.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterCustomLoginSettingValuesResponse>? CustomParameterValues;
        /// <summary>
        /// display name
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Time in UTC when the first expiration of OAuth tokens
        /// </summary>
        public readonly string? FirstExpirationTime;
        /// <summary>
        /// List of Keywords that tag the acl
        /// </summary>
        public readonly ImmutableArray<string> Keywords;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        public readonly object? Metadata;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Tokens/Claim
        /// </summary>
        public readonly ImmutableDictionary<string, object>? NonSecretParameterValues;
        /// <summary>
        /// Tokens/Claim
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ParameterValues;
        /// <summary>
        /// Status of the connection
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionStatusResponse> Statuses;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? TenantId;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetConnectionResult(
            Outputs.ExpandedParentApiEntityResponse? api,

            string? changedTime,

            string? createdTime,

            ImmutableDictionary<string, Outputs.ParameterCustomLoginSettingValuesResponse>? customParameterValues,

            string? displayName,

            string? firstExpirationTime,

            ImmutableArray<string> keywords,

            string? kind,

            string location,

            object? metadata,

            string? name,

            ImmutableDictionary<string, object>? nonSecretParameterValues,

            ImmutableDictionary<string, object>? parameterValues,

            ImmutableArray<Outputs.ConnectionStatusResponse> statuses,

            ImmutableDictionary<string, string>? tags,

            string? tenantId,

            string? type)
        {
            Api = api;
            ChangedTime = changedTime;
            CreatedTime = createdTime;
            CustomParameterValues = customParameterValues;
            DisplayName = displayName;
            FirstExpirationTime = firstExpirationTime;
            Keywords = keywords;
            Kind = kind;
            Location = location;
            Metadata = metadata;
            Name = name;
            NonSecretParameterValues = nonSecretParameterValues;
            ParameterValues = parameterValues;
            Statuses = statuses;
            Tags = tags;
            TenantId = tenantId;
            Type = type;
        }
    }
}
