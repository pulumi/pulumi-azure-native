// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20210201
{
    /// <summary>
    /// Static Site ARM resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:web/v20210201:StaticSite")]
    public partial class StaticSite : global::Pulumi.CustomResource
    {
        /// <summary>
        /// &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        [Output("allowConfigFileUpdates")]
        public Output<bool?> AllowConfigFileUpdates { get; private set; } = null!;

        /// <summary>
        /// The target branch in the repository.
        /// </summary>
        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        /// <summary>
        /// Build properties to configure on the repository.
        /// </summary>
        [Output("buildProperties")]
        public Output<Outputs.StaticSiteBuildPropertiesResponse?> BuildProperties { get; private set; } = null!;

        /// <summary>
        /// The content distribution endpoint for the static site.
        /// </summary>
        [Output("contentDistributionEndpoint")]
        public Output<string> ContentDistributionEndpoint { get; private set; } = null!;

        /// <summary>
        /// The custom domains associated with this static site.
        /// </summary>
        [Output("customDomains")]
        public Output<ImmutableArray<string>> CustomDomains { get; private set; } = null!;

        /// <summary>
        /// The default autogenerated hostname for the static site.
        /// </summary>
        [Output("defaultHostname")]
        public Output<string> DefaultHostname { get; private set; } = null!;

        /// <summary>
        /// Managed service identity.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Identity to use for Key Vault Reference authentication.
        /// </summary>
        [Output("keyVaultReferenceIdentity")]
        public Output<string> KeyVaultReferenceIdentity { get; private set; } = null!;

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource Location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Private endpoint connections
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.ResponseMessageEnvelopeRemotePrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// The provider that submitted the last deployment to the primary environment of the static site.
        /// </summary>
        [Output("provider")]
        public Output<string> Provider { get; private set; } = null!;

        /// <summary>
        /// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
        /// </summary>
        [Output("repositoryToken")]
        public Output<string?> RepositoryToken { get; private set; } = null!;

        /// <summary>
        /// URL for the repository of the static site.
        /// </summary>
        [Output("repositoryUrl")]
        public Output<string?> RepositoryUrl { get; private set; } = null!;

        /// <summary>
        /// Description of a SKU for a scalable resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuDescriptionResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// State indicating whether staging environments are allowed or not allowed for a static web app.
        /// </summary>
        [Output("stagingEnvironmentPolicy")]
        public Output<string?> StagingEnvironmentPolicy { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Template options for generating a new repository.
        /// </summary>
        [Output("templateProperties")]
        public Output<Outputs.StaticSiteTemplateOptionsResponse?> TemplateProperties { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User provided function apps registered with the static site
        /// </summary>
        [Output("userProvidedFunctionApps")]
        public Output<ImmutableArray<Outputs.StaticSiteUserProvidedFunctionAppResponse>> UserProvidedFunctionApps { get; private set; } = null!;


        /// <summary>
        /// Create a StaticSite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StaticSite(string name, StaticSiteArgs args, CustomResourceOptions? options = null)
            : base("azure-native:web/v20210201:StaticSite", name, args ?? new StaticSiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StaticSite(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:web/v20210201:StaticSite", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:web:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20190801:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20200601:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20200901:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20201001:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20201201:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20210101:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20210115:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20210301:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20220301:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20220901:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20230101:StaticSite" },
                    new global::Pulumi.Alias { Type = "azure-native:web/v20231201:StaticSite" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StaticSite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StaticSite Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StaticSite(name, id, options);
        }
    }

    public sealed class StaticSiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;code&gt;false&lt;/code&gt; if config file is locked for this static web app; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        [Input("allowConfigFileUpdates")]
        public Input<bool>? AllowConfigFileUpdates { get; set; }

        /// <summary>
        /// The target branch in the repository.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// Build properties to configure on the repository.
        /// </summary>
        [Input("buildProperties")]
        public Input<Inputs.StaticSiteBuildPropertiesArgs>? BuildProperties { get; set; }

        /// <summary>
        /// Managed service identity.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Resource Location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the static site to create or update.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
        /// </summary>
        [Input("repositoryToken")]
        public Input<string>? RepositoryToken { get; set; }

        /// <summary>
        /// URL for the repository of the static site.
        /// </summary>
        [Input("repositoryUrl")]
        public Input<string>? RepositoryUrl { get; set; }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Description of a SKU for a scalable resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuDescriptionArgs>? Sku { get; set; }

        /// <summary>
        /// State indicating whether staging environments are allowed or not allowed for a static web app.
        /// </summary>
        [Input("stagingEnvironmentPolicy")]
        public Input<Pulumi.AzureNative.Web.V20210201.StagingEnvironmentPolicy>? StagingEnvironmentPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Template options for generating a new repository.
        /// </summary>
        [Input("templateProperties")]
        public Input<Inputs.StaticSiteTemplateOptionsArgs>? TemplateProperties { get; set; }

        public StaticSiteArgs()
        {
        }
        public static new StaticSiteArgs Empty => new StaticSiteArgs();
    }
}
