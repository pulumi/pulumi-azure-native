// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20230101
{
    public static class GetKubeEnvironment
    {
        /// <summary>
        /// Description for Get the properties of a Kubernetes Environment.
        /// </summary>
        public static Task<GetKubeEnvironmentResult> InvokeAsync(GetKubeEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubeEnvironmentResult>("azure-native:web/v20230101:getKubeEnvironment", args ?? new GetKubeEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Description for Get the properties of a Kubernetes Environment.
        /// </summary>
        public static Output<GetKubeEnvironmentResult> Invoke(GetKubeEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubeEnvironmentResult>("azure-native:web/v20230101:getKubeEnvironment", args ?? new GetKubeEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubeEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Kubernetes Environment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKubeEnvironmentArgs()
        {
        }
        public static new GetKubeEnvironmentArgs Empty => new GetKubeEnvironmentArgs();
    }

    public sealed class GetKubeEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Kubernetes Environment.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKubeEnvironmentInvokeArgs()
        {
        }
        public static new GetKubeEnvironmentInvokeArgs Empty => new GetKubeEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubeEnvironmentResult
    {
        public readonly string? AksResourceID;
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        public readonly Outputs.AppLogsConfigurationResponse? AppLogsConfiguration;
        /// <summary>
        /// Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// </summary>
        public readonly Outputs.ArcConfigurationResponse? ArcConfiguration;
        /// <summary>
        /// Cluster configuration for Container Apps Environments to configure Dapr Instrumentation Key and VNET Configuration
        /// </summary>
        public readonly Outputs.ContainerAppsConfigurationResponse? ContainerAppsConfiguration;
        /// <summary>
        /// Default Domain Name for the cluster
        /// </summary>
        public readonly string DefaultDomain;
        /// <summary>
        /// Any errors that occurred during deployment or deployment validation
        /// </summary>
        public readonly string DeploymentErrors;
        /// <summary>
        /// Type of Kubernetes Environment. Only supported for Container App Environments with value as Managed
        /// </summary>
        public readonly string? EnvironmentType;
        /// <summary>
        /// Extended Location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Only visible within Vnet/Subnet
        /// </summary>
        public readonly bool? InternalLoadBalancerEnabled;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Kubernetes Environment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Static IP of the KubeEnvironment
        /// </summary>
        public readonly string? StaticIp;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetKubeEnvironmentResult(
            string? aksResourceID,

            Outputs.AppLogsConfigurationResponse? appLogsConfiguration,

            Outputs.ArcConfigurationResponse? arcConfiguration,

            Outputs.ContainerAppsConfigurationResponse? containerAppsConfiguration,

            string defaultDomain,

            string deploymentErrors,

            string? environmentType,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            bool? internalLoadBalancerEnabled,

            string? kind,

            string location,

            string name,

            string provisioningState,

            string? staticIp,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AksResourceID = aksResourceID;
            AppLogsConfiguration = appLogsConfiguration;
            ArcConfiguration = arcConfiguration;
            ContainerAppsConfiguration = containerAppsConfiguration;
            DefaultDomain = defaultDomain;
            DeploymentErrors = deploymentErrors;
            EnvironmentType = environmentType;
            ExtendedLocation = extendedLocation;
            Id = id;
            InternalLoadBalancerEnabled = internalLoadBalancerEnabled;
            Kind = kind;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            StaticIp = staticIp;
            Tags = tags;
            Type = type;
        }
    }
}
