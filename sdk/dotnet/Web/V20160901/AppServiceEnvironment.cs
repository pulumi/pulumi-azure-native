// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Web.V20160901
{
    /// <summary>
    /// App Service Environment ARM resource.
    /// </summary>
    public partial class AppServiceEnvironment : Pulumi.CustomResource
    {
        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource Location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Core resource properties
        /// </summary>
        [Output("properties")]
        public Output<Outputs.AppServiceEnvironmentResponseResult> Properties { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AppServiceEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppServiceEnvironment(string name, AppServiceEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("azurerm:web/v20160901:AppServiceEnvironment", name, args ?? new AppServiceEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppServiceEnvironment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:web/v20160901:AppServiceEnvironment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppServiceEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppServiceEnvironment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AppServiceEnvironment(name, id, options);
        }
    }

    public sealed class AppServiceEnvironmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// API Management Account associated with the App Service Environment.
        /// </summary>
        [Input("apiManagementAccountId")]
        public Input<string>? ApiManagementAccountId { get; set; }

        [Input("clusterSettings")]
        private InputList<Inputs.NameValuePairArgs>? _clusterSettings;

        /// <summary>
        /// Custom settings for changing the behavior of the App Service Environment.
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> ClusterSettings
        {
            get => _clusterSettings ?? (_clusterSettings = new InputList<Inputs.NameValuePairArgs>());
            set => _clusterSettings = value;
        }

        /// <summary>
        /// DNS suffix of the App Service Environment.
        /// </summary>
        [Input("dnsSuffix")]
        public Input<string>? DnsSuffix { get; set; }

        /// <summary>
        /// True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        [Input("dynamicCacheEnabled")]
        public Input<bool>? DynamicCacheEnabled { get; set; }

        /// <summary>
        /// Scale factor for front-ends.
        /// </summary>
        [Input("frontEndScaleFactor")]
        public Input<int>? FrontEndScaleFactor { get; set; }

        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        [Input("internalLoadBalancingMode")]
        public Input<string>? InternalLoadBalancingMode { get; set; }

        /// <summary>
        /// Number of IP SSL addresses reserved for the App Service Environment.
        /// </summary>
        [Input("ipsslAddressCount")]
        public Input<int>? IpsslAddressCount { get; set; }

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Resource Location.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Number of front-end instances.
        /// </summary>
        [Input("multiRoleCount")]
        public Input<int>? MultiRoleCount { get; set; }

        /// <summary>
        /// Front-end VM size, e.g. "Medium", "Large".
        /// </summary>
        [Input("multiSize")]
        public Input<string>? MultiSize { get; set; }

        /// <summary>
        /// Name of the App Service Environment.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networkAccessControlList")]
        private InputList<Inputs.NetworkAccessControlEntryArgs>? _networkAccessControlList;

        /// <summary>
        /// Access control list for controlling traffic to the App Service Environment.
        /// </summary>
        public InputList<Inputs.NetworkAccessControlEntryArgs> NetworkAccessControlList
        {
            get => _networkAccessControlList ?? (_networkAccessControlList = new InputList<Inputs.NetworkAccessControlEntryArgs>());
            set => _networkAccessControlList = value;
        }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userWhitelistedIpRanges")]
        private InputList<string>? _userWhitelistedIpRanges;

        /// <summary>
        /// User added ip ranges to whitelist on ASE db
        /// </summary>
        public InputList<string> UserWhitelistedIpRanges
        {
            get => _userWhitelistedIpRanges ?? (_userWhitelistedIpRanges = new InputList<string>());
            set => _userWhitelistedIpRanges = value;
        }

        /// <summary>
        /// Description of the Virtual Network.
        /// </summary>
        [Input("virtualNetwork", required: true)]
        public Input<Inputs.VirtualNetworkProfileArgs> VirtualNetwork { get; set; } = null!;

        /// <summary>
        /// Name of the Virtual Network for the App Service Environment.
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// Resource group of the Virtual Network.
        /// </summary>
        [Input("vnetResourceGroupName")]
        public Input<string>? VnetResourceGroupName { get; set; }

        /// <summary>
        /// Subnet of the Virtual Network.
        /// </summary>
        [Input("vnetSubnetName")]
        public Input<string>? VnetSubnetName { get; set; }

        [Input("workerPools", required: true)]
        private InputList<Inputs.WorkerPoolArgs>? _workerPools;

        /// <summary>
        /// Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
        /// </summary>
        public InputList<Inputs.WorkerPoolArgs> WorkerPools
        {
            get => _workerPools ?? (_workerPools = new InputList<Inputs.WorkerPoolArgs>());
            set => _workerPools = value;
        }

        public AppServiceEnvironmentArgs()
        {
        }
    }
}
