// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Web.Inputs
{

    /// <summary>
    /// Site resource specific properties
    /// </summary>
    public sealed class SiteResponsePropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Management information availability state for the app.
        /// </summary>
        [Input("availabilityState", required: true)]
        public Input<string> AvailabilityState { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("clientCertEnabled")]
        public Input<bool>? ClientCertEnabled { get; set; }

        /// <summary>
        /// client certificate authentication comma-separated exclusion paths
        /// </summary>
        [Input("clientCertExclusionPaths")]
        public Input<string>? ClientCertExclusionPaths { get; set; }

        /// <summary>
        /// If specified during app creation, the app is cloned from a source app.
        /// </summary>
        [Input("cloningInfo")]
        public Input<Inputs.CloningInfoResponseArgs>? CloningInfo { get; set; }

        /// <summary>
        /// Size of the function container.
        /// </summary>
        [Input("containerSize")]
        public Input<int>? ContainerSize { get; set; }

        /// <summary>
        /// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
        /// </summary>
        [Input("dailyMemoryTimeQuota")]
        public Input<int>? DailyMemoryTimeQuota { get; set; }

        /// <summary>
        /// Default hostname of the app. Read-only.
        /// </summary>
        [Input("defaultHostName", required: true)]
        public Input<string> DefaultHostName { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enabledHostNames", required: true)]
        private InputList<string>? _enabledHostNames;

        /// <summary>
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </summary>
        public InputList<string> EnabledHostNames
        {
            get => _enabledHostNames ?? (_enabledHostNames = new InputList<string>());
            set => _enabledHostNames = value;
        }

        [Input("hostNameSslStates")]
        private InputList<Inputs.HostNameSslStateResponseArgs>? _hostNameSslStates;

        /// <summary>
        /// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
        /// </summary>
        public InputList<Inputs.HostNameSslStateResponseArgs> HostNameSslStates
        {
            get => _hostNameSslStates ?? (_hostNameSslStates = new InputList<Inputs.HostNameSslStateResponseArgs>());
            set => _hostNameSslStates = value;
        }

        [Input("hostNames", required: true)]
        private InputList<string>? _hostNames;

        /// <summary>
        /// Hostnames associated with the app.
        /// </summary>
        public InputList<string> HostNames
        {
            get => _hostNames ?? (_hostNames = new InputList<string>());
            set => _hostNames = value;
        }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// </summary>
        [Input("hostNamesDisabled")]
        public Input<bool>? HostNamesDisabled { get; set; }

        /// <summary>
        /// App Service Environment to use for the app.
        /// </summary>
        [Input("hostingEnvironmentProfile")]
        public Input<Inputs.HostingEnvironmentProfileResponseArgs>? HostingEnvironmentProfile { get; set; }

        /// <summary>
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// Hyper-V sandbox.
        /// </summary>
        [Input("hyperV")]
        public Input<bool>? HyperV { get; set; }

        /// <summary>
        /// Specifies an operation id if this site has a pending operation.
        /// </summary>
        [Input("inProgressOperationId", required: true)]
        public Input<string> InProgressOperationId { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("isDefaultContainer", required: true)]
        public Input<bool> IsDefaultContainer { get; set; } = null!;

        /// <summary>
        /// Obsolete: Hyper-V sandbox.
        /// </summary>
        [Input("isXenon")]
        public Input<bool>? IsXenon { get; set; }

        /// <summary>
        /// Last time the app was modified, in UTC. Read-only.
        /// </summary>
        [Input("lastModifiedTimeUtc", required: true)]
        public Input<string> LastModifiedTimeUtc { get; set; } = null!;

        /// <summary>
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// </summary>
        [Input("maxNumberOfWorkers", required: true)]
        public Input<int> MaxNumberOfWorkers { get; set; } = null!;

        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
        /// </summary>
        [Input("outboundIpAddresses", required: true)]
        public Input<string> OutboundIpAddresses { get; set; } = null!;

        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
        /// </summary>
        [Input("possibleOutboundIpAddresses", required: true)]
        public Input<string> PossibleOutboundIpAddresses { get; set; } = null!;

        /// <summary>
        /// Site redundancy mode
        /// </summary>
        [Input("redundancyMode")]
        public Input<string>? RedundancyMode { get; set; }

        /// <summary>
        /// Name of the repository site.
        /// </summary>
        [Input("repositorySiteName", required: true)]
        public Input<string> RepositorySiteName { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("reserved")]
        public Input<bool>? Reserved { get; set; }

        /// <summary>
        /// Name of the resource group the app belongs to. Read-only.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("scmSiteAlsoStopped")]
        public Input<bool>? ScmSiteAlsoStopped { get; set; }

        /// <summary>
        /// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
        /// </summary>
        [Input("serverFarmId")]
        public Input<string>? ServerFarmId { get; set; }

        /// <summary>
        /// Configuration of the app.
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.SiteConfigResponseArgs>? SiteConfig { get; set; }

        /// <summary>
        /// Status of the last deployment slot swap operation.
        /// </summary>
        [Input("slotSwapStatus", required: true)]
        public Input<Inputs.SlotSwapStatusResponseArgs> SlotSwapStatus { get; set; } = null!;

        /// <summary>
        /// Current state of the app.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        /// <summary>
        /// App suspended till in case memory-time quota is exceeded.
        /// </summary>
        [Input("suspendedTill", required: true)]
        public Input<string> SuspendedTill { get; set; } = null!;

        /// <summary>
        /// Specifies which deployment slot this app will swap into. Read-only.
        /// </summary>
        [Input("targetSwapSlot", required: true)]
        public Input<string> TargetSwapSlot { get; set; } = null!;

        [Input("trafficManagerHostNames", required: true)]
        private InputList<string>? _trafficManagerHostNames;

        /// <summary>
        /// Azure Traffic Manager hostnames associated with the app. Read-only.
        /// </summary>
        public InputList<string> TrafficManagerHostNames
        {
            get => _trafficManagerHostNames ?? (_trafficManagerHostNames = new InputList<string>());
            set => _trafficManagerHostNames = value;
        }

        /// <summary>
        /// State indicating whether the app has exceeded its quota usage. Read-only.
        /// </summary>
        [Input("usageState", required: true)]
        public Input<string> UsageState { get; set; } = null!;

        public SiteResponsePropertiesArgs()
        {
        }
    }
}
