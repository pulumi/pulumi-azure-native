// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Web.Inputs
{

    /// <summary>
    /// VnetInfo resource specific properties
    /// </summary>
    public sealed class VnetInfoResponsePropertiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        /// Point-To-Site VPN connection.
        /// </summary>
        [Input("certBlob")]
        public Input<string>? CertBlob { get; set; }

        /// <summary>
        /// The client certificate thumbprint.
        /// </summary>
        [Input("certThumbprint", required: true)]
        public Input<string> CertThumbprint { get; set; } = null!;

        /// <summary>
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// </summary>
        [Input("dnsServers")]
        public Input<string>? DnsServers { get; set; }

        /// <summary>
        /// Flag that is used to denote if this is VNET injection
        /// </summary>
        [Input("isSwift")]
        public Input<bool>? IsSwift { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("resyncRequired", required: true)]
        public Input<bool> ResyncRequired { get; set; } = null!;

        [Input("routes", required: true)]
        private InputList<Inputs.VnetRouteResponseGetArgs>? _routes;

        /// <summary>
        /// The routes that this Virtual Network connection uses.
        /// </summary>
        public InputList<Inputs.VnetRouteResponseGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VnetRouteResponseGetArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// The Virtual Network's resource ID.
        /// </summary>
        [Input("vnetResourceId")]
        public Input<string>? VnetResourceId { get; set; }

        public VnetInfoResponsePropertiesGetArgs()
        {
        }
    }
}
