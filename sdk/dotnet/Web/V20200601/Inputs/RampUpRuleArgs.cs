// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20200601.Inputs
{

    /// <summary>
    /// Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
    /// </summary>
    public sealed class RampUpRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
        /// </summary>
        [Input("actionHostName")]
        public Input<string>? ActionHostName { get; set; }

        /// <summary>
        /// Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
        /// https://www.siteextensions.net/packages/TiPCallback/
        /// </summary>
        [Input("changeDecisionCallbackUrl")]
        public Input<string>? ChangeDecisionCallbackUrl { get; set; }

        /// <summary>
        /// Specifies interval in minutes to reevaluate ReroutePercentage.
        /// </summary>
        [Input("changeIntervalInMinutes")]
        public Input<int>? ChangeIntervalInMinutes { get; set; }

        /// <summary>
        /// In auto ramp up scenario this is the step to add/remove from &lt;code&gt;ReroutePercentage&lt;/code&gt; until it reaches \n&lt;code&gt;MinReroutePercentage&lt;/code&gt; or 
        /// &lt;code&gt;MaxReroutePercentage&lt;/code&gt;. Site metrics are checked every N minutes specified in &lt;code&gt;ChangeIntervalInMinutes&lt;/code&gt;.\nCustom decision algorithm 
        /// can be provided in TiPCallback site extension which URL can be specified in &lt;code&gt;ChangeDecisionCallbackUrl&lt;/code&gt;.
        /// </summary>
        [Input("changeStep")]
        public Input<double>? ChangeStep { get; set; }

        /// <summary>
        /// Specifies upper boundary below which ReroutePercentage will stay.
        /// </summary>
        [Input("maxReroutePercentage")]
        public Input<double>? MaxReroutePercentage { get; set; }

        /// <summary>
        /// Specifies lower boundary above which ReroutePercentage will stay.
        /// </summary>
        [Input("minReroutePercentage")]
        public Input<double>? MinReroutePercentage { get; set; }

        /// <summary>
        /// Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Percentage of the traffic which will be redirected to &lt;code&gt;ActionHostName&lt;/code&gt;.
        /// </summary>
        [Input("reroutePercentage")]
        public Input<double>? ReroutePercentage { get; set; }

        public RampUpRuleArgs()
        {
        }
    }
}
