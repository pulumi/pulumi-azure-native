// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web
{
    /// <summary>
    /// Container of a site
    /// Azure REST API version: 2023-12-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:web:WebAppSiteContainerSlot")]
    public partial class WebAppSiteContainerSlot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auth Type
        /// </summary>
        [Output("authType")]
        public Output<string?> AuthType { get; private set; } = null!;

        /// <summary>
        /// Created Time
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// List of environment variables
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.EnvironmentVariableResponse>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Image Name
        /// </summary>
        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the container is the main site container; &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Output("isMain")]
        public Output<bool> IsMain { get; private set; } = null!;

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Last Modified Time
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Password Secret
        /// </summary>
        [Output("passwordSecret")]
        public Output<string?> PasswordSecret { get; private set; } = null!;

        /// <summary>
        /// StartUp Command
        /// </summary>
        [Output("startUpCommand")]
        public Output<string?> StartUpCommand { get; private set; } = null!;

        /// <summary>
        /// Target Port
        /// </summary>
        [Output("targetPort")]
        public Output<string?> TargetPort { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// UserManagedIdentity ClientId
        /// </summary>
        [Output("userManagedIdentityClientId")]
        public Output<string?> UserManagedIdentityClientId { get; private set; } = null!;

        /// <summary>
        /// User Name
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;

        /// <summary>
        /// List of volume mounts
        /// </summary>
        [Output("volumeMounts")]
        public Output<ImmutableArray<Outputs.VolumeMountResponse>> VolumeMounts { get; private set; } = null!;


        /// <summary>
        /// Create a WebAppSiteContainerSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAppSiteContainerSlot(string name, WebAppSiteContainerSlotArgs args, CustomResourceOptions? options = null)
            : base("azure-native:web:WebAppSiteContainerSlot", name, args ?? new WebAppSiteContainerSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAppSiteContainerSlot(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:web:WebAppSiteContainerSlot", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:web/v20231201:WebAppSiteContainerSlot" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAppSiteContainerSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAppSiteContainerSlot Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WebAppSiteContainerSlot(name, id, options);
        }
    }

    public sealed class WebAppSiteContainerSlotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auth Type
        /// </summary>
        [Input("authType")]
        public Input<Pulumi.AzureNative.Web.AuthType>? AuthType { get; set; }

        /// <summary>
        /// Site Container Name
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// List of environment variables
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Image Name
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the container is the main site container; &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Input("isMain", required: true)]
        public Input<bool> IsMain { get; set; } = null!;

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Password Secret
        /// </summary>
        [Input("passwordSecret")]
        public Input<string>? PasswordSecret { get; set; }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment slot. If a slot is not specified, the API will create the container for the production slot.
        /// </summary>
        [Input("slot", required: true)]
        public Input<string> Slot { get; set; } = null!;

        /// <summary>
        /// StartUp Command
        /// </summary>
        [Input("startUpCommand")]
        public Input<string>? StartUpCommand { get; set; }

        /// <summary>
        /// Target Port
        /// </summary>
        [Input("targetPort")]
        public Input<string>? TargetPort { get; set; }

        /// <summary>
        /// UserManagedIdentity ClientId
        /// </summary>
        [Input("userManagedIdentityClientId")]
        public Input<string>? UserManagedIdentityClientId { get; set; }

        /// <summary>
        /// User Name
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.VolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// List of volume mounts
        /// </summary>
        public InputList<Inputs.VolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.VolumeMountArgs>());
            set => _volumeMounts = value;
        }

        public WebAppSiteContainerSlotArgs()
        {
        }
        public static new WebAppSiteContainerSlotArgs Empty => new WebAppSiteContainerSlotArgs();
    }
}
