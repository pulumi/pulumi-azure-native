// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20240401
{
    public static class GetWebAppSlot
    {
        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        public static Task<GetWebAppSlotResult> InvokeAsync(GetWebAppSlotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebAppSlotResult>("azure-native:web/v20240401:getWebAppSlot", args ?? new GetWebAppSlotArgs(), options.WithDefaults());

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        public static Output<GetWebAppSlotResult> Invoke(GetWebAppSlotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebAppSlotResult>("azure-native:web/v20240401:getWebAppSlot", args ?? new GetWebAppSlotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebAppSlotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment slot. By default, this API returns the production slot.
        /// </summary>
        [Input("slot", required: true)]
        public string Slot { get; set; } = null!;

        public GetWebAppSlotArgs()
        {
        }
        public static new GetWebAppSlotArgs Empty => new GetWebAppSlotArgs();
    }

    public sealed class GetWebAppSlotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment slot. By default, this API returns the production slot.
        /// </summary>
        [Input("slot", required: true)]
        public Input<string> Slot { get; set; } = null!;

        public GetWebAppSlotInvokeArgs()
        {
        }
        public static new GetWebAppSlotInvokeArgs Empty => new GetWebAppSlotInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebAppSlotResult
    {
        /// <summary>
        /// Specifies the scope of uniqueness for the default hostname during resource creation
        /// </summary>
        public readonly string? AutoGeneratedDomainNameLabelScope;
        /// <summary>
        /// Management information availability state for the app.
        /// </summary>
        public readonly string AvailabilityState;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        public readonly bool? ClientAffinityEnabled;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? ClientCertEnabled;
        /// <summary>
        /// client certificate authentication comma-separated exclusion paths
        /// </summary>
        public readonly string? ClientCertExclusionPaths;
        /// <summary>
        /// This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
        /// </summary>
        public readonly string? ClientCertMode;
        /// <summary>
        /// Size of the function container.
        /// </summary>
        public readonly int? ContainerSize;
        /// <summary>
        /// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
        /// </summary>
        public readonly string? CustomDomainVerificationId;
        /// <summary>
        /// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
        /// </summary>
        public readonly int? DailyMemoryTimeQuota;
        /// <summary>
        /// Dapr configuration of the app.
        /// </summary>
        public readonly Outputs.DaprConfigResponse? DaprConfig;
        /// <summary>
        /// Default hostname of the app. Read-only.
        /// </summary>
        public readonly string DefaultHostName;
        /// <summary>
        /// Property to configure various DNS related settings for a site.
        /// </summary>
        public readonly Outputs.SiteDnsConfigResponse? DnsConfiguration;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </summary>
        public readonly ImmutableArray<string> EnabledHostNames;
        /// <summary>
        /// Whether to use end to end encryption between the FrontEnd and the Worker
        /// </summary>
        public readonly bool? EndToEndEncryptionEnabled;
        /// <summary>
        /// Extended Location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Configuration specific of the Azure Function app.
        /// </summary>
        public readonly Outputs.FunctionAppConfigResponse? FunctionAppConfig;
        /// <summary>
        /// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
        /// </summary>
        public readonly ImmutableArray<Outputs.HostNameSslStateResponse> HostNameSslStates;
        /// <summary>
        /// Hostnames associated with the app.
        /// </summary>
        public readonly ImmutableArray<string> HostNames;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
        /// </summary>
        public readonly bool? HostNamesDisabled;
        /// <summary>
        /// App Service Environment to use for the app.
        /// </summary>
        public readonly Outputs.HostingEnvironmentProfileResponse? HostingEnvironmentProfile;
        /// <summary>
        /// HttpsOnly: configures a web site to accept only https requests. Issues redirect for
        /// http requests
        /// </summary>
        public readonly bool? HttpsOnly;
        /// <summary>
        /// Hyper-V sandbox.
        /// </summary>
        public readonly bool? HyperV;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed service identity.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// Specifies an operation id if this site has a pending operation.
        /// </summary>
        public readonly string InProgressOperationId;
        /// <summary>
        /// Specifies the IP mode of the app.
        /// </summary>
        public readonly string? IpMode;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool IsDefaultContainer;
        /// <summary>
        /// Obsolete: Hyper-V sandbox.
        /// </summary>
        public readonly bool? IsXenon;
        /// <summary>
        /// Identity to use for Key Vault Reference authentication.
        /// </summary>
        public readonly string? KeyVaultReferenceIdentity;
        /// <summary>
        /// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Last time the app was modified, in UTC. Read-only.
        /// </summary>
        public readonly string LastModifiedTimeUtc;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Azure Resource Manager ID of the customer's selected Managed Environment on which to host this app. This must be of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.App/managedEnvironments/{managedEnvironmentName}
        /// </summary>
        public readonly string? ManagedEnvironmentId;
        /// <summary>
        /// Maximum number of workers.
        /// This only applies to Functions container.
        /// </summary>
        public readonly int MaxNumberOfWorkers;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
        /// </summary>
        public readonly string OutboundIpAddresses;
        /// <summary>
        /// List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
        /// </summary>
        public readonly string PossibleOutboundIpAddresses;
        /// <summary>
        /// Property to allow or block all public traffic. Allowed Values: 'Enabled', 'Disabled' or an empty string.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// Site redundancy mode
        /// </summary>
        public readonly string? RedundancyMode;
        /// <summary>
        /// Name of the repository site.
        /// </summary>
        public readonly string RepositorySiteName;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? Reserved;
        /// <summary>
        /// Function app resource requirements.
        /// </summary>
        public readonly Outputs.ResourceConfigResponse? ResourceConfig;
        /// <summary>
        /// Name of the resource group the app belongs to. Read-only.
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? ScmSiteAlsoStopped;
        /// <summary>
        /// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
        /// </summary>
        public readonly string? ServerFarmId;
        /// <summary>
        /// Configuration of the app.
        /// </summary>
        public readonly Outputs.SiteConfigResponse? SiteConfig;
        /// <summary>
        /// Current SKU of application based on associated App Service Plan. Some valid SKU values are Free, Shared, Basic, Dynamic, FlexConsumption, Standard, Premium, PremiumV2, PremiumV3, Isolated, IsolatedV2
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// Status of the last deployment slot swap operation.
        /// </summary>
        public readonly Outputs.SlotSwapStatusResponse SlotSwapStatus;
        /// <summary>
        /// Current state of the app.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Checks if Customer provided storage account is required
        /// </summary>
        public readonly bool? StorageAccountRequired;
        /// <summary>
        /// App suspended till in case memory-time quota is exceeded.
        /// </summary>
        public readonly string SuspendedTill;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Specifies which deployment slot this app will swap into. Read-only.
        /// </summary>
        public readonly string TargetSwapSlot;
        /// <summary>
        /// Azure Traffic Manager hostnames associated with the app. Read-only.
        /// </summary>
        public readonly ImmutableArray<string> TrafficManagerHostNames;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// State indicating whether the app has exceeded its quota usage. Read-only.
        /// </summary>
        public readonly string UsageState;
        /// <summary>
        /// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
        /// This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// </summary>
        public readonly string? VirtualNetworkSubnetId;
        /// <summary>
        /// To enable Backup and Restore operations over virtual network
        /// </summary>
        public readonly bool? VnetBackupRestoreEnabled;
        /// <summary>
        /// To enable accessing content over virtual network
        /// </summary>
        public readonly bool? VnetContentShareEnabled;
        /// <summary>
        /// To enable pulling image over Virtual Network
        /// </summary>
        public readonly bool? VnetImagePullEnabled;
        /// <summary>
        /// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        /// </summary>
        public readonly bool? VnetRouteAllEnabled;
        /// <summary>
        /// Workload profile name for function app to execute on.
        /// </summary>
        public readonly string? WorkloadProfileName;

        [OutputConstructor]
        private GetWebAppSlotResult(
            string? autoGeneratedDomainNameLabelScope,

            string availabilityState,

            bool? clientAffinityEnabled,

            bool? clientCertEnabled,

            string? clientCertExclusionPaths,

            string? clientCertMode,

            int? containerSize,

            string? customDomainVerificationId,

            int? dailyMemoryTimeQuota,

            Outputs.DaprConfigResponse? daprConfig,

            string defaultHostName,

            Outputs.SiteDnsConfigResponse? dnsConfiguration,

            bool? enabled,

            ImmutableArray<string> enabledHostNames,

            bool? endToEndEncryptionEnabled,

            Outputs.ExtendedLocationResponse? extendedLocation,

            Outputs.FunctionAppConfigResponse? functionAppConfig,

            ImmutableArray<Outputs.HostNameSslStateResponse> hostNameSslStates,

            ImmutableArray<string> hostNames,

            bool? hostNamesDisabled,

            Outputs.HostingEnvironmentProfileResponse? hostingEnvironmentProfile,

            bool? httpsOnly,

            bool? hyperV,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string inProgressOperationId,

            string? ipMode,

            bool isDefaultContainer,

            bool? isXenon,

            string? keyVaultReferenceIdentity,

            string? kind,

            string lastModifiedTimeUtc,

            string location,

            string? managedEnvironmentId,

            int maxNumberOfWorkers,

            string name,

            string outboundIpAddresses,

            string possibleOutboundIpAddresses,

            string? publicNetworkAccess,

            string? redundancyMode,

            string repositorySiteName,

            bool? reserved,

            Outputs.ResourceConfigResponse? resourceConfig,

            string resourceGroup,

            bool? scmSiteAlsoStopped,

            string? serverFarmId,

            Outputs.SiteConfigResponse? siteConfig,

            string sku,

            Outputs.SlotSwapStatusResponse slotSwapStatus,

            string state,

            bool? storageAccountRequired,

            string suspendedTill,

            ImmutableDictionary<string, string>? tags,

            string targetSwapSlot,

            ImmutableArray<string> trafficManagerHostNames,

            string type,

            string usageState,

            string? virtualNetworkSubnetId,

            bool? vnetBackupRestoreEnabled,

            bool? vnetContentShareEnabled,

            bool? vnetImagePullEnabled,

            bool? vnetRouteAllEnabled,

            string? workloadProfileName)
        {
            AutoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            AvailabilityState = availabilityState;
            ClientAffinityEnabled = clientAffinityEnabled;
            ClientCertEnabled = clientCertEnabled;
            ClientCertExclusionPaths = clientCertExclusionPaths;
            ClientCertMode = clientCertMode;
            ContainerSize = containerSize;
            CustomDomainVerificationId = customDomainVerificationId;
            DailyMemoryTimeQuota = dailyMemoryTimeQuota;
            DaprConfig = daprConfig;
            DefaultHostName = defaultHostName;
            DnsConfiguration = dnsConfiguration;
            Enabled = enabled;
            EnabledHostNames = enabledHostNames;
            EndToEndEncryptionEnabled = endToEndEncryptionEnabled;
            ExtendedLocation = extendedLocation;
            FunctionAppConfig = functionAppConfig;
            HostNameSslStates = hostNameSslStates;
            HostNames = hostNames;
            HostNamesDisabled = hostNamesDisabled;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            HttpsOnly = httpsOnly;
            HyperV = hyperV;
            Id = id;
            Identity = identity;
            InProgressOperationId = inProgressOperationId;
            IpMode = ipMode;
            IsDefaultContainer = isDefaultContainer;
            IsXenon = isXenon;
            KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            Kind = kind;
            LastModifiedTimeUtc = lastModifiedTimeUtc;
            Location = location;
            ManagedEnvironmentId = managedEnvironmentId;
            MaxNumberOfWorkers = maxNumberOfWorkers;
            Name = name;
            OutboundIpAddresses = outboundIpAddresses;
            PossibleOutboundIpAddresses = possibleOutboundIpAddresses;
            PublicNetworkAccess = publicNetworkAccess;
            RedundancyMode = redundancyMode;
            RepositorySiteName = repositorySiteName;
            Reserved = reserved;
            ResourceConfig = resourceConfig;
            ResourceGroup = resourceGroup;
            ScmSiteAlsoStopped = scmSiteAlsoStopped;
            ServerFarmId = serverFarmId;
            SiteConfig = siteConfig;
            Sku = sku;
            SlotSwapStatus = slotSwapStatus;
            State = state;
            StorageAccountRequired = storageAccountRequired;
            SuspendedTill = suspendedTill;
            Tags = tags;
            TargetSwapSlot = targetSwapSlot;
            TrafficManagerHostNames = trafficManagerHostNames;
            Type = type;
            UsageState = usageState;
            VirtualNetworkSubnetId = virtualNetworkSubnetId;
            VnetBackupRestoreEnabled = vnetBackupRestoreEnabled;
            VnetContentShareEnabled = vnetContentShareEnabled;
            VnetImagePullEnabled = vnetImagePullEnabled;
            VnetRouteAllEnabled = vnetRouteAllEnabled;
            WorkloadProfileName = workloadProfileName;
        }
    }
}
