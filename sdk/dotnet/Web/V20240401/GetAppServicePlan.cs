// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20240401
{
    public static class GetAppServicePlan
    {
        /// <summary>
        /// Description for Get an App Service plan.
        /// </summary>
        public static Task<GetAppServicePlanResult> InvokeAsync(GetAppServicePlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppServicePlanResult>("azure-native:web/v20240401:getAppServicePlan", args ?? new GetAppServicePlanArgs(), options.WithDefaults());

        /// <summary>
        /// Description for Get an App Service plan.
        /// </summary>
        public static Output<GetAppServicePlanResult> Invoke(GetAppServicePlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppServicePlanResult>("azure-native:web/v20240401:getAppServicePlan", args ?? new GetAppServicePlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppServicePlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the App Service plan.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAppServicePlanArgs()
        {
        }
        public static new GetAppServicePlanArgs Empty => new GetAppServicePlanArgs();
    }

    public sealed class GetAppServicePlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the App Service plan.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAppServicePlanInvokeArgs()
        {
        }
        public static new GetAppServicePlanInvokeArgs Empty => new GetAppServicePlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppServicePlanResult
    {
        /// <summary>
        /// ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku
        /// </summary>
        public readonly bool? ElasticScaleEnabled;
        /// <summary>
        /// Extended Location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The time when the server farm free offer expires.
        /// </summary>
        public readonly string? FreeOfferExpirationTime;
        /// <summary>
        /// Geographical location for the App Service plan.
        /// </summary>
        public readonly string GeoRegion;
        /// <summary>
        /// Specification for the App Service Environment to use for the App Service plan.
        /// </summary>
        public readonly Outputs.HostingEnvironmentProfileResponse? HostingEnvironmentProfile;
        /// <summary>
        /// If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        public readonly bool? HyperV;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
        /// </summary>
        public readonly bool? IsSpot;
        /// <summary>
        /// Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        public readonly bool? IsXenon;
        /// <summary>
        /// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Specification for the Kubernetes Environment to use for the App Service plan.
        /// </summary>
        public readonly Outputs.KubeEnvironmentProfileResponse? KubeEnvironmentProfile;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
        /// </summary>
        public readonly int? MaximumElasticWorkerCount;
        /// <summary>
        /// Maximum number of instances that can be assigned to this App Service plan.
        /// </summary>
        public readonly int MaximumNumberOfWorkers;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of apps assigned to this App Service plan.
        /// </summary>
        public readonly int NumberOfSites;
        /// <summary>
        /// The number of instances that are assigned to this App Service plan.
        /// </summary>
        public readonly int NumberOfWorkers;
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
        /// </summary>
        public readonly bool? PerSiteScaling;
        /// <summary>
        /// Provisioning state of the App Service Plan.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        public readonly bool? Reserved;
        /// <summary>
        /// Resource group of the App Service plan.
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// Description of a SKU for a scalable resource.
        /// </summary>
        public readonly Outputs.SkuDescriptionResponse? Sku;
        /// <summary>
        /// The time when the server farm expires. Valid only if it is a spot server farm.
        /// </summary>
        public readonly string? SpotExpirationTime;
        /// <summary>
        /// App Service plan status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// App Service plan subscription.
        /// </summary>
        public readonly string Subscription;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Scaling worker count.
        /// </summary>
        public readonly int? TargetWorkerCount;
        /// <summary>
        /// Scaling worker size ID.
        /// </summary>
        public readonly int? TargetWorkerSizeId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Target worker tier assigned to the App Service plan.
        /// </summary>
        public readonly string? WorkerTierName;
        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, this App Service Plan will perform availability zone balancing.
        /// If &lt;code&gt;false&lt;/code&gt;, this App Service Plan will not perform availability zone balancing.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetAppServicePlanResult(
            bool? elasticScaleEnabled,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string? freeOfferExpirationTime,

            string geoRegion,

            Outputs.HostingEnvironmentProfileResponse? hostingEnvironmentProfile,

            bool? hyperV,

            string id,

            bool? isSpot,

            bool? isXenon,

            string? kind,

            Outputs.KubeEnvironmentProfileResponse? kubeEnvironmentProfile,

            string location,

            int? maximumElasticWorkerCount,

            int maximumNumberOfWorkers,

            string name,

            int numberOfSites,

            int numberOfWorkers,

            bool? perSiteScaling,

            string provisioningState,

            bool? reserved,

            string resourceGroup,

            Outputs.SkuDescriptionResponse? sku,

            string? spotExpirationTime,

            string status,

            string subscription,

            ImmutableDictionary<string, string>? tags,

            int? targetWorkerCount,

            int? targetWorkerSizeId,

            string type,

            string? workerTierName,

            bool? zoneRedundant)
        {
            ElasticScaleEnabled = elasticScaleEnabled;
            ExtendedLocation = extendedLocation;
            FreeOfferExpirationTime = freeOfferExpirationTime;
            GeoRegion = geoRegion;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            HyperV = hyperV;
            Id = id;
            IsSpot = isSpot;
            IsXenon = isXenon;
            Kind = kind;
            KubeEnvironmentProfile = kubeEnvironmentProfile;
            Location = location;
            MaximumElasticWorkerCount = maximumElasticWorkerCount;
            MaximumNumberOfWorkers = maximumNumberOfWorkers;
            Name = name;
            NumberOfSites = numberOfSites;
            NumberOfWorkers = numberOfWorkers;
            PerSiteScaling = perSiteScaling;
            ProvisioningState = provisioningState;
            Reserved = reserved;
            ResourceGroup = resourceGroup;
            Sku = sku;
            SpotExpirationTime = spotExpirationTime;
            Status = status;
            Subscription = subscription;
            Tags = tags;
            TargetWorkerCount = targetWorkerCount;
            TargetWorkerSizeId = targetWorkerSizeId;
            Type = type;
            WorkerTierName = workerTierName;
            ZoneRedundant = zoneRedundant;
        }
    }
}
