// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20190801
{
    public static class GetAppServiceEnvironment
    {
        public static Task<GetAppServiceEnvironmentResult> InvokeAsync(GetAppServiceEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppServiceEnvironmentResult>("azure-nextgen:web/v20190801:getAppServiceEnvironment", args ?? new GetAppServiceEnvironmentArgs(), options.WithVersion());
    }


    public sealed class GetAppServiceEnvironmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the App Service Environment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAppServiceEnvironmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAppServiceEnvironmentResult
    {
        /// <summary>
        /// List of comma separated strings describing which VM sizes are allowed for front-ends.
        /// </summary>
        public readonly string AllowedMultiSizes;
        /// <summary>
        /// List of comma separated strings describing which VM sizes are allowed for workers.
        /// </summary>
        public readonly string AllowedWorkerSizes;
        /// <summary>
        /// API Management Account associated with the App Service Environment.
        /// </summary>
        public readonly string? ApiManagementAccountId;
        /// <summary>
        /// Custom settings for changing the behavior of the App Service Environment.
        /// </summary>
        public readonly ImmutableArray<Outputs.NameValuePairResponse> ClusterSettings;
        /// <summary>
        /// Edition of the metadata database for the App Service Environment, e.g. "Standard".
        /// </summary>
        public readonly string DatabaseEdition;
        /// <summary>
        /// Service objective of the metadata database for the App Service Environment, e.g. "S0".
        /// </summary>
        public readonly string DatabaseServiceObjective;
        /// <summary>
        /// Default Scale Factor for FrontEnds.
        /// </summary>
        public readonly int DefaultFrontEndScaleFactor;
        /// <summary>
        /// DNS suffix of the App Service Environment.
        /// </summary>
        public readonly string? DnsSuffix;
        /// <summary>
        /// True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        public readonly bool? DynamicCacheEnabled;
        /// <summary>
        /// Current total, used, and available worker capacities.
        /// </summary>
        public readonly ImmutableArray<Outputs.StampCapacityResponse> EnvironmentCapacities;
        /// <summary>
        /// True/false indicating whether the App Service Environment is healthy.
        /// </summary>
        public readonly bool EnvironmentIsHealthy;
        /// <summary>
        /// Detailed message about with results of the last check of the App Service Environment.
        /// </summary>
        public readonly string EnvironmentStatus;
        /// <summary>
        /// Scale factor for front-ends.
        /// </summary>
        public readonly int? FrontEndScaleFactor;
        /// <summary>
        /// Flag that displays whether an ASE has linux workers or not
        /// </summary>
        public readonly bool? HasLinuxWorkers;
        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        public readonly string? InternalLoadBalancingMode;
        /// <summary>
        /// Number of IP SSL addresses reserved for the App Service Environment.
        /// </summary>
        public readonly int? IpsslAddressCount;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Last deployment action on the App Service Environment.
        /// </summary>
        public readonly string LastAction;
        /// <summary>
        /// Result of the last deployment action on the App Service Environment.
        /// </summary>
        public readonly string LastActionResult;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maximum number of VMs in the App Service Environment.
        /// </summary>
        public readonly int MaximumNumberOfMachines;
        /// <summary>
        /// Number of front-end instances.
        /// </summary>
        public readonly int? MultiRoleCount;
        /// <summary>
        /// Front-end VM size, e.g. "Medium", "Large".
        /// </summary>
        public readonly string? MultiSize;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Access control list for controlling traffic to the App Service Environment.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkAccessControlEntryResponse> NetworkAccessControlList;
        /// <summary>
        /// Provisioning state of the App Service Environment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource group of the App Service Environment.
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// Key Vault ID for ILB App Service Environment default SSL certificate
        /// </summary>
        public readonly string? SslCertKeyVaultId;
        /// <summary>
        /// Key Vault Secret Name for ILB App Service Environment default SSL certificate
        /// </summary>
        public readonly string? SslCertKeyVaultSecretName;
        /// <summary>
        /// Current status of the App Service Environment.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Subscription of the App Service Environment.
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </summary>
        public readonly bool? Suspended;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Number of upgrade domains of the App Service Environment.
        /// </summary>
        public readonly int UpgradeDomains;
        /// <summary>
        /// User added ip ranges to whitelist on ASE db
        /// </summary>
        public readonly ImmutableArray<string> UserWhitelistedIpRanges;
        /// <summary>
        /// Description of IP SSL mapping for the App Service Environment.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualIPMappingResponse> VipMappings;
        /// <summary>
        /// Description of the Virtual Network.
        /// </summary>
        public readonly Outputs.VirtualNetworkProfileResponse VirtualNetwork;
        /// <summary>
        /// Name of the Virtual Network for the App Service Environment.
        /// </summary>
        public readonly string? VnetName;
        /// <summary>
        /// Resource group of the Virtual Network.
        /// </summary>
        public readonly string? VnetResourceGroupName;
        /// <summary>
        /// Subnet of the Virtual Network.
        /// </summary>
        public readonly string? VnetSubnetName;
        /// <summary>
        /// Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.WorkerPoolResponse> WorkerPools;

        [OutputConstructor]
        private GetAppServiceEnvironmentResult(
            string allowedMultiSizes,

            string allowedWorkerSizes,

            string? apiManagementAccountId,

            ImmutableArray<Outputs.NameValuePairResponse> clusterSettings,

            string databaseEdition,

            string databaseServiceObjective,

            int defaultFrontEndScaleFactor,

            string? dnsSuffix,

            bool? dynamicCacheEnabled,

            ImmutableArray<Outputs.StampCapacityResponse> environmentCapacities,

            bool environmentIsHealthy,

            string environmentStatus,

            int? frontEndScaleFactor,

            bool? hasLinuxWorkers,

            string? internalLoadBalancingMode,

            int? ipsslAddressCount,

            string? kind,

            string lastAction,

            string lastActionResult,

            string location,

            int maximumNumberOfMachines,

            int? multiRoleCount,

            string? multiSize,

            string name,

            ImmutableArray<Outputs.NetworkAccessControlEntryResponse> networkAccessControlList,

            string provisioningState,

            string resourceGroup,

            string? sslCertKeyVaultId,

            string? sslCertKeyVaultSecretName,

            string status,

            string subscriptionId,

            bool? suspended,

            ImmutableDictionary<string, string>? tags,

            string type,

            int upgradeDomains,

            ImmutableArray<string> userWhitelistedIpRanges,

            ImmutableArray<Outputs.VirtualIPMappingResponse> vipMappings,

            Outputs.VirtualNetworkProfileResponse virtualNetwork,

            string? vnetName,

            string? vnetResourceGroupName,

            string? vnetSubnetName,

            ImmutableArray<Outputs.WorkerPoolResponse> workerPools)
        {
            AllowedMultiSizes = allowedMultiSizes;
            AllowedWorkerSizes = allowedWorkerSizes;
            ApiManagementAccountId = apiManagementAccountId;
            ClusterSettings = clusterSettings;
            DatabaseEdition = databaseEdition;
            DatabaseServiceObjective = databaseServiceObjective;
            DefaultFrontEndScaleFactor = defaultFrontEndScaleFactor;
            DnsSuffix = dnsSuffix;
            DynamicCacheEnabled = dynamicCacheEnabled;
            EnvironmentCapacities = environmentCapacities;
            EnvironmentIsHealthy = environmentIsHealthy;
            EnvironmentStatus = environmentStatus;
            FrontEndScaleFactor = frontEndScaleFactor;
            HasLinuxWorkers = hasLinuxWorkers;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            IpsslAddressCount = ipsslAddressCount;
            Kind = kind;
            LastAction = lastAction;
            LastActionResult = lastActionResult;
            Location = location;
            MaximumNumberOfMachines = maximumNumberOfMachines;
            MultiRoleCount = multiRoleCount;
            MultiSize = multiSize;
            Name = name;
            NetworkAccessControlList = networkAccessControlList;
            ProvisioningState = provisioningState;
            ResourceGroup = resourceGroup;
            SslCertKeyVaultId = sslCertKeyVaultId;
            SslCertKeyVaultSecretName = sslCertKeyVaultSecretName;
            Status = status;
            SubscriptionId = subscriptionId;
            Suspended = suspended;
            Tags = tags;
            Type = type;
            UpgradeDomains = upgradeDomains;
            UserWhitelistedIpRanges = userWhitelistedIpRanges;
            VipMappings = vipMappings;
            VirtualNetwork = virtualNetwork;
            VnetName = vnetName;
            VnetResourceGroupName = vnetResourceGroupName;
            VnetSubnetName = vnetSubnetName;
            WorkerPools = workerPools;
        }
    }
}
