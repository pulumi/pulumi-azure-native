// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20160801
{
    public static class ListWebAppAuthSettingsSlot
    {
        public static Task<ListWebAppAuthSettingsSlotResult> InvokeAsync(ListWebAppAuthSettingsSlotArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ListWebAppAuthSettingsSlotResult>("azure-nextgen:web/v20160801:listWebAppAuthSettingsSlot", args ?? new ListWebAppAuthSettingsSlotArgs(), options.WithVersion());
    }


    public sealed class ListWebAppAuthSettingsSlotArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
        /// </summary>
        [Input("slot", required: true)]
        public string Slot { get; set; } = null!;

        public ListWebAppAuthSettingsSlotArgs()
        {
        }
    }


    [OutputType]
    public sealed class ListWebAppAuthSettingsSlotResult
    {
        /// <summary>
        /// Login parameters to send to the OpenID Connect authorization endpoint when
        /// a user logs in. Each parameter must be in the form "key=value".
        /// </summary>
        public readonly ImmutableArray<string> AdditionalLoginParams;
        /// <summary>
        /// Allowed audience values to consider when validating JWTs issued by 
        /// Azure Active Directory. Note that the &lt;code&gt;ClientID&lt;/code&gt; value is always considered an
        /// allowed audience, regardless of this setting.
        /// </summary>
        public readonly ImmutableArray<string> AllowedAudiences;
        /// <summary>
        /// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
        /// This is an advanced setting typically only needed by Windows Store application backends.
        /// Note that URLs within the current domain are always implicitly allowed.
        /// </summary>
        public readonly ImmutableArray<string> AllowedExternalRedirectUrls;
        /// <summary>
        /// The Client ID of this relying party application, known as the client_id.
        /// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or 
        /// other 3rd party OpenID Connect providers.
        /// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).
        /// This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.
        /// Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.
        /// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// The default authentication provider to use when multiple providers are configured.
        /// This setting is only needed if multiple providers are configured and the unauthenticated client
        /// action is set to "RedirectToLoginPage".
        /// </summary>
        public readonly string? DefaultProvider;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The App ID of the Facebook app used for login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </summary>
        public readonly string? FacebookAppId;
        /// <summary>
        /// The App Secret of the Facebook app used for Facebook Login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </summary>
        public readonly string? FacebookAppSecret;
        /// <summary>
        /// The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.
        /// This setting is optional.
        /// Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
        /// </summary>
        public readonly ImmutableArray<string> FacebookOAuthScopes;
        /// <summary>
        /// The OpenID Connect Client ID for the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </summary>
        public readonly string? GoogleClientId;
        /// <summary>
        /// The client secret associated with the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </summary>
        public readonly string? GoogleClientSecret;
        /// <summary>
        /// The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.
        /// This setting is optional. If not specified, "openid", "profile", and "email" are used as default scopes.
        /// Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
        /// </summary>
        public readonly ImmutableArray<string> GoogleOAuthScopes;
        /// <summary>
        /// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
        /// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
        /// This URI is a case-sensitive identifier for the token issuer.
        /// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
        /// </summary>
        public readonly string? Issuer;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The OAuth 2.0 client ID that was created for the app used for authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
        /// </summary>
        public readonly string? MicrosoftAccountClientId;
        /// <summary>
        /// The OAuth 2.0 client secret that was created for the app used for authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
        /// </summary>
        public readonly string? MicrosoftAccountClientSecret;
        /// <summary>
        /// The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.
        /// This setting is optional. If not specified, "wl.basic" is used as the default scope.
        /// Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
        /// </summary>
        public readonly ImmutableArray<string> MicrosoftAccountOAuthScopes;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
        /// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
        /// </summary>
        public readonly string? RuntimeVersion;
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </summary>
        public readonly double? TokenRefreshExtensionHours;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
        ///  The default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? TokenStoreEnabled;
        /// <summary>
        /// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </summary>
        public readonly string? TwitterConsumerKey;
        /// <summary>
        /// The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </summary>
        public readonly string? TwitterConsumerSecret;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The action to take when an unauthenticated client attempts to access the app.
        /// </summary>
        public readonly string? UnauthenticatedClientAction;

        [OutputConstructor]
        private ListWebAppAuthSettingsSlotResult(
            ImmutableArray<string> additionalLoginParams,

            ImmutableArray<string> allowedAudiences,

            ImmutableArray<string> allowedExternalRedirectUrls,

            string? clientId,

            string? clientSecret,

            string? defaultProvider,

            bool? enabled,

            string? facebookAppId,

            string? facebookAppSecret,

            ImmutableArray<string> facebookOAuthScopes,

            string? googleClientId,

            string? googleClientSecret,

            ImmutableArray<string> googleOAuthScopes,

            string? issuer,

            string? kind,

            string? microsoftAccountClientId,

            string? microsoftAccountClientSecret,

            ImmutableArray<string> microsoftAccountOAuthScopes,

            string name,

            string? runtimeVersion,

            double? tokenRefreshExtensionHours,

            bool? tokenStoreEnabled,

            string? twitterConsumerKey,

            string? twitterConsumerSecret,

            string type,

            string? unauthenticatedClientAction)
        {
            AdditionalLoginParams = additionalLoginParams;
            AllowedAudiences = allowedAudiences;
            AllowedExternalRedirectUrls = allowedExternalRedirectUrls;
            ClientId = clientId;
            ClientSecret = clientSecret;
            DefaultProvider = defaultProvider;
            Enabled = enabled;
            FacebookAppId = facebookAppId;
            FacebookAppSecret = facebookAppSecret;
            FacebookOAuthScopes = facebookOAuthScopes;
            GoogleClientId = googleClientId;
            GoogleClientSecret = googleClientSecret;
            GoogleOAuthScopes = googleOAuthScopes;
            Issuer = issuer;
            Kind = kind;
            MicrosoftAccountClientId = microsoftAccountClientId;
            MicrosoftAccountClientSecret = microsoftAccountClientSecret;
            MicrosoftAccountOAuthScopes = microsoftAccountOAuthScopes;
            Name = name;
            RuntimeVersion = runtimeVersion;
            TokenRefreshExtensionHours = tokenRefreshExtensionHours;
            TokenStoreEnabled = tokenStoreEnabled;
            TwitterConsumerKey = twitterConsumerKey;
            TwitterConsumerSecret = twitterConsumerSecret;
            Type = type;
            UnauthenticatedClientAction = unauthenticatedClientAction;
        }
    }
}
