// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web
{
    public static class GetAppServiceEnvironment
    {
        /// <summary>
        /// Get the properties of an App Service Environment.
        /// API Version: 2020-12-01.
        /// </summary>
        public static Task<GetAppServiceEnvironmentResult> InvokeAsync(GetAppServiceEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppServiceEnvironmentResult>("azure-native:web:getAppServiceEnvironment", args ?? new GetAppServiceEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get the properties of an App Service Environment.
        /// API Version: 2020-12-01.
        /// </summary>
        public static Output<GetAppServiceEnvironmentResult> Invoke(GetAppServiceEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppServiceEnvironmentResult>("azure-native:web:getAppServiceEnvironment", args ?? new GetAppServiceEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppServiceEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the App Service Environment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAppServiceEnvironmentArgs()
        {
        }
        public static new GetAppServiceEnvironmentArgs Empty => new GetAppServiceEnvironmentArgs();
    }

    public sealed class GetAppServiceEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the App Service Environment.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAppServiceEnvironmentInvokeArgs()
        {
        }
        public static new GetAppServiceEnvironmentInvokeArgs Empty => new GetAppServiceEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppServiceEnvironmentResult
    {
        /// <summary>
        /// Custom settings for changing the behavior of the App Service Environment.
        /// </summary>
        public readonly ImmutableArray<Outputs.NameValuePairResponse> ClusterSettings;
        /// <summary>
        /// Dedicated Host Count
        /// </summary>
        public readonly int DedicatedHostCount;
        /// <summary>
        /// DNS suffix of the App Service Environment.
        /// </summary>
        public readonly string? DnsSuffix;
        /// <summary>
        /// Scale factor for front-ends.
        /// </summary>
        public readonly int? FrontEndScaleFactor;
        /// <summary>
        /// Flag that displays whether an ASE has linux workers or not
        /// </summary>
        public readonly bool HasLinuxWorkers;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
        /// </summary>
        public readonly string? InternalLoadBalancingMode;
        /// <summary>
        /// Number of IP SSL addresses reserved for the App Service Environment.
        /// </summary>
        public readonly int? IpsslAddressCount;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maximum number of VMs in the App Service Environment.
        /// </summary>
        public readonly int MaximumNumberOfMachines;
        /// <summary>
        /// Number of front-end instances.
        /// </summary>
        public readonly int MultiRoleCount;
        /// <summary>
        /// Front-end VM size, e.g. "Medium", "Large".
        /// </summary>
        public readonly string? MultiSize;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the App Service Environment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Current status of the App Service Environment.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available
        ///  (most likely because NSG blocked the incoming traffic).
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// User added list of IP Ranges allowed on ASE db
        /// </summary>
        public readonly ImmutableArray<string> UserWhitelistedIpRanges;
        /// <summary>
        /// Description of the Virtual Network.
        /// </summary>
        public readonly Outputs.VirtualNetworkProfileResponse VirtualNetwork;

        [OutputConstructor]
        private GetAppServiceEnvironmentResult(
            ImmutableArray<Outputs.NameValuePairResponse> clusterSettings,

            int dedicatedHostCount,

            string? dnsSuffix,

            int? frontEndScaleFactor,

            bool hasLinuxWorkers,

            string id,

            string? internalLoadBalancingMode,

            int? ipsslAddressCount,

            string? kind,

            string location,

            int maximumNumberOfMachines,

            int multiRoleCount,

            string? multiSize,

            string name,

            string provisioningState,

            string status,

            bool suspended,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<string> userWhitelistedIpRanges,

            Outputs.VirtualNetworkProfileResponse virtualNetwork)
        {
            ClusterSettings = clusterSettings;
            DedicatedHostCount = dedicatedHostCount;
            DnsSuffix = dnsSuffix;
            FrontEndScaleFactor = frontEndScaleFactor;
            HasLinuxWorkers = hasLinuxWorkers;
            Id = id;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            IpsslAddressCount = ipsslAddressCount;
            Kind = kind;
            Location = location;
            MaximumNumberOfMachines = maximumNumberOfMachines;
            MultiRoleCount = multiRoleCount;
            MultiSize = multiSize;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            Suspended = suspended;
            Tags = tags;
            Type = type;
            UserWhitelistedIpRanges = userWhitelistedIpRanges;
            VirtualNetwork = virtualNetwork;
        }
    }
}
