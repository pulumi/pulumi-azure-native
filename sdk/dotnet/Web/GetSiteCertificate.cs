// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web
{
    public static class GetSiteCertificate
    {
        /// <summary>
        /// SSL certificate for an app.
        /// 
        /// Uses Azure REST API version 2024-11-01.
        /// 
        /// Other available API versions: 2025-03-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native web [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetSiteCertificateResult> InvokeAsync(GetSiteCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSiteCertificateResult>("azure-native:web:getSiteCertificate", args ?? new GetSiteCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// SSL certificate for an app.
        /// 
        /// Uses Azure REST API version 2024-11-01.
        /// 
        /// Other available API versions: 2025-03-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native web [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetSiteCertificateResult> Invoke(GetSiteCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSiteCertificateResult>("azure-native:web:getSiteCertificate", args ?? new GetSiteCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// SSL certificate for an app.
        /// 
        /// Uses Azure REST API version 2024-11-01.
        /// 
        /// Other available API versions: 2025-03-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native web [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetSiteCertificateResult> Invoke(GetSiteCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSiteCertificateResult>("azure-native:web:getSiteCertificate", args ?? new GetSiteCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSiteCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the certificate.
        /// </summary>
        [Input("certificateName", required: true)]
        public string CertificateName { get; set; } = null!;

        /// <summary>
        /// Name of the site.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSiteCertificateArgs()
        {
        }
        public static new GetSiteCertificateArgs Empty => new GetSiteCertificateArgs();
    }

    public sealed class GetSiteCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the certificate.
        /// </summary>
        [Input("certificateName", required: true)]
        public Input<string> CertificateName { get; set; } = null!;

        /// <summary>
        /// Name of the site.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetSiteCertificateInvokeArgs()
        {
        }
        public static new GetSiteCertificateInvokeArgs Empty => new GetSiteCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetSiteCertificateResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// CNAME of the certificate to be issued via free certificate
        /// </summary>
        public readonly string? CanonicalName;
        /// <summary>
        /// Raw bytes of .cer file
        /// </summary>
        public readonly string CerBlob;
        /// <summary>
        /// Method of domain validation for free cert
        /// </summary>
        public readonly string? DomainValidationMethod;
        /// <summary>
        /// Certificate expiration date.
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// Friendly name of the certificate.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// Host names the certificate applies to.
        /// </summary>
        public readonly ImmutableArray<string> HostNames;
        /// <summary>
        /// Specification for the App Service Environment to use for the certificate.
        /// </summary>
        public readonly Outputs.HostingEnvironmentProfileResponse HostingEnvironmentProfile;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Certificate issue Date.
        /// </summary>
        public readonly string IssueDate;
        /// <summary>
        /// Certificate issuer.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// Azure Key Vault Csm resource Id.
        /// </summary>
        public readonly string? KeyVaultId;
        /// <summary>
        /// Azure Key Vault secret name.
        /// </summary>
        public readonly string? KeyVaultSecretName;
        /// <summary>
        /// Status of the Key Vault secret.
        /// </summary>
        public readonly string KeyVaultSecretStatus;
        /// <summary>
        /// Kind of resource. If the resource is an app, you can refer to https://github.com/Azure/app-service-linux-docs/blob/master/Things_You_Should_Know/kind_property.md#app-service-resource-kind-reference for details supported values for kind.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Certificate password.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Pfx blob.
        /// </summary>
        public readonly string? PfxBlob;
        /// <summary>
        /// Public key hash.
        /// </summary>
        public readonly string PublicKeyHash;
        /// <summary>
        /// Self link.
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// Resource ID of the associated App Service plan.
        /// </summary>
        public readonly string? ServerFarmId;
        /// <summary>
        /// App name.
        /// </summary>
        public readonly string SiteName;
        /// <summary>
        /// Subject name of the certificate.
        /// </summary>
        public readonly string SubjectName;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Certificate thumbprint.
        /// </summary>
        public readonly string Thumbprint;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Is the certificate valid?.
        /// </summary>
        public readonly bool Valid;

        [OutputConstructor]
        private GetSiteCertificateResult(
            string azureApiVersion,

            string? canonicalName,

            string cerBlob,

            string? domainValidationMethod,

            string expirationDate,

            string friendlyName,

            ImmutableArray<string> hostNames,

            Outputs.HostingEnvironmentProfileResponse hostingEnvironmentProfile,

            string id,

            string issueDate,

            string issuer,

            string? keyVaultId,

            string? keyVaultSecretName,

            string keyVaultSecretStatus,

            string? kind,

            string location,

            string name,

            string? password,

            string? pfxBlob,

            string publicKeyHash,

            string selfLink,

            string? serverFarmId,

            string siteName,

            string subjectName,

            ImmutableDictionary<string, string>? tags,

            string thumbprint,

            string type,

            bool valid)
        {
            AzureApiVersion = azureApiVersion;
            CanonicalName = canonicalName;
            CerBlob = cerBlob;
            DomainValidationMethod = domainValidationMethod;
            ExpirationDate = expirationDate;
            FriendlyName = friendlyName;
            HostNames = hostNames;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            Id = id;
            IssueDate = issueDate;
            Issuer = issuer;
            KeyVaultId = keyVaultId;
            KeyVaultSecretName = keyVaultSecretName;
            KeyVaultSecretStatus = keyVaultSecretStatus;
            Kind = kind;
            Location = location;
            Name = name;
            Password = password;
            PfxBlob = pfxBlob;
            PublicKeyHash = publicKeyHash;
            SelfLink = selfLink;
            ServerFarmId = serverFarmId;
            SiteName = siteName;
            SubjectName = subjectName;
            Tags = tags;
            Thumbprint = thumbprint;
            Type = type;
            Valid = valid;
        }
    }
}
