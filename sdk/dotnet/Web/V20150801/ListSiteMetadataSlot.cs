// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20150801
{
    public static class ListSiteMetadataSlot
    {
        /// <summary>
        /// String dictionary resource
        /// </summary>
        public static Task<ListSiteMetadataSlotResult> InvokeAsync(ListSiteMetadataSlotArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ListSiteMetadataSlotResult>("azure-native:web/v20150801:listSiteMetadataSlot", args ?? new ListSiteMetadataSlotArgs(), options.WithDefaults());

        /// <summary>
        /// String dictionary resource
        /// </summary>
        public static Output<ListSiteMetadataSlotResult> Invoke(ListSiteMetadataSlotInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ListSiteMetadataSlotResult>("azure-native:web/v20150801:listSiteMetadataSlot", args ?? new ListSiteMetadataSlotInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListSiteMetadataSlotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of web app
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of web app slot. If not specified then will default to production slot.
        /// </summary>
        [Input("slot", required: true)]
        public string Slot { get; set; } = null!;

        public ListSiteMetadataSlotArgs()
        {
        }
        public static new ListSiteMetadataSlotArgs Empty => new ListSiteMetadataSlotArgs();
    }

    public sealed class ListSiteMetadataSlotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of web app
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of web app slot. If not specified then will default to production slot.
        /// </summary>
        [Input("slot", required: true)]
        public Input<string> Slot { get; set; } = null!;

        public ListSiteMetadataSlotInvokeArgs()
        {
        }
        public static new ListSiteMetadataSlotInvokeArgs Empty => new ListSiteMetadataSlotInvokeArgs();
    }


    [OutputType]
    public sealed class ListSiteMetadataSlotResult
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Settings
        /// </summary>
        public readonly ImmutableDictionary<string, string> Properties;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ListSiteMetadataSlotResult(
            string? id,

            string? kind,

            string location,

            string? name,

            ImmutableDictionary<string, string> properties,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
