// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Web.V20150801
{
    /// <summary>
    /// Represents a web app
    /// </summary>
    public partial class SiteSlot : Pulumi.CustomResource
    {
        /// <summary>
        /// Kind of resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource Location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("properties")]
        public Output<Outputs.SiteResponsePropertiesResult> Properties { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SiteSlot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SiteSlot(string name, SiteSlotArgs args, CustomResourceOptions? options = null)
            : base("azurerm:web/v20150801:SiteSlot", name, args ?? new SiteSlotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SiteSlot(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:web/v20150801:SiteSlot", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SiteSlot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SiteSlot Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SiteSlot(name, id, options);
        }
    }

    public sealed class SiteSlotArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if the client affinity is enabled when load balancing http request for multiple instances of the web app
        /// </summary>
        [Input("clientAffinityEnabled")]
        public Input<bool>? ClientAffinityEnabled { get; set; }

        /// <summary>
        /// Specifies if the client certificate is enabled for the web app
        /// </summary>
        [Input("clientCertEnabled")]
        public Input<bool>? ClientCertEnabled { get; set; }

        /// <summary>
        /// This is only valid for web app creation. If specified, web app is cloned from 
        ///             a source web app
        /// </summary>
        [Input("cloningInfo")]
        public Input<Inputs.CloningInfoArgs>? CloningInfo { get; set; }

        /// <summary>
        /// Size of a function container
        /// </summary>
        [Input("containerSize")]
        public Input<int>? ContainerSize { get; set; }

        /// <summary>
        /// True if the site is enabled; otherwise, false. Setting this  value to false disables the site (takes the site off line).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If true, web app hostname is force registered with DNS
        /// </summary>
        [Input("forceDnsRegistration")]
        public Input<string>? ForceDnsRegistration { get; set; }

        /// <summary>
        /// Name of gateway app associated with web app
        /// </summary>
        [Input("gatewaySiteName")]
        public Input<string>? GatewaySiteName { get; set; }

        [Input("hostNameSslStates")]
        private InputList<Inputs.HostNameSslStateArgs>? _hostNameSslStates;

        /// <summary>
        /// Hostname SSL states are  used to manage the SSL bindings for site's hostnames.
        /// </summary>
        public InputList<Inputs.HostNameSslStateArgs> HostNameSslStates
        {
            get => _hostNameSslStates ?? (_hostNameSslStates = new InputList<Inputs.HostNameSslStateArgs>());
            set => _hostNameSslStates = value;
        }

        /// <summary>
        /// Specifies if the public hostnames are disabled the web app.
        ///             If set to true the app is only accessible via API Management process
        /// </summary>
        [Input("hostNamesDisabled")]
        public Input<bool>? HostNamesDisabled { get; set; }

        /// <summary>
        /// Specification for the hosting environment (App Service Environment) to use for the web app
        /// </summary>
        [Input("hostingEnvironmentProfile")]
        public Input<Inputs.HostingEnvironmentProfileArgs>? HostingEnvironmentProfile { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Resource Location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Maximum number of workers
        ///             This only applies to function container
        /// </summary>
        [Input("maxNumberOfWorkers")]
        public Input<int>? MaxNumberOfWorkers { get; set; }

        [Input("microService")]
        public Input<string>? MicroService { get; set; }

        /// <summary>
        /// Name of web app slot. If not specified then will default to production slot.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// If set indicates whether to stop SCM (KUDU) site when the web app is stopped. Default is false.
        /// </summary>
        [Input("scmSiteAlsoStopped")]
        public Input<bool>? ScmSiteAlsoStopped { get; set; }

        [Input("serverFarmId")]
        public Input<string>? ServerFarmId { get; set; }

        /// <summary>
        /// Configuration of web app
        /// </summary>
        [Input("siteConfig")]
        public Input<Inputs.SiteConfigArgs>? SiteConfig { get; set; }

        /// <summary>
        /// If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
        /// </summary>
        [Input("skipCustomDomainVerification")]
        public Input<string>? SkipCustomDomainVerification { get; set; }

        /// <summary>
        /// If true web app hostname is not registered with DNS on creation. This parameter is
        ///             only used for app creation
        /// </summary>
        [Input("skipDnsRegistration")]
        public Input<string>? SkipDnsRegistration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Time to live in seconds for web app's default domain name
        /// </summary>
        [Input("ttlInSeconds")]
        public Input<string>? TtlInSeconds { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SiteSlotArgs()
        {
        }
    }
}
