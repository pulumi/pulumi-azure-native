// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801
{
    public static class GetServerFarm
    {
        public static Task<GetServerFarmResult> InvokeAsync(GetServerFarmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerFarmResult>("azure-nextgen:web/v20150801:getServerFarm", args ?? new GetServerFarmArgs(), options.WithVersion());
    }


    public sealed class GetServerFarmArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of App Service Plan
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetServerFarmArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServerFarmResult
    {
        /// <summary>
        /// App Service Plan administration site
        /// </summary>
        public readonly string? AdminSiteName;
        /// <summary>
        /// Geographical location for the App Service Plan
        /// </summary>
        public readonly string GeoRegion;
        /// <summary>
        /// Specification for the hosting environment (App Service Environment) to use for the App Service Plan
        /// </summary>
        public readonly Outputs.HostingEnvironmentProfileResponse? HostingEnvironmentProfile;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maximum number of instances that can be assigned to this App Service Plan
        /// </summary>
        public readonly int? MaximumNumberOfWorkers;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Number of web apps assigned to this App Service Plan
        /// </summary>
        public readonly int NumberOfSites;
        /// <summary>
        /// If True apps assigned to this App Service Plan can be scaled independently
        ///             If False apps assigned to this App Service Plan will scale to all instances of the plan
        /// </summary>
        public readonly bool? PerSiteScaling;
        /// <summary>
        /// Enables creation of a Linux App Service Plan
        /// </summary>
        public readonly bool? Reserved;
        /// <summary>
        /// Resource group of the server farm
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// Describes a sku for a scalable resource
        /// </summary>
        public readonly Outputs.SkuDescriptionResponse? Sku;
        /// <summary>
        /// App Service Plan Status
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// App Service Plan Subscription
        /// </summary>
        public readonly string Subscription;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Target worker tier assigned to the App Service Plan
        /// </summary>
        public readonly string? WorkerTierName;

        [OutputConstructor]
        private GetServerFarmResult(
            string? adminSiteName,

            string geoRegion,

            Outputs.HostingEnvironmentProfileResponse? hostingEnvironmentProfile,

            string? kind,

            string location,

            int? maximumNumberOfWorkers,

            string? name,

            int numberOfSites,

            bool? perSiteScaling,

            bool? reserved,

            string resourceGroup,

            Outputs.SkuDescriptionResponse? sku,

            string status,

            string subscription,

            ImmutableDictionary<string, string>? tags,

            string? type,

            string? workerTierName)
        {
            AdminSiteName = adminSiteName;
            GeoRegion = geoRegion;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            Kind = kind;
            Location = location;
            MaximumNumberOfWorkers = maximumNumberOfWorkers;
            Name = name;
            NumberOfSites = numberOfSites;
            PerSiteScaling = perSiteScaling;
            Reserved = reserved;
            ResourceGroup = resourceGroup;
            Sku = sku;
            Status = status;
            Subscription = subscription;
            Tags = tags;
            Type = type;
            WorkerTierName = workerTierName;
        }
    }
}
