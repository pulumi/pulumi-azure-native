// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20150801
{
    [Obsolete(@"Version 2015-08-01 will be removed in v2 of the provider.")]
    public static class GetCertificate
    {
        /// <summary>
        /// App certificate
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("azure-native:web/v20150801:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// App certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("azure-native:web/v20150801:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// Raw bytes of .cer file
        /// </summary>
        public readonly string? CerBlob;
        /// <summary>
        /// Certificate expiration date
        /// </summary>
        public readonly string? ExpirationDate;
        /// <summary>
        /// Friendly name of the certificate
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// Host names the certificate applies to
        /// </summary>
        public readonly ImmutableArray<string> HostNames;
        /// <summary>
        /// Specification for the hosting environment (App Service Environment) to use for the certificate
        /// </summary>
        public readonly Outputs.HostingEnvironmentProfileResponse? HostingEnvironmentProfile;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Certificate issue Date
        /// </summary>
        public readonly string? IssueDate;
        /// <summary>
        /// Certificate issuer
        /// </summary>
        public readonly string? Issuer;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Certificate password
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Pfx blob
        /// </summary>
        public readonly string? PfxBlob;
        /// <summary>
        /// Public key hash
        /// </summary>
        public readonly string? PublicKeyHash;
        /// <summary>
        /// Self link
        /// </summary>
        public readonly string? SelfLink;
        /// <summary>
        /// App name
        /// </summary>
        public readonly string? SiteName;
        /// <summary>
        /// Subject name of the certificate
        /// </summary>
        public readonly string? SubjectName;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Certificate thumbprint
        /// </summary>
        public readonly string? Thumbprint;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Is the certificate valid?
        /// </summary>
        public readonly bool? Valid;

        [OutputConstructor]
        private GetCertificateResult(
            string? cerBlob,

            string? expirationDate,

            string? friendlyName,

            ImmutableArray<string> hostNames,

            Outputs.HostingEnvironmentProfileResponse? hostingEnvironmentProfile,

            string? id,

            string? issueDate,

            string? issuer,

            string? kind,

            string location,

            string? name,

            string? password,

            string? pfxBlob,

            string? publicKeyHash,

            string? selfLink,

            string? siteName,

            string? subjectName,

            ImmutableDictionary<string, string>? tags,

            string? thumbprint,

            string? type,

            bool? valid)
        {
            CerBlob = cerBlob;
            ExpirationDate = expirationDate;
            FriendlyName = friendlyName;
            HostNames = hostNames;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            Id = id;
            IssueDate = issueDate;
            Issuer = issuer;
            Kind = kind;
            Location = location;
            Name = name;
            Password = password;
            PfxBlob = pfxBlob;
            PublicKeyHash = publicKeyHash;
            SelfLink = selfLink;
            SiteName = siteName;
            SubjectName = subjectName;
            Tags = tags;
            Thumbprint = thumbprint;
            Type = type;
            Valid = valid;
        }
    }
}
