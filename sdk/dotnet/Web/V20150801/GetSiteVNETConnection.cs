// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801
{
    public static class GetSiteVNETConnection
    {
        public static Task<GetSiteVNETConnectionResult> InvokeAsync(GetSiteVNETConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSiteVNETConnectionResult>("azure-nextgen:web/v20150801:getSiteVNETConnection", args ?? new GetSiteVNETConnectionArgs(), options.WithVersion());
    }


    public sealed class GetSiteVNETConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the web app
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Virtual Network
        /// </summary>
        [Input("vnetName", required: true)]
        public string VnetName { get; set; } = null!;

        public GetSiteVNETConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSiteVNETConnectionResult
    {
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        ///             Point-To-Site VPN connection.
        /// </summary>
        public readonly string? CertBlob;
        /// <summary>
        /// The client certificate thumbprint
        /// </summary>
        public readonly string? CertThumbprint;
        /// <summary>
        /// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
        /// </summary>
        public readonly string? DnsServers;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Flag to determine if a resync is required
        /// </summary>
        public readonly bool? ResyncRequired;
        /// <summary>
        /// The routes that this virtual network connection uses.
        /// </summary>
        public readonly ImmutableArray<Outputs.VnetRouteResponse> Routes;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The vnet resource id
        /// </summary>
        public readonly string? VnetResourceId;

        [OutputConstructor]
        private GetSiteVNETConnectionResult(
            string? certBlob,

            string? certThumbprint,

            string? dnsServers,

            string? kind,

            string location,

            string? name,

            bool? resyncRequired,

            ImmutableArray<Outputs.VnetRouteResponse> routes,

            ImmutableDictionary<string, string>? tags,

            string? type,

            string? vnetResourceId)
        {
            CertBlob = certBlob;
            CertThumbprint = certThumbprint;
            DnsServers = dnsServers;
            Kind = kind;
            Location = location;
            Name = name;
            ResyncRequired = resyncRequired;
            Routes = routes;
            Tags = tags;
            Type = type;
            VnetResourceId = vnetResourceId;
        }
    }
}
