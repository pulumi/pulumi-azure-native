// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801.Inputs
{

    /// <summary>
    /// Configuration of Azure web site
    /// </summary>
    public sealed class SiteConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Always On
        /// </summary>
        [Input("alwaysOn")]
        public Input<bool>? AlwaysOn { get; set; }

        /// <summary>
        /// Information about the formal API definition for the web app.
        /// </summary>
        [Input("apiDefinition")]
        public Input<Inputs.ApiDefinitionInfoArgs>? ApiDefinition { get; set; }

        /// <summary>
        /// App Command Line to launch
        /// </summary>
        [Input("appCommandLine")]
        public Input<string>? AppCommandLine { get; set; }

        [Input("appSettings")]
        private InputList<Inputs.NameValuePairArgs>? _appSettings;

        /// <summary>
        /// Application Settings
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputList<Inputs.NameValuePairArgs>());
            set => _appSettings = value;
        }

        /// <summary>
        /// Auto heal enabled
        /// </summary>
        [Input("autoHealEnabled")]
        public Input<bool>? AutoHealEnabled { get; set; }

        /// <summary>
        /// Auto heal rules
        /// </summary>
        [Input("autoHealRules")]
        public Input<Inputs.AutoHealRulesArgs>? AutoHealRules { get; set; }

        /// <summary>
        /// Auto swap slot name
        /// </summary>
        [Input("autoSwapSlotName")]
        public Input<string>? AutoSwapSlotName { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.ConnStringInfoArgs>? _connectionStrings;

        /// <summary>
        /// Connection strings
        /// </summary>
        public InputList<Inputs.ConnStringInfoArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.ConnStringInfoArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.CorsSettingsArgs>? Cors { get; set; }

        [Input("defaultDocuments")]
        private InputList<string>? _defaultDocuments;

        /// <summary>
        /// Default documents
        /// </summary>
        public InputList<string> DefaultDocuments
        {
            get => _defaultDocuments ?? (_defaultDocuments = new InputList<string>());
            set => _defaultDocuments = value;
        }

        /// <summary>
        /// Detailed error logging enabled
        /// </summary>
        [Input("detailedErrorLoggingEnabled")]
        public Input<bool>? DetailedErrorLoggingEnabled { get; set; }

        /// <summary>
        /// Document root
        /// </summary>
        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        /// <summary>
        /// This is work around for polymorphic types
        /// </summary>
        [Input("experiments")]
        public Input<Inputs.ExperimentsArgs>? Experiments { get; set; }

        [Input("handlerMappings")]
        private InputList<Inputs.HandlerMappingArgs>? _handlerMappings;

        /// <summary>
        /// Handler mappings
        /// </summary>
        public InputList<Inputs.HandlerMappingArgs> HandlerMappings
        {
            get => _handlerMappings ?? (_handlerMappings = new InputList<Inputs.HandlerMappingArgs>());
            set => _handlerMappings = value;
        }

        /// <summary>
        /// HTTP logging Enabled
        /// </summary>
        [Input("httpLoggingEnabled")]
        public Input<bool>? HttpLoggingEnabled { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("ipSecurityRestrictions")]
        private InputList<Inputs.IpSecurityRestrictionArgs>? _ipSecurityRestrictions;

        /// <summary>
        /// Ip Security restrictions
        /// </summary>
        public InputList<Inputs.IpSecurityRestrictionArgs> IpSecurityRestrictions
        {
            get => _ipSecurityRestrictions ?? (_ipSecurityRestrictions = new InputList<Inputs.IpSecurityRestrictionArgs>());
            set => _ipSecurityRestrictions = value;
        }

        /// <summary>
        /// Java container
        /// </summary>
        [Input("javaContainer")]
        public Input<string>? JavaContainer { get; set; }

        /// <summary>
        /// Java container version
        /// </summary>
        [Input("javaContainerVersion")]
        public Input<string>? JavaContainerVersion { get; set; }

        /// <summary>
        /// Java version
        /// </summary>
        [Input("javaVersion")]
        public Input<string>? JavaVersion { get; set; }

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Site limits
        /// </summary>
        [Input("limits")]
        public Input<Inputs.SiteLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// Site load balancing
        /// </summary>
        [Input("loadBalancing")]
        public Input<string>? LoadBalancing { get; set; }

        /// <summary>
        /// Local mysql enabled
        /// </summary>
        [Input("localMySqlEnabled")]
        public Input<bool>? LocalMySqlEnabled { get; set; }

        /// <summary>
        /// Resource Location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// HTTP Logs Directory size limit
        /// </summary>
        [Input("logsDirectorySizeLimit")]
        public Input<int>? LogsDirectorySizeLimit { get; set; }

        /// <summary>
        /// Managed pipeline mode
        /// </summary>
        [Input("managedPipelineMode")]
        public Input<string>? ManagedPipelineMode { get; set; }

        [Input("metadata")]
        private InputList<Inputs.NameValuePairArgs>? _metadata;

        /// <summary>
        /// Site Metadata
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> Metadata
        {
            get => _metadata ?? (_metadata = new InputList<Inputs.NameValuePairArgs>());
            set => _metadata = value;
        }

        /// <summary>
        /// Resource Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Net Framework Version
        /// </summary>
        [Input("netFrameworkVersion")]
        public Input<string>? NetFrameworkVersion { get; set; }

        /// <summary>
        /// Version of Node
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// Number of workers
        /// </summary>
        [Input("numberOfWorkers")]
        public Input<int>? NumberOfWorkers { get; set; }

        /// <summary>
        /// Version of PHP
        /// </summary>
        [Input("phpVersion")]
        public Input<string>? PhpVersion { get; set; }

        /// <summary>
        /// Publishing password
        /// </summary>
        [Input("publishingPassword")]
        public Input<string>? PublishingPassword { get; set; }

        /// <summary>
        /// Publishing user name
        /// </summary>
        [Input("publishingUsername")]
        public Input<string>? PublishingUsername { get; set; }

        /// <summary>
        /// Version of Python
        /// </summary>
        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// Remote Debugging Enabled
        /// </summary>
        [Input("remoteDebuggingEnabled")]
        public Input<bool>? RemoteDebuggingEnabled { get; set; }

        /// <summary>
        /// Remote Debugging Version
        /// </summary>
        [Input("remoteDebuggingVersion")]
        public Input<string>? RemoteDebuggingVersion { get; set; }

        /// <summary>
        /// Enable request tracing
        /// </summary>
        [Input("requestTracingEnabled")]
        public Input<bool>? RequestTracingEnabled { get; set; }

        /// <summary>
        /// Request tracing expiration time
        /// </summary>
        [Input("requestTracingExpirationTime")]
        public Input<string>? RequestTracingExpirationTime { get; set; }

        /// <summary>
        /// SCM type
        /// </summary>
        [Input("scmType")]
        public Input<string>? ScmType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Tracing options
        /// </summary>
        [Input("tracingOptions")]
        public Input<string>? TracingOptions { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Use 32 bit worker process
        /// </summary>
        [Input("use32BitWorkerProcess")]
        public Input<bool>? Use32BitWorkerProcess { get; set; }

        [Input("virtualApplications")]
        private InputList<Inputs.VirtualApplicationArgs>? _virtualApplications;

        /// <summary>
        /// Virtual applications
        /// </summary>
        public InputList<Inputs.VirtualApplicationArgs> VirtualApplications
        {
            get => _virtualApplications ?? (_virtualApplications = new InputList<Inputs.VirtualApplicationArgs>());
            set => _virtualApplications = value;
        }

        /// <summary>
        /// Vnet name
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// Web socket enabled.
        /// </summary>
        [Input("webSocketsEnabled")]
        public Input<bool>? WebSocketsEnabled { get; set; }

        public SiteConfigArgs()
        {
        }
    }
}
