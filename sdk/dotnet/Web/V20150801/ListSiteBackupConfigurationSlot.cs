// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20150801
{
    public static class ListSiteBackupConfigurationSlot
    {
        /// <summary>
        /// Description of a backup which will be performed
        /// </summary>
        public static Task<ListSiteBackupConfigurationSlotResult> InvokeAsync(ListSiteBackupConfigurationSlotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListSiteBackupConfigurationSlotResult>("azure-native:web/v20150801:listSiteBackupConfigurationSlot", args ?? new ListSiteBackupConfigurationSlotArgs(), options.WithDefaults());

        /// <summary>
        /// Description of a backup which will be performed
        /// </summary>
        public static Output<ListSiteBackupConfigurationSlotResult> Invoke(ListSiteBackupConfigurationSlotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListSiteBackupConfigurationSlotResult>("azure-native:web/v20150801:listSiteBackupConfigurationSlot", args ?? new ListSiteBackupConfigurationSlotInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListSiteBackupConfigurationSlotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of web app
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of web app slot. If not specified then will default to production slot.
        /// </summary>
        [Input("slot", required: true)]
        public string Slot { get; set; } = null!;

        public ListSiteBackupConfigurationSlotArgs()
        {
        }
        public static new ListSiteBackupConfigurationSlotArgs Empty => new ListSiteBackupConfigurationSlotArgs();
    }

    public sealed class ListSiteBackupConfigurationSlotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of web app
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of web app slot. If not specified then will default to production slot.
        /// </summary>
        [Input("slot", required: true)]
        public Input<string> Slot { get; set; } = null!;

        public ListSiteBackupConfigurationSlotInvokeArgs()
        {
        }
        public static new ListSiteBackupConfigurationSlotInvokeArgs Empty => new ListSiteBackupConfigurationSlotInvokeArgs();
    }


    [OutputType]
    public sealed class ListSiteBackupConfigurationSlotResult
    {
        /// <summary>
        /// Schedule for the backup if it is executed periodically
        /// </summary>
        public readonly Outputs.BackupScheduleResponse? BackupSchedule;
        /// <summary>
        /// Databases included in the backup
        /// </summary>
        public readonly ImmutableArray<Outputs.DatabaseBackupSettingResponse> Databases;
        /// <summary>
        /// True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// SAS URL to the container
        /// </summary>
        public readonly string? StorageAccountUrl;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ListSiteBackupConfigurationSlotResult(
            Outputs.BackupScheduleResponse? backupSchedule,

            ImmutableArray<Outputs.DatabaseBackupSettingResponse> databases,

            bool? enabled,

            string? id,

            string? kind,

            string location,

            string? name,

            string? storageAccountUrl,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BackupSchedule = backupSchedule;
            Databases = databases;
            Enabled = enabled;
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            StorageAccountUrl = storageAccountUrl;
            Tags = tags;
            Type = type;
        }
    }
}
