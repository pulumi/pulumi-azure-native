// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801
{
    public static class GetHostingEnvironment
    {
        public static Task<GetHostingEnvironmentResult> InvokeAsync(GetHostingEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHostingEnvironmentResult>("azure-nextgen:web/v20150801:getHostingEnvironment", args ?? new GetHostingEnvironmentArgs(), options.WithVersion());
    }


    public sealed class GetHostingEnvironmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of hostingEnvironment (App Service Environment)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetHostingEnvironmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHostingEnvironmentResult
    {
        /// <summary>
        /// List of comma separated strings describing which VM sizes are allowed for front-ends
        /// </summary>
        public readonly string? AllowedMultiSizes;
        /// <summary>
        /// List of comma separated strings describing which VM sizes are allowed for workers
        /// </summary>
        public readonly string? AllowedWorkerSizes;
        /// <summary>
        /// Api Management Account associated with this Hosting Environment
        /// </summary>
        public readonly string? ApiManagementAccountId;
        /// <summary>
        /// Custom settings for changing the behavior of the hosting environment
        /// </summary>
        public readonly ImmutableArray<Outputs.NameValuePairResponse> ClusterSettings;
        /// <summary>
        /// Edition of the metadata database for the hostingEnvironment (App Service Environment) e.g. "Standard"
        /// </summary>
        public readonly string? DatabaseEdition;
        /// <summary>
        /// Service objective of the metadata database for the hostingEnvironment (App Service Environment) e.g. "S0"
        /// </summary>
        public readonly string? DatabaseServiceObjective;
        /// <summary>
        /// DNS suffix of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? DnsSuffix;
        /// <summary>
        /// Current total, used, and available worker capacities
        /// </summary>
        public readonly ImmutableArray<Outputs.StampCapacityResponse> EnvironmentCapacities;
        /// <summary>
        /// True/false indicating whether the hostingEnvironment (App Service Environment) is healthy
        /// </summary>
        public readonly bool? EnvironmentIsHealthy;
        /// <summary>
        /// Detailed message about with results of the last check of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? EnvironmentStatus;
        /// <summary>
        /// Specifies which endpoints to serve internally in the hostingEnvironment's (App Service Environment) VNET
        /// </summary>
        public readonly string? InternalLoadBalancingMode;
        /// <summary>
        /// Number of IP SSL addresses reserved for this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly int? IpsslAddressCount;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Last deployment action on this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? LastAction;
        /// <summary>
        /// Result of the last deployment action on this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? LastActionResult;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maximum number of VMs in this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly int? MaximumNumberOfMachines;
        /// <summary>
        /// Number of front-end instances
        /// </summary>
        public readonly int? MultiRoleCount;
        /// <summary>
        /// Front-end VM size, e.g. "Medium", "Large"
        /// </summary>
        public readonly string? MultiSize;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Access control list for controlling traffic to the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkAccessControlEntryResponse> NetworkAccessControlList;
        /// <summary>
        /// Provisioning state of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Resource group of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? ResourceGroup;
        /// <summary>
        /// Current status of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Subscription of the hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly string? SubscriptionId;
        /// <summary>
        /// True/false indicating whether the hostingEnvironment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
        ///             (most likely because NSG blocked the incoming traffic)
        /// </summary>
        public readonly bool? Suspended;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Number of upgrade domains of this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly int? UpgradeDomains;
        /// <summary>
        /// Description of IP SSL mapping for this hostingEnvironment (App Service Environment)
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualIPMappingResponse> VipMappings;
        /// <summary>
        /// Description of the hostingEnvironment's (App Service Environment) virtual network
        /// </summary>
        public readonly Outputs.VirtualNetworkProfileResponse? VirtualNetwork;
        /// <summary>
        /// Name of the hostingEnvironment's (App Service Environment) virtual network
        /// </summary>
        public readonly string? VnetName;
        /// <summary>
        /// Resource group of the hostingEnvironment's (App Service Environment) virtual network
        /// </summary>
        public readonly string? VnetResourceGroupName;
        /// <summary>
        /// Subnet of the hostingEnvironment's (App Service Environment) virtual network
        /// </summary>
        public readonly string? VnetSubnetName;
        /// <summary>
        /// Description of worker pools with worker size ids, VM sizes, and number of workers in each pool
        /// </summary>
        public readonly ImmutableArray<Outputs.WorkerPoolResponse> WorkerPools;

        [OutputConstructor]
        private GetHostingEnvironmentResult(
            string? allowedMultiSizes,

            string? allowedWorkerSizes,

            string? apiManagementAccountId,

            ImmutableArray<Outputs.NameValuePairResponse> clusterSettings,

            string? databaseEdition,

            string? databaseServiceObjective,

            string? dnsSuffix,

            ImmutableArray<Outputs.StampCapacityResponse> environmentCapacities,

            bool? environmentIsHealthy,

            string? environmentStatus,

            string? internalLoadBalancingMode,

            int? ipsslAddressCount,

            string? kind,

            string? lastAction,

            string? lastActionResult,

            string location,

            int? maximumNumberOfMachines,

            int? multiRoleCount,

            string? multiSize,

            string? name,

            ImmutableArray<Outputs.NetworkAccessControlEntryResponse> networkAccessControlList,

            string? provisioningState,

            string? resourceGroup,

            string status,

            string? subscriptionId,

            bool? suspended,

            ImmutableDictionary<string, string>? tags,

            string? type,

            int? upgradeDomains,

            ImmutableArray<Outputs.VirtualIPMappingResponse> vipMappings,

            Outputs.VirtualNetworkProfileResponse? virtualNetwork,

            string? vnetName,

            string? vnetResourceGroupName,

            string? vnetSubnetName,

            ImmutableArray<Outputs.WorkerPoolResponse> workerPools)
        {
            AllowedMultiSizes = allowedMultiSizes;
            AllowedWorkerSizes = allowedWorkerSizes;
            ApiManagementAccountId = apiManagementAccountId;
            ClusterSettings = clusterSettings;
            DatabaseEdition = databaseEdition;
            DatabaseServiceObjective = databaseServiceObjective;
            DnsSuffix = dnsSuffix;
            EnvironmentCapacities = environmentCapacities;
            EnvironmentIsHealthy = environmentIsHealthy;
            EnvironmentStatus = environmentStatus;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            IpsslAddressCount = ipsslAddressCount;
            Kind = kind;
            LastAction = lastAction;
            LastActionResult = lastActionResult;
            Location = location;
            MaximumNumberOfMachines = maximumNumberOfMachines;
            MultiRoleCount = multiRoleCount;
            MultiSize = multiSize;
            Name = name;
            NetworkAccessControlList = networkAccessControlList;
            ProvisioningState = provisioningState;
            ResourceGroup = resourceGroup;
            Status = status;
            SubscriptionId = subscriptionId;
            Suspended = suspended;
            Tags = tags;
            Type = type;
            UpgradeDomains = upgradeDomains;
            VipMappings = vipMappings;
            VirtualNetwork = virtualNetwork;
            VnetName = vnetName;
            VnetResourceGroupName = vnetResourceGroupName;
            VnetSubnetName = vnetSubnetName;
            WorkerPools = workerPools;
        }
    }
}
