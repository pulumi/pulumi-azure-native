// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.V20150801
{
    /// <summary>
    /// VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal
    /// </summary>
    public partial class SiteVNETConnection : Pulumi.CustomResource
    {
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        ///             Point-To-Site VPN connection.
        /// </summary>
        [Output("certBlob")]
        public Output<string?> CertBlob { get; private set; } = null!;

        /// <summary>
        /// The client certificate thumbprint
        /// </summary>
        [Output("certThumbprint")]
        public Output<string?> CertThumbprint { get; private set; } = null!;

        /// <summary>
        /// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
        /// </summary>
        [Output("dnsServers")]
        public Output<string?> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Resource Location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Flag to determine if a resync is required
        /// </summary>
        [Output("resyncRequired")]
        public Output<bool?> ResyncRequired { get; private set; } = null!;

        /// <summary>
        /// The routes that this virtual network connection uses.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.VnetRouteResponse>> Routes { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The vnet resource id
        /// </summary>
        [Output("vnetResourceId")]
        public Output<string?> VnetResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a SiteVNETConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SiteVNETConnection(string name, SiteVNETConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:web/v20150801:SiteVNETConnection", name, args ?? new SiteVNETConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SiteVNETConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:web/v20150801:SiteVNETConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:web/latest:SiteVNETConnection"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20160801:SiteVNETConnection"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20180201:SiteVNETConnection"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20181101:SiteVNETConnection"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20190801:SiteVNETConnection"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20200601:SiteVNETConnection"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SiteVNETConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SiteVNETConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SiteVNETConnection(name, id, options);
        }
    }

    public sealed class SiteVNETConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a 
        ///             Point-To-Site VPN connection.
        /// </summary>
        [Input("certBlob")]
        public Input<string>? CertBlob { get; set; }

        /// <summary>
        /// The client certificate thumbprint
        /// </summary>
        [Input("certThumbprint")]
        public Input<string>? CertThumbprint { get; set; }

        /// <summary>
        /// Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.
        /// </summary>
        [Input("dnsServers")]
        public Input<string>? DnsServers { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Resource Location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Flag to determine if a resync is required
        /// </summary>
        [Input("resyncRequired")]
        public Input<bool>? ResyncRequired { get; set; }

        [Input("routes")]
        private InputList<Inputs.VnetRouteArgs>? _routes;

        /// <summary>
        /// The routes that this virtual network connection uses.
        /// </summary>
        public InputList<Inputs.VnetRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VnetRouteArgs>());
            set => _routes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Resource type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The name of the Virtual Network
        /// </summary>
        [Input("vnetName", required: true)]
        public Input<string> VnetName { get; set; } = null!;

        /// <summary>
        /// The vnet resource id
        /// </summary>
        [Input("vnetResourceId")]
        public Input<string>? VnetResourceId { get; set; }

        public SiteVNETConnectionArgs()
        {
        }
    }
}
