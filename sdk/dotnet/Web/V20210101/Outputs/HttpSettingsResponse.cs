// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20210101.Outputs
{

    /// <summary>
    /// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
    /// </summary>
    [OutputType]
    public sealed class HttpSettingsResponse
    {
        /// <summary>
        /// The configuration settings of a forward proxy used to make the requests.
        /// </summary>
        public readonly Outputs.ForwardProxyResponse? ForwardProxy;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// &lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        public readonly bool? RequireHttps;
        /// <summary>
        /// The configuration settings of the paths HTTP requests.
        /// </summary>
        public readonly Outputs.HttpSettingsRoutesResponse? Routes;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private HttpSettingsResponse(
            Outputs.ForwardProxyResponse? forwardProxy,

            string id,

            string? kind,

            string name,

            bool? requireHttps,

            Outputs.HttpSettingsRoutesResponse? routes,

            string type)
        {
            ForwardProxy = forwardProxy;
            Id = id;
            Kind = kind;
            Name = name;
            RequireHttps = requireHttps;
            Routes = routes;
            Type = type;
        }
    }
}
