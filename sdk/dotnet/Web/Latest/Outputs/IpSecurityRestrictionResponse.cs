// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.Latest.Outputs
{

    [OutputType]
    public sealed class IpSecurityRestrictionResponse
    {
        /// <summary>
        /// Allow or Deny access for this IP range.
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// IP restriction rule description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// IP restriction rule headers.
        /// X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples). 
        /// The matching logic is ..
        /// - If the property is null or empty (default), all hosts(or lack of) are allowed.
        /// - A value is compared using ordinal-ignore-case (excluding port number).
        /// - Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
        ///  but not the root domain contoso.com or multi-level foo.bar.contoso.com
        /// - Unicode host names are allowed but are converted to Punycode for matching.
        /// 
        /// X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
        /// - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
        /// 
        /// X-Azure-FDID and X-FD-HealthProbe.
        /// The matching logic is exact match.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>>? Headers;
        /// <summary>
        /// IP address the security restriction is valid for.
        /// It can be in form of pure ipv4 address (required SubnetMask property) or
        /// CIDR notation such as ipv4/mask (leading bit match). For CIDR,
        /// SubnetMask property must not be specified.
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// IP restriction rule name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Priority of IP restriction rule.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// Subnet mask for the range of IP addresses the restriction is valid for.
        /// </summary>
        public readonly string? SubnetMask;
        /// <summary>
        /// (internal) Subnet traffic tag
        /// </summary>
        public readonly int? SubnetTrafficTag;
        /// <summary>
        /// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
        /// </summary>
        public readonly string? Tag;
        /// <summary>
        /// Virtual network resource id
        /// </summary>
        public readonly string? VnetSubnetResourceId;
        /// <summary>
        /// (internal) Vnet traffic tag
        /// </summary>
        public readonly int? VnetTrafficTag;

        [OutputConstructor]
        private IpSecurityRestrictionResponse(
            string? action,

            string? description,

            ImmutableDictionary<string, ImmutableArray<string>>? headers,

            string? ipAddress,

            string? name,

            int? priority,

            string? subnetMask,

            int? subnetTrafficTag,

            string? tag,

            string? vnetSubnetResourceId,

            int? vnetTrafficTag)
        {
            Action = action;
            Description = description;
            Headers = headers;
            IpAddress = ipAddress;
            Name = name;
            Priority = priority;
            SubnetMask = subnetMask;
            SubnetTrafficTag = subnetTrafficTag;
            Tag = tag;
            VnetSubnetResourceId = vnetSubnetResourceId;
            VnetTrafficTag = vnetTrafficTag;
        }
    }
}
