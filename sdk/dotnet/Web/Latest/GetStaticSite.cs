// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.Latest
{
    [Obsolete(@"The 'latest' version is deprecated. Please migrate to the function in the top-level module: 'azure-native:web:getStaticSite'.")]
    public static class GetStaticSite
    {
        /// <summary>
        /// Static Site ARM resource.
        /// Latest API Version: 2020-12-01.
        /// </summary>
        public static Task<GetStaticSiteResult> InvokeAsync(GetStaticSiteArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStaticSiteResult>("azure-native:web/latest:getStaticSite", args ?? new GetStaticSiteArgs(), options.WithVersion());
    }


    public sealed class GetStaticSiteArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the static site.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetStaticSiteArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStaticSiteResult
    {
        /// <summary>
        /// The target branch in the repository.
        /// </summary>
        public readonly string? Branch;
        /// <summary>
        /// Build properties to configure on the repository.
        /// </summary>
        public readonly Outputs.StaticSiteBuildPropertiesResponse? BuildProperties;
        /// <summary>
        /// The content distribution endpoint for the static site.
        /// </summary>
        public readonly string ContentDistributionEndpoint;
        /// <summary>
        /// The custom domains associated with this static site.
        /// </summary>
        public readonly ImmutableArray<string> CustomDomains;
        /// <summary>
        /// The default autogenerated hostname for the static site.
        /// </summary>
        public readonly string DefaultHostname;
        /// <summary>
        /// Resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed service identity.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// Identity to use for Key Vault Reference authentication.
        /// </summary>
        public readonly string KeyVaultReferenceIdentity;
        /// <summary>
        /// Kind of resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provider that submitted the last deployment to the primary environment of the static site.
        /// </summary>
        public readonly string Provider;
        /// <summary>
        /// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
        /// </summary>
        public readonly string? RepositoryToken;
        /// <summary>
        /// URL for the repository of the static site.
        /// </summary>
        public readonly string? RepositoryUrl;
        /// <summary>
        /// Description of a SKU for a scalable resource.
        /// </summary>
        public readonly Outputs.SkuDescriptionResponse? Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Template options for generating a new repository.
        /// </summary>
        public readonly Outputs.StaticSiteTemplateOptionsResponse? TemplateProperties;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// User provided function apps registered with the static site
        /// </summary>
        public readonly ImmutableArray<Outputs.StaticSiteUserProvidedFunctionAppResponse> UserProvidedFunctionApps;

        [OutputConstructor]
        private GetStaticSiteResult(
            string? branch,

            Outputs.StaticSiteBuildPropertiesResponse? buildProperties,

            string contentDistributionEndpoint,

            ImmutableArray<string> customDomains,

            string defaultHostname,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string keyVaultReferenceIdentity,

            string? kind,

            string location,

            string name,

            string provider,

            string? repositoryToken,

            string? repositoryUrl,

            Outputs.SkuDescriptionResponse? sku,

            ImmutableDictionary<string, string>? tags,

            Outputs.StaticSiteTemplateOptionsResponse? templateProperties,

            string type,

            ImmutableArray<Outputs.StaticSiteUserProvidedFunctionAppResponse> userProvidedFunctionApps)
        {
            Branch = branch;
            BuildProperties = buildProperties;
            ContentDistributionEndpoint = contentDistributionEndpoint;
            CustomDomains = customDomains;
            DefaultHostname = defaultHostname;
            Id = id;
            Identity = identity;
            KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            Kind = kind;
            Location = location;
            Name = name;
            Provider = provider;
            RepositoryToken = repositoryToken;
            RepositoryUrl = repositoryUrl;
            Sku = sku;
            Tags = tags;
            TemplateProperties = templateProperties;
            Type = type;
            UserProvidedFunctionApps = userProvidedFunctionApps;
        }
    }
}
