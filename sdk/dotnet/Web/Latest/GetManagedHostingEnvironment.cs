// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Web.Latest
{
    public static class GetManagedHostingEnvironment
    {
        public static Task<GetManagedHostingEnvironmentResult> InvokeAsync(GetManagedHostingEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedHostingEnvironmentResult>("azure-nextgen:web/latest:getManagedHostingEnvironment", args ?? new GetManagedHostingEnvironmentArgs(), options.WithVersion());
    }


    public sealed class GetManagedHostingEnvironmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of managed hosting environment
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedHostingEnvironmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagedHostingEnvironmentResult
    {
        /// <summary>
        /// Resource id of the api management account associated with this managed hosting environment (read only)
        /// </summary>
        public readonly string? ApiManagementAccount;
        /// <summary>
        /// DNS suffix of the managed hosting environment
        /// </summary>
        public readonly string? DnsSuffix;
        /// <summary>
        /// True/false indicating whether the managed hosting environment is healthy
        /// </summary>
        public readonly bool? EnvironmentIsHealthy;
        /// <summary>
        /// Detailed message about with results of the last check of the managed hosting environment
        /// </summary>
        public readonly string? EnvironmentStatus;
        /// <summary>
        /// Number of ip ssl addresses reserved for the managed hosting environment
        /// </summary>
        public readonly int? IpsslAddressCount;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Resource group of the managed hosting environment (read only)
        /// </summary>
        public readonly string? ResourceGroup;
        /// <summary>
        /// Current status of the managed hosting environment
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Subscription of the managed hosting environment (read only)
        /// </summary>
        public readonly string? SubscriptionId;
        /// <summary>
        /// True/false indicating whether the managed hosting environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
        ///             (most likely because NSG blocked the incoming traffic)
        /// </summary>
        public readonly bool? Suspended;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Description of the managed hosting environment's virtual network
        /// </summary>
        public readonly Outputs.VirtualNetworkProfileResponse? VirtualNetwork;

        [OutputConstructor]
        private GetManagedHostingEnvironmentResult(
            string? apiManagementAccount,

            string? dnsSuffix,

            bool? environmentIsHealthy,

            string? environmentStatus,

            int? ipsslAddressCount,

            string? kind,

            string location,

            string? name,

            string? resourceGroup,

            string status,

            string? subscriptionId,

            bool? suspended,

            ImmutableDictionary<string, string>? tags,

            string? type,

            Outputs.VirtualNetworkProfileResponse? virtualNetwork)
        {
            ApiManagementAccount = apiManagementAccount;
            DnsSuffix = dnsSuffix;
            EnvironmentIsHealthy = environmentIsHealthy;
            EnvironmentStatus = environmentStatus;
            IpsslAddressCount = ipsslAddressCount;
            Kind = kind;
            Location = location;
            Name = name;
            ResourceGroup = resourceGroup;
            Status = status;
            SubscriptionId = subscriptionId;
            Suspended = suspended;
            Tags = tags;
            Type = type;
            VirtualNetwork = virtualNetwork;
        }
    }
}
