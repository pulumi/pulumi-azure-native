// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Web.V20210301
{
    /// <summary>
    /// ActiveRevisionsMode controls how active revisions are handled for the Container app:
    /// &lt;list&gt;&lt;item&gt;Multiple: multiple revisions can be active. If no value if provided, this is the default&lt;/item&gt;&lt;item&gt;Single: Only one revision can be active at a time. Revision weights can not be used in this mode&lt;/item&gt;&lt;/list&gt;
    /// </summary>
    [EnumType]
    public readonly struct ActiveRevisionsMode : IEquatable<ActiveRevisionsMode>
    {
        private readonly string _value;

        private ActiveRevisionsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveRevisionsMode Multiple { get; } = new ActiveRevisionsMode("multiple");
        public static ActiveRevisionsMode Single { get; } = new ActiveRevisionsMode("single");

        public static bool operator ==(ActiveRevisionsMode left, ActiveRevisionsMode right) => left.Equals(right);
        public static bool operator !=(ActiveRevisionsMode left, ActiveRevisionsMode right) => !left.Equals(right);

        public static explicit operator string(ActiveRevisionsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveRevisionsMode other && Equals(other);
        public bool Equals(ActiveRevisionsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FrontEndServiceType : IEquatable<FrontEndServiceType>
    {
        private readonly string _value;

        private FrontEndServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontEndServiceType NodePort { get; } = new FrontEndServiceType("NodePort");
        public static FrontEndServiceType LoadBalancer { get; } = new FrontEndServiceType("LoadBalancer");

        public static bool operator ==(FrontEndServiceType left, FrontEndServiceType right) => left.Equals(right);
        public static bool operator !=(FrontEndServiceType left, FrontEndServiceType right) => !left.Equals(right);

        public static explicit operator string(FrontEndServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontEndServiceType other && Equals(other);
        public bool Equals(FrontEndServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress transport protocol
    /// </summary>
    [EnumType]
    public readonly struct IngressTransportMethod : IEquatable<IngressTransportMethod>
    {
        private readonly string _value;

        private IngressTransportMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressTransportMethod Auto { get; } = new IngressTransportMethod("auto");
        public static IngressTransportMethod Http { get; } = new IngressTransportMethod("http");
        public static IngressTransportMethod Http2 { get; } = new IngressTransportMethod("http2");

        public static bool operator ==(IngressTransportMethod left, IngressTransportMethod right) => left.Equals(right);
        public static bool operator !=(IngressTransportMethod left, IngressTransportMethod right) => !left.Equals(right);

        public static explicit operator string(IngressTransportMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressTransportMethod other && Equals(other);
        public bool Equals(IngressTransportMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType LocalNode { get; } = new StorageType("LocalNode");
        public static StorageType NetworkFileSystem { get; } = new StorageType("NetworkFileSystem");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
