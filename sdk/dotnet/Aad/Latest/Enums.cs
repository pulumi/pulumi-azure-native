// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Aad.Latest
{
    /// <summary>
    /// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct ExternalAccess : IEquatable<ExternalAccess>
    {
        private readonly string _value;

        private ExternalAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExternalAccess Enabled { get; } = new ExternalAccess("Enabled");
        public static ExternalAccess Disabled { get; } = new ExternalAccess("Disabled");

        public static bool operator ==(ExternalAccess left, ExternalAccess right) => left.Equals(right);
        public static bool operator !=(ExternalAccess left, ExternalAccess right) => !left.Equals(right);

        public static explicit operator string(ExternalAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExternalAccess other && Equals(other);
        public bool Equals(ExternalAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enabled or Disabled flag to turn on Group-based filtered sync
    /// </summary>
    [EnumType]
    public readonly struct FilteredSync : IEquatable<FilteredSync>
    {
        private readonly string _value;

        private FilteredSync(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FilteredSync Enabled { get; } = new FilteredSync("Enabled");
        public static FilteredSync Disabled { get; } = new FilteredSync("Disabled");

        public static bool operator ==(FilteredSync left, FilteredSync right) => left.Equals(right);
        public static bool operator !=(FilteredSync left, FilteredSync right) => !left.Equals(right);

        public static explicit operator string(FilteredSync value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilteredSync other && Equals(other);
        public bool Equals(FilteredSync other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not Secure LDAP is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct Ldaps : IEquatable<Ldaps>
    {
        private readonly string _value;

        private Ldaps(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ldaps Enabled { get; } = new Ldaps("Enabled");
        public static Ldaps Disabled { get; } = new Ldaps("Disabled");

        public static bool operator ==(Ldaps left, Ldaps right) => left.Equals(right);
        public static bool operator !=(Ldaps left, Ldaps right) => !left.Equals(right);

        public static explicit operator string(Ldaps value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ldaps other && Equals(other);
        public bool Equals(Ldaps other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Should domain controller admins be notified
    /// </summary>
    [EnumType]
    public readonly struct NotifyDcAdmins : IEquatable<NotifyDcAdmins>
    {
        private readonly string _value;

        private NotifyDcAdmins(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotifyDcAdmins Enabled { get; } = new NotifyDcAdmins("Enabled");
        public static NotifyDcAdmins Disabled { get; } = new NotifyDcAdmins("Disabled");

        public static bool operator ==(NotifyDcAdmins left, NotifyDcAdmins right) => left.Equals(right);
        public static bool operator !=(NotifyDcAdmins left, NotifyDcAdmins right) => !left.Equals(right);

        public static explicit operator string(NotifyDcAdmins value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotifyDcAdmins other && Equals(other);
        public bool Equals(NotifyDcAdmins other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Should global admins be notified
    /// </summary>
    [EnumType]
    public readonly struct NotifyGlobalAdmins : IEquatable<NotifyGlobalAdmins>
    {
        private readonly string _value;

        private NotifyGlobalAdmins(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NotifyGlobalAdmins Enabled { get; } = new NotifyGlobalAdmins("Enabled");
        public static NotifyGlobalAdmins Disabled { get; } = new NotifyGlobalAdmins("Disabled");

        public static bool operator ==(NotifyGlobalAdmins left, NotifyGlobalAdmins right) => left.Equals(right);
        public static bool operator !=(NotifyGlobalAdmins left, NotifyGlobalAdmins right) => !left.Equals(right);

        public static explicit operator string(NotifyGlobalAdmins value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotifyGlobalAdmins other && Equals(other);
        public bool Equals(NotifyGlobalAdmins other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not NtlmV1 is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct NtlmV1 : IEquatable<NtlmV1>
    {
        private readonly string _value;

        private NtlmV1(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NtlmV1 Enabled { get; } = new NtlmV1("Enabled");
        public static NtlmV1 Disabled { get; } = new NtlmV1("Disabled");

        public static bool operator ==(NtlmV1 left, NtlmV1 right) => left.Equals(right);
        public static bool operator !=(NtlmV1 left, NtlmV1 right) => !left.Equals(right);

        public static explicit operator string(NtlmV1 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NtlmV1 other && Equals(other);
        public bool Equals(NtlmV1 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct SyncKerberosPasswords : IEquatable<SyncKerberosPasswords>
    {
        private readonly string _value;

        private SyncKerberosPasswords(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncKerberosPasswords Enabled { get; } = new SyncKerberosPasswords("Enabled");
        public static SyncKerberosPasswords Disabled { get; } = new SyncKerberosPasswords("Disabled");

        public static bool operator ==(SyncKerberosPasswords left, SyncKerberosPasswords right) => left.Equals(right);
        public static bool operator !=(SyncKerberosPasswords left, SyncKerberosPasswords right) => !left.Equals(right);

        public static explicit operator string(SyncKerberosPasswords value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncKerberosPasswords other && Equals(other);
        public bool Equals(SyncKerberosPasswords other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct SyncNtlmPasswords : IEquatable<SyncNtlmPasswords>
    {
        private readonly string _value;

        private SyncNtlmPasswords(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncNtlmPasswords Enabled { get; } = new SyncNtlmPasswords("Enabled");
        public static SyncNtlmPasswords Disabled { get; } = new SyncNtlmPasswords("Disabled");

        public static bool operator ==(SyncNtlmPasswords left, SyncNtlmPasswords right) => left.Equals(right);
        public static bool operator !=(SyncNtlmPasswords left, SyncNtlmPasswords right) => !left.Equals(right);

        public static explicit operator string(SyncNtlmPasswords value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncNtlmPasswords other && Equals(other);
        public bool Equals(SyncNtlmPasswords other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct SyncOnPremPasswords : IEquatable<SyncOnPremPasswords>
    {
        private readonly string _value;

        private SyncOnPremPasswords(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SyncOnPremPasswords Enabled { get; } = new SyncOnPremPasswords("Enabled");
        public static SyncOnPremPasswords Disabled { get; } = new SyncOnPremPasswords("Disabled");

        public static bool operator ==(SyncOnPremPasswords left, SyncOnPremPasswords right) => left.Equals(right);
        public static bool operator !=(SyncOnPremPasswords left, SyncOnPremPasswords right) => !left.Equals(right);

        public static explicit operator string(SyncOnPremPasswords value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SyncOnPremPasswords other && Equals(other);
        public bool Equals(SyncOnPremPasswords other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag to determine whether or not TlsV1 is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct TlsV1 : IEquatable<TlsV1>
    {
        private readonly string _value;

        private TlsV1(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TlsV1 Enabled { get; } = new TlsV1("Enabled");
        public static TlsV1 Disabled { get; } = new TlsV1("Disabled");

        public static bool operator ==(TlsV1 left, TlsV1 right) => left.Equals(right);
        public static bool operator !=(TlsV1 left, TlsV1 right) => !left.Equals(right);

        public static explicit operator string(TlsV1 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TlsV1 other && Equals(other);
        public bool Equals(TlsV1 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
