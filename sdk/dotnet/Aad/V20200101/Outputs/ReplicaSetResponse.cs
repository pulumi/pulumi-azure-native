// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Aad.V20200101.Outputs
{

    [OutputType]
    public sealed class ReplicaSetResponse
    {
        /// <summary>
        /// List of Domain Controller IP Address
        /// </summary>
        public readonly ImmutableArray<string> DomainControllerIpAddress;
        /// <summary>
        /// External access ip address.
        /// </summary>
        public readonly string ExternalAccessIpAddress;
        /// <summary>
        /// List of Domain Health Alerts
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthAlertResponse> HealthAlerts;
        /// <summary>
        /// Last domain evaluation run DateTime
        /// </summary>
        public readonly string HealthLastEvaluated;
        /// <summary>
        /// List of Domain Health Monitors
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthMonitorResponse> HealthMonitors;
        /// <summary>
        /// Virtual network location
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// ReplicaSet Id
        /// </summary>
        public readonly string ReplicaSetId;
        /// <summary>
        /// Status of Domain Service instance
        /// </summary>
        public readonly string ServiceStatus;
        /// <summary>
        /// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Virtual network site id
        /// </summary>
        public readonly string VnetSiteId;

        [OutputConstructor]
        private ReplicaSetResponse(
            ImmutableArray<string> domainControllerIpAddress,

            string externalAccessIpAddress,

            ImmutableArray<Outputs.HealthAlertResponse> healthAlerts,

            string healthLastEvaluated,

            ImmutableArray<Outputs.HealthMonitorResponse> healthMonitors,

            string? location,

            string replicaSetId,

            string serviceStatus,

            string? subnetId,

            string vnetSiteId)
        {
            DomainControllerIpAddress = domainControllerIpAddress;
            ExternalAccessIpAddress = externalAccessIpAddress;
            HealthAlerts = healthAlerts;
            HealthLastEvaluated = healthLastEvaluated;
            HealthMonitors = healthMonitors;
            Location = location;
            ReplicaSetId = replicaSetId;
            ServiceStatus = serviceStatus;
            SubnetId = subnetId;
            VnetSiteId = vnetSiteId;
        }
    }
}
