// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20230401Preview
{
    public static class GetMetadata
    {
        /// <summary>
        /// Get a Metadata.
        /// </summary>
        public static Task<GetMetadataResult> InvokeAsync(GetMetadataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetadataResult>("azure-native:securityinsights/v20230401preview:getMetadata", args ?? new GetMetadataArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Metadata.
        /// </summary>
        public static Output<GetMetadataResult> Invoke(GetMetadataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetadataResult>("azure-native:securityinsights/v20230401preview:getMetadata", args ?? new GetMetadataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetadataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Metadata name.
        /// </summary>
        [Input("metadataName", required: true)]
        public string MetadataName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetMetadataArgs()
        {
        }
        public static new GetMetadataArgs Empty => new GetMetadataArgs();
    }

    public sealed class GetMetadataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Metadata name.
        /// </summary>
        [Input("metadataName", required: true)]
        public Input<string> MetadataName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetMetadataInvokeArgs()
        {
        }
        public static new GetMetadataInvokeArgs Empty => new GetMetadataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetadataResult
    {
        /// <summary>
        /// The creator of the content item.
        /// </summary>
        public readonly Outputs.MetadataAuthorResponse? Author;
        /// <summary>
        /// Categories for the solution content item
        /// </summary>
        public readonly Outputs.MetadataCategoriesResponse? Categories;
        /// <summary>
        /// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
        /// </summary>
        public readonly string? ContentId;
        /// <summary>
        /// Schema version of the content. Can be used to distinguish between different flow based on the schema version
        /// </summary>
        public readonly string? ContentSchemaVersion;
        /// <summary>
        /// The custom version of the content. A optional free text
        /// </summary>
        public readonly string? CustomVersion;
        /// <summary>
        /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
        /// </summary>
        public readonly Outputs.MetadataDependenciesResponse? Dependencies;
        /// <summary>
        /// Etag of the azure resource
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// first publish date solution content item
        /// </summary>
        public readonly string? FirstPublishDate;
        /// <summary>
        /// the icon identifier. this id can later be fetched from the solution template
        /// </summary>
        public readonly string? Icon;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of content the metadata is for.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// last publish date for the solution content item
        /// </summary>
        public readonly string? LastPublishDate;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
        /// </summary>
        public readonly string ParentId;
        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts
        /// </summary>
        public readonly ImmutableArray<string> PreviewImages;
        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts. used for dark theme support
        /// </summary>
        public readonly ImmutableArray<string> PreviewImagesDark;
        /// <summary>
        /// Providers for the solution content item
        /// </summary>
        public readonly ImmutableArray<string> Providers;
        /// <summary>
        /// Source of the content.  This is where/how it was created.
        /// </summary>
        public readonly Outputs.MetadataSourceResponse? Source;
        /// <summary>
        /// Support information for the metadata - type, name, contact information
        /// </summary>
        public readonly Outputs.MetadataSupportResponse? Support;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// the tactics the resource covers
        /// </summary>
        public readonly ImmutableArray<string> ThreatAnalysisTactics;
        /// <summary>
        /// the techniques the resource covers, these have to be aligned with the tactics being used
        /// </summary>
        public readonly ImmutableArray<string> ThreatAnalysisTechniques;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetMetadataResult(
            Outputs.MetadataAuthorResponse? author,

            Outputs.MetadataCategoriesResponse? categories,

            string? contentId,

            string? contentSchemaVersion,

            string? customVersion,

            Outputs.MetadataDependenciesResponse? dependencies,

            string? etag,

            string? firstPublishDate,

            string? icon,

            string id,

            string kind,

            string? lastPublishDate,

            string name,

            string parentId,

            ImmutableArray<string> previewImages,

            ImmutableArray<string> previewImagesDark,

            ImmutableArray<string> providers,

            Outputs.MetadataSourceResponse? source,

            Outputs.MetadataSupportResponse? support,

            Outputs.SystemDataResponse systemData,

            ImmutableArray<string> threatAnalysisTactics,

            ImmutableArray<string> threatAnalysisTechniques,

            string type,

            string? version)
        {
            Author = author;
            Categories = categories;
            ContentId = contentId;
            ContentSchemaVersion = contentSchemaVersion;
            CustomVersion = customVersion;
            Dependencies = dependencies;
            Etag = etag;
            FirstPublishDate = firstPublishDate;
            Icon = icon;
            Id = id;
            Kind = kind;
            LastPublishDate = lastPublishDate;
            Name = name;
            ParentId = parentId;
            PreviewImages = previewImages;
            PreviewImagesDark = previewImagesDark;
            Providers = providers;
            Source = source;
            Support = support;
            SystemData = systemData;
            ThreatAnalysisTactics = threatAnalysisTactics;
            ThreatAnalysisTechniques = threatAnalysisTechniques;
            Type = type;
            Version = version;
        }
    }
}
