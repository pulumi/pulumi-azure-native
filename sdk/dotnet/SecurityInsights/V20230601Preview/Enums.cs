// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.SecurityInsights.V20230601Preview
{
    /// <summary>
    /// The severity for alerts created by this alert rule.
    /// </summary>
    [EnumType]
    public readonly struct AttackTactic : IEquatable<AttackTactic>
    {
        private readonly string _value;

        private AttackTactic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AttackTactic Reconnaissance { get; } = new AttackTactic("Reconnaissance");
        public static AttackTactic ResourceDevelopment { get; } = new AttackTactic("ResourceDevelopment");
        public static AttackTactic InitialAccess { get; } = new AttackTactic("InitialAccess");
        public static AttackTactic Execution { get; } = new AttackTactic("Execution");
        public static AttackTactic Persistence { get; } = new AttackTactic("Persistence");
        public static AttackTactic PrivilegeEscalation { get; } = new AttackTactic("PrivilegeEscalation");
        public static AttackTactic DefenseEvasion { get; } = new AttackTactic("DefenseEvasion");
        public static AttackTactic CredentialAccess { get; } = new AttackTactic("CredentialAccess");
        public static AttackTactic Discovery { get; } = new AttackTactic("Discovery");
        public static AttackTactic LateralMovement { get; } = new AttackTactic("LateralMovement");
        public static AttackTactic Collection { get; } = new AttackTactic("Collection");
        public static AttackTactic Exfiltration { get; } = new AttackTactic("Exfiltration");
        public static AttackTactic CommandAndControl { get; } = new AttackTactic("CommandAndControl");
        public static AttackTactic Impact { get; } = new AttackTactic("Impact");
        public static AttackTactic PreAttack { get; } = new AttackTactic("PreAttack");
        public static AttackTactic ImpairProcessControl { get; } = new AttackTactic("ImpairProcessControl");
        public static AttackTactic InhibitResponseFunction { get; } = new AttackTactic("InhibitResponseFunction");

        public static bool operator ==(AttackTactic left, AttackTactic right) => left.Equals(right);
        public static bool operator !=(AttackTactic left, AttackTactic right) => !left.Equals(right);

        public static explicit operator string(AttackTactic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AttackTactic other && Equals(other);
        public bool Equals(AttackTactic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity query kind
    /// </summary>
    [EnumType]
    public readonly struct EntityTimelineKind : IEquatable<EntityTimelineKind>
    {
        private readonly string _value;

        private EntityTimelineKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// activity
        /// </summary>
        public static EntityTimelineKind Activity { get; } = new EntityTimelineKind("Activity");
        /// <summary>
        /// bookmarks
        /// </summary>
        public static EntityTimelineKind Bookmark { get; } = new EntityTimelineKind("Bookmark");
        /// <summary>
        /// security alerts
        /// </summary>
        public static EntityTimelineKind SecurityAlert { get; } = new EntityTimelineKind("SecurityAlert");
        /// <summary>
        /// anomaly
        /// </summary>
        public static EntityTimelineKind Anomaly { get; } = new EntityTimelineKind("Anomaly");

        public static bool operator ==(EntityTimelineKind left, EntityTimelineKind right) => left.Equals(right);
        public static bool operator !=(EntityTimelineKind left, EntityTimelineKind right) => !left.Equals(right);

        public static explicit operator string(EntityTimelineKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityTimelineKind other && Equals(other);
        public bool Equals(EntityTimelineKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the file
    /// </summary>
    [EnumType]
    public readonly struct FileFormat : IEquatable<FileFormat>
    {
        private readonly string _value;

        private FileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A CSV file.
        /// </summary>
        public static FileFormat CSV { get; } = new FileFormat("CSV");
        /// <summary>
        /// A JSON file.
        /// </summary>
        public static FileFormat JSON { get; } = new FileFormat("JSON");
        /// <summary>
        /// A file of other format.
        /// </summary>
        public static FileFormat Unspecified { get; } = new FileFormat("Unspecified");

        public static bool operator ==(FileFormat left, FileFormat right) => left.Equals(right);
        public static bool operator !=(FileFormat left, FileFormat right) => !left.Equals(right);

        public static explicit operator string(FileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileFormat other && Equals(other);
        public bool Equals(FileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The content type of this file.
    /// </summary>
    [EnumType]
    public readonly struct FileImportContentType : IEquatable<FileImportContentType>
    {
        private readonly string _value;

        private FileImportContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern.
        /// </summary>
        public static FileImportContentType BasicIndicator { get; } = new FileImportContentType("BasicIndicator");
        /// <summary>
        /// File containing STIX indicators.
        /// </summary>
        public static FileImportContentType StixIndicator { get; } = new FileImportContentType("StixIndicator");
        /// <summary>
        /// File containing other records.
        /// </summary>
        public static FileImportContentType Unspecified { get; } = new FileImportContentType("Unspecified");

        public static bool operator ==(FileImportContentType left, FileImportContentType right) => left.Equals(right);
        public static bool operator !=(FileImportContentType left, FileImportContentType right) => !left.Equals(right);

        public static explicit operator string(FileImportContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileImportContentType other && Equals(other);
        public bool Equals(FileImportContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag indicates if this package is in preview.
    /// </summary>
    [EnumType]
    public readonly struct Flag : IEquatable<Flag>
    {
        private readonly string _value;

        private Flag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Flag @True { get; } = new Flag("true");
        public static Flag @False { get; } = new Flag("false");

        public static bool operator ==(Flag left, Flag right) => left.Equals(right);
        public static bool operator !=(Flag left, Flag right) => !left.Equals(right);

        public static explicit operator string(Flag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Flag other && Equals(other);
        public bool Equals(Flag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The hypothesis status of the hunt.
    /// </summary>
    [EnumType]
    public readonly struct HypothesisStatus : IEquatable<HypothesisStatus>
    {
        private readonly string _value;

        private HypothesisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HypothesisStatus Unknown { get; } = new HypothesisStatus("Unknown");
        public static HypothesisStatus Invalidated { get; } = new HypothesisStatus("Invalidated");
        public static HypothesisStatus Validated { get; } = new HypothesisStatus("Validated");

        public static bool operator ==(HypothesisStatus left, HypothesisStatus right) => left.Equals(right);
        public static bool operator !=(HypothesisStatus left, HypothesisStatus right) => !left.Equals(right);

        public static explicit operator string(HypothesisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HypothesisStatus other && Equals(other);
        public bool Equals(HypothesisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IncidentTaskStatus : IEquatable<IncidentTaskStatus>
    {
        private readonly string _value;

        private IncidentTaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A new task
        /// </summary>
        public static IncidentTaskStatus New { get; } = new IncidentTaskStatus("New");
        /// <summary>
        /// A completed task
        /// </summary>
        public static IncidentTaskStatus Completed { get; } = new IncidentTaskStatus("Completed");

        public static bool operator ==(IncidentTaskStatus left, IncidentTaskStatus right) => left.Equals(right);
        public static bool operator !=(IncidentTaskStatus left, IncidentTaskStatus right) => !left.Equals(right);

        public static explicit operator string(IncidentTaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentTaskStatus other && Equals(other);
        public bool Equals(IncidentTaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes how to ingest the records in the file.
    /// </summary>
    [EnumType]
    public readonly struct IngestionMode : IEquatable<IngestionMode>
    {
        private readonly string _value;

        private IngestionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No records should be ingested when invalid records are detected.
        /// </summary>
        public static IngestionMode IngestOnlyIfAllAreValid { get; } = new IngestionMode("IngestOnlyIfAllAreValid");
        /// <summary>
        /// Valid records should still be ingested when invalid records are detected.
        /// </summary>
        public static IngestionMode IngestAnyValidRecords { get; } = new IngestionMode("IngestAnyValidRecords");
        /// <summary>
        /// Unspecified
        /// </summary>
        public static IngestionMode Unspecified { get; } = new IngestionMode("Unspecified");

        public static bool operator ==(IngestionMode left, IngestionMode right) => left.Equals(right);
        public static bool operator !=(IngestionMode left, IngestionMode right) => !left.Equals(right);

        public static explicit operator string(IngestionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngestionMode other && Equals(other);
        public bool Equals(IngestionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the content item we depend on
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind DataConnector { get; } = new Kind("DataConnector");
        public static Kind DataType { get; } = new Kind("DataType");
        public static Kind Workbook { get; } = new Kind("Workbook");
        public static Kind WorkbookTemplate { get; } = new Kind("WorkbookTemplate");
        public static Kind Playbook { get; } = new Kind("Playbook");
        public static Kind PlaybookTemplate { get; } = new Kind("PlaybookTemplate");
        public static Kind AnalyticsRuleTemplate { get; } = new Kind("AnalyticsRuleTemplate");
        public static Kind AnalyticsRule { get; } = new Kind("AnalyticsRule");
        public static Kind HuntingQuery { get; } = new Kind("HuntingQuery");
        public static Kind InvestigationQuery { get; } = new Kind("InvestigationQuery");
        public static Kind Parser { get; } = new Kind("Parser");
        public static Kind Watchlist { get; } = new Kind("Watchlist");
        public static Kind WatchlistTemplate { get; } = new Kind("WatchlistTemplate");
        public static Kind Solution { get; } = new Kind("Solution");
        public static Kind AzureFunction { get; } = new Kind("AzureFunction");
        public static Kind LogicAppsCustomConnector { get; } = new Kind("LogicAppsCustomConnector");
        public static Kind AutomationRule { get; } = new Kind("AutomationRule");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current mode of the workspace manager configuration
    /// </summary>
    [EnumType]
    public readonly struct Mode : IEquatable<Mode>
    {
        private readonly string _value;

        private Mode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The workspace manager configuration is enabled
        /// </summary>
        public static Mode Enabled { get; } = new Mode("Enabled");
        /// <summary>
        /// The workspace manager configuration is disabled
        /// </summary>
        public static Mode Disabled { get; } = new Mode("Disabled");

        public static bool operator ==(Mode left, Mode right) => left.Equals(right);
        public static bool operator !=(Mode left, Mode right) => !left.Equals(right);

        public static explicit operator string(Mode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Mode other && Equals(other);
        public bool Equals(Mode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator used for list of dependencies in criteria array.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator AND { get; } = new Operator("AND");
        public static Operator OR { get; } = new Operator("OR");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the owner the hunt is assigned to.
    /// </summary>
    [EnumType]
    public readonly struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        private OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The hunt owner type is unknown
        /// </summary>
        public static OwnerType Unknown { get; } = new OwnerType("Unknown");
        /// <summary>
        /// The hunt owner type is an AAD user
        /// </summary>
        public static OwnerType User { get; } = new OwnerType("User");
        /// <summary>
        /// The hunt owner type is an AAD group
        /// </summary>
        public static OwnerType Group { get; } = new OwnerType("Group");

        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);

        public static explicit operator string(OwnerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwnerType other && Equals(other);
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the packageKind of the package contains this template
    /// </summary>
    [EnumType]
    public readonly struct PackageKind : IEquatable<PackageKind>
    {
        private readonly string _value;

        private PackageKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackageKind Solution { get; } = new PackageKind("Solution");
        public static PackageKind Standalone { get; } = new PackageKind("Standalone");

        public static bool operator ==(PackageKind left, PackageKind right) => left.Equals(right);
        public static bool operator !=(PackageKind left, PackageKind right) => !left.Equals(right);

        public static explicit operator string(PackageKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackageKind other && Equals(other);
        public bool Equals(PackageKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source type of the content
    /// </summary>
    [EnumType]
    public readonly struct SourceKind : IEquatable<SourceKind>
    {
        private readonly string _value;

        private SourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceKind LocalWorkspace { get; } = new SourceKind("LocalWorkspace");
        public static SourceKind Community { get; } = new SourceKind("Community");
        public static SourceKind Solution { get; } = new SourceKind("Solution");
        public static SourceKind SourceRepository { get; } = new SourceKind("SourceRepository");

        public static bool operator ==(SourceKind left, SourceKind right) => left.Equals(right);
        public static bool operator !=(SourceKind left, SourceKind right) => !left.Equals(right);

        public static explicit operator string(SourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceKind other && Equals(other);
        public bool Equals(SourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the hunt.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status New { get; } = new Status("New");
        public static Status Active { get; } = new Status("Active");
        public static Status Closed { get; } = new Status("Closed");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of support for content item
    /// </summary>
    [EnumType]
    public readonly struct SupportTier : IEquatable<SupportTier>
    {
        private readonly string _value;

        private SupportTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportTier Microsoft { get; } = new SupportTier("Microsoft");
        public static SupportTier Partner { get; } = new SupportTier("Partner");
        public static SupportTier Community { get; } = new SupportTier("Community");

        public static bool operator ==(SupportTier left, SupportTier right) => left.Equals(right);
        public static bool operator !=(SupportTier left, SupportTier right) => !left.Equals(right);

        public static explicit operator string(SupportTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportTier other && Equals(other);
        public bool Equals(SupportTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
