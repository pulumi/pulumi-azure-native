// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20230501Preview.Outputs
{

    /// <summary>
    /// Describe the request properties needed to successfully pull from the server
    /// </summary>
    [OutputType]
    public sealed class CodelessConnectorPollingRequestPropertiesResponse
    {
        /// <summary>
        /// Describe the endpoint we should pull the data from
        /// </summary>
        public readonly string ApiEndpoint;
        /// <summary>
        /// This will be used the query events from the end of the time window
        /// </summary>
        public readonly string? EndTimeAttributeName;
        /// <summary>
        /// Describe the headers sent in the poll request
        /// </summary>
        public readonly object? Headers;
        /// <summary>
        /// The http method type we will use in the poll request, GET or POST
        /// </summary>
        public readonly string HttpMethod;
        /// <summary>
        /// Describe the query parameters sent in the poll request
        /// </summary>
        public readonly object? QueryParameters;
        /// <summary>
        /// For advanced scenarios for example user name/password embedded in nested JSON payload
        /// </summary>
        public readonly string? QueryParametersTemplate;
        /// <summary>
        /// The time format will be used the query events in a specific window
        /// </summary>
        public readonly string QueryTimeFormat;
        /// <summary>
        /// The window interval we will use the pull the data
        /// </summary>
        public readonly int QueryWindowInMin;
        /// <summary>
        /// Defines the rate limit QPS
        /// </summary>
        public readonly int? RateLimitQps;
        /// <summary>
        /// Describe the amount of time we should try and poll the data in case of failure
        /// </summary>
        public readonly int? RetryCount;
        /// <summary>
        /// This will be used the query events from a start of the time window
        /// </summary>
        public readonly string? StartTimeAttributeName;
        /// <summary>
        /// The number of seconds we will consider as a request timeout
        /// </summary>
        public readonly int? TimeoutInSeconds;

        [OutputConstructor]
        private CodelessConnectorPollingRequestPropertiesResponse(
            string apiEndpoint,

            string? endTimeAttributeName,

            object? headers,

            string httpMethod,

            object? queryParameters,

            string? queryParametersTemplate,

            string queryTimeFormat,

            int queryWindowInMin,

            int? rateLimitQps,

            int? retryCount,

            string? startTimeAttributeName,

            int? timeoutInSeconds)
        {
            ApiEndpoint = apiEndpoint;
            EndTimeAttributeName = endTimeAttributeName;
            Headers = headers;
            HttpMethod = httpMethod;
            QueryParameters = queryParameters;
            QueryParametersTemplate = queryParametersTemplate;
            QueryTimeFormat = queryTimeFormat;
            QueryWindowInMin = queryWindowInMin;
            RateLimitQps = rateLimitQps;
            RetryCount = retryCount;
            StartTimeAttributeName = startTimeAttributeName;
            TimeoutInSeconds = timeoutInSeconds;
        }
    }
}
