// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20240101Preview.Inputs
{

    /// <summary>
    /// Model for API authentication with JWT. Simple exchange between user name + password to access token.
    /// </summary>
    public sealed class JwtAuthModelArgs : global::Pulumi.ResourceArgs
    {
        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// The custom headers we want to add once we send request to token endpoint.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        /// <summary>
        /// Flag indicating whether we want to send the user name and password to token endpoint in the headers.
        /// </summary>
        [Input("isCredentialsInHeaders")]
        public Input<bool>? IsCredentialsInHeaders { get; set; }

        /// <summary>
        /// Flag indicating whether the body request is JSON (header Content-Type = application/json), meaning its a Form URL encoded request (header Content-Type = application/x-www-form-urlencoded).
        /// </summary>
        [Input("isJsonRequest")]
        public Input<bool>? IsJsonRequest { get; set; }

        [Input("password", required: true)]
        private InputMap<string>? _password;

        /// <summary>
        /// The password
        /// </summary>
        public InputMap<string> Password
        {
            get => _password ?? (_password = new InputMap<string>());
            set => _password = value;
        }

        [Input("queryParameters")]
        private InputMap<string>? _queryParameters;

        /// <summary>
        /// The custom query parameter we want to add once we send request to token endpoint.
        /// </summary>
        public InputMap<string> QueryParameters
        {
            get => _queryParameters ?? (_queryParameters = new InputMap<string>());
            set => _queryParameters = value;
        }

        /// <summary>
        /// Request timeout in seconds.
        /// </summary>
        [Input("requestTimeoutInSeconds")]
        public Input<int>? RequestTimeoutInSeconds { get; set; }

        /// <summary>
        /// Token endpoint to request JWT
        /// </summary>
        [Input("tokenEndpoint", required: true)]
        public Input<string> TokenEndpoint { get; set; } = null!;

        /// <summary>
        /// Type of paging
        /// Expected value is 'JwtToken'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userName", required: true)]
        private InputMap<string>? _userName;

        /// <summary>
        /// The user name. If user name and password sent in header request we only need to populate the `value` property with the user name (Same as basic auth). If user name and password sent in body request we need to specify the `Key` and `Value`.
        /// </summary>
        public InputMap<string> UserName
        {
            get => _userName ?? (_userName = new InputMap<string>());
            set => _userName = value;
        }

        public JwtAuthModelArgs()
        {
            IsJsonRequest = false;
            RequestTimeoutInSeconds = 100;
        }
        public static new JwtAuthModelArgs Empty => new JwtAuthModelArgs();
    }
}
