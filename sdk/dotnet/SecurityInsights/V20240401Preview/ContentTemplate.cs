// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20240401Preview
{
    /// <summary>
    /// Template resource definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:securityinsights/v20240401preview:ContentTemplate")]
    public partial class ContentTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creator of the content item.
        /// </summary>
        [Output("author")]
        public Output<Outputs.MetadataAuthorResponse?> Author { get; private set; } = null!;

        /// <summary>
        /// Categories for the item
        /// </summary>
        [Output("categories")]
        public Output<Outputs.MetadataCategoriesResponse?> Categories { get; private set; } = null!;

        /// <summary>
        /// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
        /// </summary>
        [Output("contentId")]
        public Output<string> ContentId { get; private set; } = null!;

        /// <summary>
        /// The kind of content the template is for.
        /// </summary>
        [Output("contentKind")]
        public Output<string> ContentKind { get; private set; } = null!;

        /// <summary>
        /// Unique ID for the content. It should be generated based on the contentId of the package, contentId of the template, contentKind of the template and the contentVersion of the template
        /// </summary>
        [Output("contentProductId")]
        public Output<string> ContentProductId { get; private set; } = null!;

        /// <summary>
        /// Schema version of the content. Can be used to distinguish between different flow based on the schema version
        /// </summary>
        [Output("contentSchemaVersion")]
        public Output<string?> ContentSchemaVersion { get; private set; } = null!;

        /// <summary>
        /// The custom version of the content. A optional free text
        /// </summary>
        [Output("customVersion")]
        public Output<string?> CustomVersion { get; private set; } = null!;

        /// <summary>
        /// Dependant templates. Expandable.
        /// </summary>
        [Output("dependantTemplates")]
        public Output<ImmutableArray<Outputs.TemplatePropertiesResponse>> DependantTemplates { get; private set; } = null!;

        /// <summary>
        /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
        /// </summary>
        [Output("dependencies")]
        public Output<Outputs.MetadataDependenciesResponse?> Dependencies { get; private set; } = null!;

        /// <summary>
        /// The display name of the template
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Etag of the azure resource
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// first publish date content item
        /// </summary>
        [Output("firstPublishDate")]
        public Output<string?> FirstPublishDate { get; private set; } = null!;

        /// <summary>
        /// the icon identifier. this id can later be fetched from the content metadata
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// Flag indicates if this template is deprecated
        /// </summary>
        [Output("isDeprecated")]
        public Output<string> IsDeprecated { get; private set; } = null!;

        /// <summary>
        /// last publish date for the content item
        /// </summary>
        [Output("lastPublishDate")]
        public Output<string?> LastPublishDate { get; private set; } = null!;

        /// <summary>
        /// The JSON of the ARM template to deploy active content. Expandable.
        /// </summary>
        [Output("mainTemplate")]
        public Output<object?> MainTemplate { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// the package Id contains this template
        /// </summary>
        [Output("packageId")]
        public Output<string> PackageId { get; private set; } = null!;

        /// <summary>
        /// the packageKind of the package contains this template
        /// </summary>
        [Output("packageKind")]
        public Output<string?> PackageKind { get; private set; } = null!;

        /// <summary>
        /// the name of the package contains this template
        /// </summary>
        [Output("packageName")]
        public Output<string?> PackageName { get; private set; } = null!;

        /// <summary>
        /// Version of the package.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// </summary>
        [Output("packageVersion")]
        public Output<string> PackageVersion { get; private set; } = null!;

        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts
        /// </summary>
        [Output("previewImages")]
        public Output<ImmutableArray<string>> PreviewImages { get; private set; } = null!;

        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts. used for dark theme support
        /// </summary>
        [Output("previewImagesDark")]
        public Output<ImmutableArray<string>> PreviewImagesDark { get; private set; } = null!;

        /// <summary>
        /// Providers for the content item
        /// </summary>
        [Output("providers")]
        public Output<ImmutableArray<string>> Providers { get; private set; } = null!;

        /// <summary>
        /// Source of the content.  This is where/how it was created.
        /// </summary>
        [Output("source")]
        public Output<Outputs.MetadataSourceResponse> Source { get; private set; } = null!;

        /// <summary>
        /// Support information for the template - type, name, contact information
        /// </summary>
        [Output("support")]
        public Output<Outputs.MetadataSupportResponse?> Support { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// the tactics the resource covers
        /// </summary>
        [Output("threatAnalysisTactics")]
        public Output<ImmutableArray<string>> ThreatAnalysisTactics { get; private set; } = null!;

        /// <summary>
        /// the techniques the resource covers, these have to be aligned with the tactics being used
        /// </summary>
        [Output("threatAnalysisTechniques")]
        public Output<ImmutableArray<string>> ThreatAnalysisTechniques { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ContentTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContentTemplate(string name, ContentTemplateArgs args, CustomResourceOptions? options = null)
            : base("azure-native:securityinsights/v20240401preview:ContentTemplate", name, args ?? new ContentTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContentTemplate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:securityinsights/v20240401preview:ContentTemplate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230401preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230501preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230601preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230701preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230801preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20230901preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20231001preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20231101:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20231201preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20240101preview:ContentTemplate" },
                    new global::Pulumi.Alias { Type = "azure-native:securityinsights/v20240301:ContentTemplate" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContentTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContentTemplate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ContentTemplate(name, id, options);
        }
    }

    public sealed class ContentTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creator of the content item.
        /// </summary>
        [Input("author")]
        public Input<Inputs.MetadataAuthorArgs>? Author { get; set; }

        /// <summary>
        /// Categories for the item
        /// </summary>
        [Input("categories")]
        public Input<Inputs.MetadataCategoriesArgs>? Categories { get; set; }

        /// <summary>
        /// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
        /// </summary>
        [Input("contentId", required: true)]
        public Input<string> ContentId { get; set; } = null!;

        /// <summary>
        /// The kind of content the template is for.
        /// </summary>
        [Input("contentKind", required: true)]
        public InputUnion<string, Pulumi.AzureNative.SecurityInsights.V20240401Preview.Kind> ContentKind { get; set; } = null!;

        /// <summary>
        /// Unique ID for the content. It should be generated based on the contentId of the package, contentId of the template, contentKind of the template and the contentVersion of the template
        /// </summary>
        [Input("contentProductId", required: true)]
        public Input<string> ContentProductId { get; set; } = null!;

        /// <summary>
        /// Schema version of the content. Can be used to distinguish between different flow based on the schema version
        /// </summary>
        [Input("contentSchemaVersion")]
        public Input<string>? ContentSchemaVersion { get; set; }

        /// <summary>
        /// The custom version of the content. A optional free text
        /// </summary>
        [Input("customVersion")]
        public Input<string>? CustomVersion { get; set; }

        /// <summary>
        /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
        /// </summary>
        [Input("dependencies")]
        public Input<Inputs.MetadataDependenciesArgs>? Dependencies { get; set; }

        /// <summary>
        /// The display name of the template
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// first publish date content item
        /// </summary>
        [Input("firstPublishDate")]
        public Input<string>? FirstPublishDate { get; set; }

        /// <summary>
        /// the icon identifier. this id can later be fetched from the content metadata
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// last publish date for the content item
        /// </summary>
        [Input("lastPublishDate")]
        public Input<string>? LastPublishDate { get; set; }

        /// <summary>
        /// The JSON of the ARM template to deploy active content. Expandable.
        /// </summary>
        [Input("mainTemplate")]
        public Input<object>? MainTemplate { get; set; }

        /// <summary>
        /// the package Id contains this template
        /// </summary>
        [Input("packageId", required: true)]
        public Input<string> PackageId { get; set; } = null!;

        /// <summary>
        /// the packageKind of the package contains this template
        /// </summary>
        [Input("packageKind")]
        public InputUnion<string, Pulumi.AzureNative.SecurityInsights.V20240401Preview.PackageKind>? PackageKind { get; set; }

        /// <summary>
        /// the name of the package contains this template
        /// </summary>
        [Input("packageName")]
        public Input<string>? PackageName { get; set; }

        /// <summary>
        /// Version of the package.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// </summary>
        [Input("packageVersion", required: true)]
        public Input<string> PackageVersion { get; set; } = null!;

        [Input("previewImages")]
        private InputList<string>? _previewImages;

        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts
        /// </summary>
        public InputList<string> PreviewImages
        {
            get => _previewImages ?? (_previewImages = new InputList<string>());
            set => _previewImages = value;
        }

        [Input("previewImagesDark")]
        private InputList<string>? _previewImagesDark;

        /// <summary>
        /// preview image file names. These will be taken from the solution artifacts. used for dark theme support
        /// </summary>
        public InputList<string> PreviewImagesDark
        {
            get => _previewImagesDark ?? (_previewImagesDark = new InputList<string>());
            set => _previewImagesDark = value;
        }

        [Input("providers")]
        private InputList<string>? _providers;

        /// <summary>
        /// Providers for the content item
        /// </summary>
        public InputList<string> Providers
        {
            get => _providers ?? (_providers = new InputList<string>());
            set => _providers = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Source of the content.  This is where/how it was created.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.MetadataSourceArgs> Source { get; set; } = null!;

        /// <summary>
        /// Support information for the template - type, name, contact information
        /// </summary>
        [Input("support")]
        public Input<Inputs.MetadataSupportArgs>? Support { get; set; }

        /// <summary>
        /// template Id
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        [Input("threatAnalysisTactics")]
        private InputList<string>? _threatAnalysisTactics;

        /// <summary>
        /// the tactics the resource covers
        /// </summary>
        public InputList<string> ThreatAnalysisTactics
        {
            get => _threatAnalysisTactics ?? (_threatAnalysisTactics = new InputList<string>());
            set => _threatAnalysisTactics = value;
        }

        [Input("threatAnalysisTechniques")]
        private InputList<string>? _threatAnalysisTechniques;

        /// <summary>
        /// the techniques the resource covers, these have to be aligned with the tactics being used
        /// </summary>
        public InputList<string> ThreatAnalysisTechniques
        {
            get => _threatAnalysisTechniques ?? (_threatAnalysisTechniques = new InputList<string>());
            set => _threatAnalysisTechniques = value;
        }

        /// <summary>
        /// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM metadata best practices.  Can also be any string, but then we cannot guarantee any version checks
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public ContentTemplateArgs()
        {
        }
        public static new ContentTemplateArgs Empty => new ContentTemplateArgs();
    }
}
