// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20240401Preview.Outputs
{

    /// <summary>
    /// Model for API authentication with OAuth2.
    /// </summary>
    [OutputType]
    public sealed class OAuthModelResponse
    {
        /// <summary>
        /// Access token prepend. Default is 'Bearer'.
        /// </summary>
        public readonly string? AccessTokenPrepend;
        /// <summary>
        /// The user's authorization code.
        /// </summary>
        public readonly string? AuthorizationCode;
        /// <summary>
        /// The authorization endpoint.
        /// </summary>
        public readonly string? AuthorizationEndpoint;
        /// <summary>
        /// The authorization endpoint headers.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AuthorizationEndpointHeaders;
        /// <summary>
        /// The authorization endpoint query parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AuthorizationEndpointQueryParameters;
        /// <summary>
        /// The Application (client) ID that the OAuth provider assigned to your app.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The Application (client) secret that the OAuth provider assigned to your app.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// The grant type, usually will be 'authorization code'.
        /// </summary>
        public readonly string GrantType;
        /// <summary>
        /// Indicating whether we want to send the clientId and clientSecret to token endpoint in the headers.
        /// </summary>
        public readonly bool? IsCredentialsInHeaders;
        /// <summary>
        /// A value indicating whether it's a JWT flow.
        /// </summary>
        public readonly bool? IsJwtBearerFlow;
        /// <summary>
        /// The Application redirect url that the user config in the OAuth provider.
        /// </summary>
        public readonly string? RedirectUri;
        /// <summary>
        /// The Application (client) Scope that the OAuth provider assigned to your app.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The token endpoint. Defines the OAuth2 refresh token.
        /// </summary>
        public readonly string TokenEndpoint;
        /// <summary>
        /// The token endpoint headers.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TokenEndpointHeaders;
        /// <summary>
        /// The token endpoint query parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TokenEndpointQueryParameters;
        /// <summary>
        /// Type of paging
        /// Expected value is 'OAuth2'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private OAuthModelResponse(
            string? accessTokenPrepend,

            string? authorizationCode,

            string? authorizationEndpoint,

            ImmutableDictionary<string, string>? authorizationEndpointHeaders,

            ImmutableDictionary<string, string>? authorizationEndpointQueryParameters,

            string clientId,

            string clientSecret,

            string grantType,

            bool? isCredentialsInHeaders,

            bool? isJwtBearerFlow,

            string? redirectUri,

            string? scope,

            string tokenEndpoint,

            ImmutableDictionary<string, string>? tokenEndpointHeaders,

            ImmutableDictionary<string, string>? tokenEndpointQueryParameters,

            string type)
        {
            AccessTokenPrepend = accessTokenPrepend;
            AuthorizationCode = authorizationCode;
            AuthorizationEndpoint = authorizationEndpoint;
            AuthorizationEndpointHeaders = authorizationEndpointHeaders;
            AuthorizationEndpointQueryParameters = authorizationEndpointQueryParameters;
            ClientId = clientId;
            ClientSecret = clientSecret;
            GrantType = grantType;
            IsCredentialsInHeaders = isCredentialsInHeaders;
            IsJwtBearerFlow = isJwtBearerFlow;
            RedirectUri = redirectUri;
            Scope = scope;
            TokenEndpoint = tokenEndpoint;
            TokenEndpointHeaders = tokenEndpointHeaders;
            TokenEndpointQueryParameters = tokenEndpointQueryParameters;
            Type = type;
        }
    }
}
