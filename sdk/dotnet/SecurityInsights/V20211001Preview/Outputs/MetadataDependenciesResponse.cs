// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20211001Preview.Outputs
{

    /// <summary>
    /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
    /// </summary>
    [OutputType]
    public sealed class MetadataDependenciesResponse
    {
        /// <summary>
        /// Id of the content item we depend on
        /// </summary>
        public readonly string? ContentId;
        /// <summary>
        /// This is the list of dependencies we must fulfill, according to the AND/OR operator
        /// </summary>
        public readonly ImmutableArray<Outputs.MetadataDependenciesResponse> Criteria;
        /// <summary>
        /// Type of the content item we depend on
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Name of the content item
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Operator used for list of dependencies in criteria array.
        /// </summary>
        public readonly string? Operator;
        /// <summary>
        /// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private MetadataDependenciesResponse(
            string? contentId,

            ImmutableArray<Outputs.MetadataDependenciesResponse> criteria,

            string? kind,

            string? name,

            string? @operator,

            string? version)
        {
            ContentId = contentId;
            Criteria = criteria;
            Kind = kind;
            Name = name;
            Operator = @operator;
            Version = version;
        }
    }
}
