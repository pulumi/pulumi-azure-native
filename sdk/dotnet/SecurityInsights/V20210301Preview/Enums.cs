// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.SecurityInsights.V20210301Preview
{
    /// <summary>
    /// type of connectivity
    /// </summary>
    [EnumType]
    public readonly struct ConnectivityType : IEquatable<ConnectivityType>
    {
        private readonly string _value;

        private ConnectivityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectivityType IsConnectedQuery { get; } = new ConnectivityType("IsConnectedQuery");

        public static bool operator ==(ConnectivityType left, ConnectivityType right) => left.Equals(right);
        public static bool operator !=(ConnectivityType left, ConnectivityType right) => !left.Equals(right);

        public static explicit operator string(ConnectivityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectivityType other && Equals(other);
        public bool Equals(ConnectivityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data connector kind
    /// </summary>
    [EnumType]
    public readonly struct DataConnectorKind : IEquatable<DataConnectorKind>
    {
        private readonly string _value;

        private DataConnectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataConnectorKind AzureActiveDirectory { get; } = new DataConnectorKind("AzureActiveDirectory");
        public static DataConnectorKind AzureSecurityCenter { get; } = new DataConnectorKind("AzureSecurityCenter");
        public static DataConnectorKind MicrosoftCloudAppSecurity { get; } = new DataConnectorKind("MicrosoftCloudAppSecurity");
        public static DataConnectorKind ThreatIntelligence { get; } = new DataConnectorKind("ThreatIntelligence");
        public static DataConnectorKind ThreatIntelligenceTaxii { get; } = new DataConnectorKind("ThreatIntelligenceTaxii");
        public static DataConnectorKind Office365 { get; } = new DataConnectorKind("Office365");
        public static DataConnectorKind OfficeATP { get; } = new DataConnectorKind("OfficeATP");
        public static DataConnectorKind AmazonWebServicesCloudTrail { get; } = new DataConnectorKind("AmazonWebServicesCloudTrail");
        public static DataConnectorKind AzureAdvancedThreatProtection { get; } = new DataConnectorKind("AzureAdvancedThreatProtection");
        public static DataConnectorKind MicrosoftDefenderAdvancedThreatProtection { get; } = new DataConnectorKind("MicrosoftDefenderAdvancedThreatProtection");
        public static DataConnectorKind Dynamics365 { get; } = new DataConnectorKind("Dynamics365");
        public static DataConnectorKind MicrosoftThreatProtection { get; } = new DataConnectorKind("MicrosoftThreatProtection");
        public static DataConnectorKind MicrosoftThreatIntelligence { get; } = new DataConnectorKind("MicrosoftThreatIntelligence");
        public static DataConnectorKind GenericUI { get; } = new DataConnectorKind("GenericUI");

        public static bool operator ==(DataConnectorKind left, DataConnectorKind right) => left.Equals(right);
        public static bool operator !=(DataConnectorKind left, DataConnectorKind right) => !left.Equals(right);

        public static explicit operator string(DataConnectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataConnectorKind other && Equals(other);
        public bool Equals(DataConnectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describe whether this data type connection is enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct DataTypeState : IEquatable<DataTypeState>
    {
        private readonly string _value;

        private DataTypeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataTypeState Enabled { get; } = new DataTypeState("Enabled");
        public static DataTypeState Disabled { get; } = new DataTypeState("Disabled");

        public static bool operator ==(DataTypeState left, DataTypeState right) => left.Equals(right);
        public static bool operator !=(DataTypeState left, DataTypeState right) => !left.Equals(right);

        public static explicit operator string(DataTypeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataTypeState other && Equals(other);
        public bool Equals(DataTypeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of content the metadata is for.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind DataConnector { get; } = new Kind("dataConnector");
        public static Kind DataType { get; } = new Kind("dataType");
        public static Kind Workbook { get; } = new Kind("workbook");
        public static Kind WorkbookTemplate { get; } = new Kind("workbookTemplate");
        public static Kind Playbook { get; } = new Kind("playbook");
        public static Kind PlaybookTemplate { get; } = new Kind("playbookTemplate");
        public static Kind AnalyticRuleTemplate { get; } = new Kind("analyticRuleTemplate");
        public static Kind AnalyticRule { get; } = new Kind("analyticRule");
        public static Kind HuntingQuery { get; } = new Kind("huntingQuery");
        public static Kind InvestigationQuery { get; } = new Kind("investigationQuery");
        public static Kind Parser { get; } = new Kind("parser");
        public static Kind Watchlist { get; } = new Kind("watchlist");
        public static Kind WatchlistTemplate { get; } = new Kind("watchlistTemplate");
        public static Kind Solution { get; } = new Kind("solution");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator used for list of dependencies in criteria array.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator AND { get; } = new Operator("AND");
        public static Operator OR { get; } = new Operator("OR");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Permission provider scope
    /// </summary>
    [EnumType]
    public readonly struct PermissionProviderScope : IEquatable<PermissionProviderScope>
    {
        private readonly string _value;

        private PermissionProviderScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PermissionProviderScope ResourceGroup { get; } = new PermissionProviderScope("ResourceGroup");
        public static PermissionProviderScope Subscription { get; } = new PermissionProviderScope("Subscription");
        public static PermissionProviderScope Workspace { get; } = new PermissionProviderScope("Workspace");

        public static bool operator ==(PermissionProviderScope left, PermissionProviderScope right) => left.Equals(right);
        public static bool operator !=(PermissionProviderScope left, PermissionProviderScope right) => !left.Equals(right);

        public static explicit operator string(PermissionProviderScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PermissionProviderScope other && Equals(other);
        public bool Equals(PermissionProviderScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The polling frequency for the TAXII server.
    /// </summary>
    [EnumType]
    public readonly struct PollingFrequency : IEquatable<PollingFrequency>
    {
        private readonly string _value;

        private PollingFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Once a minute
        /// </summary>
        public static PollingFrequency OnceAMinute { get; } = new PollingFrequency("OnceAMinute");
        /// <summary>
        /// Once an hour
        /// </summary>
        public static PollingFrequency OnceAnHour { get; } = new PollingFrequency("OnceAnHour");
        /// <summary>
        /// Once a day
        /// </summary>
        public static PollingFrequency OnceADay { get; } = new PollingFrequency("OnceADay");

        public static bool operator ==(PollingFrequency left, PollingFrequency right) => left.Equals(right);
        public static bool operator !=(PollingFrequency left, PollingFrequency right) => !left.Equals(right);

        public static explicit operator string(PollingFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PollingFrequency other && Equals(other);
        public bool Equals(PollingFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provider name
    /// </summary>
    [EnumType]
    public readonly struct ProviderName : IEquatable<ProviderName>
    {
        private readonly string _value;

        private ProviderName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderName Microsoft_OperationalInsights_solutions { get; } = new ProviderName("Microsoft.OperationalInsights/solutions");
        public static ProviderName Microsoft_OperationalInsights_workspaces { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces");
        public static ProviderName Microsoft_OperationalInsights_workspaces_datasources { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/datasources");
        public static ProviderName Microsoft_aadiam_diagnosticSettings { get; } = new ProviderName("microsoft.aadiam/diagnosticSettings");
        public static ProviderName Microsoft_OperationalInsights_workspaces_sharedKeys { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/sharedKeys");
        public static ProviderName Microsoft_Authorization_policyAssignments { get; } = new ProviderName("Microsoft.Authorization/policyAssignments");

        public static bool operator ==(ProviderName left, ProviderName right) => left.Equals(right);
        public static bool operator !=(ProviderName left, ProviderName right) => !left.Equals(right);

        public static explicit operator string(ProviderName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderName other && Equals(other);
        public bool Equals(ProviderName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingKind : IEquatable<SettingKind>
    {
        private readonly string _value;

        private SettingKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingKind EyesOn { get; } = new SettingKind("EyesOn");
        public static SettingKind EntityAnalytics { get; } = new SettingKind("EntityAnalytics");
        public static SettingKind Ueba { get; } = new SettingKind("Ueba");

        public static bool operator ==(SettingKind left, SettingKind right) => left.Equals(right);
        public static bool operator !=(SettingKind left, SettingKind right) => !left.Equals(right);

        public static explicit operator string(SettingKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingKind other && Equals(other);
        public bool Equals(SettingKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingType : IEquatable<SettingType>
    {
        private readonly string _value;

        private SettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingType CopyableLabel { get; } = new SettingType("CopyableLabel");
        public static SettingType InstructionStepsGroup { get; } = new SettingType("InstructionStepsGroup");
        public static SettingType InfoMessage { get; } = new SettingType("InfoMessage");

        public static bool operator ==(SettingType left, SettingType right) => left.Equals(right);
        public static bool operator !=(SettingType left, SettingType right) => !left.Equals(right);

        public static explicit operator string(SettingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingType other && Equals(other);
        public bool Equals(SettingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source of the watchlist
    /// </summary>
    [EnumType]
    public readonly struct Source : IEquatable<Source>
    {
        private readonly string _value;

        private Source(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Source Local_file { get; } = new Source("Local file");
        public static Source Remote_storage { get; } = new Source("Remote storage");

        public static bool operator ==(Source left, Source right) => left.Equals(right);
        public static bool operator !=(Source left, Source right) => !left.Equals(right);

        public static explicit operator string(Source value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Source other && Equals(other);
        public bool Equals(Source other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source type of the content
    /// </summary>
    [EnumType]
    public readonly struct SourceKind : IEquatable<SourceKind>
    {
        private readonly string _value;

        private SourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceKind LocalWorkspace { get; } = new SourceKind("localWorkspace");
        public static SourceKind Community { get; } = new SourceKind("community");
        public static SourceKind Solution { get; } = new SourceKind("solution");
        public static SourceKind SourceRepository { get; } = new SourceKind("sourceRepository");

        public static bool operator ==(SourceKind left, SourceKind right) => left.Equals(right);
        public static bool operator !=(SourceKind left, SourceKind right) => !left.Equals(right);

        public static explicit operator string(SourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceKind other && Equals(other);
        public bool Equals(SourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of support for content item
    /// </summary>
    [EnumType]
    public readonly struct SupportTier : IEquatable<SupportTier>
    {
        private readonly string _value;

        private SupportTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportTier Microsoft { get; } = new SupportTier("microsoft");
        public static SupportTier Developer { get; } = new SupportTier("developer");
        public static SupportTier Community { get; } = new SupportTier("community");

        public static bool operator ==(SupportTier left, SupportTier right) => left.Equals(right);
        public static bool operator !=(SupportTier left, SupportTier right) => !left.Equals(right);

        public static explicit operator string(SupportTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportTier other && Equals(other);
        public bool Equals(SupportTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data source that enriched by ueba.
    /// </summary>
    [EnumType]
    public readonly struct UebaDataSources : IEquatable<UebaDataSources>
    {
        private readonly string _value;

        private UebaDataSources(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UebaDataSources AuditLogs { get; } = new UebaDataSources("AuditLogs");
        public static UebaDataSources AzureActivity { get; } = new UebaDataSources("AzureActivity");
        public static UebaDataSources SecurityEvent { get; } = new UebaDataSources("SecurityEvent");
        public static UebaDataSources SigninLogs { get; } = new UebaDataSources("SigninLogs");

        public static bool operator ==(UebaDataSources left, UebaDataSources right) => left.Equals(right);
        public static bool operator !=(UebaDataSources left, UebaDataSources right) => !left.Equals(right);

        public static explicit operator string(UebaDataSources value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UebaDataSources other && Equals(other);
        public bool Equals(UebaDataSources other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
