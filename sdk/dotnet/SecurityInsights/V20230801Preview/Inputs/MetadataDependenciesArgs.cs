// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SecurityInsights.V20230801Preview.Inputs
{

    /// <summary>
    /// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
    /// </summary>
    public sealed class MetadataDependenciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the content item we depend on
        /// </summary>
        [Input("contentId")]
        public Input<string>? ContentId { get; set; }

        [Input("criteria")]
        private InputList<Inputs.MetadataDependenciesArgs>? _criteria;

        /// <summary>
        /// This is the list of dependencies we must fulfill, according to the AND/OR operator
        /// </summary>
        public InputList<Inputs.MetadataDependenciesArgs> Criteria
        {
            get => _criteria ?? (_criteria = new InputList<Inputs.MetadataDependenciesArgs>());
            set => _criteria = value;
        }

        /// <summary>
        /// Type of the content item we depend on
        /// </summary>
        [Input("kind")]
        public InputUnion<string, Pulumi.AzureNative.SecurityInsights.V20230801Preview.Kind>? Kind { get; set; }

        /// <summary>
        /// Name of the content item
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Operator used for list of dependencies in criteria array.
        /// </summary>
        [Input("operator")]
        public InputUnion<string, Pulumi.AzureNative.SecurityInsights.V20230801Preview.Operator>? Operator { get; set; }

        /// <summary>
        /// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public MetadataDependenciesArgs()
        {
        }
        public static new MetadataDependenciesArgs Empty => new MetadataDependenciesArgs();
    }
}
