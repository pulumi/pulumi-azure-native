// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.SecurityInsights.V20230201Preview
{
    /// <summary>
    /// The type of the automation rule action.
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Modify an object's properties
        /// </summary>
        public static ActionType ModifyProperties { get; } = new ActionType("ModifyProperties");
        /// <summary>
        /// Run a playbook on an object
        /// </summary>
        public static ActionType RunPlaybook { get; } = new ActionType("RunPlaybook");
        /// <summary>
        /// Add a task to an incident object
        /// </summary>
        public static ActionType AddIncidentTask { get; } = new ActionType("AddIncidentTask");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Alert detail
    /// </summary>
    [EnumType]
    public readonly struct AlertDetail : IEquatable<AlertDetail>
    {
        private readonly string _value;

        private AlertDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Alert display name
        /// </summary>
        public static AlertDetail DisplayName { get; } = new AlertDetail("DisplayName");
        /// <summary>
        /// Alert severity
        /// </summary>
        public static AlertDetail Severity { get; } = new AlertDetail("Severity");

        public static bool operator ==(AlertDetail left, AlertDetail right) => left.Equals(right);
        public static bool operator !=(AlertDetail left, AlertDetail right) => !left.Equals(right);

        public static explicit operator string(AlertDetail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertDetail other && Equals(other);
        public bool Equals(AlertDetail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The V3 alert property
    /// </summary>
    [EnumType]
    public readonly struct AlertProperty : IEquatable<AlertProperty>
    {
        private readonly string _value;

        private AlertProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Alert's link
        /// </summary>
        public static AlertProperty AlertLink { get; } = new AlertProperty("AlertLink");
        /// <summary>
        /// Confidence level property
        /// </summary>
        public static AlertProperty ConfidenceLevel { get; } = new AlertProperty("ConfidenceLevel");
        /// <summary>
        /// Confidence score
        /// </summary>
        public static AlertProperty ConfidenceScore { get; } = new AlertProperty("ConfidenceScore");
        /// <summary>
        /// Extended links to the alert
        /// </summary>
        public static AlertProperty ExtendedLinks { get; } = new AlertProperty("ExtendedLinks");
        /// <summary>
        /// Product name alert property
        /// </summary>
        public static AlertProperty ProductName { get; } = new AlertProperty("ProductName");
        /// <summary>
        /// Provider name alert property
        /// </summary>
        public static AlertProperty ProviderName { get; } = new AlertProperty("ProviderName");
        /// <summary>
        /// Product component name alert property
        /// </summary>
        public static AlertProperty ProductComponentName { get; } = new AlertProperty("ProductComponentName");
        /// <summary>
        /// Remediation steps alert property
        /// </summary>
        public static AlertProperty RemediationSteps { get; } = new AlertProperty("RemediationSteps");
        /// <summary>
        /// Techniques alert property
        /// </summary>
        public static AlertProperty Techniques { get; } = new AlertProperty("Techniques");

        public static bool operator ==(AlertProperty left, AlertProperty right) => left.Equals(right);
        public static bool operator !=(AlertProperty left, AlertProperty right) => !left.Equals(right);

        public static explicit operator string(AlertProperty value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertProperty other && Equals(other);
        public bool Equals(AlertProperty other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the alert rule
    /// </summary>
    [EnumType]
    public readonly struct AlertRuleKind : IEquatable<AlertRuleKind>
    {
        private readonly string _value;

        private AlertRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertRuleKind Scheduled { get; } = new AlertRuleKind("Scheduled");
        public static AlertRuleKind MicrosoftSecurityIncidentCreation { get; } = new AlertRuleKind("MicrosoftSecurityIncidentCreation");
        public static AlertRuleKind Fusion { get; } = new AlertRuleKind("Fusion");
        public static AlertRuleKind MLBehaviorAnalytics { get; } = new AlertRuleKind("MLBehaviorAnalytics");
        public static AlertRuleKind ThreatIntelligence { get; } = new AlertRuleKind("ThreatIntelligence");
        public static AlertRuleKind NRT { get; } = new AlertRuleKind("NRT");

        public static bool operator ==(AlertRuleKind left, AlertRuleKind right) => left.Equals(right);
        public static bool operator !=(AlertRuleKind left, AlertRuleKind right) => !left.Equals(right);

        public static explicit operator string(AlertRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertRuleKind other && Equals(other);
        public bool Equals(AlertRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity for alerts created by this alert rule.
    /// </summary>
    [EnumType]
    public readonly struct AlertSeverity : IEquatable<AlertSeverity>
    {
        private readonly string _value;

        private AlertSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// High severity
        /// </summary>
        public static AlertSeverity High { get; } = new AlertSeverity("High");
        /// <summary>
        /// Medium severity
        /// </summary>
        public static AlertSeverity Medium { get; } = new AlertSeverity("Medium");
        /// <summary>
        /// Low severity
        /// </summary>
        public static AlertSeverity Low { get; } = new AlertSeverity("Low");
        /// <summary>
        /// Informational severity
        /// </summary>
        public static AlertSeverity Informational { get; } = new AlertSeverity("Informational");

        public static bool operator ==(AlertSeverity left, AlertSeverity right) => left.Equals(right);
        public static bool operator !=(AlertSeverity left, AlertSeverity right) => !left.Equals(right);

        public static explicit operator string(AlertSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertSeverity other && Equals(other);
        public bool Equals(AlertSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity for alerts created by this alert rule.
    /// </summary>
    [EnumType]
    public readonly struct AttackTactic : IEquatable<AttackTactic>
    {
        private readonly string _value;

        private AttackTactic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AttackTactic Reconnaissance { get; } = new AttackTactic("Reconnaissance");
        public static AttackTactic ResourceDevelopment { get; } = new AttackTactic("ResourceDevelopment");
        public static AttackTactic InitialAccess { get; } = new AttackTactic("InitialAccess");
        public static AttackTactic Execution { get; } = new AttackTactic("Execution");
        public static AttackTactic Persistence { get; } = new AttackTactic("Persistence");
        public static AttackTactic PrivilegeEscalation { get; } = new AttackTactic("PrivilegeEscalation");
        public static AttackTactic DefenseEvasion { get; } = new AttackTactic("DefenseEvasion");
        public static AttackTactic CredentialAccess { get; } = new AttackTactic("CredentialAccess");
        public static AttackTactic Discovery { get; } = new AttackTactic("Discovery");
        public static AttackTactic LateralMovement { get; } = new AttackTactic("LateralMovement");
        public static AttackTactic Collection { get; } = new AttackTactic("Collection");
        public static AttackTactic Exfiltration { get; } = new AttackTactic("Exfiltration");
        public static AttackTactic CommandAndControl { get; } = new AttackTactic("CommandAndControl");
        public static AttackTactic Impact { get; } = new AttackTactic("Impact");
        public static AttackTactic PreAttack { get; } = new AttackTactic("PreAttack");
        public static AttackTactic ImpairProcessControl { get; } = new AttackTactic("ImpairProcessControl");
        public static AttackTactic InhibitResponseFunction { get; } = new AttackTactic("InhibitResponseFunction");

        public static bool operator ==(AttackTactic left, AttackTactic right) => left.Equals(right);
        public static bool operator !=(AttackTactic left, AttackTactic right) => !left.Equals(right);

        public static explicit operator string(AttackTactic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AttackTactic other && Equals(other);
        public bool Equals(AttackTactic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRuleBooleanConditionSupportedOperator : IEquatable<AutomationRuleBooleanConditionSupportedOperator>
    {
        private readonly string _value;

        private AutomationRuleBooleanConditionSupportedOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluates as true if all the item conditions are evaluated as true
        /// </summary>
        public static AutomationRuleBooleanConditionSupportedOperator And { get; } = new AutomationRuleBooleanConditionSupportedOperator("And");
        /// <summary>
        /// Evaluates as true if at least one of the item conditions are evaluated as true
        /// </summary>
        public static AutomationRuleBooleanConditionSupportedOperator Or { get; } = new AutomationRuleBooleanConditionSupportedOperator("Or");

        public static bool operator ==(AutomationRuleBooleanConditionSupportedOperator left, AutomationRuleBooleanConditionSupportedOperator right) => left.Equals(right);
        public static bool operator !=(AutomationRuleBooleanConditionSupportedOperator left, AutomationRuleBooleanConditionSupportedOperator right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleBooleanConditionSupportedOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleBooleanConditionSupportedOperator other && Equals(other);
        public bool Equals(AutomationRuleBooleanConditionSupportedOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyArrayChangedConditionSupportedArrayType : IEquatable<AutomationRulePropertyArrayChangedConditionSupportedArrayType>
    {
        private readonly string _value;

        private AutomationRulePropertyArrayChangedConditionSupportedArrayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition on the alerts
        /// </summary>
        public static AutomationRulePropertyArrayChangedConditionSupportedArrayType Alerts { get; } = new AutomationRulePropertyArrayChangedConditionSupportedArrayType("Alerts");
        /// <summary>
        /// Evaluate the condition on the labels
        /// </summary>
        public static AutomationRulePropertyArrayChangedConditionSupportedArrayType Labels { get; } = new AutomationRulePropertyArrayChangedConditionSupportedArrayType("Labels");
        /// <summary>
        /// Evaluate the condition on the tactics
        /// </summary>
        public static AutomationRulePropertyArrayChangedConditionSupportedArrayType Tactics { get; } = new AutomationRulePropertyArrayChangedConditionSupportedArrayType("Tactics");
        /// <summary>
        /// Evaluate the condition on the comments
        /// </summary>
        public static AutomationRulePropertyArrayChangedConditionSupportedArrayType Comments { get; } = new AutomationRulePropertyArrayChangedConditionSupportedArrayType("Comments");

        public static bool operator ==(AutomationRulePropertyArrayChangedConditionSupportedArrayType left, AutomationRulePropertyArrayChangedConditionSupportedArrayType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyArrayChangedConditionSupportedArrayType left, AutomationRulePropertyArrayChangedConditionSupportedArrayType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyArrayChangedConditionSupportedArrayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyArrayChangedConditionSupportedArrayType other && Equals(other);
        public bool Equals(AutomationRulePropertyArrayChangedConditionSupportedArrayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyArrayChangedConditionSupportedChangeType : IEquatable<AutomationRulePropertyArrayChangedConditionSupportedChangeType>
    {
        private readonly string _value;

        private AutomationRulePropertyArrayChangedConditionSupportedChangeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition on items added to the array
        /// </summary>
        public static AutomationRulePropertyArrayChangedConditionSupportedChangeType Added { get; } = new AutomationRulePropertyArrayChangedConditionSupportedChangeType("Added");

        public static bool operator ==(AutomationRulePropertyArrayChangedConditionSupportedChangeType left, AutomationRulePropertyArrayChangedConditionSupportedChangeType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyArrayChangedConditionSupportedChangeType left, AutomationRulePropertyArrayChangedConditionSupportedChangeType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyArrayChangedConditionSupportedChangeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyArrayChangedConditionSupportedChangeType other && Equals(other);
        public bool Equals(AutomationRulePropertyArrayChangedConditionSupportedChangeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyArrayConditionSupportedArrayConditionType : IEquatable<AutomationRulePropertyArrayConditionSupportedArrayConditionType>
    {
        private readonly string _value;

        private AutomationRulePropertyArrayConditionSupportedArrayConditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition as true if any item fulfills it
        /// </summary>
        public static AutomationRulePropertyArrayConditionSupportedArrayConditionType AnyItem { get; } = new AutomationRulePropertyArrayConditionSupportedArrayConditionType("AnyItem");

        public static bool operator ==(AutomationRulePropertyArrayConditionSupportedArrayConditionType left, AutomationRulePropertyArrayConditionSupportedArrayConditionType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyArrayConditionSupportedArrayConditionType left, AutomationRulePropertyArrayConditionSupportedArrayConditionType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyArrayConditionSupportedArrayConditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyArrayConditionSupportedArrayConditionType other && Equals(other);
        public bool Equals(AutomationRulePropertyArrayConditionSupportedArrayConditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyArrayConditionSupportedArrayType : IEquatable<AutomationRulePropertyArrayConditionSupportedArrayType>
    {
        private readonly string _value;

        private AutomationRulePropertyArrayConditionSupportedArrayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition on the custom detail keys
        /// </summary>
        public static AutomationRulePropertyArrayConditionSupportedArrayType CustomDetails { get; } = new AutomationRulePropertyArrayConditionSupportedArrayType("CustomDetails");
        /// <summary>
        /// Evaluate the condition on a custom detail's values
        /// </summary>
        public static AutomationRulePropertyArrayConditionSupportedArrayType CustomDetailValues { get; } = new AutomationRulePropertyArrayConditionSupportedArrayType("CustomDetailValues");

        public static bool operator ==(AutomationRulePropertyArrayConditionSupportedArrayType left, AutomationRulePropertyArrayConditionSupportedArrayType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyArrayConditionSupportedArrayType left, AutomationRulePropertyArrayConditionSupportedArrayType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyArrayConditionSupportedArrayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyArrayConditionSupportedArrayType other && Equals(other);
        public bool Equals(AutomationRulePropertyArrayConditionSupportedArrayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyChangedConditionSupportedChangedType : IEquatable<AutomationRulePropertyChangedConditionSupportedChangedType>
    {
        private readonly string _value;

        private AutomationRulePropertyChangedConditionSupportedChangedType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition on the previous value of the property
        /// </summary>
        public static AutomationRulePropertyChangedConditionSupportedChangedType ChangedFrom { get; } = new AutomationRulePropertyChangedConditionSupportedChangedType("ChangedFrom");
        /// <summary>
        /// Evaluate the condition on the updated value of the property
        /// </summary>
        public static AutomationRulePropertyChangedConditionSupportedChangedType ChangedTo { get; } = new AutomationRulePropertyChangedConditionSupportedChangedType("ChangedTo");

        public static bool operator ==(AutomationRulePropertyChangedConditionSupportedChangedType left, AutomationRulePropertyChangedConditionSupportedChangedType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyChangedConditionSupportedChangedType left, AutomationRulePropertyChangedConditionSupportedChangedType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyChangedConditionSupportedChangedType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyChangedConditionSupportedChangedType other && Equals(other);
        public bool Equals(AutomationRulePropertyChangedConditionSupportedChangedType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyChangedConditionSupportedPropertyType : IEquatable<AutomationRulePropertyChangedConditionSupportedPropertyType>
    {
        private readonly string _value;

        private AutomationRulePropertyChangedConditionSupportedPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate the condition on the incident severity
        /// </summary>
        public static AutomationRulePropertyChangedConditionSupportedPropertyType IncidentSeverity { get; } = new AutomationRulePropertyChangedConditionSupportedPropertyType("IncidentSeverity");
        /// <summary>
        /// Evaluate the condition on the incident status
        /// </summary>
        public static AutomationRulePropertyChangedConditionSupportedPropertyType IncidentStatus { get; } = new AutomationRulePropertyChangedConditionSupportedPropertyType("IncidentStatus");
        /// <summary>
        /// Evaluate the condition on the incident owner
        /// </summary>
        public static AutomationRulePropertyChangedConditionSupportedPropertyType IncidentOwner { get; } = new AutomationRulePropertyChangedConditionSupportedPropertyType("IncidentOwner");

        public static bool operator ==(AutomationRulePropertyChangedConditionSupportedPropertyType left, AutomationRulePropertyChangedConditionSupportedPropertyType right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyChangedConditionSupportedPropertyType left, AutomationRulePropertyChangedConditionSupportedPropertyType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyChangedConditionSupportedPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyChangedConditionSupportedPropertyType other && Equals(other);
        public bool Equals(AutomationRulePropertyChangedConditionSupportedPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulePropertyConditionSupportedOperator : IEquatable<AutomationRulePropertyConditionSupportedOperator>
    {
        private readonly string _value;

        private AutomationRulePropertyConditionSupportedOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluates if the property equals at least one of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator EqualsValue { get; } = new AutomationRulePropertyConditionSupportedOperator("Equals");
        /// <summary>
        /// Evaluates if the property does not equal any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator NotEquals { get; } = new AutomationRulePropertyConditionSupportedOperator("NotEquals");
        /// <summary>
        /// Evaluates if the property contains at least one of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator Contains { get; } = new AutomationRulePropertyConditionSupportedOperator("Contains");
        /// <summary>
        /// Evaluates if the property does not contain any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator NotContains { get; } = new AutomationRulePropertyConditionSupportedOperator("NotContains");
        /// <summary>
        /// Evaluates if the property starts with any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator StartsWith { get; } = new AutomationRulePropertyConditionSupportedOperator("StartsWith");
        /// <summary>
        /// Evaluates if the property does not start with any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator NotStartsWith { get; } = new AutomationRulePropertyConditionSupportedOperator("NotStartsWith");
        /// <summary>
        /// Evaluates if the property ends with any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator EndsWith { get; } = new AutomationRulePropertyConditionSupportedOperator("EndsWith");
        /// <summary>
        /// Evaluates if the property does not end with any of the condition values
        /// </summary>
        public static AutomationRulePropertyConditionSupportedOperator NotEndsWith { get; } = new AutomationRulePropertyConditionSupportedOperator("NotEndsWith");

        public static bool operator ==(AutomationRulePropertyConditionSupportedOperator left, AutomationRulePropertyConditionSupportedOperator right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyConditionSupportedOperator left, AutomationRulePropertyConditionSupportedOperator right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyConditionSupportedOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyConditionSupportedOperator other && Equals(other);
        public bool Equals(AutomationRulePropertyConditionSupportedOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The property to evaluate in an automation rule property condition.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRulePropertyConditionSupportedProperty : IEquatable<AutomationRulePropertyConditionSupportedProperty>
    {
        private readonly string _value;

        private AutomationRulePropertyConditionSupportedProperty(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The title of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentTitle { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentTitle");
        /// <summary>
        /// The description of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentDescription { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentDescription");
        /// <summary>
        /// The severity of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentSeverity { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentSeverity");
        /// <summary>
        /// The status of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentStatus { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentStatus");
        /// <summary>
        /// The related Analytic rule ids of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentRelatedAnalyticRuleIds { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentRelatedAnalyticRuleIds");
        /// <summary>
        /// The tactics of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentTactics { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentTactics");
        /// <summary>
        /// The labels of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentLabel { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentLabel");
        /// <summary>
        /// The provider name of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentProviderName { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentProviderName");
        /// <summary>
        /// The update source of the incident
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentUpdatedBySource { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentUpdatedBySource");
        /// <summary>
        /// The incident custom detail key
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentCustomDetailsKey { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentCustomDetailsKey");
        /// <summary>
        /// The incident custom detail value
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IncidentCustomDetailsValue { get; } = new AutomationRulePropertyConditionSupportedProperty("IncidentCustomDetailsValue");
        /// <summary>
        /// The account Azure Active Directory tenant id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountAadTenantId { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountAadTenantId");
        /// <summary>
        /// The account Azure Active Directory user id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountAadUserId { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountAadUserId");
        /// <summary>
        /// The account name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountName { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountName");
        /// <summary>
        /// The account NetBIOS domain name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountNTDomain { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountNTDomain");
        /// <summary>
        /// The account Azure Active Directory Passport User ID
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountPUID { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountPUID");
        /// <summary>
        /// The account security identifier
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountSid { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountSid");
        /// <summary>
        /// The account unique identifier
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountObjectGuid { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountObjectGuid");
        /// <summary>
        /// The account user principal name suffix
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AccountUPNSuffix { get; } = new AutomationRulePropertyConditionSupportedProperty("AccountUPNSuffix");
        /// <summary>
        /// The name of the product of the alert
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AlertProductNames { get; } = new AutomationRulePropertyConditionSupportedProperty("AlertProductNames");
        /// <summary>
        /// The analytic rule ids of the alert
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AlertAnalyticRuleIds { get; } = new AutomationRulePropertyConditionSupportedProperty("AlertAnalyticRuleIds");
        /// <summary>
        /// The Azure resource id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AzureResourceResourceId { get; } = new AutomationRulePropertyConditionSupportedProperty("AzureResourceResourceId");
        /// <summary>
        /// The Azure resource subscription id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty AzureResourceSubscriptionId { get; } = new AutomationRulePropertyConditionSupportedProperty("AzureResourceSubscriptionId");
        /// <summary>
        /// The cloud application identifier
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty CloudApplicationAppId { get; } = new AutomationRulePropertyConditionSupportedProperty("CloudApplicationAppId");
        /// <summary>
        /// The cloud application name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty CloudApplicationAppName { get; } = new AutomationRulePropertyConditionSupportedProperty("CloudApplicationAppName");
        /// <summary>
        /// The dns record domain name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty DNSDomainName { get; } = new AutomationRulePropertyConditionSupportedProperty("DNSDomainName");
        /// <summary>
        /// The file directory full path
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty FileDirectory { get; } = new AutomationRulePropertyConditionSupportedProperty("FileDirectory");
        /// <summary>
        /// The file name without path
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty FileName { get; } = new AutomationRulePropertyConditionSupportedProperty("FileName");
        /// <summary>
        /// The file hash value
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty FileHashValue { get; } = new AutomationRulePropertyConditionSupportedProperty("FileHashValue");
        /// <summary>
        /// The host Azure resource id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty HostAzureID { get; } = new AutomationRulePropertyConditionSupportedProperty("HostAzureID");
        /// <summary>
        /// The host name without domain
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty HostName { get; } = new AutomationRulePropertyConditionSupportedProperty("HostName");
        /// <summary>
        /// The host NetBIOS name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty HostNetBiosName { get; } = new AutomationRulePropertyConditionSupportedProperty("HostNetBiosName");
        /// <summary>
        /// The host NT domain
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty HostNTDomain { get; } = new AutomationRulePropertyConditionSupportedProperty("HostNTDomain");
        /// <summary>
        /// The host operating system
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty HostOSVersion { get; } = new AutomationRulePropertyConditionSupportedProperty("HostOSVersion");
        /// <summary>
        /// "The IoT device id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceId { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceId");
        /// <summary>
        /// The IoT device name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceName { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceName");
        /// <summary>
        /// The IoT device type
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceType { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceType");
        /// <summary>
        /// The IoT device vendor
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceVendor { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceVendor");
        /// <summary>
        /// The IoT device model
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceModel { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceModel");
        /// <summary>
        /// The IoT device operating system
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IoTDeviceOperatingSystem { get; } = new AutomationRulePropertyConditionSupportedProperty("IoTDeviceOperatingSystem");
        /// <summary>
        /// The IP address
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty IPAddress { get; } = new AutomationRulePropertyConditionSupportedProperty("IPAddress");
        /// <summary>
        /// The mailbox display name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailboxDisplayName { get; } = new AutomationRulePropertyConditionSupportedProperty("MailboxDisplayName");
        /// <summary>
        /// The mailbox primary address
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailboxPrimaryAddress { get; } = new AutomationRulePropertyConditionSupportedProperty("MailboxPrimaryAddress");
        /// <summary>
        /// The mailbox user principal name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailboxUPN { get; } = new AutomationRulePropertyConditionSupportedProperty("MailboxUPN");
        /// <summary>
        /// The mail message delivery action
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageDeliveryAction { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageDeliveryAction");
        /// <summary>
        /// The mail message delivery location
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageDeliveryLocation { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageDeliveryLocation");
        /// <summary>
        /// The mail message recipient
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageRecipient { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageRecipient");
        /// <summary>
        /// The mail message sender IP address
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageSenderIP { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageSenderIP");
        /// <summary>
        /// The mail message subject
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageSubject { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageSubject");
        /// <summary>
        /// The mail message P1 sender
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageP1Sender { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageP1Sender");
        /// <summary>
        /// The mail message P2 sender
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MailMessageP2Sender { get; } = new AutomationRulePropertyConditionSupportedProperty("MailMessageP2Sender");
        /// <summary>
        /// The malware category
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MalwareCategory { get; } = new AutomationRulePropertyConditionSupportedProperty("MalwareCategory");
        /// <summary>
        /// The malware name
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty MalwareName { get; } = new AutomationRulePropertyConditionSupportedProperty("MalwareName");
        /// <summary>
        /// The process execution command line
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty ProcessCommandLine { get; } = new AutomationRulePropertyConditionSupportedProperty("ProcessCommandLine");
        /// <summary>
        /// The process id
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty ProcessId { get; } = new AutomationRulePropertyConditionSupportedProperty("ProcessId");
        /// <summary>
        /// The registry key path
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty RegistryKey { get; } = new AutomationRulePropertyConditionSupportedProperty("RegistryKey");
        /// <summary>
        /// The registry key value in string formatted representation
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty RegistryValueData { get; } = new AutomationRulePropertyConditionSupportedProperty("RegistryValueData");
        /// <summary>
        /// The url
        /// </summary>
        public static AutomationRulePropertyConditionSupportedProperty Url { get; } = new AutomationRulePropertyConditionSupportedProperty("Url");

        public static bool operator ==(AutomationRulePropertyConditionSupportedProperty left, AutomationRulePropertyConditionSupportedProperty right) => left.Equals(right);
        public static bool operator !=(AutomationRulePropertyConditionSupportedProperty left, AutomationRulePropertyConditionSupportedProperty right) => !left.Equals(right);

        public static explicit operator string(AutomationRulePropertyConditionSupportedProperty value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulePropertyConditionSupportedProperty other && Equals(other);
        public bool Equals(AutomationRulePropertyConditionSupportedProperty other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConditionType : IEquatable<ConditionType>
    {
        private readonly string _value;

        private ConditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Evaluate an object property value
        /// </summary>
        public static ConditionType Property { get; } = new ConditionType("Property");
        /// <summary>
        /// Evaluate an object array property value
        /// </summary>
        public static ConditionType PropertyArray { get; } = new ConditionType("PropertyArray");
        /// <summary>
        /// Evaluate an object property changed value
        /// </summary>
        public static ConditionType PropertyChanged { get; } = new ConditionType("PropertyChanged");
        /// <summary>
        /// Evaluate an object array property changed value
        /// </summary>
        public static ConditionType PropertyArrayChanged { get; } = new ConditionType("PropertyArrayChanged");
        /// <summary>
        /// Apply a boolean operator (e.g AND, OR) to conditions
        /// </summary>
        public static ConditionType Boolean { get; } = new ConditionType("Boolean");

        public static bool operator ==(ConditionType left, ConditionType right) => left.Equals(right);
        public static bool operator !=(ConditionType left, ConditionType right) => !left.Equals(right);

        public static explicit operator string(ConditionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConditionType other && Equals(other);
        public bool Equals(ConditionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// type of connectivity
    /// </summary>
    [EnumType]
    public readonly struct ConnectivityType : IEquatable<ConnectivityType>
    {
        private readonly string _value;

        private ConnectivityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectivityType IsConnectedQuery { get; } = new ConnectivityType("IsConnectedQuery");

        public static bool operator ==(ConnectivityType left, ConnectivityType right) => left.Equals(right);
        public static bool operator !=(ConnectivityType left, ConnectivityType right) => !left.Equals(right);

        public static explicit operator string(ConnectivityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectivityType other && Equals(other);
        public bool Equals(ConnectivityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content type.
    /// </summary>
    [EnumType]
    public readonly struct ContentType : IEquatable<ContentType>
    {
        private readonly string _value;

        private ContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContentType AnalyticRule { get; } = new ContentType("AnalyticRule");
        public static ContentType Workbook { get; } = new ContentType("Workbook");

        public static bool operator ==(ContentType left, ContentType right) => left.Equals(right);
        public static bool operator !=(ContentType left, ContentType right) => !left.Equals(right);

        public static explicit operator string(ContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentType other && Equals(other);
        public bool Equals(ContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the entity query kind
    /// </summary>
    [EnumType]
    public readonly struct CustomEntityQueryKind : IEquatable<CustomEntityQueryKind>
    {
        private readonly string _value;

        private CustomEntityQueryKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomEntityQueryKind Activity { get; } = new CustomEntityQueryKind("Activity");

        public static bool operator ==(CustomEntityQueryKind left, CustomEntityQueryKind right) => left.Equals(right);
        public static bool operator !=(CustomEntityQueryKind left, CustomEntityQueryKind right) => !left.Equals(right);

        public static explicit operator string(CustomEntityQueryKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomEntityQueryKind other && Equals(other);
        public bool Equals(CustomEntityQueryKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data connector kind
    /// </summary>
    [EnumType]
    public readonly struct DataConnectorKind : IEquatable<DataConnectorKind>
    {
        private readonly string _value;

        private DataConnectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataConnectorKind AzureActiveDirectory { get; } = new DataConnectorKind("AzureActiveDirectory");
        public static DataConnectorKind AzureSecurityCenter { get; } = new DataConnectorKind("AzureSecurityCenter");
        public static DataConnectorKind MicrosoftCloudAppSecurity { get; } = new DataConnectorKind("MicrosoftCloudAppSecurity");
        public static DataConnectorKind ThreatIntelligence { get; } = new DataConnectorKind("ThreatIntelligence");
        public static DataConnectorKind ThreatIntelligenceTaxii { get; } = new DataConnectorKind("ThreatIntelligenceTaxii");
        public static DataConnectorKind Office365 { get; } = new DataConnectorKind("Office365");
        public static DataConnectorKind OfficeATP { get; } = new DataConnectorKind("OfficeATP");
        public static DataConnectorKind OfficeIRM { get; } = new DataConnectorKind("OfficeIRM");
        public static DataConnectorKind Office365Project { get; } = new DataConnectorKind("Office365Project");
        public static DataConnectorKind MicrosoftPurviewInformationProtection { get; } = new DataConnectorKind("MicrosoftPurviewInformationProtection");
        public static DataConnectorKind OfficePowerBI { get; } = new DataConnectorKind("OfficePowerBI");
        public static DataConnectorKind AmazonWebServicesCloudTrail { get; } = new DataConnectorKind("AmazonWebServicesCloudTrail");
        public static DataConnectorKind AmazonWebServicesS3 { get; } = new DataConnectorKind("AmazonWebServicesS3");
        public static DataConnectorKind AzureAdvancedThreatProtection { get; } = new DataConnectorKind("AzureAdvancedThreatProtection");
        public static DataConnectorKind MicrosoftDefenderAdvancedThreatProtection { get; } = new DataConnectorKind("MicrosoftDefenderAdvancedThreatProtection");
        public static DataConnectorKind Dynamics365 { get; } = new DataConnectorKind("Dynamics365");
        public static DataConnectorKind MicrosoftThreatProtection { get; } = new DataConnectorKind("MicrosoftThreatProtection");
        public static DataConnectorKind MicrosoftThreatIntelligence { get; } = new DataConnectorKind("MicrosoftThreatIntelligence");
        public static DataConnectorKind GenericUI { get; } = new DataConnectorKind("GenericUI");
        public static DataConnectorKind APIPolling { get; } = new DataConnectorKind("APIPolling");
        public static DataConnectorKind IOT { get; } = new DataConnectorKind("IOT");

        public static bool operator ==(DataConnectorKind left, DataConnectorKind right) => left.Equals(right);
        public static bool operator !=(DataConnectorKind left, DataConnectorKind right) => !left.Equals(right);

        public static explicit operator string(DataConnectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataConnectorKind other && Equals(other);
        public bool Equals(DataConnectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describe whether this data type connection is enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct DataTypeState : IEquatable<DataTypeState>
    {
        private readonly string _value;

        private DataTypeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataTypeState Enabled { get; } = new DataTypeState("Enabled");
        public static DataTypeState Disabled { get; } = new DataTypeState("Disabled");

        public static bool operator ==(DataTypeState left, DataTypeState right) => left.Equals(right);
        public static bool operator !=(DataTypeState left, DataTypeState right) => !left.Equals(right);

        public static explicit operator string(DataTypeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataTypeState other && Equals(other);
        public bool Equals(DataTypeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status while fetching the last deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentFetchStatus : IEquatable<DeploymentFetchStatus>
    {
        private readonly string _value;

        private DeploymentFetchStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentFetchStatus Success { get; } = new DeploymentFetchStatus("Success");
        public static DeploymentFetchStatus Unauthorized { get; } = new DeploymentFetchStatus("Unauthorized");
        public static DeploymentFetchStatus NotFound { get; } = new DeploymentFetchStatus("NotFound");

        public static bool operator ==(DeploymentFetchStatus left, DeploymentFetchStatus right) => left.Equals(right);
        public static bool operator !=(DeploymentFetchStatus left, DeploymentFetchStatus right) => !left.Equals(right);

        public static explicit operator string(DeploymentFetchStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentFetchStatus other && Equals(other);
        public bool Equals(DeploymentFetchStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The outcome of the deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentResult : IEquatable<DeploymentResult>
    {
        private readonly string _value;

        private DeploymentResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentResult Success { get; } = new DeploymentResult("Success");
        public static DeploymentResult Canceled { get; } = new DeploymentResult("Canceled");
        public static DeploymentResult Failed { get; } = new DeploymentResult("Failed");

        public static bool operator ==(DeploymentResult left, DeploymentResult right) => left.Equals(right);
        public static bool operator !=(DeploymentResult left, DeploymentResult right) => !left.Equals(right);

        public static explicit operator string(DeploymentResult value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentResult other && Equals(other);
        public bool Equals(DeploymentResult other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current status of the deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentState : IEquatable<DeploymentState>
    {
        private readonly string _value;

        private DeploymentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentState In_Progress { get; } = new DeploymentState("In_Progress");
        public static DeploymentState Completed { get; } = new DeploymentState("Completed");
        public static DeploymentState Queued { get; } = new DeploymentState("Queued");
        public static DeploymentState Canceling { get; } = new DeploymentState("Canceling");

        public static bool operator ==(DeploymentState left, DeploymentState right) => left.Equals(right);
        public static bool operator !=(DeploymentState left, DeploymentState right) => !left.Equals(right);

        public static explicit operator string(DeploymentState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentState other && Equals(other);
        public bool Equals(DeploymentState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The V3 type of the mapped entity
    /// </summary>
    [EnumType]
    public readonly struct EntityMappingType : IEquatable<EntityMappingType>
    {
        private readonly string _value;

        private EntityMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User account entity type
        /// </summary>
        public static EntityMappingType Account { get; } = new EntityMappingType("Account");
        /// <summary>
        /// Host entity type
        /// </summary>
        public static EntityMappingType Host { get; } = new EntityMappingType("Host");
        /// <summary>
        /// IP address entity type
        /// </summary>
        public static EntityMappingType IP { get; } = new EntityMappingType("IP");
        /// <summary>
        /// Malware entity type
        /// </summary>
        public static EntityMappingType Malware { get; } = new EntityMappingType("Malware");
        /// <summary>
        /// System file entity type
        /// </summary>
        public static EntityMappingType File { get; } = new EntityMappingType("File");
        /// <summary>
        /// Process entity type
        /// </summary>
        public static EntityMappingType Process { get; } = new EntityMappingType("Process");
        /// <summary>
        /// Cloud app entity type
        /// </summary>
        public static EntityMappingType CloudApplication { get; } = new EntityMappingType("CloudApplication");
        /// <summary>
        /// DNS entity type
        /// </summary>
        public static EntityMappingType DNS { get; } = new EntityMappingType("DNS");
        /// <summary>
        /// Azure resource entity type
        /// </summary>
        public static EntityMappingType AzureResource { get; } = new EntityMappingType("AzureResource");
        /// <summary>
        /// File-hash entity type
        /// </summary>
        public static EntityMappingType FileHash { get; } = new EntityMappingType("FileHash");
        /// <summary>
        /// Registry key entity type
        /// </summary>
        public static EntityMappingType RegistryKey { get; } = new EntityMappingType("RegistryKey");
        /// <summary>
        /// Registry value entity type
        /// </summary>
        public static EntityMappingType RegistryValue { get; } = new EntityMappingType("RegistryValue");
        /// <summary>
        /// Security group entity type
        /// </summary>
        public static EntityMappingType SecurityGroup { get; } = new EntityMappingType("SecurityGroup");
        /// <summary>
        /// URL entity type
        /// </summary>
        public static EntityMappingType URL { get; } = new EntityMappingType("URL");
        /// <summary>
        /// Mailbox entity type
        /// </summary>
        public static EntityMappingType Mailbox { get; } = new EntityMappingType("Mailbox");
        /// <summary>
        /// Mail cluster entity type
        /// </summary>
        public static EntityMappingType MailCluster { get; } = new EntityMappingType("MailCluster");
        /// <summary>
        /// Mail message entity type
        /// </summary>
        public static EntityMappingType MailMessage { get; } = new EntityMappingType("MailMessage");
        /// <summary>
        /// Submission mail entity type
        /// </summary>
        public static EntityMappingType SubmissionMail { get; } = new EntityMappingType("SubmissionMail");

        public static bool operator ==(EntityMappingType left, EntityMappingType right) => left.Equals(right);
        public static bool operator !=(EntityMappingType left, EntityMappingType right) => !left.Equals(right);

        public static explicit operator string(EntityMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityMappingType other && Equals(other);
        public bool Equals(EntityMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity provider that is synced.
    /// </summary>
    [EnumType]
    public readonly struct EntityProviders : IEquatable<EntityProviders>
    {
        private readonly string _value;

        private EntityProviders(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityProviders ActiveDirectory { get; } = new EntityProviders("ActiveDirectory");
        public static EntityProviders AzureActiveDirectory { get; } = new EntityProviders("AzureActiveDirectory");

        public static bool operator ==(EntityProviders left, EntityProviders right) => left.Equals(right);
        public static bool operator !=(EntityProviders left, EntityProviders right) => !left.Equals(right);

        public static explicit operator string(EntityProviders value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityProviders other && Equals(other);
        public bool Equals(EntityProviders other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity query kind
    /// </summary>
    [EnumType]
    public readonly struct EntityTimelineKind : IEquatable<EntityTimelineKind>
    {
        private readonly string _value;

        private EntityTimelineKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// activity
        /// </summary>
        public static EntityTimelineKind Activity { get; } = new EntityTimelineKind("Activity");
        /// <summary>
        /// bookmarks
        /// </summary>
        public static EntityTimelineKind Bookmark { get; } = new EntityTimelineKind("Bookmark");
        /// <summary>
        /// security alerts
        /// </summary>
        public static EntityTimelineKind SecurityAlert { get; } = new EntityTimelineKind("SecurityAlert");
        /// <summary>
        /// anomaly
        /// </summary>
        public static EntityTimelineKind Anomaly { get; } = new EntityTimelineKind("Anomaly");

        public static bool operator ==(EntityTimelineKind left, EntityTimelineKind right) => left.Equals(right);
        public static bool operator !=(EntityTimelineKind left, EntityTimelineKind right) => !left.Equals(right);

        public static explicit operator string(EntityTimelineKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityTimelineKind other && Equals(other);
        public bool Equals(EntityTimelineKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the query's source entity
    /// </summary>
    [EnumType]
    public readonly struct EntityType : IEquatable<EntityType>
    {
        private readonly string _value;

        private EntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Entity represents account in the system.
        /// </summary>
        public static EntityType Account { get; } = new EntityType("Account");
        /// <summary>
        /// Entity represents host in the system.
        /// </summary>
        public static EntityType Host { get; } = new EntityType("Host");
        /// <summary>
        /// Entity represents file in the system.
        /// </summary>
        public static EntityType File { get; } = new EntityType("File");
        /// <summary>
        /// Entity represents azure resource in the system.
        /// </summary>
        public static EntityType AzureResource { get; } = new EntityType("AzureResource");
        /// <summary>
        /// Entity represents cloud application in the system.
        /// </summary>
        public static EntityType CloudApplication { get; } = new EntityType("CloudApplication");
        /// <summary>
        /// Entity represents dns in the system.
        /// </summary>
        public static EntityType DNS { get; } = new EntityType("DNS");
        /// <summary>
        /// Entity represents file hash in the system.
        /// </summary>
        public static EntityType FileHash { get; } = new EntityType("FileHash");
        /// <summary>
        /// Entity represents ip in the system.
        /// </summary>
        public static EntityType IP { get; } = new EntityType("IP");
        /// <summary>
        /// Entity represents malware in the system.
        /// </summary>
        public static EntityType Malware { get; } = new EntityType("Malware");
        /// <summary>
        /// Entity represents process in the system.
        /// </summary>
        public static EntityType Process { get; } = new EntityType("Process");
        /// <summary>
        /// Entity represents registry key in the system.
        /// </summary>
        public static EntityType RegistryKey { get; } = new EntityType("RegistryKey");
        /// <summary>
        /// Entity represents registry value in the system.
        /// </summary>
        public static EntityType RegistryValue { get; } = new EntityType("RegistryValue");
        /// <summary>
        /// Entity represents security group in the system.
        /// </summary>
        public static EntityType SecurityGroup { get; } = new EntityType("SecurityGroup");
        /// <summary>
        /// Entity represents url in the system.
        /// </summary>
        public static EntityType URL { get; } = new EntityType("URL");
        /// <summary>
        /// Entity represents IoT device in the system.
        /// </summary>
        public static EntityType IoTDevice { get; } = new EntityType("IoTDevice");
        /// <summary>
        /// Entity represents security alert in the system.
        /// </summary>
        public static EntityType SecurityAlert { get; } = new EntityType("SecurityAlert");
        /// <summary>
        /// Entity represents HuntingBookmark in the system.
        /// </summary>
        public static EntityType HuntingBookmark { get; } = new EntityType("HuntingBookmark");
        /// <summary>
        /// Entity represents mail cluster in the system.
        /// </summary>
        public static EntityType MailCluster { get; } = new EntityType("MailCluster");
        /// <summary>
        /// Entity represents mail message in the system.
        /// </summary>
        public static EntityType MailMessage { get; } = new EntityType("MailMessage");
        /// <summary>
        /// Entity represents mailbox in the system.
        /// </summary>
        public static EntityType Mailbox { get; } = new EntityType("Mailbox");
        /// <summary>
        /// Entity represents submission mail in the system.
        /// </summary>
        public static EntityType SubmissionMail { get; } = new EntityType("SubmissionMail");
        /// <summary>
        /// Entity represents network interface in the system.
        /// </summary>
        public static EntityType Nic { get; } = new EntityType("Nic");

        public static bool operator ==(EntityType left, EntityType right) => left.Equals(right);
        public static bool operator !=(EntityType left, EntityType right) => !left.Equals(right);

        public static explicit operator string(EntityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityType other && Equals(other);
        public bool Equals(EntityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The event grouping aggregation kinds
    /// </summary>
    [EnumType]
    public readonly struct EventGroupingAggregationKind : IEquatable<EventGroupingAggregationKind>
    {
        private readonly string _value;

        private EventGroupingAggregationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventGroupingAggregationKind SingleAlert { get; } = new EventGroupingAggregationKind("SingleAlert");
        public static EventGroupingAggregationKind AlertPerResult { get; } = new EventGroupingAggregationKind("AlertPerResult");

        public static bool operator ==(EventGroupingAggregationKind left, EventGroupingAggregationKind right) => left.Equals(right);
        public static bool operator !=(EventGroupingAggregationKind left, EventGroupingAggregationKind right) => !left.Equals(right);

        public static explicit operator string(EventGroupingAggregationKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventGroupingAggregationKind other && Equals(other);
        public bool Equals(EventGroupingAggregationKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the file
    /// </summary>
    [EnumType]
    public readonly struct FileFormat : IEquatable<FileFormat>
    {
        private readonly string _value;

        private FileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A CSV file.
        /// </summary>
        public static FileFormat CSV { get; } = new FileFormat("CSV");
        /// <summary>
        /// A JSON file.
        /// </summary>
        public static FileFormat JSON { get; } = new FileFormat("JSON");
        /// <summary>
        /// A file of other format.
        /// </summary>
        public static FileFormat Unspecified { get; } = new FileFormat("Unspecified");

        public static bool operator ==(FileFormat left, FileFormat right) => left.Equals(right);
        public static bool operator !=(FileFormat left, FileFormat right) => !left.Equals(right);

        public static explicit operator string(FileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileFormat other && Equals(other);
        public bool Equals(FileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The content type of this file.
    /// </summary>
    [EnumType]
    public readonly struct FileImportContentType : IEquatable<FileImportContentType>
    {
        private readonly string _value;

        private FileImportContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// File containing records with the core fields of an indicator, plus the observables to construct the STIX pattern.
        /// </summary>
        public static FileImportContentType BasicIndicator { get; } = new FileImportContentType("BasicIndicator");
        /// <summary>
        /// File containing STIX indicators.
        /// </summary>
        public static FileImportContentType StixIndicator { get; } = new FileImportContentType("StixIndicator");
        /// <summary>
        /// File containing other records.
        /// </summary>
        public static FileImportContentType Unspecified { get; } = new FileImportContentType("Unspecified");

        public static bool operator ==(FileImportContentType left, FileImportContentType right) => left.Equals(right);
        public static bool operator !=(FileImportContentType left, FileImportContentType right) => !left.Equals(right);

        public static explicit operator string(FileImportContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FileImportContentType other && Equals(other);
        public bool Equals(FileImportContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The reason the incident was closed
    /// </summary>
    [EnumType]
    public readonly struct IncidentClassification : IEquatable<IncidentClassification>
    {
        private readonly string _value;

        private IncidentClassification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Incident classification was undetermined
        /// </summary>
        public static IncidentClassification Undetermined { get; } = new IncidentClassification("Undetermined");
        /// <summary>
        /// Incident was true positive
        /// </summary>
        public static IncidentClassification TruePositive { get; } = new IncidentClassification("TruePositive");
        /// <summary>
        /// Incident was benign positive
        /// </summary>
        public static IncidentClassification BenignPositive { get; } = new IncidentClassification("BenignPositive");
        /// <summary>
        /// Incident was false positive
        /// </summary>
        public static IncidentClassification FalsePositive { get; } = new IncidentClassification("FalsePositive");

        public static bool operator ==(IncidentClassification left, IncidentClassification right) => left.Equals(right);
        public static bool operator !=(IncidentClassification left, IncidentClassification right) => !left.Equals(right);

        public static explicit operator string(IncidentClassification value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentClassification other && Equals(other);
        public bool Equals(IncidentClassification other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The classification reason the incident was closed with
    /// </summary>
    [EnumType]
    public readonly struct IncidentClassificationReason : IEquatable<IncidentClassificationReason>
    {
        private readonly string _value;

        private IncidentClassificationReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Classification reason was suspicious activity
        /// </summary>
        public static IncidentClassificationReason SuspiciousActivity { get; } = new IncidentClassificationReason("SuspiciousActivity");
        /// <summary>
        /// Classification reason was suspicious but expected
        /// </summary>
        public static IncidentClassificationReason SuspiciousButExpected { get; } = new IncidentClassificationReason("SuspiciousButExpected");
        /// <summary>
        /// Classification reason was incorrect alert logic
        /// </summary>
        public static IncidentClassificationReason IncorrectAlertLogic { get; } = new IncidentClassificationReason("IncorrectAlertLogic");
        /// <summary>
        /// Classification reason was inaccurate data
        /// </summary>
        public static IncidentClassificationReason InaccurateData { get; } = new IncidentClassificationReason("InaccurateData");

        public static bool operator ==(IncidentClassificationReason left, IncidentClassificationReason right) => left.Equals(right);
        public static bool operator !=(IncidentClassificationReason left, IncidentClassificationReason right) => !left.Equals(right);

        public static explicit operator string(IncidentClassificationReason value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentClassificationReason other && Equals(other);
        public bool Equals(IncidentClassificationReason other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity of the incident
    /// </summary>
    [EnumType]
    public readonly struct IncidentSeverity : IEquatable<IncidentSeverity>
    {
        private readonly string _value;

        private IncidentSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// High severity
        /// </summary>
        public static IncidentSeverity High { get; } = new IncidentSeverity("High");
        /// <summary>
        /// Medium severity
        /// </summary>
        public static IncidentSeverity Medium { get; } = new IncidentSeverity("Medium");
        /// <summary>
        /// Low severity
        /// </summary>
        public static IncidentSeverity Low { get; } = new IncidentSeverity("Low");
        /// <summary>
        /// Informational severity
        /// </summary>
        public static IncidentSeverity Informational { get; } = new IncidentSeverity("Informational");

        public static bool operator ==(IncidentSeverity left, IncidentSeverity right) => left.Equals(right);
        public static bool operator !=(IncidentSeverity left, IncidentSeverity right) => !left.Equals(right);

        public static explicit operator string(IncidentSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentSeverity other && Equals(other);
        public bool Equals(IncidentSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the incident
    /// </summary>
    [EnumType]
    public readonly struct IncidentStatus : IEquatable<IncidentStatus>
    {
        private readonly string _value;

        private IncidentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// An active incident which isn't being handled currently
        /// </summary>
        public static IncidentStatus New { get; } = new IncidentStatus("New");
        /// <summary>
        /// An active incident which is being handled
        /// </summary>
        public static IncidentStatus Active { get; } = new IncidentStatus("Active");
        /// <summary>
        /// A non-active incident
        /// </summary>
        public static IncidentStatus Closed { get; } = new IncidentStatus("Closed");

        public static bool operator ==(IncidentStatus left, IncidentStatus right) => left.Equals(right);
        public static bool operator !=(IncidentStatus left, IncidentStatus right) => !left.Equals(right);

        public static explicit operator string(IncidentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentStatus other && Equals(other);
        public bool Equals(IncidentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IncidentTaskStatus : IEquatable<IncidentTaskStatus>
    {
        private readonly string _value;

        private IncidentTaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A new task
        /// </summary>
        public static IncidentTaskStatus New { get; } = new IncidentTaskStatus("New");
        /// <summary>
        /// A completed task
        /// </summary>
        public static IncidentTaskStatus Completed { get; } = new IncidentTaskStatus("Completed");

        public static bool operator ==(IncidentTaskStatus left, IncidentTaskStatus right) => left.Equals(right);
        public static bool operator !=(IncidentTaskStatus left, IncidentTaskStatus right) => !left.Equals(right);

        public static explicit operator string(IncidentTaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentTaskStatus other && Equals(other);
        public bool Equals(IncidentTaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes how to ingest the records in the file.
    /// </summary>
    [EnumType]
    public readonly struct IngestionMode : IEquatable<IngestionMode>
    {
        private readonly string _value;

        private IngestionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No records should be ingested when invalid records are detected.
        /// </summary>
        public static IngestionMode IngestOnlyIfAllAreValid { get; } = new IngestionMode("IngestOnlyIfAllAreValid");
        /// <summary>
        /// Valid records should still be ingested when invalid records are detected.
        /// </summary>
        public static IngestionMode IngestAnyValidRecords { get; } = new IngestionMode("IngestAnyValidRecords");
        /// <summary>
        /// Unspecified
        /// </summary>
        public static IngestionMode Unspecified { get; } = new IngestionMode("Unspecified");

        public static bool operator ==(IngestionMode left, IngestionMode right) => left.Equals(right);
        public static bool operator !=(IngestionMode left, IngestionMode right) => !left.Equals(right);

        public static explicit operator string(IngestionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngestionMode other && Equals(other);
        public bool Equals(IngestionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of content the metadata is for.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind DataConnector { get; } = new Kind("DataConnector");
        public static Kind DataType { get; } = new Kind("DataType");
        public static Kind Workbook { get; } = new Kind("Workbook");
        public static Kind WorkbookTemplate { get; } = new Kind("WorkbookTemplate");
        public static Kind Playbook { get; } = new Kind("Playbook");
        public static Kind PlaybookTemplate { get; } = new Kind("PlaybookTemplate");
        public static Kind AnalyticsRuleTemplate { get; } = new Kind("AnalyticsRuleTemplate");
        public static Kind AnalyticsRule { get; } = new Kind("AnalyticsRule");
        public static Kind HuntingQuery { get; } = new Kind("HuntingQuery");
        public static Kind InvestigationQuery { get; } = new Kind("InvestigationQuery");
        public static Kind Parser { get; } = new Kind("Parser");
        public static Kind Watchlist { get; } = new Kind("Watchlist");
        public static Kind WatchlistTemplate { get; } = new Kind("WatchlistTemplate");
        public static Kind Solution { get; } = new Kind("Solution");
        public static Kind AzureFunction { get; } = new Kind("AzureFunction");
        public static Kind LogicAppsCustomConnector { get; } = new Kind("LogicAppsCustomConnector");
        public static Kind AutomationRule { get; } = new Kind("AutomationRule");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
    /// </summary>
    [EnumType]
    public readonly struct MatchingMethod : IEquatable<MatchingMethod>
    {
        private readonly string _value;

        private MatchingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Grouping alerts into a single incident if all the entities match
        /// </summary>
        public static MatchingMethod AllEntities { get; } = new MatchingMethod("AllEntities");
        /// <summary>
        /// Grouping any alerts triggered by this rule into a single incident
        /// </summary>
        public static MatchingMethod AnyAlert { get; } = new MatchingMethod("AnyAlert");
        /// <summary>
        /// Grouping alerts into a single incident if the selected entities, custom details and alert details match
        /// </summary>
        public static MatchingMethod Selected { get; } = new MatchingMethod("Selected");

        public static bool operator ==(MatchingMethod left, MatchingMethod right) => left.Equals(right);
        public static bool operator !=(MatchingMethod left, MatchingMethod right) => !left.Equals(right);

        public static explicit operator string(MatchingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchingMethod other && Equals(other);
        public bool Equals(MatchingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The alerts' productName on which the cases will be generated
    /// </summary>
    [EnumType]
    public readonly struct MicrosoftSecurityProductName : IEquatable<MicrosoftSecurityProductName>
    {
        private readonly string _value;

        private MicrosoftSecurityProductName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MicrosoftSecurityProductName Microsoft_Cloud_App_Security { get; } = new MicrosoftSecurityProductName("Microsoft Cloud App Security");
        public static MicrosoftSecurityProductName Azure_Security_Center { get; } = new MicrosoftSecurityProductName("Azure Security Center");
        public static MicrosoftSecurityProductName Azure_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Azure Advanced Threat Protection");
        public static MicrosoftSecurityProductName Azure_Active_Directory_Identity_Protection { get; } = new MicrosoftSecurityProductName("Azure Active Directory Identity Protection");
        public static MicrosoftSecurityProductName Azure_Security_Center_for_IoT { get; } = new MicrosoftSecurityProductName("Azure Security Center for IoT");
        public static MicrosoftSecurityProductName Office_365_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Office 365 Advanced Threat Protection");
        public static MicrosoftSecurityProductName Microsoft_Defender_Advanced_Threat_Protection { get; } = new MicrosoftSecurityProductName("Microsoft Defender Advanced Threat Protection");

        public static bool operator ==(MicrosoftSecurityProductName left, MicrosoftSecurityProductName right) => left.Equals(right);
        public static bool operator !=(MicrosoftSecurityProductName left, MicrosoftSecurityProductName right) => !left.Equals(right);

        public static explicit operator string(MicrosoftSecurityProductName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MicrosoftSecurityProductName other && Equals(other);
        public bool Equals(MicrosoftSecurityProductName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The available data providers.
    /// </summary>
    [EnumType]
    public readonly struct MtpProvider : IEquatable<MtpProvider>
    {
        private readonly string _value;

        private MtpProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MtpProvider MicrosoftDefenderForCloudApps { get; } = new MtpProvider("microsoftDefenderForCloudApps");
        public static MtpProvider MicrosoftDefenderForIdentity { get; } = new MtpProvider("microsoftDefenderForIdentity");

        public static bool operator ==(MtpProvider left, MtpProvider right) => left.Equals(right);
        public static bool operator !=(MtpProvider left, MtpProvider right) => !left.Equals(right);

        public static explicit operator string(MtpProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MtpProvider other && Equals(other);
        public bool Equals(MtpProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator used for list of dependencies in criteria array.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator AND { get; } = new Operator("AND");
        public static Operator OR { get; } = new Operator("OR");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the owner the incident is assigned to.
    /// </summary>
    [EnumType]
    public readonly struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        private OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The incident owner type is unknown
        /// </summary>
        public static OwnerType Unknown { get; } = new OwnerType("Unknown");
        /// <summary>
        /// The incident owner type is an AAD user
        /// </summary>
        public static OwnerType User { get; } = new OwnerType("User");
        /// <summary>
        /// The incident owner type is an AAD group
        /// </summary>
        public static OwnerType Group { get; } = new OwnerType("Group");

        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);

        public static explicit operator string(OwnerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwnerType other && Equals(other);
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Permission provider scope
    /// </summary>
    [EnumType]
    public readonly struct PermissionProviderScope : IEquatable<PermissionProviderScope>
    {
        private readonly string _value;

        private PermissionProviderScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PermissionProviderScope ResourceGroup { get; } = new PermissionProviderScope("ResourceGroup");
        public static PermissionProviderScope Subscription { get; } = new PermissionProviderScope("Subscription");
        public static PermissionProviderScope Workspace { get; } = new PermissionProviderScope("Workspace");

        public static bool operator ==(PermissionProviderScope left, PermissionProviderScope right) => left.Equals(right);
        public static bool operator !=(PermissionProviderScope left, PermissionProviderScope right) => !left.Equals(right);

        public static explicit operator string(PermissionProviderScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PermissionProviderScope other && Equals(other);
        public bool Equals(PermissionProviderScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The polling frequency for the TAXII server.
    /// </summary>
    [EnumType]
    public readonly struct PollingFrequency : IEquatable<PollingFrequency>
    {
        private readonly string _value;

        private PollingFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Once a minute
        /// </summary>
        public static PollingFrequency OnceAMinute { get; } = new PollingFrequency("OnceAMinute");
        /// <summary>
        /// Once an hour
        /// </summary>
        public static PollingFrequency OnceAnHour { get; } = new PollingFrequency("OnceAnHour");
        /// <summary>
        /// Once a day
        /// </summary>
        public static PollingFrequency OnceADay { get; } = new PollingFrequency("OnceADay");

        public static bool operator ==(PollingFrequency left, PollingFrequency right) => left.Equals(right);
        public static bool operator !=(PollingFrequency left, PollingFrequency right) => !left.Equals(right);

        public static explicit operator string(PollingFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PollingFrequency other && Equals(other);
        public bool Equals(PollingFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provider name
    /// </summary>
    [EnumType]
    public readonly struct ProviderName : IEquatable<ProviderName>
    {
        private readonly string _value;

        private ProviderName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProviderName Microsoft_OperationalInsights_solutions { get; } = new ProviderName("Microsoft.OperationalInsights/solutions");
        public static ProviderName Microsoft_OperationalInsights_workspaces { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces");
        public static ProviderName Microsoft_OperationalInsights_workspaces_datasources { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/datasources");
        public static ProviderName Microsoft_aadiam_diagnosticSettings { get; } = new ProviderName("microsoft.aadiam/diagnosticSettings");
        public static ProviderName Microsoft_OperationalInsights_workspaces_sharedKeys { get; } = new ProviderName("Microsoft.OperationalInsights/workspaces/sharedKeys");
        public static ProviderName Microsoft_Authorization_policyAssignments { get; } = new ProviderName("Microsoft.Authorization/policyAssignments");

        public static bool operator ==(ProviderName left, ProviderName right) => left.Equals(right);
        public static bool operator !=(ProviderName left, ProviderName right) => !left.Equals(right);

        public static explicit operator string(ProviderName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProviderName other && Equals(other);
        public bool Equals(ProviderName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The repository type of the source control
    /// </summary>
    [EnumType]
    public readonly struct RepoType : IEquatable<RepoType>
    {
        private readonly string _value;

        private RepoType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepoType Github { get; } = new RepoType("Github");
        public static RepoType DevOps { get; } = new RepoType("DevOps");

        public static bool operator ==(RepoType left, RepoType right) => left.Equals(right);
        public static bool operator !=(RepoType left, RepoType right) => !left.Equals(right);

        public static explicit operator string(RepoType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepoType other && Equals(other);
        public bool Equals(RepoType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of security ML Analytics Settings
    /// </summary>
    [EnumType]
    public readonly struct SecurityMLAnalyticsSettingsKind : IEquatable<SecurityMLAnalyticsSettingsKind>
    {
        private readonly string _value;

        private SecurityMLAnalyticsSettingsKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityMLAnalyticsSettingsKind Anomaly { get; } = new SecurityMLAnalyticsSettingsKind("Anomaly");

        public static bool operator ==(SecurityMLAnalyticsSettingsKind left, SecurityMLAnalyticsSettingsKind right) => left.Equals(right);
        public static bool operator !=(SecurityMLAnalyticsSettingsKind left, SecurityMLAnalyticsSettingsKind right) => !left.Equals(right);

        public static explicit operator string(SecurityMLAnalyticsSettingsKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityMLAnalyticsSettingsKind other && Equals(other);
        public bool Equals(SecurityMLAnalyticsSettingsKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingKind : IEquatable<SettingKind>
    {
        private readonly string _value;

        private SettingKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingKind Anomalies { get; } = new SettingKind("Anomalies");
        public static SettingKind EyesOn { get; } = new SettingKind("EyesOn");
        public static SettingKind EntityAnalytics { get; } = new SettingKind("EntityAnalytics");
        public static SettingKind Ueba { get; } = new SettingKind("Ueba");

        public static bool operator ==(SettingKind left, SettingKind right) => left.Equals(right);
        public static bool operator !=(SettingKind left, SettingKind right) => !left.Equals(right);

        public static explicit operator string(SettingKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingKind other && Equals(other);
        public bool Equals(SettingKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the setting
    /// </summary>
    [EnumType]
    public readonly struct SettingType : IEquatable<SettingType>
    {
        private readonly string _value;

        private SettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SettingType CopyableLabel { get; } = new SettingType("CopyableLabel");
        public static SettingType InstructionStepsGroup { get; } = new SettingType("InstructionStepsGroup");
        public static SettingType InfoMessage { get; } = new SettingType("InfoMessage");

        public static bool operator ==(SettingType left, SettingType right) => left.Equals(right);
        public static bool operator !=(SettingType left, SettingType right) => !left.Equals(right);

        public static explicit operator string(SettingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingType other && Equals(other);
        public bool Equals(SettingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The anomaly SecurityMLAnalyticsSettings status
    /// </summary>
    [EnumType]
    public readonly struct SettingsStatus : IEquatable<SettingsStatus>
    {
        private readonly string _value;

        private SettingsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Anomaly settings status in Production mode
        /// </summary>
        public static SettingsStatus Production { get; } = new SettingsStatus("Production");
        /// <summary>
        /// Anomaly settings status in Flighting mode
        /// </summary>
        public static SettingsStatus Flighting { get; } = new SettingsStatus("Flighting");

        public static bool operator ==(SettingsStatus left, SettingsStatus right) => left.Equals(right);
        public static bool operator !=(SettingsStatus left, SettingsStatus right) => !left.Equals(right);

        public static explicit operator string(SettingsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SettingsStatus other && Equals(other);
        public bool Equals(SettingsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source type of the content
    /// </summary>
    [EnumType]
    public readonly struct SourceKind : IEquatable<SourceKind>
    {
        private readonly string _value;

        private SourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceKind LocalWorkspace { get; } = new SourceKind("LocalWorkspace");
        public static SourceKind Community { get; } = new SourceKind("Community");
        public static SourceKind Solution { get; } = new SourceKind("Solution");
        public static SourceKind SourceRepository { get; } = new SourceKind("SourceRepository");

        public static bool operator ==(SourceKind left, SourceKind right) => left.Equals(right);
        public static bool operator !=(SourceKind left, SourceKind right) => !left.Equals(right);

        public static explicit operator string(SourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceKind other && Equals(other);
        public bool Equals(SourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sourceType of the watchlist
    /// </summary>
    [EnumType]
    public readonly struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        private SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceType Local_file { get; } = new SourceType("Local file");
        public static SourceType Remote_storage { get; } = new SourceType("Remote storage");

        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);

        public static explicit operator string(SourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceType other && Equals(other);
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of support for content item
    /// </summary>
    [EnumType]
    public readonly struct SupportTier : IEquatable<SupportTier>
    {
        private readonly string _value;

        private SupportTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportTier Microsoft { get; } = new SupportTier("Microsoft");
        public static SupportTier Partner { get; } = new SupportTier("Partner");
        public static SupportTier Community { get; } = new SupportTier("Community");

        public static bool operator ==(SupportTier left, SupportTier right) => left.Equals(right);
        public static bool operator !=(SupportTier left, SupportTier right) => !left.Equals(right);

        public static explicit operator string(SupportTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportTier other && Equals(other);
        public bool Equals(SupportTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the entity.
    /// </summary>
    [EnumType]
    public readonly struct ThreatIntelligenceResourceKindEnum : IEquatable<ThreatIntelligenceResourceKindEnum>
    {
        private readonly string _value;

        private ThreatIntelligenceResourceKindEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Entity represents threat intelligence indicator in the system.
        /// </summary>
        public static ThreatIntelligenceResourceKindEnum Indicator { get; } = new ThreatIntelligenceResourceKindEnum("indicator");

        public static bool operator ==(ThreatIntelligenceResourceKindEnum left, ThreatIntelligenceResourceKindEnum right) => left.Equals(right);
        public static bool operator !=(ThreatIntelligenceResourceKindEnum left, ThreatIntelligenceResourceKindEnum right) => !left.Equals(right);

        public static explicit operator string(ThreatIntelligenceResourceKindEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThreatIntelligenceResourceKindEnum other && Equals(other);
        public bool Equals(ThreatIntelligenceResourceKindEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation against the threshold that triggers alert rule.
    /// </summary>
    [EnumType]
    public readonly struct TriggerOperator : IEquatable<TriggerOperator>
    {
        private readonly string _value;

        private TriggerOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerOperator GreaterThan { get; } = new TriggerOperator("GreaterThan");
        public static TriggerOperator LessThan { get; } = new TriggerOperator("LessThan");
        public static TriggerOperator Equal { get; } = new TriggerOperator("Equal");
        public static TriggerOperator NotEqual { get; } = new TriggerOperator("NotEqual");

        public static bool operator ==(TriggerOperator left, TriggerOperator right) => left.Equals(right);
        public static bool operator !=(TriggerOperator left, TriggerOperator right) => !left.Equals(right);

        public static explicit operator string(TriggerOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerOperator other && Equals(other);
        public bool Equals(TriggerOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TriggersOn : IEquatable<TriggersOn>
    {
        private readonly string _value;

        private TriggersOn(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Trigger on Incidents
        /// </summary>
        public static TriggersOn Incidents { get; } = new TriggersOn("Incidents");
        /// <summary>
        /// Trigger on Alerts
        /// </summary>
        public static TriggersOn Alerts { get; } = new TriggersOn("Alerts");

        public static bool operator ==(TriggersOn left, TriggersOn right) => left.Equals(right);
        public static bool operator !=(TriggersOn left, TriggersOn right) => !left.Equals(right);

        public static explicit operator string(TriggersOn value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggersOn other && Equals(other);
        public bool Equals(TriggersOn other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TriggersWhen : IEquatable<TriggersWhen>
    {
        private readonly string _value;

        private TriggersWhen(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Trigger on created objects
        /// </summary>
        public static TriggersWhen Created { get; } = new TriggersWhen("Created");
        /// <summary>
        /// Trigger on updated objects
        /// </summary>
        public static TriggersWhen Updated { get; } = new TriggersWhen("Updated");

        public static bool operator ==(TriggersWhen left, TriggersWhen right) => left.Equals(right);
        public static bool operator !=(TriggersWhen left, TriggersWhen right) => !left.Equals(right);

        public static explicit operator string(TriggersWhen value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggersWhen other && Equals(other);
        public bool Equals(TriggersWhen other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data source that enriched by ueba.
    /// </summary>
    [EnumType]
    public readonly struct UebaDataSources : IEquatable<UebaDataSources>
    {
        private readonly string _value;

        private UebaDataSources(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UebaDataSources AuditLogs { get; } = new UebaDataSources("AuditLogs");
        public static UebaDataSources AzureActivity { get; } = new UebaDataSources("AzureActivity");
        public static UebaDataSources SecurityEvent { get; } = new UebaDataSources("SecurityEvent");
        public static UebaDataSources SigninLogs { get; } = new UebaDataSources("SigninLogs");

        public static bool operator ==(UebaDataSources left, UebaDataSources right) => left.Equals(right);
        public static bool operator !=(UebaDataSources left, UebaDataSources right) => !left.Equals(right);

        public static explicit operator string(UebaDataSources value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UebaDataSources other && Equals(other);
        public bool Equals(UebaDataSources other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The version number associated with the source control
    /// </summary>
    [EnumType]
    public readonly struct Version : IEquatable<Version>
    {
        private readonly string _value;

        private Version(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Version V1 { get; } = new Version("V1");
        public static Version V2 { get; } = new Version("V2");

        public static bool operator ==(Version left, Version right) => left.Equals(right);
        public static bool operator !=(Version left, Version right) => !left.Equals(right);

        public static explicit operator string(Version value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Version other && Equals(other);
        public bool Equals(Version other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
