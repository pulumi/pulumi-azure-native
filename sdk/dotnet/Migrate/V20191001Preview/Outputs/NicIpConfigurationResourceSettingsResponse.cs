// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Migrate.V20191001Preview.Outputs
{

    [OutputType]
    public sealed class NicIpConfigurationResourceSettingsResponse
    {
        /// <summary>
        /// Gets or sets the references of the load balancer backend address pools.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancerBackendAddressPoolReferenceResponse> LoadBalancerBackendAddressPools;
        /// <summary>
        /// Gets or sets the IP configuration name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Gets or sets a value indicating whether this IP configuration is the primary.
        /// </summary>
        public readonly bool? Primary;
        /// <summary>
        /// Gets or sets the private IP address of the network interface IP Configuration.
        /// </summary>
        public readonly string? PrivateIpAddress;
        /// <summary>
        /// Gets or sets the private IP address allocation method.
        /// </summary>
        public readonly string? PrivateIpAllocationMethod;
        /// <summary>
        /// Defines reference to subnet.
        /// </summary>
        public readonly Outputs.SubnetReferenceResponse? Subnet;

        [OutputConstructor]
        private NicIpConfigurationResourceSettingsResponse(
            ImmutableArray<Outputs.LoadBalancerBackendAddressPoolReferenceResponse> loadBalancerBackendAddressPools,

            string? name,

            bool? primary,

            string? privateIpAddress,

            string? privateIpAllocationMethod,

            Outputs.SubnetReferenceResponse? subnet)
        {
            LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            Name = name;
            Primary = primary;
            PrivateIpAddress = privateIpAddress;
            PrivateIpAllocationMethod = privateIpAllocationMethod;
            Subnet = subnet;
        }
    }
}
