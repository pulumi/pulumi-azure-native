// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Migrate.V20230909Preview
{
    /// <summary>
    /// Assessment sizing criterion.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentSizingCriterion : IEquatable<AssessmentSizingCriterion>
    {
        private readonly string _value;

        private AssessmentSizingCriterion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Performance Data based Sizing.
        /// </summary>
        public static AssessmentSizingCriterion PerformanceBased { get; } = new AssessmentSizingCriterion("PerformanceBased");
        /// <summary>
        /// As On Premises or Static Data based Sizing.
        /// </summary>
        public static AssessmentSizingCriterion AsOnPremises { get; } = new AssessmentSizingCriterion("AsOnPremises");

        public static bool operator ==(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => left.Equals(right);
        public static bool operator !=(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => !left.Equals(right);

        public static explicit operator string(AssessmentSizingCriterion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentSizingCriterion other && Equals(other);
        public bool Equals(AssessmentSizingCriterion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Assessment type of the assessment.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentType : IEquatable<AssessmentType>
    {
        private readonly string _value;

        private AssessmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentType Unknown { get; } = new AssessmentType("Unknown");
        public static AssessmentType MachineAssessment { get; } = new AssessmentType("MachineAssessment");
        public static AssessmentType AvsAssessment { get; } = new AssessmentType("AvsAssessment");
        public static AssessmentType SqlAssessment { get; } = new AssessmentType("SqlAssessment");
        public static AssessmentType WebAppAssessment { get; } = new AssessmentType("WebAppAssessment");

        public static bool operator ==(AssessmentType left, AssessmentType right) => left.Equals(right);
        public static bool operator !=(AssessmentType left, AssessmentType right) => !left.Equals(right);

        public static explicit operator string(AssessmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentType other && Equals(other);
        public bool Equals(AssessmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user preference indicating intent of async commit mode.
    /// </summary>
    [EnumType]
    public readonly struct AsyncCommitModeIntent : IEquatable<AsyncCommitModeIntent>
    {
        private readonly string _value;

        private AsyncCommitModeIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AsyncCommitModeIntent None { get; } = new AsyncCommitModeIntent("None");
        public static AsyncCommitModeIntent HighAvailability { get; } = new AsyncCommitModeIntent("HighAvailability");
        public static AsyncCommitModeIntent DisasterRecovery { get; } = new AsyncCommitModeIntent("DisasterRecovery");

        public static bool operator ==(AsyncCommitModeIntent left, AsyncCommitModeIntent right) => left.Equals(right);
        public static bool operator !=(AsyncCommitModeIntent left, AsyncCommitModeIntent right) => !left.Equals(right);

        public static explicit operator string(AsyncCommitModeIntent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AsyncCommitModeIntent other && Equals(other);
        public bool Equals(AsyncCommitModeIntent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AVS Assessment Scenario.
    /// </summary>
    [EnumType]
    public readonly struct AvsAssessmentScenario : IEquatable<AvsAssessmentScenario>
    {
        private readonly string _value;

        private AvsAssessmentScenario(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown assessment scenario
        /// </summary>
        public static AvsAssessmentScenario Unknown { get; } = new AvsAssessmentScenario("Unknown");
        /// <summary>
        /// Create Assessment for new Avs Sddc
        /// </summary>
        public static AvsAssessmentScenario NewAvsSddc { get; } = new AvsAssessmentScenario("NewAvsSddc");
        /// <summary>
        /// Create Assessment for existing Avs Sddc
        /// </summary>
        public static AvsAssessmentScenario AvsSddcExpansion { get; } = new AvsAssessmentScenario("AvsSddcExpansion");

        public static bool operator ==(AvsAssessmentScenario left, AvsAssessmentScenario right) => left.Equals(right);
        public static bool operator !=(AvsAssessmentScenario left, AvsAssessmentScenario right) => !left.Equals(right);

        public static explicit operator string(AvsAssessmentScenario value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AvsAssessmentScenario other && Equals(other);
        public bool Equals(AvsAssessmentScenario other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AzureArc state indicates whether to include azure arc related costs in on-premises or not.
    /// </summary>
    [EnumType]
    public readonly struct AzureArcState : IEquatable<AzureArcState>
    {
        private readonly string _value;

        private AzureArcState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// AzureArc state disabled.
        /// </summary>
        public static AzureArcState Disabled { get; } = new AzureArcState("Disabled");
        /// <summary>
        /// AzureArc state enabled.
        /// </summary>
        public static AzureArcState Enabled { get; } = new AzureArcState("Enabled");
        /// <summary>
        /// AzureArc state unknown.
        /// </summary>
        public static AzureArcState Unknown { get; } = new AzureArcState("Unknown");

        public static bool operator ==(AzureArcState left, AzureArcState right) => left.Equals(right);
        public static bool operator !=(AzureArcState left, AzureArcState right) => !left.Equals(right);

        public static explicit operator string(AzureArcState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureArcState other && Equals(other);
        public bool Equals(AzureArcState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AzureAvsNodeType : IEquatable<AzureAvsNodeType>
    {
        private readonly string _value;

        private AzureAvsNodeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureAvsNodeType Unknown { get; } = new AzureAvsNodeType("Unknown");
        public static AzureAvsNodeType AV36 { get; } = new AzureAvsNodeType("AV36");
        public static AzureAvsNodeType AV36P { get; } = new AzureAvsNodeType("AV36P");
        public static AzureAvsNodeType AV52 { get; } = new AzureAvsNodeType("AV52");
        public static AzureAvsNodeType AV64 { get; } = new AzureAvsNodeType("AV64");

        public static bool operator ==(AzureAvsNodeType left, AzureAvsNodeType right) => left.Equals(right);
        public static bool operator !=(AzureAvsNodeType left, AzureAvsNodeType right) => !left.Equals(right);

        public static explicit operator string(AzureAvsNodeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureAvsNodeType other && Equals(other);
        public bool Equals(AzureAvsNodeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Currency in which prices should be reported.
    /// </summary>
    [EnumType]
    public readonly struct AzureCurrency : IEquatable<AzureCurrency>
    {
        private readonly string _value;

        private AzureCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureCurrency Unknown { get; } = new AzureCurrency("Unknown");
        public static AzureCurrency USD { get; } = new AzureCurrency("USD");
        public static AzureCurrency DKK { get; } = new AzureCurrency("DKK");
        public static AzureCurrency CAD { get; } = new AzureCurrency("CAD");
        public static AzureCurrency IDR { get; } = new AzureCurrency("IDR");
        public static AzureCurrency JPY { get; } = new AzureCurrency("JPY");
        public static AzureCurrency KRW { get; } = new AzureCurrency("KRW");
        public static AzureCurrency NZD { get; } = new AzureCurrency("NZD");
        public static AzureCurrency NOK { get; } = new AzureCurrency("NOK");
        public static AzureCurrency RUB { get; } = new AzureCurrency("RUB");
        public static AzureCurrency SAR { get; } = new AzureCurrency("SAR");
        public static AzureCurrency ZAR { get; } = new AzureCurrency("ZAR");
        public static AzureCurrency SEK { get; } = new AzureCurrency("SEK");
        public static AzureCurrency TRY { get; } = new AzureCurrency("TRY");
        public static AzureCurrency GBP { get; } = new AzureCurrency("GBP");
        public static AzureCurrency MXN { get; } = new AzureCurrency("MXN");
        public static AzureCurrency MYR { get; } = new AzureCurrency("MYR");
        public static AzureCurrency INR { get; } = new AzureCurrency("INR");
        public static AzureCurrency HKD { get; } = new AzureCurrency("HKD");
        public static AzureCurrency BRL { get; } = new AzureCurrency("BRL");
        public static AzureCurrency TWD { get; } = new AzureCurrency("TWD");
        public static AzureCurrency EUR { get; } = new AzureCurrency("EUR");
        public static AzureCurrency CHF { get; } = new AzureCurrency("CHF");
        public static AzureCurrency ARS { get; } = new AzureCurrency("ARS");
        public static AzureCurrency AUD { get; } = new AzureCurrency("AUD");
        public static AzureCurrency CNY { get; } = new AzureCurrency("CNY");

        public static bool operator ==(AzureCurrency left, AzureCurrency right) => left.Equals(right);
        public static bool operator !=(AzureCurrency left, AzureCurrency right) => !left.Equals(right);

        public static explicit operator string(AzureCurrency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureCurrency other && Equals(other);
        public bool Equals(AzureCurrency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AzureDiskType : IEquatable<AzureDiskType>
    {
        private readonly string _value;

        private AzureDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureDiskType Unknown { get; } = new AzureDiskType("Unknown");
        public static AzureDiskType Standard { get; } = new AzureDiskType("Standard");
        public static AzureDiskType StandardSSD { get; } = new AzureDiskType("StandardSSD");
        public static AzureDiskType Premium { get; } = new AzureDiskType("Premium");
        public static AzureDiskType StandardOrPremium { get; } = new AzureDiskType("StandardOrPremium");
        public static AzureDiskType Ultra { get; } = new AzureDiskType("Ultra");
        public static AzureDiskType PremiumV2 { get; } = new AzureDiskType("PremiumV2");

        public static bool operator ==(AzureDiskType left, AzureDiskType right) => left.Equals(right);
        public static bool operator !=(AzureDiskType left, AzureDiskType right) => !left.Equals(right);

        public static explicit operator string(AzureDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureDiskType other && Equals(other);
        public bool Equals(AzureDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets environment type.
    /// </summary>
    [EnumType]
    public readonly struct AzureEnvironmentType : IEquatable<AzureEnvironmentType>
    {
        private readonly string _value;

        private AzureEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown. Indicates missing data.
        /// </summary>
        public static AzureEnvironmentType Unknown { get; } = new AzureEnvironmentType("Unknown");
        /// <summary>
        /// Development or Test Environment.
        /// </summary>
        public static AzureEnvironmentType DevTest { get; } = new AzureEnvironmentType("DevTest");
        /// <summary>
        /// Production Environment.
        /// </summary>
        public static AzureEnvironmentType Production { get; } = new AzureEnvironmentType("Production");

        public static bool operator ==(AzureEnvironmentType left, AzureEnvironmentType right) => left.Equals(right);
        public static bool operator !=(AzureEnvironmentType left, AzureEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(AzureEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureEnvironmentType other && Equals(other);
        public bool Equals(AzureEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the user configurable setting to display the linux azure hybrid use
    /// benefit.
    /// </summary>
    [EnumType]
    public readonly struct AzureHybridUseBenefit : IEquatable<AzureHybridUseBenefit>
    {
        private readonly string _value;

        private AzureHybridUseBenefit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureHybridUseBenefit Unknown { get; } = new AzureHybridUseBenefit("Unknown");
        public static AzureHybridUseBenefit Yes { get; } = new AzureHybridUseBenefit("Yes");
        public static AzureHybridUseBenefit No { get; } = new AzureHybridUseBenefit("No");

        public static bool operator ==(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => left.Equals(right);
        public static bool operator !=(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => !left.Equals(right);

        public static explicit operator string(AzureHybridUseBenefit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureHybridUseBenefit other && Equals(other);
        public bool Equals(AzureHybridUseBenefit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the Azure Location or Azure region where to which the machines
    /// will be migrated.
    /// </summary>
    [EnumType]
    public readonly struct AzureLocation : IEquatable<AzureLocation>
    {
        private readonly string _value;

        private AzureLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureLocation Unknown { get; } = new AzureLocation("Unknown");
        public static AzureLocation EastAsia { get; } = new AzureLocation("EastAsia");
        public static AzureLocation SoutheastAsia { get; } = new AzureLocation("SoutheastAsia");
        public static AzureLocation AustraliaEast { get; } = new AzureLocation("AustraliaEast");
        public static AzureLocation AustraliaSoutheast { get; } = new AzureLocation("AustraliaSoutheast");
        public static AzureLocation BrazilSouth { get; } = new AzureLocation("BrazilSouth");
        public static AzureLocation CanadaCentral { get; } = new AzureLocation("CanadaCentral");
        public static AzureLocation CanadaEast { get; } = new AzureLocation("CanadaEast");
        public static AzureLocation WestEurope { get; } = new AzureLocation("WestEurope");
        public static AzureLocation NorthEurope { get; } = new AzureLocation("NorthEurope");
        public static AzureLocation CentralIndia { get; } = new AzureLocation("CentralIndia");
        public static AzureLocation SouthIndia { get; } = new AzureLocation("SouthIndia");
        public static AzureLocation WestIndia { get; } = new AzureLocation("WestIndia");
        public static AzureLocation JapanEast { get; } = new AzureLocation("JapanEast");
        public static AzureLocation JapanWest { get; } = new AzureLocation("JapanWest");
        public static AzureLocation KoreaCentral { get; } = new AzureLocation("KoreaCentral");
        public static AzureLocation KoreaSouth { get; } = new AzureLocation("KoreaSouth");
        public static AzureLocation UkWest { get; } = new AzureLocation("UkWest");
        public static AzureLocation UkSouth { get; } = new AzureLocation("UkSouth");
        public static AzureLocation NorthCentralUs { get; } = new AzureLocation("NorthCentralUs");
        public static AzureLocation EastUs { get; } = new AzureLocation("EastUs");
        public static AzureLocation WestUs2 { get; } = new AzureLocation("WestUs2");
        public static AzureLocation SouthCentralUs { get; } = new AzureLocation("SouthCentralUs");
        public static AzureLocation CentralUs { get; } = new AzureLocation("CentralUs");
        public static AzureLocation EastUs2 { get; } = new AzureLocation("EastUs2");
        public static AzureLocation WestUs { get; } = new AzureLocation("WestUs");
        public static AzureLocation WestCentralUs { get; } = new AzureLocation("WestCentralUs");
        public static AzureLocation GermanyCentral { get; } = new AzureLocation("GermanyCentral");
        public static AzureLocation GermanyNortheast { get; } = new AzureLocation("GermanyNortheast");
        public static AzureLocation ChinaNorth { get; } = new AzureLocation("ChinaNorth");
        public static AzureLocation ChinaEast { get; } = new AzureLocation("ChinaEast");
        public static AzureLocation USGovArizona { get; } = new AzureLocation("USGovArizona");
        public static AzureLocation USGovTexas { get; } = new AzureLocation("USGovTexas");
        public static AzureLocation USGovIowa { get; } = new AzureLocation("USGovIowa");
        public static AzureLocation USGovVirginia { get; } = new AzureLocation("USGovVirginia");
        public static AzureLocation USDoDCentral { get; } = new AzureLocation("USDoDCentral");
        public static AzureLocation USDoDEast { get; } = new AzureLocation("USDoDEast");
        public static AzureLocation FranceCentral { get; } = new AzureLocation("FranceCentral");
        public static AzureLocation AustraliaCentral { get; } = new AzureLocation("AustraliaCentral");
        public static AzureLocation SouthAfricaNorth { get; } = new AzureLocation("SouthAfricaNorth");
        public static AzureLocation FranceSouth { get; } = new AzureLocation("FranceSouth");
        public static AzureLocation AustraliaCentral2 { get; } = new AzureLocation("AustraliaCentral2");
        public static AzureLocation SouthAfricaWest { get; } = new AzureLocation("SouthAfricaWest");
        public static AzureLocation GermanyNorth { get; } = new AzureLocation("GermanyNorth");
        public static AzureLocation GermanyWestCentral { get; } = new AzureLocation("GermanyWestCentral");
        public static AzureLocation NorwayEast { get; } = new AzureLocation("NorwayEast");
        public static AzureLocation NorwayWest { get; } = new AzureLocation("NorwayWest");
        public static AzureLocation ChinaEast2 { get; } = new AzureLocation("ChinaEast2");
        public static AzureLocation ChinaNorth2 { get; } = new AzureLocation("ChinaNorth2");
        public static AzureLocation SwitzerlandNorth { get; } = new AzureLocation("SwitzerlandNorth");
        public static AzureLocation SwitzerlandWest { get; } = new AzureLocation("SwitzerlandWest");
        public static AzureLocation UAENorth { get; } = new AzureLocation("UAENorth");
        public static AzureLocation UAECentral { get; } = new AzureLocation("UAECentral");
        public static AzureLocation UsNatEast { get; } = new AzureLocation("UsNatEast");
        public static AzureLocation UsNatWest { get; } = new AzureLocation("UsNatWest");
        public static AzureLocation UsSecEast { get; } = new AzureLocation("UsSecEast");
        public static AzureLocation UsSecCentral { get; } = new AzureLocation("UsSecCentral");
        public static AzureLocation UsSecWest { get; } = new AzureLocation("UsSecWest");
        public static AzureLocation SwedenCentral { get; } = new AzureLocation("SwedenCentral");
        public static AzureLocation QatarCentral { get; } = new AzureLocation("QatarCentral");

        public static bool operator ==(AzureLocation left, AzureLocation right) => left.Equals(right);
        public static bool operator !=(AzureLocation left, AzureLocation right) => !left.Equals(right);

        public static explicit operator string(AzureLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureLocation other && Equals(other);
        public bool Equals(AzureLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure Offer Code.
    /// </summary>
    [EnumType]
    public readonly struct AzureOfferCode : IEquatable<AzureOfferCode>
    {
        private readonly string _value;

        private AzureOfferCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureOfferCode Unknown { get; } = new AzureOfferCode("Unknown");
        public static AzureOfferCode Msazr0003P { get; } = new AzureOfferCode("MSAZR0003P");
        public static AzureOfferCode Msazr0044P { get; } = new AzureOfferCode("MSAZR0044P");
        public static AzureOfferCode Msazr0059P { get; } = new AzureOfferCode("MSAZR0059P");
        public static AzureOfferCode Msazr0060P { get; } = new AzureOfferCode("MSAZR0060P");
        public static AzureOfferCode Msazr0062P { get; } = new AzureOfferCode("MSAZR0062P");
        public static AzureOfferCode Msazr0063P { get; } = new AzureOfferCode("MSAZR0063P");
        public static AzureOfferCode Msazr0064P { get; } = new AzureOfferCode("MSAZR0064P");
        public static AzureOfferCode Msazr0029P { get; } = new AzureOfferCode("MSAZR0029P");
        public static AzureOfferCode Msazr0022P { get; } = new AzureOfferCode("MSAZR0022P");
        public static AzureOfferCode Msazr0023P { get; } = new AzureOfferCode("MSAZR0023P");
        public static AzureOfferCode Msazr0148P { get; } = new AzureOfferCode("MSAZR0148P");
        public static AzureOfferCode Msazr0025P { get; } = new AzureOfferCode("MSAZR0025P");
        public static AzureOfferCode Msazr0036P { get; } = new AzureOfferCode("MSAZR0036P");
        public static AzureOfferCode Msazr0120P { get; } = new AzureOfferCode("MSAZR0120P");
        public static AzureOfferCode Msazr0121P { get; } = new AzureOfferCode("MSAZR0121P");
        public static AzureOfferCode Msazr0122P { get; } = new AzureOfferCode("MSAZR0122P");
        public static AzureOfferCode Msazr0123P { get; } = new AzureOfferCode("MSAZR0123P");
        public static AzureOfferCode Msazr0124P { get; } = new AzureOfferCode("MSAZR0124P");
        public static AzureOfferCode Msazr0125P { get; } = new AzureOfferCode("MSAZR0125P");
        public static AzureOfferCode Msazr0126P { get; } = new AzureOfferCode("MSAZR0126P");
        public static AzureOfferCode Msazr0127P { get; } = new AzureOfferCode("MSAZR0127P");
        public static AzureOfferCode Msazr0128P { get; } = new AzureOfferCode("MSAZR0128P");
        public static AzureOfferCode Msazr0129P { get; } = new AzureOfferCode("MSAZR0129P");
        public static AzureOfferCode Msazr0130P { get; } = new AzureOfferCode("MSAZR0130P");
        public static AzureOfferCode Msazr0111P { get; } = new AzureOfferCode("MSAZR0111P");
        public static AzureOfferCode Msazr0144P { get; } = new AzureOfferCode("MSAZR0144P");
        public static AzureOfferCode Msazr0149P { get; } = new AzureOfferCode("MSAZR0149P");
        public static AzureOfferCode Msmcazr0044P { get; } = new AzureOfferCode("MSMCAZR0044P");
        public static AzureOfferCode Msmcazr0059P { get; } = new AzureOfferCode("MSMCAZR0059P");
        public static AzureOfferCode Msmcazr0060P { get; } = new AzureOfferCode("MSMCAZR0060P");
        public static AzureOfferCode Msmcazr0063P { get; } = new AzureOfferCode("MSMCAZR0063P");
        public static AzureOfferCode Msmcazr0120P { get; } = new AzureOfferCode("MSMCAZR0120P");
        public static AzureOfferCode Msmcazr0121P { get; } = new AzureOfferCode("MSMCAZR0121P");
        public static AzureOfferCode Msmcazr0125P { get; } = new AzureOfferCode("MSMCAZR0125P");
        public static AzureOfferCode Msmcazr0128P { get; } = new AzureOfferCode("MSMCAZR0128P");
        public static AzureOfferCode Msazrde0003P { get; } = new AzureOfferCode("MSAZRDE0003P");
        public static AzureOfferCode Msazrde0044P { get; } = new AzureOfferCode("MSAZRDE0044P");
        public static AzureOfferCode Msazrusgov0003P { get; } = new AzureOfferCode("MSAZRUSGOV0003P");
        public static AzureOfferCode EA { get; } = new AzureOfferCode("EA");
        public static AzureOfferCode Msazr0243P { get; } = new AzureOfferCode("MSAZR0243P");
        public static AzureOfferCode SavingsPlan1Year { get; } = new AzureOfferCode("SavingsPlan1Year");
        public static AzureOfferCode SavingsPlan3Year { get; } = new AzureOfferCode("SavingsPlan3Year");

        public static bool operator ==(AzureOfferCode left, AzureOfferCode right) => left.Equals(right);
        public static bool operator !=(AzureOfferCode left, AzureOfferCode right) => !left.Equals(right);

        public static explicit operator string(AzureOfferCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureOfferCode other && Equals(other);
        public bool Equals(AzureOfferCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets Azure Pricing Tier - Free, Basic, etc.
    /// </summary>
    [EnumType]
    public readonly struct AzurePricingTier : IEquatable<AzurePricingTier>
    {
        private readonly string _value;

        private AzurePricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzurePricingTier Standard { get; } = new AzurePricingTier("Standard");
        public static AzurePricingTier Basic { get; } = new AzurePricingTier("Basic");

        public static bool operator ==(AzurePricingTier left, AzurePricingTier right) => left.Equals(right);
        public static bool operator !=(AzurePricingTier left, AzurePricingTier right) => !left.Equals(right);

        public static explicit operator string(AzurePricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzurePricingTier other && Equals(other);
        public bool Equals(AzurePricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Reserved instance.
    /// </summary>
    [EnumType]
    public readonly struct AzureReservedInstance : IEquatable<AzureReservedInstance>
    {
        private readonly string _value;

        private AzureReservedInstance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureReservedInstance None { get; } = new AzureReservedInstance("None");
        public static AzureReservedInstance RI1Year { get; } = new AzureReservedInstance("RI1Year");
        public static AzureReservedInstance RI3Year { get; } = new AzureReservedInstance("RI3Year");

        public static bool operator ==(AzureReservedInstance left, AzureReservedInstance right) => left.Equals(right);
        public static bool operator !=(AzureReservedInstance left, AzureReservedInstance right) => !left.Equals(right);

        public static explicit operator string(AzureReservedInstance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureReservedInstance other && Equals(other);
        public bool Equals(AzureReservedInstance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets a value indicating azure security offering type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSecurityOfferingType : IEquatable<AzureSecurityOfferingType>
    {
        private readonly string _value;

        private AzureSecurityOfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSecurityOfferingType NO { get; } = new AzureSecurityOfferingType("NO");
        public static AzureSecurityOfferingType MDC { get; } = new AzureSecurityOfferingType("MDC");

        public static bool operator ==(AzureSecurityOfferingType left, AzureSecurityOfferingType right) => left.Equals(right);
        public static bool operator !=(AzureSecurityOfferingType left, AzureSecurityOfferingType right) => !left.Equals(right);

        public static explicit operator string(AzureSecurityOfferingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSecurityOfferingType other && Equals(other);
        public bool Equals(AzureSecurityOfferingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure PAAS SQL instance type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlDataBaseType : IEquatable<AzureSqlDataBaseType>
    {
        private readonly string _value;

        private AzureSqlDataBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSqlDataBaseType Unknown { get; } = new AzureSqlDataBaseType("Unknown");
        public static AzureSqlDataBaseType Automatic { get; } = new AzureSqlDataBaseType("Automatic");
        public static AzureSqlDataBaseType SingleDatabase { get; } = new AzureSqlDataBaseType("SingleDatabase");
        public static AzureSqlDataBaseType ElasticPool { get; } = new AzureSqlDataBaseType("ElasticPool");

        public static bool operator ==(AzureSqlDataBaseType left, AzureSqlDataBaseType right) => left.Equals(right);
        public static bool operator !=(AzureSqlDataBaseType left, AzureSqlDataBaseType right) => !left.Equals(right);

        public static explicit operator string(AzureSqlDataBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlDataBaseType other && Equals(other);
        public bool Equals(AzureSqlDataBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure PAAS SQL instance type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlInstanceType : IEquatable<AzureSqlInstanceType>
    {
        private readonly string _value;

        private AzureSqlInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSqlInstanceType Unknown { get; } = new AzureSqlInstanceType("Unknown");
        public static AzureSqlInstanceType Automatic { get; } = new AzureSqlInstanceType("Automatic");
        public static AzureSqlInstanceType SingleInstance { get; } = new AzureSqlInstanceType("SingleInstance");
        public static AzureSqlInstanceType InstancePools { get; } = new AzureSqlInstanceType("InstancePools");

        public static bool operator ==(AzureSqlInstanceType left, AzureSqlInstanceType right) => left.Equals(right);
        public static bool operator !=(AzureSqlInstanceType left, AzureSqlInstanceType right) => !left.Equals(right);

        public static explicit operator string(AzureSqlInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlInstanceType other && Equals(other);
        public bool Equals(AzureSqlInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL purchase model.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlPurchaseModel : IEquatable<AzureSqlPurchaseModel>
    {
        private readonly string _value;

        private AzureSqlPurchaseModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSqlPurchaseModel Unknown { get; } = new AzureSqlPurchaseModel("Unknown");
        public static AzureSqlPurchaseModel VCore { get; } = new AzureSqlPurchaseModel("VCore");
        public static AzureSqlPurchaseModel DTU { get; } = new AzureSqlPurchaseModel("DTU");

        public static bool operator ==(AzureSqlPurchaseModel left, AzureSqlPurchaseModel right) => left.Equals(right);
        public static bool operator !=(AzureSqlPurchaseModel left, AzureSqlPurchaseModel right) => !left.Equals(right);

        public static explicit operator string(AzureSqlPurchaseModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlPurchaseModel other && Equals(other);
        public bool Equals(AzureSqlPurchaseModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL service tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlServiceTier : IEquatable<AzureSqlServiceTier>
    {
        private readonly string _value;

        private AzureSqlServiceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSqlServiceTier Unknown { get; } = new AzureSqlServiceTier("Unknown");
        public static AzureSqlServiceTier Automatic { get; } = new AzureSqlServiceTier("Automatic");
        public static AzureSqlServiceTier GeneralPurpose { get; } = new AzureSqlServiceTier("GeneralPurpose");
        public static AzureSqlServiceTier BusinessCritical { get; } = new AzureSqlServiceTier("BusinessCritical");
        public static AzureSqlServiceTier HyperScale { get; } = new AzureSqlServiceTier("HyperScale");

        public static bool operator ==(AzureSqlServiceTier left, AzureSqlServiceTier right) => left.Equals(right);
        public static bool operator !=(AzureSqlServiceTier left, AzureSqlServiceTier right) => !left.Equals(right);

        public static explicit operator string(AzureSqlServiceTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlServiceTier other && Equals(other);
        public bool Equals(AzureSqlServiceTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
    /// </summary>
    [EnumType]
    public readonly struct AzureStorageRedundancy : IEquatable<AzureStorageRedundancy>
    {
        private readonly string _value;

        private AzureStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureStorageRedundancy Unknown { get; } = new AzureStorageRedundancy("Unknown");
        public static AzureStorageRedundancy LocallyRedundant { get; } = new AzureStorageRedundancy("LocallyRedundant");
        public static AzureStorageRedundancy ZoneRedundant { get; } = new AzureStorageRedundancy("ZoneRedundant");
        public static AzureStorageRedundancy GeoRedundant { get; } = new AzureStorageRedundancy("GeoRedundant");
        public static AzureStorageRedundancy ReadAccessGeoRedundant { get; } = new AzureStorageRedundancy("ReadAccessGeoRedundant");

        public static bool operator ==(AzureStorageRedundancy left, AzureStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(AzureStorageRedundancy left, AzureStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(AzureStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureStorageRedundancy other && Equals(other);
        public bool Equals(AzureStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets azure VM category.
    /// </summary>
    [EnumType]
    public readonly struct AzureVmCategory : IEquatable<AzureVmCategory>
    {
        private readonly string _value;

        private AzureVmCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates All categories of VM.
        /// </summary>
        public static AzureVmCategory All { get; } = new AzureVmCategory("All");
        /// <summary>
        /// Compute Optimized.
        /// </summary>
        public static AzureVmCategory ComputeOptimized { get; } = new AzureVmCategory("ComputeOptimized");
        /// <summary>
        /// General Purpose.
        /// </summary>
        public static AzureVmCategory GeneralPurpose { get; } = new AzureVmCategory("GeneralPurpose");
        /// <summary>
        /// GPU Optimized.
        /// </summary>
        public static AzureVmCategory GpuOptimized { get; } = new AzureVmCategory("GpuOptimized");
        /// <summary>
        /// High Performance Compute.
        /// </summary>
        public static AzureVmCategory HighPerformanceCompute { get; } = new AzureVmCategory("HighPerformanceCompute");
        /// <summary>
        /// Memory Optimized.
        /// </summary>
        public static AzureVmCategory MemoryOptimized { get; } = new AzureVmCategory("MemoryOptimized");
        /// <summary>
        /// Storage Optimized.
        /// </summary>
        public static AzureVmCategory StorageOptimized { get; } = new AzureVmCategory("StorageOptimized");
        /// <summary>
        /// Isolated VM.
        /// </summary>
        public static AzureVmCategory Isolated { get; } = new AzureVmCategory("Isolated");

        public static bool operator ==(AzureVmCategory left, AzureVmCategory right) => left.Equals(right);
        public static bool operator !=(AzureVmCategory left, AzureVmCategory right) => !left.Equals(right);

        public static explicit operator string(AzureVmCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureVmCategory other && Equals(other);
        public bool Equals(AzureVmCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AzureVmFamily : IEquatable<AzureVmFamily>
    {
        private readonly string _value;

        private AzureVmFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureVmFamily Unknown { get; } = new AzureVmFamily("Unknown");
        public static AzureVmFamily BasicA0A4 { get; } = new AzureVmFamily("Basic_A0_A4");
        public static AzureVmFamily StandardA0A7 { get; } = new AzureVmFamily("Standard_A0_A7");
        public static AzureVmFamily StandardA8A11 { get; } = new AzureVmFamily("Standard_A8_A11");
        public static AzureVmFamily Av2Series { get; } = new AzureVmFamily("Av2_series");
        public static AzureVmFamily DSeries { get; } = new AzureVmFamily("D_series");
        public static AzureVmFamily Dv2Series { get; } = new AzureVmFamily("Dv2_series");
        public static AzureVmFamily DSSeries { get; } = new AzureVmFamily("DS_series");
        public static AzureVmFamily DSv2Series { get; } = new AzureVmFamily("DSv2_series");
        public static AzureVmFamily FSeries { get; } = new AzureVmFamily("F_series");
        public static AzureVmFamily FsSeries { get; } = new AzureVmFamily("Fs_series");
        public static AzureVmFamily GSeries { get; } = new AzureVmFamily("G_series");
        public static AzureVmFamily GSSeries { get; } = new AzureVmFamily("GS_series");
        public static AzureVmFamily HSeries { get; } = new AzureVmFamily("H_series");
        public static AzureVmFamily LsSeries { get; } = new AzureVmFamily("Ls_series");
        public static AzureVmFamily Dsv3Series { get; } = new AzureVmFamily("Dsv3_series");
        public static AzureVmFamily Dv3Series { get; } = new AzureVmFamily("Dv3_series");
        public static AzureVmFamily Fsv2Series { get; } = new AzureVmFamily("Fsv2_series");
        public static AzureVmFamily Ev3Series { get; } = new AzureVmFamily("Ev3_series");
        public static AzureVmFamily Esv3Series { get; } = new AzureVmFamily("Esv3_series");
        public static AzureVmFamily MSeries { get; } = new AzureVmFamily("M_series");
        public static AzureVmFamily DCSeries { get; } = new AzureVmFamily("DC_Series");
        public static AzureVmFamily Lsv2Series { get; } = new AzureVmFamily("Lsv2_series");
        public static AzureVmFamily Ev4Series { get; } = new AzureVmFamily("Ev4_series");
        public static AzureVmFamily Esv4Series { get; } = new AzureVmFamily("Esv4_series");
        public static AzureVmFamily Edv4Series { get; } = new AzureVmFamily("Edv4_series");
        public static AzureVmFamily Edsv4Series { get; } = new AzureVmFamily("Edsv4_series");
        public static AzureVmFamily Dv4Series { get; } = new AzureVmFamily("Dv4_series");
        public static AzureVmFamily Dsv4Series { get; } = new AzureVmFamily("Dsv4_series");
        public static AzureVmFamily Ddv4Series { get; } = new AzureVmFamily("Ddv4_series");
        public static AzureVmFamily Ddsv4Series { get; } = new AzureVmFamily("Ddsv4_series");
        public static AzureVmFamily Easv4Series { get; } = new AzureVmFamily("Easv4_series");
        public static AzureVmFamily Dasv4Series { get; } = new AzureVmFamily("Dasv4_series");
        public static AzureVmFamily Mv2Series { get; } = new AzureVmFamily("Mv2_series");
        public static AzureVmFamily Eav4Series { get; } = new AzureVmFamily("Eav4_series");
        public static AzureVmFamily Dav4Series { get; } = new AzureVmFamily("Dav4_series");
        public static AzureVmFamily Msv2Series { get; } = new AzureVmFamily("Msv2_series");
        public static AzureVmFamily Mdsv2Series { get; } = new AzureVmFamily("Mdsv2_series");
        public static AzureVmFamily Dv5Series { get; } = new AzureVmFamily("Dv5_series");
        public static AzureVmFamily Dsv5Series { get; } = new AzureVmFamily("Dsv5_series");
        public static AzureVmFamily Ddv5Series { get; } = new AzureVmFamily("Ddv5_series");
        public static AzureVmFamily Ddsv5Series { get; } = new AzureVmFamily("Ddsv5_series");
        public static AzureVmFamily Dasv5Series { get; } = new AzureVmFamily("Dasv5_series");
        public static AzureVmFamily Dadsv5Series { get; } = new AzureVmFamily("Dadsv5_series");
        public static AzureVmFamily Ev5Series { get; } = new AzureVmFamily("Ev5_series");
        public static AzureVmFamily Esv5Series { get; } = new AzureVmFamily("Esv5_series");
        public static AzureVmFamily Edv5Series { get; } = new AzureVmFamily("Edv5_series");
        public static AzureVmFamily Edsv5Series { get; } = new AzureVmFamily("Edsv5_series");
        public static AzureVmFamily Easv5Series { get; } = new AzureVmFamily("Easv5_series");
        public static AzureVmFamily Eadsv5Series { get; } = new AzureVmFamily("Eadsv5_series");
        public static AzureVmFamily Ebsv5Series { get; } = new AzureVmFamily("Ebsv5_series");
        public static AzureVmFamily Ebdsv5Series { get; } = new AzureVmFamily("Ebdsv5_series");

        public static bool operator ==(AzureVmFamily left, AzureVmFamily right) => left.Equals(right);
        public static bool operator !=(AzureVmFamily left, AzureVmFamily right) => !left.Equals(right);

        public static explicit operator string(AzureVmFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureVmFamily other && Equals(other);
        public bool Equals(AzureVmFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Business case Currency.
    /// </summary>
    [EnumType]
    public readonly struct BusinessCaseCurrency : IEquatable<BusinessCaseCurrency>
    {
        private readonly string _value;

        private BusinessCaseCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Currency Unknown.
        /// </summary>
        public static BusinessCaseCurrency Unknown { get; } = new BusinessCaseCurrency("Unknown");
        /// <summary>
        /// Currency USD.
        /// </summary>
        public static BusinessCaseCurrency USD { get; } = new BusinessCaseCurrency("USD");
        /// <summary>
        /// Currency DKK.
        /// </summary>
        public static BusinessCaseCurrency DKK { get; } = new BusinessCaseCurrency("DKK");
        /// <summary>
        /// Currency CAD.
        /// </summary>
        public static BusinessCaseCurrency CAD { get; } = new BusinessCaseCurrency("CAD");
        /// <summary>
        /// Currency IDR.
        /// </summary>
        public static BusinessCaseCurrency IDR { get; } = new BusinessCaseCurrency("IDR");
        /// <summary>
        /// Currency JPY.
        /// </summary>
        public static BusinessCaseCurrency JPY { get; } = new BusinessCaseCurrency("JPY");
        /// <summary>
        /// Currency KRW.
        /// </summary>
        public static BusinessCaseCurrency KRW { get; } = new BusinessCaseCurrency("KRW");
        /// <summary>
        /// Currency NZD.
        /// </summary>
        public static BusinessCaseCurrency NZD { get; } = new BusinessCaseCurrency("NZD");
        /// <summary>
        /// Currency NOK.
        /// </summary>
        public static BusinessCaseCurrency NOK { get; } = new BusinessCaseCurrency("NOK");
        /// <summary>
        /// Currency RUB.
        /// </summary>
        public static BusinessCaseCurrency RUB { get; } = new BusinessCaseCurrency("RUB");
        /// <summary>
        /// Currency SAR.
        /// </summary>
        public static BusinessCaseCurrency SAR { get; } = new BusinessCaseCurrency("SAR");
        /// <summary>
        /// Currency ZAR.
        /// </summary>
        public static BusinessCaseCurrency ZAR { get; } = new BusinessCaseCurrency("ZAR");
        /// <summary>
        /// Currency SEK.
        /// </summary>
        public static BusinessCaseCurrency SEK { get; } = new BusinessCaseCurrency("SEK");
        /// <summary>
        /// Currency TRY.
        /// </summary>
        public static BusinessCaseCurrency TRY { get; } = new BusinessCaseCurrency("TRY");
        /// <summary>
        /// Currency GBP.
        /// </summary>
        public static BusinessCaseCurrency GBP { get; } = new BusinessCaseCurrency("GBP");
        /// <summary>
        /// Currency MXN.
        /// </summary>
        public static BusinessCaseCurrency MXN { get; } = new BusinessCaseCurrency("MXN");
        /// <summary>
        /// Currency MYR.
        /// </summary>
        public static BusinessCaseCurrency MYR { get; } = new BusinessCaseCurrency("MYR");
        /// <summary>
        /// Currency INR.
        /// </summary>
        public static BusinessCaseCurrency INR { get; } = new BusinessCaseCurrency("INR");
        /// <summary>
        /// Currency HKD.
        /// </summary>
        public static BusinessCaseCurrency HKD { get; } = new BusinessCaseCurrency("HKD");
        /// <summary>
        /// Currency BRL.
        /// </summary>
        public static BusinessCaseCurrency BRL { get; } = new BusinessCaseCurrency("BRL");
        /// <summary>
        /// Currency TWD.
        /// </summary>
        public static BusinessCaseCurrency TWD { get; } = new BusinessCaseCurrency("TWD");
        /// <summary>
        /// Currency EUR.
        /// </summary>
        public static BusinessCaseCurrency EUR { get; } = new BusinessCaseCurrency("EUR");
        /// <summary>
        /// Currency CHF.
        /// </summary>
        public static BusinessCaseCurrency CHF { get; } = new BusinessCaseCurrency("CHF");
        /// <summary>
        /// Currency ARS.
        /// </summary>
        public static BusinessCaseCurrency ARS { get; } = new BusinessCaseCurrency("ARS");
        /// <summary>
        /// Currency AUD.
        /// </summary>
        public static BusinessCaseCurrency AUD { get; } = new BusinessCaseCurrency("AUD");
        /// <summary>
        /// Currency CNY.
        /// </summary>
        public static BusinessCaseCurrency CNY { get; } = new BusinessCaseCurrency("CNY");

        public static bool operator ==(BusinessCaseCurrency left, BusinessCaseCurrency right) => left.Equals(right);
        public static bool operator !=(BusinessCaseCurrency left, BusinessCaseCurrency right) => !left.Equals(right);

        public static explicit operator string(BusinessCaseCurrency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BusinessCaseCurrency other && Equals(other);
        public bool Equals(BusinessCaseCurrency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL compute tier.
    /// </summary>
    [EnumType]
    public readonly struct ComputeTier : IEquatable<ComputeTier>
    {
        private readonly string _value;

        private ComputeTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ComputeTier Unknown { get; } = new ComputeTier("Unknown");
        public static ComputeTier Automatic { get; } = new ComputeTier("Automatic");
        public static ComputeTier Provisioned { get; } = new ComputeTier("Provisioned");
        public static ComputeTier Serverless { get; } = new ComputeTier("Serverless");

        public static bool operator ==(ComputeTier left, ComputeTier right) => left.Equals(right);
        public static bool operator !=(ComputeTier left, ComputeTier right) => !left.Equals(right);

        public static explicit operator string(ComputeTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ComputeTier other && Equals(other);
        public bool Equals(ComputeTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets consolidation type.
    /// </summary>
    [EnumType]
    public readonly struct ConsolidationType : IEquatable<ConsolidationType>
    {
        private readonly string _value;

        private ConsolidationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Full Consolidation.
        /// </summary>
        public static ConsolidationType Full { get; } = new ConsolidationType("Full");
        /// <summary>
        /// As On Source or On Premises Consolidation.
        /// </summary>
        public static ConsolidationType AsOnSource { get; } = new ConsolidationType("AsOnSource");

        public static bool operator ==(ConsolidationType left, ConsolidationType right) => left.Equals(right);
        public static bool operator !=(ConsolidationType left, ConsolidationType right) => !left.Equals(right);

        public static explicit operator string(ConsolidationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConsolidationType other && Equals(other);
        public bool Equals(ConsolidationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Workload discovery source.
    /// </summary>
    [EnumType]
    public readonly struct DiscoverySource : IEquatable<DiscoverySource>
    {
        private readonly string _value;

        private DiscoverySource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Discovery Source.
        /// </summary>
        public static DiscoverySource Unknown { get; } = new DiscoverySource("Unknown");
        /// <summary>
        /// Appliance Discovery Source.
        /// </summary>
        public static DiscoverySource Appliance { get; } = new DiscoverySource("Appliance");
        /// <summary>
        /// Import Discovery Source.
        /// </summary>
        public static DiscoverySource Import { get; } = new DiscoverySource("Import");

        public static bool operator ==(DiscoverySource left, DiscoverySource right) => left.Equals(right);
        public static bool operator !=(DiscoverySource left, DiscoverySource right) => !left.Equals(right);

        public static explicit operator string(DiscoverySource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoverySource other && Equals(other);
        public bool Equals(DiscoverySource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user configurable setting to display the environment type.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentType : IEquatable<EnvironmentType>
    {
        private readonly string _value;

        private EnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentType Production { get; } = new EnvironmentType("Production");
        public static EnvironmentType Test { get; } = new EnvironmentType("Test");

        public static bool operator ==(EnvironmentType left, EnvironmentType right) => left.Equals(right);
        public static bool operator !=(EnvironmentType left, EnvironmentType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentType other && Equals(other);
        public bool Equals(EnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Different External storage skus.
    /// </summary>
    [EnumType]
    public readonly struct ExternalStorageType : IEquatable<ExternalStorageType>
    {
        private readonly string _value;

        private ExternalStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates un-supported external storage.
        /// </summary>
        public static ExternalStorageType Unknown { get; } = new ExternalStorageType("Unknown");
        /// <summary>
        /// Indicates No external storage.
        /// </summary>
        public static ExternalStorageType None { get; } = new ExternalStorageType("None");
        /// <summary>
        /// ANF external storage with Standard SKU.
        /// </summary>
        public static ExternalStorageType AnfStandard { get; } = new ExternalStorageType("AnfStandard");
        /// <summary>
        /// ANF external storage with Premium SKU.
        /// </summary>
        public static ExternalStorageType AnfPremium { get; } = new ExternalStorageType("AnfPremium");
        /// <summary>
        /// ANF external storage with Ultra SKU.
        /// </summary>
        public static ExternalStorageType AnfUltra { get; } = new ExternalStorageType("AnfUltra");

        public static bool operator ==(ExternalStorageType left, ExternalStorageType right) => left.Equals(right);
        public static bool operator !=(ExternalStorageType left, ExternalStorageType right) => !left.Equals(right);

        public static explicit operator string(ExternalStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExternalStorageType other && Equals(other);
        public bool Equals(ExternalStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// FTT and RAID Level.
    /// </summary>
    [EnumType]
    public readonly struct FttAndRaidLevel : IEquatable<FttAndRaidLevel>
    {
        private readonly string _value;

        private FttAndRaidLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown FTT and RAID Level.
        /// </summary>
        public static FttAndRaidLevel Unknown { get; } = new FttAndRaidLevel("Unknown");
        /// <summary>
        /// FTT 1 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt1Raid1 { get; } = new FttAndRaidLevel("Ftt1Raid1");
        /// <summary>
        /// FTT 1 and RAID Level 5.
        /// </summary>
        public static FttAndRaidLevel Ftt1Raid5 { get; } = new FttAndRaidLevel("Ftt1Raid5");
        /// <summary>
        /// FTT 2 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt2Raid1 { get; } = new FttAndRaidLevel("Ftt2Raid1");
        /// <summary>
        /// FTT 2 and RAID Level 6.
        /// </summary>
        public static FttAndRaidLevel Ftt2Raid6 { get; } = new FttAndRaidLevel("Ftt2Raid6");
        /// <summary>
        /// FTT 3 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt3Raid1 { get; } = new FttAndRaidLevel("Ftt3Raid1");

        public static bool operator ==(FttAndRaidLevel left, FttAndRaidLevel right) => left.Equals(right);
        public static bool operator !=(FttAndRaidLevel left, FttAndRaidLevel right) => !left.Equals(right);

        public static explicit operator string(FttAndRaidLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FttAndRaidLevel other && Equals(other);
        public bool Equals(FttAndRaidLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets the group type for the assessment.
    /// </summary>
    [EnumType]
    public readonly struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        private GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupType Default { get; } = new GroupType("Default");
        public static GroupType Import { get; } = new GroupType("Import");

        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);

        public static explicit operator string(GroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupType other && Equals(other);
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// HyperV licence type.
    /// </summary>
    [EnumType]
    public readonly struct HyperVLicenseType : IEquatable<HyperVLicenseType>
    {
        private readonly string _value;

        private HyperVLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown HyperV License.
        /// </summary>
        public static HyperVLicenseType Unknown { get; } = new HyperVLicenseType("Unknown");
        /// <summary>
        /// Datacentre HyperV License.
        /// </summary>
        public static HyperVLicenseType Datacentre { get; } = new HyperVLicenseType("Datacentre");
        /// <summary>
        /// Standard HyperV License.
        /// </summary>
        public static HyperVLicenseType Standard { get; } = new HyperVLicenseType("Standard");

        public static bool operator ==(HyperVLicenseType left, HyperVLicenseType right) => left.Equals(right);
        public static bool operator !=(HyperVLicenseType left, HyperVLicenseType right) => !left.Equals(right);

        public static explicit operator string(HyperVLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HyperVLicenseType other && Equals(other);
        public bool Equals(HyperVLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets licensing program.
    /// </summary>
    [EnumType]
    public readonly struct LicensingProgram : IEquatable<LicensingProgram>
    {
        private readonly string _value;

        private LicensingProgram(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value. Indicates Pay As You Go.
        /// </summary>
        public static LicensingProgram Default { get; } = new LicensingProgram("Default");
        /// <summary>
        /// Enterprise Agreement.
        /// </summary>
        public static LicensingProgram EA { get; } = new LicensingProgram("EA");

        public static bool operator ==(LicensingProgram left, LicensingProgram right) => left.Equals(right);
        public static bool operator !=(LicensingProgram left, LicensingProgram right) => !left.Equals(right);

        public static explicit operator string(LicensingProgram value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicensingProgram other && Equals(other);
        public bool Equals(LicensingProgram other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Migration Strategy.
    /// </summary>
    [EnumType]
    public readonly struct MigrationStrategy : IEquatable<MigrationStrategy>
    {
        private readonly string _value;

        private MigrationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Migration Strategy.
        /// </summary>
        public static MigrationStrategy Unknown { get; } = new MigrationStrategy("Unknown");
        /// <summary>
        /// Optimize for cost.
        /// </summary>
        public static MigrationStrategy OptimizeForCost { get; } = new MigrationStrategy("OptimizeForCost");
        /// <summary>
        /// IaaS only.
        /// </summary>
        public static MigrationStrategy IaaSOnly { get; } = new MigrationStrategy("IaaSOnly");
        /// <summary>
        /// Optimize for PaaS.
        /// </summary>
        public static MigrationStrategy OptimizeForPaas { get; } = new MigrationStrategy("OptimizeForPaas");
        /// <summary>
        /// Avs only.
        /// </summary>
        public static MigrationStrategy AVSOnly { get; } = new MigrationStrategy("AVSOnly");

        public static bool operator ==(MigrationStrategy left, MigrationStrategy right) => left.Equals(right);
        public static bool operator !=(MigrationStrategy left, MigrationStrategy right) => !left.Equals(right);

        public static explicit operator string(MigrationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationStrategy other && Equals(other);
        public bool Equals(MigrationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user preference indicating intent of multi-subnet configuration.
    /// </summary>
    [EnumType]
    public readonly struct MultiSubnetIntent : IEquatable<MultiSubnetIntent>
    {
        private readonly string _value;

        private MultiSubnetIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MultiSubnetIntent None { get; } = new MultiSubnetIntent("None");
        public static MultiSubnetIntent HighAvailability { get; } = new MultiSubnetIntent("HighAvailability");
        public static MultiSubnetIntent DisasterRecovery { get; } = new MultiSubnetIntent("DisasterRecovery");

        public static bool operator ==(MultiSubnetIntent left, MultiSubnetIntent right) => left.Equals(right);
        public static bool operator !=(MultiSubnetIntent left, MultiSubnetIntent right) => !left.Equals(right);

        public static explicit operator string(MultiSubnetIntent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MultiSubnetIntent other && Equals(other);
        public bool Equals(MultiSubnetIntent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets SQL optimization logic.
    /// </summary>
    [EnumType]
    public readonly struct OptimizationLogic : IEquatable<OptimizationLogic>
    {
        private readonly string _value;

        private OptimizationLogic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OptimizationLogic MinimizeCost { get; } = new OptimizationLogic("MinimizeCost");
        public static OptimizationLogic ModernizeToPaaS { get; } = new OptimizationLogic("ModernizeToPaaS");
        public static OptimizationLogic ModernizeToAzureSqlMi { get; } = new OptimizationLogic("ModernizeToAzureSqlMi");
        public static OptimizationLogic ModernizeToAzureSqlDb { get; } = new OptimizationLogic("ModernizeToAzureSqlDb");

        public static bool operator ==(OptimizationLogic left, OptimizationLogic right) => left.Equals(right);
        public static bool operator !=(OptimizationLogic left, OptimizationLogic right) => !left.Equals(right);

        public static explicit operator string(OptimizationLogic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OptimizationLogic other && Equals(other);
        public bool Equals(OptimizationLogic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user configurable setting to display the azure hybrid use benefit.
    /// </summary>
    [EnumType]
    public readonly struct OsLicense : IEquatable<OsLicense>
    {
        private readonly string _value;

        private OsLicense(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OsLicense Unknown { get; } = new OsLicense("Unknown");
        public static OsLicense Yes { get; } = new OsLicense("Yes");
        public static OsLicense No { get; } = new OsLicense("No");

        public static bool operator ==(OsLicense left, OsLicense right) => left.Equals(right);
        public static bool operator !=(OsLicense left, OsLicense right) => !left.Equals(right);

        public static explicit operator string(OsLicense value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsLicense other && Equals(other);
        public bool Equals(OsLicense other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Percentile of the utilization data values to be considered while assessing
    /// machines.
    /// </summary>
    [EnumType]
    public readonly struct Percentile : IEquatable<Percentile>
    {
        private readonly string _value;

        private Percentile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Percentile 50.
        /// </summary>
        public static Percentile Percentile50 { get; } = new Percentile("Percentile50");
        /// <summary>
        /// Percentile 90.
        /// </summary>
        public static Percentile Percentile90 { get; } = new Percentile("Percentile90");
        /// <summary>
        /// Percentile 95.
        /// </summary>
        public static Percentile Percentile95 { get; } = new Percentile("Percentile95");
        /// <summary>
        /// Percentile 99.
        /// </summary>
        public static Percentile Percentile99 { get; } = new Percentile("Percentile99");

        public static bool operator ==(Percentile left, Percentile right) => left.Equals(right);
        public static bool operator !=(Percentile left, Percentile right) => !left.Equals(right);

        public static explicit operator string(Percentile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Percentile other && Equals(other);
        public bool Equals(Percentile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets pricing tier.
    /// </summary>
    [EnumType]
    public readonly struct PricingTier : IEquatable<PricingTier>
    {
        private readonly string _value;

        private PricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard Pricing Tier.
        /// </summary>
        public static PricingTier Standard { get; } = new PricingTier("Standard");
        /// <summary>
        /// Free Pricing Tier.
        /// </summary>
        public static PricingTier Free { get; } = new PricingTier("Free");

        public static bool operator ==(PricingTier left, PricingTier right) => left.Equals(right);
        public static bool operator !=(PricingTier left, PricingTier right) => !left.Equals(right);

        public static explicit operator string(PricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PricingTier other && Equals(other);
        public bool Equals(PricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Assessment project status.
    /// </summary>
    [EnumType]
    public readonly struct ProjectStatus : IEquatable<ProjectStatus>
    {
        private readonly string _value;

        private ProjectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Active Status.
        /// </summary>
        public static ProjectStatus Active { get; } = new ProjectStatus("Active");
        /// <summary>
        /// Inactive Status.
        /// </summary>
        public static ProjectStatus Inactive { get; } = new ProjectStatus("Inactive");

        public static bool operator ==(ProjectStatus left, ProjectStatus right) => left.Equals(right);
        public static bool operator !=(ProjectStatus left, ProjectStatus right) => !left.Equals(right);

        public static explicit operator string(ProjectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectStatus other && Equals(other);
        public bool Equals(ProjectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the last operation.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resource has been created.
        /// </summary>
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        /// <summary>
        /// Resource creation failed.
        /// </summary>
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        /// <summary>
        /// Resource creation was canceled.
        /// </summary>
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        /// <summary>
        /// Resource is being Provisioned.
        /// </summary>
        public static ProvisioningState Provisioning { get; } = new ProvisioningState("Provisioning");
        /// <summary>
        /// Resource is being Updated.
        /// </summary>
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");
        /// <summary>
        /// Resource is being Deleted.
        /// </summary>
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        /// <summary>
        /// Resource is being Accepted.
        /// </summary>
        public static ProvisioningState Accepted { get; } = new ProvisioningState("Accepted");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets the business case savings option type.
    /// </summary>
    [EnumType]
    public readonly struct SavingsOption : IEquatable<SavingsOption>
    {
        private readonly string _value;

        private SavingsOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Savings Option.
        /// </summary>
        public static SavingsOption Unknown { get; } = new SavingsOption("Unknown");
        /// <summary>
        /// Reserved Instance 3 Year.
        /// </summary>
        public static SavingsOption RI3Year { get; } = new SavingsOption("RI3Year");
        /// <summary>
        /// Azure Savings Plan 3 Year.
        /// </summary>
        public static SavingsOption SavingsPlan3Year { get; } = new SavingsOption("SavingsPlan3Year");

        public static bool operator ==(SavingsOption left, SavingsOption right) => left.Equals(right);
        public static bool operator !=(SavingsOption left, SavingsOption right) => !left.Equals(right);

        public static explicit operator string(SavingsOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SavingsOption other && Equals(other);
        public bool Equals(SavingsOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets savings options.
    /// </summary>
    [EnumType]
    public readonly struct SavingsOptions : IEquatable<SavingsOptions>
    {
        private readonly string _value;

        private SavingsOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Savings Options is not applicable.
        /// </summary>
        public static SavingsOptions None { get; } = new SavingsOptions("None");
        /// <summary>
        /// One Year Savings Plan.
        /// </summary>
        public static SavingsOptions OneYearSavings { get; } = new SavingsOptions("OneYearSavings");
        /// <summary>
        /// Three Years Savings Plan.
        /// </summary>
        public static SavingsOptions ThreeYearsSavings { get; } = new SavingsOptions("ThreeYearsSavings");
        /// <summary>
        /// One Year Reserved Instances.
        /// </summary>
        public static SavingsOptions OneYearReserved { get; } = new SavingsOptions("OneYearReserved");
        /// <summary>
        /// Three Years Reserved Instances.
        /// </summary>
        public static SavingsOptions ThreeYearsReserved { get; } = new SavingsOptions("ThreeYearsReserved");

        public static bool operator ==(SavingsOptions left, SavingsOptions right) => left.Equals(right);
        public static bool operator !=(SavingsOptions left, SavingsOptions right) => !left.Equals(right);

        public static explicit operator string(SavingsOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SavingsOptions other && Equals(other);
        public bool Equals(SavingsOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL server license.
    /// </summary>
    [EnumType]
    public readonly struct SqlServerLicense : IEquatable<SqlServerLicense>
    {
        private readonly string _value;

        private SqlServerLicense(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlServerLicense Unknown { get; } = new SqlServerLicense("Unknown");
        public static SqlServerLicense Yes { get; } = new SqlServerLicense("Yes");
        public static SqlServerLicense No { get; } = new SqlServerLicense("No");

        public static bool operator ==(SqlServerLicense left, SqlServerLicense right) => left.Equals(right);
        public static bool operator !=(SqlServerLicense left, SqlServerLicense right) => !left.Equals(right);

        public static explicit operator string(SqlServerLicense value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlServerLicense other && Equals(other);
        public bool Equals(SqlServerLicense other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL Server version.
    /// </summary>
    [EnumType]
    public readonly struct SqlServerLicenseType : IEquatable<SqlServerLicenseType>
    {
        private readonly string _value;

        private SqlServerLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Unknown { get; } = new SqlServerLicenseType("Unknown");
        /// <summary>
        /// Enterprise Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Enterprise { get; } = new SqlServerLicenseType("Enterprise");
        /// <summary>
        /// Standard Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Standard { get; } = new SqlServerLicenseType("Standard");

        public static bool operator ==(SqlServerLicenseType left, SqlServerLicenseType right) => left.Equals(right);
        public static bool operator !=(SqlServerLicenseType left, SqlServerLicenseType right) => !left.Equals(right);

        public static explicit operator string(SqlServerLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlServerLicenseType other && Equals(other);
        public bool Equals(SqlServerLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Time Range for which the historic utilization data should be considered for
    /// assessment.
    /// </summary>
    [EnumType]
    public readonly struct TimeRange : IEquatable<TimeRange>
    {
        private readonly string _value;

        private TimeRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Daily.
        /// </summary>
        public static TimeRange Day { get; } = new TimeRange("Day");
        /// <summary>
        /// Weekly.
        /// </summary>
        public static TimeRange Week { get; } = new TimeRange("Week");
        /// <summary>
        /// Monthly.
        /// </summary>
        public static TimeRange Month { get; } = new TimeRange("Month");
        /// <summary>
        /// Custom Time Range.
        /// </summary>
        public static TimeRange Custom { get; } = new TimeRange("Custom");

        public static bool operator ==(TimeRange left, TimeRange right) => left.Equals(right);
        public static bool operator !=(TimeRange left, TimeRange right) => !left.Equals(right);

        public static explicit operator string(TimeRange value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeRange other && Equals(other);
        public bool Equals(TimeRange other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
