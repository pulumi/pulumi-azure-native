// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Migrate.Latest
{
    /// <summary>
    /// Assessment sizing criterion.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentSizingCriterion : IEquatable<AssessmentSizingCriterion>
    {
        private readonly string _value;

        private AssessmentSizingCriterion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentSizingCriterion PerformanceBased { get; } = new AssessmentSizingCriterion("PerformanceBased");
        public static AssessmentSizingCriterion AsOnPremises { get; } = new AssessmentSizingCriterion("AsOnPremises");

        public static bool operator ==(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => left.Equals(right);
        public static bool operator !=(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => !left.Equals(right);

        public static explicit operator string(AssessmentSizingCriterion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentSizingCriterion other && Equals(other);
        public bool Equals(AssessmentSizingCriterion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// User configurable setting that describes the status of the assessment.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentStage : IEquatable<AssessmentStage>
    {
        private readonly string _value;

        private AssessmentStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentStage InProgress { get; } = new AssessmentStage("InProgress");
        public static AssessmentStage UnderReview { get; } = new AssessmentStage("UnderReview");
        public static AssessmentStage Approved { get; } = new AssessmentStage("Approved");

        public static bool operator ==(AssessmentStage left, AssessmentStage right) => left.Equals(right);
        public static bool operator !=(AssessmentStage left, AssessmentStage right) => !left.Equals(right);

        public static explicit operator string(AssessmentStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentStage other && Equals(other);
        public bool Equals(AssessmentStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type selected for this disk.
    /// </summary>
    [EnumType]
    public readonly struct AzureDiskType : IEquatable<AzureDiskType>
    {
        private readonly string _value;

        private AzureDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureDiskType Unknown { get; } = new AzureDiskType("Unknown");
        public static AzureDiskType Standard { get; } = new AzureDiskType("Standard");
        public static AzureDiskType Premium { get; } = new AzureDiskType("Premium");
        public static AzureDiskType StandardSSD { get; } = new AzureDiskType("StandardSSD");
        public static AzureDiskType StandardOrPremium { get; } = new AzureDiskType("StandardOrPremium");

        public static bool operator ==(AzureDiskType left, AzureDiskType right) => left.Equals(right);
        public static bool operator !=(AzureDiskType left, AzureDiskType right) => !left.Equals(right);

        public static explicit operator string(AzureDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureDiskType other && Equals(other);
        public bool Equals(AzureDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AHUB discount on windows virtual machines.
    /// </summary>
    [EnumType]
    public readonly struct AzureHybridUseBenefit : IEquatable<AzureHybridUseBenefit>
    {
        private readonly string _value;

        private AzureHybridUseBenefit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureHybridUseBenefit Unknown { get; } = new AzureHybridUseBenefit("Unknown");
        public static AzureHybridUseBenefit Yes { get; } = new AzureHybridUseBenefit("Yes");
        public static AzureHybridUseBenefit No { get; } = new AzureHybridUseBenefit("No");

        public static bool operator ==(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => left.Equals(right);
        public static bool operator !=(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => !left.Equals(right);

        public static explicit operator string(AzureHybridUseBenefit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureHybridUseBenefit other && Equals(other);
        public bool Equals(AzureHybridUseBenefit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
    /// </summary>
    [EnumType]
    public readonly struct AzureLocation : IEquatable<AzureLocation>
    {
        private readonly string _value;

        private AzureLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureLocation Unknown { get; } = new AzureLocation("Unknown");
        public static AzureLocation EastAsia { get; } = new AzureLocation("EastAsia");
        public static AzureLocation SoutheastAsia { get; } = new AzureLocation("SoutheastAsia");
        public static AzureLocation AustraliaEast { get; } = new AzureLocation("AustraliaEast");
        public static AzureLocation AustraliaSoutheast { get; } = new AzureLocation("AustraliaSoutheast");
        public static AzureLocation BrazilSouth { get; } = new AzureLocation("BrazilSouth");
        public static AzureLocation CanadaCentral { get; } = new AzureLocation("CanadaCentral");
        public static AzureLocation CanadaEast { get; } = new AzureLocation("CanadaEast");
        public static AzureLocation WestEurope { get; } = new AzureLocation("WestEurope");
        public static AzureLocation NorthEurope { get; } = new AzureLocation("NorthEurope");
        public static AzureLocation CentralIndia { get; } = new AzureLocation("CentralIndia");
        public static AzureLocation SouthIndia { get; } = new AzureLocation("SouthIndia");
        public static AzureLocation WestIndia { get; } = new AzureLocation("WestIndia");
        public static AzureLocation JapanEast { get; } = new AzureLocation("JapanEast");
        public static AzureLocation JapanWest { get; } = new AzureLocation("JapanWest");
        public static AzureLocation KoreaCentral { get; } = new AzureLocation("KoreaCentral");
        public static AzureLocation KoreaSouth { get; } = new AzureLocation("KoreaSouth");
        public static AzureLocation UkWest { get; } = new AzureLocation("UkWest");
        public static AzureLocation UkSouth { get; } = new AzureLocation("UkSouth");
        public static AzureLocation NorthCentralUs { get; } = new AzureLocation("NorthCentralUs");
        public static AzureLocation EastUs { get; } = new AzureLocation("EastUs");
        public static AzureLocation WestUs2 { get; } = new AzureLocation("WestUs2");
        public static AzureLocation SouthCentralUs { get; } = new AzureLocation("SouthCentralUs");
        public static AzureLocation CentralUs { get; } = new AzureLocation("CentralUs");
        public static AzureLocation EastUs2 { get; } = new AzureLocation("EastUs2");
        public static AzureLocation WestUs { get; } = new AzureLocation("WestUs");
        public static AzureLocation WestCentralUs { get; } = new AzureLocation("WestCentralUs");
        public static AzureLocation GermanyCentral { get; } = new AzureLocation("GermanyCentral");
        public static AzureLocation GermanyNortheast { get; } = new AzureLocation("GermanyNortheast");
        public static AzureLocation ChinaNorth { get; } = new AzureLocation("ChinaNorth");
        public static AzureLocation ChinaEast { get; } = new AzureLocation("ChinaEast");
        public static AzureLocation USGovArizona { get; } = new AzureLocation("USGovArizona");
        public static AzureLocation USGovTexas { get; } = new AzureLocation("USGovTexas");
        public static AzureLocation USGovIowa { get; } = new AzureLocation("USGovIowa");
        public static AzureLocation USGovVirginia { get; } = new AzureLocation("USGovVirginia");
        public static AzureLocation USDoDCentral { get; } = new AzureLocation("USDoDCentral");
        public static AzureLocation USDoDEast { get; } = new AzureLocation("USDoDEast");

        public static bool operator ==(AzureLocation left, AzureLocation right) => left.Equals(right);
        public static bool operator !=(AzureLocation left, AzureLocation right) => !left.Equals(right);

        public static explicit operator string(AzureLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureLocation other && Equals(other);
        public bool Equals(AzureLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Offer code according to which cost estimation is done.
    /// </summary>
    [EnumType]
    public readonly struct AzureOfferCode : IEquatable<AzureOfferCode>
    {
        private readonly string _value;

        private AzureOfferCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureOfferCode Unknown { get; } = new AzureOfferCode("Unknown");
        public static AzureOfferCode MSAZR0003P { get; } = new AzureOfferCode("MSAZR0003P");
        public static AzureOfferCode MSAZR0044P { get; } = new AzureOfferCode("MSAZR0044P");
        public static AzureOfferCode MSAZR0059P { get; } = new AzureOfferCode("MSAZR0059P");
        public static AzureOfferCode MSAZR0060P { get; } = new AzureOfferCode("MSAZR0060P");
        public static AzureOfferCode MSAZR0062P { get; } = new AzureOfferCode("MSAZR0062P");
        public static AzureOfferCode MSAZR0063P { get; } = new AzureOfferCode("MSAZR0063P");
        public static AzureOfferCode MSAZR0064P { get; } = new AzureOfferCode("MSAZR0064P");
        public static AzureOfferCode MSAZR0029P { get; } = new AzureOfferCode("MSAZR0029P");
        public static AzureOfferCode MSAZR0022P { get; } = new AzureOfferCode("MSAZR0022P");
        public static AzureOfferCode MSAZR0023P { get; } = new AzureOfferCode("MSAZR0023P");
        public static AzureOfferCode MSAZR0148P { get; } = new AzureOfferCode("MSAZR0148P");
        public static AzureOfferCode MSAZR0025P { get; } = new AzureOfferCode("MSAZR0025P");
        public static AzureOfferCode MSAZR0036P { get; } = new AzureOfferCode("MSAZR0036P");
        public static AzureOfferCode MSAZR0120P { get; } = new AzureOfferCode("MSAZR0120P");
        public static AzureOfferCode MSAZR0121P { get; } = new AzureOfferCode("MSAZR0121P");
        public static AzureOfferCode MSAZR0122P { get; } = new AzureOfferCode("MSAZR0122P");
        public static AzureOfferCode MSAZR0123P { get; } = new AzureOfferCode("MSAZR0123P");
        public static AzureOfferCode MSAZR0124P { get; } = new AzureOfferCode("MSAZR0124P");
        public static AzureOfferCode MSAZR0125P { get; } = new AzureOfferCode("MSAZR0125P");
        public static AzureOfferCode MSAZR0126P { get; } = new AzureOfferCode("MSAZR0126P");
        public static AzureOfferCode MSAZR0127P { get; } = new AzureOfferCode("MSAZR0127P");
        public static AzureOfferCode MSAZR0128P { get; } = new AzureOfferCode("MSAZR0128P");
        public static AzureOfferCode MSAZR0129P { get; } = new AzureOfferCode("MSAZR0129P");
        public static AzureOfferCode MSAZR0130P { get; } = new AzureOfferCode("MSAZR0130P");
        public static AzureOfferCode MSAZR0111P { get; } = new AzureOfferCode("MSAZR0111P");
        public static AzureOfferCode MSAZR0144P { get; } = new AzureOfferCode("MSAZR0144P");
        public static AzureOfferCode MSAZR0149P { get; } = new AzureOfferCode("MSAZR0149P");
        public static AzureOfferCode MSMCAZR0044P { get; } = new AzureOfferCode("MSMCAZR0044P");
        public static AzureOfferCode MSMCAZR0059P { get; } = new AzureOfferCode("MSMCAZR0059P");
        public static AzureOfferCode MSMCAZR0060P { get; } = new AzureOfferCode("MSMCAZR0060P");
        public static AzureOfferCode MSMCAZR0063P { get; } = new AzureOfferCode("MSMCAZR0063P");
        public static AzureOfferCode MSMCAZR0120P { get; } = new AzureOfferCode("MSMCAZR0120P");
        public static AzureOfferCode MSMCAZR0121P { get; } = new AzureOfferCode("MSMCAZR0121P");
        public static AzureOfferCode MSMCAZR0125P { get; } = new AzureOfferCode("MSMCAZR0125P");
        public static AzureOfferCode MSMCAZR0128P { get; } = new AzureOfferCode("MSMCAZR0128P");
        public static AzureOfferCode MSAZRDE0003P { get; } = new AzureOfferCode("MSAZRDE0003P");
        public static AzureOfferCode MSAZRDE0044P { get; } = new AzureOfferCode("MSAZRDE0044P");
        public static AzureOfferCode MSAZRUSGOV0003P { get; } = new AzureOfferCode("MSAZRUSGOV0003P");
        public static AzureOfferCode EA { get; } = new AzureOfferCode("EA");

        public static bool operator ==(AzureOfferCode left, AzureOfferCode right) => left.Equals(right);
        public static bool operator !=(AzureOfferCode left, AzureOfferCode right) => !left.Equals(right);

        public static explicit operator string(AzureOfferCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureOfferCode other && Equals(other);
        public bool Equals(AzureOfferCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Pricing tier for Size evaluation.
    /// </summary>
    [EnumType]
    public readonly struct AzurePricingTier : IEquatable<AzurePricingTier>
    {
        private readonly string _value;

        private AzurePricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzurePricingTier Standard { get; } = new AzurePricingTier("Standard");
        public static AzurePricingTier Basic { get; } = new AzurePricingTier("Basic");

        public static bool operator ==(AzurePricingTier left, AzurePricingTier right) => left.Equals(right);
        public static bool operator !=(AzurePricingTier left, AzurePricingTier right) => !left.Equals(right);

        public static explicit operator string(AzurePricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzurePricingTier other && Equals(other);
        public bool Equals(AzurePricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage Redundancy type offered by Azure.
    /// </summary>
    [EnumType]
    public readonly struct AzureStorageRedundancy : IEquatable<AzureStorageRedundancy>
    {
        private readonly string _value;

        private AzureStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureStorageRedundancy Unknown { get; } = new AzureStorageRedundancy("Unknown");
        public static AzureStorageRedundancy LocallyRedundant { get; } = new AzureStorageRedundancy("LocallyRedundant");
        public static AzureStorageRedundancy ZoneRedundant { get; } = new AzureStorageRedundancy("ZoneRedundant");
        public static AzureStorageRedundancy GeoRedundant { get; } = new AzureStorageRedundancy("GeoRedundant");
        public static AzureStorageRedundancy ReadAccessGeoRedundant { get; } = new AzureStorageRedundancy("ReadAccessGeoRedundant");

        public static bool operator ==(AzureStorageRedundancy left, AzureStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(AzureStorageRedundancy left, AzureStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(AzureStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureStorageRedundancy other && Equals(other);
        public bool Equals(AzureStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure VM family.
    /// </summary>
    [EnumType]
    public readonly struct AzureVmFamily : IEquatable<AzureVmFamily>
    {
        private readonly string _value;

        private AzureVmFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureVmFamily Unknown { get; } = new AzureVmFamily("Unknown");
        public static AzureVmFamily Basic_A0_A4 { get; } = new AzureVmFamily("Basic_A0_A4");
        public static AzureVmFamily Standard_A0_A7 { get; } = new AzureVmFamily("Standard_A0_A7");
        public static AzureVmFamily Standard_A8_A11 { get; } = new AzureVmFamily("Standard_A8_A11");
        public static AzureVmFamily Av2_series { get; } = new AzureVmFamily("Av2_series");
        public static AzureVmFamily D_series { get; } = new AzureVmFamily("D_series");
        public static AzureVmFamily Dv2_series { get; } = new AzureVmFamily("Dv2_series");
        public static AzureVmFamily DS_series { get; } = new AzureVmFamily("DS_series");
        public static AzureVmFamily DSv2_series { get; } = new AzureVmFamily("DSv2_series");
        public static AzureVmFamily F_series { get; } = new AzureVmFamily("F_series");
        public static AzureVmFamily Fs_series { get; } = new AzureVmFamily("Fs_series");
        public static AzureVmFamily G_series { get; } = new AzureVmFamily("G_series");
        public static AzureVmFamily GS_series { get; } = new AzureVmFamily("GS_series");
        public static AzureVmFamily H_series { get; } = new AzureVmFamily("H_series");
        public static AzureVmFamily Ls_series { get; } = new AzureVmFamily("Ls_series");
        public static AzureVmFamily Dsv3_series { get; } = new AzureVmFamily("Dsv3_series");
        public static AzureVmFamily Dv3_series { get; } = new AzureVmFamily("Dv3_series");
        public static AzureVmFamily Fsv2_series { get; } = new AzureVmFamily("Fsv2_series");
        public static AzureVmFamily Ev3_series { get; } = new AzureVmFamily("Ev3_series");
        public static AzureVmFamily Esv3_series { get; } = new AzureVmFamily("Esv3_series");
        public static AzureVmFamily M_series { get; } = new AzureVmFamily("M_series");
        public static AzureVmFamily DC_Series { get; } = new AzureVmFamily("DC_Series");

        public static bool operator ==(AzureVmFamily left, AzureVmFamily right) => left.Equals(right);
        public static bool operator !=(AzureVmFamily left, AzureVmFamily right) => !left.Equals(right);

        public static explicit operator string(AzureVmFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureVmFamily other && Equals(other);
        public bool Equals(AzureVmFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Currency to report prices in.
    /// </summary>
    [EnumType]
    public readonly struct Currency : IEquatable<Currency>
    {
        private readonly string _value;

        private Currency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Currency Unknown { get; } = new Currency("Unknown");
        public static Currency USD { get; } = new Currency("USD");
        public static Currency DKK { get; } = new Currency("DKK");
        public static Currency CAD { get; } = new Currency("CAD");
        public static Currency IDR { get; } = new Currency("IDR");
        public static Currency JPY { get; } = new Currency("JPY");
        public static Currency KRW { get; } = new Currency("KRW");
        public static Currency NZD { get; } = new Currency("NZD");
        public static Currency NOK { get; } = new Currency("NOK");
        public static Currency RUB { get; } = new Currency("RUB");
        public static Currency SAR { get; } = new Currency("SAR");
        public static Currency ZAR { get; } = new Currency("ZAR");
        public static Currency SEK { get; } = new Currency("SEK");
        public static Currency TRY { get; } = new Currency("TRY");
        public static Currency GBP { get; } = new Currency("GBP");
        public static Currency MXN { get; } = new Currency("MXN");
        public static Currency MYR { get; } = new Currency("MYR");
        public static Currency INR { get; } = new Currency("INR");
        public static Currency HKD { get; } = new Currency("HKD");
        public static Currency BRL { get; } = new Currency("BRL");
        public static Currency TWD { get; } = new Currency("TWD");
        public static Currency EUR { get; } = new Currency("EUR");
        public static Currency CHF { get; } = new Currency("CHF");
        public static Currency ARS { get; } = new Currency("ARS");
        public static Currency AUD { get; } = new Currency("AUD");
        public static Currency CNY { get; } = new Currency("CNY");

        public static bool operator ==(Currency left, Currency right) => left.Equals(right);
        public static bool operator !=(Currency left, Currency right) => !left.Equals(right);

        public static explicit operator string(Currency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Currency other && Equals(other);
        public bool Equals(Currency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Percentile of performance data used to recommend Azure size.
    /// </summary>
    [EnumType]
    public readonly struct Percentile : IEquatable<Percentile>
    {
        private readonly string _value;

        private Percentile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Percentile Percentile50 { get; } = new Percentile("Percentile50");
        public static Percentile Percentile90 { get; } = new Percentile("Percentile90");
        public static Percentile Percentile95 { get; } = new Percentile("Percentile95");
        public static Percentile Percentile99 { get; } = new Percentile("Percentile99");

        public static bool operator ==(Percentile left, Percentile right) => left.Equals(right);
        public static bool operator !=(Percentile left, Percentile right) => !left.Equals(right);

        public static explicit operator string(Percentile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Percentile other && Equals(other);
        public bool Equals(Percentile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Assessment project status.
    /// </summary>
    [EnumType]
    public readonly struct ProjectStatus : IEquatable<ProjectStatus>
    {
        private readonly string _value;

        private ProjectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectStatus Active { get; } = new ProjectStatus("Active");
        public static ProjectStatus Inactive { get; } = new ProjectStatus("Inactive");

        public static bool operator ==(ProjectStatus left, ProjectStatus right) => left.Equals(right);
        public static bool operator !=(ProjectStatus left, ProjectStatus right) => !left.Equals(right);

        public static explicit operator string(ProjectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectStatus other && Equals(other);
        public bool Equals(ProjectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure reserved instance.
    /// </summary>
    [EnumType]
    public readonly struct ReservedInstance : IEquatable<ReservedInstance>
    {
        private readonly string _value;

        private ReservedInstance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReservedInstance None { get; } = new ReservedInstance("None");
        public static ReservedInstance RI1Year { get; } = new ReservedInstance("RI1Year");
        public static ReservedInstance RI3Year { get; } = new ReservedInstance("RI3Year");

        public static bool operator ==(ReservedInstance left, ReservedInstance right) => left.Equals(right);
        public static bool operator !=(ReservedInstance left, ReservedInstance right) => !left.Equals(right);

        public static explicit operator string(ReservedInstance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReservedInstance other && Equals(other);
        public bool Equals(ReservedInstance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource mover service.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the target availability zone.
    /// </summary>
    [EnumType]
    public readonly struct TargetAvailabilityZone : IEquatable<TargetAvailabilityZone>
    {
        private readonly string _value;

        private TargetAvailabilityZone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TargetAvailabilityZone One { get; } = new TargetAvailabilityZone("1");
        public static TargetAvailabilityZone Two { get; } = new TargetAvailabilityZone("2");
        public static TargetAvailabilityZone Three { get; } = new TargetAvailabilityZone("3");
        public static TargetAvailabilityZone NA { get; } = new TargetAvailabilityZone("NA");

        public static bool operator ==(TargetAvailabilityZone left, TargetAvailabilityZone right) => left.Equals(right);
        public static bool operator !=(TargetAvailabilityZone left, TargetAvailabilityZone right) => !left.Equals(right);

        public static explicit operator string(TargetAvailabilityZone value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetAvailabilityZone other && Equals(other);
        public bool Equals(TargetAvailabilityZone other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Time range of performance data used to recommend a size.
    /// </summary>
    [EnumType]
    public readonly struct TimeRange : IEquatable<TimeRange>
    {
        private readonly string _value;

        private TimeRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TimeRange Day { get; } = new TimeRange("Day");
        public static TimeRange Week { get; } = new TimeRange("Week");
        public static TimeRange Month { get; } = new TimeRange("Month");
        public static TimeRange Custom { get; } = new TimeRange("Custom");

        public static bool operator ==(TimeRange left, TimeRange right) => left.Equals(right);
        public static bool operator !=(TimeRange left, TimeRange right) => !left.Equals(right);

        public static explicit operator string(TimeRange value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeRange other && Equals(other);
        public bool Equals(TimeRange other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the zone redundant resource setting.
    /// </summary>
    [EnumType]
    public readonly struct ZoneRedundant : IEquatable<ZoneRedundant>
    {
        private readonly string _value;

        private ZoneRedundant(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ZoneRedundant Enable { get; } = new ZoneRedundant("Enable");
        public static ZoneRedundant Disable { get; } = new ZoneRedundant("Disable");

        public static bool operator ==(ZoneRedundant left, ZoneRedundant right) => left.Equals(right);
        public static bool operator !=(ZoneRedundant left, ZoneRedundant right) => !left.Equals(right);

        public static explicit operator string(ZoneRedundant value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneRedundant other && Equals(other);
        public bool Equals(ZoneRedundant other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
