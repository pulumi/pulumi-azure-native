// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Migrate
{
    /// <summary>
    /// Assessment sizing criterion.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentSizingCriterion : IEquatable<AssessmentSizingCriterion>
    {
        private readonly string _value;

        private AssessmentSizingCriterion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Performance Data based Sizing.
        /// </summary>
        public static AssessmentSizingCriterion PerformanceBased { get; } = new AssessmentSizingCriterion("PerformanceBased");
        /// <summary>
        /// As On Premises or Static Data based Sizing.
        /// </summary>
        public static AssessmentSizingCriterion AsOnPremises { get; } = new AssessmentSizingCriterion("AsOnPremises");

        public static bool operator ==(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => left.Equals(right);
        public static bool operator !=(AssessmentSizingCriterion left, AssessmentSizingCriterion right) => !left.Equals(right);

        public static explicit operator string(AssessmentSizingCriterion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentSizingCriterion other && Equals(other);
        public bool Equals(AssessmentSizingCriterion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// User configurable setting that describes the status of the assessment.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentStage : IEquatable<AssessmentStage>
    {
        private readonly string _value;

        private AssessmentStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentStage InProgress { get; } = new AssessmentStage("InProgress");
        public static AssessmentStage UnderReview { get; } = new AssessmentStage("UnderReview");
        public static AssessmentStage Approved { get; } = new AssessmentStage("Approved");

        public static bool operator ==(AssessmentStage left, AssessmentStage right) => left.Equals(right);
        public static bool operator !=(AssessmentStage left, AssessmentStage right) => !left.Equals(right);

        public static explicit operator string(AssessmentStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentStage other && Equals(other);
        public bool Equals(AssessmentStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Assessment type of the assessment.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentType : IEquatable<AssessmentType>
    {
        private readonly string _value;

        private AssessmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentType Unknown { get; } = new AssessmentType("Unknown");
        public static AssessmentType MachineAssessment { get; } = new AssessmentType("MachineAssessment");
        public static AssessmentType AvsAssessment { get; } = new AssessmentType("AvsAssessment");
        public static AssessmentType SqlAssessment { get; } = new AssessmentType("SqlAssessment");
        public static AssessmentType WebAppAssessment { get; } = new AssessmentType("WebAppAssessment");

        public static bool operator ==(AssessmentType left, AssessmentType right) => left.Equals(right);
        public static bool operator !=(AssessmentType left, AssessmentType right) => !left.Equals(right);

        public static explicit operator string(AssessmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentType other && Equals(other);
        public bool Equals(AssessmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user preference indicating intent of async commit mode.
    /// </summary>
    [EnumType]
    public readonly struct AsyncCommitModeIntent : IEquatable<AsyncCommitModeIntent>
    {
        private readonly string _value;

        private AsyncCommitModeIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// None - Async Commit Mode Intent
        /// </summary>
        public static AsyncCommitModeIntent None { get; } = new AsyncCommitModeIntent("None");
        /// <summary>
        /// HighAvailability - Async Commit Mode Intent
        /// </summary>
        public static AsyncCommitModeIntent HighAvailability { get; } = new AsyncCommitModeIntent("HighAvailability");
        /// <summary>
        /// DisasterRecovery - Async Commit Mode Intent
        /// </summary>
        public static AsyncCommitModeIntent DisasterRecovery { get; } = new AsyncCommitModeIntent("DisasterRecovery");

        public static bool operator ==(AsyncCommitModeIntent left, AsyncCommitModeIntent right) => left.Equals(right);
        public static bool operator !=(AsyncCommitModeIntent left, AsyncCommitModeIntent right) => !left.Equals(right);

        public static explicit operator string(AsyncCommitModeIntent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AsyncCommitModeIntent other && Equals(other);
        public bool Equals(AsyncCommitModeIntent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the status of automation artifacts.
    /// </summary>
    [EnumType]
    public readonly struct AutomationArtifactStatus : IEquatable<AutomationArtifactStatus>
    {
        private readonly string _value;

        private AutomationArtifactStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationArtifactStatus NotGenerated { get; } = new AutomationArtifactStatus("NotGenerated");
        public static AutomationArtifactStatus Generated { get; } = new AutomationArtifactStatus("Generated");

        public static bool operator ==(AutomationArtifactStatus left, AutomationArtifactStatus right) => left.Equals(right);
        public static bool operator !=(AutomationArtifactStatus left, AutomationArtifactStatus right) => !left.Equals(right);

        public static explicit operator string(AutomationArtifactStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationArtifactStatus other && Equals(other);
        public bool Equals(AutomationArtifactStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AVS Assessment Scenario.
    /// </summary>
    [EnumType]
    public readonly struct AvsAssessmentScenario : IEquatable<AvsAssessmentScenario>
    {
        private readonly string _value;

        private AvsAssessmentScenario(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown assessment scenario
        /// </summary>
        public static AvsAssessmentScenario Unknown { get; } = new AvsAssessmentScenario("Unknown");
        /// <summary>
        /// Create Assessment for new Avs Sddc
        /// </summary>
        public static AvsAssessmentScenario NewAvsSddc { get; } = new AvsAssessmentScenario("NewAvsSddc");
        /// <summary>
        /// Create Assessment for existing Avs Sddc
        /// </summary>
        public static AvsAssessmentScenario AvsSddcExpansion { get; } = new AvsAssessmentScenario("AvsSddcExpansion");

        public static bool operator ==(AvsAssessmentScenario left, AvsAssessmentScenario right) => left.Equals(right);
        public static bool operator !=(AvsAssessmentScenario left, AvsAssessmentScenario right) => !left.Equals(right);

        public static explicit operator string(AvsAssessmentScenario value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AvsAssessmentScenario other && Equals(other);
        public bool Equals(AvsAssessmentScenario other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AzureArc state indicates whether to include azure arc related costs in on-premises or not.
    /// </summary>
    [EnumType]
    public readonly struct AzureArcState : IEquatable<AzureArcState>
    {
        private readonly string _value;

        private AzureArcState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// AzureArc state disabled.
        /// </summary>
        public static AzureArcState Disabled { get; } = new AzureArcState("Disabled");
        /// <summary>
        /// AzureArc state enabled.
        /// </summary>
        public static AzureArcState Enabled { get; } = new AzureArcState("Enabled");
        /// <summary>
        /// AzureArc state unknown.
        /// </summary>
        public static AzureArcState Unknown { get; } = new AzureArcState("Unknown");

        public static bool operator ==(AzureArcState left, AzureArcState right) => left.Equals(right);
        public static bool operator !=(AzureArcState left, AzureArcState right) => !left.Equals(right);

        public static explicit operator string(AzureArcState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureArcState other && Equals(other);
        public bool Equals(AzureArcState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure AVS Node type
    /// </summary>
    [EnumType]
    public readonly struct AzureAvsNodeType : IEquatable<AzureAvsNodeType>
    {
        private readonly string _value;

        private AzureAvsNodeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Node type
        /// </summary>
        public static AzureAvsNodeType Unknown { get; } = new AzureAvsNodeType("Unknown");
        /// <summary>
        /// AVS36 Node type
        /// </summary>
        public static AzureAvsNodeType AV36 { get; } = new AzureAvsNodeType("AV36");
        /// <summary>
        /// AV36P Node type
        /// </summary>
        public static AzureAvsNodeType AV36P { get; } = new AzureAvsNodeType("AV36P");
        /// <summary>
        /// AV52 Node type
        /// </summary>
        public static AzureAvsNodeType AV52 { get; } = new AzureAvsNodeType("AV52");
        /// <summary>
        /// AV64 Node type
        /// </summary>
        public static AzureAvsNodeType AV64 { get; } = new AzureAvsNodeType("AV64");

        public static bool operator ==(AzureAvsNodeType left, AzureAvsNodeType right) => left.Equals(right);
        public static bool operator !=(AzureAvsNodeType left, AzureAvsNodeType right) => !left.Equals(right);

        public static explicit operator string(AzureAvsNodeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureAvsNodeType other && Equals(other);
        public bool Equals(AzureAvsNodeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Currency in which prices should be reported.
    /// </summary>
    [EnumType]
    public readonly struct AzureCurrency : IEquatable<AzureCurrency>
    {
        private readonly string _value;

        private AzureCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Currency for Azure
        /// </summary>
        public static AzureCurrency Unknown { get; } = new AzureCurrency("Unknown");
        /// <summary>
        /// USD Currency for Azure
        /// </summary>
        public static AzureCurrency USD { get; } = new AzureCurrency("USD");
        /// <summary>
        /// DKK Currency for Azure
        /// </summary>
        public static AzureCurrency DKK { get; } = new AzureCurrency("DKK");
        /// <summary>
        /// CAD Currency for Azure
        /// </summary>
        public static AzureCurrency CAD { get; } = new AzureCurrency("CAD");
        /// <summary>
        /// IDR Currency for Azure
        /// </summary>
        public static AzureCurrency IDR { get; } = new AzureCurrency("IDR");
        /// <summary>
        /// JPY Currency for Azure
        /// </summary>
        public static AzureCurrency JPY { get; } = new AzureCurrency("JPY");
        /// <summary>
        /// KRW Currency for Azure
        /// </summary>
        public static AzureCurrency KRW { get; } = new AzureCurrency("KRW");
        /// <summary>
        /// NZD Currency for Azure
        /// </summary>
        public static AzureCurrency NZD { get; } = new AzureCurrency("NZD");
        /// <summary>
        /// NOK Currency for Azure
        /// </summary>
        public static AzureCurrency NOK { get; } = new AzureCurrency("NOK");
        /// <summary>
        /// RUB Currency for Azure
        /// </summary>
        public static AzureCurrency RUB { get; } = new AzureCurrency("RUB");
        /// <summary>
        /// SAR Currency for Azure
        /// </summary>
        public static AzureCurrency SAR { get; } = new AzureCurrency("SAR");
        /// <summary>
        /// ZAR Currency for Azure
        /// </summary>
        public static AzureCurrency ZAR { get; } = new AzureCurrency("ZAR");
        /// <summary>
        /// SEK Currency for Azure
        /// </summary>
        public static AzureCurrency SEK { get; } = new AzureCurrency("SEK");
        /// <summary>
        /// TRY Currency for Azure
        /// </summary>
        public static AzureCurrency TRY { get; } = new AzureCurrency("TRY");
        /// <summary>
        /// GBP Currency for Azure
        /// </summary>
        public static AzureCurrency GBP { get; } = new AzureCurrency("GBP");
        /// <summary>
        /// MXN Currency for Azure
        /// </summary>
        public static AzureCurrency MXN { get; } = new AzureCurrency("MXN");
        /// <summary>
        /// MYR Currency for Azure
        /// </summary>
        public static AzureCurrency MYR { get; } = new AzureCurrency("MYR");
        /// <summary>
        /// INR Currency for Azure
        /// </summary>
        public static AzureCurrency INR { get; } = new AzureCurrency("INR");
        /// <summary>
        /// HKD Currency for Azure
        /// </summary>
        public static AzureCurrency HKD { get; } = new AzureCurrency("HKD");
        /// <summary>
        /// BRL Currency for Azure
        /// </summary>
        public static AzureCurrency BRL { get; } = new AzureCurrency("BRL");
        /// <summary>
        /// TWD Currency for Azure
        /// </summary>
        public static AzureCurrency TWD { get; } = new AzureCurrency("TWD");
        /// <summary>
        /// EUR Currency for Azure
        /// </summary>
        public static AzureCurrency EUR { get; } = new AzureCurrency("EUR");
        /// <summary>
        /// CHF Currency for Azure
        /// </summary>
        public static AzureCurrency CHF { get; } = new AzureCurrency("CHF");
        /// <summary>
        /// ARS Currency for Azure
        /// </summary>
        public static AzureCurrency ARS { get; } = new AzureCurrency("ARS");
        /// <summary>
        /// AUD Currency for Azure
        /// </summary>
        public static AzureCurrency AUD { get; } = new AzureCurrency("AUD");
        /// <summary>
        /// CNY Currency for Azure
        /// </summary>
        public static AzureCurrency CNY { get; } = new AzureCurrency("CNY");

        public static bool operator ==(AzureCurrency left, AzureCurrency right) => left.Equals(right);
        public static bool operator !=(AzureCurrency left, AzureCurrency right) => !left.Equals(right);

        public static explicit operator string(AzureCurrency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureCurrency other && Equals(other);
        public bool Equals(AzureCurrency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure Disk Type
    /// </summary>
    [EnumType]
    public readonly struct AzureDiskType : IEquatable<AzureDiskType>
    {
        private readonly string _value;

        private AzureDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Azure Disk Type
        /// </summary>
        public static AzureDiskType Unknown { get; } = new AzureDiskType("Unknown");
        /// <summary>
        /// Standard Azure Disk Type
        /// </summary>
        public static AzureDiskType Standard { get; } = new AzureDiskType("Standard");
        /// <summary>
        /// StandardSSD Azure Disk Type
        /// </summary>
        public static AzureDiskType StandardSSD { get; } = new AzureDiskType("StandardSSD");
        /// <summary>
        /// Premium Azure Disk Type
        /// </summary>
        public static AzureDiskType Premium { get; } = new AzureDiskType("Premium");
        /// <summary>
        /// StandardOrPremium Azure Disk Type
        /// </summary>
        public static AzureDiskType StandardOrPremium { get; } = new AzureDiskType("StandardOrPremium");
        /// <summary>
        /// Ultra Azure Disk Type
        /// </summary>
        public static AzureDiskType Ultra { get; } = new AzureDiskType("Ultra");
        /// <summary>
        /// PremiumV2 Azure Disk Type
        /// </summary>
        public static AzureDiskType PremiumV2 { get; } = new AzureDiskType("PremiumV2");

        public static bool operator ==(AzureDiskType left, AzureDiskType right) => left.Equals(right);
        public static bool operator !=(AzureDiskType left, AzureDiskType right) => !left.Equals(right);

        public static explicit operator string(AzureDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureDiskType other && Equals(other);
        public bool Equals(AzureDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets environment type.
    /// </summary>
    [EnumType]
    public readonly struct AzureEnvironmentType : IEquatable<AzureEnvironmentType>
    {
        private readonly string _value;

        private AzureEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown. Indicates missing data.
        /// </summary>
        public static AzureEnvironmentType Unknown { get; } = new AzureEnvironmentType("Unknown");
        /// <summary>
        /// Development or Test Environment.
        /// </summary>
        public static AzureEnvironmentType DevTest { get; } = new AzureEnvironmentType("DevTest");
        /// <summary>
        /// Production Environment.
        /// </summary>
        public static AzureEnvironmentType Production { get; } = new AzureEnvironmentType("Production");

        public static bool operator ==(AzureEnvironmentType left, AzureEnvironmentType right) => left.Equals(right);
        public static bool operator !=(AzureEnvironmentType left, AzureEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(AzureEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureEnvironmentType other && Equals(other);
        public bool Equals(AzureEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the user configurable setting to display the linux azure hybrid use
    /// benefit.
    /// </summary>
    [EnumType]
    public readonly struct AzureHybridUseBenefit : IEquatable<AzureHybridUseBenefit>
    {
        private readonly string _value;

        private AzureHybridUseBenefit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Azure Hybrid Use Benefit
        /// </summary>
        public static AzureHybridUseBenefit Unknown { get; } = new AzureHybridUseBenefit("Unknown");
        /// <summary>
        /// Yes Azure Hybrid Use Benefit
        /// </summary>
        public static AzureHybridUseBenefit Yes { get; } = new AzureHybridUseBenefit("Yes");
        /// <summary>
        /// No Azure Hybrid Use Benefit
        /// </summary>
        public static AzureHybridUseBenefit No { get; } = new AzureHybridUseBenefit("No");

        public static bool operator ==(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => left.Equals(right);
        public static bool operator !=(AzureHybridUseBenefit left, AzureHybridUseBenefit right) => !left.Equals(right);

        public static explicit operator string(AzureHybridUseBenefit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureHybridUseBenefit other && Equals(other);
        public bool Equals(AzureHybridUseBenefit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the Azure Location or Azure region where to which the machines
    /// will be migrated.
    /// </summary>
    [EnumType]
    public readonly struct AzureLocation : IEquatable<AzureLocation>
    {
        private readonly string _value;

        private AzureLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Location for Azure
        /// </summary>
        public static AzureLocation Unknown { get; } = new AzureLocation("Unknown");
        /// <summary>
        /// EastAsia Location for Azure
        /// </summary>
        public static AzureLocation EastAsia { get; } = new AzureLocation("EastAsia");
        /// <summary>
        /// SoutheastAsia Location for Azure
        /// </summary>
        public static AzureLocation SoutheastAsia { get; } = new AzureLocation("SoutheastAsia");
        /// <summary>
        /// AustraliaEast Location for Azure
        /// </summary>
        public static AzureLocation AustraliaEast { get; } = new AzureLocation("AustraliaEast");
        /// <summary>
        /// AustraliaSoutheast Location for Azure
        /// </summary>
        public static AzureLocation AustraliaSoutheast { get; } = new AzureLocation("AustraliaSoutheast");
        /// <summary>
        /// BrazilSouth Location for Azure
        /// </summary>
        public static AzureLocation BrazilSouth { get; } = new AzureLocation("BrazilSouth");
        /// <summary>
        /// CanadaCentral Location for Azure
        /// </summary>
        public static AzureLocation CanadaCentral { get; } = new AzureLocation("CanadaCentral");
        /// <summary>
        /// CanadaEast Location for Azure
        /// </summary>
        public static AzureLocation CanadaEast { get; } = new AzureLocation("CanadaEast");
        /// <summary>
        /// WestEurope Location for Azure
        /// </summary>
        public static AzureLocation WestEurope { get; } = new AzureLocation("WestEurope");
        /// <summary>
        /// NorthEurope Location for Azure
        /// </summary>
        public static AzureLocation NorthEurope { get; } = new AzureLocation("NorthEurope");
        /// <summary>
        /// CentralIndia Location for Azure
        /// </summary>
        public static AzureLocation CentralIndia { get; } = new AzureLocation("CentralIndia");
        /// <summary>
        /// SouthIndia Location for Azure
        /// </summary>
        public static AzureLocation SouthIndia { get; } = new AzureLocation("SouthIndia");
        /// <summary>
        /// WestIndia Location for Azure
        /// </summary>
        public static AzureLocation WestIndia { get; } = new AzureLocation("WestIndia");
        /// <summary>
        /// JapanEast Location for Azure
        /// </summary>
        public static AzureLocation JapanEast { get; } = new AzureLocation("JapanEast");
        /// <summary>
        /// JapanWest Location for Azure
        /// </summary>
        public static AzureLocation JapanWest { get; } = new AzureLocation("JapanWest");
        /// <summary>
        /// KoreaCentral Location for Azure
        /// </summary>
        public static AzureLocation KoreaCentral { get; } = new AzureLocation("KoreaCentral");
        /// <summary>
        /// KoreaSouth Location for Azure
        /// </summary>
        public static AzureLocation KoreaSouth { get; } = new AzureLocation("KoreaSouth");
        /// <summary>
        /// UkWest Location for Azure
        /// </summary>
        public static AzureLocation UkWest { get; } = new AzureLocation("UkWest");
        /// <summary>
        /// UkSouth Location for Azure
        /// </summary>
        public static AzureLocation UkSouth { get; } = new AzureLocation("UkSouth");
        /// <summary>
        /// NorthCentralUs Location for Azure
        /// </summary>
        public static AzureLocation NorthCentralUs { get; } = new AzureLocation("NorthCentralUs");
        /// <summary>
        /// EastUs Location for Azure
        /// </summary>
        public static AzureLocation EastUs { get; } = new AzureLocation("EastUs");
        /// <summary>
        /// WestUs2 Location for Azure
        /// </summary>
        public static AzureLocation WestUs2 { get; } = new AzureLocation("WestUs2");
        /// <summary>
        /// SouthCentralUs Location for Azure
        /// </summary>
        public static AzureLocation SouthCentralUs { get; } = new AzureLocation("SouthCentralUs");
        /// <summary>
        /// CentralUs Location for Azure
        /// </summary>
        public static AzureLocation CentralUs { get; } = new AzureLocation("CentralUs");
        /// <summary>
        /// EastUs2 Location for Azure
        /// </summary>
        public static AzureLocation EastUs2 { get; } = new AzureLocation("EastUs2");
        /// <summary>
        /// WestUs Location for Azure
        /// </summary>
        public static AzureLocation WestUs { get; } = new AzureLocation("WestUs");
        /// <summary>
        /// WestCentralUs Location for Azure
        /// </summary>
        public static AzureLocation WestCentralUs { get; } = new AzureLocation("WestCentralUs");
        /// <summary>
        /// GermanyCentral Location for Azure
        /// </summary>
        public static AzureLocation GermanyCentral { get; } = new AzureLocation("GermanyCentral");
        /// <summary>
        /// GermanyNortheast Location for Azure
        /// </summary>
        public static AzureLocation GermanyNortheast { get; } = new AzureLocation("GermanyNortheast");
        /// <summary>
        /// ChinaNorth Location for Azure
        /// </summary>
        public static AzureLocation ChinaNorth { get; } = new AzureLocation("ChinaNorth");
        /// <summary>
        /// ChinaEast Location for Azure
        /// </summary>
        public static AzureLocation ChinaEast { get; } = new AzureLocation("ChinaEast");
        /// <summary>
        /// USGovArizona Location for Azure
        /// </summary>
        public static AzureLocation USGovArizona { get; } = new AzureLocation("USGovArizona");
        /// <summary>
        /// USGovTexas Location for Azure
        /// </summary>
        public static AzureLocation USGovTexas { get; } = new AzureLocation("USGovTexas");
        /// <summary>
        /// USGovIowa Location for Azure
        /// </summary>
        public static AzureLocation USGovIowa { get; } = new AzureLocation("USGovIowa");
        /// <summary>
        /// USGovVirginia Location for Azure
        /// </summary>
        public static AzureLocation USGovVirginia { get; } = new AzureLocation("USGovVirginia");
        /// <summary>
        /// USDoDCentral Location for Azure
        /// </summary>
        public static AzureLocation USDoDCentral { get; } = new AzureLocation("USDoDCentral");
        /// <summary>
        /// USDoDEast Location for Azure
        /// </summary>
        public static AzureLocation USDoDEast { get; } = new AzureLocation("USDoDEast");
        /// <summary>
        /// FranceCentral Location for Azure
        /// </summary>
        public static AzureLocation FranceCentral { get; } = new AzureLocation("FranceCentral");
        /// <summary>
        /// AustraliaCentral Location for Azure
        /// </summary>
        public static AzureLocation AustraliaCentral { get; } = new AzureLocation("AustraliaCentral");
        /// <summary>
        /// SouthAfricaNorth Location for Azure
        /// </summary>
        public static AzureLocation SouthAfricaNorth { get; } = new AzureLocation("SouthAfricaNorth");
        /// <summary>
        /// FranceSouth Location for Azure
        /// </summary>
        public static AzureLocation FranceSouth { get; } = new AzureLocation("FranceSouth");
        /// <summary>
        /// AustraliaCentral2 Location for Azure
        /// </summary>
        public static AzureLocation AustraliaCentral2 { get; } = new AzureLocation("AustraliaCentral2");
        /// <summary>
        /// SouthAfricaWest Location for Azure
        /// </summary>
        public static AzureLocation SouthAfricaWest { get; } = new AzureLocation("SouthAfricaWest");
        /// <summary>
        /// GermanyNorth Location for Azure
        /// </summary>
        public static AzureLocation GermanyNorth { get; } = new AzureLocation("GermanyNorth");
        /// <summary>
        /// GermanyWestCentral Location for Azure
        /// </summary>
        public static AzureLocation GermanyWestCentral { get; } = new AzureLocation("GermanyWestCentral");
        /// <summary>
        /// NorwayEast Location for Azure
        /// </summary>
        public static AzureLocation NorwayEast { get; } = new AzureLocation("NorwayEast");
        /// <summary>
        /// NorwayWest Location for Azure
        /// </summary>
        public static AzureLocation NorwayWest { get; } = new AzureLocation("NorwayWest");
        /// <summary>
        /// ChinaEast2 Location for Azure
        /// </summary>
        public static AzureLocation ChinaEast2 { get; } = new AzureLocation("ChinaEast2");
        /// <summary>
        /// ChinaNorth2 Location for Azure
        /// </summary>
        public static AzureLocation ChinaNorth2 { get; } = new AzureLocation("ChinaNorth2");
        /// <summary>
        /// SwitzerlandNorth Location for Azure
        /// </summary>
        public static AzureLocation SwitzerlandNorth { get; } = new AzureLocation("SwitzerlandNorth");
        /// <summary>
        /// SwitzerlandWest Location for Azure
        /// </summary>
        public static AzureLocation SwitzerlandWest { get; } = new AzureLocation("SwitzerlandWest");
        /// <summary>
        /// UAENorth Location for Azure
        /// </summary>
        public static AzureLocation UAENorth { get; } = new AzureLocation("UAENorth");
        /// <summary>
        /// UAECentral Location for Azure
        /// </summary>
        public static AzureLocation UAECentral { get; } = new AzureLocation("UAECentral");
        /// <summary>
        /// UsNatEast Location for Azure
        /// </summary>
        public static AzureLocation UsNatEast { get; } = new AzureLocation("UsNatEast");
        /// <summary>
        /// UsNatWest Location for Azure
        /// </summary>
        public static AzureLocation UsNatWest { get; } = new AzureLocation("UsNatWest");
        /// <summary>
        /// UsSecEast Location for Azure
        /// </summary>
        public static AzureLocation UsSecEast { get; } = new AzureLocation("UsSecEast");
        /// <summary>
        /// UsSecCentral Location for Azure
        /// </summary>
        public static AzureLocation UsSecCentral { get; } = new AzureLocation("UsSecCentral");
        /// <summary>
        /// UsSecWest Location for Azure
        /// </summary>
        public static AzureLocation UsSecWest { get; } = new AzureLocation("UsSecWest");
        /// <summary>
        /// SwedenCentral Location for Azure
        /// </summary>
        public static AzureLocation SwedenCentral { get; } = new AzureLocation("SwedenCentral");
        /// <summary>
        /// QatarCentral Location for Azure
        /// </summary>
        public static AzureLocation QatarCentral { get; } = new AzureLocation("QatarCentral");
        /// <summary>
        /// JioIndiaWest Location for Azure
        /// </summary>
        public static AzureLocation JioIndiaWest { get; } = new AzureLocation("JioIndiaWest");
        /// <summary>
        /// ItalyNorth Location for Azure
        /// </summary>
        public static AzureLocation ItalyNorth { get; } = new AzureLocation("ItalyNorth");
        /// <summary>
        /// PolandCentral Location for Azure
        /// </summary>
        public static AzureLocation PolandCentral { get; } = new AzureLocation("PolandCentral");
        /// <summary>
        /// IsraelCentral Location for Azure
        /// </summary>
        public static AzureLocation IsraelCentral { get; } = new AzureLocation("IsraelCentral");
        /// <summary>
        /// MexicoCentral Location for Azure
        /// </summary>
        public static AzureLocation MexicoCentral { get; } = new AzureLocation("MexicoCentral");
        /// <summary>
        /// NewZealandNorth Location for Azure
        /// </summary>
        public static AzureLocation NewZealandNorth { get; } = new AzureLocation("NewZealandNorth");
        /// <summary>
        /// SpainCentral Location for Azure
        /// </summary>
        public static AzureLocation SpainCentral { get; } = new AzureLocation("SpainCentral");

        public static bool operator ==(AzureLocation left, AzureLocation right) => left.Equals(right);
        public static bool operator !=(AzureLocation left, AzureLocation right) => !left.Equals(right);

        public static explicit operator string(AzureLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureLocation other && Equals(other);
        public bool Equals(AzureLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the Azure offer code.
    /// </summary>
    [EnumType]
    public readonly struct AzureOffer : IEquatable<AzureOffer>
    {
        private readonly string _value;

        private AzureOffer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown - Azure Offer
        /// </summary>
        public static AzureOffer Unknown { get; } = new AzureOffer("Unknown");
        /// <summary>
        /// MSAZR0003P Azure Offer
        /// </summary>
        public static AzureOffer Msazr0003P { get; } = new AzureOffer("MSAZR0003P");
        /// <summary>
        /// MSAZR0023P Azure Offer
        /// </summary>
        public static AzureOffer Msazr0023P { get; } = new AzureOffer("MSAZR0023P");
        /// <summary>
        /// MSMCAZR0044P Azure Offer
        /// </summary>
        public static AzureOffer Msmcazr0044P { get; } = new AzureOffer("MSMCAZR0044P");
        /// <summary>
        /// MSMCAZR0059P Azure Offer
        /// </summary>
        public static AzureOffer Msmcazr0059P { get; } = new AzureOffer("MSMCAZR0059P");
        /// <summary>
        /// MSMCAZR0060P Azure Offer
        /// </summary>
        public static AzureOffer Msmcazr0060P { get; } = new AzureOffer("MSMCAZR0060P");
        /// <summary>
        /// MSMCAZR0063P Azure Offer
        /// </summary>
        public static AzureOffer Msmcazr0063P { get; } = new AzureOffer("MSMCAZR0063P");
        /// <summary>
        /// MSAZRUSGOV0003P Azure Offer
        /// </summary>
        public static AzureOffer Msazrusgov0003P { get; } = new AzureOffer("MSAZRUSGOV0003P");
        /// <summary>
        /// EA Azure Offer
        /// </summary>
        public static AzureOffer EA { get; } = new AzureOffer("EA");
        /// <summary>
        /// SavingsPlan1Year Azure Offer
        /// </summary>
        public static AzureOffer SavingsPlan1Year { get; } = new AzureOffer("SavingsPlan1Year");
        /// <summary>
        /// SavingsPlan3Year Azure Offer
        /// </summary>
        public static AzureOffer SavingsPlan3Year { get; } = new AzureOffer("SavingsPlan3Year");

        public static bool operator ==(AzureOffer left, AzureOffer right) => left.Equals(right);
        public static bool operator !=(AzureOffer left, AzureOffer right) => !left.Equals(right);

        public static explicit operator string(AzureOffer value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureOffer other && Equals(other);
        public bool Equals(AzureOffer other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure Offer Code.
    /// </summary>
    [EnumType]
    public readonly struct AzureOfferCode : IEquatable<AzureOfferCode>
    {
        private readonly string _value;

        private AzureOfferCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureOfferCode Unknown { get; } = new AzureOfferCode("Unknown");
        public static AzureOfferCode Msazr0003P { get; } = new AzureOfferCode("MSAZR0003P");
        public static AzureOfferCode Msazr0044P { get; } = new AzureOfferCode("MSAZR0044P");
        public static AzureOfferCode Msazr0059P { get; } = new AzureOfferCode("MSAZR0059P");
        public static AzureOfferCode Msazr0060P { get; } = new AzureOfferCode("MSAZR0060P");
        public static AzureOfferCode Msazr0062P { get; } = new AzureOfferCode("MSAZR0062P");
        public static AzureOfferCode Msazr0063P { get; } = new AzureOfferCode("MSAZR0063P");
        public static AzureOfferCode Msazr0064P { get; } = new AzureOfferCode("MSAZR0064P");
        public static AzureOfferCode Msazr0029P { get; } = new AzureOfferCode("MSAZR0029P");
        public static AzureOfferCode Msazr0022P { get; } = new AzureOfferCode("MSAZR0022P");
        public static AzureOfferCode Msazr0023P { get; } = new AzureOfferCode("MSAZR0023P");
        public static AzureOfferCode Msazr0148P { get; } = new AzureOfferCode("MSAZR0148P");
        public static AzureOfferCode Msazr0025P { get; } = new AzureOfferCode("MSAZR0025P");
        public static AzureOfferCode Msazr0036P { get; } = new AzureOfferCode("MSAZR0036P");
        public static AzureOfferCode Msazr0120P { get; } = new AzureOfferCode("MSAZR0120P");
        public static AzureOfferCode Msazr0121P { get; } = new AzureOfferCode("MSAZR0121P");
        public static AzureOfferCode Msazr0122P { get; } = new AzureOfferCode("MSAZR0122P");
        public static AzureOfferCode Msazr0123P { get; } = new AzureOfferCode("MSAZR0123P");
        public static AzureOfferCode Msazr0124P { get; } = new AzureOfferCode("MSAZR0124P");
        public static AzureOfferCode Msazr0125P { get; } = new AzureOfferCode("MSAZR0125P");
        public static AzureOfferCode Msazr0126P { get; } = new AzureOfferCode("MSAZR0126P");
        public static AzureOfferCode Msazr0127P { get; } = new AzureOfferCode("MSAZR0127P");
        public static AzureOfferCode Msazr0128P { get; } = new AzureOfferCode("MSAZR0128P");
        public static AzureOfferCode Msazr0129P { get; } = new AzureOfferCode("MSAZR0129P");
        public static AzureOfferCode Msazr0130P { get; } = new AzureOfferCode("MSAZR0130P");
        public static AzureOfferCode Msazr0111P { get; } = new AzureOfferCode("MSAZR0111P");
        public static AzureOfferCode Msazr0144P { get; } = new AzureOfferCode("MSAZR0144P");
        public static AzureOfferCode Msazr0149P { get; } = new AzureOfferCode("MSAZR0149P");
        public static AzureOfferCode Msmcazr0044P { get; } = new AzureOfferCode("MSMCAZR0044P");
        public static AzureOfferCode Msmcazr0059P { get; } = new AzureOfferCode("MSMCAZR0059P");
        public static AzureOfferCode Msmcazr0060P { get; } = new AzureOfferCode("MSMCAZR0060P");
        public static AzureOfferCode Msmcazr0063P { get; } = new AzureOfferCode("MSMCAZR0063P");
        public static AzureOfferCode Msmcazr0120P { get; } = new AzureOfferCode("MSMCAZR0120P");
        public static AzureOfferCode Msmcazr0121P { get; } = new AzureOfferCode("MSMCAZR0121P");
        public static AzureOfferCode Msmcazr0125P { get; } = new AzureOfferCode("MSMCAZR0125P");
        public static AzureOfferCode Msmcazr0128P { get; } = new AzureOfferCode("MSMCAZR0128P");
        public static AzureOfferCode Msazrde0003P { get; } = new AzureOfferCode("MSAZRDE0003P");
        public static AzureOfferCode Msazrde0044P { get; } = new AzureOfferCode("MSAZRDE0044P");
        public static AzureOfferCode Msazrusgov0003P { get; } = new AzureOfferCode("MSAZRUSGOV0003P");
        public static AzureOfferCode EA { get; } = new AzureOfferCode("EA");
        public static AzureOfferCode Msazr0243P { get; } = new AzureOfferCode("MSAZR0243P");
        public static AzureOfferCode SavingsPlan1Year { get; } = new AzureOfferCode("SavingsPlan1Year");
        public static AzureOfferCode SavingsPlan3Year { get; } = new AzureOfferCode("SavingsPlan3Year");

        public static bool operator ==(AzureOfferCode left, AzureOfferCode right) => left.Equals(right);
        public static bool operator !=(AzureOfferCode left, AzureOfferCode right) => !left.Equals(right);

        public static explicit operator string(AzureOfferCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureOfferCode other && Equals(other);
        public bool Equals(AzureOfferCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets Azure Pricing Tier - Free, Basic, etc.
    /// </summary>
    [EnumType]
    public readonly struct AzurePricingTier : IEquatable<AzurePricingTier>
    {
        private readonly string _value;

        private AzurePricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard Azure Pricing Tier
        /// </summary>
        public static AzurePricingTier Standard { get; } = new AzurePricingTier("Standard");
        /// <summary>
        /// Basic Azure Pricing Tier
        /// </summary>
        public static AzurePricingTier Basic { get; } = new AzurePricingTier("Basic");

        public static bool operator ==(AzurePricingTier left, AzurePricingTier right) => left.Equals(right);
        public static bool operator !=(AzurePricingTier left, AzurePricingTier right) => !left.Equals(right);

        public static explicit operator string(AzurePricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzurePricingTier other && Equals(other);
        public bool Equals(AzurePricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Reserved instance.
    /// </summary>
    [EnumType]
    public readonly struct AzureReservedInstance : IEquatable<AzureReservedInstance>
    {
        private readonly string _value;

        private AzureReservedInstance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureReservedInstance None { get; } = new AzureReservedInstance("None");
        public static AzureReservedInstance RI1Year { get; } = new AzureReservedInstance("RI1Year");
        public static AzureReservedInstance RI3Year { get; } = new AzureReservedInstance("RI3Year");

        public static bool operator ==(AzureReservedInstance left, AzureReservedInstance right) => left.Equals(right);
        public static bool operator !=(AzureReservedInstance left, AzureReservedInstance right) => !left.Equals(right);

        public static explicit operator string(AzureReservedInstance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureReservedInstance other && Equals(other);
        public bool Equals(AzureReservedInstance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure security offering type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSecurityOfferingType : IEquatable<AzureSecurityOfferingType>
    {
        private readonly string _value;

        private AzureSecurityOfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// NO - Azure Security Offering Type
        /// </summary>
        public static AzureSecurityOfferingType NO { get; } = new AzureSecurityOfferingType("NO");
        /// <summary>
        /// MDC - Azure Security Offering Type
        /// </summary>
        public static AzureSecurityOfferingType MDC { get; } = new AzureSecurityOfferingType("MDC");

        public static bool operator ==(AzureSecurityOfferingType left, AzureSecurityOfferingType right) => left.Equals(right);
        public static bool operator !=(AzureSecurityOfferingType left, AzureSecurityOfferingType right) => !left.Equals(right);

        public static explicit operator string(AzureSecurityOfferingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSecurityOfferingType other && Equals(other);
        public bool Equals(AzureSecurityOfferingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure PAAS SQL instance type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlDataBaseType : IEquatable<AzureSqlDataBaseType>
    {
        private readonly string _value;

        private AzureSqlDataBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Data Base Type
        /// </summary>
        public static AzureSqlDataBaseType Unknown { get; } = new AzureSqlDataBaseType("Unknown");
        /// <summary>
        /// Automatic Data Base Type
        /// </summary>
        public static AzureSqlDataBaseType Automatic { get; } = new AzureSqlDataBaseType("Automatic");
        /// <summary>
        /// SingleDatabase Data Base Type
        /// </summary>
        public static AzureSqlDataBaseType SingleDatabase { get; } = new AzureSqlDataBaseType("SingleDatabase");
        /// <summary>
        /// ElasticPool Data Base Type
        /// </summary>
        public static AzureSqlDataBaseType ElasticPool { get; } = new AzureSqlDataBaseType("ElasticPool");

        public static bool operator ==(AzureSqlDataBaseType left, AzureSqlDataBaseType right) => left.Equals(right);
        public static bool operator !=(AzureSqlDataBaseType left, AzureSqlDataBaseType right) => !left.Equals(right);

        public static explicit operator string(AzureSqlDataBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlDataBaseType other && Equals(other);
        public bool Equals(AzureSqlDataBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure PAAS SQL instance type.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlInstanceType : IEquatable<AzureSqlInstanceType>
    {
        private readonly string _value;

        private AzureSqlInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Azure Sql Instance Type
        /// </summary>
        public static AzureSqlInstanceType Unknown { get; } = new AzureSqlInstanceType("Unknown");
        /// <summary>
        /// Automatic Azure Sql Instance Type
        /// </summary>
        public static AzureSqlInstanceType Automatic { get; } = new AzureSqlInstanceType("Automatic");
        /// <summary>
        /// SingleInstance Azure Sql Instance Type
        /// </summary>
        public static AzureSqlInstanceType SingleInstance { get; } = new AzureSqlInstanceType("SingleInstance");
        /// <summary>
        /// InstancePools Azure Sql Instance Type
        /// </summary>
        public static AzureSqlInstanceType InstancePools { get; } = new AzureSqlInstanceType("InstancePools");

        public static bool operator ==(AzureSqlInstanceType left, AzureSqlInstanceType right) => left.Equals(right);
        public static bool operator !=(AzureSqlInstanceType left, AzureSqlInstanceType right) => !left.Equals(right);

        public static explicit operator string(AzureSqlInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlInstanceType other && Equals(other);
        public bool Equals(AzureSqlInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL purchase model.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlPurchaseModel : IEquatable<AzureSqlPurchaseModel>
    {
        private readonly string _value;

        private AzureSqlPurchaseModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Purchase Model
        /// </summary>
        public static AzureSqlPurchaseModel Unknown { get; } = new AzureSqlPurchaseModel("Unknown");
        /// <summary>
        /// VCore Purchase Model
        /// </summary>
        public static AzureSqlPurchaseModel VCore { get; } = new AzureSqlPurchaseModel("VCore");
        /// <summary>
        /// DTU Purchase Model
        /// </summary>
        public static AzureSqlPurchaseModel DTU { get; } = new AzureSqlPurchaseModel("DTU");

        public static bool operator ==(AzureSqlPurchaseModel left, AzureSqlPurchaseModel right) => left.Equals(right);
        public static bool operator !=(AzureSqlPurchaseModel left, AzureSqlPurchaseModel right) => !left.Equals(right);

        public static explicit operator string(AzureSqlPurchaseModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlPurchaseModel other && Equals(other);
        public bool Equals(AzureSqlPurchaseModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL service tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlServiceTier : IEquatable<AzureSqlServiceTier>
    {
        private readonly string _value;

        private AzureSqlServiceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSqlServiceTier Unknown { get; } = new AzureSqlServiceTier("Unknown");
        public static AzureSqlServiceTier Automatic { get; } = new AzureSqlServiceTier("Automatic");
        public static AzureSqlServiceTier GeneralPurpose { get; } = new AzureSqlServiceTier("GeneralPurpose");
        public static AzureSqlServiceTier BusinessCritical { get; } = new AzureSqlServiceTier("BusinessCritical");
        public static AzureSqlServiceTier HyperScale { get; } = new AzureSqlServiceTier("HyperScale");

        public static bool operator ==(AzureSqlServiceTier left, AzureSqlServiceTier right) => left.Equals(right);
        public static bool operator !=(AzureSqlServiceTier left, AzureSqlServiceTier right) => !left.Equals(right);

        public static explicit operator string(AzureSqlServiceTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlServiceTier other && Equals(other);
        public bool Equals(AzureSqlServiceTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL service tier.
    /// </summary>
    [EnumType]
    public readonly struct AzureSqlServiceTierV3 : IEquatable<AzureSqlServiceTierV3>
    {
        private readonly string _value;

        private AzureSqlServiceTierV3(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SqlService_Unknown Sql Service Tier V3
        /// </summary>
        public static AzureSqlServiceTierV3 SqlService_Unknown { get; } = new AzureSqlServiceTierV3("SqlService_Unknown");
        /// <summary>
        /// SqlService_Automatic Sql Service Tier V3
        /// </summary>
        public static AzureSqlServiceTierV3 SqlService_Automatic { get; } = new AzureSqlServiceTierV3("SqlService_Automatic");
        /// <summary>
        /// SqlService_GeneralPurpose Sql Service Tier V3
        /// </summary>
        public static AzureSqlServiceTierV3 SqlService_GeneralPurpose { get; } = new AzureSqlServiceTierV3("SqlService_GeneralPurpose");
        /// <summary>
        /// SqlService_BusinessCritical Sql Service Tier V3
        /// </summary>
        public static AzureSqlServiceTierV3 SqlService_BusinessCritical { get; } = new AzureSqlServiceTierV3("SqlService_BusinessCritical");
        /// <summary>
        /// SqlService_HyperScale Sql Service Tier V3
        /// </summary>
        public static AzureSqlServiceTierV3 SqlService_HyperScale { get; } = new AzureSqlServiceTierV3("SqlService_HyperScale");

        public static bool operator ==(AzureSqlServiceTierV3 left, AzureSqlServiceTierV3 right) => left.Equals(right);
        public static bool operator !=(AzureSqlServiceTierV3 left, AzureSqlServiceTierV3 right) => !left.Equals(right);

        public static explicit operator string(AzureSqlServiceTierV3 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSqlServiceTierV3 other && Equals(other);
        public bool Equals(AzureSqlServiceTierV3 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the Azure Storage Redundancy. Example: Locally Redundant Storage.
    /// </summary>
    [EnumType]
    public readonly struct AzureStorageRedundancy : IEquatable<AzureStorageRedundancy>
    {
        private readonly string _value;

        private AzureStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Azure Storage Redundancy
        /// </summary>
        public static AzureStorageRedundancy Unknown { get; } = new AzureStorageRedundancy("Unknown");
        /// <summary>
        /// LocallyRedundant Azure Storage Redundancy
        /// </summary>
        public static AzureStorageRedundancy LocallyRedundant { get; } = new AzureStorageRedundancy("LocallyRedundant");
        /// <summary>
        /// ZoneRedundant Azure Storage Redundancy
        /// </summary>
        public static AzureStorageRedundancy ZoneRedundant { get; } = new AzureStorageRedundancy("ZoneRedundant");
        /// <summary>
        /// GeoRedundant Azure Storage Redundancy
        /// </summary>
        public static AzureStorageRedundancy GeoRedundant { get; } = new AzureStorageRedundancy("GeoRedundant");
        /// <summary>
        /// ReadAccessGeoRedundant Azure Storage Redundancy
        /// </summary>
        public static AzureStorageRedundancy ReadAccessGeoRedundant { get; } = new AzureStorageRedundancy("ReadAccessGeoRedundant");

        public static bool operator ==(AzureStorageRedundancy left, AzureStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(AzureStorageRedundancy left, AzureStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(AzureStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureStorageRedundancy other && Equals(other);
        public bool Equals(AzureStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure Target
    /// </summary>
    [EnumType]
    public readonly struct AzureTarget : IEquatable<AzureTarget>
    {
        private readonly string _value;

        private AzureTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown - Azure Target
        /// </summary>
        public static AzureTarget Unknown { get; } = new AzureTarget("Unknown");
        /// <summary>
        /// SqlDatabase - Azure Target
        /// </summary>
        public static AzureTarget SqlDatabase { get; } = new AzureTarget("SqlDatabase");
        /// <summary>
        /// SqlMI - Azure Target
        /// </summary>
        public static AzureTarget SqlMI { get; } = new AzureTarget("SqlMI");
        /// <summary>
        /// FlexServerPG - Azure Target
        /// </summary>
        public static AzureTarget FlexServerPG { get; } = new AzureTarget("FlexServerPG");
        /// <summary>
        /// OracleIaasVM - Azure Target
        /// </summary>
        public static AzureTarget OracleIaasVM { get; } = new AzureTarget("OracleIaasVM");
        /// <summary>
        /// AzureSpringApps - Azure Target
        /// </summary>
        public static AzureTarget AzureSpringApps { get; } = new AzureTarget("AzureSpringApps");
        /// <summary>
        /// SAPAzureInstance - Azure Target
        /// </summary>
        public static AzureTarget SAPAzureInstance { get; } = new AzureTarget("SAPAzureInstance");
        /// <summary>
        /// AKS - Azure Target
        /// </summary>
        public static AzureTarget AKS { get; } = new AzureTarget("AKS");
        /// <summary>
        /// MySQLAzureFlexServer - Azure Target
        /// </summary>
        public static AzureTarget MySQLAzureFlexServer { get; } = new AzureTarget("MySQLAzureFlexServer");
        /// <summary>
        /// AzureSQLVM - Azure Target
        /// </summary>
        public static AzureTarget AzureSQLVM { get; } = new AzureTarget("AzureSQLVM");
        /// <summary>
        /// AzureVM - Azure Target
        /// </summary>
        public static AzureTarget AzureVM { get; } = new AzureTarget("AzureVM");
        /// <summary>
        /// AzureAppService - Azure Target
        /// </summary>
        public static AzureTarget AzureAppService { get; } = new AzureTarget("AzureAppService");
        /// <summary>
        /// AzureAppServiceContainer - Azure Target
        /// </summary>
        public static AzureTarget AzureAppServiceContainer { get; } = new AzureTarget("AzureAppServiceContainer");
        /// <summary>
        /// Avs - Azure Target
        /// </summary>
        public static AzureTarget Avs { get; } = new AzureTarget("Avs");

        public static bool operator ==(AzureTarget left, AzureTarget right) => left.Equals(right);
        public static bool operator !=(AzureTarget left, AzureTarget right) => !left.Equals(right);

        public static explicit operator string(AzureTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureTarget other && Equals(other);
        public bool Equals(AzureTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets azure VM category.
    /// </summary>
    [EnumType]
    public readonly struct AzureVmCategory : IEquatable<AzureVmCategory>
    {
        private readonly string _value;

        private AzureVmCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates All categories of VM.
        /// </summary>
        public static AzureVmCategory All { get; } = new AzureVmCategory("All");
        /// <summary>
        /// Compute Optimized.
        /// </summary>
        public static AzureVmCategory ComputeOptimized { get; } = new AzureVmCategory("ComputeOptimized");
        /// <summary>
        /// General Purpose.
        /// </summary>
        public static AzureVmCategory GeneralPurpose { get; } = new AzureVmCategory("GeneralPurpose");
        /// <summary>
        /// GPU Optimized.
        /// </summary>
        public static AzureVmCategory GpuOptimized { get; } = new AzureVmCategory("GpuOptimized");
        /// <summary>
        /// High Performance Compute.
        /// </summary>
        public static AzureVmCategory HighPerformanceCompute { get; } = new AzureVmCategory("HighPerformanceCompute");
        /// <summary>
        /// Memory Optimized.
        /// </summary>
        public static AzureVmCategory MemoryOptimized { get; } = new AzureVmCategory("MemoryOptimized");
        /// <summary>
        /// Storage Optimized.
        /// </summary>
        public static AzureVmCategory StorageOptimized { get; } = new AzureVmCategory("StorageOptimized");
        /// <summary>
        /// Isolated VM.
        /// </summary>
        public static AzureVmCategory Isolated { get; } = new AzureVmCategory("Isolated");

        public static bool operator ==(AzureVmCategory left, AzureVmCategory right) => left.Equals(right);
        public static bool operator !=(AzureVmCategory left, AzureVmCategory right) => !left.Equals(right);

        public static explicit operator string(AzureVmCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureVmCategory other && Equals(other);
        public bool Equals(AzureVmCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure VM Family
    /// </summary>
    [EnumType]
    public readonly struct AzureVmFamily : IEquatable<AzureVmFamily>
    {
        private readonly string _value;

        private AzureVmFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown - Azure VM Family
        /// </summary>
        public static AzureVmFamily Unknown { get; } = new AzureVmFamily("Unknown");
        /// <summary>
        /// Basic_A0_A4
        /// </summary>
        public static AzureVmFamily BasicA0A4 { get; } = new AzureVmFamily("Basic_A0_A4");
        /// <summary>
        /// Standard_A0_A7
        /// </summary>
        public static AzureVmFamily StandardA0A7 { get; } = new AzureVmFamily("Standard_A0_A7");
        /// <summary>
        /// Standard_A8_A11
        /// </summary>
        public static AzureVmFamily StandardA8A11 { get; } = new AzureVmFamily("Standard_A8_A11");
        /// <summary>
        /// Av2_series
        /// </summary>
        public static AzureVmFamily Av2Series { get; } = new AzureVmFamily("Av2_series");
        /// <summary>
        /// D_series
        /// </summary>
        public static AzureVmFamily DSeries { get; } = new AzureVmFamily("D_series");
        /// <summary>
        /// Dv2_series
        /// </summary>
        public static AzureVmFamily Dv2Series { get; } = new AzureVmFamily("Dv2_series");
        /// <summary>
        /// DS_series
        /// </summary>
        public static AzureVmFamily DSSeries { get; } = new AzureVmFamily("DS_series");
        /// <summary>
        /// DSv2_series
        /// </summary>
        public static AzureVmFamily DSv2Series { get; } = new AzureVmFamily("DSv2_series");
        /// <summary>
        /// F_series
        /// </summary>
        public static AzureVmFamily FSeries { get; } = new AzureVmFamily("F_series");
        /// <summary>
        /// Fs_series
        /// </summary>
        public static AzureVmFamily FsSeries { get; } = new AzureVmFamily("Fs_series");
        /// <summary>
        /// G_series
        /// </summary>
        public static AzureVmFamily GSeries { get; } = new AzureVmFamily("G_series");
        /// <summary>
        /// GS_series
        /// </summary>
        public static AzureVmFamily GSSeries { get; } = new AzureVmFamily("GS_series");
        /// <summary>
        /// H_series
        /// </summary>
        public static AzureVmFamily HSeries { get; } = new AzureVmFamily("H_series");
        /// <summary>
        /// Ls_series
        /// </summary>
        public static AzureVmFamily LsSeries { get; } = new AzureVmFamily("Ls_series");
        /// <summary>
        /// Dsv3_series
        /// </summary>
        public static AzureVmFamily Dsv3Series { get; } = new AzureVmFamily("Dsv3_series");
        /// <summary>
        /// Dv3_series
        /// </summary>
        public static AzureVmFamily Dv3Series { get; } = new AzureVmFamily("Dv3_series");
        /// <summary>
        /// Fsv2_series
        /// </summary>
        public static AzureVmFamily Fsv2Series { get; } = new AzureVmFamily("Fsv2_series");
        /// <summary>
        /// Ev3_series
        /// </summary>
        public static AzureVmFamily Ev3Series { get; } = new AzureVmFamily("Ev3_series");
        /// <summary>
        /// Esv3_series
        /// </summary>
        public static AzureVmFamily Esv3Series { get; } = new AzureVmFamily("Esv3_series");
        /// <summary>
        /// M_series
        /// </summary>
        public static AzureVmFamily MSeries { get; } = new AzureVmFamily("M_series");
        /// <summary>
        /// DC_Series
        /// </summary>
        public static AzureVmFamily DCSeries { get; } = new AzureVmFamily("DC_Series");
        /// <summary>
        /// Lsv2_series
        /// </summary>
        public static AzureVmFamily Lsv2Series { get; } = new AzureVmFamily("Lsv2_series");
        /// <summary>
        /// Ev4_series
        /// </summary>
        public static AzureVmFamily Ev4Series { get; } = new AzureVmFamily("Ev4_series");
        /// <summary>
        /// Esv4_series
        /// </summary>
        public static AzureVmFamily Esv4Series { get; } = new AzureVmFamily("Esv4_series");
        /// <summary>
        /// Edv4_series
        /// </summary>
        public static AzureVmFamily Edv4Series { get; } = new AzureVmFamily("Edv4_series");
        /// <summary>
        /// Edsv4_series
        /// </summary>
        public static AzureVmFamily Edsv4Series { get; } = new AzureVmFamily("Edsv4_series");
        /// <summary>
        /// Dv4_series
        /// </summary>
        public static AzureVmFamily Dv4Series { get; } = new AzureVmFamily("Dv4_series");
        /// <summary>
        /// Dsv4_series
        /// </summary>
        public static AzureVmFamily Dsv4Series { get; } = new AzureVmFamily("Dsv4_series");
        /// <summary>
        /// Ddv4_series
        /// </summary>
        public static AzureVmFamily Ddv4Series { get; } = new AzureVmFamily("Ddv4_series");
        /// <summary>
        /// Ddsv4_series
        /// </summary>
        public static AzureVmFamily Ddsv4Series { get; } = new AzureVmFamily("Ddsv4_series");
        /// <summary>
        /// Easv4_series
        /// </summary>
        public static AzureVmFamily Easv4Series { get; } = new AzureVmFamily("Easv4_series");
        /// <summary>
        /// Dasv4_series
        /// </summary>
        public static AzureVmFamily Dasv4Series { get; } = new AzureVmFamily("Dasv4_series");
        /// <summary>
        /// Mv2_series
        /// </summary>
        public static AzureVmFamily Mv2Series { get; } = new AzureVmFamily("Mv2_series");
        /// <summary>
        /// Eav4_series
        /// </summary>
        public static AzureVmFamily Eav4Series { get; } = new AzureVmFamily("Eav4_series");
        /// <summary>
        /// Dav4_series
        /// </summary>
        public static AzureVmFamily Dav4Series { get; } = new AzureVmFamily("Dav4_series");
        /// <summary>
        /// Msv2_series
        /// </summary>
        public static AzureVmFamily Msv2Series { get; } = new AzureVmFamily("Msv2_series");
        /// <summary>
        /// Mdsv2_series
        /// </summary>
        public static AzureVmFamily Mdsv2Series { get; } = new AzureVmFamily("Mdsv2_series");
        /// <summary>
        /// Dv5_series
        /// </summary>
        public static AzureVmFamily Dv5Series { get; } = new AzureVmFamily("Dv5_series");
        /// <summary>
        /// Dsv5_series
        /// </summary>
        public static AzureVmFamily Dsv5Series { get; } = new AzureVmFamily("Dsv5_series");
        /// <summary>
        /// Ddv5_series
        /// </summary>
        public static AzureVmFamily Ddv5Series { get; } = new AzureVmFamily("Ddv5_series");
        /// <summary>
        /// Ddsv5_series
        /// </summary>
        public static AzureVmFamily Ddsv5Series { get; } = new AzureVmFamily("Ddsv5_series");
        /// <summary>
        /// Dasv5_series
        /// </summary>
        public static AzureVmFamily Dasv5Series { get; } = new AzureVmFamily("Dasv5_series");
        /// <summary>
        /// Dadsv5_series
        /// </summary>
        public static AzureVmFamily Dadsv5Series { get; } = new AzureVmFamily("Dadsv5_series");
        /// <summary>
        /// Ev5_series
        /// </summary>
        public static AzureVmFamily Ev5Series { get; } = new AzureVmFamily("Ev5_series");
        /// <summary>
        /// Esv5_series
        /// </summary>
        public static AzureVmFamily Esv5Series { get; } = new AzureVmFamily("Esv5_series");
        /// <summary>
        /// Edv5_series
        /// </summary>
        public static AzureVmFamily Edv5Series { get; } = new AzureVmFamily("Edv5_series");
        /// <summary>
        /// Edsv5_series
        /// </summary>
        public static AzureVmFamily Edsv5Series { get; } = new AzureVmFamily("Edsv5_series");
        /// <summary>
        /// Easv5_series
        /// </summary>
        public static AzureVmFamily Easv5Series { get; } = new AzureVmFamily("Easv5_series");
        /// <summary>
        /// Eadsv5_series
        /// </summary>
        public static AzureVmFamily Eadsv5Series { get; } = new AzureVmFamily("Eadsv5_series");
        /// <summary>
        /// Ebsv5_series
        /// </summary>
        public static AzureVmFamily Ebsv5Series { get; } = new AzureVmFamily("Ebsv5_series");
        /// <summary>
        /// Ebdsv5_series
        /// </summary>
        public static AzureVmFamily Ebdsv5Series { get; } = new AzureVmFamily("Ebdsv5_series");

        public static bool operator ==(AzureVmFamily left, AzureVmFamily right) => left.Equals(right);
        public static bool operator !=(AzureVmFamily left, AzureVmFamily right) => !left.Equals(right);

        public static explicit operator string(AzureVmFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureVmFamily other && Equals(other);
        public bool Equals(AzureVmFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Business case Currency.
    /// </summary>
    [EnumType]
    public readonly struct BusinessCaseCurrency : IEquatable<BusinessCaseCurrency>
    {
        private readonly string _value;

        private BusinessCaseCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Currency Unknown.
        /// </summary>
        public static BusinessCaseCurrency Unknown { get; } = new BusinessCaseCurrency("Unknown");
        /// <summary>
        /// Currency USD.
        /// </summary>
        public static BusinessCaseCurrency USD { get; } = new BusinessCaseCurrency("USD");
        /// <summary>
        /// Currency DKK.
        /// </summary>
        public static BusinessCaseCurrency DKK { get; } = new BusinessCaseCurrency("DKK");
        /// <summary>
        /// Currency CAD.
        /// </summary>
        public static BusinessCaseCurrency CAD { get; } = new BusinessCaseCurrency("CAD");
        /// <summary>
        /// Currency IDR.
        /// </summary>
        public static BusinessCaseCurrency IDR { get; } = new BusinessCaseCurrency("IDR");
        /// <summary>
        /// Currency JPY.
        /// </summary>
        public static BusinessCaseCurrency JPY { get; } = new BusinessCaseCurrency("JPY");
        /// <summary>
        /// Currency KRW.
        /// </summary>
        public static BusinessCaseCurrency KRW { get; } = new BusinessCaseCurrency("KRW");
        /// <summary>
        /// Currency NZD.
        /// </summary>
        public static BusinessCaseCurrency NZD { get; } = new BusinessCaseCurrency("NZD");
        /// <summary>
        /// Currency NOK.
        /// </summary>
        public static BusinessCaseCurrency NOK { get; } = new BusinessCaseCurrency("NOK");
        /// <summary>
        /// Currency RUB.
        /// </summary>
        public static BusinessCaseCurrency RUB { get; } = new BusinessCaseCurrency("RUB");
        /// <summary>
        /// Currency SAR.
        /// </summary>
        public static BusinessCaseCurrency SAR { get; } = new BusinessCaseCurrency("SAR");
        /// <summary>
        /// Currency ZAR.
        /// </summary>
        public static BusinessCaseCurrency ZAR { get; } = new BusinessCaseCurrency("ZAR");
        /// <summary>
        /// Currency SEK.
        /// </summary>
        public static BusinessCaseCurrency SEK { get; } = new BusinessCaseCurrency("SEK");
        /// <summary>
        /// Currency TRY.
        /// </summary>
        public static BusinessCaseCurrency TRY { get; } = new BusinessCaseCurrency("TRY");
        /// <summary>
        /// Currency GBP.
        /// </summary>
        public static BusinessCaseCurrency GBP { get; } = new BusinessCaseCurrency("GBP");
        /// <summary>
        /// Currency MXN.
        /// </summary>
        public static BusinessCaseCurrency MXN { get; } = new BusinessCaseCurrency("MXN");
        /// <summary>
        /// Currency MYR.
        /// </summary>
        public static BusinessCaseCurrency MYR { get; } = new BusinessCaseCurrency("MYR");
        /// <summary>
        /// Currency INR.
        /// </summary>
        public static BusinessCaseCurrency INR { get; } = new BusinessCaseCurrency("INR");
        /// <summary>
        /// Currency HKD.
        /// </summary>
        public static BusinessCaseCurrency HKD { get; } = new BusinessCaseCurrency("HKD");
        /// <summary>
        /// Currency BRL.
        /// </summary>
        public static BusinessCaseCurrency BRL { get; } = new BusinessCaseCurrency("BRL");
        /// <summary>
        /// Currency TWD.
        /// </summary>
        public static BusinessCaseCurrency TWD { get; } = new BusinessCaseCurrency("TWD");
        /// <summary>
        /// Currency EUR.
        /// </summary>
        public static BusinessCaseCurrency EUR { get; } = new BusinessCaseCurrency("EUR");
        /// <summary>
        /// Currency CHF.
        /// </summary>
        public static BusinessCaseCurrency CHF { get; } = new BusinessCaseCurrency("CHF");
        /// <summary>
        /// Currency ARS.
        /// </summary>
        public static BusinessCaseCurrency ARS { get; } = new BusinessCaseCurrency("ARS");
        /// <summary>
        /// Currency AUD.
        /// </summary>
        public static BusinessCaseCurrency AUD { get; } = new BusinessCaseCurrency("AUD");
        /// <summary>
        /// Currency CNY.
        /// </summary>
        public static BusinessCaseCurrency CNY { get; } = new BusinessCaseCurrency("CNY");

        public static bool operator ==(BusinessCaseCurrency left, BusinessCaseCurrency right) => left.Equals(right);
        public static bool operator !=(BusinessCaseCurrency left, BusinessCaseCurrency right) => !left.Equals(right);

        public static explicit operator string(BusinessCaseCurrency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BusinessCaseCurrency other && Equals(other);
        public bool Equals(BusinessCaseCurrency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the azure SQL compute tier.
    /// </summary>
    [EnumType]
    public readonly struct ComputeTier : IEquatable<ComputeTier>
    {
        private readonly string _value;

        private ComputeTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown - Compute Tier
        /// </summary>
        public static ComputeTier Unknown { get; } = new ComputeTier("Unknown");
        /// <summary>
        /// Automatic - Compute Tier
        /// </summary>
        public static ComputeTier Automatic { get; } = new ComputeTier("Automatic");
        /// <summary>
        /// Provisioned - Compute Tier
        /// </summary>
        public static ComputeTier Provisioned { get; } = new ComputeTier("Provisioned");
        /// <summary>
        /// Serverless - Compute Tier
        /// </summary>
        public static ComputeTier Serverless { get; } = new ComputeTier("Serverless");

        public static bool operator ==(ComputeTier left, ComputeTier right) => left.Equals(right);
        public static bool operator !=(ComputeTier left, ComputeTier right) => !left.Equals(right);

        public static explicit operator string(ComputeTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ComputeTier other && Equals(other);
        public bool Equals(ComputeTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the configuration type.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType IISConnectionString { get; } = new ConfigurationType("IISConnectionString");
        public static ConfigurationType IISAuthentication { get; } = new ConfigurationType("IISAuthentication");
        public static ConfigurationType ApacheTomcatContextResource { get; } = new ConfigurationType("ApacheTomcatContextResource");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets consolidation type.
    /// </summary>
    [EnumType]
    public readonly struct ConsolidationType : IEquatable<ConsolidationType>
    {
        private readonly string _value;

        private ConsolidationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Full Consolidation.
        /// </summary>
        public static ConsolidationType Full { get; } = new ConsolidationType("Full");
        /// <summary>
        /// As On Source or On Premises Consolidation.
        /// </summary>
        public static ConsolidationType AsOnSource { get; } = new ConsolidationType("AsOnSource");

        public static bool operator ==(ConsolidationType left, ConsolidationType right) => left.Equals(right);
        public static bool operator !=(ConsolidationType left, ConsolidationType right) => !left.Equals(right);

        public static explicit operator string(ConsolidationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConsolidationType other && Equals(other);
        public bool Equals(ConsolidationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Currency to report prices in.
    /// </summary>
    [EnumType]
    public readonly struct Currency : IEquatable<Currency>
    {
        private readonly string _value;

        private Currency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Currency Unknown { get; } = new Currency("Unknown");
        public static Currency USD { get; } = new Currency("USD");
        public static Currency DKK { get; } = new Currency("DKK");
        public static Currency CAD { get; } = new Currency("CAD");
        public static Currency IDR { get; } = new Currency("IDR");
        public static Currency JPY { get; } = new Currency("JPY");
        public static Currency KRW { get; } = new Currency("KRW");
        public static Currency NZD { get; } = new Currency("NZD");
        public static Currency NOK { get; } = new Currency("NOK");
        public static Currency RUB { get; } = new Currency("RUB");
        public static Currency SAR { get; } = new Currency("SAR");
        public static Currency ZAR { get; } = new Currency("ZAR");
        public static Currency SEK { get; } = new Currency("SEK");
        public static Currency TRY { get; } = new Currency("TRY");
        public static Currency GBP { get; } = new Currency("GBP");
        public static Currency MXN { get; } = new Currency("MXN");
        public static Currency MYR { get; } = new Currency("MYR");
        public static Currency INR { get; } = new Currency("INR");
        public static Currency HKD { get; } = new Currency("HKD");
        public static Currency BRL { get; } = new Currency("BRL");
        public static Currency TWD { get; } = new Currency("TWD");
        public static Currency EUR { get; } = new Currency("EUR");
        public static Currency CHF { get; } = new Currency("CHF");
        public static Currency ARS { get; } = new Currency("ARS");
        public static Currency AUD { get; } = new Currency("AUD");
        public static Currency CNY { get; } = new Currency("CNY");

        public static bool operator ==(Currency left, Currency right) => left.Equals(right);
        public static bool operator !=(Currency left, Currency right) => !left.Equals(right);

        public static explicit operator string(Currency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Currency other && Equals(other);
        public bool Equals(Currency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Workload discovery source.
    /// </summary>
    [EnumType]
    public readonly struct DiscoverySource : IEquatable<DiscoverySource>
    {
        private readonly string _value;

        private DiscoverySource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Discovery Source.
        /// </summary>
        public static DiscoverySource Unknown { get; } = new DiscoverySource("Unknown");
        /// <summary>
        /// Appliance Discovery Source.
        /// </summary>
        public static DiscoverySource Appliance { get; } = new DiscoverySource("Appliance");
        /// <summary>
        /// Import Discovery Source.
        /// </summary>
        public static DiscoverySource Import { get; } = new DiscoverySource("Import");

        public static bool operator ==(DiscoverySource left, DiscoverySource right) => left.Equals(right);
        public static bool operator !=(DiscoverySource left, DiscoverySource right) => !left.Equals(right);

        public static explicit operator string(DiscoverySource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiscoverySource other && Equals(other);
        public bool Equals(DiscoverySource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user configurable setting to display the environment type.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentType : IEquatable<EnvironmentType>
    {
        private readonly string _value;

        private EnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Production - Environment Type
        /// </summary>
        public static EnvironmentType Production { get; } = new EnvironmentType("Production");
        /// <summary>
        /// Unknown - Environment Type
        /// </summary>
        public static EnvironmentType Unknown { get; } = new EnvironmentType("Unknown");
        /// <summary>
        /// DevTest - Environment Type
        /// </summary>
        public static EnvironmentType DevTest { get; } = new EnvironmentType("DevTest");

        public static bool operator ==(EnvironmentType left, EnvironmentType right) => left.Equals(right);
        public static bool operator !=(EnvironmentType left, EnvironmentType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentType other && Equals(other);
        public bool Equals(EnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Different External storage skus.
    /// </summary>
    [EnumType]
    public readonly struct ExternalStorageType : IEquatable<ExternalStorageType>
    {
        private readonly string _value;

        private ExternalStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates un-supported external storage.
        /// </summary>
        public static ExternalStorageType Unknown { get; } = new ExternalStorageType("Unknown");
        /// <summary>
        /// Indicates No external storage.
        /// </summary>
        public static ExternalStorageType None { get; } = new ExternalStorageType("None");
        /// <summary>
        /// ANF external storage with Standard SKU.
        /// </summary>
        public static ExternalStorageType AnfStandard { get; } = new ExternalStorageType("AnfStandard");
        /// <summary>
        /// ANF external storage with Premium SKU.
        /// </summary>
        public static ExternalStorageType AnfPremium { get; } = new ExternalStorageType("AnfPremium");
        /// <summary>
        /// ANF external storage with Ultra SKU.
        /// </summary>
        public static ExternalStorageType AnfUltra { get; } = new ExternalStorageType("AnfUltra");

        public static bool operator ==(ExternalStorageType left, ExternalStorageType right) => left.Equals(right);
        public static bool operator !=(ExternalStorageType left, ExternalStorageType right) => !left.Equals(right);

        public static explicit operator string(ExternalStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExternalStorageType other && Equals(other);
        public bool Equals(ExternalStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// FTT and RAID Level.
    /// </summary>
    [EnumType]
    public readonly struct FttAndRaidLevel : IEquatable<FttAndRaidLevel>
    {
        private readonly string _value;

        private FttAndRaidLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown FTT and RAID Level.
        /// </summary>
        public static FttAndRaidLevel Unknown { get; } = new FttAndRaidLevel("Unknown");
        /// <summary>
        /// FTT 1 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt1Raid1 { get; } = new FttAndRaidLevel("Ftt1Raid1");
        /// <summary>
        /// FTT 1 and RAID Level 5.
        /// </summary>
        public static FttAndRaidLevel Ftt1Raid5 { get; } = new FttAndRaidLevel("Ftt1Raid5");
        /// <summary>
        /// FTT 2 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt2Raid1 { get; } = new FttAndRaidLevel("Ftt2Raid1");
        /// <summary>
        /// FTT 2 and RAID Level 6.
        /// </summary>
        public static FttAndRaidLevel Ftt2Raid6 { get; } = new FttAndRaidLevel("Ftt2Raid6");
        /// <summary>
        /// FTT 3 and RAID Level 1.
        /// </summary>
        public static FttAndRaidLevel Ftt3Raid1 { get; } = new FttAndRaidLevel("Ftt3Raid1");

        public static bool operator ==(FttAndRaidLevel left, FttAndRaidLevel right) => left.Equals(right);
        public static bool operator !=(FttAndRaidLevel left, FttAndRaidLevel right) => !left.Equals(right);

        public static explicit operator string(FttAndRaidLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FttAndRaidLevel other && Equals(other);
        public bool Equals(FttAndRaidLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets the group type for the assessment.
    /// </summary>
    [EnumType]
    public readonly struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        private GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupType Default { get; } = new GroupType("Default");
        public static GroupType Import { get; } = new GroupType("Import");

        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);

        public static explicit operator string(GroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupType other && Equals(other);
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// HyperV licence type.
    /// </summary>
    [EnumType]
    public readonly struct HyperVLicenseType : IEquatable<HyperVLicenseType>
    {
        private readonly string _value;

        private HyperVLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown HyperV License.
        /// </summary>
        public static HyperVLicenseType Unknown { get; } = new HyperVLicenseType("Unknown");
        /// <summary>
        /// Datacentre HyperV License.
        /// </summary>
        public static HyperVLicenseType Datacentre { get; } = new HyperVLicenseType("Datacentre");
        /// <summary>
        /// Standard HyperV License.
        /// </summary>
        public static HyperVLicenseType Standard { get; } = new HyperVLicenseType("Standard");

        public static bool operator ==(HyperVLicenseType left, HyperVLicenseType right) => left.Equals(right);
        public static bool operator !=(HyperVLicenseType left, HyperVLicenseType right) => !left.Equals(right);

        public static explicit operator string(HyperVLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HyperVLicenseType other && Equals(other);
        public bool Equals(HyperVLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the licensing program.
    /// </summary>
    [EnumType]
    public readonly struct LicensingProgram : IEquatable<LicensingProgram>
    {
        private readonly string _value;

        private LicensingProgram(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Retail/Pay as you go.
        /// </summary>
        public static LicensingProgram Retail { get; } = new LicensingProgram("Retail");
        /// <summary>
        /// Not known
        /// </summary>
        public static LicensingProgram Unknown { get; } = new LicensingProgram("Unknown");
        /// <summary>
        /// Enterprise agreement.
        /// </summary>
        public static LicensingProgram EA { get; } = new LicensingProgram("EA");
        /// <summary>
        /// Microsoft customer agreement.
        /// </summary>
        public static LicensingProgram MCA { get; } = new LicensingProgram("MCA");

        public static bool operator ==(LicensingProgram left, LicensingProgram right) => left.Equals(right);
        public static bool operator !=(LicensingProgram left, LicensingProgram right) => !left.Equals(right);

        public static explicit operator string(LicensingProgram value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicensingProgram other && Equals(other);
        public bool Equals(LicensingProgram other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the load balancer type.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerType : IEquatable<LoadBalancerType>
    {
        private readonly string _value;

        private LoadBalancerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerType Private { get; } = new LoadBalancerType("Private");
        public static LoadBalancerType Public { get; } = new LoadBalancerType("Public");

        public static bool operator ==(LoadBalancerType left, LoadBalancerType right) => left.Equals(right);
        public static bool operator !=(LoadBalancerType left, LoadBalancerType right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerType other && Equals(other);
        public bool Equals(LoadBalancerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Migration Strategy.
    /// </summary>
    [EnumType]
    public readonly struct MigrationStrategy : IEquatable<MigrationStrategy>
    {
        private readonly string _value;

        private MigrationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Migration Strategy.
        /// </summary>
        public static MigrationStrategy Unknown { get; } = new MigrationStrategy("Unknown");
        /// <summary>
        /// Optimize for cost.
        /// </summary>
        public static MigrationStrategy OptimizeForCost { get; } = new MigrationStrategy("OptimizeForCost");
        /// <summary>
        /// IaaS only.
        /// </summary>
        public static MigrationStrategy IaaSOnly { get; } = new MigrationStrategy("IaaSOnly");
        /// <summary>
        /// Optimize for PaaS.
        /// </summary>
        public static MigrationStrategy OptimizeForPaas { get; } = new MigrationStrategy("OptimizeForPaas");
        /// <summary>
        /// Avs only.
        /// </summary>
        public static MigrationStrategy AVSOnly { get; } = new MigrationStrategy("AVSOnly");

        public static bool operator ==(MigrationStrategy left, MigrationStrategy right) => left.Equals(right);
        public static bool operator !=(MigrationStrategy left, MigrationStrategy right) => !left.Equals(right);

        public static explicit operator string(MigrationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationStrategy other && Equals(other);
        public bool Equals(MigrationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the MoveType.
    /// </summary>
    [EnumType]
    public readonly struct MoveType : IEquatable<MoveType>
    {
        private readonly string _value;

        private MoveType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MoveType RegionToRegion { get; } = new MoveType("RegionToRegion");
        public static MoveType RegionToZone { get; } = new MoveType("RegionToZone");

        public static bool operator ==(MoveType left, MoveType right) => left.Equals(right);
        public static bool operator !=(MoveType left, MoveType right) => !left.Equals(right);

        public static explicit operator string(MoveType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MoveType other && Equals(other);
        public bool Equals(MoveType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user preference indicating intent of multi-subnet configuration.
    /// </summary>
    [EnumType]
    public readonly struct MultiSubnetIntent : IEquatable<MultiSubnetIntent>
    {
        private readonly string _value;

        private MultiSubnetIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// None - Multi Subnet Intent
        /// </summary>
        public static MultiSubnetIntent None { get; } = new MultiSubnetIntent("None");
        /// <summary>
        /// HighAvailability - Multi Subnet Intent
        /// </summary>
        public static MultiSubnetIntent HighAvailability { get; } = new MultiSubnetIntent("HighAvailability");
        /// <summary>
        /// DisasterRecovery - Multi Subnet Intent
        /// </summary>
        public static MultiSubnetIntent DisasterRecovery { get; } = new MultiSubnetIntent("DisasterRecovery");

        public static bool operator ==(MultiSubnetIntent left, MultiSubnetIntent right) => left.Equals(right);
        public static bool operator !=(MultiSubnetIntent left, MultiSubnetIntent right) => !left.Equals(right);

        public static explicit operator string(MultiSubnetIntent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MultiSubnetIntent other && Equals(other);
        public bool Equals(MultiSubnetIntent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OperatingSystemType : IEquatable<OperatingSystemType>
    {
        private readonly string _value;

        private OperatingSystemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystemType Windows { get; } = new OperatingSystemType("Windows");
        public static OperatingSystemType Linux { get; } = new OperatingSystemType("Linux");

        public static bool operator ==(OperatingSystemType left, OperatingSystemType right) => left.Equals(right);
        public static bool operator !=(OperatingSystemType left, OperatingSystemType right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemType other && Equals(other);
        public bool Equals(OperatingSystemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets SQL optimization logic.
    /// </summary>
    [EnumType]
    public readonly struct OptimizationLogic : IEquatable<OptimizationLogic>
    {
        private readonly string _value;

        private OptimizationLogic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OptimizationLogic MinimizeCost { get; } = new OptimizationLogic("MinimizeCost");
        public static OptimizationLogic ModernizeToPaaS { get; } = new OptimizationLogic("ModernizeToPaaS");
        public static OptimizationLogic ModernizeToAzureSqlMi { get; } = new OptimizationLogic("ModernizeToAzureSqlMi");
        public static OptimizationLogic ModernizeToAzureSqlDb { get; } = new OptimizationLogic("ModernizeToAzureSqlDb");

        public static bool operator ==(OptimizationLogic left, OptimizationLogic right) => left.Equals(right);
        public static bool operator !=(OptimizationLogic left, OptimizationLogic right) => !left.Equals(right);

        public static explicit operator string(OptimizationLogic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OptimizationLogic other && Equals(other);
        public bool Equals(OptimizationLogic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets user configurable setting to display the azure hybrid use benefit.
    /// </summary>
    [EnumType]
    public readonly struct OsLicense : IEquatable<OsLicense>
    {
        private readonly string _value;

        private OsLicense(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Os License
        /// </summary>
        public static OsLicense Unknown { get; } = new OsLicense("Unknown");
        /// <summary>
        /// Yes Os License
        /// </summary>
        public static OsLicense Yes { get; } = new OsLicense("Yes");
        /// <summary>
        /// No Os License
        /// </summary>
        public static OsLicense No { get; } = new OsLicense("No");

        public static bool operator ==(OsLicense left, OsLicense right) => left.Equals(right);
        public static bool operator !=(OsLicense left, OsLicense right) => !left.Equals(right);

        public static explicit operator string(OsLicense value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsLicense other && Equals(other);
        public bool Equals(OsLicense other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Percentile of the utilization data values to be considered while assessing
    /// machines.
    /// </summary>
    [EnumType]
    public readonly struct Percentile : IEquatable<Percentile>
    {
        private readonly string _value;

        private Percentile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Percentile 50.
        /// </summary>
        public static Percentile Percentile50 { get; } = new Percentile("Percentile50");
        /// <summary>
        /// Percentile 90.
        /// </summary>
        public static Percentile Percentile90 { get; } = new Percentile("Percentile90");
        /// <summary>
        /// Percentile 95.
        /// </summary>
        public static Percentile Percentile95 { get; } = new Percentile("Percentile95");
        /// <summary>
        /// Percentile 99.
        /// </summary>
        public static Percentile Percentile99 { get; } = new Percentile("Percentile99");
        /// <summary>
        /// Percentile unknown.
        /// </summary>
        public static Percentile PercentileUnknown { get; } = new Percentile("PercentileUnknown");

        public static bool operator ==(Percentile left, Percentile right) => left.Equals(right);
        public static bool operator !=(Percentile left, Percentile right) => !left.Equals(right);

        public static explicit operator string(Percentile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Percentile other && Equals(other);
        public bool Equals(Percentile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets pricing tier.
    /// </summary>
    [EnumType]
    public readonly struct PricingTier : IEquatable<PricingTier>
    {
        private readonly string _value;

        private PricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard Pricing Tier.
        /// </summary>
        public static PricingTier Standard { get; } = new PricingTier("Standard");
        /// <summary>
        /// Free Pricing Tier.
        /// </summary>
        public static PricingTier Free { get; } = new PricingTier("Free");

        public static bool operator ==(PricingTier left, PricingTier right) => left.Equals(right);
        public static bool operator !=(PricingTier left, PricingTier right) => !left.Equals(right);

        public static explicit operator string(PricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PricingTier other && Equals(other);
        public bool Equals(PricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Assessment project status.
    /// </summary>
    [EnumType]
    public readonly struct ProjectStatus : IEquatable<ProjectStatus>
    {
        private readonly string _value;

        private ProjectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectStatus Active { get; } = new ProjectStatus("Active");
        public static ProjectStatus Inactive { get; } = new ProjectStatus("Inactive");

        public static bool operator ==(ProjectStatus left, ProjectStatus right) => left.Equals(right);
        public static bool operator !=(ProjectStatus left, ProjectStatus right) => !left.Equals(right);

        public static explicit operator string(ProjectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectStatus other && Equals(other);
        public bool Equals(ProjectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the last operation.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resource has been created.
        /// </summary>
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        /// <summary>
        /// Resource creation failed.
        /// </summary>
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        /// <summary>
        /// Resource creation was canceled.
        /// </summary>
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        /// <summary>
        /// Resource is being Provisioned.
        /// </summary>
        public static ProvisioningState Provisioning { get; } = new ProvisioningState("Provisioning");
        /// <summary>
        /// Resource is being Updated.
        /// </summary>
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");
        /// <summary>
        /// Resource is being Deleted.
        /// </summary>
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        /// <summary>
        /// Resource is being Accepted.
        /// </summary>
        public static ProvisioningState Accepted { get; } = new ProvisioningState("Accepted");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Azure reserved instance.
    /// </summary>
    [EnumType]
    public readonly struct ReservedInstance : IEquatable<ReservedInstance>
    {
        private readonly string _value;

        private ReservedInstance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReservedInstance None { get; } = new ReservedInstance("None");
        public static ReservedInstance RI1Year { get; } = new ReservedInstance("RI1Year");
        public static ReservedInstance RI3Year { get; } = new ReservedInstance("RI3Year");

        public static bool operator ==(ReservedInstance left, ReservedInstance right) => left.Equals(right);
        public static bool operator !=(ReservedInstance left, ReservedInstance right) => !left.Equals(right);

        public static explicit operator string(ReservedInstance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReservedInstance other && Equals(other);
        public bool Equals(ReservedInstance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource mover service.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResourceIdentityTypes : IEquatable<ResourceIdentityTypes>
    {
        private readonly string _value;

        private ResourceIdentityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityTypes None { get; } = new ResourceIdentityTypes("None");
        public static ResourceIdentityTypes SystemAssigned { get; } = new ResourceIdentityTypes("SystemAssigned");
        public static ResourceIdentityTypes UserAssigned { get; } = new ResourceIdentityTypes("UserAssigned");

        public static bool operator ==(ResourceIdentityTypes left, ResourceIdentityTypes right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityTypes left, ResourceIdentityTypes right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityTypes other && Equals(other);
        public bool Equals(ResourceIdentityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets the business case savings option type.
    /// </summary>
    [EnumType]
    public readonly struct SavingsOption : IEquatable<SavingsOption>
    {
        private readonly string _value;

        private SavingsOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Savings Option.
        /// </summary>
        public static SavingsOption Unknown { get; } = new SavingsOption("Unknown");
        /// <summary>
        /// Reserved Instance 3 Year.
        /// </summary>
        public static SavingsOption RI3Year { get; } = new SavingsOption("RI3Year");
        /// <summary>
        /// Azure Savings Plan 3 Year.
        /// </summary>
        public static SavingsOption SavingsPlan3Year { get; } = new SavingsOption("SavingsPlan3Year");

        public static bool operator ==(SavingsOption left, SavingsOption right) => left.Equals(right);
        public static bool operator !=(SavingsOption left, SavingsOption right) => !left.Equals(right);

        public static explicit operator string(SavingsOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SavingsOption other && Equals(other);
        public bool Equals(SavingsOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the savings options.
    /// </summary>
    [EnumType]
    public readonly struct SavingsOptions : IEquatable<SavingsOptions>
    {
        private readonly string _value;

        private SavingsOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No savings options.
        /// </summary>
        public static SavingsOptions None { get; } = new SavingsOptions("None");
        /// <summary>
        /// Reserved Instance for 1 year.
        /// </summary>
        public static SavingsOptions RI1Year { get; } = new SavingsOptions("RI1Year");
        /// <summary>
        /// Reserved Instance for 3 years.
        /// </summary>
        public static SavingsOptions RI3Year { get; } = new SavingsOptions("RI3Year");
        /// <summary>
        /// The savings plan for 1 year.
        /// </summary>
        public static SavingsOptions SavingsPlan1Year { get; } = new SavingsOptions("SavingsPlan1Year");
        /// <summary>
        /// The savings plan for 3  years.
        /// </summary>
        public static SavingsOptions SavingsPlan3Year { get; } = new SavingsOptions("SavingsPlan3Year");
        /// <summary>
        /// Custom azure offer code.
        /// </summary>
        public static SavingsOptions CustomAzureOfferCode { get; } = new SavingsOptions("CustomAzureOfferCode");

        public static bool operator ==(SavingsOptions left, SavingsOptions right) => left.Equals(right);
        public static bool operator !=(SavingsOptions left, SavingsOptions right) => !left.Equals(right);

        public static explicit operator string(SavingsOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SavingsOptions other && Equals(other);
        public bool Equals(SavingsOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The scope type
    /// </summary>
    [EnumType]
    public readonly struct ScopeType : IEquatable<ScopeType>
    {
        private readonly string _value;

        private ScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// ServerGroupId - Scope type
        /// </summary>
        public static ScopeType ServerGroupId { get; } = new ScopeType("ServerGroupId");
        /// <summary>
        /// AzureResourceGraphQuery - Scope type
        /// </summary>
        public static ScopeType AzureResourceGraphQuery { get; } = new ScopeType("AzureResourceGraphQuery");

        public static bool operator ==(ScopeType left, ScopeType right) => left.Equals(right);
        public static bool operator !=(ScopeType left, ScopeType right) => !left.Equals(right);

        public static explicit operator string(ScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScopeType other && Equals(other);
        public bool Equals(ScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SecretStoreType : IEquatable<SecretStoreType>
    {
        private readonly string _value;

        private SecretStoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecretStoreType None { get; } = new SecretStoreType("None");
        public static SecretStoreType KubeSecret { get; } = new SecretStoreType("KubeSecret");
        public static SecretStoreType KeyVaultSecret { get; } = new SecretStoreType("KeyVaultSecret");
        public static SecretStoreType AppServiceAppSettings { get; } = new SecretStoreType("AppServiceAppSettings");

        public static bool operator ==(SecretStoreType left, SecretStoreType right) => left.Equals(right);
        public static bool operator !=(SecretStoreType left, SecretStoreType right) => !left.Equals(right);

        public static explicit operator string(SecretStoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecretStoreType other && Equals(other);
        public bool Equals(SecretStoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL server license.
    /// </summary>
    [EnumType]
    public readonly struct SqlServerLicense : IEquatable<SqlServerLicense>
    {
        private readonly string _value;

        private SqlServerLicense(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown - Sql Server License
        /// </summary>
        public static SqlServerLicense Unknown { get; } = new SqlServerLicense("Unknown");
        /// <summary>
        /// Has Sql Server License
        /// </summary>
        public static SqlServerLicense Yes { get; } = new SqlServerLicense("Yes");
        /// <summary>
        /// No Sql Server License
        /// </summary>
        public static SqlServerLicense No { get; } = new SqlServerLicense("No");

        public static bool operator ==(SqlServerLicense left, SqlServerLicense right) => left.Equals(right);
        public static bool operator !=(SqlServerLicense left, SqlServerLicense right) => !left.Equals(right);

        public static explicit operator string(SqlServerLicense value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlServerLicense other && Equals(other);
        public bool Equals(SqlServerLicense other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SQL Server version.
    /// </summary>
    [EnumType]
    public readonly struct SqlServerLicenseType : IEquatable<SqlServerLicenseType>
    {
        private readonly string _value;

        private SqlServerLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Unknown { get; } = new SqlServerLicenseType("Unknown");
        /// <summary>
        /// Enterprise Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Enterprise { get; } = new SqlServerLicenseType("Enterprise");
        /// <summary>
        /// Standard Sql Server License.
        /// </summary>
        public static SqlServerLicenseType Standard { get; } = new SqlServerLicenseType("Standard");

        public static bool operator ==(SqlServerLicenseType left, SqlServerLicenseType right) => left.Equals(right);
        public static bool operator !=(SqlServerLicenseType left, SqlServerLicenseType right) => !left.Equals(right);

        public static explicit operator string(SqlServerLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlServerLicenseType other && Equals(other);
        public bool Equals(SqlServerLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Private link connection state.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Approved { get; } = new Status("Approved");
        public static Status Pending { get; } = new Status("Pending");
        public static Status Rejected { get; } = new Status("Rejected");
        public static Status Disconnected { get; } = new Status("Disconnected");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the target availability zone.
    /// </summary>
    [EnumType]
    public readonly struct TargetAvailabilityZone : IEquatable<TargetAvailabilityZone>
    {
        private readonly string _value;

        private TargetAvailabilityZone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TargetAvailabilityZone One { get; } = new TargetAvailabilityZone("1");
        public static TargetAvailabilityZone Two { get; } = new TargetAvailabilityZone("2");
        public static TargetAvailabilityZone Three { get; } = new TargetAvailabilityZone("3");
        public static TargetAvailabilityZone NA { get; } = new TargetAvailabilityZone("NA");

        public static bool operator ==(TargetAvailabilityZone left, TargetAvailabilityZone right) => left.Equals(right);
        public static bool operator !=(TargetAvailabilityZone left, TargetAvailabilityZone right) => !left.Equals(right);

        public static explicit operator string(TargetAvailabilityZone value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetAvailabilityZone other && Equals(other);
        public bool Equals(TargetAvailabilityZone other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the storage provider type on the target.
    /// Applicable when StorageProjectionType is not ContainerFileSystem.
    /// </summary>
    [EnumType]
    public readonly struct TargetHydrationStorageProviderType : IEquatable<TargetHydrationStorageProviderType>
    {
        private readonly string _value;

        private TargetHydrationStorageProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TargetHydrationStorageProviderType AzureFileShare { get; } = new TargetHydrationStorageProviderType("AzureFileShare");

        public static bool operator ==(TargetHydrationStorageProviderType left, TargetHydrationStorageProviderType right) => left.Equals(right);
        public static bool operator !=(TargetHydrationStorageProviderType left, TargetHydrationStorageProviderType right) => !left.Equals(right);

        public static explicit operator string(TargetHydrationStorageProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetHydrationStorageProviderType other && Equals(other);
        public bool Equals(TargetHydrationStorageProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the target storage access type.
    /// </summary>
    [EnumType]
    public readonly struct TargetStorageAccessType : IEquatable<TargetStorageAccessType>
    {
        private readonly string _value;

        private TargetStorageAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TargetStorageAccessType Shared { get; } = new TargetStorageAccessType("Shared");
        public static TargetStorageAccessType Exclusive { get; } = new TargetStorageAccessType("Exclusive");

        public static bool operator ==(TargetStorageAccessType left, TargetStorageAccessType right) => left.Equals(right);
        public static bool operator !=(TargetStorageAccessType left, TargetStorageAccessType right) => !left.Equals(right);

        public static explicit operator string(TargetStorageAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetStorageAccessType other && Equals(other);
        public bool Equals(TargetStorageAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the target projection type.
    /// </summary>
    [EnumType]
    public readonly struct TargetStorageProjectionType : IEquatable<TargetStorageProjectionType>
    {
        private readonly string _value;

        private TargetStorageProjectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TargetStorageProjectionType ContainerFileSystem { get; } = new TargetStorageProjectionType("ContainerFileSystem");
        public static TargetStorageProjectionType PersistentVolume { get; } = new TargetStorageProjectionType("PersistentVolume");

        public static bool operator ==(TargetStorageProjectionType left, TargetStorageProjectionType right) => left.Equals(right);
        public static bool operator !=(TargetStorageProjectionType left, TargetStorageProjectionType right) => !left.Equals(right);

        public static explicit operator string(TargetStorageProjectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetStorageProjectionType other && Equals(other);
        public bool Equals(TargetStorageProjectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Time Range for which the historic utilization data should be considered for
    /// assessment.
    /// </summary>
    [EnumType]
    public readonly struct TimeRange : IEquatable<TimeRange>
    {
        private readonly string _value;

        private TimeRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Daily.
        /// </summary>
        public static TimeRange Day { get; } = new TimeRange("Day");
        /// <summary>
        /// Weekly.
        /// </summary>
        public static TimeRange Week { get; } = new TimeRange("Week");
        /// <summary>
        /// Monthly.
        /// </summary>
        public static TimeRange Month { get; } = new TimeRange("Month");
        /// <summary>
        /// Custom Time Range.
        /// </summary>
        public static TimeRange Custom { get; } = new TimeRange("Custom");

        public static bool operator ==(TimeRange left, TimeRange right) => left.Equals(right);
        public static bool operator !=(TimeRange left, TimeRange right) => !left.Equals(right);

        public static explicit operator string(TimeRange value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeRange other && Equals(other);
        public bool Equals(TimeRange other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the deployment target platform.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadDeploymentTarget : IEquatable<WorkloadDeploymentTarget>
    {
        private readonly string _value;

        private WorkloadDeploymentTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadDeploymentTarget AzureKubernetesService { get; } = new WorkloadDeploymentTarget("AzureKubernetesService");
        public static WorkloadDeploymentTarget AzureAppServiceContainer { get; } = new WorkloadDeploymentTarget("AzureAppServiceContainer");
        public static WorkloadDeploymentTarget AzureAppServiceNative { get; } = new WorkloadDeploymentTarget("AzureAppServiceNative");

        public static bool operator ==(WorkloadDeploymentTarget left, WorkloadDeploymentTarget right) => left.Equals(right);
        public static bool operator !=(WorkloadDeploymentTarget left, WorkloadDeploymentTarget right) => !left.Equals(right);

        public static explicit operator string(WorkloadDeploymentTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadDeploymentTarget other && Equals(other);
        public bool Equals(WorkloadDeploymentTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the instance type.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadDeploymentType : IEquatable<WorkloadDeploymentType>
    {
        private readonly string _value;

        private WorkloadDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadDeploymentType IISAKSWorkloadDeployment { get; } = new WorkloadDeploymentType("IISAKSWorkloadDeployment");
        public static WorkloadDeploymentType ApacheTomcatAKSWorkloadDeployment { get; } = new WorkloadDeploymentType("ApacheTomcatAKSWorkloadDeployment");

        public static bool operator ==(WorkloadDeploymentType left, WorkloadDeploymentType right) => left.Equals(right);
        public static bool operator !=(WorkloadDeploymentType left, WorkloadDeploymentType right) => !left.Equals(right);

        public static explicit operator string(WorkloadDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadDeploymentType other && Equals(other);
        public bool Equals(WorkloadDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the instance type.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        private WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadType IISWorkload { get; } = new WorkloadType("IISWorkload");
        public static WorkloadType ApacheTomcatWorkload { get; } = new WorkloadType("ApacheTomcatWorkload");

        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);

        public static explicit operator string(WorkloadType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadType other && Equals(other);
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the zone redundant resource setting.
    /// </summary>
    [EnumType]
    public readonly struct ZoneRedundant : IEquatable<ZoneRedundant>
    {
        private readonly string _value;

        private ZoneRedundant(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ZoneRedundant Enable { get; } = new ZoneRedundant("Enable");
        public static ZoneRedundant Disable { get; } = new ZoneRedundant("Disable");

        public static bool operator ==(ZoneRedundant left, ZoneRedundant right) => left.Equals(right);
        public static bool operator !=(ZoneRedundant left, ZoneRedundant right) => !left.Equals(right);

        public static explicit operator string(ZoneRedundant value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneRedundant other && Equals(other);
        public bool Equals(ZoneRedundant other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
