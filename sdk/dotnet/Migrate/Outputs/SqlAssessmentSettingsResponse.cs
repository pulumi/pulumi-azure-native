// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Migrate.Outputs
{

    /// <summary>
    /// SQL assessment settings class.
    /// </summary>
    [OutputType]
    public sealed class SqlAssessmentSettingsResponse
    {
        /// <summary>
        /// Gets or sets user preference indicating intent of async commit mode.
        /// </summary>
        public readonly string? AsyncCommitModeIntent;
        /// <summary>
        /// Azure Location or Azure region where to which the machines will be migrated.
        /// </summary>
        public readonly string? AzureLocation;
        /// <summary>
        /// Gets or sets a value indicating azure security offering type.
        /// </summary>
        public readonly string? AzureSecurityOfferingType;
        /// <summary>
        /// Gets or sets user configurable SQL database settings.
        /// </summary>
        public readonly Outputs.SqlDbSettingsV3Response? AzureSqlDatabaseSettings;
        /// <summary>
        /// Gets or sets user configurable SQL managed instance settings.
        /// </summary>
        public readonly Outputs.SqlMiSettingsV3Response? AzureSqlManagedInstanceSettings;
        /// <summary>
        /// Gets or sets user configurable SQL VM settings.
        /// </summary>
        public readonly Outputs.SqlVmSettingsResponse? AzureSqlVmSettings;
        /// <summary>
        /// Gets or sets the billing settings.
        /// </summary>
        public readonly Outputs.BillingSettingsResponse? BillingSettings;
        /// <summary>
        /// Currency in which prices should be reported.
        /// </summary>
        public readonly string? Currency;
        /// <summary>
        /// Gets or sets the Azure Location or Azure region where to which the machines
        /// will be migrated.
        /// </summary>
        public readonly string? DisasterRecoveryLocation;
        /// <summary>
        /// Custom discount percentage.
        /// </summary>
        public readonly double? DiscountPercentage;
        /// <summary>
        /// Gets or sets a value indicating whether HADR assessments needs to be created.
        /// </summary>
        public readonly bool? EnableHadrAssessment;
        /// <summary>
        /// Gets or sets the duration for which the entity (SQL, VMs) are up in the
        /// on-premises environment.
        /// </summary>
        public readonly Outputs.EntityUptimeResponse? EntityUptime;
        /// <summary>
        /// Gets or sets user configurable setting to display the environment type.
        /// </summary>
        public readonly string? EnvironmentType;
        /// <summary>
        /// Gets or sets a value indicating whether internet access is available.
        /// </summary>
        public readonly bool? IsInternetAccessAvailable;
        /// <summary>
        /// Gets or sets user preference indicating intent of multi-subnet configuration.
        /// </summary>
        public readonly string? MultiSubnetIntent;
        /// <summary>
        /// Gets or sets user configurable setting to display the azure hybrid use benefit.
        /// </summary>
        public readonly string? OsLicense;
        /// <summary>
        /// Gets or sets the performance data.
        /// </summary>
        public readonly Outputs.PerformanceDataResponse? PerformanceData;
        /// <summary>
        /// Gets or sets SQL the preferred azure targets.
        /// </summary>
        public readonly ImmutableArray<string> PreferredTargets;
        /// <summary>
        /// Gets or sets the savings settings.
        /// </summary>
        public readonly Outputs.SavingsSettingsResponse? SavingsSettings;
        /// <summary>
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </summary>
        public readonly double? ScalingFactor;
        /// <summary>
        /// Assessment sizing criterion.
        /// </summary>
        public readonly string? SizingCriterion;
        /// <summary>
        /// SQL server license.
        /// </summary>
        public readonly string? SqlServerLicense;

        [OutputConstructor]
        private SqlAssessmentSettingsResponse(
            string? asyncCommitModeIntent,

            string? azureLocation,

            string? azureSecurityOfferingType,

            Outputs.SqlDbSettingsV3Response? azureSqlDatabaseSettings,

            Outputs.SqlMiSettingsV3Response? azureSqlManagedInstanceSettings,

            Outputs.SqlVmSettingsResponse? azureSqlVmSettings,

            Outputs.BillingSettingsResponse? billingSettings,

            string? currency,

            string? disasterRecoveryLocation,

            double? discountPercentage,

            bool? enableHadrAssessment,

            Outputs.EntityUptimeResponse? entityUptime,

            string? environmentType,

            bool? isInternetAccessAvailable,

            string? multiSubnetIntent,

            string? osLicense,

            Outputs.PerformanceDataResponse? performanceData,

            ImmutableArray<string> preferredTargets,

            Outputs.SavingsSettingsResponse? savingsSettings,

            double? scalingFactor,

            string? sizingCriterion,

            string? sqlServerLicense)
        {
            AsyncCommitModeIntent = asyncCommitModeIntent;
            AzureLocation = azureLocation;
            AzureSecurityOfferingType = azureSecurityOfferingType;
            AzureSqlDatabaseSettings = azureSqlDatabaseSettings;
            AzureSqlManagedInstanceSettings = azureSqlManagedInstanceSettings;
            AzureSqlVmSettings = azureSqlVmSettings;
            BillingSettings = billingSettings;
            Currency = currency;
            DisasterRecoveryLocation = disasterRecoveryLocation;
            DiscountPercentage = discountPercentage;
            EnableHadrAssessment = enableHadrAssessment;
            EntityUptime = entityUptime;
            EnvironmentType = environmentType;
            IsInternetAccessAvailable = isInternetAccessAvailable;
            MultiSubnetIntent = multiSubnetIntent;
            OsLicense = osLicense;
            PerformanceData = performanceData;
            PreferredTargets = preferredTargets;
            SavingsSettings = savingsSettings;
            ScalingFactor = scalingFactor;
            SizingCriterion = sizingCriterion;
            SqlServerLicense = sqlServerLicense;
        }
    }
}
