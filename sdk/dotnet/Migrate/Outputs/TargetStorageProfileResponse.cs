// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Migrate.Outputs
{

    /// <summary>
    /// Storage profile for the directory on the target container.
    /// </summary>
    [OutputType]
    public sealed class TargetStorageProfileResponse
    {
        /// <summary>
        /// Azure file share profile for hydration of application folders not mounted on
        /// the container file system.
        /// </summary>
        public readonly Outputs.AzureFileShareHydrationProfileResponse? AzureFileShareProfile;
        /// <summary>
        /// Gets or sets the storage provider type on the target.
        /// Applicable when StorageProjectionType is not ContainerFileSystem.
        /// </summary>
        public readonly string? HydrationStorageProviderType;
        /// <summary>
        /// Gets or sets the target persistent volume id.
        /// Applicable when StorageProjectionType is PersistentVolume and on using an
        /// existing PersistentVolume.
        /// </summary>
        public readonly string? PersistentVolumeId;
        /// <summary>
        /// Gets or sets the target storage access type.
        /// </summary>
        public readonly string? StorageAccessType;
        /// <summary>
        /// Gets or sets the target projection type.
        /// </summary>
        public readonly string? StorageProjectionType;
        /// <summary>
        /// Gets or sets the name of the projected volume on the target environment.
        /// </summary>
        public readonly string? TargetName;
        /// <summary>
        /// Gets or sets the storage size on the target.
        /// Applicable when StorageProjectionType is PersistentVolume and on creating a new
        /// PersistentVolume.
        /// </summary>
        public readonly string? TargetSize;

        [OutputConstructor]
        private TargetStorageProfileResponse(
            Outputs.AzureFileShareHydrationProfileResponse? azureFileShareProfile,

            string? hydrationStorageProviderType,

            string? persistentVolumeId,

            string? storageAccessType,

            string? storageProjectionType,

            string? targetName,

            string? targetSize)
        {
            AzureFileShareProfile = azureFileShareProfile;
            HydrationStorageProviderType = hydrationStorageProviderType;
            PersistentVolumeId = persistentVolumeId;
            StorageAccessType = storageAccessType;
            StorageProjectionType = storageProjectionType;
            TargetName = targetName;
            TargetSize = targetSize;
        }
    }
}
