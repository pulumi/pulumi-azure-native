// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Migrate
{
    public static class GetGroupsOperation
    {
        /// <summary>
        /// Get a Group
        /// Azure REST API version: 2023-03-15.
        /// 
        /// Other available API versions: 2023-04-01-preview, 2023-05-01-preview.
        /// </summary>
        public static Task<GetGroupsOperationResult> InvokeAsync(GetGroupsOperationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupsOperationResult>("azure-native:migrate:getGroupsOperation", args ?? new GetGroupsOperationArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Group
        /// Azure REST API version: 2023-03-15.
        /// 
        /// Other available API versions: 2023-04-01-preview, 2023-05-01-preview.
        /// </summary>
        public static Output<GetGroupsOperationResult> Invoke(GetGroupsOperationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsOperationResult>("azure-native:migrate:getGroupsOperation", args ?? new GetGroupsOperationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupsOperationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Group ARM name
        /// </summary>
        [Input("groupName", required: true)]
        public string GroupName { get; set; } = null!;

        /// <summary>
        /// Assessment Project Name
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGroupsOperationArgs()
        {
        }
        public static new GetGroupsOperationArgs Empty => new GetGroupsOperationArgs();
    }

    public sealed class GetGroupsOperationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Group ARM name
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        /// <summary>
        /// Assessment Project Name
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetGroupsOperationInvokeArgs()
        {
        }
        public static new GetGroupsOperationInvokeArgs Empty => new GetGroupsOperationInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupsOperationResult
    {
        /// <summary>
        /// If the assessments are in running state.
        /// </summary>
        public readonly bool AreAssessmentsRunning;
        /// <summary>
        /// List of References to Assessments created on this group.
        /// </summary>
        public readonly ImmutableArray<string> Assessments;
        /// <summary>
        /// Time when this group was created. Date-Time represented in ISO-8601 format.
        /// </summary>
        public readonly string CreatedTimestamp;
        /// <summary>
        /// Whether the group has been created and is valid.
        /// </summary>
        public readonly string GroupStatus;
        /// <summary>
        /// The type of group.
        /// </summary>
        public readonly string? GroupType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of machines part of this group.
        /// </summary>
        public readonly int MachineCount;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// List of assessment types supported on this group.
        /// </summary>
        public readonly ImmutableArray<string> SupportedAssessmentTypes;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Time when this group was last updated. Date-Time represented in ISO-8601 format.
        /// </summary>
        public readonly string UpdatedTimestamp;

        [OutputConstructor]
        private GetGroupsOperationResult(
            bool areAssessmentsRunning,

            ImmutableArray<string> assessments,

            string createdTimestamp,

            string groupStatus,

            string? groupType,

            string id,

            int machineCount,

            string name,

            string? provisioningState,

            ImmutableArray<string> supportedAssessmentTypes,

            Outputs.SystemDataResponse systemData,

            string type,

            string updatedTimestamp)
        {
            AreAssessmentsRunning = areAssessmentsRunning;
            Assessments = assessments;
            CreatedTimestamp = createdTimestamp;
            GroupStatus = groupStatus;
            GroupType = groupType;
            Id = id;
            MachineCount = machineCount;
            Name = name;
            ProvisioningState = provisioningState;
            SupportedAssessmentTypes = supportedAssessmentTypes;
            SystemData = systemData;
            Type = type;
            UpdatedTimestamp = updatedTimestamp;
        }
    }
}
