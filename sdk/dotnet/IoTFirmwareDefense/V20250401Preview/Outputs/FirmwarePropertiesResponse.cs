// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTFirmwareDefense.V20250401Preview.Outputs
{

    /// <summary>
    /// Firmware properties.
    /// </summary>
    [OutputType]
    public sealed class FirmwarePropertiesResponse
    {
        /// <summary>
        /// User-specified description of the firmware.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// File name for a firmware that user uploaded.
        /// </summary>
        public readonly string? FileName;
        /// <summary>
        /// File size of the uploaded firmware image.
        /// </summary>
        public readonly double? FileSize;
        /// <summary>
        /// Firmware model.
        /// </summary>
        public readonly string? Model;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The status of firmware scan.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// A list of errors or other messages generated during firmware analysis
        /// </summary>
        public readonly ImmutableArray<Outputs.StatusMessageResponse> StatusMessages;
        /// <summary>
        /// Firmware vendor.
        /// </summary>
        public readonly string? Vendor;
        /// <summary>
        /// Firmware version.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private FirmwarePropertiesResponse(
            string? description,

            string? fileName,

            double? fileSize,

            string? model,

            string provisioningState,

            string? status,

            ImmutableArray<Outputs.StatusMessageResponse> statusMessages,

            string? vendor,

            string? version)
        {
            Description = description;
            FileName = fileName;
            FileSize = fileSize;
            Model = model;
            ProvisioningState = provisioningState;
            Status = status;
            StatusMessages = statusMessages;
            Vendor = vendor;
            Version = version;
        }
    }
}
