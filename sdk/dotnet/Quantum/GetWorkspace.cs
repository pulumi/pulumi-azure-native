// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Quantum
{
    public static class GetWorkspace
    {
        /// <summary>
        /// The resource proxy definition object for quantum workspace.
        /// API Version: 2019-11-04-preview.
        /// </summary>
        public static Task<GetWorkspaceResult> InvokeAsync(GetWorkspaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceResult>("azure-nextgen:quantum:getWorkspace", args ?? new GetWorkspaceArgs(), options.WithVersion());
    }


    public sealed class GetWorkspaceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the quantum workspace resource.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetWorkspaceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetWorkspaceResult
    {
        /// <summary>
        /// The URI of the workspace endpoint.
        /// </summary>
        public readonly string EndpointUri;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed Identity information.
        /// </summary>
        public readonly Outputs.QuantumWorkspaceResponseIdentity? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of Providers selected for this Workspace
        /// </summary>
        public readonly ImmutableArray<Outputs.ProviderResponse> Providers;
        /// <summary>
        /// Provisioning status field
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// ARM Resource Id of the storage account associated with this workspace.
        /// </summary>
        public readonly string? StorageAccount;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Whether the current workspace is ready to accept Jobs.
        /// </summary>
        public readonly string Usable;

        [OutputConstructor]
        private GetWorkspaceResult(
            string endpointUri,

            string id,

            Outputs.QuantumWorkspaceResponseIdentity? identity,

            string location,

            string name,

            ImmutableArray<Outputs.ProviderResponse> providers,

            string provisioningState,

            string? storageAccount,

            ImmutableDictionary<string, string>? tags,

            string type,

            string usable)
        {
            EndpointUri = endpointUri;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Providers = providers;
            ProvisioningState = provisioningState;
            StorageAccount = storageAccount;
            Tags = tags;
            Type = type;
            Usable = usable;
        }
    }
}
