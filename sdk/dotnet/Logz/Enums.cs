// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Logz
{
    [EnumType]
    public readonly struct ManagedIdentityTypes : IEquatable<ManagedIdentityTypes>
    {
        private readonly string _value;

        private ManagedIdentityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityTypes SystemAssigned { get; } = new ManagedIdentityTypes("SystemAssigned");
        public static ManagedIdentityTypes UserAssigned { get; } = new ManagedIdentityTypes("UserAssigned");

        public static bool operator ==(ManagedIdentityTypes left, ManagedIdentityTypes right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityTypes left, ManagedIdentityTypes right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityTypes other && Equals(other);
        public bool Equals(ManagedIdentityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
    /// </summary>
    [EnumType]
    public readonly struct MarketplaceSubscriptionStatus : IEquatable<MarketplaceSubscriptionStatus>
    {
        private readonly string _value;

        private MarketplaceSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MarketplaceSubscriptionStatus Active { get; } = new MarketplaceSubscriptionStatus("Active");
        public static MarketplaceSubscriptionStatus Suspended { get; } = new MarketplaceSubscriptionStatus("Suspended");

        public static bool operator ==(MarketplaceSubscriptionStatus left, MarketplaceSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(MarketplaceSubscriptionStatus left, MarketplaceSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(MarketplaceSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MarketplaceSubscriptionStatus other && Equals(other);
        public bool Equals(MarketplaceSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag specifying if the resource monitoring is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringStatus : IEquatable<MonitoringStatus>
    {
        private readonly string _value;

        private MonitoringStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringStatus Enabled { get; } = new MonitoringStatus("Enabled");
        public static MonitoringStatus Disabled { get; } = new MonitoringStatus("Disabled");

        public static bool operator ==(MonitoringStatus left, MonitoringStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringStatus left, MonitoringStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringStatus other && Equals(other);
        public bool Equals(MonitoringStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
    /// </summary>
    [EnumType]
    public readonly struct TagAction : IEquatable<TagAction>
    {
        private readonly string _value;

        private TagAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TagAction Include { get; } = new TagAction("Include");
        public static TagAction Exclude { get; } = new TagAction("Exclude");

        public static bool operator ==(TagAction left, TagAction right) => left.Equals(right);
        public static bool operator !=(TagAction left, TagAction right) => !left.Equals(right);

        public static explicit operator string(TagAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TagAction other && Equals(other);
        public bool Equals(TagAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
