// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logz.V20220101Preview
{
    public static class GetMetricsSource
    {
        public static Task<GetMetricsSourceResult> InvokeAsync(GetMetricsSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricsSourceResult>("azure-native:logz/v20220101preview:getMetricsSource", args ?? new GetMetricsSourceArgs(), options.WithDefaults());

        public static Output<GetMetricsSourceResult> Invoke(GetMetricsSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricsSourceResult>("azure-native:logz/v20220101preview:getMetricsSource", args ?? new GetMetricsSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricsSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Metrics Account resource name
        /// </summary>
        [Input("metricsSourceName", required: true)]
        public string MetricsSourceName { get; set; } = null!;

        /// <summary>
        /// Monitor resource name
        /// </summary>
        [Input("monitorName", required: true)]
        public string MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMetricsSourceArgs()
        {
        }
        public static new GetMetricsSourceArgs Empty => new GetMetricsSourceArgs();
    }

    public sealed class GetMetricsSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Metrics Account resource name
        /// </summary>
        [Input("metricsSourceName", required: true)]
        public Input<string> MetricsSourceName { get; set; } = null!;

        /// <summary>
        /// Monitor resource name
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMetricsSourceInvokeArgs()
        {
        }
        public static new GetMetricsSourceInvokeArgs Empty => new GetMetricsSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricsSourceResult
    {
        /// <summary>
        /// ARM id of the monitor resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.IdentityPropertiesResponse? Identity;
        public readonly string Location;
        /// <summary>
        /// Name of the monitor resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties specific to the monitor resource.
        /// </summary>
        public readonly Outputs.MonitorPropertiesResponse Properties;
        /// <summary>
        /// The system metadata relating to this resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the monitor resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMetricsSourceResult(
            string id,

            Outputs.IdentityPropertiesResponse? identity,

            string location,

            string name,

            Outputs.MonitorPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
