// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180901Preview
{
    /// <summary>
    /// This type describes a gateway resource.
    /// </summary>
    public partial class Gateway : Pulumi.CustomResource
    {
        /// <summary>
        /// User readable description of the gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Network that the Application is using.
        /// </summary>
        [Output("destinationNetwork")]
        public Output<Outputs.NetworkRefResponse> DestinationNetwork { get; private set; } = null!;

        /// <summary>
        /// Configuration for http connectivity for this gateway.
        /// </summary>
        [Output("http")]
        public Output<ImmutableArray<Outputs.HttpConfigResponse>> Http { get; private set; } = null!;

        /// <summary>
        /// IP address of the gateway. This is populated in the response and is ignored for incoming requests.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Network the gateway should listen on for requests.
        /// </summary>
        [Output("sourceNetwork")]
        public Output<Outputs.NetworkRefResponse> SourceNetwork { get; private set; } = null!;

        /// <summary>
        /// Status of the resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Gives additional information about the current status of the gateway.
        /// </summary>
        [Output("statusDetails")]
        public Output<string> StatusDetails { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Configuration for tcp connectivity for this gateway.
        /// </summary>
        [Output("tcp")]
        public Output<ImmutableArray<Outputs.TcpConfigResponse>> Tcp { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:servicefabricmesh/v20180901preview:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:servicefabricmesh/v20180901preview:Gateway", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, options);
        }
    }

    public sealed class GatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User readable description of the gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Network that the Application is using.
        /// </summary>
        [Input("destinationNetwork", required: true)]
        public Input<Inputs.NetworkRefArgs> DestinationNetwork { get; set; } = null!;

        /// <summary>
        /// The identity of the gateway.
        /// </summary>
        [Input("gatewayResourceName", required: true)]
        public Input<string> GatewayResourceName { get; set; } = null!;

        [Input("http")]
        private InputList<Inputs.HttpConfigArgs>? _http;

        /// <summary>
        /// Configuration for http connectivity for this gateway.
        /// </summary>
        public InputList<Inputs.HttpConfigArgs> Http
        {
            get => _http ?? (_http = new InputList<Inputs.HttpConfigArgs>());
            set => _http = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Network the gateway should listen on for requests.
        /// </summary>
        [Input("sourceNetwork", required: true)]
        public Input<Inputs.NetworkRefArgs> SourceNetwork { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tcp")]
        private InputList<Inputs.TcpConfigArgs>? _tcp;

        /// <summary>
        /// Configuration for tcp connectivity for this gateway.
        /// </summary>
        public InputList<Inputs.TcpConfigArgs> Tcp
        {
            get => _tcp ?? (_tcp = new InputList<Inputs.TcpConfigArgs>());
            set => _tcp = value;
        }

        public GatewayArgs()
        {
        }
    }
}
