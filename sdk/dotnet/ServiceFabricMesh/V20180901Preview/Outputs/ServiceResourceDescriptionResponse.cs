// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180901Preview.Outputs
{

    [OutputType]
    public sealed class ServiceResourceDescriptionResponse
    {
        /// <summary>
        /// Auto scaling policies
        /// </summary>
        public readonly ImmutableArray<Outputs.AutoScalingPolicyResponse> AutoScalingPolicies;
        /// <summary>
        /// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerCodePackagePropertiesResponse> CodePackages;
        /// <summary>
        /// User readable description of the service.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Reference to sinks in DiagnosticsDescription.
        /// </summary>
        public readonly Outputs.DiagnosticsRefResponse? Diagnostics;
        /// <summary>
        /// Describes the health state of an application resource.
        /// </summary>
        public readonly string HealthState;
        /// <summary>
        /// Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The names of the private networks that this service needs to be part of.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkRefResponse> NetworkRefs;
        /// <summary>
        /// The operation system required by the code in service.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// State of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The number of replicas of the service to create. Defaults to 1 if not specified.
        /// </summary>
        public readonly int? ReplicaCount;
        /// <summary>
        /// Status of the service.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Gives additional information about the current status of the service.
        /// </summary>
        public readonly string StatusDetails;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
        /// </summary>
        public readonly string UnhealthyEvaluation;

        [OutputConstructor]
        private ServiceResourceDescriptionResponse(
            ImmutableArray<Outputs.AutoScalingPolicyResponse> autoScalingPolicies,

            ImmutableArray<Outputs.ContainerCodePackagePropertiesResponse> codePackages,

            string? description,

            Outputs.DiagnosticsRefResponse? diagnostics,

            string healthState,

            string id,

            string? name,

            ImmutableArray<Outputs.NetworkRefResponse> networkRefs,

            string osType,

            string provisioningState,

            int? replicaCount,

            string status,

            string statusDetails,

            string type,

            string unhealthyEvaluation)
        {
            AutoScalingPolicies = autoScalingPolicies;
            CodePackages = codePackages;
            Description = description;
            Diagnostics = diagnostics;
            HealthState = healthState;
            Id = id;
            Name = name;
            NetworkRefs = networkRefs;
            OsType = osType;
            ProvisioningState = provisioningState;
            ReplicaCount = replicaCount;
            Status = status;
            StatusDetails = statusDetails;
            Type = type;
            UnhealthyEvaluation = unhealthyEvaluation;
        }
    }
}
