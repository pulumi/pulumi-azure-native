// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180901Preview
{
    public static class GetGateway
    {
        public static Task<GetGatewayResult> InvokeAsync(GetGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGatewayResult>("azure-nextgen:servicefabricmesh/v20180901preview:getGateway", args ?? new GetGatewayArgs(), options.WithVersion());
    }


    public sealed class GetGatewayArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identity of the gateway.
        /// </summary>
        [Input("gatewayResourceName", required: true)]
        public string GatewayResourceName { get; set; } = null!;

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGatewayArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGatewayResult
    {
        /// <summary>
        /// User readable description of the gateway.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Network that the Application is using.
        /// </summary>
        public readonly Outputs.NetworkRefResponse DestinationNetwork;
        /// <summary>
        /// Configuration for http connectivity for this gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.HttpConfigResponse> Http;
        /// <summary>
        /// IP address of the gateway. This is populated in the response and is ignored for incoming requests.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Network the gateway should listen on for requests.
        /// </summary>
        public readonly Outputs.NetworkRefResponse SourceNetwork;
        /// <summary>
        /// Status of the resource.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Gives additional information about the current status of the gateway.
        /// </summary>
        public readonly string StatusDetails;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Configuration for tcp connectivity for this gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.TcpConfigResponse> Tcp;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetGatewayResult(
            string? description,

            Outputs.NetworkRefResponse destinationNetwork,

            ImmutableArray<Outputs.HttpConfigResponse> http,

            string ipAddress,

            string location,

            string name,

            string provisioningState,

            Outputs.NetworkRefResponse sourceNetwork,

            string status,

            string statusDetails,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.TcpConfigResponse> tcp,

            string type)
        {
            Description = description;
            DestinationNetwork = destinationNetwork;
            Http = http;
            IpAddress = ipAddress;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SourceNetwork = sourceNetwork;
            Status = status;
            StatusDetails = statusDetails;
            Tags = tags;
            Tcp = tcp;
            Type = type;
        }
    }
}
