// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180901Preview
{
    public static class GetApplication
    {
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("azure-nextgen:servicefabricmesh/v20180901preview:getApplication", args ?? new GetApplicationArgs(), options.WithVersion());
    }


    public sealed class GetApplicationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identity of the application.
        /// </summary>
        [Input("applicationResourceName", required: true)]
        public string ApplicationResourceName { get; set; } = null!;

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApplicationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// Internal - used by Visual Studio to setup the debugging session on the local development environment.
        /// </summary>
        public readonly string? DebugParams;
        /// <summary>
        /// User readable description of the application.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Describes the diagnostics definition and usage for an application resource.
        /// </summary>
        public readonly Outputs.DiagnosticsDescriptionResponse? Diagnostics;
        /// <summary>
        /// Describes the health state of an application resource.
        /// </summary>
        public readonly string HealthState;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Names of the services in the application.
        /// </summary>
        public readonly ImmutableArray<string> ServiceNames;
        /// <summary>
        /// Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceResourceDescriptionResponse> Services;
        /// <summary>
        /// Status of the application.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Gives additional information about the current status of the application.
        /// </summary>
        public readonly string StatusDetails;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
        /// </summary>
        public readonly string UnhealthyEvaluation;

        [OutputConstructor]
        private GetApplicationResult(
            string? debugParams,

            string? description,

            Outputs.DiagnosticsDescriptionResponse? diagnostics,

            string healthState,

            string location,

            string name,

            string provisioningState,

            ImmutableArray<string> serviceNames,

            ImmutableArray<Outputs.ServiceResourceDescriptionResponse> services,

            string status,

            string statusDetails,

            ImmutableDictionary<string, string>? tags,

            string type,

            string unhealthyEvaluation)
        {
            DebugParams = debugParams;
            Description = description;
            Diagnostics = diagnostics;
            HealthState = healthState;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ServiceNames = serviceNames;
            Services = services;
            Status = status;
            StatusDetails = statusDetails;
            Tags = tags;
            Type = type;
            UnhealthyEvaluation = unhealthyEvaluation;
        }
    }
}
