// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180701Preview
{
    /// <summary>
    /// This type describes an application resource.
    /// </summary>
    public partial class Application : Pulumi.CustomResource
    {
        /// <summary>
        /// Internal use.
        /// </summary>
        [Output("debugParams")]
        public Output<string?> DebugParams { get; private set; } = null!;

        /// <summary>
        /// User readable description of the application.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Describes the diagnostics definition and usage for an application resource.
        /// </summary>
        [Output("diagnostics")]
        public Output<Outputs.DiagnosticsDescriptionResponse?> Diagnostics { get; private set; } = null!;

        /// <summary>
        /// Describes the health state of an application resource.
        /// </summary>
        [Output("healthState")]
        public Output<string> HealthState { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Names of the services in the application.
        /// </summary>
        [Output("serviceNames")]
        public Output<ImmutableArray<string>> ServiceNames { get; private set; } = null!;

        /// <summary>
        /// describes the services in the application.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.ServiceResourceDescriptionResponse>> Services { get; private set; } = null!;

        /// <summary>
        /// Status of the application resource.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Gives additional information about the current status of the application deployment.
        /// </summary>
        [Output("statusDetails")]
        public Output<string> StatusDetails { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
        /// </summary>
        [Output("unhealthyEvaluation")]
        public Output<string> UnhealthyEvaluation { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:servicefabricmesh/v20180701preview:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:servicefabricmesh/v20180701preview:Application", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:servicefabricmesh/v20180901preview:Application"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Application(name, id, options);
        }
    }

    public sealed class ApplicationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identity of the application.
        /// </summary>
        [Input("applicationName", required: true)]
        public Input<string> ApplicationName { get; set; } = null!;

        /// <summary>
        /// Internal use.
        /// </summary>
        [Input("debugParams")]
        public Input<string>? DebugParams { get; set; }

        /// <summary>
        /// User readable description of the application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Describes the diagnostics definition and usage for an application resource.
        /// </summary>
        [Input("diagnostics")]
        public Input<Inputs.DiagnosticsDescriptionArgs>? Diagnostics { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("services")]
        private InputList<Inputs.ServiceResourceDescriptionArgs>? _services;

        /// <summary>
        /// describes the services in the application.
        /// </summary>
        public InputList<Inputs.ServiceResourceDescriptionArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ServiceResourceDescriptionArgs>());
            set => _services = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ApplicationArgs()
        {
        }
    }
}
