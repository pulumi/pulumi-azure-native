// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ServiceFabricMesh.V20180701Preview
{
    /// <summary>
    /// The kind of DiagnosticsSink.
    /// </summary>
    [EnumType]
    public readonly struct DiagnosticsSinkKind : IEquatable<DiagnosticsSinkKind>
    {
        private readonly string _value;

        private DiagnosticsSinkKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type.
        /// </summary>
        public static DiagnosticsSinkKind Invalid { get; } = new DiagnosticsSinkKind("Invalid");
        /// <summary>
        /// Diagnostics settings for Geneva.
        /// </summary>
        public static DiagnosticsSinkKind AzureInternalMonitoringPipeline { get; } = new DiagnosticsSinkKind("AzureInternalMonitoringPipeline");

        public static bool operator ==(DiagnosticsSinkKind left, DiagnosticsSinkKind right) => left.Equals(right);
        public static bool operator !=(DiagnosticsSinkKind left, DiagnosticsSinkKind right) => !left.Equals(right);

        public static explicit operator string(DiagnosticsSinkKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiagnosticsSinkKind other && Equals(other);
        public bool Equals(DiagnosticsSinkKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The health state of a resource such as Application, Service, or Network.
    /// </summary>
    [EnumType]
    public readonly struct HealthState : IEquatable<HealthState>
    {
        private readonly string _value;

        private HealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero.
        /// </summary>
        public static HealthState Invalid { get; } = new HealthState("Invalid");
        /// <summary>
        /// Indicates the health state is okay. The value is 1.
        /// </summary>
        public static HealthState Ok { get; } = new HealthState("Ok");
        /// <summary>
        /// Indicates the health state is at a warning level. The value is 2.
        /// </summary>
        public static HealthState Warning { get; } = new HealthState("Warning");
        /// <summary>
        /// Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3.
        /// </summary>
        public static HealthState Error { get; } = new HealthState("Error");
        /// <summary>
        /// Indicates an unknown health status. The value is 65535.
        /// </summary>
        public static HealthState Unknown { get; } = new HealthState("Unknown");

        public static bool operator ==(HealthState left, HealthState right) => left.Equals(right);
        public static bool operator !=(HealthState left, HealthState right) => !left.Equals(right);

        public static explicit operator string(HealthState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthState other && Equals(other);
        public bool Equals(HealthState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The QoS tier for ingress.
    /// </summary>
    [EnumType]
    public readonly struct IngressQoSLevel : IEquatable<IngressQoSLevel>
    {
        private readonly string _value;

        private IngressQoSLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressQoSLevel Bronze { get; } = new IngressQoSLevel("Bronze");

        public static bool operator ==(IngressQoSLevel left, IngressQoSLevel right) => left.Equals(right);
        public static bool operator !=(IngressQoSLevel left, IngressQoSLevel right) => !left.Equals(right);

        public static explicit operator string(IngressQoSLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressQoSLevel other && Equals(other);
        public bool Equals(IngressQoSLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Operating system type required by the code in service.
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystemTypes : IEquatable<OperatingSystemTypes>
    {
        private readonly string _value;

        private OperatingSystemTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatingSystemTypes Linux { get; } = new OperatingSystemTypes("Linux");
        public static OperatingSystemTypes Windows { get; } = new OperatingSystemTypes("Windows");

        public static bool operator ==(OperatingSystemTypes left, OperatingSystemTypes right) => left.Equals(right);
        public static bool operator !=(OperatingSystemTypes left, OperatingSystemTypes right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemTypes other && Equals(other);
        public bool Equals(OperatingSystemTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provider of the volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeProvider : IEquatable<VolumeProvider>
    {
        private readonly string _value;

        private VolumeProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeProvider SFAzureFile { get; } = new VolumeProvider("SFAzureFile");

        public static bool operator ==(VolumeProvider left, VolumeProvider right) => left.Equals(right);
        public static bool operator !=(VolumeProvider left, VolumeProvider right) => !left.Equals(right);

        public static explicit operator string(VolumeProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeProvider other && Equals(other);
        public bool Equals(VolumeProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
