// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.HybridData.Latest
{
    /// <summary>
    /// This is the preferred geo location for the job to run.
    /// </summary>
    [EnumType]
    public readonly struct RunLocation : IEquatable<RunLocation>
    {
        private readonly string _value;

        private RunLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RunLocation None { get; } = new RunLocation("none");
        public static RunLocation Australiaeast { get; } = new RunLocation("australiaeast");
        public static RunLocation Australiasoutheast { get; } = new RunLocation("australiasoutheast");
        public static RunLocation Brazilsouth { get; } = new RunLocation("brazilsouth");
        public static RunLocation Canadacentral { get; } = new RunLocation("canadacentral");
        public static RunLocation Canadaeast { get; } = new RunLocation("canadaeast");
        public static RunLocation Centralindia { get; } = new RunLocation("centralindia");
        public static RunLocation Centralus { get; } = new RunLocation("centralus");
        public static RunLocation Eastasia { get; } = new RunLocation("eastasia");
        public static RunLocation Eastus { get; } = new RunLocation("eastus");
        public static RunLocation Eastus2 { get; } = new RunLocation("eastus2");
        public static RunLocation Japaneast { get; } = new RunLocation("japaneast");
        public static RunLocation Japanwest { get; } = new RunLocation("japanwest");
        public static RunLocation Koreacentral { get; } = new RunLocation("koreacentral");
        public static RunLocation Koreasouth { get; } = new RunLocation("koreasouth");
        public static RunLocation Southeastasia { get; } = new RunLocation("southeastasia");
        public static RunLocation Southcentralus { get; } = new RunLocation("southcentralus");
        public static RunLocation Southindia { get; } = new RunLocation("southindia");
        public static RunLocation Northcentralus { get; } = new RunLocation("northcentralus");
        public static RunLocation Northeurope { get; } = new RunLocation("northeurope");
        public static RunLocation Uksouth { get; } = new RunLocation("uksouth");
        public static RunLocation Ukwest { get; } = new RunLocation("ukwest");
        public static RunLocation Westcentralus { get; } = new RunLocation("westcentralus");
        public static RunLocation Westeurope { get; } = new RunLocation("westeurope");
        public static RunLocation Westindia { get; } = new RunLocation("westindia");
        public static RunLocation Westus { get; } = new RunLocation("westus");
        public static RunLocation Westus2 { get; } = new RunLocation("westus2");

        public static bool operator ==(RunLocation left, RunLocation right) => left.Equals(right);
        public static bool operator !=(RunLocation left, RunLocation right) => !left.Equals(right);

        public static explicit operator string(RunLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RunLocation other && Equals(other);
        public bool Equals(RunLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the job definition.
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static State Disabled { get; } = new State("Disabled");
        public static State Enabled { get; } = new State("Enabled");
        public static State Supported { get; } = new State("Supported");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryption algorithm used to encrypt data.
    /// </summary>
    [EnumType]
    public readonly struct SupportedAlgorithm : IEquatable<SupportedAlgorithm>
    {
        private readonly string _value;

        private SupportedAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportedAlgorithm None { get; } = new SupportedAlgorithm("None");
        public static SupportedAlgorithm RSA1_5 { get; } = new SupportedAlgorithm("RSA1_5");
        public static SupportedAlgorithm RSA_OAEP { get; } = new SupportedAlgorithm("RSA_OAEP");
        public static SupportedAlgorithm PlainText { get; } = new SupportedAlgorithm("PlainText");

        public static bool operator ==(SupportedAlgorithm left, SupportedAlgorithm right) => left.Equals(right);
        public static bool operator !=(SupportedAlgorithm left, SupportedAlgorithm right) => !left.Equals(right);

        public static explicit operator string(SupportedAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportedAlgorithm other && Equals(other);
        public bool Equals(SupportedAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
    /// </summary>
    [EnumType]
    public readonly struct UserConfirmation : IEquatable<UserConfirmation>
    {
        private readonly string _value;

        private UserConfirmation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserConfirmation NotRequired { get; } = new UserConfirmation("NotRequired");
        public static UserConfirmation Required { get; } = new UserConfirmation("Required");

        public static bool operator ==(UserConfirmation left, UserConfirmation right) => left.Equals(right);
        public static bool operator !=(UserConfirmation left, UserConfirmation right) => !left.Equals(right);

        public static explicit operator string(UserConfirmation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserConfirmation other && Equals(other);
        public bool Equals(UserConfirmation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
