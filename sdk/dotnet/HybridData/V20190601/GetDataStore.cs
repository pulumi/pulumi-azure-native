// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.HybridData.V20190601
{
    public static class GetDataStore
    {
        public static Task<GetDataStoreResult> InvokeAsync(GetDataStoreArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDataStoreResult>("azure-nextgen:hybriddata/v20190601:getDataStore", args ?? new GetDataStoreArgs(), options.WithVersion());
    }


    public sealed class GetDataStoreArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
        /// </summary>
        [Input("dataManagerName", required: true)]
        public string DataManagerName { get; set; } = null!;

        /// <summary>
        /// The data store/repository name queried.
        /// </summary>
        [Input("dataStoreName", required: true)]
        public string DataStoreName { get; set; } = null!;

        /// <summary>
        /// The Resource Group Name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDataStoreArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDataStoreResult
    {
        /// <summary>
        /// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomerSecretResponse> CustomerSecrets;
        /// <summary>
        /// The arm id of the data store type.
        /// </summary>
        public readonly string DataStoreTypeId;
        /// <summary>
        /// A generic json used differently by each data source type.
        /// </summary>
        public readonly object? ExtendedProperties;
        /// <summary>
        /// Name of the object.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Arm Id for the manager resource to which the data source is associated. This is optional.
        /// </summary>
        public readonly string? RepositoryId;
        /// <summary>
        /// State of the data source.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Type of the object.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDataStoreResult(
            ImmutableArray<Outputs.CustomerSecretResponse> customerSecrets,

            string dataStoreTypeId,

            object? extendedProperties,

            string name,

            string? repositoryId,

            string state,

            string type)
        {
            CustomerSecrets = customerSecrets;
            DataStoreTypeId = dataStoreTypeId;
            ExtendedProperties = extendedProperties;
            Name = name;
            RepositoryId = repositoryId;
            State = state;
            Type = type;
        }
    }
}
