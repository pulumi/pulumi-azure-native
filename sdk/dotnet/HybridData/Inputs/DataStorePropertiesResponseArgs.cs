// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.HybridData.Inputs
{

    /// <summary>
    /// Data Store for sources and sinks
    /// </summary>
    public sealed class DataStorePropertiesResponseArgs : Pulumi.ResourceArgs
    {
        [Input("customerSecrets")]
        private InputList<Inputs.CustomerSecretResponseArgs>? _customerSecrets;

        /// <summary>
        /// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
        /// </summary>
        public InputList<Inputs.CustomerSecretResponseArgs> CustomerSecrets
        {
            get => _customerSecrets ?? (_customerSecrets = new InputList<Inputs.CustomerSecretResponseArgs>());
            set => _customerSecrets = value;
        }

        /// <summary>
        /// The arm id of the data store type.
        /// </summary>
        [Input("dataStoreTypeId", required: true)]
        public Input<string> DataStoreTypeId { get; set; } = null!;

        [Input("extendedProperties")]
        private InputMap<string>? _extendedProperties;

        /// <summary>
        /// A generic json used differently by each data source type.
        /// </summary>
        public InputMap<string> ExtendedProperties
        {
            get => _extendedProperties ?? (_extendedProperties = new InputMap<string>());
            set => _extendedProperties = value;
        }

        /// <summary>
        /// Arm Id for the manager resource to which the data source is associated. This is optional.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// State of the data source.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        public DataStorePropertiesResponseArgs()
        {
        }
    }
}
