// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Elastic.V20250115Preview
{
    /// <summary>
    /// Configuration type of the Elasticsearch project
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationType : IEquatable<ConfigurationType>
    {
        private readonly string _value;

        private ConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationType GeneralPurpose { get; } = new ConfigurationType("GeneralPurpose");
        public static ConfigurationType Vector { get; } = new ConfigurationType("Vector");
        public static ConfigurationType TimeSeries { get; } = new ConfigurationType("TimeSeries");
        public static ConfigurationType NotApplicable { get; } = new ConfigurationType("NotApplicable");

        public static bool operator ==(ConfigurationType left, ConfigurationType right) => left.Equals(right);
        public static bool operator !=(ConfigurationType left, ConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationType other && Equals(other);
        public bool Equals(ConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Hosting type of the monitor resource - either Hosted deployments OR Serverless Projects.
    /// </summary>
    [EnumType]
    public readonly struct HostingType : IEquatable<HostingType>
    {
        private readonly string _value;

        private HostingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostingType Hosted { get; } = new HostingType("Hosted");
        public static HostingType Serverless { get; } = new HostingType("Serverless");

        public static bool operator ==(HostingType left, HostingType right) => left.Equals(right);
        public static bool operator !=(HostingType left, HostingType right) => !left.Equals(right);

        public static explicit operator string(HostingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostingType other && Equals(other);
        public bool Equals(HostingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Managed identity type.
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityTypes : IEquatable<ManagedIdentityTypes>
    {
        private readonly string _value;

        private ManagedIdentityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityTypes SystemAssigned { get; } = new ManagedIdentityTypes("SystemAssigned");

        public static bool operator ==(ManagedIdentityTypes left, ManagedIdentityTypes right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityTypes left, ManagedIdentityTypes right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityTypes other && Equals(other);
        public bool Equals(ManagedIdentityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag specifying if the resource monitoring is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringStatus : IEquatable<MonitoringStatus>
    {
        private readonly string _value;

        private MonitoringStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringStatus Enabled { get; } = new MonitoringStatus("Enabled");
        public static MonitoringStatus Disabled { get; } = new MonitoringStatus("Disabled");

        public static bool operator ==(MonitoringStatus left, MonitoringStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringStatus left, MonitoringStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringStatus other && Equals(other);
        public bool Equals(MonitoringStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation for the patch on the resource.
    /// </summary>
    [EnumType]
    public readonly struct Operation : IEquatable<Operation>
    {
        private readonly string _value;

        private Operation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operation AddBegin { get; } = new Operation("AddBegin");
        public static Operation AddComplete { get; } = new Operation("AddComplete");
        public static Operation DeleteBegin { get; } = new Operation("DeleteBegin");
        public static Operation DeleteComplete { get; } = new Operation("DeleteComplete");
        public static Operation Active { get; } = new Operation("Active");

        public static bool operator ==(Operation left, Operation right) => left.Equals(right);
        public static bool operator !=(Operation left, Operation right) => !left.Equals(right);

        public static explicit operator string(Operation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operation other && Equals(other);
        public bool Equals(Operation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Project type; ex: Elasticsearch / Observability / Security
    /// </summary>
    [EnumType]
    public readonly struct ProjectType : IEquatable<ProjectType>
    {
        private readonly string _value;

        private ProjectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectType Elasticsearch { get; } = new ProjectType("Elasticsearch");
        public static ProjectType Observability { get; } = new ProjectType("Observability");
        public static ProjectType Security { get; } = new ProjectType("Security");
        public static ProjectType NotApplicable { get; } = new ProjectType("NotApplicable");

        public static bool operator ==(ProjectType left, ProjectType right) => left.Equals(right);
        public static bool operator !=(ProjectType left, ProjectType right) => !left.Equals(right);

        public static explicit operator string(ProjectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectType other && Equals(other);
        public bool Equals(ProjectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of monitoring.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status InProgress { get; } = new Status("InProgress");
        public static Status Active { get; } = new Status("Active");
        public static Status Failed { get; } = new Status("Failed");
        public static Status Deleting { get; } = new Status("Deleting");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Valid actions for a filtering tag.
    /// </summary>
    [EnumType]
    public readonly struct TagAction : IEquatable<TagAction>
    {
        private readonly string _value;

        private TagAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TagAction Include { get; } = new TagAction("Include");
        public static TagAction Exclude { get; } = new TagAction("Exclude");

        public static bool operator ==(TagAction left, TagAction right) => left.Equals(right);
        public static bool operator !=(TagAction left, TagAction right) => !left.Equals(right);

        public static explicit operator string(TagAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TagAction other && Equals(other);
        public bool Equals(TagAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
