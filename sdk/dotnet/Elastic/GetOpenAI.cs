// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Elastic
{
    public static class GetOpenAI
    {
        /// <summary>
        /// Capture properties of Open AI resource Integration.
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2024-01-01-preview, 2024-05-01-preview, 2024-06-15-preview.
        /// </summary>
        public static Task<GetOpenAIResult> InvokeAsync(GetOpenAIArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOpenAIResult>("azure-native:elastic:getOpenAI", args ?? new GetOpenAIArgs(), options.WithDefaults());

        /// <summary>
        /// Capture properties of Open AI resource Integration.
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2024-01-01-preview, 2024-05-01-preview, 2024-06-15-preview.
        /// </summary>
        public static Output<GetOpenAIResult> Invoke(GetOpenAIInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOpenAIResult>("azure-native:elastic:getOpenAI", args ?? new GetOpenAIInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOpenAIArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OpenAI Integration name
        /// </summary>
        [Input("integrationName", required: true)]
        public string IntegrationName { get; set; } = null!;

        /// <summary>
        /// Monitor resource name
        /// </summary>
        [Input("monitorName", required: true)]
        public string MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetOpenAIArgs()
        {
        }
        public static new GetOpenAIArgs Empty => new GetOpenAIArgs();
    }

    public sealed class GetOpenAIInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OpenAI Integration name
        /// </summary>
        [Input("integrationName", required: true)]
        public Input<string> IntegrationName { get; set; } = null!;

        /// <summary>
        /// Monitor resource name
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetOpenAIInvokeArgs()
        {
        }
        public static new GetOpenAIInvokeArgs Empty => new GetOpenAIInvokeArgs();
    }


    [OutputType]
    public sealed class GetOpenAIResult
    {
        /// <summary>
        /// The id of the integration.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the integration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Open AI Integration details.
        /// </summary>
        public readonly Outputs.OpenAIIntegrationPropertiesResponse Properties;
        /// <summary>
        /// The type of the integration.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetOpenAIResult(
            string id,

            string name,

            Outputs.OpenAIIntegrationPropertiesResponse properties,

            string type)
        {
            Id = id;
            Name = name;
            Properties = properties;
            Type = type;
        }
    }
}
