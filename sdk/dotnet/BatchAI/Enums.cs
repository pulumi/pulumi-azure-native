// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.BatchAI
{
    /// <summary>
    /// An action to be performed when the cluster size is decreasing. The default value is requeue.
    /// </summary>
    [EnumType]
    public readonly struct DeallocationOption : IEquatable<DeallocationOption>
    {
        private readonly string _value;

        private DeallocationOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeallocationOption Requeue { get; } = new DeallocationOption("requeue");
        public static DeallocationOption Terminate { get; } = new DeallocationOption("terminate");
        public static DeallocationOption Waitforjobcompletion { get; } = new DeallocationOption("waitforjobcompletion");

        public static bool operator ==(DeallocationOption left, DeallocationOption right) => left.Equals(right);
        public static bool operator !=(DeallocationOption left, DeallocationOption right) => !left.Equals(right);

        public static explicit operator string(DeallocationOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeallocationOption other && Equals(other);
        public bool Equals(DeallocationOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scheduling priority associated with the job. Possible values: low, normal, high.
    /// </summary>
    [EnumType]
    public readonly struct JobPriority : IEquatable<JobPriority>
    {
        private readonly string _value;

        private JobPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobPriority Low { get; } = new JobPriority("low");
        public static JobPriority Normal { get; } = new JobPriority("normal");
        public static JobPriority High { get; } = new JobPriority("high");

        public static bool operator ==(JobPriority left, JobPriority right) => left.Equals(right);
        public static bool operator !=(JobPriority left, JobPriority right) => !left.Equals(right);

        public static explicit operator string(JobPriority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobPriority other && Equals(other);
        public bool Equals(JobPriority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// VM priority. Allowed values are: dedicated (default) and lowpriority.
    /// </summary>
    [EnumType]
    public readonly struct VmPriority : IEquatable<VmPriority>
    {
        private readonly string _value;

        private VmPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VmPriority Dedicated { get; } = new VmPriority("dedicated");
        public static VmPriority Lowpriority { get; } = new VmPriority("lowpriority");

        public static bool operator ==(VmPriority left, VmPriority right) => left.Equals(right);
        public static bool operator !=(VmPriority left, VmPriority right) => !left.Equals(right);

        public static explicit operator string(VmPriority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VmPriority other && Equals(other);
        public bool Equals(VmPriority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
