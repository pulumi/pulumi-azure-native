// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.BatchAI.V20170901Preview
{
    /// <summary>
    /// The default value is requeue.
    /// </summary>
    [EnumType]
    public readonly struct DeallocationOption : IEquatable<DeallocationOption>
    {
        private readonly string _value;

        private DeallocationOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeallocationOption Requeue { get; } = new DeallocationOption("requeue");
        public static DeallocationOption Terminate { get; } = new DeallocationOption("terminate");
        public static DeallocationOption Waitforjobcompletion { get; } = new DeallocationOption("waitforjobcompletion");
        public static DeallocationOption Unknown { get; } = new DeallocationOption("unknown");

        public static bool operator ==(DeallocationOption left, DeallocationOption right) => left.Equals(right);
        public static bool operator !=(DeallocationOption left, DeallocationOption right) => !left.Equals(right);

        public static explicit operator string(DeallocationOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeallocationOption other && Equals(other);
        public bool Equals(DeallocationOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'
    /// </summary>
    [EnumType]
    public readonly struct OutputType : IEquatable<OutputType>
    {
        private readonly string _value;

        private OutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OutputType Model { get; } = new OutputType("model");
        public static OutputType Logs { get; } = new OutputType("logs");
        public static OutputType Summary { get; } = new OutputType("summary");
        public static OutputType Custom { get; } = new OutputType("custom");

        public static bool operator ==(OutputType left, OutputType right) => left.Equals(right);
        public static bool operator !=(OutputType left, OutputType right) => !left.Equals(right);

        public static explicit operator string(OutputType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutputType other && Equals(other);
        public bool Equals(OutputType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAccountType Standard_LRS { get; } = new StorageAccountType("Standard_LRS");
        public static StorageAccountType Premium_LRS { get; } = new StorageAccountType("Premium_LRS");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Default is dedicated.
    /// </summary>
    [EnumType]
    public readonly struct VmPriority : IEquatable<VmPriority>
    {
        private readonly string _value;

        private VmPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VmPriority Dedicated { get; } = new VmPriority("dedicated");
        public static VmPriority Lowpriority { get; } = new VmPriority("lowpriority");

        public static bool operator ==(VmPriority left, VmPriority right) => left.Equals(right);
        public static bool operator !=(VmPriority left, VmPriority right) => !left.Equals(right);

        public static explicit operator string(VmPriority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VmPriority other && Equals(other);
        public bool Equals(VmPriority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
