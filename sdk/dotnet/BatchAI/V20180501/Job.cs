// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.V20180501
{
    /// <summary>
    /// Information about a Job.
    /// </summary>
    public partial class Job : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The properties associated with the Job.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.JobPropertiesResponseResult> Properties { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("azurerm:batchai/v20180501:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:batchai/v20180501:Job", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Job(name, id, options);
        }
    }

    public sealed class JobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for Caffe2 job.
        /// </summary>
        [Input("caffe2Settings")]
        public Input<Inputs.Caffe2SettingsArgs>? Caffe2Settings { get; set; }

        /// <summary>
        /// Settings for Caffe job.
        /// </summary>
        [Input("caffeSettings")]
        public Input<Inputs.CaffeSettingsArgs>? CaffeSettings { get; set; }

        /// <summary>
        /// Settings for Chainer job.
        /// </summary>
        [Input("chainerSettings")]
        public Input<Inputs.ChainerSettingsArgs>? ChainerSettings { get; set; }

        /// <summary>
        /// Resource ID of the cluster on which this job will run.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<Inputs.ResourceIdArgs> Cluster { get; set; } = null!;

        /// <summary>
        /// Settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        /// </summary>
        [Input("cntkSettings")]
        public Input<Inputs.CNTKsettingsArgs>? CntkSettings { get; set; }

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.JobBasePropertiesPropertiesArgs>? Constraints { get; set; }

        /// <summary>
        /// Docker container settings for the job. If not provided, the job will run directly on the node.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerSettingsArgs>? ContainerSettings { get; set; }

        /// <summary>
        /// Settings for custom MPI job.
        /// </summary>
        [Input("customMpiSettings")]
        public Input<Inputs.CustomMpiSettingsArgs>? CustomMpiSettings { get; set; }

        /// <summary>
        /// Settings for custom tool kit job.
        /// </summary>
        [Input("customToolkitSettings")]
        public Input<Inputs.CustomToolkitSettingsArgs>? CustomToolkitSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// A list of user defined environment variables which will be setup for the job.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("experimentName", required: true)]
        public Input<string> ExperimentName { get; set; } = null!;

        /// <summary>
        /// Settings for Horovod job.
        /// </summary>
        [Input("horovodSettings")]
        public Input<Inputs.HorovodSettingsArgs>? HorovodSettings { get; set; }

        [Input("inputDirectories")]
        private InputList<Inputs.InputDirectoryArgs>? _inputDirectories;

        /// <summary>
        /// A list of input directories for the job.
        /// </summary>
        public InputList<Inputs.InputDirectoryArgs> InputDirectories
        {
            get => _inputDirectories ?? (_inputDirectories = new InputList<Inputs.InputDirectoryArgs>());
            set => _inputDirectories = value;
        }

        /// <summary>
        /// A command line to be executed on each node allocated for the job before tool kit is launched.
        /// </summary>
        [Input("jobPreparation")]
        public Input<Inputs.JobPreparationArgs>? JobPreparation { get; set; }

        /// <summary>
        /// Information on mount volumes to be used by the job. These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Input("mountVolumes")]
        public Input<Inputs.MountVolumesArgs>? MountVolumes { get; set; }

        /// <summary>
        /// The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Number of compute nodes to run the job on. The job will be gang scheduled on that many compute nodes.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        [Input("outputDirectories")]
        private InputList<Inputs.OutputDirectoryArgs>? _outputDirectories;

        /// <summary>
        /// A list of output directories for the job.
        /// </summary>
        public InputList<Inputs.OutputDirectoryArgs> OutputDirectories
        {
            get => _outputDirectories ?? (_outputDirectories = new InputList<Inputs.OutputDirectoryArgs>());
            set => _outputDirectories = value;
        }

        /// <summary>
        /// Settings for pyTorch job.
        /// </summary>
        [Input("pyTorchSettings")]
        public Input<Inputs.PyTorchSettingsArgs>? PyTorchSettings { get; set; }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Scheduling priority associated with the job. Possible values: low, normal, high.
        /// </summary>
        [Input("schedulingPriority")]
        public Input<string>? SchedulingPriority { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EnvironmentVariableWithSecretValueArgs>? _secrets;

        /// <summary>
        /// A list of user defined environment variables with secret values which will be setup for the job. Server will never report values of these variables back.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableWithSecretValueArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EnvironmentVariableWithSecretValueArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The path where the Batch AI service will store stdout, stderror and execution log of the job.
        /// </summary>
        [Input("stdOutErrPathPrefix", required: true)]
        public Input<string> StdOutErrPathPrefix { get; set; } = null!;

        /// <summary>
        /// Settings for Tensor Flow job.
        /// </summary>
        [Input("tensorFlowSettings")]
        public Input<Inputs.TensorFlowSettingsArgs>? TensorFlowSettings { get; set; }

        /// <summary>
        /// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public JobArgs()
        {
        }
    }
}
