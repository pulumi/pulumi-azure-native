// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180501
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("azure-nextgen:batchai/v20180501:getCluster", args ?? new GetClusterArgs(), options.WithVersion());
    }


    public sealed class GetClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
        /// </summary>
        public readonly string AllocationState;
        /// <summary>
        /// The time at which the cluster entered its current allocation state.
        /// </summary>
        public readonly string AllocationStateTransitionTime;
        /// <summary>
        /// The time when the cluster was created.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The number of compute nodes currently assigned to the cluster.
        /// </summary>
        public readonly int CurrentNodeCount;
        /// <summary>
        /// Collection of errors encountered by various compute nodes during node setup.
        /// </summary>
        public readonly ImmutableArray<Outputs.BatchAIErrorResponse> Errors;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
        /// </summary>
        public readonly Outputs.NodeSetupResponse? NodeSetup;
        /// <summary>
        /// Counts of various node states on the cluster.
        /// </summary>
        public readonly Outputs.NodeStateCountsResponse NodeStateCounts;
        /// <summary>
        /// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Time when the provisioning state was changed.
        /// </summary>
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// Scale settings of the cluster.
        /// </summary>
        public readonly Outputs.ScaleSettingsResponse? ScaleSettings;
        /// <summary>
        /// Virtual network subnet resource ID the cluster nodes belong to.
        /// </summary>
        public readonly Outputs.ResourceIdResponse? Subnet;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Administrator user account settings which can be used to SSH to compute nodes.
        /// </summary>
        public readonly Outputs.UserAccountSettingsResponse? UserAccountSettings;
        /// <summary>
        /// Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
        /// </summary>
        public readonly Outputs.VirtualMachineConfigurationResponse? VirtualMachineConfiguration;
        /// <summary>
        /// VM priority of cluster nodes.
        /// </summary>
        public readonly string? VmPriority;
        /// <summary>
        /// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private GetClusterResult(
            string allocationState,

            string allocationStateTransitionTime,

            string creationTime,

            int currentNodeCount,

            ImmutableArray<Outputs.BatchAIErrorResponse> errors,

            string name,

            Outputs.NodeSetupResponse? nodeSetup,

            Outputs.NodeStateCountsResponse nodeStateCounts,

            string provisioningState,

            string provisioningStateTransitionTime,

            Outputs.ScaleSettingsResponse? scaleSettings,

            Outputs.ResourceIdResponse? subnet,

            string type,

            Outputs.UserAccountSettingsResponse? userAccountSettings,

            Outputs.VirtualMachineConfigurationResponse? virtualMachineConfiguration,

            string? vmPriority,

            string? vmSize)
        {
            AllocationState = allocationState;
            AllocationStateTransitionTime = allocationStateTransitionTime;
            CreationTime = creationTime;
            CurrentNodeCount = currentNodeCount;
            Errors = errors;
            Name = name;
            NodeSetup = nodeSetup;
            NodeStateCounts = nodeStateCounts;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            ScaleSettings = scaleSettings;
            Subnet = subnet;
            Type = type;
            UserAccountSettings = userAccountSettings;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            VmPriority = vmPriority;
            VmSize = vmSize;
        }
    }
}
