// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.V20180301.Inputs
{

    /// <summary>
    /// The properties of a Batch AI job.
    /// </summary>
    public sealed class JobBasePropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the settings for Caffe2 job.
        /// </summary>
        [Input("caffe2Settings")]
        public Input<Inputs.Caffe2SettingsArgs>? Caffe2Settings { get; set; }

        /// <summary>
        /// Specifies the settings for Caffe job.
        /// </summary>
        [Input("caffeSettings")]
        public Input<Inputs.CaffeSettingsArgs>? CaffeSettings { get; set; }

        /// <summary>
        /// Specifies the settings for Chainer job.
        /// </summary>
        [Input("chainerSettings")]
        public Input<Inputs.ChainerSettingsArgs>? ChainerSettings { get; set; }

        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<Inputs.ResourceIdArgs> Cluster { get; set; } = null!;

        /// <summary>
        /// Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        /// </summary>
        [Input("cntkSettings")]
        public Input<Inputs.CNTKsettingsArgs>? CntkSettings { get; set; }

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.JobBasePropertiesPropertiesArgs>? Constraints { get; set; }

        /// <summary>
        /// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerSettingsArgs>? ContainerSettings { get; set; }

        /// <summary>
        /// Specifies the settings for a custom tool kit job.
        /// </summary>
        [Input("customToolkitSettings")]
        public Input<Inputs.CustomToolkitSettingsArgs>? CustomToolkitSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Describe the experiment information of the job
        /// </summary>
        [Input("experimentName")]
        public Input<string>? ExperimentName { get; set; }

        [Input("inputDirectories")]
        private InputList<Inputs.InputDirectoryArgs>? _inputDirectories;
        public InputList<Inputs.InputDirectoryArgs> InputDirectories
        {
            get => _inputDirectories ?? (_inputDirectories = new InputList<Inputs.InputDirectoryArgs>());
            set => _inputDirectories = value;
        }

        /// <summary>
        /// The specified actions will run on all the nodes that are part of the job
        /// </summary>
        [Input("jobPreparation")]
        public Input<Inputs.JobPreparationArgs>? JobPreparation { get; set; }

        /// <summary>
        /// These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Input("mountVolumes")]
        public Input<Inputs.MountVolumesArgs>? MountVolumes { get; set; }

        /// <summary>
        /// The job will be gang scheduled on that many compute nodes
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        [Input("outputDirectories")]
        private InputList<Inputs.OutputDirectoryArgs>? _outputDirectories;
        public InputList<Inputs.OutputDirectoryArgs> OutputDirectories
        {
            get => _outputDirectories ?? (_outputDirectories = new InputList<Inputs.OutputDirectoryArgs>());
            set => _outputDirectories = value;
        }

        /// <summary>
        /// Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Specifies the settings for pyTorch job.
        /// </summary>
        [Input("pyTorchSettings")]
        public Input<Inputs.PyTorchSettingsArgs>? PyTorchSettings { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EnvironmentVariableWithSecretValueArgs>? _secrets;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job. Server will never report values of these variables back.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableWithSecretValueArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EnvironmentVariableWithSecretValueArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The path where the Batch AI service will upload stdout and stderror of the job.
        /// </summary>
        [Input("stdOutErrPathPrefix", required: true)]
        public Input<string> StdOutErrPathPrefix { get; set; } = null!;

        /// <summary>
        /// Specifies the settings for TensorFlow job.
        /// </summary>
        [Input("tensorFlowSettings")]
        public Input<Inputs.TensorFlowSettingsArgs>? TensorFlowSettings { get; set; }

        public JobBasePropertiesArgs()
        {
        }
    }
}
