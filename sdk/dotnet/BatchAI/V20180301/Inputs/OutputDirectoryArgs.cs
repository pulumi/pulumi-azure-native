// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180301.Inputs
{

    /// <summary>
    /// Output directory for the job.
    /// </summary>
    public sealed class OutputDirectoryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default is true. If false, then the directory is not created and can be any directory path that the user specifies.
        /// </summary>
        [Input("createNew")]
        public Input<bool>? CreateNew { get; set; }

        /// <summary>
        /// The path of the output directory will be available as a value of an environment variable with AZ_BATCHAI_OUTPUT_&lt;id&gt; name, where &lt;id&gt; is the value of id attribute.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        /// </summary>
        [Input("pathPrefix", required: true)]
        public Input<string> PathPrefix { get; set; } = null!;

        /// <summary>
        /// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        /// </summary>
        [Input("pathSuffix")]
        public Input<string>? PathSuffix { get; set; }

        /// <summary>
        /// Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public OutputDirectoryArgs()
        {
        }
    }
}
