// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.V20180301
{
    /// <summary>
    /// Contains information about the File Server.
    /// </summary>
    public partial class FileServer : Pulumi.CustomResource
    {
        /// <summary>
        /// The location of the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The properties associated with the File Server.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.FileServerPropertiesResponseResult> Properties { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a FileServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileServer(string name, FileServerArgs args, CustomResourceOptions? options = null)
            : base("azurerm:batchai/v20180301:FileServer", name, args ?? new FileServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileServer(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:batchai/v20180301:FileServer", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileServer Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FileServer(name, id, options);
        }
    }

    public sealed class FileServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for the data disk which would be created for the File Server.
        /// </summary>
        [Input("dataDisks", required: true)]
        public Input<Inputs.DataDisksArgs> DataDisks { get; set; } = null!;

        /// <summary>
        /// The region in which to create the File Server.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SSH configuration settings for the VM
        /// </summary>
        [Input("sshConfiguration", required: true)]
        public Input<Inputs.SshConfigurationArgs> SshConfiguration { get; set; } = null!;

        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.ResourceIdArgs>? Subnet { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The user specified tags associated with the File Server.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// For information about available VM sizes for fileservers from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
        /// </summary>
        [Input("vmSize", required: true)]
        public Input<string> VmSize { get; set; } = null!;

        public FileServerArgs()
        {
        }
    }
}
