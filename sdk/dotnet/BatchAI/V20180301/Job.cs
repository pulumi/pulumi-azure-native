// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180301
{
    /// <summary>
    /// Contains information about the job.
    /// </summary>
    public partial class Job : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the settings for Caffe job.
        /// </summary>
        [Output("caffeSettings")]
        public Output<Outputs.CaffeSettingsResponse?> CaffeSettings { get; private set; } = null!;

        /// <summary>
        /// Specifies the settings for Chainer job.
        /// </summary>
        [Output("chainerSettings")]
        public Output<Outputs.ChainerSettingsResponse?> ChainerSettings { get; private set; } = null!;

        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        [Output("cluster")]
        public Output<Outputs.ResourceIdResponse?> Cluster { get; private set; } = null!;

        /// <summary>
        /// Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        /// </summary>
        [Output("cntkSettings")]
        public Output<Outputs.CNTKsettingsResponse?> CntkSettings { get; private set; } = null!;

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Output("constraints")]
        public Output<Outputs.JobPropertiesResponseConstraints?> Constraints { get; private set; } = null!;

        /// <summary>
        /// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
        /// </summary>
        [Output("containerSettings")]
        public Output<Outputs.ContainerSettingsResponse?> ContainerSettings { get; private set; } = null!;

        /// <summary>
        /// The creation time of the job.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the settings for a custom tool kit job.
        /// </summary>
        [Output("customToolkitSettings")]
        public Output<Outputs.CustomToolkitSettingsResponse?> CustomToolkitSettings { get; private set; } = null!;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.EnvironmentVariableResponse>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Contains information about the execution of a job in the Azure Batch service.
        /// </summary>
        [Output("executionInfo")]
        public Output<Outputs.JobPropertiesResponseExecutionInfo?> ExecutionInfo { get; private set; } = null!;

        /// <summary>
        /// The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.
        /// </summary>
        [Output("executionState")]
        public Output<string?> ExecutionState { get; private set; } = null!;

        /// <summary>
        /// The time at which the job entered its current execution state.
        /// </summary>
        [Output("executionStateTransitionTime")]
        public Output<string> ExecutionStateTransitionTime { get; private set; } = null!;

        /// <summary>
        /// Describe the experiment information of the job
        /// </summary>
        [Output("experimentName")]
        public Output<string?> ExperimentName { get; private set; } = null!;

        [Output("inputDirectories")]
        public Output<ImmutableArray<Outputs.InputDirectoryResponse>> InputDirectories { get; private set; } = null!;

        /// <summary>
        /// Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.
        /// </summary>
        [Output("jobOutputDirectoryPathSegment")]
        public Output<string?> JobOutputDirectoryPathSegment { get; private set; } = null!;

        /// <summary>
        /// The specified actions will run on all the nodes that are part of the job
        /// </summary>
        [Output("jobPreparation")]
        public Output<Outputs.JobPreparationResponse?> JobPreparation { get; private set; } = null!;

        /// <summary>
        /// The location of the resource
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Output("mountVolumes")]
        public Output<Outputs.MountVolumesResponse?> MountVolumes { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The job will be gang scheduled on that many compute nodes
        /// </summary>
        [Output("nodeCount")]
        public Output<int?> NodeCount { get; private set; } = null!;

        [Output("outputDirectories")]
        public Output<ImmutableArray<Outputs.OutputDirectoryResponse>> OutputDirectories { get; private set; } = null!;

        /// <summary>
        /// Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// The provisioned state of the Batch AI job
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The time at which the job entered its current provisioning state.
        /// </summary>
        [Output("provisioningStateTransitionTime")]
        public Output<string> ProvisioningStateTransitionTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the settings for pyTorch job.
        /// </summary>
        [Output("pyTorchSettings")]
        public Output<Outputs.PyTorchSettingsResponse?> PyTorchSettings { get; private set; } = null!;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job. Server will never report values of these variables back.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.EnvironmentVariableWithSecretValueResponse>> Secrets { get; private set; } = null!;

        /// <summary>
        /// The path where the Batch AI service will upload stdout and stderror of the job.
        /// </summary>
        [Output("stdOutErrPathPrefix")]
        public Output<string?> StdOutErrPathPrefix { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the settings for TensorFlow job.
        /// </summary>
        [Output("tensorFlowSettings")]
        public Output<Outputs.TensorFlowSettingsResponse?> TensorFlowSettings { get; private set; } = null!;

        /// <summary>
        /// Possible values are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom.
        /// </summary>
        [Output("toolType")]
        public Output<string?> ToolType { get; private set; } = null!;

        /// <summary>
        /// The type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:batchai/v20180301:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:batchai/v20180301:Job", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:batchai/v20170901preview:Job"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Job(name, id, options);
        }
    }

    public sealed class JobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the settings for Caffe2 job.
        /// </summary>
        [Input("caffe2Settings")]
        public Input<Inputs.Caffe2SettingsArgs>? Caffe2Settings { get; set; }

        /// <summary>
        /// Specifies the settings for Caffe job.
        /// </summary>
        [Input("caffeSettings")]
        public Input<Inputs.CaffeSettingsArgs>? CaffeSettings { get; set; }

        /// <summary>
        /// Specifies the settings for Chainer job.
        /// </summary>
        [Input("chainerSettings")]
        public Input<Inputs.ChainerSettingsArgs>? ChainerSettings { get; set; }

        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<Inputs.ResourceIdArgs> Cluster { get; set; } = null!;

        /// <summary>
        /// Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        /// </summary>
        [Input("cntkSettings")]
        public Input<Inputs.CNTKsettingsArgs>? CntkSettings { get; set; }

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.JobBasePropertiesConstraintsArgs>? Constraints { get; set; }

        /// <summary>
        /// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerSettingsArgs>? ContainerSettings { get; set; }

        /// <summary>
        /// Specifies the settings for a custom tool kit job.
        /// </summary>
        [Input("customToolkitSettings")]
        public Input<Inputs.CustomToolkitSettingsArgs>? CustomToolkitSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Describe the experiment information of the job
        /// </summary>
        [Input("experimentName")]
        public Input<string>? ExperimentName { get; set; }

        [Input("inputDirectories")]
        private InputList<Inputs.InputDirectoryArgs>? _inputDirectories;
        public InputList<Inputs.InputDirectoryArgs> InputDirectories
        {
            get => _inputDirectories ?? (_inputDirectories = new InputList<Inputs.InputDirectoryArgs>());
            set => _inputDirectories = value;
        }

        /// <summary>
        /// The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("jobName", required: true)]
        public Input<string> JobName { get; set; } = null!;

        /// <summary>
        /// The specified actions will run on all the nodes that are part of the job
        /// </summary>
        [Input("jobPreparation")]
        public Input<Inputs.JobPreparationArgs>? JobPreparation { get; set; }

        /// <summary>
        /// The region in which to create the job.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Input("mountVolumes")]
        public Input<Inputs.MountVolumesArgs>? MountVolumes { get; set; }

        /// <summary>
        /// The job will be gang scheduled on that many compute nodes
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        [Input("outputDirectories")]
        private InputList<Inputs.OutputDirectoryArgs>? _outputDirectories;
        public InputList<Inputs.OutputDirectoryArgs> OutputDirectories
        {
            get => _outputDirectories ?? (_outputDirectories = new InputList<Inputs.OutputDirectoryArgs>());
            set => _outputDirectories = value;
        }

        /// <summary>
        /// Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Specifies the settings for pyTorch job.
        /// </summary>
        [Input("pyTorchSettings")]
        public Input<Inputs.PyTorchSettingsArgs>? PyTorchSettings { get; set; }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("secrets")]
        private InputList<Inputs.EnvironmentVariableWithSecretValueArgs>? _secrets;

        /// <summary>
        /// Batch AI will setup these additional environment variables for the job. Server will never report values of these variables back.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableWithSecretValueArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EnvironmentVariableWithSecretValueArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The path where the Batch AI service will upload stdout and stderror of the job.
        /// </summary>
        [Input("stdOutErrPathPrefix", required: true)]
        public Input<string> StdOutErrPathPrefix { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The user specified tags associated with the job.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the settings for TensorFlow job.
        /// </summary>
        [Input("tensorFlowSettings")]
        public Input<Inputs.TensorFlowSettingsArgs>? TensorFlowSettings { get; set; }

        public JobArgs()
        {
        }
    }
}
