// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180301.Outputs
{

    [OutputType]
    public sealed class OutputDirectoryResponse
    {
        /// <summary>
        /// Default is true. If false, then the directory is not created and can be any directory path that the user specifies.
        /// </summary>
        public readonly bool? CreateNew;
        /// <summary>
        /// The path of the output directory will be available as a value of an environment variable with AZ_BATCHAI_OUTPUT_&lt;id&gt; name, where &lt;id&gt; is the value of id attribute.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        /// </summary>
        public readonly string PathPrefix;
        /// <summary>
        /// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
        /// </summary>
        public readonly string? PathSuffix;
        /// <summary>
        /// Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary'
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private OutputDirectoryResponse(
            bool? createNew,

            string id,

            string pathPrefix,

            string? pathSuffix,

            string? type)
        {
            CreateNew = createNew;
            Id = id;
            PathPrefix = pathPrefix;
            PathSuffix = pathSuffix;
            Type = type;
        }
    }
}
