// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180301
{
    public static class GetFileServer
    {
        public static Task<GetFileServerResult> InvokeAsync(GetFileServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFileServerResult>("azure-nextgen:batchai/v20180301:getFileServer", args ?? new GetFileServerArgs(), options.WithVersion());
    }


    public sealed class GetFileServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("fileServerName", required: true)]
        public string FileServerName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFileServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFileServerResult
    {
        public readonly string CreationTime;
        /// <summary>
        /// Settings for the data disk which would be created for the File Server.
        /// </summary>
        public readonly Outputs.DataDisksResponse? DataDisks;
        /// <summary>
        /// The location of the resource
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Details of the File Server.
        /// </summary>
        public readonly Outputs.MountSettingsResponse MountSettings;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Possible values: creating - The File Server is getting created. updating - The File Server creation has been accepted and it is getting updated. deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted. failed - The File Server creation has failed with the specified errorCode. Details about the error code are specified in the message field. succeeded - The File Server creation has succeeded.
        /// </summary>
        public readonly string ProvisioningState;
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// SSH configuration settings for the VM
        /// </summary>
        public readonly Outputs.SshConfigurationResponse? SshConfiguration;
        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        public readonly Outputs.ResourceIdResponse? Subnet;
        /// <summary>
        /// The tags of the resource
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of the resource
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// For information about available VM sizes for File Server from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private GetFileServerResult(
            string creationTime,

            Outputs.DataDisksResponse? dataDisks,

            string location,

            Outputs.MountSettingsResponse mountSettings,

            string name,

            string provisioningState,

            string provisioningStateTransitionTime,

            Outputs.SshConfigurationResponse? sshConfiguration,

            Outputs.ResourceIdResponse? subnet,

            ImmutableDictionary<string, string> tags,

            string type,

            string? vmSize)
        {
            CreationTime = creationTime;
            DataDisks = dataDisks;
            Location = location;
            MountSettings = mountSettings;
            Name = name;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            SshConfiguration = sshConfiguration;
            Subnet = subnet;
            Tags = tags;
            Type = type;
            VmSize = vmSize;
        }
    }
}
