// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.V20180301
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("azure-nextgen:batchai/v20180301:getCluster", args ?? new GetClusterArgs(), options.WithVersion());
    }


    public sealed class GetClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Possible values are: steady and resizing. steady state indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing state indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
        /// </summary>
        public readonly string AllocationState;
        public readonly string AllocationStateTransitionTime;
        public readonly string CreationTime;
        public readonly int CurrentNodeCount;
        /// <summary>
        /// This element contains all the errors encountered by various compute nodes during node setup.
        /// </summary>
        public readonly ImmutableArray<Outputs.BatchAIErrorResponse> Errors;
        /// <summary>
        /// The location of the resource
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Use this to prepare the VM. NOTE: The volumes specified in mountVolumes are mounted first and then the setupTask is run. Therefore the setup task can use local mountPaths in its execution.
        /// </summary>
        public readonly Outputs.NodeSetupResponse? NodeSetup;
        /// <summary>
        /// Counts of various compute node states on the cluster.
        /// </summary>
        public readonly Outputs.NodeStateCountsResponse NodeStateCounts;
        /// <summary>
        /// Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
        /// </summary>
        public readonly string ProvisioningState;
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
        /// </summary>
        public readonly Outputs.ScaleSettingsResponse? ScaleSettings;
        /// <summary>
        /// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
        /// </summary>
        public readonly Outputs.ResourceIdResponse? Subnet;
        /// <summary>
        /// The tags of the resource
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of the resource
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Settings for user account that gets created on each on the nodes of a cluster.
        /// </summary>
        public readonly Outputs.UserAccountSettingsResponse? UserAccountSettings;
        /// <summary>
        /// Settings for OS image.
        /// </summary>
        public readonly Outputs.VirtualMachineConfigurationResponse? VirtualMachineConfiguration;
        /// <summary>
        /// The default value is dedicated. The node can get preempted while the task is running if lowpriority is chosen. This is best suited if the workload is checkpointing and can be restarted.
        /// </summary>
        public readonly string? VmPriority;
        /// <summary>
        /// All virtual machines in a cluster are the same size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for Virtual Machines (Windows). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private GetClusterResult(
            string allocationState,

            string allocationStateTransitionTime,

            string creationTime,

            int currentNodeCount,

            ImmutableArray<Outputs.BatchAIErrorResponse> errors,

            string location,

            string name,

            Outputs.NodeSetupResponse? nodeSetup,

            Outputs.NodeStateCountsResponse nodeStateCounts,

            string provisioningState,

            string provisioningStateTransitionTime,

            Outputs.ScaleSettingsResponse? scaleSettings,

            Outputs.ResourceIdResponse? subnet,

            ImmutableDictionary<string, string> tags,

            string type,

            Outputs.UserAccountSettingsResponse? userAccountSettings,

            Outputs.VirtualMachineConfigurationResponse? virtualMachineConfiguration,

            string? vmPriority,

            string? vmSize)
        {
            AllocationState = allocationState;
            AllocationStateTransitionTime = allocationStateTransitionTime;
            CreationTime = creationTime;
            CurrentNodeCount = currentNodeCount;
            Errors = errors;
            Location = location;
            Name = name;
            NodeSetup = nodeSetup;
            NodeStateCounts = nodeStateCounts;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            ScaleSettings = scaleSettings;
            Subnet = subnet;
            Tags = tags;
            Type = type;
            UserAccountSettings = userAccountSettings;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            VmPriority = vmPriority;
            VmSize = vmSize;
        }
    }
}
