// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.Latest
{
    public static class GetExperiment
    {
        public static Task<GetExperimentResult> InvokeAsync(GetExperimentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExperimentResult>("azure-nextgen:batchai/latest:getExperiment", args ?? new GetExperimentArgs(), options.WithVersion());
    }


    public sealed class GetExperimentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("experimentName", required: true)]
        public string ExperimentName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetExperimentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetExperimentResult
    {
        /// <summary>
        /// Time when the Experiment was created.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioned state of the experiment
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The time at which the experiment entered its current provisioning state.
        /// </summary>
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExperimentResult(
            string creationTime,

            string name,

            string provisioningState,

            string provisioningStateTransitionTime,

            string type)
        {
            CreationTime = creationTime;
            Name = name;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            Type = type;
        }
    }
}
