// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BatchAI.Latest
{
    public static class GetJob
    {
        public static Task<GetJobResult> InvokeAsync(GetJobArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetJobResult>("azure-nextgen:batchai/latest:getJob", args ?? new GetJobArgs(), options.WithVersion());
    }


    public sealed class GetJobArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("experimentName", required: true)]
        public string ExperimentName { get; set; } = null!;

        /// <summary>
        /// The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("jobName", required: true)]
        public string JobName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetJobArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetJobResult
    {
        /// <summary>
        /// Caffe2 job settings.
        /// </summary>
        public readonly Outputs.Caffe2SettingsResponse? Caffe2Settings;
        /// <summary>
        /// Caffe job settings.
        /// </summary>
        public readonly Outputs.CaffeSettingsResponse? CaffeSettings;
        /// <summary>
        /// Chainer job settings.
        /// </summary>
        public readonly Outputs.ChainerSettingsResponse? ChainerSettings;
        /// <summary>
        /// Resource ID of the cluster associated with the job.
        /// </summary>
        public readonly Outputs.ResourceIdResponse? Cluster;
        /// <summary>
        /// CNTK (aka Microsoft Cognitive Toolkit) job settings.
        /// </summary>
        public readonly Outputs.CNTKsettingsResponse? CntkSettings;
        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        public readonly Outputs.JobPropertiesResponseConstraints? Constraints;
        /// <summary>
        /// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
        /// </summary>
        public readonly Outputs.ContainerSettingsResponse? ContainerSettings;
        /// <summary>
        /// The creation time of the job.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Custom MPI job settings.
        /// </summary>
        public readonly Outputs.CustomMpiSettingsResponse? CustomMpiSettings;
        /// <summary>
        /// Custom tool kit job settings.
        /// </summary>
        public readonly Outputs.CustomToolkitSettingsResponse? CustomToolkitSettings;
        /// <summary>
        /// A collection of user defined environment variables to be setup for the job.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentVariableResponse> EnvironmentVariables;
        /// <summary>
        /// Information about the execution of a job.
        /// </summary>
        public readonly Outputs.JobPropertiesResponseExecutionInfo? ExecutionInfo;
        /// <summary>
        /// The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.
        /// </summary>
        public readonly string ExecutionState;
        /// <summary>
        /// The time at which the job entered its current execution state.
        /// </summary>
        public readonly string ExecutionStateTransitionTime;
        /// <summary>
        /// Specifies the settings for Horovod job.
        /// </summary>
        public readonly Outputs.HorovodSettingsResponse? HorovodSettings;
        /// <summary>
        /// A list of input directories for the job.
        /// </summary>
        public readonly ImmutableArray<Outputs.InputDirectoryResponse> InputDirectories;
        /// <summary>
        /// A segment of job's output directories path created by Batch AI. Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.
        /// </summary>
        public readonly string JobOutputDirectoryPathSegment;
        /// <summary>
        /// The specified actions will run on all the nodes that are part of the job
        /// </summary>
        public readonly Outputs.JobPreparationResponse? JobPreparation;
        /// <summary>
        /// Collection of mount volumes available to the job during execution. These volumes are mounted before the job execution and unmounted after the job completion. The volumes are mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        public readonly Outputs.MountVolumesResponse? MountVolumes;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The job will be gang scheduled on that many compute nodes
        /// </summary>
        public readonly int? NodeCount;
        /// <summary>
        /// A list of output directories for the job.
        /// </summary>
        public readonly ImmutableArray<Outputs.OutputDirectoryResponse> OutputDirectories;
        /// <summary>
        /// The provisioned state of the Batch AI job
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The time at which the job entered its current provisioning state.
        /// </summary>
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// pyTorch job settings.
        /// </summary>
        public readonly Outputs.PyTorchSettingsResponse? PyTorchSettings;
        /// <summary>
        /// Scheduling priority associated with the job.
        /// </summary>
        public readonly string? SchedulingPriority;
        /// <summary>
        /// A collection of user defined environment variables with secret values to be setup for the job. Server will never report values of these variables back.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentVariableWithSecretValueResponse> Secrets;
        /// <summary>
        /// The path where the Batch AI service stores stdout, stderror and execution log of the job.
        /// </summary>
        public readonly string? StdOutErrPathPrefix;
        /// <summary>
        /// TensorFlow job settings.
        /// </summary>
        public readonly Outputs.TensorFlowSettingsResponse? TensorFlowSettings;
        /// <summary>
        /// Possible values are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom, custommpi, horovod.
        /// </summary>
        public readonly string? ToolType;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetJobResult(
            Outputs.Caffe2SettingsResponse? caffe2Settings,

            Outputs.CaffeSettingsResponse? caffeSettings,

            Outputs.ChainerSettingsResponse? chainerSettings,

            Outputs.ResourceIdResponse? cluster,

            Outputs.CNTKsettingsResponse? cntkSettings,

            Outputs.JobPropertiesResponseConstraints? constraints,

            Outputs.ContainerSettingsResponse? containerSettings,

            string creationTime,

            Outputs.CustomMpiSettingsResponse? customMpiSettings,

            Outputs.CustomToolkitSettingsResponse? customToolkitSettings,

            ImmutableArray<Outputs.EnvironmentVariableResponse> environmentVariables,

            Outputs.JobPropertiesResponseExecutionInfo? executionInfo,

            string executionState,

            string executionStateTransitionTime,

            Outputs.HorovodSettingsResponse? horovodSettings,

            ImmutableArray<Outputs.InputDirectoryResponse> inputDirectories,

            string jobOutputDirectoryPathSegment,

            Outputs.JobPreparationResponse? jobPreparation,

            Outputs.MountVolumesResponse? mountVolumes,

            string name,

            int? nodeCount,

            ImmutableArray<Outputs.OutputDirectoryResponse> outputDirectories,

            string provisioningState,

            string provisioningStateTransitionTime,

            Outputs.PyTorchSettingsResponse? pyTorchSettings,

            string? schedulingPriority,

            ImmutableArray<Outputs.EnvironmentVariableWithSecretValueResponse> secrets,

            string? stdOutErrPathPrefix,

            Outputs.TensorFlowSettingsResponse? tensorFlowSettings,

            string? toolType,

            string type)
        {
            Caffe2Settings = caffe2Settings;
            CaffeSettings = caffeSettings;
            ChainerSettings = chainerSettings;
            Cluster = cluster;
            CntkSettings = cntkSettings;
            Constraints = constraints;
            ContainerSettings = containerSettings;
            CreationTime = creationTime;
            CustomMpiSettings = customMpiSettings;
            CustomToolkitSettings = customToolkitSettings;
            EnvironmentVariables = environmentVariables;
            ExecutionInfo = executionInfo;
            ExecutionState = executionState;
            ExecutionStateTransitionTime = executionStateTransitionTime;
            HorovodSettings = horovodSettings;
            InputDirectories = inputDirectories;
            JobOutputDirectoryPathSegment = jobOutputDirectoryPathSegment;
            JobPreparation = jobPreparation;
            MountVolumes = mountVolumes;
            Name = name;
            NodeCount = nodeCount;
            OutputDirectories = outputDirectories;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            PyTorchSettings = pyTorchSettings;
            SchedulingPriority = schedulingPriority;
            Secrets = secrets;
            StdOutErrPathPrefix = stdOutErrPathPrefix;
            TensorFlowSettings = tensorFlowSettings;
            ToolType = toolType;
            Type = type;
        }
    }
}
