// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.Inputs
{

    /// <summary>
    /// Cluster properties.
    /// </summary>
    public sealed class ClusterPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
        /// </summary>
        [Input("allocationState", required: true)]
        public Input<string> AllocationState { get; set; } = null!;

        /// <summary>
        /// The time at which the cluster entered its current allocation state.
        /// </summary>
        [Input("allocationStateTransitionTime", required: true)]
        public Input<string> AllocationStateTransitionTime { get; set; } = null!;

        /// <summary>
        /// The time when the cluster was created.
        /// </summary>
        [Input("creationTime", required: true)]
        public Input<string> CreationTime { get; set; } = null!;

        /// <summary>
        /// The number of compute nodes currently assigned to the cluster.
        /// </summary>
        [Input("currentNodeCount", required: true)]
        public Input<int> CurrentNodeCount { get; set; } = null!;

        [Input("errors", required: true)]
        private InputList<Inputs.BatchAIErrorResponseGetArgs>? _errors;

        /// <summary>
        /// Collection of errors encountered by various compute nodes during node setup.
        /// </summary>
        public InputList<Inputs.BatchAIErrorResponseGetArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.BatchAIErrorResponseGetArgs>());
            set => _errors = value;
        }

        /// <summary>
        /// Setup (mount file systems, performance counters settings and custom setup task) to be performed on each compute node in the cluster.
        /// </summary>
        [Input("nodeSetup")]
        public Input<Inputs.NodeSetupResponseGetArgs>? NodeSetup { get; set; }

        /// <summary>
        /// Counts of various node states on the cluster.
        /// </summary>
        [Input("nodeStateCounts", required: true)]
        public Input<Inputs.NodeStateCountsResponseGetArgs> NodeStateCounts { get; set; } = null!;

        /// <summary>
        /// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// Time when the provisioning state was changed.
        /// </summary>
        [Input("provisioningStateTransitionTime", required: true)]
        public Input<string> ProvisioningStateTransitionTime { get; set; } = null!;

        /// <summary>
        /// Scale settings of the cluster.
        /// </summary>
        [Input("scaleSettings")]
        public Input<Inputs.ScaleSettingsResponseGetArgs>? ScaleSettings { get; set; }

        /// <summary>
        /// Virtual network subnet resource ID the cluster nodes belong to.
        /// </summary>
        [Input("subnet")]
        public Input<Inputs.ResourceIdResponseGetArgs>? Subnet { get; set; }

        /// <summary>
        /// Administrator user account settings which can be used to SSH to compute nodes.
        /// </summary>
        [Input("userAccountSettings")]
        public Input<Inputs.UserAccountSettingsResponseGetArgs>? UserAccountSettings { get; set; }

        /// <summary>
        /// Virtual machine configuration (OS image) of the compute nodes. All nodes in a cluster have the same OS image configuration.
        /// </summary>
        [Input("virtualMachineConfiguration")]
        public Input<Inputs.VirtualMachineConfigurationResponseGetArgs>? VirtualMachineConfiguration { get; set; }

        /// <summary>
        /// VM priority of cluster nodes.
        /// </summary>
        [Input("vmPriority")]
        public Input<string>? VmPriority { get; set; }

        /// <summary>
        /// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public ClusterPropertiesResponseGetArgs()
        {
        }
    }
}
