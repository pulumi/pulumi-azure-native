// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.Inputs
{

    /// <summary>
    /// Job properties.
    /// </summary>
    public sealed class JobPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Caffe2 job settings.
        /// </summary>
        [Input("caffe2Settings")]
        public Input<Inputs.Caffe2SettingsResponseArgs>? Caffe2Settings { get; set; }

        /// <summary>
        /// Caffe job settings.
        /// </summary>
        [Input("caffeSettings")]
        public Input<Inputs.CaffeSettingsResponseArgs>? CaffeSettings { get; set; }

        /// <summary>
        /// Chainer job settings.
        /// </summary>
        [Input("chainerSettings")]
        public Input<Inputs.ChainerSettingsResponseArgs>? ChainerSettings { get; set; }

        /// <summary>
        /// Resource ID of the cluster associated with the job.
        /// </summary>
        [Input("cluster")]
        public Input<Inputs.ResourceIdResponseArgs>? Cluster { get; set; }

        /// <summary>
        /// CNTK (aka Microsoft Cognitive Toolkit) job settings.
        /// </summary>
        [Input("cntkSettings")]
        public Input<Inputs.CNTKsettingsResponseArgs>? CntkSettings { get; set; }

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.JobPropertiesResponsePropertiesArgs>? Constraints { get; set; }

        /// <summary>
        /// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerSettingsResponseArgs>? ContainerSettings { get; set; }

        /// <summary>
        /// The creation time of the job.
        /// </summary>
        [Input("creationTime", required: true)]
        public Input<string> CreationTime { get; set; } = null!;

        /// <summary>
        /// Custom MPI job settings.
        /// </summary>
        [Input("customMpiSettings")]
        public Input<Inputs.CustomMpiSettingsResponseArgs>? CustomMpiSettings { get; set; }

        /// <summary>
        /// Custom tool kit job settings.
        /// </summary>
        [Input("customToolkitSettings")]
        public Input<Inputs.CustomToolkitSettingsResponseArgs>? CustomToolkitSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableResponseArgs>? _environmentVariables;

        /// <summary>
        /// A collection of user defined environment variables to be setup for the job.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableResponseArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableResponseArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Information about the execution of a job.
        /// </summary>
        [Input("executionInfo")]
        public Input<Inputs.JobPropertiesResponsePropertiesArgs>? ExecutionInfo { get; set; }

        /// <summary>
        /// The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.
        /// </summary>
        [Input("executionState", required: true)]
        public Input<string> ExecutionState { get; set; } = null!;

        /// <summary>
        /// The time at which the job entered its current execution state.
        /// </summary>
        [Input("executionStateTransitionTime", required: true)]
        public Input<string> ExecutionStateTransitionTime { get; set; } = null!;

        /// <summary>
        /// Specifies the settings for Horovod job.
        /// </summary>
        [Input("horovodSettings")]
        public Input<Inputs.HorovodSettingsResponseArgs>? HorovodSettings { get; set; }

        [Input("inputDirectories")]
        private InputList<Inputs.InputDirectoryResponseArgs>? _inputDirectories;

        /// <summary>
        /// A list of input directories for the job.
        /// </summary>
        public InputList<Inputs.InputDirectoryResponseArgs> InputDirectories
        {
            get => _inputDirectories ?? (_inputDirectories = new InputList<Inputs.InputDirectoryResponseArgs>());
            set => _inputDirectories = value;
        }

        /// <summary>
        /// A segment of job's output directories path created by Batch AI. Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.
        /// </summary>
        [Input("jobOutputDirectoryPathSegment", required: true)]
        public Input<string> JobOutputDirectoryPathSegment { get; set; } = null!;

        /// <summary>
        /// The specified actions will run on all the nodes that are part of the job
        /// </summary>
        [Input("jobPreparation")]
        public Input<Inputs.JobPreparationResponseArgs>? JobPreparation { get; set; }

        /// <summary>
        /// Collection of mount volumes available to the job during execution. These volumes are mounted before the job execution and unmounted after the job completion. The volumes are mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Input("mountVolumes")]
        public Input<Inputs.MountVolumesResponseArgs>? MountVolumes { get; set; }

        /// <summary>
        /// The job will be gang scheduled on that many compute nodes
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        [Input("outputDirectories")]
        private InputList<Inputs.OutputDirectoryResponseArgs>? _outputDirectories;

        /// <summary>
        /// A list of output directories for the job.
        /// </summary>
        public InputList<Inputs.OutputDirectoryResponseArgs> OutputDirectories
        {
            get => _outputDirectories ?? (_outputDirectories = new InputList<Inputs.OutputDirectoryResponseArgs>());
            set => _outputDirectories = value;
        }

        /// <summary>
        /// The provisioned state of the Batch AI job
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The time at which the job entered its current provisioning state.
        /// </summary>
        [Input("provisioningStateTransitionTime", required: true)]
        public Input<string> ProvisioningStateTransitionTime { get; set; } = null!;

        /// <summary>
        /// pyTorch job settings.
        /// </summary>
        [Input("pyTorchSettings")]
        public Input<Inputs.PyTorchSettingsResponseArgs>? PyTorchSettings { get; set; }

        /// <summary>
        /// Scheduling priority associated with the job.
        /// </summary>
        [Input("schedulingPriority")]
        public Input<string>? SchedulingPriority { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EnvironmentVariableWithSecretValueResponseArgs>? _secrets;

        /// <summary>
        /// A collection of user defined environment variables with secret values to be setup for the job. Server will never report values of these variables back.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableWithSecretValueResponseArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EnvironmentVariableWithSecretValueResponseArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The path where the Batch AI service stores stdout, stderror and execution log of the job.
        /// </summary>
        [Input("stdOutErrPathPrefix")]
        public Input<string>? StdOutErrPathPrefix { get; set; }

        /// <summary>
        /// TensorFlow job settings.
        /// </summary>
        [Input("tensorFlowSettings")]
        public Input<Inputs.TensorFlowSettingsResponseArgs>? TensorFlowSettings { get; set; }

        /// <summary>
        /// Possible values are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom, custommpi, horovod.
        /// </summary>
        [Input("toolType")]
        public Input<string>? ToolType { get; set; }

        public JobPropertiesResponseArgs()
        {
        }
    }
}
