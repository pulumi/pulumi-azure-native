// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.BatchAI.Inputs
{

    /// <summary>
    /// The properties of a Batch AI Job.
    /// </summary>
    public sealed class JobBasePropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings for Caffe2 job.
        /// </summary>
        [Input("caffe2Settings")]
        public Input<Inputs.Caffe2SettingsArgs>? Caffe2Settings { get; set; }

        /// <summary>
        /// Settings for Caffe job.
        /// </summary>
        [Input("caffeSettings")]
        public Input<Inputs.CaffeSettingsArgs>? CaffeSettings { get; set; }

        /// <summary>
        /// Settings for Chainer job.
        /// </summary>
        [Input("chainerSettings")]
        public Input<Inputs.ChainerSettingsArgs>? ChainerSettings { get; set; }

        /// <summary>
        /// Resource ID of the cluster on which this job will run.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<Inputs.ResourceIdArgs> Cluster { get; set; } = null!;

        /// <summary>
        /// Settings for CNTK (aka Microsoft Cognitive Toolkit) job.
        /// </summary>
        [Input("cntkSettings")]
        public Input<Inputs.CNTKsettingsArgs>? CntkSettings { get; set; }

        /// <summary>
        /// Constraints associated with the Job.
        /// </summary>
        [Input("constraints")]
        public Input<Inputs.JobBasePropertiesPropertiesArgs>? Constraints { get; set; }

        /// <summary>
        /// Docker container settings for the job. If not provided, the job will run directly on the node.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerSettingsArgs>? ContainerSettings { get; set; }

        /// <summary>
        /// Settings for custom MPI job.
        /// </summary>
        [Input("customMpiSettings")]
        public Input<Inputs.CustomMpiSettingsArgs>? CustomMpiSettings { get; set; }

        /// <summary>
        /// Settings for custom tool kit job.
        /// </summary>
        [Input("customToolkitSettings")]
        public Input<Inputs.CustomToolkitSettingsArgs>? CustomToolkitSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// A list of user defined environment variables which will be setup for the job.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Settings for Horovod job.
        /// </summary>
        [Input("horovodSettings")]
        public Input<Inputs.HorovodSettingsArgs>? HorovodSettings { get; set; }

        [Input("inputDirectories")]
        private InputList<Inputs.InputDirectoryArgs>? _inputDirectories;

        /// <summary>
        /// A list of input directories for the job.
        /// </summary>
        public InputList<Inputs.InputDirectoryArgs> InputDirectories
        {
            get => _inputDirectories ?? (_inputDirectories = new InputList<Inputs.InputDirectoryArgs>());
            set => _inputDirectories = value;
        }

        /// <summary>
        /// A command line to be executed on each node allocated for the job before tool kit is launched.
        /// </summary>
        [Input("jobPreparation")]
        public Input<Inputs.JobPreparationArgs>? JobPreparation { get; set; }

        /// <summary>
        /// Information on mount volumes to be used by the job. These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
        /// </summary>
        [Input("mountVolumes")]
        public Input<Inputs.MountVolumesArgs>? MountVolumes { get; set; }

        /// <summary>
        /// Number of compute nodes to run the job on. The job will be gang scheduled on that many compute nodes.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        [Input("outputDirectories")]
        private InputList<Inputs.OutputDirectoryArgs>? _outputDirectories;

        /// <summary>
        /// A list of output directories for the job.
        /// </summary>
        public InputList<Inputs.OutputDirectoryArgs> OutputDirectories
        {
            get => _outputDirectories ?? (_outputDirectories = new InputList<Inputs.OutputDirectoryArgs>());
            set => _outputDirectories = value;
        }

        /// <summary>
        /// Settings for pyTorch job.
        /// </summary>
        [Input("pyTorchSettings")]
        public Input<Inputs.PyTorchSettingsArgs>? PyTorchSettings { get; set; }

        /// <summary>
        /// Scheduling priority associated with the job. Possible values: low, normal, high.
        /// </summary>
        [Input("schedulingPriority")]
        public Input<string>? SchedulingPriority { get; set; }

        [Input("secrets")]
        private InputList<Inputs.EnvironmentVariableWithSecretValueArgs>? _secrets;

        /// <summary>
        /// A list of user defined environment variables with secret values which will be setup for the job. Server will never report values of these variables back.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableWithSecretValueArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.EnvironmentVariableWithSecretValueArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The path where the Batch AI service will store stdout, stderror and execution log of the job.
        /// </summary>
        [Input("stdOutErrPathPrefix", required: true)]
        public Input<string> StdOutErrPathPrefix { get; set; } = null!;

        /// <summary>
        /// Settings for Tensor Flow job.
        /// </summary>
        [Input("tensorFlowSettings")]
        public Input<Inputs.TensorFlowSettingsArgs>? TensorFlowSettings { get; set; }

        public JobBasePropertiesArgs()
        {
        }
    }
}
