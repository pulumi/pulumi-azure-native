// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview
{
    /// <summary>
    /// Represents a migration resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:dbforpostgresql/v20241101preview:Migration")]
    public partial class Migration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// To trigger cancel for entire migration we need to send this flag as True
        /// </summary>
        [Output("cancel")]
        public Output<string?> Cancel { get; private set; } = null!;

        /// <summary>
        /// Current status of migration
        /// </summary>
        [Output("currentStatus")]
        public Output<Outputs.MigrationStatusResponse> CurrentStatus { get; private set; } = null!;

        /// <summary>
        /// When you want to trigger cancel for specific databases send cancel flag as True and database names in this array
        /// </summary>
        [Output("dbsToCancelMigrationOn")]
        public Output<ImmutableArray<string>> DbsToCancelMigrationOn { get; private set; } = null!;

        /// <summary>
        /// Number of databases to migrate
        /// </summary>
        [Output("dbsToMigrate")]
        public Output<ImmutableArray<string>> DbsToMigrate { get; private set; } = null!;

        /// <summary>
        /// When you want to trigger cutover for specific databases send triggerCutover flag as True and database names in this array
        /// </summary>
        [Output("dbsToTriggerCutoverOn")]
        public Output<ImmutableArray<string>> DbsToTriggerCutoverOn { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// To migrate roles and permissions we need to send this flag as True
        /// </summary>
        [Output("migrateRoles")]
        public Output<string?> MigrateRoles { get; private set; } = null!;

        /// <summary>
        /// ID for migration, a GUID.
        /// </summary>
        [Output("migrationId")]
        public Output<string> MigrationId { get; private set; } = null!;

        /// <summary>
        /// ResourceId of the private endpoint migration instance
        /// </summary>
        [Output("migrationInstanceResourceId")]
        public Output<string?> MigrationInstanceResourceId { get; private set; } = null!;

        /// <summary>
        /// There are two types of migration modes Online and Offline
        /// </summary>
        [Output("migrationMode")]
        public Output<string?> MigrationMode { get; private set; } = null!;

        /// <summary>
        /// This indicates the supported Migration option for the migration
        /// </summary>
        [Output("migrationOption")]
        public Output<string?> MigrationOption { get; private set; } = null!;

        /// <summary>
        /// End time in UTC for migration window
        /// </summary>
        [Output("migrationWindowEndTimeInUtc")]
        public Output<string?> MigrationWindowEndTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// Start time in UTC for migration window
        /// </summary>
        [Output("migrationWindowStartTimeInUtc")]
        public Output<string?> MigrationWindowStartTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
        /// </summary>
        [Output("overwriteDbsInTarget")]
        public Output<string?> OverwriteDbsInTarget { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed
        /// </summary>
        [Output("setupLogicalReplicationOnSourceDbIfNeeded")]
        public Output<string?> SetupLogicalReplicationOnSourceDbIfNeeded { get; private set; } = null!;

        /// <summary>
        /// Source server fully qualified domain name (FQDN) or IP address. It is a optional value, if customer provide it, migration service will always use it for connection
        /// </summary>
        [Output("sourceDbServerFullyQualifiedDomainName")]
        public Output<string?> SourceDbServerFullyQualifiedDomainName { get; private set; } = null!;

        /// <summary>
        /// Metadata of the source database server
        /// </summary>
        [Output("sourceDbServerMetadata")]
        public Output<Outputs.DbServerMetadataResponse> SourceDbServerMetadata { get; private set; } = null!;

        /// <summary>
        /// ResourceId of the source database server in case the sourceType is PostgreSQLSingleServer. For other source types this should be ipaddress:port@username or hostname:port@username
        /// </summary>
        [Output("sourceDbServerResourceId")]
        public Output<string?> SourceDbServerResourceId { get; private set; } = null!;

        /// <summary>
        /// migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, EDB, EDB_Oracle_Server, EDB_PostgreSQL, PostgreSQLFlexibleServer, PostgreSQLCosmosDB, Huawei_RDS, Huawei_Compute, Heroku_PostgreSQL, Crunchy_PostgreSQL, ApsaraDB_RDS, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, or Supabase_PostgreSQL
        /// </summary>
        [Output("sourceType")]
        public Output<string?> SourceType { get; private set; } = null!;

        /// <summary>
        /// SSL modes for migration. Default SSL mode for PostgreSQLSingleServer is VerifyFull and Prefer for other source types
        /// </summary>
        [Output("sslMode")]
        public Output<string?> SslMode { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the data migration should start right away
        /// </summary>
        [Output("startDataMigration")]
        public Output<string?> StartDataMigration { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Target server fully qualified domain name (FQDN) or IP address. It is a optional value, if customer provide it, migration service will always use it for connection
        /// </summary>
        [Output("targetDbServerFullyQualifiedDomainName")]
        public Output<string?> TargetDbServerFullyQualifiedDomainName { get; private set; } = null!;

        /// <summary>
        /// Metadata of the target database server
        /// </summary>
        [Output("targetDbServerMetadata")]
        public Output<Outputs.DbServerMetadataResponse> TargetDbServerMetadata { get; private set; } = null!;

        /// <summary>
        /// ResourceId of the source database server
        /// </summary>
        [Output("targetDbServerResourceId")]
        public Output<string> TargetDbServerResourceId { get; private set; } = null!;

        /// <summary>
        /// To trigger cutover for entire migration we need to send this flag as True
        /// </summary>
        [Output("triggerCutover")]
        public Output<string?> TriggerCutover { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Migration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Migration(string name, MigrationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20241101preview:Migration", name, args ?? new MigrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Migration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20241101preview:Migration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20210615privatepreview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20220501preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20230301preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20230601preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20231201preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240301preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240801:Migration" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Migration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Migration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Migration(name, id, options);
        }
    }

    public sealed class MigrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// To trigger cancel for entire migration we need to send this flag as True
        /// </summary>
        [Input("cancel")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.CancelEnum>? Cancel { get; set; }

        [Input("dbsToCancelMigrationOn")]
        private InputList<string>? _dbsToCancelMigrationOn;

        /// <summary>
        /// When you want to trigger cancel for specific databases send cancel flag as True and database names in this array
        /// </summary>
        public InputList<string> DbsToCancelMigrationOn
        {
            get => _dbsToCancelMigrationOn ?? (_dbsToCancelMigrationOn = new InputList<string>());
            set => _dbsToCancelMigrationOn = value;
        }

        [Input("dbsToMigrate")]
        private InputList<string>? _dbsToMigrate;

        /// <summary>
        /// Number of databases to migrate
        /// </summary>
        public InputList<string> DbsToMigrate
        {
            get => _dbsToMigrate ?? (_dbsToMigrate = new InputList<string>());
            set => _dbsToMigrate = value;
        }

        [Input("dbsToTriggerCutoverOn")]
        private InputList<string>? _dbsToTriggerCutoverOn;

        /// <summary>
        /// When you want to trigger cutover for specific databases send triggerCutover flag as True and database names in this array
        /// </summary>
        public InputList<string> DbsToTriggerCutoverOn
        {
            get => _dbsToTriggerCutoverOn ?? (_dbsToTriggerCutoverOn = new InputList<string>());
            set => _dbsToTriggerCutoverOn = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// To migrate roles and permissions we need to send this flag as True
        /// </summary>
        [Input("migrateRoles")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.MigrateRolesEnum>? MigrateRoles { get; set; }

        /// <summary>
        /// ResourceId of the private endpoint migration instance
        /// </summary>
        [Input("migrationInstanceResourceId")]
        public Input<string>? MigrationInstanceResourceId { get; set; }

        /// <summary>
        /// There are two types of migration modes Online and Offline
        /// </summary>
        [Input("migrationMode")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.MigrationMode>? MigrationMode { get; set; }

        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName")]
        public Input<string>? MigrationName { get; set; }

        /// <summary>
        /// This indicates the supported Migration option for the migration
        /// </summary>
        [Input("migrationOption")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.MigrationOption>? MigrationOption { get; set; }

        /// <summary>
        /// End time in UTC for migration window
        /// </summary>
        [Input("migrationWindowEndTimeInUtc")]
        public Input<string>? MigrationWindowEndTimeInUtc { get; set; }

        /// <summary>
        /// Start time in UTC for migration window
        /// </summary>
        [Input("migrationWindowStartTimeInUtc")]
        public Input<string>? MigrationWindowStartTimeInUtc { get; set; }

        /// <summary>
        /// Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
        /// </summary>
        [Input("overwriteDbsInTarget")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.OverwriteDbsInTargetEnum>? OverwriteDbsInTarget { get; set; }

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Migration secret parameters
        /// </summary>
        [Input("secretParameters")]
        public Input<Inputs.MigrationSecretParametersArgs>? SecretParameters { get; set; }

        /// <summary>
        /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed
        /// </summary>
        [Input("setupLogicalReplicationOnSourceDbIfNeeded")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.LogicalReplicationOnSourceDbEnum>? SetupLogicalReplicationOnSourceDbIfNeeded { get; set; }

        /// <summary>
        /// Source server fully qualified domain name (FQDN) or IP address. It is a optional value, if customer provide it, migration service will always use it for connection
        /// </summary>
        [Input("sourceDbServerFullyQualifiedDomainName")]
        public Input<string>? SourceDbServerFullyQualifiedDomainName { get; set; }

        /// <summary>
        /// ResourceId of the source database server in case the sourceType is PostgreSQLSingleServer. For other source types this should be ipaddress:port@username or hostname:port@username
        /// </summary>
        [Input("sourceDbServerResourceId")]
        public Input<string>? SourceDbServerResourceId { get; set; }

        /// <summary>
        /// migration source server type : OnPremises, AWS, GCP, AzureVM, PostgreSQLSingleServer, AWS_RDS, AWS_AURORA, AWS_EC2, GCP_CloudSQL, GCP_AlloyDB, GCP_Compute, EDB, EDB_Oracle_Server, EDB_PostgreSQL, PostgreSQLFlexibleServer, PostgreSQLCosmosDB, Huawei_RDS, Huawei_Compute, Heroku_PostgreSQL, Crunchy_PostgreSQL, ApsaraDB_RDS, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, or Supabase_PostgreSQL
        /// </summary>
        [Input("sourceType")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.SourceType>? SourceType { get; set; }

        /// <summary>
        /// SSL modes for migration. Default SSL mode for PostgreSQLSingleServer is VerifyFull and Prefer for other source types
        /// </summary>
        [Input("sslMode")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.SslMode>? SslMode { get; set; }

        /// <summary>
        /// Indicates whether the data migration should start right away
        /// </summary>
        [Input("startDataMigration")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.StartDataMigrationEnum>? StartDataMigration { get; set; }

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Target server fully qualified domain name (FQDN) or IP address. It is a optional value, if customer provide it, migration service will always use it for connection
        /// </summary>
        [Input("targetDbServerFullyQualifiedDomainName")]
        public Input<string>? TargetDbServerFullyQualifiedDomainName { get; set; }

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDbServerName", required: true)]
        public Input<string> TargetDbServerName { get; set; } = null!;

        /// <summary>
        /// To trigger cutover for entire migration we need to send this flag as True
        /// </summary>
        [Input("triggerCutover")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20241101Preview.TriggerCutoverEnum>? TriggerCutover { get; set; }

        public MigrationArgs()
        {
        }
        public static new MigrationArgs Empty => new MigrationArgs();
    }
}
