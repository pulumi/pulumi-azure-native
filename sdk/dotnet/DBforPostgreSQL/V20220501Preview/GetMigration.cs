// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20220501Preview
{
    public static class GetMigration
    {
        /// <summary>
        /// Gets details of a migration.
        /// </summary>
        public static Task<GetMigrationResult> InvokeAsync(GetMigrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMigrationResult>("azure-native:dbforpostgresql/v20220501preview:getMigration", args ?? new GetMigrationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a migration.
        /// </summary>
        public static Output<GetMigrationResult> Invoke(GetMigrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMigrationResult>("azure-native:dbforpostgresql/v20220501preview:getMigration", args ?? new GetMigrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMigrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public string MigrationName { get; set; } = null!;

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("subscriptionId")]
        public string? SubscriptionId { get; set; }

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDBServerName", required: true)]
        public string TargetDBServerName { get; set; } = null!;

        public GetMigrationArgs()
        {
        }
        public static new GetMigrationArgs Empty => new GetMigrationArgs();
    }

    public sealed class GetMigrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public Input<string> MigrationName { get; set; } = null!;

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDBServerName", required: true)]
        public Input<string> TargetDBServerName { get; set; } = null!;

        public GetMigrationInvokeArgs()
        {
        }
        public static new GetMigrationInvokeArgs Empty => new GetMigrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMigrationResult
    {
        /// <summary>
        /// To trigger cancel for entire migration we need to send this flag as true
        /// </summary>
        public readonly bool? Cancel;
        /// <summary>
        /// Migration status.
        /// </summary>
        public readonly Outputs.MigrationStatusResponse CurrentStatus;
        /// <summary>
        /// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
        /// </summary>
        public readonly ImmutableArray<string> DBsToCancelMigrationOn;
        public readonly ImmutableArray<string> DBsToMigrate;
        /// <summary>
        /// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
        /// </summary>
        public readonly ImmutableArray<string> DBsToTiggerCutoverOn;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Migration details level.
        /// </summary>
        public readonly string MigrationDetailsLevel;
        public readonly string MigrationId;
        /// <summary>
        /// There are two types of migration modes Online and Offline
        /// </summary>
        public readonly string? MigrationMode;
        public readonly string? MigrationWindowStartTimeInUtc;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly bool? OverwriteDBsInTarget;
        public readonly bool? SetupLogicalReplicationOnSourceDBIfNeeded;
        public readonly string? SourceDBServerFullyQualifiedDomainName;
        /// <summary>
        /// Database server metadata.
        /// </summary>
        public readonly Outputs.DBServerMetadataResponse SourceDBServerMetadata;
        public readonly string? SourceDBServerResourceId;
        public readonly bool? StartDataMigration;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? TargetDBServerFullyQualifiedDomainName;
        /// <summary>
        /// Database server metadata.
        /// </summary>
        public readonly Outputs.DBServerMetadataResponse TargetDBServerMetadata;
        public readonly string TargetDBServerResourceId;
        /// <summary>
        /// To trigger cutover for entire migration we need to send this flag as true
        /// </summary>
        public readonly bool? TriggerCutover;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMigrationResult(
            bool? cancel,

            Outputs.MigrationStatusResponse currentStatus,

            ImmutableArray<string> dBsToCancelMigrationOn,

            ImmutableArray<string> dBsToMigrate,

            ImmutableArray<string> dBsToTiggerCutoverOn,

            string id,

            string location,

            string migrationDetailsLevel,

            string migrationId,

            string? migrationMode,

            string? migrationWindowStartTimeInUtc,

            string name,

            bool? overwriteDBsInTarget,

            bool? setupLogicalReplicationOnSourceDBIfNeeded,

            string? sourceDBServerFullyQualifiedDomainName,

            Outputs.DBServerMetadataResponse sourceDBServerMetadata,

            string? sourceDBServerResourceId,

            bool? startDataMigration,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? targetDBServerFullyQualifiedDomainName,

            Outputs.DBServerMetadataResponse targetDBServerMetadata,

            string targetDBServerResourceId,

            bool? triggerCutover,

            string type)
        {
            Cancel = cancel;
            CurrentStatus = currentStatus;
            DBsToCancelMigrationOn = dBsToCancelMigrationOn;
            DBsToMigrate = dBsToMigrate;
            DBsToTiggerCutoverOn = dBsToTiggerCutoverOn;
            Id = id;
            Location = location;
            MigrationDetailsLevel = migrationDetailsLevel;
            MigrationId = migrationId;
            MigrationMode = migrationMode;
            MigrationWindowStartTimeInUtc = migrationWindowStartTimeInUtc;
            Name = name;
            OverwriteDBsInTarget = overwriteDBsInTarget;
            SetupLogicalReplicationOnSourceDBIfNeeded = setupLogicalReplicationOnSourceDBIfNeeded;
            SourceDBServerFullyQualifiedDomainName = sourceDBServerFullyQualifiedDomainName;
            SourceDBServerMetadata = sourceDBServerMetadata;
            SourceDBServerResourceId = sourceDBServerResourceId;
            StartDataMigration = startDataMigration;
            SystemData = systemData;
            Tags = tags;
            TargetDBServerFullyQualifiedDomainName = targetDBServerFullyQualifiedDomainName;
            TargetDBServerMetadata = targetDBServerMetadata;
            TargetDBServerResourceId = targetDBServerResourceId;
            TriggerCutover = triggerCutover;
            Type = type;
        }
    }
}
