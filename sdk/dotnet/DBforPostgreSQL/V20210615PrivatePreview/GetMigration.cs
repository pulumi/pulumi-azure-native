// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20210615PrivatePreview
{
    public static class GetMigration
    {
        /// <summary>
        /// Represents a migration resource.
        /// </summary>
        public static Task<GetMigrationResult> InvokeAsync(GetMigrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMigrationResult>("azure-native:dbforpostgresql/v20210615privatepreview:getMigration", args ?? new GetMigrationArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a migration resource.
        /// </summary>
        public static Output<GetMigrationResult> Invoke(GetMigrationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMigrationResult>("azure-native:dbforpostgresql/v20210615privatepreview:getMigration", args ?? new GetMigrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMigrationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public string MigrationName { get; set; } = null!;

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDBServerName", required: true)]
        public string TargetDBServerName { get; set; } = null!;

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("targetDBServerResourceGroupName", required: true)]
        public string TargetDBServerResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("targetDBServerSubscriptionId", required: true)]
        public string TargetDBServerSubscriptionId { get; set; } = null!;

        public GetMigrationArgs()
        {
        }
    }

    public sealed class GetMigrationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public Input<string> MigrationName { get; set; } = null!;

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDBServerName", required: true)]
        public Input<string> TargetDBServerName { get; set; } = null!;

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("targetDBServerResourceGroupName", required: true)]
        public Input<string> TargetDBServerResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("targetDBServerSubscriptionId", required: true)]
        public Input<string> TargetDBServerSubscriptionId { get; set; } = null!;

        public GetMigrationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMigrationResult
    {
        /// <summary>
        /// Migration status.
        /// </summary>
        public readonly Outputs.MigrationStatusResponse CurrentStatus;
        public readonly ImmutableArray<string> DBsToMigrate;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Migration details level.
        /// </summary>
        public readonly string MigrationDetailsLevel;
        public readonly string MigrationId;
        public readonly string MigrationName;
        /// <summary>
        /// Migration resource group.
        /// </summary>
        public readonly Outputs.MigrationResourceGroupResponse? MigrationResourceGroup;
        public readonly string? MigrationWindowStartTimeInUtc;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly bool? OverwriteDBsInTarget;
        /// <summary>
        /// Migration secret parameters.
        /// </summary>
        public readonly Outputs.MigrationSecretParametersResponse? SecretParameters;
        public readonly bool? SetupLogicalReplicationOnSourceDBIfNeeded;
        /// <summary>
        /// Database server metadata.
        /// </summary>
        public readonly Outputs.DBServerMetadataResponse SourceDBServerMetadata;
        public readonly string? SourceDBServerResourceId;
        public readonly bool? StartDataMigration;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Database server metadata.
        /// </summary>
        public readonly Outputs.DBServerMetadataResponse TargetDBServerMetadata;
        public readonly string TargetDBServerResourceId;
        public readonly bool? TriggerCutover;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        public readonly string? UserAssignedIdentityResourceId;

        [OutputConstructor]
        private GetMigrationResult(
            Outputs.MigrationStatusResponse currentStatus,

            ImmutableArray<string> dBsToMigrate,

            string id,

            string location,

            string migrationDetailsLevel,

            string migrationId,

            string migrationName,

            Outputs.MigrationResourceGroupResponse? migrationResourceGroup,

            string? migrationWindowStartTimeInUtc,

            string name,

            bool? overwriteDBsInTarget,

            Outputs.MigrationSecretParametersResponse? secretParameters,

            bool? setupLogicalReplicationOnSourceDBIfNeeded,

            Outputs.DBServerMetadataResponse sourceDBServerMetadata,

            string? sourceDBServerResourceId,

            bool? startDataMigration,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.DBServerMetadataResponse targetDBServerMetadata,

            string targetDBServerResourceId,

            bool? triggerCutover,

            string type,

            string? userAssignedIdentityResourceId)
        {
            CurrentStatus = currentStatus;
            DBsToMigrate = dBsToMigrate;
            Id = id;
            Location = location;
            MigrationDetailsLevel = migrationDetailsLevel;
            MigrationId = migrationId;
            MigrationName = migrationName;
            MigrationResourceGroup = migrationResourceGroup;
            MigrationWindowStartTimeInUtc = migrationWindowStartTimeInUtc;
            Name = name;
            OverwriteDBsInTarget = overwriteDBsInTarget;
            SecretParameters = secretParameters;
            SetupLogicalReplicationOnSourceDBIfNeeded = setupLogicalReplicationOnSourceDBIfNeeded;
            SourceDBServerMetadata = sourceDBServerMetadata;
            SourceDBServerResourceId = sourceDBServerResourceId;
            StartDataMigration = startDataMigration;
            SystemData = systemData;
            Tags = tags;
            TargetDBServerMetadata = targetDBServerMetadata;
            TargetDBServerResourceId = targetDBServerResourceId;
            TriggerCutover = triggerCutover;
            Type = type;
            UserAssignedIdentityResourceId = userAssignedIdentityResourceId;
        }
    }
}
