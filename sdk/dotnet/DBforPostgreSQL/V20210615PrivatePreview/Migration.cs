// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20210615PrivatePreview
{
    /// <summary>
    /// Represents a migration resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:dbforpostgresql/v20210615privatepreview:Migration")]
    public partial class Migration : Pulumi.CustomResource
    {
        /// <summary>
        /// Migration status.
        /// </summary>
        [Output("currentStatus")]
        public Output<Outputs.MigrationStatusResponse> CurrentStatus { get; private set; } = null!;

        [Output("dBsToMigrate")]
        public Output<ImmutableArray<string>> DBsToMigrate { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Migration details level.
        /// </summary>
        [Output("migrationDetailsLevel")]
        public Output<string> MigrationDetailsLevel { get; private set; } = null!;

        [Output("migrationId")]
        public Output<string> MigrationId { get; private set; } = null!;

        [Output("migrationName")]
        public Output<string> MigrationName { get; private set; } = null!;

        /// <summary>
        /// Migration resource group.
        /// </summary>
        [Output("migrationResourceGroup")]
        public Output<Outputs.MigrationResourceGroupResponse?> MigrationResourceGroup { get; private set; } = null!;

        [Output("migrationWindowStartTimeInUtc")]
        public Output<string?> MigrationWindowStartTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("overwriteDBsInTarget")]
        public Output<bool?> OverwriteDBsInTarget { get; private set; } = null!;

        /// <summary>
        /// Migration secret parameters.
        /// </summary>
        [Output("secretParameters")]
        public Output<Outputs.MigrationSecretParametersResponse?> SecretParameters { get; private set; } = null!;

        [Output("setupLogicalReplicationOnSourceDBIfNeeded")]
        public Output<bool?> SetupLogicalReplicationOnSourceDBIfNeeded { get; private set; } = null!;

        /// <summary>
        /// Database server metadata.
        /// </summary>
        [Output("sourceDBServerMetadata")]
        public Output<Outputs.DBServerMetadataResponse> SourceDBServerMetadata { get; private set; } = null!;

        [Output("sourceDBServerResourceId")]
        public Output<string?> SourceDBServerResourceId { get; private set; } = null!;

        [Output("startDataMigration")]
        public Output<bool?> StartDataMigration { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Database server metadata.
        /// </summary>
        [Output("targetDBServerMetadata")]
        public Output<Outputs.DBServerMetadataResponse> TargetDBServerMetadata { get; private set; } = null!;

        [Output("targetDBServerResourceId")]
        public Output<string> TargetDBServerResourceId { get; private set; } = null!;

        [Output("triggerCutover")]
        public Output<bool?> TriggerCutover { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("userAssignedIdentityResourceId")]
        public Output<string?> UserAssignedIdentityResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a Migration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Migration(string name, MigrationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20210615privatepreview:Migration", name, args ?? new MigrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Migration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20210615privatepreview:Migration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Migration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Migration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Migration(name, id, options);
        }
    }

    public sealed class MigrationArgs : Pulumi.ResourceArgs
    {
        [Input("dBsToMigrate")]
        private InputList<string>? _dBsToMigrate;
        public InputList<string> DBsToMigrate
        {
            get => _dBsToMigrate ?? (_dBsToMigrate = new InputList<string>());
            set => _dBsToMigrate = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the migration.
        /// </summary>
        [Input("migrationName")]
        public Input<string>? MigrationName { get; set; }

        /// <summary>
        /// Migration resource group.
        /// </summary>
        [Input("migrationResourceGroup")]
        public Input<Inputs.MigrationResourceGroupArgs>? MigrationResourceGroup { get; set; }

        [Input("migrationWindowStartTimeInUtc")]
        public Input<string>? MigrationWindowStartTimeInUtc { get; set; }

        [Input("overwriteDBsInTarget")]
        public Input<bool>? OverwriteDBsInTarget { get; set; }

        /// <summary>
        /// Migration secret parameters.
        /// </summary>
        [Input("secretParameters")]
        public Input<Inputs.MigrationSecretParametersArgs>? SecretParameters { get; set; }

        [Input("setupLogicalReplicationOnSourceDBIfNeeded")]
        public Input<bool>? SetupLogicalReplicationOnSourceDBIfNeeded { get; set; }

        [Input("sourceDBServerResourceId")]
        public Input<string>? SourceDBServerResourceId { get; set; }

        [Input("startDataMigration")]
        public Input<bool>? StartDataMigration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the target database server.
        /// </summary>
        [Input("targetDBServerName", required: true)]
        public Input<string> TargetDBServerName { get; set; } = null!;

        /// <summary>
        /// The resource group name of the target database server.
        /// </summary>
        [Input("targetDBServerResourceGroupName", required: true)]
        public Input<string> TargetDBServerResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the target database server.
        /// </summary>
        [Input("targetDBServerSubscriptionId", required: true)]
        public Input<string> TargetDBServerSubscriptionId { get; set; } = null!;

        [Input("triggerCutover")]
        public Input<bool>? TriggerCutover { get; set; }

        [Input("userAssignedIdentityResourceId")]
        public Input<string>? UserAssignedIdentityResourceId { get; set; }

        public MigrationArgs()
        {
        }
    }
}
