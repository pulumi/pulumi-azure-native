// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20230301Preview
{
    /// <summary>
    /// If Enabled, Azure Active Directory authentication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct ActiveDirectoryAuthEnum : IEquatable<ActiveDirectoryAuthEnum>
    {
        private readonly string _value;

        private ActiveDirectoryAuthEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveDirectoryAuthEnum Enabled { get; } = new ActiveDirectoryAuthEnum("Enabled");
        public static ActiveDirectoryAuthEnum Disabled { get; } = new ActiveDirectoryAuthEnum("Disabled");

        public static bool operator ==(ActiveDirectoryAuthEnum left, ActiveDirectoryAuthEnum right) => left.Equals(right);
        public static bool operator !=(ActiveDirectoryAuthEnum left, ActiveDirectoryAuthEnum right) => !left.Equals(right);

        public static explicit operator string(ActiveDirectoryAuthEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveDirectoryAuthEnum other && Equals(other);
        public bool Equals(ActiveDirectoryAuthEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data encryption type to depict if it is System Managed vs Azure Key vault.
    /// </summary>
    [EnumType]
    public readonly struct ArmServerKeyType : IEquatable<ArmServerKeyType>
    {
        private readonly string _value;

        private ArmServerKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArmServerKeyType SystemManaged { get; } = new ArmServerKeyType("SystemManaged");
        public static ArmServerKeyType AzureKeyVault { get; } = new ArmServerKeyType("AzureKeyVault");

        public static bool operator ==(ArmServerKeyType left, ArmServerKeyType right) => left.Equals(right);
        public static bool operator !=(ArmServerKeyType left, ArmServerKeyType right) => !left.Equals(right);

        public static explicit operator string(ArmServerKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArmServerKeyType other && Equals(other);
        public bool Equals(ArmServerKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of storage tier for IOPS.
    /// </summary>
    [EnumType]
    public readonly struct AzureManagedDiskPerformanceTiers : IEquatable<AzureManagedDiskPerformanceTiers>
    {
        private readonly string _value;

        private AzureManagedDiskPerformanceTiers(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureManagedDiskPerformanceTiers P1 { get; } = new AzureManagedDiskPerformanceTiers("P1");
        public static AzureManagedDiskPerformanceTiers P2 { get; } = new AzureManagedDiskPerformanceTiers("P2");
        public static AzureManagedDiskPerformanceTiers P3 { get; } = new AzureManagedDiskPerformanceTiers("P3");
        public static AzureManagedDiskPerformanceTiers P4 { get; } = new AzureManagedDiskPerformanceTiers("P4");
        public static AzureManagedDiskPerformanceTiers P6 { get; } = new AzureManagedDiskPerformanceTiers("P6");
        public static AzureManagedDiskPerformanceTiers P10 { get; } = new AzureManagedDiskPerformanceTiers("P10");
        public static AzureManagedDiskPerformanceTiers P15 { get; } = new AzureManagedDiskPerformanceTiers("P15");
        public static AzureManagedDiskPerformanceTiers P20 { get; } = new AzureManagedDiskPerformanceTiers("P20");
        public static AzureManagedDiskPerformanceTiers P30 { get; } = new AzureManagedDiskPerformanceTiers("P30");
        public static AzureManagedDiskPerformanceTiers P40 { get; } = new AzureManagedDiskPerformanceTiers("P40");
        public static AzureManagedDiskPerformanceTiers P50 { get; } = new AzureManagedDiskPerformanceTiers("P50");
        public static AzureManagedDiskPerformanceTiers P60 { get; } = new AzureManagedDiskPerformanceTiers("P60");
        public static AzureManagedDiskPerformanceTiers P70 { get; } = new AzureManagedDiskPerformanceTiers("P70");
        public static AzureManagedDiskPerformanceTiers P80 { get; } = new AzureManagedDiskPerformanceTiers("P80");

        public static bool operator ==(AzureManagedDiskPerformanceTiers left, AzureManagedDiskPerformanceTiers right) => left.Equals(right);
        public static bool operator !=(AzureManagedDiskPerformanceTiers left, AzureManagedDiskPerformanceTiers right) => !left.Equals(right);

        public static explicit operator string(AzureManagedDiskPerformanceTiers value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureManagedDiskPerformanceTiers other && Equals(other);
        public bool Equals(AzureManagedDiskPerformanceTiers other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To trigger cancel for entire migration we need to send this flag as True
    /// </summary>
    [EnumType]
    public readonly struct CancelEnum : IEquatable<CancelEnum>
    {
        private readonly string _value;

        private CancelEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelEnum True { get; } = new CancelEnum("True");
        public static CancelEnum False { get; } = new CancelEnum("False");

        public static bool operator ==(CancelEnum left, CancelEnum right) => left.Equals(right);
        public static bool operator !=(CancelEnum left, CancelEnum right) => !left.Equals(right);

        public static explicit operator string(CancelEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelEnum other && Equals(other);
        public bool Equals(CancelEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a new PostgreSQL server.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Create { get; } = new CreateMode("Create");
        public static CreateMode Update { get; } = new CreateMode("Update");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode GeoRestore { get; } = new CreateMode("GeoRestore");
        public static CreateMode Replica { get; } = new CreateMode("Replica");
        public static CreateMode ReviveDropped { get; } = new CreateMode("ReviveDropped");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A value indicating whether Geo-Redundant backup is enabled on the server.
    /// </summary>
    [EnumType]
    public readonly struct GeoRedundantBackupEnum : IEquatable<GeoRedundantBackupEnum>
    {
        private readonly string _value;

        private GeoRedundantBackupEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoRedundantBackupEnum Enabled { get; } = new GeoRedundantBackupEnum("Enabled");
        public static GeoRedundantBackupEnum Disabled { get; } = new GeoRedundantBackupEnum("Disabled");

        public static bool operator ==(GeoRedundantBackupEnum left, GeoRedundantBackupEnum right) => left.Equals(right);
        public static bool operator !=(GeoRedundantBackupEnum left, GeoRedundantBackupEnum right) => !left.Equals(right);

        public static explicit operator string(GeoRedundantBackupEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoRedundantBackupEnum other && Equals(other);
        public bool Equals(GeoRedundantBackupEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The HA mode for the server.
    /// </summary>
    [EnumType]
    public readonly struct HighAvailabilityMode : IEquatable<HighAvailabilityMode>
    {
        private readonly string _value;

        private HighAvailabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HighAvailabilityMode Disabled { get; } = new HighAvailabilityMode("Disabled");
        public static HighAvailabilityMode ZoneRedundant { get; } = new HighAvailabilityMode("ZoneRedundant");
        public static HighAvailabilityMode SameZone { get; } = new HighAvailabilityMode("SameZone");

        public static bool operator ==(HighAvailabilityMode left, HighAvailabilityMode right) => left.Equals(right);
        public static bool operator !=(HighAvailabilityMode left, HighAvailabilityMode right) => !left.Equals(right);

        public static explicit operator string(HighAvailabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HighAvailabilityMode other && Equals(other);
        public bool Equals(HighAvailabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Primary encryption key status for Data encryption enabled server.
    /// </summary>
    [EnumType]
    public readonly struct KeyStatusEnum : IEquatable<KeyStatusEnum>
    {
        private readonly string _value;

        private KeyStatusEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyStatusEnum Valid { get; } = new KeyStatusEnum("Valid");
        public static KeyStatusEnum Invalid { get; } = new KeyStatusEnum("Invalid");

        public static bool operator ==(KeyStatusEnum left, KeyStatusEnum right) => left.Equals(right);
        public static bool operator !=(KeyStatusEnum left, KeyStatusEnum right) => !left.Equals(right);

        public static explicit operator string(KeyStatusEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyStatusEnum other && Equals(other);
        public bool Equals(KeyStatusEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed
    /// </summary>
    [EnumType]
    public readonly struct LogicalReplicationOnSourceDbEnum : IEquatable<LogicalReplicationOnSourceDbEnum>
    {
        private readonly string _value;

        private LogicalReplicationOnSourceDbEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LogicalReplicationOnSourceDbEnum True { get; } = new LogicalReplicationOnSourceDbEnum("True");
        public static LogicalReplicationOnSourceDbEnum False { get; } = new LogicalReplicationOnSourceDbEnum("False");

        public static bool operator ==(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => left.Equals(right);
        public static bool operator !=(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => !left.Equals(right);

        public static explicit operator string(LogicalReplicationOnSourceDbEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogicalReplicationOnSourceDbEnum other && Equals(other);
        public bool Equals(LogicalReplicationOnSourceDbEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// There are two types of migration modes Online and Offline
    /// </summary>
    [EnumType]
    public readonly struct MigrationMode : IEquatable<MigrationMode>
    {
        private readonly string _value;

        private MigrationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MigrationMode Offline { get; } = new MigrationMode("Offline");
        public static MigrationMode Online { get; } = new MigrationMode("Online");

        public static bool operator ==(MigrationMode left, MigrationMode right) => left.Equals(right);
        public static bool operator !=(MigrationMode left, MigrationMode right) => !left.Equals(right);

        public static explicit operator string(MigrationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationMode other && Equals(other);
        public bool Equals(MigrationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
    /// </summary>
    [EnumType]
    public readonly struct OverwriteDbsInTargetEnum : IEquatable<OverwriteDbsInTargetEnum>
    {
        private readonly string _value;

        private OverwriteDbsInTargetEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OverwriteDbsInTargetEnum True { get; } = new OverwriteDbsInTargetEnum("True");
        public static OverwriteDbsInTargetEnum False { get; } = new OverwriteDbsInTargetEnum("False");

        public static bool operator ==(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => left.Equals(right);
        public static bool operator !=(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => !left.Equals(right);

        public static explicit operator string(OverwriteDbsInTargetEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OverwriteDbsInTargetEnum other && Equals(other);
        public bool Equals(OverwriteDbsInTargetEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If Enabled, Password authentication is enabled.
    /// </summary>
    [EnumType]
    public readonly struct PasswordAuthEnum : IEquatable<PasswordAuthEnum>
    {
        private readonly string _value;

        private PasswordAuthEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PasswordAuthEnum Enabled { get; } = new PasswordAuthEnum("Enabled");
        public static PasswordAuthEnum Disabled { get; } = new PasswordAuthEnum("Disabled");

        public static bool operator ==(PasswordAuthEnum left, PasswordAuthEnum right) => left.Equals(right);
        public static bool operator !=(PasswordAuthEnum left, PasswordAuthEnum right) => !left.Equals(right);

        public static explicit operator string(PasswordAuthEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PasswordAuthEnum other && Equals(other);
        public bool Equals(PasswordAuthEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The principal type used to represent the type of Active Directory Administrator.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType Unknown { get; } = new PrincipalType("Unknown");
        public static PrincipalType User { get; } = new PrincipalType("User");
        public static PrincipalType Group { get; } = new PrincipalType("Group");
        public static PrincipalType ServicePrincipal { get; } = new PrincipalType("ServicePrincipal");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Replication role of the server
    /// </summary>
    [EnumType]
    public readonly struct ReplicationRole : IEquatable<ReplicationRole>
    {
        private readonly string _value;

        private ReplicationRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationRole None { get; } = new ReplicationRole("None");
        public static ReplicationRole Primary { get; } = new ReplicationRole("Primary");
        public static ReplicationRole AsyncReplica { get; } = new ReplicationRole("AsyncReplica");
        public static ReplicationRole GeoAsyncReplica { get; } = new ReplicationRole("GeoAsyncReplica");

        public static bool operator ==(ReplicationRole left, ReplicationRole right) => left.Equals(right);
        public static bool operator !=(ReplicationRole left, ReplicationRole right) => !left.Equals(right);

        public static explicit operator string(ReplicationRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationRole other && Equals(other);
        public bool Equals(ReplicationRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// PostgreSQL Server version.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_14 { get; } = new ServerVersion("14");
        public static ServerVersion ServerVersion_13 { get; } = new ServerVersion("13");
        public static ServerVersion ServerVersion_12 { get; } = new ServerVersion("12");
        public static ServerVersion ServerVersion_11 { get; } = new ServerVersion("11");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. Burstable.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Burstable { get; } = new SkuTier("Burstable");
        public static SkuTier GeneralPurpose { get; } = new SkuTier("GeneralPurpose");
        public static SkuTier MemoryOptimized { get; } = new SkuTier("MemoryOptimized");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the data migration should start right away
    /// </summary>
    [EnumType]
    public readonly struct StartDataMigrationEnum : IEquatable<StartDataMigrationEnum>
    {
        private readonly string _value;

        private StartDataMigrationEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StartDataMigrationEnum True { get; } = new StartDataMigrationEnum("True");
        public static StartDataMigrationEnum False { get; } = new StartDataMigrationEnum("False");

        public static bool operator ==(StartDataMigrationEnum left, StartDataMigrationEnum right) => left.Equals(right);
        public static bool operator !=(StartDataMigrationEnum left, StartDataMigrationEnum right) => !left.Equals(right);

        public static explicit operator string(StartDataMigrationEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StartDataMigrationEnum other && Equals(other);
        public bool Equals(StartDataMigrationEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag to enable / disable Storage Auto grow for flexible server.
    /// </summary>
    [EnumType]
    public readonly struct StorageAutoGrow : IEquatable<StorageAutoGrow>
    {
        private readonly string _value;

        private StorageAutoGrow(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAutoGrow Enabled { get; } = new StorageAutoGrow("Enabled");
        public static StorageAutoGrow Disabled { get; } = new StorageAutoGrow("Disabled");

        public static bool operator ==(StorageAutoGrow left, StorageAutoGrow right) => left.Equals(right);
        public static bool operator !=(StorageAutoGrow left, StorageAutoGrow right) => !left.Equals(right);

        public static explicit operator string(StorageAutoGrow value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAutoGrow other && Equals(other);
        public bool Equals(StorageAutoGrow other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To trigger cutover for entire migration we need to send this flag as True
    /// </summary>
    [EnumType]
    public readonly struct TriggerCutoverEnum : IEquatable<TriggerCutoverEnum>
    {
        private readonly string _value;

        private TriggerCutoverEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerCutoverEnum True { get; } = new TriggerCutoverEnum("True");
        public static TriggerCutoverEnum False { get; } = new TriggerCutoverEnum("False");

        public static bool operator ==(TriggerCutoverEnum left, TriggerCutoverEnum right) => left.Equals(right);
        public static bool operator !=(TriggerCutoverEnum left, TriggerCutoverEnum right) => !left.Equals(right);

        public static explicit operator string(TriggerCutoverEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerCutoverEnum other && Equals(other);
        public bool Equals(TriggerCutoverEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
