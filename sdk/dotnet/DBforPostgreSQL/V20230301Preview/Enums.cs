// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20230301Preview
{
    /// <summary>
    /// To trigger cancel for entire migration we need to send this flag as True
    /// </summary>
    [EnumType]
    public readonly struct CancelEnum : IEquatable<CancelEnum>
    {
        private readonly string _value;

        private CancelEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelEnum True { get; } = new CancelEnum("True");
        public static CancelEnum False { get; } = new CancelEnum("False");

        public static bool operator ==(CancelEnum left, CancelEnum right) => left.Equals(right);
        public static bool operator !=(CancelEnum left, CancelEnum right) => !left.Equals(right);

        public static explicit operator string(CancelEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelEnum other && Equals(other);
        public bool Equals(CancelEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed
    /// </summary>
    [EnumType]
    public readonly struct LogicalReplicationOnSourceDbEnum : IEquatable<LogicalReplicationOnSourceDbEnum>
    {
        private readonly string _value;

        private LogicalReplicationOnSourceDbEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LogicalReplicationOnSourceDbEnum True { get; } = new LogicalReplicationOnSourceDbEnum("True");
        public static LogicalReplicationOnSourceDbEnum False { get; } = new LogicalReplicationOnSourceDbEnum("False");

        public static bool operator ==(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => left.Equals(right);
        public static bool operator !=(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => !left.Equals(right);

        public static explicit operator string(LogicalReplicationOnSourceDbEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogicalReplicationOnSourceDbEnum other && Equals(other);
        public bool Equals(LogicalReplicationOnSourceDbEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// There are two types of migration modes Online and Offline
    /// </summary>
    [EnumType]
    public readonly struct MigrationMode : IEquatable<MigrationMode>
    {
        private readonly string _value;

        private MigrationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MigrationMode Offline { get; } = new MigrationMode("Offline");
        public static MigrationMode Online { get; } = new MigrationMode("Online");

        public static bool operator ==(MigrationMode left, MigrationMode right) => left.Equals(right);
        public static bool operator !=(MigrationMode left, MigrationMode right) => !left.Equals(right);

        public static explicit operator string(MigrationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationMode other && Equals(other);
        public bool Equals(MigrationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the databases on the target server can be overwritten, if already present. If set to False, the migration workflow will wait for a confirmation, if it detects that the database already exists.
    /// </summary>
    [EnumType]
    public readonly struct OverwriteDbsInTargetEnum : IEquatable<OverwriteDbsInTargetEnum>
    {
        private readonly string _value;

        private OverwriteDbsInTargetEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OverwriteDbsInTargetEnum True { get; } = new OverwriteDbsInTargetEnum("True");
        public static OverwriteDbsInTargetEnum False { get; } = new OverwriteDbsInTargetEnum("False");

        public static bool operator ==(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => left.Equals(right);
        public static bool operator !=(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => !left.Equals(right);

        public static explicit operator string(OverwriteDbsInTargetEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OverwriteDbsInTargetEnum other && Equals(other);
        public bool Equals(OverwriteDbsInTargetEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the data migration should start right away
    /// </summary>
    [EnumType]
    public readonly struct StartDataMigrationEnum : IEquatable<StartDataMigrationEnum>
    {
        private readonly string _value;

        private StartDataMigrationEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StartDataMigrationEnum True { get; } = new StartDataMigrationEnum("True");
        public static StartDataMigrationEnum False { get; } = new StartDataMigrationEnum("False");

        public static bool operator ==(StartDataMigrationEnum left, StartDataMigrationEnum right) => left.Equals(right);
        public static bool operator !=(StartDataMigrationEnum left, StartDataMigrationEnum right) => !left.Equals(right);

        public static explicit operator string(StartDataMigrationEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StartDataMigrationEnum other && Equals(other);
        public bool Equals(StartDataMigrationEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To trigger cutover for entire migration we need to send this flag as True
    /// </summary>
    [EnumType]
    public readonly struct TriggerCutoverEnum : IEquatable<TriggerCutoverEnum>
    {
        private readonly string _value;

        private TriggerCutoverEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerCutoverEnum True { get; } = new TriggerCutoverEnum("True");
        public static TriggerCutoverEnum False { get; } = new TriggerCutoverEnum("False");

        public static bool operator ==(TriggerCutoverEnum left, TriggerCutoverEnum right) => left.Equals(right);
        public static bool operator !=(TriggerCutoverEnum left, TriggerCutoverEnum right) => !left.Equals(right);

        public static explicit operator string(TriggerCutoverEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerCutoverEnum other && Equals(other);
        public bool Equals(TriggerCutoverEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
