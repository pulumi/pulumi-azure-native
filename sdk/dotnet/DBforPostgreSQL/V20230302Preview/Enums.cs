// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20230302Preview
{
    [EnumType]
    public readonly struct ActiveDirectoryAuth : IEquatable<ActiveDirectoryAuth>
    {
        private readonly string _value;

        private ActiveDirectoryAuth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveDirectoryAuth Enabled { get; } = new ActiveDirectoryAuth("enabled");
        public static ActiveDirectoryAuth Disabled { get; } = new ActiveDirectoryAuth("disabled");

        public static bool operator ==(ActiveDirectoryAuth left, ActiveDirectoryAuth right) => left.Equals(right);
        public static bool operator !=(ActiveDirectoryAuth left, ActiveDirectoryAuth right) => !left.Equals(right);

        public static explicit operator string(ActiveDirectoryAuth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveDirectoryAuth other && Equals(other);
        public bool Equals(ActiveDirectoryAuth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataEncryptionType : IEquatable<DataEncryptionType>
    {
        private readonly string _value;

        private DataEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataEncryptionType AzureKeyVault { get; } = new DataEncryptionType("AzureKeyVault");
        public static DataEncryptionType SystemAssigned { get; } = new DataEncryptionType("SystemAssigned");

        public static bool operator ==(DataEncryptionType left, DataEncryptionType right) => left.Equals(right);
        public static bool operator !=(DataEncryptionType left, DataEncryptionType right) => !left.Equals(right);

        public static explicit operator string(DataEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataEncryptionType other && Equals(other);
        public bool Equals(DataEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PasswordAuth : IEquatable<PasswordAuth>
    {
        private readonly string _value;

        private PasswordAuth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PasswordAuth Enabled { get; } = new PasswordAuth("enabled");
        public static PasswordAuth Disabled { get; } = new PasswordAuth("disabled");

        public static bool operator ==(PasswordAuth left, PasswordAuth right) => left.Equals(right);
        public static bool operator !=(PasswordAuth left, PasswordAuth right) => !left.Equals(right);

        public static explicit operator string(PasswordAuth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PasswordAuth other && Equals(other);
        public bool Equals(PasswordAuth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType User { get; } = new PrincipalType("user");
        public static PrincipalType ServicePrincipal { get; } = new PrincipalType("servicePrincipal");
        public static PrincipalType @Group { get; } = new PrincipalType("group");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RoleType : IEquatable<RoleType>
    {
        private readonly string _value;

        private RoleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleType User { get; } = new RoleType("user");
        public static RoleType Admin { get; } = new RoleType("admin");

        public static bool operator ==(RoleType left, RoleType right) => left.Equals(right);
        public static bool operator !=(RoleType left, RoleType right) => !left.Equals(right);

        public static explicit operator string(RoleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleType other && Equals(other);
        public bool Equals(RoleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
