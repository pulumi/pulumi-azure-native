// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforPostgreSQL
{
    [EnumType]
    public readonly struct ActiveDirectoryAuth : IEquatable<ActiveDirectoryAuth>
    {
        private readonly string _value;

        private ActiveDirectoryAuth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveDirectoryAuth Enabled { get; } = new ActiveDirectoryAuth("enabled");
        public static ActiveDirectoryAuth Disabled { get; } = new ActiveDirectoryAuth("disabled");

        public static bool operator ==(ActiveDirectoryAuth left, ActiveDirectoryAuth right) => left.Equals(right);
        public static bool operator !=(ActiveDirectoryAuth left, ActiveDirectoryAuth right) => !left.Equals(right);

        public static explicit operator string(ActiveDirectoryAuth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveDirectoryAuth other && Equals(other);
        public bool Equals(ActiveDirectoryAuth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the server supports Microsoft Entra authentication.
    /// </summary>
    [EnumType]
    public readonly struct ActiveDirectoryAuthEnum : IEquatable<ActiveDirectoryAuthEnum>
    {
        private readonly string _value;

        private ActiveDirectoryAuthEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveDirectoryAuthEnum Enabled { get; } = new ActiveDirectoryAuthEnum("Enabled");
        public static ActiveDirectoryAuthEnum Disabled { get; } = new ActiveDirectoryAuthEnum("Disabled");

        public static bool operator ==(ActiveDirectoryAuthEnum left, ActiveDirectoryAuthEnum right) => left.Equals(right);
        public static bool operator !=(ActiveDirectoryAuthEnum left, ActiveDirectoryAuthEnum right) => !left.Equals(right);

        public static explicit operator string(ActiveDirectoryAuthEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveDirectoryAuthEnum other && Equals(other);
        public bool Equals(ActiveDirectoryAuthEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of administrator.
    /// </summary>
    [EnumType]
    public readonly struct AdministratorType : IEquatable<AdministratorType>
    {
        private readonly string _value;

        private AdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdministratorType ActiveDirectory { get; } = new AdministratorType("ActiveDirectory");

        public static bool operator ==(AdministratorType left, AdministratorType right) => left.Equals(right);
        public static bool operator !=(AdministratorType left, AdministratorType right) => !left.Equals(right);

        public static explicit operator string(AdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdministratorType other && Equals(other);
        public bool Equals(AdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data encryption type used by a flexible server.
    /// </summary>
    [EnumType]
    public readonly struct ArmServerKeyType : IEquatable<ArmServerKeyType>
    {
        private readonly string _value;

        private ArmServerKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArmServerKeyType SystemManaged { get; } = new ArmServerKeyType("SystemManaged");
        public static ArmServerKeyType AzureKeyVault { get; } = new ArmServerKeyType("AzureKeyVault");

        public static bool operator ==(ArmServerKeyType left, ArmServerKeyType right) => left.Equals(right);
        public static bool operator !=(ArmServerKeyType left, ArmServerKeyType right) => !left.Equals(right);

        public static explicit operator string(ArmServerKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArmServerKeyType other && Equals(other);
        public bool Equals(ArmServerKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage tier of a flexible server.
    /// </summary>
    [EnumType]
    public readonly struct AzureManagedDiskPerformanceTiers : IEquatable<AzureManagedDiskPerformanceTiers>
    {
        private readonly string _value;

        private AzureManagedDiskPerformanceTiers(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureManagedDiskPerformanceTiers P1 { get; } = new AzureManagedDiskPerformanceTiers("P1");
        public static AzureManagedDiskPerformanceTiers P2 { get; } = new AzureManagedDiskPerformanceTiers("P2");
        public static AzureManagedDiskPerformanceTiers P3 { get; } = new AzureManagedDiskPerformanceTiers("P3");
        public static AzureManagedDiskPerformanceTiers P4 { get; } = new AzureManagedDiskPerformanceTiers("P4");
        public static AzureManagedDiskPerformanceTiers P6 { get; } = new AzureManagedDiskPerformanceTiers("P6");
        public static AzureManagedDiskPerformanceTiers P10 { get; } = new AzureManagedDiskPerformanceTiers("P10");
        public static AzureManagedDiskPerformanceTiers P15 { get; } = new AzureManagedDiskPerformanceTiers("P15");
        public static AzureManagedDiskPerformanceTiers P20 { get; } = new AzureManagedDiskPerformanceTiers("P20");
        public static AzureManagedDiskPerformanceTiers P30 { get; } = new AzureManagedDiskPerformanceTiers("P30");
        public static AzureManagedDiskPerformanceTiers P40 { get; } = new AzureManagedDiskPerformanceTiers("P40");
        public static AzureManagedDiskPerformanceTiers P50 { get; } = new AzureManagedDiskPerformanceTiers("P50");
        public static AzureManagedDiskPerformanceTiers P60 { get; } = new AzureManagedDiskPerformanceTiers("P60");
        public static AzureManagedDiskPerformanceTiers P70 { get; } = new AzureManagedDiskPerformanceTiers("P70");
        public static AzureManagedDiskPerformanceTiers P80 { get; } = new AzureManagedDiskPerformanceTiers("P80");

        public static bool operator ==(AzureManagedDiskPerformanceTiers left, AzureManagedDiskPerformanceTiers right) => left.Equals(right);
        public static bool operator !=(AzureManagedDiskPerformanceTiers left, AzureManagedDiskPerformanceTiers right) => !left.Equals(right);

        public static explicit operator string(AzureManagedDiskPerformanceTiers value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureManagedDiskPerformanceTiers other && Equals(other);
        public bool Equals(AzureManagedDiskPerformanceTiers other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if cancel must be triggered for the entire migration.
    /// </summary>
    [EnumType]
    public readonly struct CancelEnum : IEquatable<CancelEnum>
    {
        private readonly string _value;

        private CancelEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelEnum True { get; } = new CancelEnum("True");
        public static CancelEnum False { get; } = new CancelEnum("False");

        public static bool operator ==(CancelEnum left, CancelEnum right) => left.Equals(right);
        public static bool operator !=(CancelEnum left, CancelEnum right) => !left.Equals(right);

        public static explicit operator string(CancelEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelEnum other && Equals(other);
        public bool Equals(CancelEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Creation mode of a new flexible server.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Create { get; } = new CreateMode("Create");
        public static CreateMode Update { get; } = new CreateMode("Update");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode GeoRestore { get; } = new CreateMode("GeoRestore");
        public static CreateMode Replica { get; } = new CreateMode("Replica");
        public static CreateMode ReviveDropped { get; } = new CreateMode("ReviveDropped");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataEncryptionType : IEquatable<DataEncryptionType>
    {
        private readonly string _value;

        private DataEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataEncryptionType AzureKeyVault { get; } = new DataEncryptionType("AzureKeyVault");
        public static DataEncryptionType SystemAssigned { get; } = new DataEncryptionType("SystemAssigned");

        public static bool operator ==(DataEncryptionType left, DataEncryptionType right) => left.Equals(right);
        public static bool operator !=(DataEncryptionType left, DataEncryptionType right) => !left.Equals(right);

        public static explicit operator string(DataEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataEncryptionType other && Equals(other);
        public bool Equals(DataEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Geo-redundant or not for server backup.
    /// </summary>
    [EnumType]
    public readonly struct GeoRedundantBackup : IEquatable<GeoRedundantBackup>
    {
        private readonly string _value;

        private GeoRedundantBackup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoRedundantBackup Enabled { get; } = new GeoRedundantBackup("Enabled");
        public static GeoRedundantBackup Disabled { get; } = new GeoRedundantBackup("Disabled");

        public static bool operator ==(GeoRedundantBackup left, GeoRedundantBackup right) => left.Equals(right);
        public static bool operator !=(GeoRedundantBackup left, GeoRedundantBackup right) => !left.Equals(right);

        public static explicit operator string(GeoRedundantBackup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoRedundantBackup other && Equals(other);
        public bool Equals(GeoRedundantBackup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the server is configured to create geographically redundant backups.
    /// </summary>
    [EnumType]
    public readonly struct GeoRedundantBackupEnum : IEquatable<GeoRedundantBackupEnum>
    {
        private readonly string _value;

        private GeoRedundantBackupEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoRedundantBackupEnum Enabled { get; } = new GeoRedundantBackupEnum("Enabled");
        public static GeoRedundantBackupEnum Disabled { get; } = new GeoRedundantBackupEnum("Disabled");

        public static bool operator ==(GeoRedundantBackupEnum left, GeoRedundantBackupEnum right) => left.Equals(right);
        public static bool operator !=(GeoRedundantBackupEnum left, GeoRedundantBackupEnum right) => !left.Equals(right);

        public static explicit operator string(GeoRedundantBackupEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoRedundantBackupEnum other && Equals(other);
        public bool Equals(GeoRedundantBackupEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// High availability mode for a flexible server.
    /// </summary>
    [EnumType]
    public readonly struct HighAvailabilityMode : IEquatable<HighAvailabilityMode>
    {
        private readonly string _value;

        private HighAvailabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HighAvailabilityMode Disabled { get; } = new HighAvailabilityMode("Disabled");
        public static HighAvailabilityMode ZoneRedundant { get; } = new HighAvailabilityMode("ZoneRedundant");
        public static HighAvailabilityMode SameZone { get; } = new HighAvailabilityMode("SameZone");

        public static bool operator ==(HighAvailabilityMode left, HighAvailabilityMode right) => left.Equals(right);
        public static bool operator !=(HighAvailabilityMode left, HighAvailabilityMode right) => !left.Equals(right);

        public static explicit operator string(HighAvailabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HighAvailabilityMode other && Equals(other);
        public bool Equals(HighAvailabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status showing whether the server enabled infrastructure encryption.
    /// </summary>
    [EnumType]
    public readonly struct InfrastructureEncryption : IEquatable<InfrastructureEncryption>
    {
        private readonly string _value;

        private InfrastructureEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value for single layer of encryption for data at rest.
        /// </summary>
        public static InfrastructureEncryption Enabled { get; } = new InfrastructureEncryption("Enabled");
        /// <summary>
        /// Additional (2nd) layer of encryption for data at rest
        /// </summary>
        public static InfrastructureEncryption Disabled { get; } = new InfrastructureEncryption("Disabled");

        public static bool operator ==(InfrastructureEncryption left, InfrastructureEncryption right) => left.Equals(right);
        public static bool operator !=(InfrastructureEncryption left, InfrastructureEncryption right) => !left.Equals(right);

        public static explicit operator string(InfrastructureEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InfrastructureEncryption other && Equals(other);
        public bool Equals(InfrastructureEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of key used by a flexible server configured with data encryption based on customer managed key, to encrypt the primary storage associated to the server.
    /// </summary>
    [EnumType]
    public readonly struct KeyStatusEnum : IEquatable<KeyStatusEnum>
    {
        private readonly string _value;

        private KeyStatusEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyStatusEnum Valid { get; } = new KeyStatusEnum("Valid");
        public static KeyStatusEnum Invalid { get; } = new KeyStatusEnum("Invalid");

        public static bool operator ==(KeyStatusEnum left, KeyStatusEnum right) => left.Equals(right);
        public static bool operator !=(KeyStatusEnum left, KeyStatusEnum right) => !left.Equals(right);

        public static explicit operator string(KeyStatusEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyStatusEnum other && Equals(other);
        public bool Equals(KeyStatusEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed.
    /// </summary>
    [EnumType]
    public readonly struct LogicalReplicationOnSourceDbEnum : IEquatable<LogicalReplicationOnSourceDbEnum>
    {
        private readonly string _value;

        private LogicalReplicationOnSourceDbEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LogicalReplicationOnSourceDbEnum True { get; } = new LogicalReplicationOnSourceDbEnum("True");
        public static LogicalReplicationOnSourceDbEnum False { get; } = new LogicalReplicationOnSourceDbEnum("False");

        public static bool operator ==(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => left.Equals(right);
        public static bool operator !=(LogicalReplicationOnSourceDbEnum left, LogicalReplicationOnSourceDbEnum right) => !left.Equals(right);

        public static explicit operator string(LogicalReplicationOnSourceDbEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogicalReplicationOnSourceDbEnum other && Equals(other);
        public bool Equals(LogicalReplicationOnSourceDbEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if roles and permissions must be migrated.
    /// </summary>
    [EnumType]
    public readonly struct MigrateRolesEnum : IEquatable<MigrateRolesEnum>
    {
        private readonly string _value;

        private MigrateRolesEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MigrateRolesEnum True { get; } = new MigrateRolesEnum("True");
        public static MigrateRolesEnum False { get; } = new MigrateRolesEnum("False");

        public static bool operator ==(MigrateRolesEnum left, MigrateRolesEnum right) => left.Equals(right);
        public static bool operator !=(MigrateRolesEnum left, MigrateRolesEnum right) => !left.Equals(right);

        public static explicit operator string(MigrateRolesEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrateRolesEnum other && Equals(other);
        public bool Equals(MigrateRolesEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode used to perform the migration: Online or Offline.
    /// </summary>
    [EnumType]
    public readonly struct MigrationMode : IEquatable<MigrationMode>
    {
        private readonly string _value;

        private MigrationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MigrationMode Offline { get; } = new MigrationMode("Offline");
        public static MigrationMode Online { get; } = new MigrationMode("Online");

        public static bool operator ==(MigrationMode left, MigrationMode right) => left.Equals(right);
        public static bool operator !=(MigrationMode left, MigrationMode right) => !left.Equals(right);

        public static explicit operator string(MigrationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationMode other && Equals(other);
        public bool Equals(MigrationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Supported option for a migration.
    /// </summary>
    [EnumType]
    public readonly struct MigrationOption : IEquatable<MigrationOption>
    {
        private readonly string _value;

        private MigrationOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MigrationOption Validate { get; } = new MigrationOption("Validate");
        public static MigrationOption Migrate { get; } = new MigrationOption("Migrate");
        public static MigrationOption ValidateAndMigrate { get; } = new MigrationOption("ValidateAndMigrate");

        public static bool operator ==(MigrationOption left, MigrationOption right) => left.Equals(right);
        public static bool operator !=(MigrationOption left, MigrationOption right) => !left.Equals(right);

        public static explicit operator string(MigrationOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MigrationOption other && Equals(other);
        public bool Equals(MigrationOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enforce a minimal Tls version for the server.
    /// </summary>
    [EnumType]
    public readonly struct MinimalTlsVersionEnum : IEquatable<MinimalTlsVersionEnum>
    {
        private readonly string _value;

        private MinimalTlsVersionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MinimalTlsVersionEnum TLS1_0 { get; } = new MinimalTlsVersionEnum("TLS1_0");
        public static MinimalTlsVersionEnum TLS1_1 { get; } = new MinimalTlsVersionEnum("TLS1_1");
        public static MinimalTlsVersionEnum TLS1_2 { get; } = new MinimalTlsVersionEnum("TLS1_2");
        public static MinimalTlsVersionEnum TLSEnforcementDisabled { get; } = new MinimalTlsVersionEnum("TLSEnforcementDisabled");

        public static bool operator ==(MinimalTlsVersionEnum left, MinimalTlsVersionEnum right) => left.Equals(right);
        public static bool operator !=(MinimalTlsVersionEnum left, MinimalTlsVersionEnum right) => !left.Equals(right);

        public static explicit operator string(MinimalTlsVersionEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalTlsVersionEnum other && Equals(other);
        public bool Equals(MinimalTlsVersionEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration workflow detects that the database already exists on the target server, it will wait for a confirmation.
    /// </summary>
    [EnumType]
    public readonly struct OverwriteDbsInTargetEnum : IEquatable<OverwriteDbsInTargetEnum>
    {
        private readonly string _value;

        private OverwriteDbsInTargetEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OverwriteDbsInTargetEnum True { get; } = new OverwriteDbsInTargetEnum("True");
        public static OverwriteDbsInTargetEnum False { get; } = new OverwriteDbsInTargetEnum("False");

        public static bool operator ==(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => left.Equals(right);
        public static bool operator !=(OverwriteDbsInTargetEnum left, OverwriteDbsInTargetEnum right) => !left.Equals(right);

        public static explicit operator string(OverwriteDbsInTargetEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OverwriteDbsInTargetEnum other && Equals(other);
        public bool Equals(OverwriteDbsInTargetEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PasswordAuth : IEquatable<PasswordAuth>
    {
        private readonly string _value;

        private PasswordAuth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PasswordAuth Enabled { get; } = new PasswordAuth("enabled");
        public static PasswordAuth Disabled { get; } = new PasswordAuth("disabled");

        public static bool operator ==(PasswordAuth left, PasswordAuth right) => left.Equals(right);
        public static bool operator !=(PasswordAuth left, PasswordAuth right) => !left.Equals(right);

        public static explicit operator string(PasswordAuth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PasswordAuth other && Equals(other);
        public bool Equals(PasswordAuth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the server supports password based authentication.
    /// </summary>
    [EnumType]
    public readonly struct PasswordAuthEnum : IEquatable<PasswordAuthEnum>
    {
        private readonly string _value;

        private PasswordAuthEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PasswordAuthEnum Enabled { get; } = new PasswordAuthEnum("Enabled");
        public static PasswordAuthEnum Disabled { get; } = new PasswordAuthEnum("Disabled");

        public static bool operator ==(PasswordAuthEnum left, PasswordAuthEnum right) => left.Equals(right);
        public static bool operator !=(PasswordAuthEnum left, PasswordAuthEnum right) => !left.Equals(right);

        public static explicit operator string(PasswordAuthEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PasswordAuthEnum other && Equals(other);
        public bool Equals(PasswordAuthEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType User { get; } = new PrincipalType("user");
        public static PrincipalType ServicePrincipal { get; } = new PrincipalType("servicePrincipal");
        public static PrincipalType @Group { get; } = new PrincipalType("group");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessEnum : IEquatable<PublicNetworkAccessEnum>
    {
        private readonly string _value;

        private PublicNetworkAccessEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccessEnum Enabled { get; } = new PublicNetworkAccessEnum("Enabled");
        public static PublicNetworkAccessEnum Disabled { get; } = new PublicNetworkAccessEnum("Disabled");

        public static bool operator ==(PublicNetworkAccessEnum left, PublicNetworkAccessEnum right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessEnum left, PublicNetworkAccessEnum right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessEnum other && Equals(other);
        public bool Equals(PublicNetworkAccessEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of operation to apply on the read replica. This property is write only. Standalone means that the read replica will be promoted to a standalone server, and will become a completely independent entity from the replication set. Switchover means that the read replica will roles with the primary server.
    /// </summary>
    [EnumType]
    public readonly struct ReadReplicaPromoteMode : IEquatable<ReadReplicaPromoteMode>
    {
        private readonly string _value;

        private ReadReplicaPromoteMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReadReplicaPromoteMode Standalone { get; } = new ReadReplicaPromoteMode("standalone");
        public static ReadReplicaPromoteMode Switchover { get; } = new ReadReplicaPromoteMode("switchover");

        public static bool operator ==(ReadReplicaPromoteMode left, ReadReplicaPromoteMode right) => left.Equals(right);
        public static bool operator !=(ReadReplicaPromoteMode left, ReadReplicaPromoteMode right) => !left.Equals(right);

        public static explicit operator string(ReadReplicaPromoteMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReadReplicaPromoteMode other && Equals(other);
        public bool Equals(ReadReplicaPromoteMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data synchronization option to use when processing the operation specified in the promoteMode property This property is write only. Planned means that the operation will wait for data in the read replica to be fully synchronized with its source server before it initiates the operation. Forced means that the operation will not wait for data in the read replica to be synchronized with its source server before it initiates the operation.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationPromoteOption : IEquatable<ReplicationPromoteOption>
    {
        private readonly string _value;

        private ReplicationPromoteOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationPromoteOption Planned { get; } = new ReplicationPromoteOption("planned");
        public static ReplicationPromoteOption Forced { get; } = new ReplicationPromoteOption("forced");

        public static bool operator ==(ReplicationPromoteOption left, ReplicationPromoteOption right) => left.Equals(right);
        public static bool operator !=(ReplicationPromoteOption left, ReplicationPromoteOption right) => !left.Equals(right);

        public static explicit operator string(ReplicationPromoteOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationPromoteOption other && Equals(other);
        public bool Equals(ReplicationPromoteOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Role of the server in a replication set.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationRole : IEquatable<ReplicationRole>
    {
        private readonly string _value;

        private ReplicationRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationRole None { get; } = new ReplicationRole("None");
        public static ReplicationRole Primary { get; } = new ReplicationRole("Primary");
        public static ReplicationRole AsyncReplica { get; } = new ReplicationRole("AsyncReplica");
        public static ReplicationRole GeoAsyncReplica { get; } = new ReplicationRole("GeoAsyncReplica");

        public static bool operator ==(ReplicationRole left, ReplicationRole right) => left.Equals(right);
        public static bool operator !=(ReplicationRole left, ReplicationRole right) => !left.Equals(right);

        public static explicit operator string(ReplicationRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationRole other && Equals(other);
        public bool Equals(ReplicationRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RoleType : IEquatable<RoleType>
    {
        private readonly string _value;

        private RoleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleType User { get; } = new RoleType("user");
        public static RoleType Admin { get; } = new RoleType("admin");

        public static bool operator ==(RoleType left, RoleType right) => left.Equals(right);
        public static bool operator !=(RoleType left, RoleType right) => !left.Equals(right);

        public static explicit operator string(RoleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleType other && Equals(other);
        public bool Equals(RoleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if public network access is enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct ServerPublicNetworkAccessState : IEquatable<ServerPublicNetworkAccessState>
    {
        private readonly string _value;

        private ServerPublicNetworkAccessState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPublicNetworkAccessState Enabled { get; } = new ServerPublicNetworkAccessState("Enabled");
        public static ServerPublicNetworkAccessState Disabled { get; } = new ServerPublicNetworkAccessState("Disabled");

        public static bool operator ==(ServerPublicNetworkAccessState left, ServerPublicNetworkAccessState right) => left.Equals(right);
        public static bool operator !=(ServerPublicNetworkAccessState left, ServerPublicNetworkAccessState right) => !left.Equals(right);

        public static explicit operator string(ServerPublicNetworkAccessState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPublicNetworkAccessState other && Equals(other);
        public bool Equals(ServerPublicNetworkAccessState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the state of the policy, whether it is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct ServerSecurityAlertPolicyState : IEquatable<ServerSecurityAlertPolicyState>
    {
        private readonly string _value;

        private ServerSecurityAlertPolicyState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerSecurityAlertPolicyState Enabled { get; } = new ServerSecurityAlertPolicyState("Enabled");
        public static ServerSecurityAlertPolicyState Disabled { get; } = new ServerSecurityAlertPolicyState("Disabled");

        public static bool operator ==(ServerSecurityAlertPolicyState left, ServerSecurityAlertPolicyState right) => left.Equals(right);
        public static bool operator !=(ServerSecurityAlertPolicyState left, ServerSecurityAlertPolicyState right) => !left.Equals(right);

        public static explicit operator string(ServerSecurityAlertPolicyState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerSecurityAlertPolicyState other && Equals(other);
        public bool Equals(ServerSecurityAlertPolicyState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Major version of PostgreSQL database engine.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_16 { get; } = new ServerVersion("16");
        public static ServerVersion ServerVersion_15 { get; } = new ServerVersion("15");
        public static ServerVersion ServerVersion_14 { get; } = new ServerVersion("14");
        public static ServerVersion ServerVersion_13 { get; } = new ServerVersion("13");
        public static ServerVersion ServerVersion_12 { get; } = new ServerVersion("12");
        public static ServerVersion ServerVersion_11 { get; } = new ServerVersion("11");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a new server.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerCreateMode : IEquatable<SingleServerCreateMode>
    {
        private readonly string _value;

        private SingleServerCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerCreateMode Default { get; } = new SingleServerCreateMode("Default");
        public static SingleServerCreateMode PointInTimeRestore { get; } = new SingleServerCreateMode("PointInTimeRestore");
        public static SingleServerCreateMode GeoRestore { get; } = new SingleServerCreateMode("GeoRestore");
        public static SingleServerCreateMode Replica { get; } = new SingleServerCreateMode("Replica");

        public static bool operator ==(SingleServerCreateMode left, SingleServerCreateMode right) => left.Equals(right);
        public static bool operator !=(SingleServerCreateMode left, SingleServerCreateMode right) => !left.Equals(right);

        public static explicit operator string(SingleServerCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerCreateMode other && Equals(other);
        public bool Equals(SingleServerCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerIdentityProperties : IEquatable<SingleServerIdentityProperties>
    {
        private readonly string _value;

        private SingleServerIdentityProperties(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerIdentityProperties SystemAssigned { get; } = new SingleServerIdentityProperties("SystemAssigned");

        public static bool operator ==(SingleServerIdentityProperties left, SingleServerIdentityProperties right) => left.Equals(right);
        public static bool operator !=(SingleServerIdentityProperties left, SingleServerIdentityProperties right) => !left.Equals(right);

        public static explicit operator string(SingleServerIdentityProperties value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerIdentityProperties other && Equals(other);
        public bool Equals(SingleServerIdentityProperties other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. Basic.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerSkuTier : IEquatable<SingleServerSkuTier>
    {
        private readonly string _value;

        private SingleServerSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerSkuTier Basic { get; } = new SingleServerSkuTier("Basic");
        public static SingleServerSkuTier GeneralPurpose { get; } = new SingleServerSkuTier("GeneralPurpose");
        public static SingleServerSkuTier MemoryOptimized { get; } = new SingleServerSkuTier("MemoryOptimized");

        public static bool operator ==(SingleServerSkuTier left, SingleServerSkuTier right) => left.Equals(right);
        public static bool operator !=(SingleServerSkuTier left, SingleServerSkuTier right) => !left.Equals(right);

        public static explicit operator string(SingleServerSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerSkuTier other && Equals(other);
        public bool Equals(SingleServerSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server version.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerVersion : IEquatable<SingleServerVersion>
    {
        private readonly string _value;

        private SingleServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerVersion SingleServerVersion_9_5 { get; } = new SingleServerVersion("9.5");
        public static SingleServerVersion SingleServerVersion_9_6 { get; } = new SingleServerVersion("9.6");
        public static SingleServerVersion SingleServerVersion_10 { get; } = new SingleServerVersion("10");
        public static SingleServerVersion SingleServerVersion_10_0 { get; } = new SingleServerVersion("10.0");
        public static SingleServerVersion SingleServerVersion_10_2 { get; } = new SingleServerVersion("10.2");
        public static SingleServerVersion SingleServerVersion_11 { get; } = new SingleServerVersion("11");

        public static bool operator ==(SingleServerVersion left, SingleServerVersion right) => left.Equals(right);
        public static bool operator !=(SingleServerVersion left, SingleServerVersion right) => !left.Equals(right);

        public static explicit operator string(SingleServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerVersion other && Equals(other);
        public bool Equals(SingleServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of the compute assigned to a flexible server.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Burstable { get; } = new SkuTier("Burstable");
        public static SkuTier GeneralPurpose { get; } = new SkuTier("GeneralPurpose");
        public static SkuTier MemoryOptimized { get; } = new SkuTier("MemoryOptimized");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL, GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer, or Supabase_PostgreSQL
    /// </summary>
    [EnumType]
    public readonly struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        private SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceType OnPremises { get; } = new SourceType("OnPremises");
        public static SourceType AWS { get; } = new SourceType("AWS");
        public static SourceType GCP { get; } = new SourceType("GCP");
        public static SourceType AzureVM { get; } = new SourceType("AzureVM");
        public static SourceType PostgreSQLSingleServer { get; } = new SourceType("PostgreSQLSingleServer");
        public static SourceType AWS_RDS { get; } = new SourceType("AWS_RDS");
        public static SourceType AWS_AURORA { get; } = new SourceType("AWS_AURORA");
        public static SourceType AWS_EC2 { get; } = new SourceType("AWS_EC2");
        public static SourceType GCP_CloudSQL { get; } = new SourceType("GCP_CloudSQL");
        public static SourceType GCP_AlloyDB { get; } = new SourceType("GCP_AlloyDB");
        public static SourceType GCP_Compute { get; } = new SourceType("GCP_Compute");
        public static SourceType EDB { get; } = new SourceType("EDB");

        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);

        public static explicit operator string(SourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceType other && Equals(other);
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable ssl enforcement or not when connect to server.
    /// </summary>
    [EnumType]
    public readonly struct SslEnforcementEnum : IEquatable<SslEnforcementEnum>
    {
        private readonly string _value;

        private SslEnforcementEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslEnforcementEnum Enabled { get; } = new SslEnforcementEnum("Enabled");
        public static SslEnforcementEnum Disabled { get; } = new SslEnforcementEnum("Disabled");

        public static bool operator ==(SslEnforcementEnum left, SslEnforcementEnum right) => left.Equals(right);
        public static bool operator !=(SslEnforcementEnum left, SslEnforcementEnum right) => !left.Equals(right);

        public static explicit operator string(SslEnforcementEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslEnforcementEnum other && Equals(other);
        public bool Equals(SslEnforcementEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode for other source types is 'Prefer'.
    /// </summary>
    [EnumType]
    public readonly struct SslMode : IEquatable<SslMode>
    {
        private readonly string _value;

        private SslMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslMode Prefer { get; } = new SslMode("Prefer");
        public static SslMode Require { get; } = new SslMode("Require");
        public static SslMode VerifyCA { get; } = new SslMode("VerifyCA");
        public static SslMode VerifyFull { get; } = new SslMode("VerifyFull");

        public static bool operator ==(SslMode left, SslMode right) => left.Equals(right);
        public static bool operator !=(SslMode left, SslMode right) => !left.Equals(right);

        public static explicit operator string(SslMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslMode other && Equals(other);
        public bool Equals(SslMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if data migration must start right away.
    /// </summary>
    [EnumType]
    public readonly struct StartDataMigrationEnum : IEquatable<StartDataMigrationEnum>
    {
        private readonly string _value;

        private StartDataMigrationEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StartDataMigrationEnum True { get; } = new StartDataMigrationEnum("True");
        public static StartDataMigrationEnum False { get; } = new StartDataMigrationEnum("False");

        public static bool operator ==(StartDataMigrationEnum left, StartDataMigrationEnum right) => left.Equals(right);
        public static bool operator !=(StartDataMigrationEnum left, StartDataMigrationEnum right) => !left.Equals(right);

        public static explicit operator string(StartDataMigrationEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StartDataMigrationEnum other && Equals(other);
        public bool Equals(StartDataMigrationEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag to enable or disable the automatic growth of storage size of a flexible server when available space is nearing zero and conditions allow for automatically growing storage size.
    /// </summary>
    [EnumType]
    public readonly struct StorageAutoGrow : IEquatable<StorageAutoGrow>
    {
        private readonly string _value;

        private StorageAutoGrow(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAutoGrow Enabled { get; } = new StorageAutoGrow("Enabled");
        public static StorageAutoGrow Disabled { get; } = new StorageAutoGrow("Disabled");

        public static bool operator ==(StorageAutoGrow left, StorageAutoGrow right) => left.Equals(right);
        public static bool operator !=(StorageAutoGrow left, StorageAutoGrow right) => !left.Equals(right);

        public static explicit operator string(StorageAutoGrow value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAutoGrow other && Equals(other);
        public bool Equals(StorageAutoGrow other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Storage Auto Grow.
    /// </summary>
    [EnumType]
    public readonly struct StorageAutogrow : IEquatable<StorageAutogrow>
    {
        private readonly string _value;

        private StorageAutogrow(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAutogrow Enabled { get; } = new StorageAutogrow("Enabled");
        public static StorageAutogrow Disabled { get; } = new StorageAutogrow("Disabled");

        public static bool operator ==(StorageAutogrow left, StorageAutogrow right) => left.Equals(right);
        public static bool operator !=(StorageAutogrow left, StorageAutogrow right) => !left.Equals(right);

        public static explicit operator string(StorageAutogrow value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAutogrow other && Equals(other);
        public bool Equals(StorageAutogrow other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of storage assigned to a flexible server. Allowed values are Premium_LRS or PremiumV2_LRS. If not specified, it defaults to Premium_LRS.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType Premium_LRS { get; } = new StorageType("Premium_LRS");
        public static StorageType PremiumV2_LRS { get; } = new StorageType("PremiumV2_LRS");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if cutover must be triggered for the entire migration.
    /// </summary>
    [EnumType]
    public readonly struct TriggerCutoverEnum : IEquatable<TriggerCutoverEnum>
    {
        private readonly string _value;

        private TriggerCutoverEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerCutoverEnum True { get; } = new TriggerCutoverEnum("True");
        public static TriggerCutoverEnum False { get; } = new TriggerCutoverEnum("False");

        public static bool operator ==(TriggerCutoverEnum left, TriggerCutoverEnum right) => left.Equals(right);
        public static bool operator !=(TriggerCutoverEnum left, TriggerCutoverEnum right) => !left.Equals(right);

        public static explicit operator string(TriggerCutoverEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerCutoverEnum other && Equals(other);
        public bool Equals(TriggerCutoverEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of endpoint for the virtual endpoints.
    /// </summary>
    [EnumType]
    public readonly struct VirtualEndpointType : IEquatable<VirtualEndpointType>
    {
        private readonly string _value;

        private VirtualEndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualEndpointType ReadWrite { get; } = new VirtualEndpointType("ReadWrite");

        public static bool operator ==(VirtualEndpointType left, VirtualEndpointType right) => left.Equals(right);
        public static bool operator !=(VirtualEndpointType left, VirtualEndpointType right) => !left.Equals(right);

        public static explicit operator string(VirtualEndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualEndpointType other && Equals(other);
        public bool Equals(VirtualEndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
