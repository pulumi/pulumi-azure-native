// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20171201
{
    public static class GetServerSecurityAlertPolicy
    {
        /// <summary>
        /// Get a server's security alert policy.
        /// </summary>
        public static Task<GetServerSecurityAlertPolicyResult> InvokeAsync(GetServerSecurityAlertPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerSecurityAlertPolicyResult>("azure-native:dbforpostgresql/v20171201:getServerSecurityAlertPolicy", args ?? new GetServerSecurityAlertPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get a server's security alert policy.
        /// </summary>
        public static Output<GetServerSecurityAlertPolicyResult> Invoke(GetServerSecurityAlertPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerSecurityAlertPolicyResult>("azure-native:dbforpostgresql/v20171201:getServerSecurityAlertPolicy", args ?? new GetServerSecurityAlertPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerSecurityAlertPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the security alert policy.
        /// </summary>
        [Input("securityAlertPolicyName", required: true)]
        public string SecurityAlertPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetServerSecurityAlertPolicyArgs()
        {
        }
        public static new GetServerSecurityAlertPolicyArgs Empty => new GetServerSecurityAlertPolicyArgs();
    }

    public sealed class GetServerSecurityAlertPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the security alert policy.
        /// </summary>
        [Input("securityAlertPolicyName", required: true)]
        public Input<string> SecurityAlertPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetServerSecurityAlertPolicyInvokeArgs()
        {
        }
        public static new GetServerSecurityAlertPolicyInvokeArgs Empty => new GetServerSecurityAlertPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerSecurityAlertPolicyResult
    {
        /// <summary>
        /// Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly
        /// </summary>
        public readonly ImmutableArray<string> DisabledAlerts;
        /// <summary>
        /// Specifies that the alert is sent to the account administrators.
        /// </summary>
        public readonly bool? EmailAccountAdmins;
        /// <summary>
        /// Specifies an array of e-mail addresses to which the alert is sent.
        /// </summary>
        public readonly ImmutableArray<string> EmailAddresses;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs.
        /// </summary>
        public readonly int? RetentionDays;
        /// <summary>
        /// Specifies the state of the policy, whether it is enabled or disabled.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account.
        /// </summary>
        public readonly string? StorageAccountAccessKey;
        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
        /// </summary>
        public readonly string? StorageEndpoint;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServerSecurityAlertPolicyResult(
            ImmutableArray<string> disabledAlerts,

            bool? emailAccountAdmins,

            ImmutableArray<string> emailAddresses,

            string id,

            string name,

            int? retentionDays,

            string state,

            string? storageAccountAccessKey,

            string? storageEndpoint,

            string type)
        {
            DisabledAlerts = disabledAlerts;
            EmailAccountAdmins = emailAccountAdmins;
            EmailAddresses = emailAddresses;
            Id = id;
            Name = name;
            RetentionDays = retentionDays;
            State = state;
            StorageAccountAccessKey = storageAccountAccessKey;
            StorageEndpoint = storageEndpoint;
            Type = type;
        }
    }
}
