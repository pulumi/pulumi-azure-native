// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL
{
    public static class GetCluster
    {
        /// <summary>
        /// Gets information about a cluster such as compute and storage configuration and cluster lifecycle metadata such as cluster creation date and time.
        /// API Version: 2022-11-08.
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("azure-native:dbforpostgresql:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a cluster such as compute and storage configuration and cluster lifecycle metadata such as cluster creation date and time.
        /// API Version: 2022-11-08.
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("azure-native:dbforpostgresql:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// The administrator's login name of the servers in the cluster.
        /// </summary>
        public readonly string AdministratorLogin;
        /// <summary>
        /// The Citus extension version on all cluster servers.
        /// </summary>
        public readonly string? CitusVersion;
        /// <summary>
        /// If public access is enabled on coordinator.
        /// </summary>
        public readonly bool? CoordinatorEnablePublicIpAccess;
        /// <summary>
        /// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
        /// </summary>
        public readonly string? CoordinatorServerEdition;
        /// <summary>
        /// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
        /// </summary>
        public readonly int? CoordinatorStorageQuotaInMb;
        /// <summary>
        /// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
        /// </summary>
        public readonly int? CoordinatorVCores;
        /// <summary>
        /// The earliest restore point time (ISO8601 format) for the cluster.
        /// </summary>
        public readonly string EarliestRestoreTime;
        /// <summary>
        /// If high availability (HA) is enabled or not for the cluster.
        /// </summary>
        public readonly bool? EnableHa;
        /// <summary>
        /// If shards on coordinator is enabled or not for the cluster.
        /// </summary>
        public readonly bool? EnableShardsOnCoordinator;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maintenance window of a cluster.
        /// </summary>
        public readonly Outputs.MaintenanceWindowResponse? MaintenanceWindow;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
        /// </summary>
        public readonly int? NodeCount;
        /// <summary>
        /// If public access is enabled on worker nodes.
        /// </summary>
        public readonly bool? NodeEnablePublicIpAccess;
        /// <summary>
        /// The edition of a node server (default: MemoryOptimized).
        /// </summary>
        public readonly string? NodeServerEdition;
        /// <summary>
        /// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
        /// </summary>
        public readonly int? NodeStorageQuotaInMb;
        /// <summary>
        /// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
        /// </summary>
        public readonly int? NodeVCores;
        /// <summary>
        /// Date and time in UTC (ISO8601 format) for cluster restore.
        /// </summary>
        public readonly string? PointInTimeUTC;
        /// <summary>
        /// The major PostgreSQL version on all cluster servers.
        /// </summary>
        public readonly string? PostgresqlVersion;
        /// <summary>
        /// Preferred primary availability zone (AZ) for all cluster servers.
        /// </summary>
        public readonly string? PreferredPrimaryZone;
        /// <summary>
        /// The private endpoint connections for a cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.SimplePrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the cluster
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The array of read replica clusters.
        /// </summary>
        public readonly ImmutableArray<string> ReadReplicas;
        /// <summary>
        /// The list of server names in the cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerNameItemResponse> ServerNames;
        /// <summary>
        /// The Azure region of source cluster for read replica clusters.
        /// </summary>
        public readonly string? SourceLocation;
        /// <summary>
        /// The resource id of source cluster for read replica clusters.
        /// </summary>
        public readonly string? SourceResourceId;
        /// <summary>
        /// A state of a cluster/server that is visible to user.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetClusterResult(
            string administratorLogin,

            string? citusVersion,

            bool? coordinatorEnablePublicIpAccess,

            string? coordinatorServerEdition,

            int? coordinatorStorageQuotaInMb,

            int? coordinatorVCores,

            string earliestRestoreTime,

            bool? enableHa,

            bool? enableShardsOnCoordinator,

            string id,

            string location,

            Outputs.MaintenanceWindowResponse? maintenanceWindow,

            string name,

            int? nodeCount,

            bool? nodeEnablePublicIpAccess,

            string? nodeServerEdition,

            int? nodeStorageQuotaInMb,

            int? nodeVCores,

            string? pointInTimeUTC,

            string? postgresqlVersion,

            string? preferredPrimaryZone,

            ImmutableArray<Outputs.SimplePrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            ImmutableArray<string> readReplicas,

            ImmutableArray<Outputs.ServerNameItemResponse> serverNames,

            string? sourceLocation,

            string? sourceResourceId,

            string state,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdministratorLogin = administratorLogin;
            CitusVersion = citusVersion;
            CoordinatorEnablePublicIpAccess = coordinatorEnablePublicIpAccess;
            CoordinatorServerEdition = coordinatorServerEdition;
            CoordinatorStorageQuotaInMb = coordinatorStorageQuotaInMb;
            CoordinatorVCores = coordinatorVCores;
            EarliestRestoreTime = earliestRestoreTime;
            EnableHa = enableHa;
            EnableShardsOnCoordinator = enableShardsOnCoordinator;
            Id = id;
            Location = location;
            MaintenanceWindow = maintenanceWindow;
            Name = name;
            NodeCount = nodeCount;
            NodeEnablePublicIpAccess = nodeEnablePublicIpAccess;
            NodeServerEdition = nodeServerEdition;
            NodeStorageQuotaInMb = nodeStorageQuotaInMb;
            NodeVCores = nodeVCores;
            PointInTimeUTC = pointInTimeUTC;
            PostgresqlVersion = postgresqlVersion;
            PreferredPrimaryZone = preferredPrimaryZone;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            ReadReplicas = readReplicas;
            ServerNames = serverNames;
            SourceLocation = sourceLocation;
            SourceResourceId = sourceResourceId;
            State = state;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
