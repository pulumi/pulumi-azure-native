// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20230601Preview
{
    /// <summary>
    /// Represents a virtual endpoint for a server.
    /// </summary>
    [AzureNativeResourceType("azure-native:dbforpostgresql/v20230601preview:VirtualEndpoint")]
    public partial class VirtualEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The endpoint type for the virtual endpoint.
        /// </summary>
        [Output("endpointType")]
        public Output<string?> EndpointType { get; private set; } = null!;

        /// <summary>
        /// List of members for a virtual endpoint
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<string>> Members { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// List of virtual endpoints for a server
        /// </summary>
        [Output("virtualEndpoints")]
        public Output<ImmutableArray<string>> VirtualEndpoints { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualEndpoint(string name, VirtualEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20230601preview:VirtualEndpoint", name, args ?? new VirtualEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualEndpoint(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql/v20230601preview:VirtualEndpoint", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql:VirtualEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20231201preview:VirtualEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240301preview:VirtualEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240801:VirtualEndpoint" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20241101preview:VirtualEndpoint" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualEndpoint Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualEndpoint(name, id, options);
        }
    }

    public sealed class VirtualEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The endpoint type for the virtual endpoint.
        /// </summary>
        [Input("endpointType")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20230601Preview.VirtualEndpointType>? EndpointType { get; set; }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// List of members for a virtual endpoint
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual endpoint.
        /// </summary>
        [Input("virtualEndpointName")]
        public Input<string>? VirtualEndpointName { get; set; }

        public VirtualEndpointArgs()
        {
        }
        public static new VirtualEndpointArgs Empty => new VirtualEndpointArgs();
    }
}
