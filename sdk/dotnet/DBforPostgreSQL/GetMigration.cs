// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL
{
    public static class GetMigration
    {
        /// <summary>
        /// Gets information about a migration.
        /// 
        /// Uses Azure REST API version 2024-08-01.
        /// 
        /// Other available API versions: 2023-03-01-preview, 2023-06-01-preview, 2023-12-01-preview, 2024-03-01-preview, 2024-11-01-preview, 2025-01-01-preview, 2025-06-01-preview, 2025-08-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetMigrationResult> InvokeAsync(GetMigrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMigrationResult>("azure-native:dbforpostgresql:getMigration", args ?? new GetMigrationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a migration.
        /// 
        /// Uses Azure REST API version 2024-08-01.
        /// 
        /// Other available API versions: 2023-03-01-preview, 2023-06-01-preview, 2023-12-01-preview, 2024-03-01-preview, 2024-11-01-preview, 2025-01-01-preview, 2025-06-01-preview, 2025-08-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetMigrationResult> Invoke(GetMigrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMigrationResult>("azure-native:dbforpostgresql:getMigration", args ?? new GetMigrationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a migration.
        /// 
        /// Uses Azure REST API version 2024-08-01.
        /// 
        /// Other available API versions: 2023-03-01-preview, 2023-06-01-preview, 2023-12-01-preview, 2024-03-01-preview, 2024-11-01-preview, 2025-01-01-preview, 2025-06-01-preview, 2025-08-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetMigrationResult> Invoke(GetMigrationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMigrationResult>("azure-native:dbforpostgresql:getMigration", args ?? new GetMigrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMigrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public string MigrationName { get; set; } = null!;

        /// <summary>
        /// Name of resource group of target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Identifier of subscription of target database server.
        /// </summary>
        [Input("subscriptionId")]
        public string? SubscriptionId { get; set; }

        /// <summary>
        /// Name of target database server.
        /// </summary>
        [Input("targetDbServerName", required: true)]
        public string TargetDbServerName { get; set; } = null!;

        public GetMigrationArgs()
        {
        }
        public static new GetMigrationArgs Empty => new GetMigrationArgs();
    }

    public sealed class GetMigrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of migration.
        /// </summary>
        [Input("migrationName", required: true)]
        public Input<string> MigrationName { get; set; } = null!;

        /// <summary>
        /// Name of resource group of target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Identifier of subscription of target database server.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// Name of target database server.
        /// </summary>
        [Input("targetDbServerName", required: true)]
        public Input<string> TargetDbServerName { get; set; } = null!;

        public GetMigrationInvokeArgs()
        {
        }
        public static new GetMigrationInvokeArgs Empty => new GetMigrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMigrationResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Indicates if cancel must be triggered for the entire migration.
        /// </summary>
        public readonly string? Cancel;
        /// <summary>
        /// Current status of a migration.
        /// </summary>
        public readonly Outputs.MigrationStatusResponse CurrentStatus;
        /// <summary>
        /// When you want to trigger cancel for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        public readonly ImmutableArray<string> DbsToCancelMigrationOn;
        /// <summary>
        /// Names of databases to migrate.
        /// </summary>
        public readonly ImmutableArray<string> DbsToMigrate;
        /// <summary>
        /// When you want to trigger cutover for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        public readonly ImmutableArray<string> DbsToTriggerCutoverOn;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Indicates if roles and permissions must be migrated.
        /// </summary>
        public readonly string? MigrateRoles;
        /// <summary>
        /// Identifier of a migration.
        /// </summary>
        public readonly string MigrationId;
        /// <summary>
        /// Identifier of the private endpoint migration instance.
        /// </summary>
        public readonly string? MigrationInstanceResourceId;
        /// <summary>
        /// Mode used to perform the migration: Online or Offline.
        /// </summary>
        public readonly string? MigrationMode;
        /// <summary>
        /// Supported option for a migration.
        /// </summary>
        public readonly string? MigrationOption;
        /// <summary>
        /// End time (UTC) for migration window.
        /// </summary>
        public readonly string? MigrationWindowEndTimeInUtc;
        /// <summary>
        /// Start time (UTC) for migration window.
        /// </summary>
        public readonly string? MigrationWindowStartTimeInUtc;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration workflow detects that the database already exists on the target server, it will wait for a confirmation.
        /// </summary>
        public readonly string? OverwriteDbsInTarget;
        /// <summary>
        /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed.
        /// </summary>
        public readonly string? SetupLogicalReplicationOnSourceDbIfNeeded;
        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the source server. This property is optional. When provided, the migration service will always use it to connect to the source server.
        /// </summary>
        public readonly string? SourceDbServerFullyQualifiedDomainName;
        /// <summary>
        /// Metadata of source database server.
        /// </summary>
        public readonly Outputs.DbServerMetadataResponse SourceDbServerMetadata;
        /// <summary>
        /// Identifier of the source database server resource, when 'sourceType' is 'PostgreSQLSingleServer'. For other source types this must be set to ipaddress:port@username or hostname:port@username.
        /// </summary>
        public readonly string? SourceDbServerResourceId;
        /// <summary>
        /// Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL, GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer, or Supabase_PostgreSQL
        /// </summary>
        public readonly string? SourceType;
        /// <summary>
        /// SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode for other source types is 'Prefer'.
        /// </summary>
        public readonly string? SslMode;
        /// <summary>
        /// Indicates if data migration must start right away.
        /// </summary>
        public readonly string? StartDataMigration;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the target server. This property is optional. When provided, the migration service will always use it to connect to the target server.
        /// </summary>
        public readonly string? TargetDbServerFullyQualifiedDomainName;
        /// <summary>
        /// Metadata of target database server.
        /// </summary>
        public readonly Outputs.DbServerMetadataResponse TargetDbServerMetadata;
        /// <summary>
        /// Identifier of the target database server resource.
        /// </summary>
        public readonly string TargetDbServerResourceId;
        /// <summary>
        /// Indicates if cutover must be triggered for the entire migration.
        /// </summary>
        public readonly string? TriggerCutover;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMigrationResult(
            string azureApiVersion,

            string? cancel,

            Outputs.MigrationStatusResponse currentStatus,

            ImmutableArray<string> dbsToCancelMigrationOn,

            ImmutableArray<string> dbsToMigrate,

            ImmutableArray<string> dbsToTriggerCutoverOn,

            string id,

            string location,

            string? migrateRoles,

            string migrationId,

            string? migrationInstanceResourceId,

            string? migrationMode,

            string? migrationOption,

            string? migrationWindowEndTimeInUtc,

            string? migrationWindowStartTimeInUtc,

            string name,

            string? overwriteDbsInTarget,

            string? setupLogicalReplicationOnSourceDbIfNeeded,

            string? sourceDbServerFullyQualifiedDomainName,

            Outputs.DbServerMetadataResponse sourceDbServerMetadata,

            string? sourceDbServerResourceId,

            string? sourceType,

            string? sslMode,

            string? startDataMigration,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? targetDbServerFullyQualifiedDomainName,

            Outputs.DbServerMetadataResponse targetDbServerMetadata,

            string targetDbServerResourceId,

            string? triggerCutover,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            Cancel = cancel;
            CurrentStatus = currentStatus;
            DbsToCancelMigrationOn = dbsToCancelMigrationOn;
            DbsToMigrate = dbsToMigrate;
            DbsToTriggerCutoverOn = dbsToTriggerCutoverOn;
            Id = id;
            Location = location;
            MigrateRoles = migrateRoles;
            MigrationId = migrationId;
            MigrationInstanceResourceId = migrationInstanceResourceId;
            MigrationMode = migrationMode;
            MigrationOption = migrationOption;
            MigrationWindowEndTimeInUtc = migrationWindowEndTimeInUtc;
            MigrationWindowStartTimeInUtc = migrationWindowStartTimeInUtc;
            Name = name;
            OverwriteDbsInTarget = overwriteDbsInTarget;
            SetupLogicalReplicationOnSourceDbIfNeeded = setupLogicalReplicationOnSourceDbIfNeeded;
            SourceDbServerFullyQualifiedDomainName = sourceDbServerFullyQualifiedDomainName;
            SourceDbServerMetadata = sourceDbServerMetadata;
            SourceDbServerResourceId = sourceDbServerResourceId;
            SourceType = sourceType;
            SslMode = sslMode;
            StartDataMigration = startDataMigration;
            SystemData = systemData;
            Tags = tags;
            TargetDbServerFullyQualifiedDomainName = targetDbServerFullyQualifiedDomainName;
            TargetDbServerMetadata = targetDbServerMetadata;
            TargetDbServerResourceId = targetDbServerResourceId;
            TriggerCutover = triggerCutover;
            Type = type;
        }
    }
}
