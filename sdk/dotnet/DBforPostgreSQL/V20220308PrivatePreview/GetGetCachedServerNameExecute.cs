// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL.V20220308PrivatePreview
{
    public static class GetGetCachedServerNameExecute
    {
        /// <summary>
        /// Get available cached server name for fast provisioning
        /// </summary>
        public static Task<GetGetCachedServerNameExecuteResult> InvokeAsync(GetGetCachedServerNameExecuteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGetCachedServerNameExecuteResult>("azure-native:dbforpostgresql/v20220308privatepreview:getGetCachedServerNameExecute", args ?? new GetGetCachedServerNameExecuteArgs(), options.WithDefaults());

        /// <summary>
        /// Get available cached server name for fast provisioning
        /// </summary>
        public static Output<GetGetCachedServerNameExecuteResult> Invoke(GetGetCachedServerNameExecuteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGetCachedServerNameExecuteResult>("azure-native:dbforpostgresql/v20220308privatepreview:getGetCachedServerNameExecute", args ?? new GetGetCachedServerNameExecuteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGetCachedServerNameExecuteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the location.
        /// </summary>
        [Input("locationName", required: true)]
        public string LocationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU (pricing tier) of the server.
        /// </summary>
        [Input("sku", required: true)]
        public Inputs.Sku Sku { get; set; } = null!;

        /// <summary>
        /// Storage properties of a server.
        /// </summary>
        [Input("storage", required: true)]
        public Inputs.Storage Storage { get; set; } = null!;

        /// <summary>
        /// PostgreSQL Server version.
        /// </summary>
        [Input("version", required: true)]
        public Union<string, Pulumi.AzureNative.DBforPostgreSQL.V20220308PrivatePreview.ServerVersion> Version { get; set; } = null!;

        public GetGetCachedServerNameExecuteArgs()
        {
        }
        public static new GetGetCachedServerNameExecuteArgs Empty => new GetGetCachedServerNameExecuteArgs();
    }

    public sealed class GetGetCachedServerNameExecuteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the location.
        /// </summary>
        [Input("locationName", required: true)]
        public Input<string> LocationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU (pricing tier) of the server.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.SkuArgs> Sku { get; set; } = null!;

        /// <summary>
        /// Storage properties of a server.
        /// </summary>
        [Input("storage", required: true)]
        public Input<Inputs.StorageArgs> Storage { get; set; } = null!;

        /// <summary>
        /// PostgreSQL Server version.
        /// </summary>
        [Input("version", required: true)]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.V20220308PrivatePreview.ServerVersion> Version { get; set; } = null!;

        public GetGetCachedServerNameExecuteInvokeArgs()
        {
        }
        public static new GetGetCachedServerNameExecuteInvokeArgs Empty => new GetGetCachedServerNameExecuteInvokeArgs();
    }


    [OutputType]
    public sealed class GetGetCachedServerNameExecuteResult
    {
        /// <summary>
        /// The name of available cached server
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetGetCachedServerNameExecuteResult(string name)
        {
            Name = name;
        }
    }
}
