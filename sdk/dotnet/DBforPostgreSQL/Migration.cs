// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforPostgreSQL
{
    /// <summary>
    /// Migration.
    /// 
    /// Uses Azure REST API version 2024-08-01. In version 2.x of the Azure Native provider, it used API version 2023-03-01-preview.
    /// 
    /// Other available API versions: 2023-03-01-preview, 2023-06-01-preview, 2023-12-01-preview, 2024-03-01-preview, 2024-11-01-preview, 2025-01-01-preview, 2025-06-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:dbforpostgresql:Migration")]
    public partial class Migration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Indicates if cancel must be triggered for the entire migration.
        /// </summary>
        [Output("cancel")]
        public Output<string?> Cancel { get; private set; } = null!;

        /// <summary>
        /// Current status of a migration.
        /// </summary>
        [Output("currentStatus")]
        public Output<Outputs.MigrationStatusResponse> CurrentStatus { get; private set; } = null!;

        /// <summary>
        /// When you want to trigger cancel for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        [Output("dbsToCancelMigrationOn")]
        public Output<ImmutableArray<string>> DbsToCancelMigrationOn { get; private set; } = null!;

        /// <summary>
        /// Names of databases to migrate.
        /// </summary>
        [Output("dbsToMigrate")]
        public Output<ImmutableArray<string>> DbsToMigrate { get; private set; } = null!;

        /// <summary>
        /// When you want to trigger cutover for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        [Output("dbsToTriggerCutoverOn")]
        public Output<ImmutableArray<string>> DbsToTriggerCutoverOn { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Indicates if roles and permissions must be migrated.
        /// </summary>
        [Output("migrateRoles")]
        public Output<string?> MigrateRoles { get; private set; } = null!;

        /// <summary>
        /// Identifier of a migration.
        /// </summary>
        [Output("migrationId")]
        public Output<string> MigrationId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the private endpoint migration instance.
        /// </summary>
        [Output("migrationInstanceResourceId")]
        public Output<string?> MigrationInstanceResourceId { get; private set; } = null!;

        /// <summary>
        /// Mode used to perform the migration: Online or Offline.
        /// </summary>
        [Output("migrationMode")]
        public Output<string?> MigrationMode { get; private set; } = null!;

        /// <summary>
        /// Supported option for a migration.
        /// </summary>
        [Output("migrationOption")]
        public Output<string?> MigrationOption { get; private set; } = null!;

        /// <summary>
        /// End time (UTC) for migration window.
        /// </summary>
        [Output("migrationWindowEndTimeInUtc")]
        public Output<string?> MigrationWindowEndTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// Start time (UTC) for migration window.
        /// </summary>
        [Output("migrationWindowStartTimeInUtc")]
        public Output<string?> MigrationWindowStartTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration workflow detects that the database already exists on the target server, it will wait for a confirmation.
        /// </summary>
        [Output("overwriteDbsInTarget")]
        public Output<string?> OverwriteDbsInTarget { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed.
        /// </summary>
        [Output("setupLogicalReplicationOnSourceDbIfNeeded")]
        public Output<string?> SetupLogicalReplicationOnSourceDbIfNeeded { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the source server. This property is optional. When provided, the migration service will always use it to connect to the source server.
        /// </summary>
        [Output("sourceDbServerFullyQualifiedDomainName")]
        public Output<string?> SourceDbServerFullyQualifiedDomainName { get; private set; } = null!;

        /// <summary>
        /// Metadata of source database server.
        /// </summary>
        [Output("sourceDbServerMetadata")]
        public Output<Outputs.DbServerMetadataResponse> SourceDbServerMetadata { get; private set; } = null!;

        /// <summary>
        /// Identifier of the source database server resource, when 'sourceType' is 'PostgreSQLSingleServer'. For other source types this must be set to ipaddress:port@username or hostname:port@username.
        /// </summary>
        [Output("sourceDbServerResourceId")]
        public Output<string?> SourceDbServerResourceId { get; private set; } = null!;

        /// <summary>
        /// Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL, GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer, or Supabase_PostgreSQL
        /// </summary>
        [Output("sourceType")]
        public Output<string?> SourceType { get; private set; } = null!;

        /// <summary>
        /// SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode for other source types is 'Prefer'.
        /// </summary>
        [Output("sslMode")]
        public Output<string?> SslMode { get; private set; } = null!;

        /// <summary>
        /// Indicates if data migration must start right away.
        /// </summary>
        [Output("startDataMigration")]
        public Output<string?> StartDataMigration { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the target server. This property is optional. When provided, the migration service will always use it to connect to the target server.
        /// </summary>
        [Output("targetDbServerFullyQualifiedDomainName")]
        public Output<string?> TargetDbServerFullyQualifiedDomainName { get; private set; } = null!;

        /// <summary>
        /// Metadata of target database server.
        /// </summary>
        [Output("targetDbServerMetadata")]
        public Output<Outputs.DbServerMetadataResponse> TargetDbServerMetadata { get; private set; } = null!;

        /// <summary>
        /// Identifier of the target database server resource.
        /// </summary>
        [Output("targetDbServerResourceId")]
        public Output<string> TargetDbServerResourceId { get; private set; } = null!;

        /// <summary>
        /// Indicates if cutover must be triggered for the entire migration.
        /// </summary>
        [Output("triggerCutover")]
        public Output<string?> TriggerCutover { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Migration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Migration(string name, MigrationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql:Migration", name, args ?? new MigrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Migration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:dbforpostgresql:Migration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20210615privatepreview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20220501preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20230301preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20230601preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20231201preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240301preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20240801:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20241101preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20250101preview:Migration" },
                    new global::Pulumi.Alias { Type = "azure-native:dbforpostgresql/v20250601preview:Migration" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Migration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Migration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Migration(name, id, options);
        }
    }

    public sealed class MigrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if cancel must be triggered for the entire migration.
        /// </summary>
        [Input("cancel")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.CancelEnum>? Cancel { get; set; }

        [Input("dbsToCancelMigrationOn")]
        private InputList<string>? _dbsToCancelMigrationOn;

        /// <summary>
        /// When you want to trigger cancel for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        public InputList<string> DbsToCancelMigrationOn
        {
            get => _dbsToCancelMigrationOn ?? (_dbsToCancelMigrationOn = new InputList<string>());
            set => _dbsToCancelMigrationOn = value;
        }

        [Input("dbsToMigrate")]
        private InputList<string>? _dbsToMigrate;

        /// <summary>
        /// Names of databases to migrate.
        /// </summary>
        public InputList<string> DbsToMigrate
        {
            get => _dbsToMigrate ?? (_dbsToMigrate = new InputList<string>());
            set => _dbsToMigrate = value;
        }

        [Input("dbsToTriggerCutoverOn")]
        private InputList<string>? _dbsToTriggerCutoverOn;

        /// <summary>
        /// When you want to trigger cutover for specific databases set 'triggerCutover' to 'True' and the names of the specific databases in this array.
        /// </summary>
        public InputList<string> DbsToTriggerCutoverOn
        {
            get => _dbsToTriggerCutoverOn ?? (_dbsToTriggerCutoverOn = new InputList<string>());
            set => _dbsToTriggerCutoverOn = value;
        }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Indicates if roles and permissions must be migrated.
        /// </summary>
        [Input("migrateRoles")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.MigrateRolesEnum>? MigrateRoles { get; set; }

        /// <summary>
        /// Identifier of the private endpoint migration instance.
        /// </summary>
        [Input("migrationInstanceResourceId")]
        public Input<string>? MigrationInstanceResourceId { get; set; }

        /// <summary>
        /// Mode used to perform the migration: Online or Offline.
        /// </summary>
        [Input("migrationMode")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.MigrationMode>? MigrationMode { get; set; }

        /// <summary>
        /// Name of migration.
        /// </summary>
        [Input("migrationName")]
        public Input<string>? MigrationName { get; set; }

        /// <summary>
        /// Supported option for a migration.
        /// </summary>
        [Input("migrationOption")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.MigrationOption>? MigrationOption { get; set; }

        /// <summary>
        /// End time (UTC) for migration window.
        /// </summary>
        [Input("migrationWindowEndTimeInUtc")]
        public Input<string>? MigrationWindowEndTimeInUtc { get; set; }

        /// <summary>
        /// Start time (UTC) for migration window.
        /// </summary>
        [Input("migrationWindowStartTimeInUtc")]
        public Input<string>? MigrationWindowStartTimeInUtc { get; set; }

        /// <summary>
        /// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration workflow detects that the database already exists on the target server, it will wait for a confirmation.
        /// </summary>
        [Input("overwriteDbsInTarget")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.OverwriteDbsInTargetEnum>? OverwriteDbsInTarget { get; set; }

        /// <summary>
        /// Name of resource group of target database server.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Migration secret parameters.
        /// </summary>
        [Input("secretParameters")]
        public Input<Inputs.MigrationSecretParametersArgs>? SecretParameters { get; set; }

        /// <summary>
        /// Indicates whether to setup LogicalReplicationOnSourceDb, if needed.
        /// </summary>
        [Input("setupLogicalReplicationOnSourceDbIfNeeded")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.LogicalReplicationOnSourceDbEnum>? SetupLogicalReplicationOnSourceDbIfNeeded { get; set; }

        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the source server. This property is optional. When provided, the migration service will always use it to connect to the source server.
        /// </summary>
        [Input("sourceDbServerFullyQualifiedDomainName")]
        public Input<string>? SourceDbServerFullyQualifiedDomainName { get; set; }

        /// <summary>
        /// Identifier of the source database server resource, when 'sourceType' is 'PostgreSQLSingleServer'. For other source types this must be set to ipaddress:port@username or hostname:port@username.
        /// </summary>
        [Input("sourceDbServerResourceId")]
        public Input<string>? SourceDbServerResourceId { get; set; }

        /// <summary>
        /// Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL, Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL, GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer, or Supabase_PostgreSQL
        /// </summary>
        [Input("sourceType")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.SourceType>? SourceType { get; set; }

        /// <summary>
        /// SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode for other source types is 'Prefer'.
        /// </summary>
        [Input("sslMode")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.SslMode>? SslMode { get; set; }

        /// <summary>
        /// Indicates if data migration must start right away.
        /// </summary>
        [Input("startDataMigration")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.StartDataMigrationEnum>? StartDataMigration { get; set; }

        /// <summary>
        /// Identifier of subscription of target database server.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Fully qualified domain name (FQDN) or IP address of the target server. This property is optional. When provided, the migration service will always use it to connect to the target server.
        /// </summary>
        [Input("targetDbServerFullyQualifiedDomainName")]
        public Input<string>? TargetDbServerFullyQualifiedDomainName { get; set; }

        /// <summary>
        /// Name of target database server.
        /// </summary>
        [Input("targetDbServerName", required: true)]
        public Input<string> TargetDbServerName { get; set; } = null!;

        /// <summary>
        /// Indicates if cutover must be triggered for the entire migration.
        /// </summary>
        [Input("triggerCutover")]
        public InputUnion<string, Pulumi.AzureNative.DBforPostgreSQL.TriggerCutoverEnum>? TriggerCutover { get; set; }

        public MigrationArgs()
        {
        }
        public static new MigrationArgs Empty => new MigrationArgs();
    }
}
