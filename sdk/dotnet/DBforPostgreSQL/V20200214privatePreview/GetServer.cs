// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.DBForPostgreSql.V20200214privatePreview
{
    public static class GetServer
    {
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("azurerm:dbforpostgresql/v20200214privatepreview:getServer", args ?? new GetServerArgs(), options.WithVersion());
    }


    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
        /// </summary>
        public readonly string? AdministratorLogin;
        /// <summary>
        /// The administrator login password (required for server creation).
        /// </summary>
        public readonly string? AdministratorLoginPassword;
        /// <summary>
        /// availability Zone information of the server.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The mode to create a new PostgreSQL server.
        /// </summary>
        public readonly string? CreateMode;
        /// <summary>
        /// The display name of a server.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The fully qualified domain name of a server.
        /// </summary>
        public readonly string FullyQualifiedDomainName;
        /// <summary>
        /// A state of a HA server that is visible to user.
        /// </summary>
        public readonly string HaState;
        /// <summary>
        /// The Azure Active Directory identity of the server.
        /// </summary>
        public readonly Outputs.IdentityResponseResult? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Restore point creation time (ISO8601 format), specifying the time to restore from.
        /// </summary>
        public readonly string? PointInTimeUTC;
        /// <summary>
        /// public network access is enabled or not
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The SKU (pricing tier) of the server.
        /// </summary>
        public readonly Outputs.SkuResponseResult? Sku;
        /// <summary>
        /// The source PostgreSQL server name to restore from.
        /// </summary>
        public readonly string? SourceServerName;
        /// <summary>
        /// stand by count value can be either 0 or 1
        /// </summary>
        public readonly int? StandbyCount;
        /// <summary>
        /// A state of a server that is visible to user.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Storage profile of a server.
        /// </summary>
        public readonly Outputs.StorageProfileResponseResult? StorageProfile;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// PostgreSQL Server version.
        /// </summary>
        public readonly string? Version;
        public readonly Outputs.ServerPropertiesResponseVnetInjArgsResult? VnetInjArgs;

        [OutputConstructor]
        private GetServerResult(
            string? administratorLogin,

            string? administratorLoginPassword,

            string? availabilityZone,

            string? createMode,

            string? displayName,

            string fullyQualifiedDomainName,

            string haState,

            Outputs.IdentityResponseResult? identity,

            string location,

            string name,

            string? pointInTimeUTC,

            string? publicNetworkAccess,

            Outputs.SkuResponseResult? sku,

            string? sourceServerName,

            int? standbyCount,

            string state,

            Outputs.StorageProfileResponseResult? storageProfile,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? version,

            Outputs.ServerPropertiesResponseVnetInjArgsResult? vnetInjArgs)
        {
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            AvailabilityZone = availabilityZone;
            CreateMode = createMode;
            DisplayName = displayName;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            HaState = haState;
            Identity = identity;
            Location = location;
            Name = name;
            PointInTimeUTC = pointInTimeUTC;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SourceServerName = sourceServerName;
            StandbyCount = standbyCount;
            State = state;
            StorageProfile = storageProfile;
            Tags = tags;
            Type = type;
            Version = version;
            VnetInjArgs = vnetInjArgs;
        }
    }
}
