// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CloudHealth.Inputs
{

    /// <summary>
    /// Properties which are common across all kinds of entities
    /// </summary>
    public sealed class EntityPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alert configuration for this entity
        /// </summary>
        [Input("alerts")]
        public Input<Inputs.EntityAlertsArgs>? Alerts { get; set; }

        /// <summary>
        /// Positioning of the entity on the model canvas
        /// </summary>
        [Input("canvasPosition")]
        public Input<Inputs.EntityCoordinatesArgs>? CanvasPosition { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Health objective as a percentage of time the entity should be healthy.
        /// </summary>
        [Input("healthObjective")]
        public Input<double>? HealthObjective { get; set; }

        /// <summary>
        /// Visual icon definition. If not set, a default icon is used.
        /// </summary>
        [Input("icon")]
        public Input<Inputs.IconDefinitionArgs>? Icon { get; set; }

        /// <summary>
        /// Impact of the entity in health state propagation
        /// </summary>
        [Input("impact")]
        public InputUnion<string, Pulumi.AzureNative.CloudHealth.EntityImpact>? Impact { get; set; }

        /// <summary>
        /// Entity kind
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Optional set of labels (key-value pairs)
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Signal groups which are assigned to this entity
        /// </summary>
        [Input("signals")]
        public Input<Inputs.SignalGroupArgs>? Signals { get; set; }

        public EntityPropertiesArgs()
        {
            Impact = "Standard";
            Kind = "Default";
        }
        public static new EntityPropertiesArgs Empty => new EntityPropertiesArgs();
    }
}
