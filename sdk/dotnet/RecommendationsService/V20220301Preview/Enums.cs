// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RecommendationsService.V20220301Preview
{
    /// <summary>
    /// Account configuration. This can only be set at RecommendationsService Account creation.
    /// </summary>
    [EnumType]
    public readonly struct AccountConfiguration : IEquatable<AccountConfiguration>
    {
        private readonly string _value;

        private AccountConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccountConfiguration Free { get; } = new AccountConfiguration("Free");
        public static AccountConfiguration Capacity { get; } = new AccountConfiguration("Capacity");

        public static bool operator ==(AccountConfiguration left, AccountConfiguration right) => left.Equals(right);
        public static bool operator !=(AccountConfiguration left, AccountConfiguration right) => !left.Equals(right);

        public static explicit operator string(AccountConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccountConfiguration other && Equals(other);
        public bool Equals(AccountConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
    /// </summary>
    [EnumType]
    public readonly struct ModelingFeatures : IEquatable<ModelingFeatures>
    {
        private readonly string _value;

        private ModelingFeatures(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelingFeatures Basic { get; } = new ModelingFeatures("Basic");
        public static ModelingFeatures Standard { get; } = new ModelingFeatures("Standard");
        public static ModelingFeatures Premium { get; } = new ModelingFeatures("Premium");

        public static bool operator ==(ModelingFeatures left, ModelingFeatures right) => left.Equals(right);
        public static bool operator !=(ModelingFeatures left, ModelingFeatures right) => !left.Equals(right);

        public static explicit operator string(ModelingFeatures value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelingFeatures other && Equals(other);
        public bool Equals(ModelingFeatures other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Modeling frequency controls the modeling compute frequency.
    /// </summary>
    [EnumType]
    public readonly struct ModelingFrequency : IEquatable<ModelingFrequency>
    {
        private readonly string _value;

        private ModelingFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelingFrequency Low { get; } = new ModelingFrequency("Low");
        public static ModelingFrequency Medium { get; } = new ModelingFrequency("Medium");
        public static ModelingFrequency High { get; } = new ModelingFrequency("High");

        public static bool operator ==(ModelingFrequency left, ModelingFrequency right) => left.Equals(right);
        public static bool operator !=(ModelingFrequency left, ModelingFrequency right) => !left.Equals(right);

        public static explicit operator string(ModelingFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelingFrequency other && Equals(other);
        public bool Equals(ModelingFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Modeling size controls the maximum supported input data size.
    /// </summary>
    [EnumType]
    public readonly struct ModelingSize : IEquatable<ModelingSize>
    {
        private readonly string _value;

        private ModelingSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelingSize Small { get; } = new ModelingSize("Small");
        public static ModelingSize Medium { get; } = new ModelingSize("Medium");
        public static ModelingSize Large { get; } = new ModelingSize("Large");

        public static bool operator ==(ModelingSize left, ModelingSize right) => left.Equals(right);
        public static bool operator !=(ModelingSize left, ModelingSize right) => !left.Equals(right);

        public static explicit operator string(ModelingSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelingSize other && Equals(other);
        public bool Equals(ModelingSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AAD principal type.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalType Application { get; } = new PrincipalType("Application");
        public static PrincipalType User { get; } = new PrincipalType("User");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
