// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.KeyVault.V20150601
{
    [EnumType]
    public readonly struct CertificatePermissions : IEquatable<CertificatePermissions>
    {
        private readonly string _value;

        private CertificatePermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificatePermissions All { get; } = new CertificatePermissions("all");
        public static CertificatePermissions @Get { get; } = new CertificatePermissions("get");
        public static CertificatePermissions List { get; } = new CertificatePermissions("list");
        public static CertificatePermissions Delete { get; } = new CertificatePermissions("delete");
        public static CertificatePermissions Create { get; } = new CertificatePermissions("create");
        public static CertificatePermissions Import { get; } = new CertificatePermissions("import");
        public static CertificatePermissions Update { get; } = new CertificatePermissions("update");
        public static CertificatePermissions Managecontacts { get; } = new CertificatePermissions("managecontacts");
        public static CertificatePermissions Getissuers { get; } = new CertificatePermissions("getissuers");
        public static CertificatePermissions Listissuers { get; } = new CertificatePermissions("listissuers");
        public static CertificatePermissions Setissuers { get; } = new CertificatePermissions("setissuers");
        public static CertificatePermissions Deleteissuers { get; } = new CertificatePermissions("deleteissuers");
        public static CertificatePermissions Manageissuers { get; } = new CertificatePermissions("manageissuers");
        public static CertificatePermissions Recover { get; } = new CertificatePermissions("recover");
        public static CertificatePermissions Purge { get; } = new CertificatePermissions("purge");

        public static bool operator ==(CertificatePermissions left, CertificatePermissions right) => left.Equals(right);
        public static bool operator !=(CertificatePermissions left, CertificatePermissions right) => !left.Equals(right);

        public static explicit operator string(CertificatePermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificatePermissions other && Equals(other);
        public bool Equals(CertificatePermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KeyPermissions : IEquatable<KeyPermissions>
    {
        private readonly string _value;

        private KeyPermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyPermissions All { get; } = new KeyPermissions("all");
        public static KeyPermissions Encrypt { get; } = new KeyPermissions("encrypt");
        public static KeyPermissions Decrypt { get; } = new KeyPermissions("decrypt");
        public static KeyPermissions WrapKey { get; } = new KeyPermissions("wrapKey");
        public static KeyPermissions UnwrapKey { get; } = new KeyPermissions("unwrapKey");
        public static KeyPermissions Sign { get; } = new KeyPermissions("sign");
        public static KeyPermissions Verify { get; } = new KeyPermissions("verify");
        public static KeyPermissions @Get { get; } = new KeyPermissions("get");
        public static KeyPermissions List { get; } = new KeyPermissions("list");
        public static KeyPermissions Create { get; } = new KeyPermissions("create");
        public static KeyPermissions Update { get; } = new KeyPermissions("update");
        public static KeyPermissions Import { get; } = new KeyPermissions("import");
        public static KeyPermissions Delete { get; } = new KeyPermissions("delete");
        public static KeyPermissions Backup { get; } = new KeyPermissions("backup");
        public static KeyPermissions Restore { get; } = new KeyPermissions("restore");
        public static KeyPermissions Recover { get; } = new KeyPermissions("recover");
        public static KeyPermissions Purge { get; } = new KeyPermissions("purge");

        public static bool operator ==(KeyPermissions left, KeyPermissions right) => left.Equals(right);
        public static bool operator !=(KeyPermissions left, KeyPermissions right) => !left.Equals(right);

        public static explicit operator string(KeyPermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyPermissions other && Equals(other);
        public bool Equals(KeyPermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SecretPermissions : IEquatable<SecretPermissions>
    {
        private readonly string _value;

        private SecretPermissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecretPermissions All { get; } = new SecretPermissions("all");
        public static SecretPermissions @Get { get; } = new SecretPermissions("get");
        public static SecretPermissions List { get; } = new SecretPermissions("list");
        public static SecretPermissions @Set { get; } = new SecretPermissions("set");
        public static SecretPermissions Delete { get; } = new SecretPermissions("delete");
        public static SecretPermissions Backup { get; } = new SecretPermissions("backup");
        public static SecretPermissions Restore { get; } = new SecretPermissions("restore");
        public static SecretPermissions Recover { get; } = new SecretPermissions("recover");
        public static SecretPermissions Purge { get; } = new SecretPermissions("purge");

        public static bool operator ==(SecretPermissions left, SecretPermissions right) => left.Equals(right);
        public static bool operator !=(SecretPermissions left, SecretPermissions right) => !left.Equals(right);

        public static explicit operator string(SecretPermissions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecretPermissions other && Equals(other);
        public bool Equals(SecretPermissions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU family name
    /// </summary>
    [EnumType]
    public readonly struct SkuFamily : IEquatable<SkuFamily>
    {
        private readonly string _value;

        private SkuFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuFamily A { get; } = new SkuFamily("A");

        public static bool operator ==(SkuFamily left, SkuFamily right) => left.Equals(right);
        public static bool operator !=(SkuFamily left, SkuFamily right) => !left.Equals(right);

        public static explicit operator string(SkuFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuFamily other && Equals(other);
        public bool Equals(SkuFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU name to specify whether the key vault is a standard vault or a premium vault.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard { get; } = new SkuName("standard");
        public static SkuName Premium { get; } = new SkuName("premium");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
