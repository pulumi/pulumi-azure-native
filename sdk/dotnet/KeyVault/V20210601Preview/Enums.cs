// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.KeyVault.V20210601Preview
{
    /// <summary>
    /// A message indicating if changes on the service provider require any updates on the consumer.
    /// </summary>
    [EnumType]
    public readonly struct ActionsRequired : IEquatable<ActionsRequired>
    {
        private readonly string _value;

        private ActionsRequired(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionsRequired None { get; } = new ActionsRequired("None");

        public static bool operator ==(ActionsRequired left, ActionsRequired right) => left.Equals(right);
        public static bool operator !=(ActionsRequired left, ActionsRequired right) => !left.Equals(right);

        public static explicit operator string(ActionsRequired value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionsRequired other && Equals(other);
        public bool Equals(ActionsRequired other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Recover the managed HSM pool from a soft-deleted resource.
        /// </summary>
        public static CreateMode Recover { get; } = new CreateMode("recover");
        /// <summary>
        /// Create a new managed HSM pool. This is the default option.
        /// </summary>
        public static CreateMode @Default { get; } = new CreateMode("default");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU Family of the managed HSM Pool
    /// </summary>
    [EnumType]
    public readonly struct ManagedHsmSkuFamily : IEquatable<ManagedHsmSkuFamily>
    {
        private readonly string _value;

        private ManagedHsmSkuFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedHsmSkuFamily B { get; } = new ManagedHsmSkuFamily("B");

        public static bool operator ==(ManagedHsmSkuFamily left, ManagedHsmSkuFamily right) => left.Equals(right);
        public static bool operator !=(ManagedHsmSkuFamily left, ManagedHsmSkuFamily right) => !left.Equals(right);

        public static explicit operator string(ManagedHsmSkuFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedHsmSkuFamily other && Equals(other);
        public bool Equals(ManagedHsmSkuFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU of the managed HSM Pool
    /// </summary>
    [EnumType]
    public readonly struct ManagedHsmSkuName : IEquatable<ManagedHsmSkuName>
    {
        private readonly string _value;

        private ManagedHsmSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedHsmSkuName Standard_B1 { get; } = new ManagedHsmSkuName("Standard_B1");
        public static ManagedHsmSkuName Custom_B32 { get; } = new ManagedHsmSkuName("Custom_B32");
        public static ManagedHsmSkuName Custom_B6 { get; } = new ManagedHsmSkuName("Custom_B6");

        public static bool operator ==(ManagedHsmSkuName left, ManagedHsmSkuName right) => left.Equals(right);
        public static bool operator !=(ManagedHsmSkuName left, ManagedHsmSkuName right) => !left.Equals(right);

        public static explicit operator string(ManagedHsmSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedHsmSkuName other && Equals(other);
        public bool Equals(ManagedHsmSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
    /// </summary>
    [EnumType]
    public readonly struct NetworkRuleAction : IEquatable<NetworkRuleAction>
    {
        private readonly string _value;

        private NetworkRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkRuleAction Allow { get; } = new NetworkRuleAction("Allow");
        public static NetworkRuleAction Deny { get; } = new NetworkRuleAction("Deny");

        public static bool operator ==(NetworkRuleAction left, NetworkRuleAction right) => left.Equals(right);
        public static bool operator !=(NetworkRuleAction left, NetworkRuleAction right) => !left.Equals(right);

        public static explicit operator string(NetworkRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkRuleAction other && Equals(other);
        public bool Equals(NetworkRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.
    /// </summary>
    [EnumType]
    public readonly struct NetworkRuleBypassOptions : IEquatable<NetworkRuleBypassOptions>
    {
        private readonly string _value;

        private NetworkRuleBypassOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkRuleBypassOptions AzureServices { get; } = new NetworkRuleBypassOptions("AzureServices");
        public static NetworkRuleBypassOptions None { get; } = new NetworkRuleBypassOptions("None");

        public static bool operator ==(NetworkRuleBypassOptions left, NetworkRuleBypassOptions right) => left.Equals(right);
        public static bool operator !=(NetworkRuleBypassOptions left, NetworkRuleBypassOptions right) => !left.Equals(right);

        public static explicit operator string(NetworkRuleBypassOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkRuleBypassOptions other && Equals(other);
        public bool Equals(NetworkRuleBypassOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been approved, rejected or removed by the key vault owner.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");
        public static PrivateEndpointServiceConnectionStatus Disconnected { get; } = new PrivateEndpointServiceConnectionStatus("Disconnected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Control permission to the managed HSM from public networks.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
