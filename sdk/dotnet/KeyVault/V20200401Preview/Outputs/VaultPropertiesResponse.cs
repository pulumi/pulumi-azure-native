// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.KeyVault.V20200401Preview.Outputs
{

    [OutputType]
    public sealed class VaultPropertiesResponse
    {
        /// <summary>
        /// An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not required. Otherwise, access policies are required.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessPolicyEntryResponse> AccessPolicies;
        /// <summary>
        /// The vault's create mode to indicate whether the vault need to be recovered or not.
        /// </summary>
        public readonly string? CreateMode;
        /// <summary>
        /// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
        /// </summary>
        public readonly bool? EnablePurgeProtection;
        /// <summary>
        /// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC.
        /// </summary>
        public readonly bool? EnableRbacAuthorization;
        /// <summary>
        /// Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
        /// </summary>
        public readonly bool? EnableSoftDelete;
        /// <summary>
        /// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
        /// </summary>
        public readonly bool? EnabledForDeployment;
        /// <summary>
        /// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        public readonly bool? EnabledForDiskEncryption;
        /// <summary>
        /// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        public readonly bool? EnabledForTemplateDeployment;
        /// <summary>
        /// Rules governing the accessibility of the key vault from specific network locations.
        /// </summary>
        public readonly Outputs.NetworkRuleSetResponse? NetworkAcls;
        /// <summary>
        /// List of private endpoint connections associated with the key vault.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionItemResponse> PrivateEndpointConnections;
        /// <summary>
        /// SKU details
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// softDelete data retention days. It accepts &gt;=7 and &lt;=90.
        /// </summary>
        public readonly int? SoftDeleteRetentionInDays;
        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The URI of the vault for performing operations on keys and secrets.
        /// </summary>
        public readonly string? VaultUri;

        [OutputConstructor]
        private VaultPropertiesResponse(
            ImmutableArray<Outputs.AccessPolicyEntryResponse> accessPolicies,

            string? createMode,

            bool? enablePurgeProtection,

            bool? enableRbacAuthorization,

            bool? enableSoftDelete,

            bool? enabledForDeployment,

            bool? enabledForDiskEncryption,

            bool? enabledForTemplateDeployment,

            Outputs.NetworkRuleSetResponse? networkAcls,

            ImmutableArray<Outputs.PrivateEndpointConnectionItemResponse> privateEndpointConnections,

            Outputs.SkuResponse sku,

            int? softDeleteRetentionInDays,

            string tenantId,

            string? vaultUri)
        {
            AccessPolicies = accessPolicies;
            CreateMode = createMode;
            EnablePurgeProtection = enablePurgeProtection;
            EnableRbacAuthorization = enableRbacAuthorization;
            EnableSoftDelete = enableSoftDelete;
            EnabledForDeployment = enabledForDeployment;
            EnabledForDiskEncryption = enabledForDiskEncryption;
            EnabledForTemplateDeployment = enabledForTemplateDeployment;
            NetworkAcls = networkAcls;
            PrivateEndpointConnections = privateEndpointConnections;
            Sku = sku;
            SoftDeleteRetentionInDays = softDeleteRetentionInDays;
            TenantId = tenantId;
            VaultUri = vaultUri;
        }
    }
}
