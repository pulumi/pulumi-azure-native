// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KeyVault
{
    public static class GetManagedHsm
    {
        /// <summary>
        /// Gets the specified managed HSM Pool.
        /// API Version: 2021-06-01-preview.
        /// </summary>
        public static Task<GetManagedHsmResult> InvokeAsync(GetManagedHsmArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedHsmResult>("azure-native:keyvault:getManagedHsm", args ?? new GetManagedHsmArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified managed HSM Pool.
        /// API Version: 2021-06-01-preview.
        /// </summary>
        public static Output<GetManagedHsmResult> Invoke(GetManagedHsmInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedHsmResult>("azure-native:keyvault:getManagedHsm", args ?? new GetManagedHsmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedHsmArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed HSM Pool.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group that contains the managed HSM pool.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedHsmArgs()
        {
        }
        public static new GetManagedHsmArgs Empty => new GetManagedHsmArgs();
    }

    public sealed class GetManagedHsmInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed HSM Pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group that contains the managed HSM pool.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedHsmInvokeArgs()
        {
        }
        public static new GetManagedHsmInvokeArgs Empty => new GetManagedHsmInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedHsmResult
    {
        /// <summary>
        /// The Azure Resource Manager resource ID for the managed HSM Pool.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The supported Azure location where the managed HSM Pool should be created.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the managed HSM Pool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties of the managed HSM
        /// </summary>
        public readonly Outputs.ManagedHsmPropertiesResponse Properties;
        /// <summary>
        /// SKU details
        /// </summary>
        public readonly Outputs.ManagedHsmSkuResponse? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the key vault resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type of the managed HSM Pool.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagedHsmResult(
            string id,

            string? location,

            string name,

            Outputs.ManagedHsmPropertiesResponse properties,

            Outputs.ManagedHsmSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
