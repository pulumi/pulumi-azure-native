// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.KeyVault.V20180214Preview.Inputs
{

    /// <summary>
    /// Properties of the vault
    /// </summary>
    public sealed class VaultPropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.AccessPolicyEntryArgs>? _accessPolicies;

        /// <summary>
        /// An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
        /// </summary>
        public InputList<Inputs.AccessPolicyEntryArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.AccessPolicyEntryArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// The vault's create mode to indicate whether the vault need to be recovered or not.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.
        /// </summary>
        [Input("enablePurgeProtection")]
        public Input<bool>? EnablePurgeProtection { get; set; }

        /// <summary>
        /// Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value.
        /// </summary>
        [Input("enableSoftDelete")]
        public Input<bool>? EnableSoftDelete { get; set; }

        /// <summary>
        /// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
        /// </summary>
        [Input("enabledForDeployment")]
        public Input<bool>? EnabledForDeployment { get; set; }

        /// <summary>
        /// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Input("enabledForDiskEncryption")]
        public Input<bool>? EnabledForDiskEncryption { get; set; }

        /// <summary>
        /// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Input("enabledForTemplateDeployment")]
        public Input<bool>? EnabledForTemplateDeployment { get; set; }

        /// <summary>
        /// A collection of rules governing the accessibility of the vault from specific network locations.
        /// </summary>
        [Input("networkAcls")]
        public Input<Inputs.NetworkRuleSetArgs>? NetworkAcls { get; set; }

        /// <summary>
        /// SKU details
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.SkuArgs> Sku { get; set; } = null!;

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// The URI of the vault for performing operations on keys and secrets.
        /// </summary>
        [Input("vaultUri")]
        public Input<string>? VaultUri { get; set; }

        public VaultPropertiesArgs()
        {
        }
    }
}
