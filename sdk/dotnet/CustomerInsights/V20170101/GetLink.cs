// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CustomerInsights.V20170101
{
    [Obsolete(@"Version 2017-01-01 will be removed in v2 of the provider.")]
    public static class GetLink
    {
        /// <summary>
        /// The link resource format.
        /// </summary>
        public static Task<GetLinkResult> InvokeAsync(GetLinkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLinkResult>("azure-native:customerinsights/v20170101:getLink", args ?? new GetLinkArgs(), options.WithDefaults());

        /// <summary>
        /// The link resource format.
        /// </summary>
        public static Output<GetLinkResult> Invoke(GetLinkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLinkResult>("azure-native:customerinsights/v20170101:getLink", args ?? new GetLinkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public string HubName { get; set; } = null!;

        /// <summary>
        /// The name of the link.
        /// </summary>
        [Input("linkName", required: true)]
        public string LinkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLinkArgs()
        {
        }
        public static new GetLinkArgs Empty => new GetLinkArgs();
    }

    public sealed class GetLinkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public Input<string> HubName { get; set; } = null!;

        /// <summary>
        /// The name of the link.
        /// </summary>
        [Input("linkName", required: true)]
        public Input<string> LinkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLinkInvokeArgs()
        {
        }
        public static new GetLinkInvokeArgs Empty => new GetLinkInvokeArgs();
    }


    [OutputType]
    public sealed class GetLinkResult
    {
        /// <summary>
        /// Localized descriptions for the Link.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Description;
        /// <summary>
        /// Localized display name for the Link.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DisplayName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The link name.
        /// </summary>
        public readonly string LinkName;
        /// <summary>
        /// The set of properties mappings between the source and target Types.
        /// </summary>
        public readonly ImmutableArray<Outputs.TypePropertiesMappingResponse> Mappings;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
        /// </summary>
        public readonly string? OperationType;
        /// <summary>
        /// The properties that represent the participating profile.
        /// </summary>
        public readonly ImmutableArray<Outputs.ParticipantPropertyReferenceResponse> ParticipantPropertyReferences;
        /// <summary>
        /// Provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
        /// </summary>
        public readonly bool? ReferenceOnly;
        /// <summary>
        /// Name of the source Interaction Type.
        /// </summary>
        public readonly string SourceInteractionType;
        /// <summary>
        /// Name of the target Profile Type.
        /// </summary>
        public readonly string TargetProfileType;
        /// <summary>
        /// The hub name.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLinkResult(
            ImmutableDictionary<string, string>? description,

            ImmutableDictionary<string, string>? displayName,

            string id,

            string linkName,

            ImmutableArray<Outputs.TypePropertiesMappingResponse> mappings,

            string name,

            string? operationType,

            ImmutableArray<Outputs.ParticipantPropertyReferenceResponse> participantPropertyReferences,

            string provisioningState,

            bool? referenceOnly,

            string sourceInteractionType,

            string targetProfileType,

            string tenantId,

            string type)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            LinkName = linkName;
            Mappings = mappings;
            Name = name;
            OperationType = operationType;
            ParticipantPropertyReferences = participantPropertyReferences;
            ProvisioningState = provisioningState;
            ReferenceOnly = referenceOnly;
            SourceInteractionType = sourceInteractionType;
            TargetProfileType = targetProfileType;
            TenantId = tenantId;
            Type = type;
        }
    }
}
