// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CustomerInsights.V20170101
{
    public static class GetImageUploadUrlForEntityType
    {
        /// <summary>
        /// The image definition.
        /// </summary>
        public static Task<GetImageUploadUrlForEntityTypeResult> InvokeAsync(GetImageUploadUrlForEntityTypeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageUploadUrlForEntityTypeResult>("azure-native:customerinsights/v20170101:getImageUploadUrlForEntityType", args ?? new GetImageUploadUrlForEntityTypeArgs(), options.WithDefaults());

        /// <summary>
        /// The image definition.
        /// </summary>
        public static Output<GetImageUploadUrlForEntityTypeResult> Invoke(GetImageUploadUrlForEntityTypeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetImageUploadUrlForEntityTypeResult>("azure-native:customerinsights/v20170101:getImageUploadUrlForEntityType", args ?? new GetImageUploadUrlForEntityTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageUploadUrlForEntityTypeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of entity. Can be Profile or Interaction.
        /// </summary>
        [Input("entityType")]
        public string? EntityType { get; set; }

        /// <summary>
        /// Name of the entity type.
        /// </summary>
        [Input("entityTypeName")]
        public string? EntityTypeName { get; set; }

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public string HubName { get; set; } = null!;

        /// <summary>
        /// Relative path of the image.
        /// </summary>
        [Input("relativePath")]
        public string? RelativePath { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetImageUploadUrlForEntityTypeArgs()
        {
        }
    }

    public sealed class GetImageUploadUrlForEntityTypeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of entity. Can be Profile or Interaction.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// Name of the entity type.
        /// </summary>
        [Input("entityTypeName")]
        public Input<string>? EntityTypeName { get; set; }

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public Input<string> HubName { get; set; } = null!;

        /// <summary>
        /// Relative path of the image.
        /// </summary>
        [Input("relativePath")]
        public Input<string>? RelativePath { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetImageUploadUrlForEntityTypeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageUploadUrlForEntityTypeResult
    {
        /// <summary>
        /// Content URL for the image blob.
        /// </summary>
        public readonly string? ContentUrl;
        /// <summary>
        /// Whether image exists already.
        /// </summary>
        public readonly bool? ImageExists;
        /// <summary>
        /// Relative path of the image.
        /// </summary>
        public readonly string? RelativePath;

        [OutputConstructor]
        private GetImageUploadUrlForEntityTypeResult(
            string? contentUrl,

            bool? imageExists,

            string? relativePath)
        {
            ContentUrl = contentUrl;
            ImageExists = imageExists;
            RelativePath = relativePath;
        }
    }
}
