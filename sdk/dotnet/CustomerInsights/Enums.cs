// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.CustomerInsights
{
    /// <summary>
    /// The calculation window.
    /// </summary>
    [EnumType]
    public readonly struct CalculationWindowTypes : IEquatable<CalculationWindowTypes>
    {
        private readonly string _value;

        private CalculationWindowTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CalculationWindowTypes Lifetime { get; } = new CalculationWindowTypes("Lifetime");
        public static CalculationWindowTypes Hour { get; } = new CalculationWindowTypes("Hour");
        public static CalculationWindowTypes Day { get; } = new CalculationWindowTypes("Day");
        public static CalculationWindowTypes Week { get; } = new CalculationWindowTypes("Week");
        public static CalculationWindowTypes Month { get; } = new CalculationWindowTypes("Month");

        public static bool operator ==(CalculationWindowTypes left, CalculationWindowTypes right) => left.Equals(right);
        public static bool operator !=(CalculationWindowTypes left, CalculationWindowTypes right) => !left.Equals(right);

        public static explicit operator string(CalculationWindowTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CalculationWindowTypes other && Equals(other);
        public bool Equals(CalculationWindowTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Relationship Cardinality.
    /// </summary>
    [EnumType]
    public readonly struct CardinalityTypes : IEquatable<CardinalityTypes>
    {
        private readonly string _value;

        private CardinalityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CardinalityTypes OneToOne { get; } = new CardinalityTypes("OneToOne");
        public static CardinalityTypes OneToMany { get; } = new CardinalityTypes("OneToMany");
        public static CardinalityTypes ManyToMany { get; } = new CardinalityTypes("ManyToMany");

        public static bool operator ==(CardinalityTypes left, CardinalityTypes right) => left.Equals(right);
        public static bool operator !=(CardinalityTypes left, CardinalityTypes right) => !left.Equals(right);

        public static explicit operator string(CardinalityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CardinalityTypes other && Equals(other);
        public bool Equals(CardinalityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of completion operation.
    /// </summary>
    [EnumType]
    public readonly struct CompletionOperationTypes : IEquatable<CompletionOperationTypes>
    {
        private readonly string _value;

        private CompletionOperationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CompletionOperationTypes DoNothing { get; } = new CompletionOperationTypes("DoNothing");
        public static CompletionOperationTypes DeleteFile { get; } = new CompletionOperationTypes("DeleteFile");
        public static CompletionOperationTypes MoveFile { get; } = new CompletionOperationTypes("MoveFile");

        public static bool operator ==(CompletionOperationTypes left, CompletionOperationTypes right) => left.Equals(right);
        public static bool operator !=(CompletionOperationTypes left, CompletionOperationTypes right) => !left.Equals(right);

        public static explicit operator string(CompletionOperationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CompletionOperationTypes other && Equals(other);
        public bool Equals(CompletionOperationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of connector.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorTypes : IEquatable<ConnectorTypes>
    {
        private readonly string _value;

        private ConnectorTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorTypes None { get; } = new ConnectorTypes("None");
        public static ConnectorTypes CRM { get; } = new ConnectorTypes("CRM");
        public static ConnectorTypes AzureBlob { get; } = new ConnectorTypes("AzureBlob");
        public static ConnectorTypes Salesforce { get; } = new ConnectorTypes("Salesforce");
        public static ConnectorTypes ExchangeOnline { get; } = new ConnectorTypes("ExchangeOnline");
        public static ConnectorTypes Outbound { get; } = new ConnectorTypes("Outbound");

        public static bool operator ==(ConnectorTypes left, ConnectorTypes right) => left.Equals(right);
        public static bool operator !=(ConnectorTypes left, ConnectorTypes right) => !left.Equals(right);

        public static explicit operator string(ConnectorTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorTypes other && Equals(other);
        public bool Equals(ConnectorTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of target entity.
    /// </summary>
    [EnumType]
    public readonly struct EntityType : IEquatable<EntityType>
    {
        private readonly string _value;

        private EntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityType None { get; } = new EntityType("None");
        public static EntityType Profile { get; } = new EntityType("Profile");
        public static EntityType Interaction { get; } = new EntityType("Interaction");
        public static EntityType Relationship { get; } = new EntityType("Relationship");

        public static bool operator ==(EntityType left, EntityType right) => left.Equals(right);
        public static bool operator !=(EntityType left, EntityType right) => !left.Equals(right);

        public static explicit operator string(EntityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityType other && Equals(other);
        public bool Equals(EntityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of entity.
    /// </summary>
    [EnumType]
    public readonly struct EntityTypes : IEquatable<EntityTypes>
    {
        private readonly string _value;

        private EntityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityTypes None { get; } = new EntityTypes("None");
        public static EntityTypes Profile { get; } = new EntityTypes("Profile");
        public static EntityTypes Interaction { get; } = new EntityTypes("Interaction");
        public static EntityTypes Relationship { get; } = new EntityTypes("Relationship");

        public static bool operator ==(EntityTypes left, EntityTypes right) => left.Equals(right);
        public static bool operator !=(EntityTypes left, EntityTypes right) => !left.Equals(right);

        public static explicit operator string(EntityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityTypes other && Equals(other);
        public bool Equals(EntityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of error management to use for the mapping.
    /// </summary>
    [EnumType]
    public readonly struct ErrorManagementTypes : IEquatable<ErrorManagementTypes>
    {
        private readonly string _value;

        private ErrorManagementTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ErrorManagementTypes RejectAndContinue { get; } = new ErrorManagementTypes("RejectAndContinue");
        public static ErrorManagementTypes StopImport { get; } = new ErrorManagementTypes("StopImport");
        public static ErrorManagementTypes RejectUntilLimit { get; } = new ErrorManagementTypes("RejectUntilLimit");

        public static bool operator ==(ErrorManagementTypes left, ErrorManagementTypes right) => left.Equals(right);
        public static bool operator !=(ErrorManagementTypes left, ErrorManagementTypes right) => !left.Equals(right);

        public static explicit operator string(ErrorManagementTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ErrorManagementTypes other && Equals(other);
        public bool Equals(ErrorManagementTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type mapping format.
    /// </summary>
    [EnumType]
    public readonly struct FormatTypes : IEquatable<FormatTypes>
    {
        private readonly string _value;

        private FormatTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FormatTypes TextFormat { get; } = new FormatTypes("TextFormat");

        public static bool operator ==(FormatTypes left, FormatTypes right) => left.Equals(right);
        public static bool operator !=(FormatTypes left, FormatTypes right) => !left.Equals(right);

        public static explicit operator string(FormatTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FormatTypes other && Equals(other);
        public bool Equals(FormatTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency to update.
    /// </summary>
    [EnumType]
    public readonly struct FrequencyTypes : IEquatable<FrequencyTypes>
    {
        private readonly string _value;

        private FrequencyTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrequencyTypes Minute { get; } = new FrequencyTypes("Minute");
        public static FrequencyTypes Hour { get; } = new FrequencyTypes("Hour");
        public static FrequencyTypes Day { get; } = new FrequencyTypes("Day");
        public static FrequencyTypes Week { get; } = new FrequencyTypes("Week");
        public static FrequencyTypes Month { get; } = new FrequencyTypes("Month");

        public static bool operator ==(FrequencyTypes left, FrequencyTypes right) => left.Equals(right);
        public static bool operator !=(FrequencyTypes left, FrequencyTypes right) => !left.Equals(right);

        public static explicit operator string(FrequencyTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrequencyTypes other && Equals(other);
        public bool Equals(FrequencyTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
    /// </summary>
    [EnumType]
    public readonly struct InstanceOperationType : IEquatable<InstanceOperationType>
    {
        private readonly string _value;

        private InstanceOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceOperationType Upsert { get; } = new InstanceOperationType("Upsert");
        public static InstanceOperationType Delete { get; } = new InstanceOperationType("Delete");

        public static bool operator ==(InstanceOperationType left, InstanceOperationType right) => left.Equals(right);
        public static bool operator !=(InstanceOperationType left, InstanceOperationType right) => !left.Equals(right);

        public static explicit operator string(InstanceOperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceOperationType other && Equals(other);
        public bool Equals(InstanceOperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The computation function for the KPI.
    /// </summary>
    [EnumType]
    public readonly struct KpiFunctions : IEquatable<KpiFunctions>
    {
        private readonly string _value;

        private KpiFunctions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KpiFunctions Sum { get; } = new KpiFunctions("Sum");
        public static KpiFunctions Avg { get; } = new KpiFunctions("Avg");
        public static KpiFunctions Min { get; } = new KpiFunctions("Min");
        public static KpiFunctions Max { get; } = new KpiFunctions("Max");
        public static KpiFunctions Last { get; } = new KpiFunctions("Last");
        public static KpiFunctions Count { get; } = new KpiFunctions("Count");
        public static KpiFunctions None { get; } = new KpiFunctions("None");
        public static KpiFunctions CountDistinct { get; } = new KpiFunctions("CountDistinct");

        public static bool operator ==(KpiFunctions left, KpiFunctions right) => left.Equals(right);
        public static bool operator !=(KpiFunctions left, KpiFunctions right) => !left.Equals(right);

        public static explicit operator string(KpiFunctions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KpiFunctions other && Equals(other);
        public bool Equals(KpiFunctions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Link type.
    /// </summary>
    [EnumType]
    public readonly struct LinkTypes : IEquatable<LinkTypes>
    {
        private readonly string _value;

        private LinkTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkTypes UpdateAlways { get; } = new LinkTypes("UpdateAlways");
        public static LinkTypes CopyIfNull { get; } = new LinkTypes("CopyIfNull");

        public static bool operator ==(LinkTypes left, LinkTypes right) => left.Equals(right);
        public static bool operator !=(LinkTypes left, LinkTypes right) => !left.Equals(right);

        public static explicit operator string(LinkTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkTypes other && Equals(other);
        public bool Equals(LinkTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of roles.
    /// </summary>
    [EnumType]
    public readonly struct RoleTypes : IEquatable<RoleTypes>
    {
        private readonly string _value;

        private RoleTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleTypes Admin { get; } = new RoleTypes("Admin");
        public static RoleTypes Reader { get; } = new RoleTypes("Reader");
        public static RoleTypes ManageAdmin { get; } = new RoleTypes("ManageAdmin");
        public static RoleTypes ManageReader { get; } = new RoleTypes("ManageReader");
        public static RoleTypes DataAdmin { get; } = new RoleTypes("DataAdmin");
        public static RoleTypes DataReader { get; } = new RoleTypes("DataReader");

        public static bool operator ==(RoleTypes left, RoleTypes right) => left.Equals(right);
        public static bool operator !=(RoleTypes left, RoleTypes right) => !left.Equals(right);

        public static explicit operator string(RoleTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleTypes other && Equals(other);
        public bool Equals(RoleTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
