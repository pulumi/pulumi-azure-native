// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.CustomerInsights.V20170426.Outputs
{

    [OutputType]
    public sealed class RoleAssignmentResponseResult
    {
        /// <summary>
        /// The name of the metadata object.
        /// </summary>
        public readonly string AssignmentName;
        /// <summary>
        /// Widget types set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? ConflationPolicies;
        /// <summary>
        /// Connectors set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Connectors;
        /// <summary>
        /// Localized description for the metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Description;
        /// <summary>
        /// Localized display names for the metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DisplayName;
        /// <summary>
        /// Interactions set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Interactions;
        /// <summary>
        /// Kpis set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Kpis;
        /// <summary>
        /// Links set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Links;
        /// <summary>
        /// The principals being assigned to.
        /// </summary>
        public readonly ImmutableArray<Outputs.AssignmentPrincipalResponseResult> Principals;
        /// <summary>
        /// Profiles set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Profiles;
        /// <summary>
        /// Provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The Role assignments set for the relationship links.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? RelationshipLinks;
        /// <summary>
        /// The Role assignments set for the relationships.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Relationships;
        /// <summary>
        /// Type of roles.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The Role assignments set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? RoleAssignments;
        /// <summary>
        /// Sas Policies set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? SasPolicies;
        /// <summary>
        /// The Role assignments set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Segments;
        /// <summary>
        /// The hub name.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Views set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? Views;
        /// <summary>
        /// Widget types set for the assignment.
        /// </summary>
        public readonly Outputs.ResourceSetDescriptionResponseResult? WidgetTypes;

        [OutputConstructor]
        private RoleAssignmentResponseResult(
            string assignmentName,

            Outputs.ResourceSetDescriptionResponseResult? conflationPolicies,

            Outputs.ResourceSetDescriptionResponseResult? connectors,

            ImmutableDictionary<string, string>? description,

            ImmutableDictionary<string, string>? displayName,

            Outputs.ResourceSetDescriptionResponseResult? interactions,

            Outputs.ResourceSetDescriptionResponseResult? kpis,

            Outputs.ResourceSetDescriptionResponseResult? links,

            ImmutableArray<Outputs.AssignmentPrincipalResponseResult> principals,

            Outputs.ResourceSetDescriptionResponseResult? profiles,

            string provisioningState,

            Outputs.ResourceSetDescriptionResponseResult? relationshipLinks,

            Outputs.ResourceSetDescriptionResponseResult? relationships,

            string role,

            Outputs.ResourceSetDescriptionResponseResult? roleAssignments,

            Outputs.ResourceSetDescriptionResponseResult? sasPolicies,

            Outputs.ResourceSetDescriptionResponseResult? segments,

            string tenantId,

            Outputs.ResourceSetDescriptionResponseResult? views,

            Outputs.ResourceSetDescriptionResponseResult? widgetTypes)
        {
            AssignmentName = assignmentName;
            ConflationPolicies = conflationPolicies;
            Connectors = connectors;
            Description = description;
            DisplayName = displayName;
            Interactions = interactions;
            Kpis = kpis;
            Links = links;
            Principals = principals;
            Profiles = profiles;
            ProvisioningState = provisioningState;
            RelationshipLinks = relationshipLinks;
            Relationships = relationships;
            Role = role;
            RoleAssignments = roleAssignments;
            SasPolicies = sasPolicies;
            Segments = segments;
            TenantId = tenantId;
            Views = views;
            WidgetTypes = widgetTypes;
        }
    }
}
