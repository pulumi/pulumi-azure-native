// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.CustomerInsights.V20170426
{
    /// <summary>
    /// The profile resource format.
    /// </summary>
    public partial class Profile : Pulumi.CustomResource
    {
        /// <summary>
        /// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
        /// </summary>
        [Output("apiEntitySetName")]
        public Output<string?> ApiEntitySetName { get; private set; } = null!;

        /// <summary>
        /// The attributes for the Type.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>?> Attributes { get; private set; } = null!;

        /// <summary>
        /// Localized descriptions for the property.
        /// </summary>
        [Output("description")]
        public Output<ImmutableDictionary<string, string>?> Description { get; private set; } = null!;

        /// <summary>
        /// Localized display names for the property.
        /// </summary>
        [Output("displayName")]
        public Output<ImmutableDictionary<string, string>?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Type of entity.
        /// </summary>
        [Output("entityType")]
        public Output<string?> EntityType { get; private set; } = null!;

        /// <summary>
        /// The properties of the Profile.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.PropertyDefinitionResponse>> Fields { get; private set; } = null!;

        /// <summary>
        /// The instance count.
        /// </summary>
        [Output("instancesCount")]
        public Output<int?> InstancesCount { get; private set; } = null!;

        /// <summary>
        /// Large Image associated with the Property or EntityType.
        /// </summary>
        [Output("largeImage")]
        public Output<string?> LargeImage { get; private set; } = null!;

        /// <summary>
        /// The last changed time for the type definition.
        /// </summary>
        [Output("lastChangedUtc")]
        public Output<string> LastChangedUtc { get; private set; } = null!;

        /// <summary>
        /// Any custom localized attributes for the Type.
        /// </summary>
        [Output("localizedAttributes")]
        public Output<ImmutableDictionary<string, ImmutableDictionary<string, string>>?> LocalizedAttributes { get; private set; } = null!;

        /// <summary>
        /// Medium Image associated with the Property or EntityType.
        /// </summary>
        [Output("mediumImage")]
        public Output<string?> MediumImage { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The schema org link. This helps ACI identify and suggest semantic models.
        /// </summary>
        [Output("schemaItemTypeLink")]
        public Output<string?> SchemaItemTypeLink { get; private set; } = null!;

        /// <summary>
        /// Small Image associated with the Property or EntityType.
        /// </summary>
        [Output("smallImage")]
        public Output<string?> SmallImage { get; private set; } = null!;

        /// <summary>
        /// The strong IDs.
        /// </summary>
        [Output("strongIds")]
        public Output<ImmutableArray<Outputs.StrongIdResponse>> StrongIds { get; private set; } = null!;

        /// <summary>
        /// The hub name.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// The timestamp property name. Represents the time when the interaction or profile update happened.
        /// </summary>
        [Output("timestampFieldName")]
        public Output<string?> TimestampFieldName { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The name of the entity.
        /// </summary>
        [Output("typeName")]
        public Output<string?> TypeName { get; private set; } = null!;


        /// <summary>
        /// Create a Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Profile(string name, ProfileArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:customerinsights/v20170426:Profile", name, args ?? new ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Profile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:customerinsights/v20170426:Profile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:customerinsights/latest:Profile"},
                    new Pulumi.Alias { Type = "azure-nextgen:customerinsights/v20170101:Profile"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Profile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Profile(name, id, options);
        }
    }

    public sealed class ProfileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
        /// </summary>
        [Input("apiEntitySetName")]
        public Input<string>? ApiEntitySetName { get; set; }

        [Input("attributes")]
        private InputMap<ImmutableArray<string>>? _attributes;

        /// <summary>
        /// The attributes for the Type.
        /// </summary>
        public InputMap<ImmutableArray<string>> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<ImmutableArray<string>>());
            set => _attributes = value;
        }

        [Input("description")]
        private InputMap<string>? _description;

        /// <summary>
        /// Localized descriptions for the property.
        /// </summary>
        public InputMap<string> Description
        {
            get => _description ?? (_description = new InputMap<string>());
            set => _description = value;
        }

        [Input("displayName")]
        private InputMap<string>? _displayName;

        /// <summary>
        /// Localized display names for the property.
        /// </summary>
        public InputMap<string> DisplayName
        {
            get => _displayName ?? (_displayName = new InputMap<string>());
            set => _displayName = value;
        }

        /// <summary>
        /// Type of entity.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        [Input("fields")]
        private InputList<Inputs.PropertyDefinitionArgs>? _fields;

        /// <summary>
        /// The properties of the Profile.
        /// </summary>
        public InputList<Inputs.PropertyDefinitionArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.PropertyDefinitionArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public Input<string> HubName { get; set; } = null!;

        /// <summary>
        /// The instance count.
        /// </summary>
        [Input("instancesCount")]
        public Input<int>? InstancesCount { get; set; }

        /// <summary>
        /// Large Image associated with the Property or EntityType.
        /// </summary>
        [Input("largeImage")]
        public Input<string>? LargeImage { get; set; }

        [Input("localizedAttributes")]
        private InputMap<ImmutableDictionary<string, string>>? _localizedAttributes;

        /// <summary>
        /// Any custom localized attributes for the Type.
        /// </summary>
        public InputMap<ImmutableDictionary<string, string>> LocalizedAttributes
        {
            get => _localizedAttributes ?? (_localizedAttributes = new InputMap<ImmutableDictionary<string, string>>());
            set => _localizedAttributes = value;
        }

        /// <summary>
        /// Medium Image associated with the Property or EntityType.
        /// </summary>
        [Input("mediumImage")]
        public Input<string>? MediumImage { get; set; }

        /// <summary>
        /// The name of the profile.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The schema org link. This helps ACI identify and suggest semantic models.
        /// </summary>
        [Input("schemaItemTypeLink")]
        public Input<string>? SchemaItemTypeLink { get; set; }

        /// <summary>
        /// Small Image associated with the Property or EntityType.
        /// </summary>
        [Input("smallImage")]
        public Input<string>? SmallImage { get; set; }

        [Input("strongIds")]
        private InputList<Inputs.StrongIdArgs>? _strongIds;

        /// <summary>
        /// The strong IDs.
        /// </summary>
        public InputList<Inputs.StrongIdArgs> StrongIds
        {
            get => _strongIds ?? (_strongIds = new InputList<Inputs.StrongIdArgs>());
            set => _strongIds = value;
        }

        /// <summary>
        /// The timestamp property name. Represents the time when the interaction or profile update happened.
        /// </summary>
        [Input("timestampFieldName")]
        public Input<string>? TimestampFieldName { get; set; }

        /// <summary>
        /// The name of the entity.
        /// </summary>
        [Input("typeName")]
        public Input<string>? TypeName { get; set; }

        public ProfileArgs()
        {
        }
    }
}
