// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CustomerInsights.V20170426
{
    public static class GetKpi
    {
        /// <summary>
        /// Gets a KPI in the hub.
        /// </summary>
        public static Task<GetKpiResult> InvokeAsync(GetKpiArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKpiResult>("azure-native:customerinsights/v20170426:getKpi", args ?? new GetKpiArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a KPI in the hub.
        /// </summary>
        public static Output<GetKpiResult> Invoke(GetKpiInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKpiResult>("azure-native:customerinsights/v20170426:getKpi", args ?? new GetKpiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKpiArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public string HubName { get; set; } = null!;

        /// <summary>
        /// The name of the KPI.
        /// </summary>
        [Input("kpiName", required: true)]
        public string KpiName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKpiArgs()
        {
        }
        public static new GetKpiArgs Empty => new GetKpiArgs();
    }

    public sealed class GetKpiInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public Input<string> HubName { get; set; } = null!;

        /// <summary>
        /// The name of the KPI.
        /// </summary>
        [Input("kpiName", required: true)]
        public Input<string> KpiName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKpiInvokeArgs()
        {
        }
        public static new GetKpiInvokeArgs Empty => new GetKpiInvokeArgs();
    }


    [OutputType]
    public sealed class GetKpiResult
    {
        /// <summary>
        /// The aliases.
        /// </summary>
        public readonly ImmutableArray<Outputs.KpiAliasResponse> Aliases;
        /// <summary>
        /// The calculation window.
        /// </summary>
        public readonly string CalculationWindow;
        /// <summary>
        /// Name of calculation window field.
        /// </summary>
        public readonly string? CalculationWindowFieldName;
        /// <summary>
        /// Localized description for the KPI.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Description;
        /// <summary>
        /// Localized display name for the KPI.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DisplayName;
        /// <summary>
        /// The mapping entity type.
        /// </summary>
        public readonly string EntityType;
        /// <summary>
        /// The mapping entity name.
        /// </summary>
        public readonly string EntityTypeName;
        /// <summary>
        /// The computation expression for the KPI.
        /// </summary>
        public readonly string Expression;
        /// <summary>
        /// The KPI extracts.
        /// </summary>
        public readonly ImmutableArray<Outputs.KpiExtractResponse> Extracts;
        /// <summary>
        /// The filter expression for the KPI.
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// The computation function for the KPI.
        /// </summary>
        public readonly string Function;
        /// <summary>
        /// the group by properties for the KPI.
        /// </summary>
        public readonly ImmutableArray<string> GroupBy;
        /// <summary>
        /// The KPI GroupByMetadata.
        /// </summary>
        public readonly ImmutableArray<Outputs.KpiGroupByMetadataResponse> GroupByMetadata;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The KPI name.
        /// </summary>
        public readonly string KpiName;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The participant profiles.
        /// </summary>
        public readonly ImmutableArray<Outputs.KpiParticipantProfilesMetadataResponse> ParticipantProfilesMetadata;
        /// <summary>
        /// Provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The hub name.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The KPI thresholds.
        /// </summary>
        public readonly Outputs.KpiThresholdsResponse? ThresHolds;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unit of measurement for the KPI.
        /// </summary>
        public readonly string? Unit;

        [OutputConstructor]
        private GetKpiResult(
            ImmutableArray<Outputs.KpiAliasResponse> aliases,

            string calculationWindow,

            string? calculationWindowFieldName,

            ImmutableDictionary<string, string>? description,

            ImmutableDictionary<string, string>? displayName,

            string entityType,

            string entityTypeName,

            string expression,

            ImmutableArray<Outputs.KpiExtractResponse> extracts,

            string? filter,

            string function,

            ImmutableArray<string> groupBy,

            ImmutableArray<Outputs.KpiGroupByMetadataResponse> groupByMetadata,

            string id,

            string kpiName,

            string name,

            ImmutableArray<Outputs.KpiParticipantProfilesMetadataResponse> participantProfilesMetadata,

            string provisioningState,

            string tenantId,

            Outputs.KpiThresholdsResponse? thresHolds,

            string type,

            string? unit)
        {
            Aliases = aliases;
            CalculationWindow = calculationWindow;
            CalculationWindowFieldName = calculationWindowFieldName;
            Description = description;
            DisplayName = displayName;
            EntityType = entityType;
            EntityTypeName = entityTypeName;
            Expression = expression;
            Extracts = extracts;
            Filter = filter;
            Function = function;
            GroupBy = groupBy;
            GroupByMetadata = groupByMetadata;
            Id = id;
            KpiName = kpiName;
            Name = name;
            ParticipantProfilesMetadata = participantProfilesMetadata;
            ProvisioningState = provisioningState;
            TenantId = tenantId;
            ThresHolds = thresHolds;
            Type = type;
            Unit = unit;
        }
    }
}
