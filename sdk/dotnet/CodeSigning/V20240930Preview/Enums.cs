// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CodeSigning.V20240930Preview
{
    /// <summary>
    /// Profile type of the certificate.
    /// </summary>
    [EnumType]
    public readonly struct ProfileType : IEquatable<ProfileType>
    {
        private readonly string _value;

        private ProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Used for signing files which are distributed publicly.
        /// </summary>
        public static ProfileType PublicTrust { get; } = new ProfileType("PublicTrust");
        /// <summary>
        /// Used for signing files which are distributed internally within organization or group boundary.
        /// </summary>
        public static ProfileType PrivateTrust { get; } = new ProfileType("PrivateTrust");
        /// <summary>
        /// Used for signing CI policy files.
        /// </summary>
        public static ProfileType PrivateTrustCIPolicy { get; } = new ProfileType("PrivateTrustCIPolicy");
        /// <summary>
        /// Used for signing files which are run in secure vbs enclave.
        /// </summary>
        public static ProfileType VBSEnclave { get; } = new ProfileType("VBSEnclave");
        /// <summary>
        /// Used for signing files for testing purpose.
        /// </summary>
        public static ProfileType PublicTrustTest { get; } = new ProfileType("PublicTrustTest");

        public static bool operator ==(ProfileType left, ProfileType right) => left.Equals(right);
        public static bool operator !=(ProfileType left, ProfileType right) => !left.Equals(right);

        public static explicit operator string(ProfileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileType other && Equals(other);
        public bool Equals(ProfileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Basic sku.
        /// </summary>
        public static SkuName Basic { get; } = new SkuName("Basic");
        /// <summary>
        /// Premium sku.
        /// </summary>
        public static SkuName Premium { get; } = new SkuName("Premium");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
