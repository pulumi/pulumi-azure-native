// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CodeSigning.V20240930Preview
{
    public static class GetCodeSigningAccount
    {
        /// <summary>
        /// Get a trusted Signing Account.
        /// </summary>
        public static Task<GetCodeSigningAccountResult> InvokeAsync(GetCodeSigningAccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCodeSigningAccountResult>("azure-native:codesigning/v20240930preview:getCodeSigningAccount", args ?? new GetCodeSigningAccountArgs(), options.WithDefaults());

        /// <summary>
        /// Get a trusted Signing Account.
        /// </summary>
        public static Output<GetCodeSigningAccountResult> Invoke(GetCodeSigningAccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCodeSigningAccountResult>("azure-native:codesigning/v20240930preview:getCodeSigningAccount", args ?? new GetCodeSigningAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCodeSigningAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Trusted Signing account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCodeSigningAccountArgs()
        {
        }
        public static new GetCodeSigningAccountArgs Empty => new GetCodeSigningAccountArgs();
    }

    public sealed class GetCodeSigningAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Trusted Signing account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCodeSigningAccountInvokeArgs()
        {
        }
        public static new GetCodeSigningAccountInvokeArgs Empty => new GetCodeSigningAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetCodeSigningAccountResult
    {
        /// <summary>
        /// The URI of the trusted signing account which is used during signing files.
        /// </summary>
        public readonly string AccountUri;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status of the current operation on trusted signing account.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// SKU of the trusted signing account.
        /// </summary>
        public readonly Outputs.AccountSkuResponse? Sku;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCodeSigningAccountResult(
            string accountUri,

            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.AccountSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AccountUri = accountUri;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
