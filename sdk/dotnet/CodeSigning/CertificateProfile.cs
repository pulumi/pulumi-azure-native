// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CodeSigning
{
    /// <summary>
    /// Certificate profile resource.
    /// Azure REST API version: 2024-02-05-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:codesigning:CertificateProfile")]
    public partial class CertificateProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Used as L in the certificate subject name.
        /// </summary>
        [Output("city")]
        public Output<string> City { get; private set; } = null!;

        /// <summary>
        /// Used as CN in the certificate subject name.
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// Used as C in the certificate subject name.
        /// </summary>
        [Output("country")]
        public Output<string> Country { get; private set; } = null!;

        /// <summary>
        /// Enhanced key usage of the certificate.
        /// </summary>
        [Output("enhancedKeyUsage")]
        public Output<string> EnhancedKeyUsage { get; private set; } = null!;

        /// <summary>
        /// Identity validation id used for the certificate subject name.
        /// </summary>
        [Output("identityValidationId")]
        public Output<string?> IdentityValidationId { get; private set; } = null!;

        /// <summary>
        /// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Output("includeCity")]
        public Output<bool?> IncludeCity { get; private set; } = null!;

        /// <summary>
        /// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Output("includeCountry")]
        public Output<bool?> IncludeCountry { get; private set; } = null!;

        /// <summary>
        /// Whether to include PC in the certificate subject name.
        /// </summary>
        [Output("includePostalCode")]
        public Output<bool?> IncludePostalCode { get; private set; } = null!;

        /// <summary>
        /// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Output("includeState")]
        public Output<bool?> IncludeState { get; private set; } = null!;

        /// <summary>
        /// Whether to include STREET in the certificate subject name.
        /// </summary>
        [Output("includeStreetAddress")]
        public Output<bool?> IncludeStreetAddress { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Used as O in the certificate subject name.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Used as OU in the private trust certificate subject name.
        /// </summary>
        [Output("organizationUnit")]
        public Output<string> OrganizationUnit { get; private set; } = null!;

        /// <summary>
        /// Used as PC in the certificate subject name.
        /// </summary>
        [Output("postalCode")]
        public Output<string> PostalCode { get; private set; } = null!;

        /// <summary>
        /// Profile type of the certificate.
        /// </summary>
        [Output("profileType")]
        public Output<string> ProfileType { get; private set; } = null!;

        /// <summary>
        /// Status of the current operation on certificate profile.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Used as S in the certificate subject name.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Status of the certificate profile.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Used as STREET in the certificate subject name.
        /// </summary>
        [Output("streetAddress")]
        public Output<string> StreetAddress { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateProfile(string name, CertificateProfileArgs args, CustomResourceOptions? options = null)
            : base("azure-native:codesigning:CertificateProfile", name, args ?? new CertificateProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateProfile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:codesigning:CertificateProfile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:codesigning/v20240205preview:CertificateProfile" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateProfile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CertificateProfile(name, id, options);
        }
    }

    public sealed class CertificateProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Trusted Signing account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Identity validation id used for the certificate subject name.
        /// </summary>
        [Input("identityValidationId")]
        public Input<string>? IdentityValidationId { get; set; }

        /// <summary>
        /// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Input("includeCity")]
        public Input<bool>? IncludeCity { get; set; }

        /// <summary>
        /// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Input("includeCountry")]
        public Input<bool>? IncludeCountry { get; set; }

        /// <summary>
        /// Whether to include PC in the certificate subject name.
        /// </summary>
        [Input("includePostalCode")]
        public Input<bool>? IncludePostalCode { get; set; }

        /// <summary>
        /// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Input("includeState")]
        public Input<bool>? IncludeState { get; set; }

        /// <summary>
        /// Whether to include STREET in the certificate subject name.
        /// </summary>
        [Input("includeStreetAddress")]
        public Input<bool>? IncludeStreetAddress { get; set; }

        /// <summary>
        /// Certificate profile name.
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// Profile type of the certificate.
        /// </summary>
        [Input("profileType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.CodeSigning.ProfileType> ProfileType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CertificateProfileArgs()
        {
            IncludeCity = false;
            IncludeCountry = false;
            IncludePostalCode = false;
            IncludeState = false;
            IncludeStreetAddress = false;
        }
        public static new CertificateProfileArgs Empty => new CertificateProfileArgs();
    }
}
