// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.NetworkFunction.V20220501
{
    /// <summary>
    /// Emission destination type.
    /// </summary>
    [EnumType]
    public readonly struct DestinationType : IEquatable<DestinationType>
    {
        private readonly string _value;

        private DestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationType AzureMonitor { get; } = new DestinationType("AzureMonitor");

        public static bool operator ==(DestinationType left, DestinationType right) => left.Equals(right);
        public static bool operator !=(DestinationType left, DestinationType right) => !left.Equals(right);

        public static explicit operator string(DestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationType other && Equals(other);
        public bool Equals(DestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Emission format type.
    /// </summary>
    [EnumType]
    public readonly struct EmissionType : IEquatable<EmissionType>
    {
        private readonly string _value;

        private EmissionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EmissionType IPFIX { get; } = new EmissionType("IPFIX");

        public static bool operator ==(EmissionType left, EmissionType right) => left.Equals(right);
        public static bool operator !=(EmissionType left, EmissionType right) => !left.Equals(right);

        public static explicit operator string(EmissionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EmissionType other && Equals(other);
        public bool Equals(EmissionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The ingestion type.
    /// </summary>
    [EnumType]
    public readonly struct IngestionType : IEquatable<IngestionType>
    {
        private readonly string _value;

        private IngestionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngestionType IPFIX { get; } = new IngestionType("IPFIX");

        public static bool operator ==(IngestionType left, IngestionType right) => left.Equals(right);
        public static bool operator !=(IngestionType left, IngestionType right) => !left.Equals(right);

        public static explicit operator string(IngestionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngestionType other && Equals(other);
        public bool Equals(IngestionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingestion source type.
    /// </summary>
    [EnumType]
    public readonly struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        private SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceType Resource { get; } = new SourceType("Resource");

        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);

        public static explicit operator string(SourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceType other && Equals(other);
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
