// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforMySQL
{
    /// <summary>
    /// The type of administrator.
    /// </summary>
    [EnumType]
    public readonly struct AdministratorType : IEquatable<AdministratorType>
    {
        private readonly string _value;

        private AdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdministratorType ActiveDirectory { get; } = new AdministratorType("ActiveDirectory");

        public static bool operator ==(AdministratorType left, AdministratorType right) => left.Equals(right);
        public static bool operator !=(AdministratorType left, AdministratorType right) => !left.Equals(right);

        public static explicit operator string(AdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdministratorType other && Equals(other);
        public bool Equals(AdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source of the configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationSource : IEquatable<ConfigurationSource>
    {
        private readonly string _value;

        private ConfigurationSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationSource System_default { get; } = new ConfigurationSource("system-default");
        public static ConfigurationSource User_override { get; } = new ConfigurationSource("user-override");

        public static bool operator ==(ConfigurationSource left, ConfigurationSource right) => left.Equals(right);
        public static bool operator !=(ConfigurationSource left, ConfigurationSource right) => !left.Equals(right);

        public static explicit operator string(ConfigurationSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationSource other && Equals(other);
        public bool Equals(ConfigurationSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a new MySQL server.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Replica { get; } = new CreateMode("Replica");
        public static CreateMode GeoRestore { get; } = new CreateMode("GeoRestore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The key type, AzureKeyVault for enable cmk, SystemManaged for disable cmk.
    /// </summary>
    [EnumType]
    public readonly struct DataEncryptionType : IEquatable<DataEncryptionType>
    {
        private readonly string _value;

        private DataEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataEncryptionType AzureKeyVault { get; } = new DataEncryptionType("AzureKeyVault");
        public static DataEncryptionType SystemManaged { get; } = new DataEncryptionType("SystemManaged");

        public static bool operator ==(DataEncryptionType left, DataEncryptionType right) => left.Equals(right);
        public static bool operator !=(DataEncryptionType left, DataEncryptionType right) => !left.Equals(right);

        public static explicit operator string(DataEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataEncryptionType other && Equals(other);
        public bool Equals(DataEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Log On Disk or not.
    /// </summary>
    [EnumType]
    public readonly struct EnableStatusEnum : IEquatable<EnableStatusEnum>
    {
        private readonly string _value;

        private EnableStatusEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableStatusEnum Enabled { get; } = new EnableStatusEnum("Enabled");
        public static EnableStatusEnum Disabled { get; } = new EnableStatusEnum("Disabled");

        public static bool operator ==(EnableStatusEnum left, EnableStatusEnum right) => left.Equals(right);
        public static bool operator !=(EnableStatusEnum left, EnableStatusEnum right) => !left.Equals(right);

        public static explicit operator string(EnableStatusEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableStatusEnum other && Equals(other);
        public bool Equals(EnableStatusEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// High availability mode for a server.
    /// </summary>
    [EnumType]
    public readonly struct HighAvailabilityMode : IEquatable<HighAvailabilityMode>
    {
        private readonly string _value;

        private HighAvailabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HighAvailabilityMode Disabled { get; } = new HighAvailabilityMode("Disabled");
        public static HighAvailabilityMode ZoneRedundant { get; } = new HighAvailabilityMode("ZoneRedundant");
        public static HighAvailabilityMode SameZone { get; } = new HighAvailabilityMode("SameZone");

        public static bool operator ==(HighAvailabilityMode left, HighAvailabilityMode right) => left.Equals(right);
        public static bool operator !=(HighAvailabilityMode left, HighAvailabilityMode right) => !left.Equals(right);

        public static explicit operator string(HighAvailabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HighAvailabilityMode other && Equals(other);
        public bool Equals(HighAvailabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type of import source.
    /// </summary>
    [EnumType]
    public readonly struct ImportSourceStorageType : IEquatable<ImportSourceStorageType>
    {
        private readonly string _value;

        private ImportSourceStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImportSourceStorageType AzureBlob { get; } = new ImportSourceStorageType("AzureBlob");

        public static bool operator ==(ImportSourceStorageType left, ImportSourceStorageType right) => left.Equals(right);
        public static bool operator !=(ImportSourceStorageType left, ImportSourceStorageType right) => !left.Equals(right);

        public static explicit operator string(ImportSourceStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImportSourceStorageType other && Equals(other);
        public bool Equals(ImportSourceStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The replication role.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationRole : IEquatable<ReplicationRole>
    {
        private readonly string _value;

        private ReplicationRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationRole None { get; } = new ReplicationRole("None");
        public static ReplicationRole Source { get; } = new ReplicationRole("Source");
        public static ReplicationRole Replica { get; } = new ReplicationRole("Replica");

        public static bool operator ==(ReplicationRole left, ReplicationRole right) => left.Equals(right);
        public static bool operator !=(ReplicationRole left, ReplicationRole right) => !left.Equals(right);

        public static explicit operator string(ReplicationRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationRole other && Equals(other);
        public bool Equals(ReplicationRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. GeneralPurpose.
    /// </summary>
    [EnumType]
    public readonly struct ServerSkuTier : IEquatable<ServerSkuTier>
    {
        private readonly string _value;

        private ServerSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerSkuTier Burstable { get; } = new ServerSkuTier("Burstable");
        public static ServerSkuTier GeneralPurpose { get; } = new ServerSkuTier("GeneralPurpose");
        public static ServerSkuTier MemoryOptimized { get; } = new ServerSkuTier("MemoryOptimized");

        public static bool operator ==(ServerSkuTier left, ServerSkuTier right) => left.Equals(right);
        public static bool operator !=(ServerSkuTier left, ServerSkuTier right) => !left.Equals(right);

        public static explicit operator string(ServerSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerSkuTier other && Equals(other);
        public bool Equals(ServerSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server version.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_5_7 { get; } = new ServerVersion("5.7");
        public static ServerVersion ServerVersion_8_0_21 { get; } = new ServerVersion("8.0.21");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a new server.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerCreateMode : IEquatable<SingleServerCreateMode>
    {
        private readonly string _value;

        private SingleServerCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerCreateMode Default { get; } = new SingleServerCreateMode("Default");
        public static SingleServerCreateMode PointInTimeRestore { get; } = new SingleServerCreateMode("PointInTimeRestore");
        public static SingleServerCreateMode GeoRestore { get; } = new SingleServerCreateMode("GeoRestore");
        public static SingleServerCreateMode Replica { get; } = new SingleServerCreateMode("Replica");

        public static bool operator ==(SingleServerCreateMode left, SingleServerCreateMode right) => left.Equals(right);
        public static bool operator !=(SingleServerCreateMode left, SingleServerCreateMode right) => !left.Equals(right);

        public static explicit operator string(SingleServerCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerCreateMode other && Equals(other);
        public bool Equals(SingleServerCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Geo-redundant or not for server backup.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerGeoRedundantBackup : IEquatable<SingleServerGeoRedundantBackup>
    {
        private readonly string _value;

        private SingleServerGeoRedundantBackup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerGeoRedundantBackup Enabled { get; } = new SingleServerGeoRedundantBackup("Enabled");
        public static SingleServerGeoRedundantBackup Disabled { get; } = new SingleServerGeoRedundantBackup("Disabled");

        public static bool operator ==(SingleServerGeoRedundantBackup left, SingleServerGeoRedundantBackup right) => left.Equals(right);
        public static bool operator !=(SingleServerGeoRedundantBackup left, SingleServerGeoRedundantBackup right) => !left.Equals(right);

        public static explicit operator string(SingleServerGeoRedundantBackup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerGeoRedundantBackup other && Equals(other);
        public bool Equals(SingleServerGeoRedundantBackup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerIdentityType : IEquatable<SingleServerIdentityType>
    {
        private readonly string _value;

        private SingleServerIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerIdentityType SystemAssigned { get; } = new SingleServerIdentityType("SystemAssigned");

        public static bool operator ==(SingleServerIdentityType left, SingleServerIdentityType right) => left.Equals(right);
        public static bool operator !=(SingleServerIdentityType left, SingleServerIdentityType right) => !left.Equals(right);

        public static explicit operator string(SingleServerIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerIdentityType other && Equals(other);
        public bool Equals(SingleServerIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status showing whether the server enabled infrastructure encryption.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerInfrastructureEncryption : IEquatable<SingleServerInfrastructureEncryption>
    {
        private readonly string _value;

        private SingleServerInfrastructureEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value for single layer of encryption for data at rest.
        /// </summary>
        public static SingleServerInfrastructureEncryption Enabled { get; } = new SingleServerInfrastructureEncryption("Enabled");
        /// <summary>
        /// Additional (2nd) layer of encryption for data at rest
        /// </summary>
        public static SingleServerInfrastructureEncryption Disabled { get; } = new SingleServerInfrastructureEncryption("Disabled");

        public static bool operator ==(SingleServerInfrastructureEncryption left, SingleServerInfrastructureEncryption right) => left.Equals(right);
        public static bool operator !=(SingleServerInfrastructureEncryption left, SingleServerInfrastructureEncryption right) => !left.Equals(right);

        public static explicit operator string(SingleServerInfrastructureEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerInfrastructureEncryption other && Equals(other);
        public bool Equals(SingleServerInfrastructureEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enforce a minimal Tls version for the server.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerMinimalTlsVersionEnum : IEquatable<SingleServerMinimalTlsVersionEnum>
    {
        private readonly string _value;

        private SingleServerMinimalTlsVersionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerMinimalTlsVersionEnum TLS1_0 { get; } = new SingleServerMinimalTlsVersionEnum("TLS1_0");
        public static SingleServerMinimalTlsVersionEnum TLS1_1 { get; } = new SingleServerMinimalTlsVersionEnum("TLS1_1");
        public static SingleServerMinimalTlsVersionEnum TLS1_2 { get; } = new SingleServerMinimalTlsVersionEnum("TLS1_2");
        public static SingleServerMinimalTlsVersionEnum TLSEnforcementDisabled { get; } = new SingleServerMinimalTlsVersionEnum("TLSEnforcementDisabled");

        public static bool operator ==(SingleServerMinimalTlsVersionEnum left, SingleServerMinimalTlsVersionEnum right) => left.Equals(right);
        public static bool operator !=(SingleServerMinimalTlsVersionEnum left, SingleServerMinimalTlsVersionEnum right) => !left.Equals(right);

        public static explicit operator string(SingleServerMinimalTlsVersionEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerMinimalTlsVersionEnum other && Equals(other);
        public bool Equals(SingleServerMinimalTlsVersionEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct SingleServerPublicNetworkAccessEnum : IEquatable<SingleServerPublicNetworkAccessEnum>
    {
        private readonly string _value;

        private SingleServerPublicNetworkAccessEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerPublicNetworkAccessEnum Enabled { get; } = new SingleServerPublicNetworkAccessEnum("Enabled");
        public static SingleServerPublicNetworkAccessEnum Disabled { get; } = new SingleServerPublicNetworkAccessEnum("Disabled");

        public static bool operator ==(SingleServerPublicNetworkAccessEnum left, SingleServerPublicNetworkAccessEnum right) => left.Equals(right);
        public static bool operator !=(SingleServerPublicNetworkAccessEnum left, SingleServerPublicNetworkAccessEnum right) => !left.Equals(right);

        public static explicit operator string(SingleServerPublicNetworkAccessEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerPublicNetworkAccessEnum other && Equals(other);
        public bool Equals(SingleServerPublicNetworkAccessEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server version.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerServerVersion : IEquatable<SingleServerServerVersion>
    {
        private readonly string _value;

        private SingleServerServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerServerVersion SingleServerServerVersion_5_6 { get; } = new SingleServerServerVersion("5.6");
        public static SingleServerServerVersion SingleServerServerVersion_5_7 { get; } = new SingleServerServerVersion("5.7");
        public static SingleServerServerVersion SingleServerServerVersion_8_0 { get; } = new SingleServerServerVersion("8.0");

        public static bool operator ==(SingleServerServerVersion left, SingleServerServerVersion right) => left.Equals(right);
        public static bool operator !=(SingleServerServerVersion left, SingleServerServerVersion right) => !left.Equals(right);

        public static explicit operator string(SingleServerServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerServerVersion other && Equals(other);
        public bool Equals(SingleServerServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. Basic.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerSkuTier : IEquatable<SingleServerSkuTier>
    {
        private readonly string _value;

        private SingleServerSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerSkuTier Basic { get; } = new SingleServerSkuTier("Basic");
        public static SingleServerSkuTier GeneralPurpose { get; } = new SingleServerSkuTier("GeneralPurpose");
        public static SingleServerSkuTier MemoryOptimized { get; } = new SingleServerSkuTier("MemoryOptimized");

        public static bool operator ==(SingleServerSkuTier left, SingleServerSkuTier right) => left.Equals(right);
        public static bool operator !=(SingleServerSkuTier left, SingleServerSkuTier right) => !left.Equals(right);

        public static explicit operator string(SingleServerSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerSkuTier other && Equals(other);
        public bool Equals(SingleServerSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable ssl enforcement or not when connect to server.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerSslEnforcementEnum : IEquatable<SingleServerSslEnforcementEnum>
    {
        private readonly string _value;

        private SingleServerSslEnforcementEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerSslEnforcementEnum Enabled { get; } = new SingleServerSslEnforcementEnum("Enabled");
        public static SingleServerSslEnforcementEnum Disabled { get; } = new SingleServerSslEnforcementEnum("Disabled");

        public static bool operator ==(SingleServerSslEnforcementEnum left, SingleServerSslEnforcementEnum right) => left.Equals(right);
        public static bool operator !=(SingleServerSslEnforcementEnum left, SingleServerSslEnforcementEnum right) => !left.Equals(right);

        public static explicit operator string(SingleServerSslEnforcementEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerSslEnforcementEnum other && Equals(other);
        public bool Equals(SingleServerSslEnforcementEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Storage Auto Grow.
    /// </summary>
    [EnumType]
    public readonly struct SingleServerStorageAutogrow : IEquatable<SingleServerStorageAutogrow>
    {
        private readonly string _value;

        private SingleServerStorageAutogrow(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleServerStorageAutogrow Enabled { get; } = new SingleServerStorageAutogrow("Enabled");
        public static SingleServerStorageAutogrow Disabled { get; } = new SingleServerStorageAutogrow("Disabled");

        public static bool operator ==(SingleServerStorageAutogrow left, SingleServerStorageAutogrow right) => left.Equals(right);
        public static bool operator !=(SingleServerStorageAutogrow left, SingleServerStorageAutogrow right) => !left.Equals(right);

        public static explicit operator string(SingleServerStorageAutogrow value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleServerStorageAutogrow other && Equals(other);
        public bool Equals(SingleServerStorageAutogrow other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The redundant type of the server storage. The parameter is used for server creation.
    /// </summary>
    [EnumType]
    public readonly struct StorageRedundancyEnum : IEquatable<StorageRedundancyEnum>
    {
        private readonly string _value;

        private StorageRedundancyEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageRedundancyEnum LocalRedundancy { get; } = new StorageRedundancyEnum("LocalRedundancy");
        public static StorageRedundancyEnum ZoneRedundancy { get; } = new StorageRedundancyEnum("ZoneRedundancy");

        public static bool operator ==(StorageRedundancyEnum left, StorageRedundancyEnum right) => left.Equals(right);
        public static bool operator !=(StorageRedundancyEnum left, StorageRedundancyEnum right) => !left.Equals(right);

        public static explicit operator string(StorageRedundancyEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageRedundancyEnum other && Equals(other);
        public bool Equals(StorageRedundancyEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
