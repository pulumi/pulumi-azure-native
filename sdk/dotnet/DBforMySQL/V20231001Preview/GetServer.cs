// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforMySQL.V20231001Preview
{
    public static class GetServer
    {
        /// <summary>
        /// Gets information about a server.
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("azure-native:dbformysql/v20231001preview:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a server.
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("azure-native:dbformysql/v20231001preview:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
        /// </summary>
        public readonly string? AdministratorLogin;
        /// <summary>
        /// availability Zone information of the server.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// Backup related properties of a server.
        /// </summary>
        public readonly Outputs.BackupResponse? Backup;
        /// <summary>
        /// The Data Encryption for CMK.
        /// </summary>
        public readonly Outputs.DataEncryptionResponse? DataEncryption;
        /// <summary>
        /// The fully qualified domain name of a server.
        /// </summary>
        public readonly string FullyQualifiedDomainName;
        /// <summary>
        /// High availability related properties of a server.
        /// </summary>
        public readonly Outputs.HighAvailabilityResponse? HighAvailability;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The cmk identity for the server.
        /// </summary>
        public readonly Outputs.MySQLServerIdentityResponse? Identity;
        /// <summary>
        /// Source properties for import from storage.
        /// </summary>
        public readonly Outputs.ImportSourcePropertiesResponse? ImportSourceProperties;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Maintenance window of a server.
        /// </summary>
        public readonly Outputs.MaintenanceWindowResponse? MaintenanceWindow;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network related properties of a server.
        /// </summary>
        public readonly Outputs.NetworkResponse? Network;
        /// <summary>
        /// PrivateEndpointConnections related properties of a server.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// The maximum number of replicas that a primary server can have.
        /// </summary>
        public readonly int ReplicaCapacity;
        /// <summary>
        /// The replication role.
        /// </summary>
        public readonly string? ReplicationRole;
        /// <summary>
        /// The SKU (pricing tier) of the server.
        /// </summary>
        public readonly Outputs.MySQLServerSkuResponse? Sku;
        /// <summary>
        /// The source MySQL server id.
        /// </summary>
        public readonly string? SourceServerResourceId;
        /// <summary>
        /// The state of a server.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Storage related properties of a server.
        /// </summary>
        public readonly Outputs.StorageResponse? Storage;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Server version.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetServerResult(
            string? administratorLogin,

            string? availabilityZone,

            Outputs.BackupResponse? backup,

            Outputs.DataEncryptionResponse? dataEncryption,

            string fullyQualifiedDomainName,

            Outputs.HighAvailabilityResponse? highAvailability,

            string id,

            Outputs.MySQLServerIdentityResponse? identity,

            Outputs.ImportSourcePropertiesResponse? importSourceProperties,

            string location,

            Outputs.MaintenanceWindowResponse? maintenanceWindow,

            string name,

            Outputs.NetworkResponse? network,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            int replicaCapacity,

            string? replicationRole,

            Outputs.MySQLServerSkuResponse? sku,

            string? sourceServerResourceId,

            string state,

            Outputs.StorageResponse? storage,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? version)
        {
            AdministratorLogin = administratorLogin;
            AvailabilityZone = availabilityZone;
            Backup = backup;
            DataEncryption = dataEncryption;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            HighAvailability = highAvailability;
            Id = id;
            Identity = identity;
            ImportSourceProperties = importSourceProperties;
            Location = location;
            MaintenanceWindow = maintenanceWindow;
            Name = name;
            Network = network;
            PrivateEndpointConnections = privateEndpointConnections;
            ReplicaCapacity = replicaCapacity;
            ReplicationRole = replicationRole;
            Sku = sku;
            SourceServerResourceId = sourceServerResourceId;
            State = state;
            Storage = storage;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
