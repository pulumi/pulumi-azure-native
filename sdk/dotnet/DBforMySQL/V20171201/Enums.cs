// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DBforMySQL.V20171201
{
    /// <summary>
    /// The type of administrator.
    /// </summary>
    [EnumType]
    public readonly struct AdministratorType : IEquatable<AdministratorType>
    {
        private readonly string _value;

        private AdministratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdministratorType ActiveDirectory { get; } = new AdministratorType("ActiveDirectory");

        public static bool operator ==(AdministratorType left, AdministratorType right) => left.Equals(right);
        public static bool operator !=(AdministratorType left, AdministratorType right) => !left.Equals(right);

        public static explicit operator string(AdministratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdministratorType other && Equals(other);
        public bool Equals(AdministratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a new server.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode GeoRestore { get; } = new CreateMode("GeoRestore");
        public static CreateMode Replica { get; } = new CreateMode("Replica");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Geo-redundant or not for server backup.
    /// </summary>
    [EnumType]
    public readonly struct GeoRedundantBackup : IEquatable<GeoRedundantBackup>
    {
        private readonly string _value;

        private GeoRedundantBackup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoRedundantBackup Enabled { get; } = new GeoRedundantBackup("Enabled");
        public static GeoRedundantBackup Disabled { get; } = new GeoRedundantBackup("Disabled");

        public static bool operator ==(GeoRedundantBackup left, GeoRedundantBackup right) => left.Equals(right);
        public static bool operator !=(GeoRedundantBackup left, GeoRedundantBackup right) => !left.Equals(right);

        public static explicit operator string(GeoRedundantBackup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoRedundantBackup other && Equals(other);
        public bool Equals(GeoRedundantBackup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status showing whether the server enabled infrastructure encryption.
    /// </summary>
    [EnumType]
    public readonly struct InfrastructureEncryption : IEquatable<InfrastructureEncryption>
    {
        private readonly string _value;

        private InfrastructureEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default value for single layer of encryption for data at rest.
        /// </summary>
        public static InfrastructureEncryption Enabled { get; } = new InfrastructureEncryption("Enabled");
        /// <summary>
        /// Additional (2nd) layer of encryption for data at rest
        /// </summary>
        public static InfrastructureEncryption Disabled { get; } = new InfrastructureEncryption("Disabled");

        public static bool operator ==(InfrastructureEncryption left, InfrastructureEncryption right) => left.Equals(right);
        public static bool operator !=(InfrastructureEncryption left, InfrastructureEncryption right) => !left.Equals(right);

        public static explicit operator string(InfrastructureEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InfrastructureEncryption other && Equals(other);
        public bool Equals(InfrastructureEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enforce a minimal Tls version for the server.
    /// </summary>
    [EnumType]
    public readonly struct MinimalTlsVersionEnum : IEquatable<MinimalTlsVersionEnum>
    {
        private readonly string _value;

        private MinimalTlsVersionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MinimalTlsVersionEnum TLS1_0 { get; } = new MinimalTlsVersionEnum("TLS1_0");
        public static MinimalTlsVersionEnum TLS1_1 { get; } = new MinimalTlsVersionEnum("TLS1_1");
        public static MinimalTlsVersionEnum TLS1_2 { get; } = new MinimalTlsVersionEnum("TLS1_2");
        public static MinimalTlsVersionEnum TLSEnforcementDisabled { get; } = new MinimalTlsVersionEnum("TLSEnforcementDisabled");

        public static bool operator ==(MinimalTlsVersionEnum left, MinimalTlsVersionEnum right) => left.Equals(right);
        public static bool operator !=(MinimalTlsVersionEnum left, MinimalTlsVersionEnum right) => !left.Equals(right);

        public static explicit operator string(MinimalTlsVersionEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalTlsVersionEnum other && Equals(other);
        public bool Equals(MinimalTlsVersionEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessEnum : IEquatable<PublicNetworkAccessEnum>
    {
        private readonly string _value;

        private PublicNetworkAccessEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccessEnum Enabled { get; } = new PublicNetworkAccessEnum("Enabled");
        public static PublicNetworkAccessEnum Disabled { get; } = new PublicNetworkAccessEnum("Disabled");

        public static bool operator ==(PublicNetworkAccessEnum left, PublicNetworkAccessEnum right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessEnum left, PublicNetworkAccessEnum right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessEnum other && Equals(other);
        public bool Equals(PublicNetworkAccessEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server version.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion _6 { get; } = new ServerVersion("5.6");
        public static ServerVersion _7 { get; } = new ServerVersion("5.7");
        public static ServerVersion _0 { get; } = new ServerVersion("8.0");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. Basic.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier GeneralPurpose { get; } = new SkuTier("GeneralPurpose");
        public static SkuTier MemoryOptimized { get; } = new SkuTier("MemoryOptimized");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable ssl enforcement or not when connect to server.
    /// </summary>
    [EnumType]
    public readonly struct SslEnforcementEnum : IEquatable<SslEnforcementEnum>
    {
        private readonly string _value;

        private SslEnforcementEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslEnforcementEnum Enabled { get; } = new SslEnforcementEnum("Enabled");
        public static SslEnforcementEnum Disabled { get; } = new SslEnforcementEnum("Disabled");

        public static bool operator ==(SslEnforcementEnum left, SslEnforcementEnum right) => left.Equals(right);
        public static bool operator !=(SslEnforcementEnum left, SslEnforcementEnum right) => !left.Equals(right);

        public static explicit operator string(SslEnforcementEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslEnforcementEnum other && Equals(other);
        public bool Equals(SslEnforcementEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Storage Auto Grow.
    /// </summary>
    [EnumType]
    public readonly struct StorageAutogrow : IEquatable<StorageAutogrow>
    {
        private readonly string _value;

        private StorageAutogrow(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageAutogrow Enabled { get; } = new StorageAutogrow("Enabled");
        public static StorageAutogrow Disabled { get; } = new StorageAutogrow("Disabled");

        public static bool operator ==(StorageAutogrow left, StorageAutogrow right) => left.Equals(right);
        public static bool operator !=(StorageAutogrow left, StorageAutogrow right) => !left.Equals(right);

        public static explicit operator string(StorageAutogrow value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAutogrow other && Equals(other);
        public bool Equals(StorageAutogrow other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
