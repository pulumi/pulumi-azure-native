// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DBforMySQL.V20240601Preview
{
    /// <summary>
    /// The mode to create a new MySQL server.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        public static CreateMode Replica { get; } = new CreateMode("Replica");
        public static CreateMode GeoRestore { get; } = new CreateMode("GeoRestore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The key type, AzureKeyVault for enable cmk, SystemManaged for disable cmk.
    /// </summary>
    [EnumType]
    public readonly struct DataEncryptionType : IEquatable<DataEncryptionType>
    {
        private readonly string _value;

        private DataEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataEncryptionType AzureKeyVault { get; } = new DataEncryptionType("AzureKeyVault");
        public static DataEncryptionType SystemManaged { get; } = new DataEncryptionType("SystemManaged");

        public static bool operator ==(DataEncryptionType left, DataEncryptionType right) => left.Equals(right);
        public static bool operator !=(DataEncryptionType left, DataEncryptionType right) => !left.Equals(right);

        public static explicit operator string(DataEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataEncryptionType other && Equals(other);
        public bool Equals(DataEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable Log On Disk or not.
    /// </summary>
    [EnumType]
    public readonly struct EnableStatusEnum : IEquatable<EnableStatusEnum>
    {
        private readonly string _value;

        private EnableStatusEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableStatusEnum Enabled { get; } = new EnableStatusEnum("Enabled");
        public static EnableStatusEnum Disabled { get; } = new EnableStatusEnum("Disabled");

        public static bool operator ==(EnableStatusEnum left, EnableStatusEnum right) => left.Equals(right);
        public static bool operator !=(EnableStatusEnum left, EnableStatusEnum right) => !left.Equals(right);

        public static explicit operator string(EnableStatusEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableStatusEnum other && Equals(other);
        public bool Equals(EnableStatusEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// High availability mode for a server.
    /// </summary>
    [EnumType]
    public readonly struct HighAvailabilityMode : IEquatable<HighAvailabilityMode>
    {
        private readonly string _value;

        private HighAvailabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HighAvailabilityMode Disabled { get; } = new HighAvailabilityMode("Disabled");
        public static HighAvailabilityMode ZoneRedundant { get; } = new HighAvailabilityMode("ZoneRedundant");
        public static HighAvailabilityMode SameZone { get; } = new HighAvailabilityMode("SameZone");

        public static bool operator ==(HighAvailabilityMode left, HighAvailabilityMode right) => left.Equals(right);
        public static bool operator !=(HighAvailabilityMode left, HighAvailabilityMode right) => !left.Equals(right);

        public static explicit operator string(HighAvailabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HighAvailabilityMode other && Equals(other);
        public bool Equals(HighAvailabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type of import source.
    /// </summary>
    [EnumType]
    public readonly struct ImportSourceStorageType : IEquatable<ImportSourceStorageType>
    {
        private readonly string _value;

        private ImportSourceStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImportSourceStorageType AzureBlob { get; } = new ImportSourceStorageType("AzureBlob");

        public static bool operator ==(ImportSourceStorageType left, ImportSourceStorageType right) => left.Equals(right);
        public static bool operator !=(ImportSourceStorageType left, ImportSourceStorageType right) => !left.Equals(right);

        public static explicit operator string(ImportSourceStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImportSourceStorageType other && Equals(other);
        public bool Equals(ImportSourceStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The patch strategy of this server
    /// </summary>
    [EnumType]
    public readonly struct PatchStrategy : IEquatable<PatchStrategy>
    {
        private readonly string _value;

        private PatchStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PatchStrategy Regular { get; } = new PatchStrategy("Regular");
        public static PatchStrategy VirtualCanary { get; } = new PatchStrategy("VirtualCanary");

        public static bool operator ==(PatchStrategy left, PatchStrategy right) => left.Equals(right);
        public static bool operator !=(PatchStrategy left, PatchStrategy right) => !left.Equals(right);

        public static explicit operator string(PatchStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PatchStrategy other && Equals(other);
        public bool Equals(PatchStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The replication role.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationRole : IEquatable<ReplicationRole>
    {
        private readonly string _value;

        private ReplicationRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationRole None { get; } = new ReplicationRole("None");
        public static ReplicationRole Source { get; } = new ReplicationRole("Source");
        public static ReplicationRole Replica { get; } = new ReplicationRole("Replica");

        public static bool operator ==(ReplicationRole left, ReplicationRole right) => left.Equals(right);
        public static bool operator !=(ReplicationRole left, ReplicationRole right) => !left.Equals(right);

        public static explicit operator string(ReplicationRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationRole other && Equals(other);
        public bool Equals(ReplicationRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the particular SKU, e.g. GeneralPurpose.
    /// </summary>
    [EnumType]
    public readonly struct ServerSkuTier : IEquatable<ServerSkuTier>
    {
        private readonly string _value;

        private ServerSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerSkuTier Burstable { get; } = new ServerSkuTier("Burstable");
        public static ServerSkuTier GeneralPurpose { get; } = new ServerSkuTier("GeneralPurpose");
        public static ServerSkuTier MemoryOptimized { get; } = new ServerSkuTier("MemoryOptimized");

        public static bool operator ==(ServerSkuTier left, ServerSkuTier right) => left.Equals(right);
        public static bool operator !=(ServerSkuTier left, ServerSkuTier right) => !left.Equals(right);

        public static explicit operator string(ServerSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerSkuTier other && Equals(other);
        public bool Equals(ServerSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server version.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_5_7 { get; } = new ServerVersion("5.7");
        public static ServerVersion ServerVersion_8_0_21 { get; } = new ServerVersion("8.0.21");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The redundant type of the server storage. The parameter is used for server creation.
    /// </summary>
    [EnumType]
    public readonly struct StorageRedundancyEnum : IEquatable<StorageRedundancyEnum>
    {
        private readonly string _value;

        private StorageRedundancyEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageRedundancyEnum LocalRedundancy { get; } = new StorageRedundancyEnum("LocalRedundancy");
        public static StorageRedundancyEnum ZoneRedundancy { get; } = new StorageRedundancyEnum("ZoneRedundancy");

        public static bool operator ==(StorageRedundancyEnum left, StorageRedundancyEnum right) => left.Equals(right);
        public static bool operator !=(StorageRedundancyEnum left, StorageRedundancyEnum right) => !left.Equals(right);

        public static explicit operator string(StorageRedundancyEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageRedundancyEnum other && Equals(other);
        public bool Equals(StorageRedundancyEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
