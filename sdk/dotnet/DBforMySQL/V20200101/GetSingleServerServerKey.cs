// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DBforMySQL.V20200101
{
    public static class GetSingleServerServerKey
    {
        /// <summary>
        /// Gets a MySQL Server key.
        /// </summary>
        public static Task<GetSingleServerServerKeyResult> InvokeAsync(GetSingleServerServerKeyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSingleServerServerKeyResult>("azure-native:dbformysql/v20200101:getSingleServerServerKey", args ?? new GetSingleServerServerKeyArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a MySQL Server key.
        /// </summary>
        public static Output<GetSingleServerServerKeyResult> Invoke(GetSingleServerServerKeyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSingleServerServerKeyResult>("azure-native:dbformysql/v20200101:getSingleServerServerKey", args ?? new GetSingleServerServerKeyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a MySQL Server key.
        /// </summary>
        public static Output<GetSingleServerServerKeyResult> Invoke(GetSingleServerServerKeyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSingleServerServerKeyResult>("azure-native:dbformysql/v20200101:getSingleServerServerKey", args ?? new GetSingleServerServerKeyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSingleServerServerKeyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the MySQL Server key to be retrieved.
        /// </summary>
        [Input("keyName", required: true)]
        public string KeyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetSingleServerServerKeyArgs()
        {
        }
        public static new GetSingleServerServerKeyArgs Empty => new GetSingleServerServerKeyArgs();
    }

    public sealed class GetSingleServerServerKeyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the MySQL Server key to be retrieved.
        /// </summary>
        [Input("keyName", required: true)]
        public Input<string> KeyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetSingleServerServerKeyInvokeArgs()
        {
        }
        public static new GetSingleServerServerKeyInvokeArgs Empty => new GetSingleServerServerKeyInvokeArgs();
    }


    [OutputType]
    public sealed class GetSingleServerServerKeyResult
    {
        /// <summary>
        /// The key creation date.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of encryption protector used to protect the key.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The key type like 'AzureKeyVault'.
        /// </summary>
        public readonly string ServerKeyType;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The URI of the key.
        /// </summary>
        public readonly string? Uri;

        [OutputConstructor]
        private GetSingleServerServerKeyResult(
            string creationDate,

            string id,

            string kind,

            string name,

            string serverKeyType,

            string type,

            string? uri)
        {
            CreationDate = creationDate;
            Id = id;
            Kind = kind;
            Name = name;
            ServerKeyType = serverKeyType;
            Type = type;
            Uri = uri;
        }
    }
}
