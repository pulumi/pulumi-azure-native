// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ
{
    public static class GetMqttBridgeConnector
    {
        /// <summary>
        /// Get a MqttBridgeConnectorResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Task<GetMqttBridgeConnectorResult> InvokeAsync(GetMqttBridgeConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMqttBridgeConnectorResult>("azure-native:iotoperationsmq:getMqttBridgeConnector", args ?? new GetMqttBridgeConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Get a MqttBridgeConnectorResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Output<GetMqttBridgeConnectorResult> Invoke(GetMqttBridgeConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMqttBridgeConnectorResult>("azure-native:iotoperationsmq:getMqttBridgeConnector", args ?? new GetMqttBridgeConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMqttBridgeConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// Name of MQ mqttBridgeConnector resource
        /// </summary>
        [Input("mqttBridgeConnectorName", required: true)]
        public string MqttBridgeConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMqttBridgeConnectorArgs()
        {
        }
        public static new GetMqttBridgeConnectorArgs Empty => new GetMqttBridgeConnectorArgs();
    }

    public sealed class GetMqttBridgeConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// Name of MQ mqttBridgeConnector resource
        /// </summary>
        [Input("mqttBridgeConnectorName", required: true)]
        public Input<string> MqttBridgeConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMqttBridgeConnectorInvokeArgs()
        {
        }
        public static new GetMqttBridgeConnectorInvokeArgs Empty => new GetMqttBridgeConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetMqttBridgeConnectorResult
    {
        /// <summary>
        /// The number of instances to deploy for a bridge rollout.
        /// </summary>
        public readonly int? BridgeInstances;
        /// <summary>
        /// The client id prefix of the dynamically generated client ids.
        /// </summary>
        public readonly string? ClientIdPrefix;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The details of MqttBridge Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse Image;
        /// <summary>
        /// The details for connecting with Local Broker.
        /// </summary>
        public readonly Outputs.LocalBrokerConnectionSpecResponse? LocalBrokerConnection;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The log level of the Bridge Connector instances.
        /// </summary>
        public readonly string? LogLevel;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Node Tolerations for the Bridge Connector pods.
        /// </summary>
        public readonly Outputs.NodeTolerationsResponse? NodeTolerations;
        /// <summary>
        /// The protocol to use for connecting with Brokers.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The details for connecting with Remote Broker.
        /// </summary>
        public readonly Outputs.MqttBridgeRemoteBrokerConnectionSpecResponse RemoteBrokerConnection;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMqttBridgeConnectorResult(
            int? bridgeInstances,

            string? clientIdPrefix,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            Outputs.ContainerImageResponse image,

            Outputs.LocalBrokerConnectionSpecResponse? localBrokerConnection,

            string location,

            string? logLevel,

            string name,

            Outputs.NodeTolerationsResponse? nodeTolerations,

            string protocol,

            string provisioningState,

            Outputs.MqttBridgeRemoteBrokerConnectionSpecResponse remoteBrokerConnection,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BridgeInstances = bridgeInstances;
            ClientIdPrefix = clientIdPrefix;
            ExtendedLocation = extendedLocation;
            Id = id;
            Image = image;
            LocalBrokerConnection = localBrokerConnection;
            Location = location;
            LogLevel = logLevel;
            Name = name;
            NodeTolerations = nodeTolerations;
            Protocol = protocol;
            ProvisioningState = provisioningState;
            RemoteBrokerConnection = remoteBrokerConnection;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
