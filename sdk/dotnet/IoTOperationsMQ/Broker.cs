// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ
{
    /// <summary>
    /// MQ broker resource
    /// Azure REST API version: 2023-10-04-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:iotoperationsmq:Broker")]
    public partial class Broker : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The details of Authentication Docker Image.
        /// </summary>
        [Output("authImage")]
        public Output<Outputs.ContainerImageResponse> AuthImage { get; private set; } = null!;

        /// <summary>
        /// The details of Broker Docker Image.
        /// </summary>
        [Output("brokerImage")]
        public Output<Outputs.ContainerImageResponse> BrokerImage { get; private set; } = null!;

        /// <summary>
        /// The details of Node Tolerations for Broker Pods.
        /// </summary>
        [Output("brokerNodeTolerations")]
        public Output<Outputs.NodeTolerationsResponse?> BrokerNodeTolerations { get; private set; } = null!;

        /// <summary>
        /// The cardinality details of the broker.
        /// </summary>
        [Output("cardinality")]
        public Output<Outputs.CardinalityResponse?> Cardinality { get; private set; } = null!;

        /// <summary>
        /// The diagnostic details of the broker deployment.
        /// </summary>
        [Output("diagnostics")]
        public Output<Outputs.BrokerDiagnosticsResponse?> Diagnostics { get; private set; } = null!;

        /// <summary>
        /// The settings of the disk-backed message buffer.
        /// </summary>
        [Output("diskBackedMessageBufferSettings")]
        public Output<Outputs.DiskBackedMessageBufferSettingsResponse?> DiskBackedMessageBufferSettings { get; private set; } = null!;

        /// <summary>
        /// The setting to enable or disable encryption of internal Traffic.
        /// </summary>
        [Output("encryptInternalTraffic")]
        public Output<bool?> EncryptInternalTraffic { get; private set; } = null!;

        /// <summary>
        /// Extended Location
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationPropertyResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The details of Health Manager Docker Image.
        /// </summary>
        [Output("healthManagerImage")]
        public Output<Outputs.ContainerImageResponse> HealthManagerImage { get; private set; } = null!;

        /// <summary>
        /// The details of Node Tolerations for Health Manager Pods.
        /// </summary>
        [Output("healthManagerNodeTolerations")]
        public Output<Outputs.NodeTolerationsResponse?> HealthManagerNodeTolerations { get; private set; } = null!;

        /// <summary>
        /// Details of the internal CA cert that will be used to secure communication between pods.
        /// </summary>
        [Output("internalCerts")]
        public Output<Outputs.CertManagerCertOptionsResponse?> InternalCerts { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Memory profile of broker.
        /// </summary>
        [Output("memoryProfile")]
        public Output<string?> MemoryProfile { get; private set; } = null!;

        /// <summary>
        /// The Running Mode of the Broker Deployment.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the last operation.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Broker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Broker(string name, BrokerArgs args, CustomResourceOptions? options = null)
            : base("azure-native:iotoperationsmq:Broker", name, args ?? new BrokerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Broker(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:iotoperationsmq:Broker", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:iotoperationsmq/v20231004preview:Broker" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Broker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Broker Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Broker(name, id, options);
        }
    }

    public sealed class BrokerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The details of Authentication Docker Image.
        /// </summary>
        [Input("authImage", required: true)]
        public Input<Inputs.ContainerImageArgs> AuthImage { get; set; } = null!;

        /// <summary>
        /// The details of Broker Docker Image.
        /// </summary>
        [Input("brokerImage", required: true)]
        public Input<Inputs.ContainerImageArgs> BrokerImage { get; set; } = null!;

        /// <summary>
        /// Name of MQ broker resource
        /// </summary>
        [Input("brokerName")]
        public Input<string>? BrokerName { get; set; }

        /// <summary>
        /// The details of Node Tolerations for Broker Pods.
        /// </summary>
        [Input("brokerNodeTolerations")]
        public Input<Inputs.NodeTolerationsArgs>? BrokerNodeTolerations { get; set; }

        /// <summary>
        /// The cardinality details of the broker.
        /// </summary>
        [Input("cardinality")]
        public Input<Inputs.CardinalityArgs>? Cardinality { get; set; }

        /// <summary>
        /// The diagnostic details of the broker deployment.
        /// </summary>
        [Input("diagnostics")]
        public Input<Inputs.BrokerDiagnosticsArgs>? Diagnostics { get; set; }

        /// <summary>
        /// The settings of the disk-backed message buffer.
        /// </summary>
        [Input("diskBackedMessageBufferSettings")]
        public Input<Inputs.DiskBackedMessageBufferSettingsArgs>? DiskBackedMessageBufferSettings { get; set; }

        /// <summary>
        /// The setting to enable or disable encryption of internal Traffic.
        /// </summary>
        [Input("encryptInternalTraffic")]
        public Input<bool>? EncryptInternalTraffic { get; set; }

        /// <summary>
        /// Extended Location
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationPropertyArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// The details of Health Manager Docker Image.
        /// </summary>
        [Input("healthManagerImage", required: true)]
        public Input<Inputs.ContainerImageArgs> HealthManagerImage { get; set; } = null!;

        /// <summary>
        /// The details of Node Tolerations for Health Manager Pods.
        /// </summary>
        [Input("healthManagerNodeTolerations")]
        public Input<Inputs.NodeTolerationsArgs>? HealthManagerNodeTolerations { get; set; }

        /// <summary>
        /// Details of the internal CA cert that will be used to secure communication between pods.
        /// </summary>
        [Input("internalCerts")]
        public Input<Inputs.CertManagerCertOptionsArgs>? InternalCerts { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Memory profile of broker.
        /// </summary>
        [Input("memoryProfile")]
        public InputUnion<string, Pulumi.AzureNative.IoTOperationsMQ.BrokerMemoryProfile>? MemoryProfile { get; set; }

        /// <summary>
        /// The Running Mode of the Broker Deployment.
        /// </summary>
        [Input("mode", required: true)]
        public InputUnion<string, Pulumi.AzureNative.IoTOperationsMQ.RunMode> Mode { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public BrokerArgs()
        {
            EncryptInternalTraffic = true;
            MemoryProfile = "medium";
        }
        public static new BrokerArgs Empty => new BrokerArgs();
    }
}
