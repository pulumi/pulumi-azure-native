// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview
{
    public static class GetBroker
    {
        /// <summary>
        /// Get a BrokerResource
        /// </summary>
        public static Task<GetBrokerResult> InvokeAsync(GetBrokerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBrokerResult>("azure-native:iotoperationsmq/v20231004preview:getBroker", args ?? new GetBrokerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a BrokerResource
        /// </summary>
        public static Output<GetBrokerResult> Invoke(GetBrokerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrokerResult>("azure-native:iotoperationsmq/v20231004preview:getBroker", args ?? new GetBrokerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBrokerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ broker resource
        /// </summary>
        [Input("brokerName", required: true)]
        public string BrokerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBrokerArgs()
        {
        }
        public static new GetBrokerArgs Empty => new GetBrokerArgs();
    }

    public sealed class GetBrokerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ broker resource
        /// </summary>
        [Input("brokerName", required: true)]
        public Input<string> BrokerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBrokerInvokeArgs()
        {
        }
        public static new GetBrokerInvokeArgs Empty => new GetBrokerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBrokerResult
    {
        /// <summary>
        /// The details of Authentication Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse AuthImage;
        /// <summary>
        /// The details of Broker Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse BrokerImage;
        /// <summary>
        /// The details of Node Tolerations for Broker Pods.
        /// </summary>
        public readonly Outputs.NodeTolerationsResponse? BrokerNodeTolerations;
        /// <summary>
        /// The cardinality details of the broker.
        /// </summary>
        public readonly Outputs.CardinalityResponse? Cardinality;
        /// <summary>
        /// The diagnostic details of the broker deployment.
        /// </summary>
        public readonly Outputs.BrokerDiagnosticsResponse? Diagnostics;
        /// <summary>
        /// The settings of the disk-backed message buffer.
        /// </summary>
        public readonly Outputs.DiskBackedMessageBufferSettingsResponse? DiskBackedMessageBufferSettings;
        /// <summary>
        /// The setting to enable or disable encryption of internal Traffic.
        /// </summary>
        public readonly bool? EncryptInternalTraffic;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// The details of Health Manager Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse HealthManagerImage;
        /// <summary>
        /// The details of Node Tolerations for Health Manager Pods.
        /// </summary>
        public readonly Outputs.NodeTolerationsResponse? HealthManagerNodeTolerations;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Details of the internal CA cert that will be used to secure communication between pods.
        /// </summary>
        public readonly Outputs.CertManagerCertOptionsResponse? InternalCerts;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Memory profile of broker.
        /// </summary>
        public readonly string? MemoryProfile;
        /// <summary>
        /// The Running Mode of the Broker Deployment.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBrokerResult(
            Outputs.ContainerImageResponse authImage,

            Outputs.ContainerImageResponse brokerImage,

            Outputs.NodeTolerationsResponse? brokerNodeTolerations,

            Outputs.CardinalityResponse? cardinality,

            Outputs.BrokerDiagnosticsResponse? diagnostics,

            Outputs.DiskBackedMessageBufferSettingsResponse? diskBackedMessageBufferSettings,

            bool? encryptInternalTraffic,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            Outputs.ContainerImageResponse healthManagerImage,

            Outputs.NodeTolerationsResponse? healthManagerNodeTolerations,

            string id,

            Outputs.CertManagerCertOptionsResponse? internalCerts,

            string location,

            string? memoryProfile,

            string mode,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AuthImage = authImage;
            BrokerImage = brokerImage;
            BrokerNodeTolerations = brokerNodeTolerations;
            Cardinality = cardinality;
            Diagnostics = diagnostics;
            DiskBackedMessageBufferSettings = diskBackedMessageBufferSettings;
            EncryptInternalTraffic = encryptInternalTraffic;
            ExtendedLocation = extendedLocation;
            HealthManagerImage = healthManagerImage;
            HealthManagerNodeTolerations = healthManagerNodeTolerations;
            Id = id;
            InternalCerts = internalCerts;
            Location = location;
            MemoryProfile = memoryProfile;
            Mode = mode;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
