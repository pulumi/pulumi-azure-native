// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview
{
    public static class GetBrokerListener
    {
        /// <summary>
        /// Get a BrokerListenerResource
        /// </summary>
        public static Task<GetBrokerListenerResult> InvokeAsync(GetBrokerListenerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBrokerListenerResult>("azure-native:iotoperationsmq/v20231004preview:getBrokerListener", args ?? new GetBrokerListenerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a BrokerListenerResource
        /// </summary>
        public static Output<GetBrokerListenerResult> Invoke(GetBrokerListenerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrokerListenerResult>("azure-native:iotoperationsmq/v20231004preview:getBrokerListener", args ?? new GetBrokerListenerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBrokerListenerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ broker resource
        /// </summary>
        [Input("brokerName", required: true)]
        public string BrokerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ broker/listener resource
        /// </summary>
        [Input("listenerName", required: true)]
        public string ListenerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBrokerListenerArgs()
        {
        }
        public static new GetBrokerListenerArgs Empty => new GetBrokerListenerArgs();
    }

    public sealed class GetBrokerListenerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ broker resource
        /// </summary>
        [Input("brokerName", required: true)]
        public Input<string> BrokerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ broker/listener resource
        /// </summary>
        [Input("listenerName", required: true)]
        public Input<string> ListenerName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBrokerListenerInvokeArgs()
        {
        }
        public static new GetBrokerListenerInvokeArgs Empty => new GetBrokerListenerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBrokerListenerResult
    {
        /// <summary>
        /// The flag for enabling Authentication rules on Listener Port.
        /// </summary>
        public readonly bool? AuthenticationEnabled;
        /// <summary>
        /// The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.
        /// </summary>
        public readonly bool? AuthorizationEnabled;
        /// <summary>
        /// The k8s cr/resource reference of mq/broker.
        /// </summary>
        public readonly string BrokerRef;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The node port to use on the Host node.
        /// </summary>
        public readonly int? NodePort;
        /// <summary>
        /// The port to start Listening for connections on.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The service name to expose Listener port on.
        /// </summary>
        public readonly string? ServiceName;
        /// <summary>
        /// The Kubernetes Service type to deploy for Listener.
        /// </summary>
        public readonly string? ServiceType;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported
        /// </summary>
        public readonly Outputs.TlsCertMethodResponse? Tls;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBrokerListenerResult(
            bool? authenticationEnabled,

            bool? authorizationEnabled,

            string brokerRef,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            string location,

            string name,

            int? nodePort,

            int port,

            string provisioningState,

            string? serviceName,

            string? serviceType,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.TlsCertMethodResponse? tls,

            string type)
        {
            AuthenticationEnabled = authenticationEnabled;
            AuthorizationEnabled = authorizationEnabled;
            BrokerRef = brokerRef;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            NodePort = nodePort;
            Port = port;
            ProvisioningState = provisioningState;
            ServiceName = serviceName;
            ServiceType = serviceType;
            SystemData = systemData;
            Tags = tags;
            Tls = tls;
            Type = type;
        }
    }
}
