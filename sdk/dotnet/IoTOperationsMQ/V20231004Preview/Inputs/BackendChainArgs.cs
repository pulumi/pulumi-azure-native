// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview.Inputs
{

    /// <summary>
    /// Desired properties of the Frontend Instances of the DMQTT Broker
    /// </summary>
    public sealed class BackendChainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
        /// </summary>
        [Input("partitions", required: true)]
        public Input<int> Partitions { get; set; } = null!;

        /// <summary>
        /// Redundancy Factor is desired numbers of broker instances in one chain.
        /// </summary>
        [Input("redundancyFactor", required: true)]
        public Input<int> RedundancyFactor { get; set; } = null!;

        /// <summary>
        /// Defines whether disk transfer is enabled or not.
        /// </summary>
        [Input("temporaryDiskTransferEnabled")]
        public Input<bool>? TemporaryDiskTransferEnabled { get; set; }

        /// <summary>
        /// Defines the percentage usage of buffer pool above which disk transfer will start.
        /// </summary>
        [Input("temporaryDiskTransferHighWatermarkPercent")]
        public Input<int>? TemporaryDiskTransferHighWatermarkPercent { get; set; }

        /// <summary>
        /// Defines the percentage usage of buffer pool below which disk transfer will stop.
        /// </summary>
        [Input("temporaryDiskTransferLowWatermarkPercent")]
        public Input<int>? TemporaryDiskTransferLowWatermarkPercent { get; set; }

        /// <summary>
        /// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
        /// </summary>
        [Input("temporaryMaxBackendMemUsagePercent")]
        public Input<int>? TemporaryMaxBackendMemUsagePercent { get; set; }

        /// <summary>
        /// Defines the limits for resources of the backend instances of the MQTT broker.
        /// </summary>
        [Input("temporaryResourceLimits")]
        public Input<Inputs.TemporaryResourceLimitsConfigArgs>? TemporaryResourceLimits { get; set; }

        /// <summary>
        /// Number of logical backend workers per pod.
        /// </summary>
        [Input("workers")]
        public Input<int>? Workers { get; set; }

        public BackendChainArgs()
        {
            Workers = 1;
        }
        public static new BackendChainArgs Empty => new BackendChainArgs();
    }
}
