// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview
{
    public static class GetKafkaConnectorTopicMap
    {
        /// <summary>
        /// Get a KafkaTopicMapResource
        /// </summary>
        public static Task<GetKafkaConnectorTopicMapResult> InvokeAsync(GetKafkaConnectorTopicMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKafkaConnectorTopicMapResult>("azure-native:iotoperationsmq/v20231004preview:getKafkaConnectorTopicMap", args ?? new GetKafkaConnectorTopicMapArgs(), options.WithDefaults());

        /// <summary>
        /// Get a KafkaTopicMapResource
        /// </summary>
        public static Output<GetKafkaConnectorTopicMapResult> Invoke(GetKafkaConnectorTopicMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKafkaConnectorTopicMapResult>("azure-native:iotoperationsmq/v20231004preview:getKafkaConnectorTopicMap", args ?? new GetKafkaConnectorTopicMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaConnectorTopicMapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ kafkaConnector resource
        /// </summary>
        [Input("kafkaConnectorName", required: true)]
        public string KafkaConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of MQ kafka/topicMap resource
        /// </summary>
        [Input("topicMapName", required: true)]
        public string TopicMapName { get; set; } = null!;

        public GetKafkaConnectorTopicMapArgs()
        {
        }
        public static new GetKafkaConnectorTopicMapArgs Empty => new GetKafkaConnectorTopicMapArgs();
    }

    public sealed class GetKafkaConnectorTopicMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ kafkaConnector resource
        /// </summary>
        [Input("kafkaConnectorName", required: true)]
        public Input<string> KafkaConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of MQ kafka/topicMap resource
        /// </summary>
        [Input("topicMapName", required: true)]
        public Input<string> TopicMapName { get; set; } = null!;

        public GetKafkaConnectorTopicMapInvokeArgs()
        {
        }
        public static new GetKafkaConnectorTopicMapInvokeArgs Empty => new GetKafkaConnectorTopicMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetKafkaConnectorTopicMapResult
    {
        /// <summary>
        /// The batching settings for kafka messages.
        /// </summary>
        public readonly Outputs.KafkaTopicMapBatchingResponse? Batching;
        /// <summary>
        /// The compression to use for kafka messages.
        /// </summary>
        public readonly string? Compression;
        /// <summary>
        /// The flag to copy Mqtt properties.
        /// </summary>
        public readonly string? CopyMqttProperties;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kafkaConnector CRD it refers to.
        /// </summary>
        public readonly string KafkaConnectorRef;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The partition to use for Kafka.
        /// </summary>
        public readonly string? PartitionKeyProperty;
        /// <summary>
        /// The partition strategy to use for Kafka.
        /// </summary>
        public readonly string? PartitionStrategy;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The route details for Kafka connector.
        /// </summary>
        public readonly ImmutableArray<Outputs.KafkaRoutesResponse> Routes;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetKafkaConnectorTopicMapResult(
            Outputs.KafkaTopicMapBatchingResponse? batching,

            string? compression,

            string? copyMqttProperties,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            string kafkaConnectorRef,

            string location,

            string name,

            string? partitionKeyProperty,

            string? partitionStrategy,

            string provisioningState,

            ImmutableArray<Outputs.KafkaRoutesResponse> routes,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Batching = batching;
            Compression = compression;
            CopyMqttProperties = copyMqttProperties;
            ExtendedLocation = extendedLocation;
            Id = id;
            KafkaConnectorRef = kafkaConnectorRef;
            Location = location;
            Name = name;
            PartitionKeyProperty = partitionKeyProperty;
            PartitionStrategy = partitionStrategy;
            ProvisioningState = provisioningState;
            Routes = routes;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
