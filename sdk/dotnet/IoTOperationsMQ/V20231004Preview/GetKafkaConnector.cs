// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview
{
    public static class GetKafkaConnector
    {
        /// <summary>
        /// Get a KafkaConnectorResource
        /// </summary>
        public static Task<GetKafkaConnectorResult> InvokeAsync(GetKafkaConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKafkaConnectorResult>("azure-native:iotoperationsmq/v20231004preview:getKafkaConnector", args ?? new GetKafkaConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Get a KafkaConnectorResource
        /// </summary>
        public static Output<GetKafkaConnectorResult> Invoke(GetKafkaConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKafkaConnectorResult>("azure-native:iotoperationsmq/v20231004preview:getKafkaConnector", args ?? new GetKafkaConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKafkaConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ kafkaConnector resource
        /// </summary>
        [Input("kafkaConnectorName", required: true)]
        public string KafkaConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKafkaConnectorArgs()
        {
        }
        public static new GetKafkaConnectorArgs Empty => new GetKafkaConnectorArgs();
    }

    public sealed class GetKafkaConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ kafkaConnector resource
        /// </summary>
        [Input("kafkaConnectorName", required: true)]
        public Input<string> KafkaConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKafkaConnectorInvokeArgs()
        {
        }
        public static new GetKafkaConnectorInvokeArgs Empty => new GetKafkaConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetKafkaConnectorResult
    {
        /// <summary>
        /// The client id prefix of the dynamically generated client ids.
        /// </summary>
        public readonly string? ClientIdPrefix;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The details of KafkaConnector Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse? Image;
        /// <summary>
        /// The number of KafkaConnector pods to spin up.
        /// </summary>
        public readonly int? Instances;
        /// <summary>
        /// The details for connecting with Remote Kafka Broker.
        /// </summary>
        public readonly Outputs.KafkaRemoteBrokerConnectionSpecResponse KafkaConnection;
        /// <summary>
        /// The details for connecting with Local Broker.
        /// </summary>
        public readonly Outputs.LocalBrokerConnectionSpecResponse? LocalBrokerConnection;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The log level of the Bridge Connector instances.
        /// </summary>
        public readonly string? LogLevel;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Node Tolerations for the Bridge Connector pods.
        /// </summary>
        public readonly Outputs.NodeTolerationsResponse? NodeTolerations;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetKafkaConnectorResult(
            string? clientIdPrefix,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            Outputs.ContainerImageResponse? image,

            int? instances,

            Outputs.KafkaRemoteBrokerConnectionSpecResponse kafkaConnection,

            Outputs.LocalBrokerConnectionSpecResponse? localBrokerConnection,

            string location,

            string? logLevel,

            string name,

            Outputs.NodeTolerationsResponse? nodeTolerations,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ClientIdPrefix = clientIdPrefix;
            ExtendedLocation = extendedLocation;
            Id = id;
            Image = image;
            Instances = instances;
            KafkaConnection = kafkaConnection;
            LocalBrokerConnection = localBrokerConnection;
            Location = location;
            LogLevel = logLevel;
            Name = name;
            NodeTolerations = nodeTolerations;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
