// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview.Outputs
{

    /// <summary>
    /// Desired properties of the Frontend Instances of the DMQTT Broker
    /// </summary>
    [OutputType]
    public sealed class BackendChainResponse
    {
        /// <summary>
        /// Partitions is desired number of physical backend chains of the given distributed MQTT broker.
        /// </summary>
        public readonly int Partitions;
        /// <summary>
        /// Redundancy Factor is desired numbers of broker instances in one chain.
        /// </summary>
        public readonly int RedundancyFactor;
        /// <summary>
        /// Defines whether disk transfer is enabled or not.
        /// </summary>
        public readonly bool? TemporaryDiskTransferEnabled;
        /// <summary>
        /// Defines the percentage usage of buffer pool above which disk transfer will start.
        /// </summary>
        public readonly int? TemporaryDiskTransferHighWatermarkPercent;
        /// <summary>
        /// Defines the percentage usage of buffer pool below which disk transfer will stop.
        /// </summary>
        public readonly int? TemporaryDiskTransferLowWatermarkPercent;
        /// <summary>
        /// Defines the limits for memory usage percent of the backend instances of the MQTT broker.
        /// </summary>
        public readonly int? TemporaryMaxBackendMemUsagePercent;
        /// <summary>
        /// Defines the limits for resources of the backend instances of the MQTT broker.
        /// </summary>
        public readonly Outputs.TemporaryResourceLimitsConfigResponse? TemporaryResourceLimits;
        /// <summary>
        /// Number of logical backend workers per pod.
        /// </summary>
        public readonly int? Workers;

        [OutputConstructor]
        private BackendChainResponse(
            int partitions,

            int redundancyFactor,

            bool? temporaryDiskTransferEnabled,

            int? temporaryDiskTransferHighWatermarkPercent,

            int? temporaryDiskTransferLowWatermarkPercent,

            int? temporaryMaxBackendMemUsagePercent,

            Outputs.TemporaryResourceLimitsConfigResponse? temporaryResourceLimits,

            int? workers)
        {
            Partitions = partitions;
            RedundancyFactor = redundancyFactor;
            TemporaryDiskTransferEnabled = temporaryDiskTransferEnabled;
            TemporaryDiskTransferHighWatermarkPercent = temporaryDiskTransferHighWatermarkPercent;
            TemporaryDiskTransferLowWatermarkPercent = temporaryDiskTransferLowWatermarkPercent;
            TemporaryMaxBackendMemUsagePercent = temporaryMaxBackendMemUsagePercent;
            TemporaryResourceLimits = temporaryResourceLimits;
            Workers = workers;
        }
    }
}
