// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.V20231004Preview.Outputs
{

    /// <summary>
    /// Diagnostics setting specific to Broker
    /// </summary>
    [OutputType]
    public sealed class BrokerDiagnosticsResponse
    {
        /// <summary>
        /// Diagnostic Service endpoint
        /// </summary>
        public readonly string? DiagnosticServiceEndpoint;
        /// <summary>
        /// Knob to enable/disable metrics. Default = true
        /// </summary>
        public readonly bool? EnableMetrics;
        /// <summary>
        /// Enable self check on Broker via Probe.
        /// </summary>
        public readonly bool? EnableSelfCheck;
        /// <summary>
        /// Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.
        /// </summary>
        public readonly bool? EnableSelfTracing;
        /// <summary>
        /// Knob to enable/disable entire tracing infrastructure.
        /// </summary>
        public readonly bool? EnableTracing;
        /// <summary>
        /// Format for the logs generated.
        /// </summary>
        public readonly string? LogFormat;
        /// <summary>
        /// Log level for the Broker.
        /// </summary>
        public readonly string? LogLevel;
        /// <summary>
        /// Maximum time for the CellMap to live.
        /// </summary>
        public readonly double? MaxCellMapLifetime;
        /// <summary>
        /// Metric update frequency in seconds.
        /// </summary>
        public readonly double? MetricUpdateFrequencySeconds;
        /// <summary>
        /// Probe Image to run.
        /// </summary>
        public readonly string? ProbeImage;
        /// <summary>
        /// Frequency for the self check to run.
        /// </summary>
        public readonly double? SelfCheckFrequencySeconds;
        /// <summary>
        /// Time out period of the self check.
        /// </summary>
        public readonly double? SelfCheckTimeoutSeconds;
        /// <summary>
        /// The frequency at which selfTrace should run.
        /// </summary>
        public readonly double? SelfTraceFrequencySeconds;
        /// <summary>
        /// The number of the spans generated by the Tracing.
        /// </summary>
        public readonly double? SpanChannelCapacity;

        [OutputConstructor]
        private BrokerDiagnosticsResponse(
            string? diagnosticServiceEndpoint,

            bool? enableMetrics,

            bool? enableSelfCheck,

            bool? enableSelfTracing,

            bool? enableTracing,

            string? logFormat,

            string? logLevel,

            double? maxCellMapLifetime,

            double? metricUpdateFrequencySeconds,

            string? probeImage,

            double? selfCheckFrequencySeconds,

            double? selfCheckTimeoutSeconds,

            double? selfTraceFrequencySeconds,

            double? spanChannelCapacity)
        {
            DiagnosticServiceEndpoint = diagnosticServiceEndpoint;
            EnableMetrics = enableMetrics;
            EnableSelfCheck = enableSelfCheck;
            EnableSelfTracing = enableSelfTracing;
            EnableTracing = enableTracing;
            LogFormat = logFormat;
            LogLevel = logLevel;
            MaxCellMapLifetime = maxCellMapLifetime;
            MetricUpdateFrequencySeconds = metricUpdateFrequencySeconds;
            ProbeImage = probeImage;
            SelfCheckFrequencySeconds = selfCheckFrequencySeconds;
            SelfCheckTimeoutSeconds = selfCheckTimeoutSeconds;
            SelfTraceFrequencySeconds = selfTraceFrequencySeconds;
            SpanChannelCapacity = spanChannelCapacity;
        }
    }
}
