// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ
{
    public static class GetDataLakeConnectorTopicMap
    {
        /// <summary>
        /// Get a DataLakeTopicMapResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Task<GetDataLakeConnectorTopicMapResult> InvokeAsync(GetDataLakeConnectorTopicMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataLakeConnectorTopicMapResult>("azure-native:iotoperationsmq:getDataLakeConnectorTopicMap", args ?? new GetDataLakeConnectorTopicMapArgs(), options.WithDefaults());

        /// <summary>
        /// Get a DataLakeTopicMapResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Output<GetDataLakeConnectorTopicMapResult> Invoke(GetDataLakeConnectorTopicMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataLakeConnectorTopicMapResult>("azure-native:iotoperationsmq:getDataLakeConnectorTopicMap", args ?? new GetDataLakeConnectorTopicMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataLakeConnectorTopicMapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ dataLakeConnector resource
        /// </summary>
        [Input("dataLakeConnectorName", required: true)]
        public string DataLakeConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of MQ dataLakeConnector/topicMap resource
        /// </summary>
        [Input("topicMapName", required: true)]
        public string TopicMapName { get; set; } = null!;

        public GetDataLakeConnectorTopicMapArgs()
        {
        }
        public static new GetDataLakeConnectorTopicMapArgs Empty => new GetDataLakeConnectorTopicMapArgs();
    }

    public sealed class GetDataLakeConnectorTopicMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ dataLakeConnector resource
        /// </summary>
        [Input("dataLakeConnectorName", required: true)]
        public Input<string> DataLakeConnectorName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of MQ dataLakeConnector/topicMap resource
        /// </summary>
        [Input("topicMapName", required: true)]
        public Input<string> TopicMapName { get; set; } = null!;

        public GetDataLakeConnectorTopicMapInvokeArgs()
        {
        }
        public static new GetDataLakeConnectorTopicMapInvokeArgs Empty => new GetDataLakeConnectorTopicMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataLakeConnectorTopicMapResult
    {
        /// <summary>
        /// DataLake Connector CRD to use.
        /// </summary>
        public readonly string DataLakeConnectorRef;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// TopicMap for DataLake connector.
        /// </summary>
        public readonly Outputs.DataLakeConnectorMapResponse Mapping;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDataLakeConnectorTopicMapResult(
            string dataLakeConnectorRef,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            string location,

            Outputs.DataLakeConnectorMapResponse mapping,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataLakeConnectorRef = dataLakeConnectorRef;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Mapping = mapping;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
