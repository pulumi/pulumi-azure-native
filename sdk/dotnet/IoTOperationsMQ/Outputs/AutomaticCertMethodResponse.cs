// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ.Outputs
{

    /// <summary>
    /// Automatic TLS server certificate management with cert-manager
    /// </summary>
    [OutputType]
    public sealed class AutomaticCertMethodResponse
    {
        /// <summary>
        /// Lifetime of automatically-managed certificate.
        /// </summary>
        public readonly string? Duration;
        /// <summary>
        /// cert-manager issuerRef.
        /// </summary>
        public readonly Outputs.CertManagerIssuerRefResponse IssuerRef;
        /// <summary>
        /// Cert Manager private key.
        /// </summary>
        public readonly Outputs.CertManagerPrivateKeyResponse? PrivateKey;
        /// <summary>
        /// When to begin renewing automatically-managed certificate.
        /// </summary>
        public readonly string? RenewBefore;
        /// <summary>
        /// Additional SANs to include in the certificate.
        /// </summary>
        public readonly Outputs.SanForCertResponse? San;
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten.
        /// </summary>
        public readonly string? SecretName;
        /// <summary>
        /// Certificate K8S namespace. Omit to use default namespace.
        /// </summary>
        public readonly string? SecretNamespace;

        [OutputConstructor]
        private AutomaticCertMethodResponse(
            string? duration,

            Outputs.CertManagerIssuerRefResponse issuerRef,

            Outputs.CertManagerPrivateKeyResponse? privateKey,

            string? renewBefore,

            Outputs.SanForCertResponse? san,

            string? secretName,

            string? secretNamespace)
        {
            Duration = duration;
            IssuerRef = issuerRef;
            PrivateKey = privateKey;
            RenewBefore = renewBefore;
            San = san;
            SecretName = secretName;
            SecretNamespace = secretNamespace;
        }
    }
}
