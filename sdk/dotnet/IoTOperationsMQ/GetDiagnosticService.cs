// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.IoTOperationsMQ
{
    public static class GetDiagnosticService
    {
        /// <summary>
        /// Get a DiagnosticServiceResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Task<GetDiagnosticServiceResult> InvokeAsync(GetDiagnosticServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiagnosticServiceResult>("azure-native:iotoperationsmq:getDiagnosticService", args ?? new GetDiagnosticServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get a DiagnosticServiceResource
        /// Azure REST API version: 2023-10-04-preview.
        /// </summary>
        public static Output<GetDiagnosticServiceResult> Invoke(GetDiagnosticServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiagnosticServiceResult>("azure-native:iotoperationsmq:getDiagnosticService", args ?? new GetDiagnosticServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiagnosticServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ diagnostic resource
        /// </summary>
        [Input("diagnosticServiceName", required: true)]
        public string DiagnosticServiceName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public string MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiagnosticServiceArgs()
        {
        }
        public static new GetDiagnosticServiceArgs Empty => new GetDiagnosticServiceArgs();
    }

    public sealed class GetDiagnosticServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of MQ diagnostic resource
        /// </summary>
        [Input("diagnosticServiceName", required: true)]
        public Input<string> DiagnosticServiceName { get; set; } = null!;

        /// <summary>
        /// Name of MQ resource
        /// </summary>
        [Input("mqName", required: true)]
        public Input<string> MqName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDiagnosticServiceInvokeArgs()
        {
        }
        public static new GetDiagnosticServiceInvokeArgs Empty => new GetDiagnosticServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiagnosticServiceResult
    {
        /// <summary>
        /// The frequency at which the data will be exported.
        /// </summary>
        public readonly int? DataExportFrequencySeconds;
        /// <summary>
        /// Extended Location
        /// </summary>
        public readonly Outputs.ExtendedLocationPropertyResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The details of Diagnostic Service Docker Image.
        /// </summary>
        public readonly Outputs.ContainerImageResponse Image;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The format for the logs generated.
        /// </summary>
        public readonly string? LogFormat;
        /// <summary>
        /// The format for the logs generated.
        /// </summary>
        public readonly string? LogLevel;
        /// <summary>
        /// The maximum data stored in MiB.
        /// </summary>
        public readonly double? MaxDataStorageSize;
        /// <summary>
        /// The port at which metrics is exposed.
        /// </summary>
        public readonly int? MetricsPort;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The destination to collect traces. Diagnostic service will push traces to this endpoint
        /// </summary>
        public readonly string? OpenTelemetryTracesCollectorAddr;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metric inactivity timeout.
        /// </summary>
        public readonly int? StaleDataTimeoutSeconds;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDiagnosticServiceResult(
            int? dataExportFrequencySeconds,

            Outputs.ExtendedLocationPropertyResponse extendedLocation,

            string id,

            Outputs.ContainerImageResponse image,

            string location,

            string? logFormat,

            string? logLevel,

            double? maxDataStorageSize,

            int? metricsPort,

            string name,

            string? openTelemetryTracesCollectorAddr,

            string provisioningState,

            int? staleDataTimeoutSeconds,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataExportFrequencySeconds = dataExportFrequencySeconds;
            ExtendedLocation = extendedLocation;
            Id = id;
            Image = image;
            Location = location;
            LogFormat = logFormat;
            LogLevel = logLevel;
            MaxDataStorageSize = maxDataStorageSize;
            MetricsPort = metricsPort;
            Name = name;
            OpenTelemetryTracesCollectorAddr = openTelemetryTracesCollectorAddr;
            ProvisioningState = provisioningState;
            StaleDataTimeoutSeconds = staleDataTimeoutSeconds;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
