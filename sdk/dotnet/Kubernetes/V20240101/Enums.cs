// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Kubernetes.V20240101
{
    /// <summary>
    /// The mode of client authentication.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMethod : IEquatable<AuthenticationMethod>
    {
        private readonly string _value;

        private AuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthenticationMethod Token { get; } = new AuthenticationMethod("Token");
        public static AuthenticationMethod AAD { get; } = new AuthenticationMethod("AAD");

        public static bool operator ==(AuthenticationMethod left, AuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(AuthenticationMethod left, AuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMethod other && Equals(other);
        public bool Equals(AuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the Arc agents on the be upgraded automatically to the latest version. Defaults to Enabled.
    /// </summary>
    [EnumType]
    public readonly struct AutoUpgradeOptions : IEquatable<AutoUpgradeOptions>
    {
        private readonly string _value;

        private AutoUpgradeOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoUpgradeOptions Enabled { get; } = new AutoUpgradeOptions("Enabled");
        public static AutoUpgradeOptions Disabled { get; } = new AutoUpgradeOptions("Disabled");

        public static bool operator ==(AutoUpgradeOptions left, AutoUpgradeOptions right) => left.Equals(right);
        public static bool operator !=(AutoUpgradeOptions left, AutoUpgradeOptions right) => !left.Equals(right);

        public static explicit operator string(AutoUpgradeOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoUpgradeOptions other && Equals(other);
        public bool Equals(AutoUpgradeOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Azure Hybrid Benefit is opted in
    /// </summary>
    [EnumType]
    public readonly struct AzureHybridBenefit : IEquatable<AzureHybridBenefit>
    {
        private readonly string _value;

        private AzureHybridBenefit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureHybridBenefit True { get; } = new AzureHybridBenefit("True");
        public static AzureHybridBenefit False { get; } = new AzureHybridBenefit("False");
        public static AzureHybridBenefit NotApplicable { get; } = new AzureHybridBenefit("NotApplicable");

        public static bool operator ==(AzureHybridBenefit left, AzureHybridBenefit right) => left.Equals(right);
        public static bool operator !=(AzureHybridBenefit left, AzureHybridBenefit right) => !left.Equals(right);

        public static explicit operator string(AzureHybridBenefit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureHybridBenefit other && Equals(other);
        public bool Equals(AzureHybridBenefit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of connected cluster.
    /// </summary>
    [EnumType]
    public readonly struct ConnectedClusterKind : IEquatable<ConnectedClusterKind>
    {
        private readonly string _value;

        private ConnectedClusterKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectedClusterKind ProvisionedCluster { get; } = new ConnectedClusterKind("ProvisionedCluster");

        public static bool operator ==(ConnectedClusterKind left, ConnectedClusterKind right) => left.Equals(right);
        public static bool operator !=(ConnectedClusterKind left, ConnectedClusterKind right) => !left.Equals(right);

        public static explicit operator string(ConnectedClusterKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectedClusterKind other && Equals(other);
        public bool Equals(ConnectedClusterKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Property which describes the state of private link on a connected cluster resource.
    /// </summary>
    [EnumType]
    public readonly struct PrivateLinkState : IEquatable<PrivateLinkState>
    {
        private readonly string _value;

        private PrivateLinkState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateLinkState Enabled { get; } = new PrivateLinkState("Enabled");
        public static PrivateLinkState Disabled { get; } = new PrivateLinkState("Disabled");

        public static bool operator ==(PrivateLinkState left, PrivateLinkState right) => left.Equals(right);
        public static bool operator !=(PrivateLinkState left, PrivateLinkState right) => !left.Equals(right);

        public static explicit operator string(PrivateLinkState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateLinkState other && Equals(other);
        public bool Equals(PrivateLinkState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provisioning state of the connected cluster resource.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState Provisioning { get; } = new ProvisioningState("Provisioning");
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        public static ProvisioningState Accepted { get; } = new ProvisioningState("Accepted");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the connected cluster. The type 'SystemAssigned, includes a system created identity. The type 'None' means no identity is assigned to the connected cluster.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
