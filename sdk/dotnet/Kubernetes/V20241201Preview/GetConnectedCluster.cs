// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Kubernetes.V20241201Preview
{
    public static class GetConnectedCluster
    {
        /// <summary>
        /// Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
        /// </summary>
        public static Task<GetConnectedClusterResult> InvokeAsync(GetConnectedClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectedClusterResult>("azure-native:kubernetes/v20241201preview:getConnectedCluster", args ?? new GetConnectedClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the properties of the specified connected cluster, including name, identity, properties, and additional cluster details.
        /// </summary>
        public static Output<GetConnectedClusterResult> Invoke(GetConnectedClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectedClusterResult>("azure-native:kubernetes/v20241201preview:getConnectedCluster", args ?? new GetConnectedClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectedClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes cluster on which get is called.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConnectedClusterArgs()
        {
        }
        public static new GetConnectedClusterArgs Empty => new GetConnectedClusterArgs();
    }

    public sealed class GetConnectedClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes cluster on which get is called.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConnectedClusterInvokeArgs()
        {
        }
        public static new GetConnectedClusterInvokeArgs Empty => new GetConnectedClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectedClusterResult
    {
        /// <summary>
        /// AAD profile for the connected cluster.
        /// </summary>
        public readonly Outputs.AadProfileResponse? AadProfile;
        /// <summary>
        /// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
        /// </summary>
        public readonly string AgentPublicKeyCertificate;
        /// <summary>
        /// Version of the agent running on the connected cluster resource
        /// </summary>
        public readonly string AgentVersion;
        /// <summary>
        /// Arc agentry configuration for the provisioned cluster.
        /// </summary>
        public readonly Outputs.ArcAgentProfileResponse? ArcAgentProfile;
        /// <summary>
        /// Configuration settings for customizing the behavior of the connected cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.ArcAgentryConfigurationsResponse> ArcAgentryConfigurations;
        /// <summary>
        /// Indicates whether Azure Hybrid Benefit is opted in
        /// </summary>
        public readonly string? AzureHybridBenefit;
        /// <summary>
        /// Represents the connectivity status of the connected cluster.
        /// </summary>
        public readonly string ConnectivityStatus;
        /// <summary>
        /// The Kubernetes distribution running on this connected cluster.
        /// </summary>
        public readonly string? Distribution;
        /// <summary>
        /// The Kubernetes distribution version on this connected cluster.
        /// </summary>
        public readonly string? DistributionVersion;
        /// <summary>
        /// Details of the gateway used by the Arc router for connectivity.
        /// </summary>
        public readonly Outputs.GatewayResponse? Gateway;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the connected cluster.
        /// </summary>
        public readonly Outputs.ConnectedClusterIdentityResponse Identity;
        /// <summary>
        /// The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
        /// </summary>
        public readonly string? Infrastructure;
        /// <summary>
        /// The kind of connected cluster.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// The Kubernetes version of the connected cluster resource
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// Time representing the last instance when heart beat was received from the cluster
        /// </summary>
        public readonly string LastConnectivityTime;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Expiration time of the managed identity certificate
        /// </summary>
        public readonly string ManagedIdentityCertificateExpirationTime;
        /// <summary>
        /// More properties related to the Connected Cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> MiscellaneousProperties;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Connected cluster offering
        /// </summary>
        public readonly string Offering;
        /// <summary>
        /// Open ID Connect (OIDC) Issuer Profile for the connected cluster.
        /// </summary>
        public readonly Outputs.OidcIssuerProfileResponse? OidcIssuerProfile;
        /// <summary>
        /// This is populated only if privateLinkState is enabled. The resource id of the private link scope this connected cluster is assigned to, if any.
        /// </summary>
        public readonly string? PrivateLinkScopeResourceId;
        /// <summary>
        /// Property which describes the state of private link on a connected cluster resource.
        /// </summary>
        public readonly string? PrivateLinkState;
        /// <summary>
        /// Provisioning state of the connected cluster resource.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Security profile for the connected cluster.
        /// </summary>
        public readonly Outputs.SecurityProfileResponse? SecurityProfile;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Number of CPU cores present in the connected cluster resource
        /// </summary>
        public readonly int TotalCoreCount;
        /// <summary>
        /// Number of nodes present in the connected cluster resource
        /// </summary>
        public readonly int TotalNodeCount;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetConnectedClusterResult(
            Outputs.AadProfileResponse? aadProfile,

            string agentPublicKeyCertificate,

            string agentVersion,

            Outputs.ArcAgentProfileResponse? arcAgentProfile,

            ImmutableArray<Outputs.ArcAgentryConfigurationsResponse> arcAgentryConfigurations,

            string? azureHybridBenefit,

            string connectivityStatus,

            string? distribution,

            string? distributionVersion,

            Outputs.GatewayResponse? gateway,

            string id,

            Outputs.ConnectedClusterIdentityResponse identity,

            string? infrastructure,

            string? kind,

            string kubernetesVersion,

            string lastConnectivityTime,

            string location,

            string managedIdentityCertificateExpirationTime,

            ImmutableDictionary<string, string> miscellaneousProperties,

            string name,

            string offering,

            Outputs.OidcIssuerProfileResponse? oidcIssuerProfile,

            string? privateLinkScopeResourceId,

            string? privateLinkState,

            string? provisioningState,

            Outputs.SecurityProfileResponse? securityProfile,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            int totalCoreCount,

            int totalNodeCount,

            string type)
        {
            AadProfile = aadProfile;
            AgentPublicKeyCertificate = agentPublicKeyCertificate;
            AgentVersion = agentVersion;
            ArcAgentProfile = arcAgentProfile;
            ArcAgentryConfigurations = arcAgentryConfigurations;
            AzureHybridBenefit = azureHybridBenefit;
            ConnectivityStatus = connectivityStatus;
            Distribution = distribution;
            DistributionVersion = distributionVersion;
            Gateway = gateway;
            Id = id;
            Identity = identity;
            Infrastructure = infrastructure;
            Kind = kind;
            KubernetesVersion = kubernetesVersion;
            LastConnectivityTime = lastConnectivityTime;
            Location = location;
            ManagedIdentityCertificateExpirationTime = managedIdentityCertificateExpirationTime;
            MiscellaneousProperties = miscellaneousProperties;
            Name = name;
            Offering = offering;
            OidcIssuerProfile = oidcIssuerProfile;
            PrivateLinkScopeResourceId = privateLinkScopeResourceId;
            PrivateLinkState = privateLinkState;
            ProvisioningState = provisioningState;
            SecurityProfile = securityProfile;
            SystemData = systemData;
            Tags = tags;
            TotalCoreCount = totalCoreCount;
            TotalNodeCount = totalNodeCount;
            Type = type;
        }
    }
}
