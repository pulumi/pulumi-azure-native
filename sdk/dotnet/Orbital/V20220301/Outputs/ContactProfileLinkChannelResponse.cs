// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.V20220301.Outputs
{

    /// <summary>
    /// Contact Profile Link Channel.
    /// </summary>
    [OutputType]
    public sealed class ContactProfileLinkChannelResponse
    {
        /// <summary>
        /// Bandwidth in MHz.
        /// </summary>
        public readonly double BandwidthMHz;
        /// <summary>
        /// Center Frequency in MHz.
        /// </summary>
        public readonly double CenterFrequencyMHz;
        /// <summary>
        /// Currently unused.
        /// </summary>
        public readonly string? DecodingConfiguration;
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        public readonly string? DemodulationConfiguration;
        /// <summary>
        /// Currently unused.
        /// </summary>
        public readonly string? EncodingConfiguration;
        /// <summary>
        /// Customer End point to store/retrieve data during a contact.
        /// </summary>
        public readonly Outputs.EndPointResponse EndPoint;
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        public readonly string? ModulationConfiguration;
        /// <summary>
        /// Channel name.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private ContactProfileLinkChannelResponse(
            double bandwidthMHz,

            double centerFrequencyMHz,

            string? decodingConfiguration,

            string? demodulationConfiguration,

            string? encodingConfiguration,

            Outputs.EndPointResponse endPoint,

            string? modulationConfiguration,

            string name)
        {
            BandwidthMHz = bandwidthMHz;
            CenterFrequencyMHz = centerFrequencyMHz;
            DecodingConfiguration = decodingConfiguration;
            DemodulationConfiguration = demodulationConfiguration;
            EncodingConfiguration = encodingConfiguration;
            EndPoint = endPoint;
            ModulationConfiguration = modulationConfiguration;
            Name = name;
        }
    }
}
