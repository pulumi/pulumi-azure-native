// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.V20221101
{
    public static class GetContactProfile
    {
        /// <summary>
        /// Gets the specified contact Profile in a specified resource group.
        /// </summary>
        public static Task<GetContactProfileResult> InvokeAsync(GetContactProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContactProfileResult>("azure-native:orbital/v20221101:getContactProfile", args ?? new GetContactProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified contact Profile in a specified resource group.
        /// </summary>
        public static Output<GetContactProfileResult> Invoke(GetContactProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContactProfileResult>("azure-native:orbital/v20221101:getContactProfile", args ?? new GetContactProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContactProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Contact Profile name.
        /// </summary>
        [Input("contactProfileName", required: true)]
        public string ContactProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetContactProfileArgs()
        {
        }
        public static new GetContactProfileArgs Empty => new GetContactProfileArgs();
    }

    public sealed class GetContactProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Contact Profile name.
        /// </summary>
        [Input("contactProfileName", required: true)]
        public Input<string> ContactProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetContactProfileInvokeArgs()
        {
        }
        public static new GetContactProfileInvokeArgs Empty => new GetContactProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetContactProfileResult
    {
        /// <summary>
        /// Auto-tracking configuration.
        /// </summary>
        public readonly string? AutoTrackingConfiguration;
        /// <summary>
        /// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
        /// </summary>
        public readonly string? EventHubUri;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContactProfileLinkResponse> Links;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        public readonly double? MinimumElevationDegrees;
        /// <summary>
        /// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
        /// </summary>
        public readonly string? MinimumViableContactDuration;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network configuration of customer virtual network.
        /// </summary>
        public readonly Outputs.ContactProfilesPropertiesResponseNetworkConfiguration NetworkConfiguration;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContactProfileThirdPartyConfigurationResponse> ThirdPartyConfigurations;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetContactProfileResult(
            string? autoTrackingConfiguration,

            string? eventHubUri,

            string id,

            ImmutableArray<Outputs.ContactProfileLinkResponse> links,

            string location,

            double? minimumElevationDegrees,

            string? minimumViableContactDuration,

            string name,

            Outputs.ContactProfilesPropertiesResponseNetworkConfiguration networkConfiguration,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.ContactProfileThirdPartyConfigurationResponse> thirdPartyConfigurations,

            string type)
        {
            AutoTrackingConfiguration = autoTrackingConfiguration;
            EventHubUri = eventHubUri;
            Id = id;
            Links = links;
            Location = location;
            MinimumElevationDegrees = minimumElevationDegrees;
            MinimumViableContactDuration = minimumViableContactDuration;
            Name = name;
            NetworkConfiguration = networkConfiguration;
            SystemData = systemData;
            Tags = tags;
            ThirdPartyConfigurations = thirdPartyConfigurations;
            Type = type;
        }
    }
}
