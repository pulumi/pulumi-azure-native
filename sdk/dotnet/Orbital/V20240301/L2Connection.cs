// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.V20240301
{
    /// <summary>
    /// Connects an edge site to an orbital gateway and describes what layer 2 traffic to forward between them.
    /// </summary>
    [AzureNativeResourceType("azure-native:orbital/v20240301:L2Connection")]
    public partial class L2Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Globally-unique identifier for this connection that is to be used as a circuit ID.
        /// </summary>
        [Output("circuitId")]
        public Output<string> CircuitId { get; private set; } = null!;

        /// <summary>
        /// A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        /// </summary>
        [Output("edgeSite")]
        public Output<Outputs.L2ConnectionsPropertiesResponseEdgeSite> EdgeSite { get; private set; } = null!;

        /// <summary>
        /// A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        /// </summary>
        [Output("groundStation")]
        public Output<Outputs.L2ConnectionsPropertiesResponseGroundStation> GroundStation { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The VLAN ID for the L2 connection.
        /// </summary>
        [Output("vlanId")]
        public Output<int> VlanId { get; private set; } = null!;


        /// <summary>
        /// Create a L2Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public L2Connection(string name, L2ConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:orbital/v20240301:L2Connection", name, args ?? new L2ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private L2Connection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:orbital/v20240301:L2Connection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:orbital:L2Connection" },
                    new global::Pulumi.Alias { Type = "azure-native:orbital/v20240301preview:L2Connection" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing L2Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static L2Connection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new L2Connection(name, id, options);
        }
    }

    public sealed class L2ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A reference to an Microsoft.Orbital/edgeSites resource to route traffic for.
        /// </summary>
        [Input("edgeSite", required: true)]
        public Input<Inputs.L2ConnectionsPropertiesEdgeSiteArgs> EdgeSite { get; set; } = null!;

        /// <summary>
        /// A reference to an Microsoft.Orbital/groundStations resource to route traffic for.
        /// </summary>
        [Input("groundStation", required: true)]
        public Input<Inputs.L2ConnectionsPropertiesGroundStationArgs> GroundStation { get; set; } = null!;

        /// <summary>
        /// L2 Connection name.
        /// </summary>
        [Input("l2ConnectionName")]
        public Input<string>? L2ConnectionName { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The unique name of the partner router that cross-connects with the Orbital Edge Router at the ground station site.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VLAN ID for the L2 connection.
        /// </summary>
        [Input("vlanId", required: true)]
        public Input<int> VlanId { get; set; } = null!;

        public L2ConnectionArgs()
        {
        }
        public static new L2ConnectionArgs Empty => new L2ConnectionArgs();
    }
}
