// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Orbital
{
    /// <summary>
    /// The scope of the auto-generated domain name label. If not provided, defaults to TenantReuse.
    /// </summary>
    [EnumType]
    public readonly struct AutoGeneratedDomainNameLabelScope : IEquatable<AutoGeneratedDomainNameLabelScope>
    {
        private readonly string _value;

        private AutoGeneratedDomainNameLabelScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The domain name label is randomly generated. The resource name cannot be reused within the same region.
        /// </summary>
        public static AutoGeneratedDomainNameLabelScope NoReuse { get; } = new AutoGeneratedDomainNameLabelScope("NoReuse");
        /// <summary>
        /// The domain name label is deterministically generated using the resource name and tenant id. The resource name cannot be reused within the same region and tenant.
        /// </summary>
        public static AutoGeneratedDomainNameLabelScope TenantReuse { get; } = new AutoGeneratedDomainNameLabelScope("TenantReuse");
        /// <summary>
        /// The domain name label is deterministically generated using the resource name, tenant id, and subscription id. The resource name cannot be reused within the same region and subscription.
        /// </summary>
        public static AutoGeneratedDomainNameLabelScope SubscriptionReuse { get; } = new AutoGeneratedDomainNameLabelScope("SubscriptionReuse");
        /// <summary>
        /// The domain name label is deterministically generated using the resource name, tenant id, subscription id, and resource group name. The resource name cannot be reused within the same resource group.
        /// </summary>
        public static AutoGeneratedDomainNameLabelScope ResourceGroupReuse { get; } = new AutoGeneratedDomainNameLabelScope("ResourceGroupReuse");

        public static bool operator ==(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => left.Equals(right);
        public static bool operator !=(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => !left.Equals(right);

        public static explicit operator string(AutoGeneratedDomainNameLabelScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoGeneratedDomainNameLabelScope other && Equals(other);
        public bool Equals(AutoGeneratedDomainNameLabelScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Auto-tracking configuration.
    /// </summary>
    [EnumType]
    public readonly struct AutoTrackingConfiguration : IEquatable<AutoTrackingConfiguration>
    {
        private readonly string _value;

        private AutoTrackingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoTrackingConfiguration Disabled { get; } = new AutoTrackingConfiguration("disabled");
        public static AutoTrackingConfiguration XBand { get; } = new AutoTrackingConfiguration("xBand");
        public static AutoTrackingConfiguration SBand { get; } = new AutoTrackingConfiguration("sBand");

        public static bool operator ==(AutoTrackingConfiguration left, AutoTrackingConfiguration right) => left.Equals(right);
        public static bool operator !=(AutoTrackingConfiguration left, AutoTrackingConfiguration right) => !left.Equals(right);

        public static explicit operator string(AutoTrackingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoTrackingConfiguration other && Equals(other);
        public bool Equals(AutoTrackingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Capability of the Ground Station.
    /// </summary>
    [EnumType]
    public readonly struct Capability : IEquatable<Capability>
    {
        private readonly string _value;

        private Capability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Capability EarthObservation { get; } = new Capability("EarthObservation");
        public static Capability Communication { get; } = new Capability("Communication");

        public static bool operator ==(Capability left, Capability right) => left.Equals(right);
        public static bool operator !=(Capability left, Capability right) => !left.Equals(right);

        public static explicit operator string(Capability value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Capability other && Equals(other);
        public bool Equals(Capability other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of the catalog. This cannot be changed after the catalog is created. If not provided, defaults to Basic.
    /// </summary>
    [EnumType]
    public readonly struct CatalogTier : IEquatable<CatalogTier>
    {
        private readonly string _value;

        private CatalogTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The basic tier that utilizes shared resources across catalog instances
        /// </summary>
        public static CatalogTier Basic { get; } = new CatalogTier("Basic");

        public static bool operator ==(CatalogTier left, CatalogTier right) => left.Equals(right);
        public static bool operator !=(CatalogTier left, CatalogTier right) => !left.Equals(right);

        public static explicit operator string(CatalogTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CatalogTier other && Equals(other);
        public bool Equals(CatalogTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Direction (Uplink or Downlink).
    /// </summary>
    [EnumType]
    public readonly struct Direction : IEquatable<Direction>
    {
        private readonly string _value;

        private Direction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Direction Uplink { get; } = new Direction("Uplink");
        public static Direction Downlink { get; } = new Direction("Downlink");

        public static bool operator ==(Direction left, Direction right) => left.Equals(right);
        public static bool operator !=(Direction left, Direction right) => !left.Equals(right);

        public static explicit operator string(Direction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Direction other && Equals(other);
        public bool Equals(Direction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Polarization. e.g. (RHCP, LHCP).
    /// </summary>
    [EnumType]
    public readonly struct Polarization : IEquatable<Polarization>
    {
        private readonly string _value;

        private Polarization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Polarization RHCP { get; } = new Polarization("RHCP");
        public static Polarization LHCP { get; } = new Polarization("LHCP");
        public static Polarization LinearVertical { get; } = new Polarization("linearVertical");
        public static Polarization LinearHorizontal { get; } = new Polarization("linearHorizontal");

        public static bool operator ==(Polarization left, Polarization right) => left.Equals(right);
        public static bool operator !=(Polarization left, Polarization right) => !left.Equals(right);

        public static explicit operator string(Polarization value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Polarization other && Equals(other);
        public bool Equals(Polarization other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol either UDP or TCP.
    /// </summary>
    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol TCP { get; } = new Protocol("TCP");
        public static Protocol UDP { get; } = new Protocol("UDP");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
