// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Orbital
{
    /// <summary>
    /// Auto-tracking configuration.
    /// </summary>
    [EnumType]
    public readonly struct AutoTrackingConfiguration : IEquatable<AutoTrackingConfiguration>
    {
        private readonly string _value;

        private AutoTrackingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoTrackingConfiguration Disabled { get; } = new AutoTrackingConfiguration("disabled");
        public static AutoTrackingConfiguration XBand { get; } = new AutoTrackingConfiguration("xBand");
        public static AutoTrackingConfiguration SBand { get; } = new AutoTrackingConfiguration("sBand");

        public static bool operator ==(AutoTrackingConfiguration left, AutoTrackingConfiguration right) => left.Equals(right);
        public static bool operator !=(AutoTrackingConfiguration left, AutoTrackingConfiguration right) => !left.Equals(right);

        public static explicit operator string(AutoTrackingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoTrackingConfiguration other && Equals(other);
        public bool Equals(AutoTrackingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Direction (Uplink or Downlink).
    /// </summary>
    [EnumType]
    public readonly struct Direction : IEquatable<Direction>
    {
        private readonly string _value;

        private Direction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Direction Uplink { get; } = new Direction("Uplink");
        public static Direction Downlink { get; } = new Direction("Downlink");

        public static bool operator ==(Direction left, Direction right) => left.Equals(right);
        public static bool operator !=(Direction left, Direction right) => !left.Equals(right);

        public static explicit operator string(Direction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Direction other && Equals(other);
        public bool Equals(Direction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Polarization. e.g. (RHCP, LHCP).
    /// </summary>
    [EnumType]
    public readonly struct Polarization : IEquatable<Polarization>
    {
        private readonly string _value;

        private Polarization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Polarization RHCP { get; } = new Polarization("RHCP");
        public static Polarization LHCP { get; } = new Polarization("LHCP");
        public static Polarization LinearVertical { get; } = new Polarization("linearVertical");
        public static Polarization LinearHorizontal { get; } = new Polarization("linearHorizontal");

        public static bool operator ==(Polarization left, Polarization right) => left.Equals(right);
        public static bool operator !=(Polarization left, Polarization right) => !left.Equals(right);

        public static explicit operator string(Polarization value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Polarization other && Equals(other);
        public bool Equals(Polarization other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol either UDP or TCP.
    /// </summary>
    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol TCP { get; } = new Protocol("TCP");
        public static Protocol UDP { get; } = new Protocol("UDP");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
