// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.Inputs
{

    /// <summary>
    /// Contact Profile Link Channel.
    /// </summary>
    public sealed class ContactProfileLinkChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bandwidth in MHz.
        /// </summary>
        [Input("bandwidthMHz", required: true)]
        public Input<double> BandwidthMHz { get; set; } = null!;

        /// <summary>
        /// Center Frequency in MHz.
        /// </summary>
        [Input("centerFrequencyMHz", required: true)]
        public Input<double> CenterFrequencyMHz { get; set; } = null!;

        /// <summary>
        /// Currently unused.
        /// </summary>
        [Input("decodingConfiguration")]
        public Input<string>? DecodingConfiguration { get; set; }

        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        [Input("demodulationConfiguration")]
        public Input<string>? DemodulationConfiguration { get; set; }

        /// <summary>
        /// Currently unused.
        /// </summary>
        [Input("encodingConfiguration")]
        public Input<string>? EncodingConfiguration { get; set; }

        /// <summary>
        /// Customer end point to store and retrieve data during a contact with the spacecraft.
        /// </summary>
        [Input("endPoint", required: true)]
        public Input<Inputs.EndPointArgs> EndPoint { get; set; } = null!;

        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        [Input("modulationConfiguration")]
        public Input<string>? ModulationConfiguration { get; set; }

        /// <summary>
        /// Channel name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public ContactProfileLinkChannelArgs()
        {
        }
        public static new ContactProfileLinkChannelArgs Empty => new ContactProfileLinkChannelArgs();
    }
}
