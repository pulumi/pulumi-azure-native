// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Orbital.V20240301Preview
{
    public static class GetEdgeSite
    {
        /// <summary>
        /// Gets the specified edge site in a specified resource group.
        /// </summary>
        public static Task<GetEdgeSiteResult> InvokeAsync(GetEdgeSiteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEdgeSiteResult>("azure-native:orbital/v20240301preview:getEdgeSite", args ?? new GetEdgeSiteArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified edge site in a specified resource group.
        /// </summary>
        public static Output<GetEdgeSiteResult> Invoke(GetEdgeSiteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEdgeSiteResult>("azure-native:orbital/v20240301preview:getEdgeSite", args ?? new GetEdgeSiteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEdgeSiteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Edge site name.
        /// </summary>
        [Input("edgeSiteName", required: true)]
        public string EdgeSiteName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEdgeSiteArgs()
        {
        }
        public static new GetEdgeSiteArgs Empty => new GetEdgeSiteArgs();
    }

    public sealed class GetEdgeSiteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Edge site name.
        /// </summary>
        [Input("edgeSiteName", required: true)]
        public Input<string> EdgeSiteName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEdgeSiteInvokeArgs()
        {
        }
        public static new GetEdgeSiteInvokeArgs Empty => new GetEdgeSiteInvokeArgs();
    }


    [OutputType]
    public sealed class GetEdgeSiteResult
    {
        /// <summary>
        /// A reference to global communications site.
        /// </summary>
        public readonly Outputs.EdgeSitesPropertiesResponseGlobalCommunicationsSite GlobalCommunicationsSite;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEdgeSiteResult(
            Outputs.EdgeSitesPropertiesResponseGlobalCommunicationsSite globalCommunicationsSite,

            string id,

            string location,

            string name,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            GlobalCommunicationsSite = globalCommunicationsSite;
            Id = id;
            Location = location;
            Name = name;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
