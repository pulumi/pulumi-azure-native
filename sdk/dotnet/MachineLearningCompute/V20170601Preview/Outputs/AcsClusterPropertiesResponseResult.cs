// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.MachineLearningCompute.V20170601Preview.Outputs
{

    [OutputType]
    public sealed class AcsClusterPropertiesResponseResult
    {
        /// <summary>
        /// The number of agent nodes in the Container Service. This can be changed to scale the cluster.
        /// </summary>
        public readonly int? AgentCount;
        /// <summary>
        /// The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created.
        /// </summary>
        public readonly string? AgentVmSize;
        /// <summary>
        /// The FQDN of the cluster. 
        /// </summary>
        public readonly string ClusterFqdn;
        /// <summary>
        /// Orchestrator specific properties
        /// </summary>
        public readonly Outputs.KubernetesClusterPropertiesResponseResult OrchestratorProperties;
        /// <summary>
        /// Type of orchestrator. It cannot be changed once the cluster is created.
        /// </summary>
        public readonly string OrchestratorType;
        /// <summary>
        /// The system services deployed to the cluster
        /// </summary>
        public readonly ImmutableArray<string> SystemServices;

        [OutputConstructor]
        private AcsClusterPropertiesResponseResult(
            int? agentCount,

            string? agentVmSize,

            string clusterFqdn,

            Outputs.KubernetesClusterPropertiesResponseResult orchestratorProperties,

            string orchestratorType,

            ImmutableArray<string> systemServices)
        {
            AgentCount = agentCount;
            AgentVmSize = agentVmSize;
            ClusterFqdn = clusterFqdn;
            OrchestratorProperties = orchestratorProperties;
            OrchestratorType = orchestratorType;
            SystemServices = systemServices;
        }
    }
}
