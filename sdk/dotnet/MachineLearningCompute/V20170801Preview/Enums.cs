// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.MachineLearningCompute.V20170801Preview
{
    /// <summary>
    /// The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created. This list is non exhaustive; refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for the possible VM sizes.
    /// </summary>
    [EnumType]
    public readonly struct AgentVMSizeTypes : IEquatable<AgentVMSizeTypes>
    {
        private readonly string _value;

        private AgentVMSizeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentVMSizeTypes Standard_A0 { get; } = new AgentVMSizeTypes("Standard_A0");
        public static AgentVMSizeTypes Standard_A1 { get; } = new AgentVMSizeTypes("Standard_A1");
        public static AgentVMSizeTypes Standard_A2 { get; } = new AgentVMSizeTypes("Standard_A2");
        public static AgentVMSizeTypes Standard_A3 { get; } = new AgentVMSizeTypes("Standard_A3");
        public static AgentVMSizeTypes Standard_A4 { get; } = new AgentVMSizeTypes("Standard_A4");
        public static AgentVMSizeTypes Standard_A5 { get; } = new AgentVMSizeTypes("Standard_A5");
        public static AgentVMSizeTypes Standard_A6 { get; } = new AgentVMSizeTypes("Standard_A6");
        public static AgentVMSizeTypes Standard_A7 { get; } = new AgentVMSizeTypes("Standard_A7");
        public static AgentVMSizeTypes Standard_A8 { get; } = new AgentVMSizeTypes("Standard_A8");
        public static AgentVMSizeTypes Standard_A9 { get; } = new AgentVMSizeTypes("Standard_A9");
        public static AgentVMSizeTypes Standard_A10 { get; } = new AgentVMSizeTypes("Standard_A10");
        public static AgentVMSizeTypes Standard_A11 { get; } = new AgentVMSizeTypes("Standard_A11");
        public static AgentVMSizeTypes Standard_D1 { get; } = new AgentVMSizeTypes("Standard_D1");
        public static AgentVMSizeTypes Standard_D2 { get; } = new AgentVMSizeTypes("Standard_D2");
        public static AgentVMSizeTypes Standard_D3 { get; } = new AgentVMSizeTypes("Standard_D3");
        public static AgentVMSizeTypes Standard_D4 { get; } = new AgentVMSizeTypes("Standard_D4");
        public static AgentVMSizeTypes Standard_D11 { get; } = new AgentVMSizeTypes("Standard_D11");
        public static AgentVMSizeTypes Standard_D12 { get; } = new AgentVMSizeTypes("Standard_D12");
        public static AgentVMSizeTypes Standard_D13 { get; } = new AgentVMSizeTypes("Standard_D13");
        public static AgentVMSizeTypes Standard_D14 { get; } = new AgentVMSizeTypes("Standard_D14");
        public static AgentVMSizeTypes Standard_D1_v2 { get; } = new AgentVMSizeTypes("Standard_D1_v2");
        public static AgentVMSizeTypes Standard_D2_v2 { get; } = new AgentVMSizeTypes("Standard_D2_v2");
        public static AgentVMSizeTypes Standard_D3_v2 { get; } = new AgentVMSizeTypes("Standard_D3_v2");
        public static AgentVMSizeTypes Standard_D4_v2 { get; } = new AgentVMSizeTypes("Standard_D4_v2");
        public static AgentVMSizeTypes Standard_D5_v2 { get; } = new AgentVMSizeTypes("Standard_D5_v2");
        public static AgentVMSizeTypes Standard_D11_v2 { get; } = new AgentVMSizeTypes("Standard_D11_v2");
        public static AgentVMSizeTypes Standard_D12_v2 { get; } = new AgentVMSizeTypes("Standard_D12_v2");
        public static AgentVMSizeTypes Standard_D13_v2 { get; } = new AgentVMSizeTypes("Standard_D13_v2");
        public static AgentVMSizeTypes Standard_D14_v2 { get; } = new AgentVMSizeTypes("Standard_D14_v2");
        public static AgentVMSizeTypes Standard_G1 { get; } = new AgentVMSizeTypes("Standard_G1");
        public static AgentVMSizeTypes Standard_G2 { get; } = new AgentVMSizeTypes("Standard_G2");
        public static AgentVMSizeTypes Standard_G3 { get; } = new AgentVMSizeTypes("Standard_G3");
        public static AgentVMSizeTypes Standard_G4 { get; } = new AgentVMSizeTypes("Standard_G4");
        public static AgentVMSizeTypes Standard_G5 { get; } = new AgentVMSizeTypes("Standard_G5");
        public static AgentVMSizeTypes Standard_DS1 { get; } = new AgentVMSizeTypes("Standard_DS1");
        public static AgentVMSizeTypes Standard_DS2 { get; } = new AgentVMSizeTypes("Standard_DS2");
        public static AgentVMSizeTypes Standard_DS3 { get; } = new AgentVMSizeTypes("Standard_DS3");
        public static AgentVMSizeTypes Standard_DS4 { get; } = new AgentVMSizeTypes("Standard_DS4");
        public static AgentVMSizeTypes Standard_DS11 { get; } = new AgentVMSizeTypes("Standard_DS11");
        public static AgentVMSizeTypes Standard_DS12 { get; } = new AgentVMSizeTypes("Standard_DS12");
        public static AgentVMSizeTypes Standard_DS13 { get; } = new AgentVMSizeTypes("Standard_DS13");
        public static AgentVMSizeTypes Standard_DS14 { get; } = new AgentVMSizeTypes("Standard_DS14");
        public static AgentVMSizeTypes Standard_GS1 { get; } = new AgentVMSizeTypes("Standard_GS1");
        public static AgentVMSizeTypes Standard_GS2 { get; } = new AgentVMSizeTypes("Standard_GS2");
        public static AgentVMSizeTypes Standard_GS3 { get; } = new AgentVMSizeTypes("Standard_GS3");
        public static AgentVMSizeTypes Standard_GS4 { get; } = new AgentVMSizeTypes("Standard_GS4");
        public static AgentVMSizeTypes Standard_GS5 { get; } = new AgentVMSizeTypes("Standard_GS5");

        public static bool operator ==(AgentVMSizeTypes left, AgentVMSizeTypes right) => left.Equals(right);
        public static bool operator !=(AgentVMSizeTypes left, AgentVMSizeTypes right) => !left.Equals(right);

        public static explicit operator string(AgentVMSizeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentVMSizeTypes other && Equals(other);
        public bool Equals(AgentVMSizeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The cluster type.
    /// </summary>
    [EnumType]
    public readonly struct ClusterType : IEquatable<ClusterType>
    {
        private readonly string _value;

        private ClusterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterType ACS { get; } = new ClusterType("ACS");
        public static ClusterType Local { get; } = new ClusterType("Local");

        public static bool operator ==(ClusterType left, ClusterType right) => left.Equals(right);
        public static bool operator !=(ClusterType left, ClusterType right) => !left.Equals(right);

        public static explicit operator string(ClusterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterType other && Equals(other);
        public bool Equals(ClusterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of orchestrator. It cannot be changed once the cluster is created.
    /// </summary>
    [EnumType]
    public readonly struct OrchestratorType : IEquatable<OrchestratorType>
    {
        private readonly string _value;

        private OrchestratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrchestratorType Kubernetes { get; } = new OrchestratorType("Kubernetes");
        public static OrchestratorType None { get; } = new OrchestratorType("None");

        public static bool operator ==(OrchestratorType left, OrchestratorType right) => left.Equals(right);
        public static bool operator !=(OrchestratorType left, OrchestratorType right) => !left.Equals(right);

        public static explicit operator string(OrchestratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrchestratorType other && Equals(other);
        public bool Equals(OrchestratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SSL status. Allowed values are Enabled and Disabled.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Enabled { get; } = new Status("Enabled");
        public static Status Disabled { get; } = new Status("Disabled");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The system service type
    /// </summary>
    [EnumType]
    public readonly struct SystemServiceType : IEquatable<SystemServiceType>
    {
        private readonly string _value;

        private SystemServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemServiceType None { get; } = new SystemServiceType("None");
        public static SystemServiceType ScoringFrontEnd { get; } = new SystemServiceType("ScoringFrontEnd");
        public static SystemServiceType BatchFrontEnd { get; } = new SystemServiceType("BatchFrontEnd");

        public static bool operator ==(SystemServiceType left, SystemServiceType right) => left.Equals(right);
        public static bool operator !=(SystemServiceType left, SystemServiceType right) => !left.Equals(right);

        public static explicit operator string(SystemServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemServiceType other && Equals(other);
        public bool Equals(SystemServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
