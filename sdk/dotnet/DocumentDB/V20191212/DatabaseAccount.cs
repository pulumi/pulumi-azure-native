// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.DocumentDB.V20191212
{
    /// <summary>
    /// An Azure Cosmos DB database account.
    /// </summary>
    public partial class DatabaseAccount : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates the type of database account. This can only be set at database account creation.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The location of the resource group to which the resource belongs.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the ARM resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties for the database account.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.DatabaseAccountGetPropertiesResponseResult> Properties { get; private set; } = null!;

        /// <summary>
        /// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of Azure resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseAccount(string name, DatabaseAccountArgs args, CustomResourceOptions? options = null)
            : base("azurerm:documentdb/v20191212:DatabaseAccount", name, args ?? new DatabaseAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseAccount(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:documentdb/v20191212:DatabaseAccount", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseAccount Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabaseAccount(name, id, options);
        }
    }

    public sealed class DatabaseAccountArgs : Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<Inputs.CapabilityArgs>? _capabilities;

        /// <summary>
        /// List of Cosmos DB capabilities for the account
        /// </summary>
        public InputList<Inputs.CapabilityArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.CapabilityArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// The cassandra connector offer type for the Cosmos DB database C* account.
        /// </summary>
        [Input("connectorOffer")]
        public Input<string>? ConnectorOffer { get; set; }

        /// <summary>
        /// The consistency policy for the Cosmos DB account.
        /// </summary>
        [Input("consistencyPolicy")]
        public Input<Inputs.ConsistencyPolicyArgs>? ConsistencyPolicy { get; set; }

        /// <summary>
        /// The offer type for the database
        /// </summary>
        [Input("databaseAccountOfferType", required: true)]
        public Input<string> DatabaseAccountOfferType { get; set; } = null!;

        /// <summary>
        /// Disable write operations on metadata resources (databases, containers, throughput) via account keys
        /// </summary>
        [Input("disableKeyBasedMetadataWriteAccess")]
        public Input<bool>? DisableKeyBasedMetadataWriteAccess { get; set; }

        /// <summary>
        /// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        /// </summary>
        [Input("enableAutomaticFailover")]
        public Input<bool>? EnableAutomaticFailover { get; set; }

        /// <summary>
        /// Enables the cassandra connector on the Cosmos DB C* account
        /// </summary>
        [Input("enableCassandraConnector")]
        public Input<bool>? EnableCassandraConnector { get; set; }

        /// <summary>
        /// Enables the account to write in multiple locations
        /// </summary>
        [Input("enableMultipleWriteLocations")]
        public Input<bool>? EnableMultipleWriteLocations { get; set; }

        /// <summary>
        /// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
        /// </summary>
        [Input("ipRangeFilter")]
        public Input<string>? IpRangeFilter { get; set; }

        /// <summary>
        /// Flag to indicate whether to enable/disable Virtual Network ACL rules.
        /// </summary>
        [Input("isVirtualNetworkFilterEnabled")]
        public Input<bool>? IsVirtualNetworkFilterEnabled { get; set; }

        /// <summary>
        /// The URI of the key vault
        /// </summary>
        [Input("keyVaultKeyUri")]
        public Input<string>? KeyVaultKeyUri { get; set; }

        /// <summary>
        /// Indicates the type of database account. This can only be set at database account creation.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The location of the resource group to which the resource belongs.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("locations", required: true)]
        private InputList<Inputs.LocationArgs>? _locations;

        /// <summary>
        /// An array that contains the georeplication locations enabled for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.LocationArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.LocationArgs>());
            set => _locations = value;
        }

        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualNetworkRules")]
        private InputList<Inputs.VirtualNetworkRuleArgs>? _virtualNetworkRules;

        /// <summary>
        /// List of Virtual Network ACL rules configured for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.VirtualNetworkRuleArgs> VirtualNetworkRules
        {
            get => _virtualNetworkRules ?? (_virtualNetworkRules = new InputList<Inputs.VirtualNetworkRuleArgs>());
            set => _virtualNetworkRules = value;
        }

        public DatabaseAccountArgs()
        {
        }
    }
}
