// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.DocumentDB.Inputs
{

    /// <summary>
    /// Properties for the database account.
    /// </summary>
    public sealed class DatabaseAccountGetPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// API specific properties.
        /// </summary>
        [Input("apiProperties")]
        public Input<Inputs.ApiPropertiesResponseGetArgs>? ApiProperties { get; set; }

        [Input("capabilities")]
        private InputList<Inputs.CapabilityResponseGetArgs>? _capabilities;

        /// <summary>
        /// List of Cosmos DB capabilities for the account
        /// </summary>
        public InputList<Inputs.CapabilityResponseGetArgs> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<Inputs.CapabilityResponseGetArgs>());
            set => _capabilities = value;
        }

        /// <summary>
        /// The cassandra connector offer type for the Cosmos DB database C* account.
        /// </summary>
        [Input("connectorOffer")]
        public Input<string>? ConnectorOffer { get; set; }

        /// <summary>
        /// The consistency policy for the Cosmos DB database account.
        /// </summary>
        [Input("consistencyPolicy")]
        public Input<Inputs.ConsistencyPolicyResponseGetArgs>? ConsistencyPolicy { get; set; }

        /// <summary>
        /// The offer type for the Cosmos DB database account. Default value: Standard.
        /// </summary>
        [Input("databaseAccountOfferType", required: true)]
        public Input<string> DatabaseAccountOfferType { get; set; } = null!;

        /// <summary>
        /// Disable write operations on metadata resources (databases, containers, throughput) via account keys
        /// </summary>
        [Input("disableKeyBasedMetadataWriteAccess")]
        public Input<bool>? DisableKeyBasedMetadataWriteAccess { get; set; }

        /// <summary>
        /// The connection endpoint for the Cosmos DB database account.
        /// </summary>
        [Input("documentEndpoint", required: true)]
        public Input<string> DocumentEndpoint { get; set; } = null!;

        /// <summary>
        /// Flag to indicate whether to enable storage analytics.
        /// </summary>
        [Input("enableAnalyticalStorage")]
        public Input<bool>? EnableAnalyticalStorage { get; set; }

        /// <summary>
        /// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        /// </summary>
        [Input("enableAutomaticFailover")]
        public Input<bool>? EnableAutomaticFailover { get; set; }

        /// <summary>
        /// Enables the cassandra connector on the Cosmos DB C* account
        /// </summary>
        [Input("enableCassandraConnector")]
        public Input<bool>? EnableCassandraConnector { get; set; }

        /// <summary>
        /// Flag to indicate whether Free Tier is enabled.
        /// </summary>
        [Input("enableFreeTier")]
        public Input<bool>? EnableFreeTier { get; set; }

        /// <summary>
        /// Enables the account to write in multiple locations
        /// </summary>
        [Input("enableMultipleWriteLocations")]
        public Input<bool>? EnableMultipleWriteLocations { get; set; }

        [Input("failoverPolicies", required: true)]
        private InputList<Inputs.FailoverPolicyResponseGetArgs>? _failoverPolicies;

        /// <summary>
        /// An array that contains the regions ordered by their failover priorities.
        /// </summary>
        public InputList<Inputs.FailoverPolicyResponseGetArgs> FailoverPolicies
        {
            get => _failoverPolicies ?? (_failoverPolicies = new InputList<Inputs.FailoverPolicyResponseGetArgs>());
            set => _failoverPolicies = value;
        }

        /// <summary>
        /// List of IpRules.
        /// </summary>
        [Input("ipRules")]
        public Input<Inputs.IPRulesResponseGetArgs>? IpRules { get; set; }

        /// <summary>
        /// Flag to indicate whether to enable/disable Virtual Network ACL rules.
        /// </summary>
        [Input("isVirtualNetworkFilterEnabled")]
        public Input<bool>? IsVirtualNetworkFilterEnabled { get; set; }

        /// <summary>
        /// The URI of the key vault
        /// </summary>
        [Input("keyVaultKeyUri")]
        public Input<string>? KeyVaultKeyUri { get; set; }

        [Input("locations", required: true)]
        private InputList<Inputs.LocationResponseGetArgs>? _locations;

        /// <summary>
        /// An array that contains all of the locations enabled for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.LocationResponseGetArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.LocationResponseGetArgs>());
            set => _locations = value;
        }

        [Input("privateEndpointConnections", required: true)]
        private InputList<Inputs.PrivateEndpointConnectionResponseGetArgs>? _privateEndpointConnections;

        /// <summary>
        /// List of Private Endpoint Connections configured for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.PrivateEndpointConnectionResponseGetArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionResponseGetArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// Whether requests from Public Network are allowed
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        [Input("readLocations", required: true)]
        private InputList<Inputs.LocationResponseGetArgs>? _readLocations;

        /// <summary>
        /// An array that contains of the read locations enabled for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.LocationResponseGetArgs> ReadLocations
        {
            get => _readLocations ?? (_readLocations = new InputList<Inputs.LocationResponseGetArgs>());
            set => _readLocations = value;
        }

        [Input("virtualNetworkRules")]
        private InputList<Inputs.VirtualNetworkRuleResponseGetArgs>? _virtualNetworkRules;

        /// <summary>
        /// List of Virtual Network ACL rules configured for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.VirtualNetworkRuleResponseGetArgs> VirtualNetworkRules
        {
            get => _virtualNetworkRules ?? (_virtualNetworkRules = new InputList<Inputs.VirtualNetworkRuleResponseGetArgs>());
            set => _virtualNetworkRules = value;
        }

        [Input("writeLocations", required: true)]
        private InputList<Inputs.LocationResponseGetArgs>? _writeLocations;

        /// <summary>
        /// An array that contains the write location for the Cosmos DB account.
        /// </summary>
        public InputList<Inputs.LocationResponseGetArgs> WriteLocations
        {
            get => _writeLocations ?? (_writeLocations = new InputList<Inputs.LocationResponseGetArgs>());
            set => _writeLocations = value;
        }

        public DatabaseAccountGetPropertiesResponseGetArgs()
        {
        }
    }
}
