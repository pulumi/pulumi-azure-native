// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DocumentDB.V20220215Preview
{
    /// <summary>
    /// An Azure Cosmos DB User Definition
    /// </summary>
    [AzureNativeResourceType("azure-native:documentdb/v20220215preview:MongoDBResourceMongoUserDefinition")]
    public partial class MongoDBResourceMongoUserDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A custom definition for the USer Definition.
        /// </summary>
        [Output("customData")]
        public Output<string?> CustomData { get; private set; } = null!;

        /// <summary>
        /// The database name for which access is being granted for this User Definition.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
        /// </summary>
        [Output("mechanisms")]
        public Output<string?> Mechanisms { get; private set; } = null!;

        /// <summary>
        /// The name of the database account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password for User Definition. Response does not contain user password.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The set of roles inherited by the User Definition.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.RoleResponse>> Roles { get; private set; } = null!;

        /// <summary>
        /// The type of Azure resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The user name for User Definition.
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a MongoDBResourceMongoUserDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoDBResourceMongoUserDefinition(string name, MongoDBResourceMongoUserDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:documentdb/v20220215preview:MongoDBResourceMongoUserDefinition", name, args ?? new MongoDBResourceMongoUserDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoDBResourceMongoUserDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:documentdb/v20220215preview:MongoDBResourceMongoUserDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:documentdb:MongoDBResourceMongoUserDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20211015preview:MongoDBResourceMongoUserDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20211115preview:MongoDBResourceMongoUserDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20220515preview:MongoDBResourceMongoUserDefinition"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoDBResourceMongoUserDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoDBResourceMongoUserDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MongoDBResourceMongoUserDefinition(name, id, options);
        }
    }

    public sealed class MongoDBResourceMongoUserDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// A custom definition for the USer Definition.
        /// </summary>
        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        /// <summary>
        /// The database name for which access is being granted for this User Definition.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
        /// </summary>
        [Input("mechanisms")]
        public Input<string>? Mechanisms { get; set; }

        /// <summary>
        /// The ID for the User Definition {dbName.userName}.
        /// </summary>
        [Input("mongoUserDefinitionId")]
        public Input<string>? MongoUserDefinitionId { get; set; }

        /// <summary>
        /// The password for User Definition. Response does not contain user password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("roles")]
        private InputList<Inputs.RoleArgs>? _roles;

        /// <summary>
        /// The set of roles inherited by the User Definition.
        /// </summary>
        public InputList<Inputs.RoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.RoleArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// The user name for User Definition.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public MongoDBResourceMongoUserDefinitionArgs()
        {
        }
        public static new MongoDBResourceMongoUserDefinitionArgs Empty => new MongoDBResourceMongoUserDefinitionArgs();
    }
}
