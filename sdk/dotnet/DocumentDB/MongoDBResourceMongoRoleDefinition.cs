// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DocumentDB
{
    /// <summary>
    /// An Azure Cosmos DB Mongo Role Definition.
    /// API Version: 2021-10-15-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:documentdb:MongoDBResourceMongoRoleDefinition")]
    public partial class MongoDBResourceMongoRoleDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The database name for which access is being granted for this Role Definition.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The name of the database account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege.
        /// </summary>
        [Output("privileges")]
        public Output<ImmutableArray<Outputs.PrivilegeResponse>> Privileges { get; private set; } = null!;

        /// <summary>
        /// A user-friendly name for the Role Definition. Must be unique for the database account.
        /// </summary>
        [Output("roleName")]
        public Output<string?> RoleName { get; private set; } = null!;

        /// <summary>
        /// The set of roles inherited by this Role Definition.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.RoleResponse>> Roles { get; private set; } = null!;

        /// <summary>
        /// The type of Azure resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MongoDBResourceMongoRoleDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoDBResourceMongoRoleDefinition(string name, MongoDBResourceMongoRoleDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:documentdb:MongoDBResourceMongoRoleDefinition", name, args ?? new MongoDBResourceMongoRoleDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoDBResourceMongoRoleDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:documentdb:MongoDBResourceMongoRoleDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20211015preview:MongoDBResourceMongoRoleDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20211115preview:MongoDBResourceMongoRoleDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20220215preview:MongoDBResourceMongoRoleDefinition"},
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20220515preview:MongoDBResourceMongoRoleDefinition"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoDBResourceMongoRoleDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoDBResourceMongoRoleDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MongoDBResourceMongoRoleDefinition(name, id, options);
        }
    }

    public sealed class MongoDBResourceMongoRoleDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The database name for which access is being granted for this Role Definition.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </summary>
        [Input("mongoRoleDefinitionId")]
        public Input<string>? MongoRoleDefinitionId { get; set; }

        [Input("privileges")]
        private InputList<Inputs.PrivilegeArgs>? _privileges;

        /// <summary>
        /// A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege.
        /// </summary>
        public InputList<Inputs.PrivilegeArgs> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<Inputs.PrivilegeArgs>());
            set => _privileges = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A user-friendly name for the Role Definition. Must be unique for the database account.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        [Input("roles")]
        private InputList<Inputs.RoleArgs>? _roles;

        /// <summary>
        /// The set of roles inherited by this Role Definition.
        /// </summary>
        public InputList<Inputs.RoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.RoleArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// Indicates whether the Role Definition was built-in or user created.
        /// </summary>
        [Input("type")]
        public Input<Pulumi.AzureNative.DocumentDB.MongoRoleDefinitionType>? Type { get; set; }

        public MongoDBResourceMongoRoleDefinitionArgs()
        {
        }
        public static new MongoDBResourceMongoRoleDefinitionArgs Empty => new MongoDBResourceMongoRoleDefinitionArgs();
    }
}
