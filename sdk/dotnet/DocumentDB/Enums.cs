// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DocumentDB
{
    /// <summary>
    /// Describes the types of schema for analytical storage.
    /// </summary>
    [EnumType]
    public readonly struct AnalyticalStorageSchemaType : IEquatable<AnalyticalStorageSchemaType>
    {
        private readonly string _value;

        private AnalyticalStorageSchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalyticalStorageSchemaType WellDefined { get; } = new AnalyticalStorageSchemaType("WellDefined");
        public static AnalyticalStorageSchemaType FullFidelity { get; } = new AnalyticalStorageSchemaType("FullFidelity");

        public static bool operator ==(AnalyticalStorageSchemaType left, AnalyticalStorageSchemaType right) => left.Equals(right);
        public static bool operator !=(AnalyticalStorageSchemaType left, AnalyticalStorageSchemaType right) => !left.Equals(right);

        public static explicit operator string(AnalyticalStorageSchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalyticalStorageSchemaType other && Equals(other);
        public bool Equals(AnalyticalStorageSchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMethod : IEquatable<AuthenticationMethod>
    {
        private readonly string _value;

        private AuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthenticationMethod None { get; } = new AuthenticationMethod("None");
        public static AuthenticationMethod Cassandra { get; } = new AuthenticationMethod("Cassandra");
        public static AuthenticationMethod Ldap { get; } = new AuthenticationMethod("Ldap");

        public static bool operator ==(AuthenticationMethod left, AuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(AuthenticationMethod left, AuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMethod other && Equals(other);
        public bool Equals(AuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the status of migration between backup policy types.
    /// </summary>
    [EnumType]
    public readonly struct BackupPolicyMigrationStatus : IEquatable<BackupPolicyMigrationStatus>
    {
        private readonly string _value;

        private BackupPolicyMigrationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupPolicyMigrationStatus Invalid { get; } = new BackupPolicyMigrationStatus("Invalid");
        public static BackupPolicyMigrationStatus InProgress { get; } = new BackupPolicyMigrationStatus("InProgress");
        public static BackupPolicyMigrationStatus Completed { get; } = new BackupPolicyMigrationStatus("Completed");
        public static BackupPolicyMigrationStatus Failed { get; } = new BackupPolicyMigrationStatus("Failed");

        public static bool operator ==(BackupPolicyMigrationStatus left, BackupPolicyMigrationStatus right) => left.Equals(right);
        public static bool operator !=(BackupPolicyMigrationStatus left, BackupPolicyMigrationStatus right) => !left.Equals(right);

        public static explicit operator string(BackupPolicyMigrationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupPolicyMigrationStatus other && Equals(other);
        public bool Equals(BackupPolicyMigrationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the mode of backups.
    /// </summary>
    [EnumType]
    public readonly struct BackupPolicyType : IEquatable<BackupPolicyType>
    {
        private readonly string _value;

        private BackupPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupPolicyType Periodic { get; } = new BackupPolicyType("Periodic");
        public static BackupPolicyType Continuous { get; } = new BackupPolicyType("Continuous");

        public static bool operator ==(BackupPolicyType left, BackupPolicyType right) => left.Equals(right);
        public static bool operator !=(BackupPolicyType left, BackupPolicyType right) => !left.Equals(right);

        public static explicit operator string(BackupPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupPolicyType other && Equals(other);
        public bool Equals(BackupPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate type of backup residency
    /// </summary>
    [EnumType]
    public readonly struct BackupStorageRedundancy : IEquatable<BackupStorageRedundancy>
    {
        private readonly string _value;

        private BackupStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupStorageRedundancy Geo { get; } = new BackupStorageRedundancy("Geo");
        public static BackupStorageRedundancy Local { get; } = new BackupStorageRedundancy("Local");
        public static BackupStorageRedundancy Zone { get; } = new BackupStorageRedundancy("Zone");

        public static bool operator ==(BackupStorageRedundancy left, BackupStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(BackupStorageRedundancy left, BackupStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(BackupStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupStorageRedundancy other && Equals(other);
        public bool Equals(BackupStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sort order for composite paths.
    /// </summary>
    [EnumType]
    public readonly struct CompositePathSortOrder : IEquatable<CompositePathSortOrder>
    {
        private readonly string _value;

        private CompositePathSortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CompositePathSortOrder @Ascending { get; } = new CompositePathSortOrder("ascending");
        public static CompositePathSortOrder @Descending { get; } = new CompositePathSortOrder("descending");

        public static bool operator ==(CompositePathSortOrder left, CompositePathSortOrder right) => left.Equals(right);
        public static bool operator !=(CompositePathSortOrder left, CompositePathSortOrder right) => !left.Equals(right);

        public static explicit operator string(CompositePathSortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CompositePathSortOrder other && Equals(other);
        public bool Equals(CompositePathSortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the conflict resolution mode.
    /// </summary>
    [EnumType]
    public readonly struct ConflictResolutionMode : IEquatable<ConflictResolutionMode>
    {
        private readonly string _value;

        private ConflictResolutionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConflictResolutionMode LastWriterWins { get; } = new ConflictResolutionMode("LastWriterWins");
        public static ConflictResolutionMode Custom { get; } = new ConflictResolutionMode("Custom");

        public static bool operator ==(ConflictResolutionMode left, ConflictResolutionMode right) => left.Equals(right);
        public static bool operator !=(ConflictResolutionMode left, ConflictResolutionMode right) => !left.Equals(right);

        public static explicit operator string(ConflictResolutionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConflictResolutionMode other && Equals(other);
        public bool Equals(ConflictResolutionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The cassandra connector offer type for the Cosmos DB database C* account.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorOffer : IEquatable<ConnectorOffer>
    {
        private readonly string _value;

        private ConnectorOffer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorOffer Small { get; } = new ConnectorOffer("Small");

        public static bool operator ==(ConnectorOffer left, ConnectorOffer right) => left.Equals(right);
        public static bool operator !=(ConnectorOffer left, ConnectorOffer right) => !left.Equals(right);

        public static explicit operator string(ConnectorOffer value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorOffer other && Equals(other);
        public bool Equals(ConnectorOffer other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum to indicate type of Continuous backup mode
    /// </summary>
    [EnumType]
    public readonly struct ContinuousTier : IEquatable<ContinuousTier>
    {
        private readonly string _value;

        private ContinuousTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousTier Continuous7Days { get; } = new ContinuousTier("Continuous7Days");
        public static ContinuousTier Continuous30Days { get; } = new ContinuousTier("Continuous30Days");

        public static bool operator ==(ContinuousTier left, ContinuousTier right) => left.Equals(right);
        public static bool operator !=(ContinuousTier left, ContinuousTier right) => !left.Equals(right);

        public static explicit operator string(ContinuousTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousTier other && Equals(other);
        public bool Equals(ContinuousTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode to create a mongo cluster.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The datatype for which the indexing behavior is applied to.
    /// </summary>
    [EnumType]
    public readonly struct DataType : IEquatable<DataType>
    {
        private readonly string _value;

        private DataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataType String { get; } = new DataType("String");
        public static DataType Number { get; } = new DataType("Number");
        public static DataType Point { get; } = new DataType("Point");
        public static DataType Polygon { get; } = new DataType("Polygon");
        public static DataType LineString { get; } = new DataType("LineString");
        public static DataType MultiPolygon { get; } = new DataType("MultiPolygon");

        public static bool operator ==(DataType left, DataType right) => left.Equals(right);
        public static bool operator !=(DataType left, DataType right) => !left.Equals(right);

        public static explicit operator string(DataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataType other && Equals(other);
        public bool Equals(DataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of database account. This can only be set at database account creation.
    /// </summary>
    [EnumType]
    public readonly struct DatabaseAccountKind : IEquatable<DatabaseAccountKind>
    {
        private readonly string _value;

        private DatabaseAccountKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseAccountKind GlobalDocumentDB { get; } = new DatabaseAccountKind("GlobalDocumentDB");
        public static DatabaseAccountKind MongoDB { get; } = new DatabaseAccountKind("MongoDB");
        public static DatabaseAccountKind Parse { get; } = new DatabaseAccountKind("Parse");

        public static bool operator ==(DatabaseAccountKind left, DatabaseAccountKind right) => left.Equals(right);
        public static bool operator !=(DatabaseAccountKind left, DatabaseAccountKind right) => !left.Equals(right);

        public static explicit operator string(DatabaseAccountKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseAccountKind other && Equals(other);
        public bool Equals(DatabaseAccountKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The offer type for the database
    /// </summary>
    [EnumType]
    public readonly struct DatabaseAccountOfferType : IEquatable<DatabaseAccountOfferType>
    {
        private readonly string _value;

        private DatabaseAccountOfferType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatabaseAccountOfferType Standard { get; } = new DatabaseAccountOfferType("Standard");

        public static bool operator ==(DatabaseAccountOfferType left, DatabaseAccountOfferType right) => left.Equals(right);
        public static bool operator !=(DatabaseAccountOfferType left, DatabaseAccountOfferType right) => !left.Equals(right);

        public static explicit operator string(DatabaseAccountOfferType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseAccountOfferType other && Equals(other);
        public bool Equals(DatabaseAccountOfferType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default consistency level and configuration settings of the Cosmos DB account.
    /// </summary>
    [EnumType]
    public readonly struct DefaultConsistencyLevel : IEquatable<DefaultConsistencyLevel>
    {
        private readonly string _value;

        private DefaultConsistencyLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultConsistencyLevel Eventual { get; } = new DefaultConsistencyLevel("Eventual");
        public static DefaultConsistencyLevel Session { get; } = new DefaultConsistencyLevel("Session");
        public static DefaultConsistencyLevel BoundedStaleness { get; } = new DefaultConsistencyLevel("BoundedStaleness");
        public static DefaultConsistencyLevel Strong { get; } = new DefaultConsistencyLevel("Strong");
        public static DefaultConsistencyLevel ConsistentPrefix { get; } = new DefaultConsistencyLevel("ConsistentPrefix");

        public static bool operator ==(DefaultConsistencyLevel left, DefaultConsistencyLevel right) => left.Equals(right);
        public static bool operator !=(DefaultConsistencyLevel left, DefaultConsistencyLevel right) => !left.Equals(right);

        public static explicit operator string(DefaultConsistencyLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultConsistencyLevel other && Equals(other);
        public bool Equals(DefaultConsistencyLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of index.
    /// </summary>
    [EnumType]
    public readonly struct IndexKind : IEquatable<IndexKind>
    {
        private readonly string _value;

        private IndexKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexKind Hash { get; } = new IndexKind("Hash");
        public static IndexKind Range { get; } = new IndexKind("Range");
        public static IndexKind Spatial { get; } = new IndexKind("Spatial");

        public static bool operator ==(IndexKind left, IndexKind right) => left.Equals(right);
        public static bool operator !=(IndexKind left, IndexKind right) => !left.Equals(right);

        public static explicit operator string(IndexKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexKind other && Equals(other);
        public bool Equals(IndexKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the indexing mode.
    /// </summary>
    [EnumType]
    public readonly struct IndexingMode : IEquatable<IndexingMode>
    {
        private readonly string _value;

        private IndexingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexingMode Consistent { get; } = new IndexingMode("consistent");
        public static IndexingMode Lazy { get; } = new IndexingMode("lazy");
        public static IndexingMode None { get; } = new IndexingMode("none");

        public static bool operator ==(IndexingMode left, IndexingMode right) => left.Equals(right);
        public static bool operator !=(IndexingMode left, IndexingMode right) => !left.Equals(right);

        public static explicit operator string(IndexingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexingMode other && Equals(other);
        public bool Equals(IndexingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the resource at the time the operation was called.
    /// </summary>
    [EnumType]
    public readonly struct ManagedCassandraProvisioningState : IEquatable<ManagedCassandraProvisioningState>
    {
        private readonly string _value;

        private ManagedCassandraProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedCassandraProvisioningState Creating { get; } = new ManagedCassandraProvisioningState("Creating");
        public static ManagedCassandraProvisioningState Updating { get; } = new ManagedCassandraProvisioningState("Updating");
        public static ManagedCassandraProvisioningState Deleting { get; } = new ManagedCassandraProvisioningState("Deleting");
        public static ManagedCassandraProvisioningState Succeeded { get; } = new ManagedCassandraProvisioningState("Succeeded");
        public static ManagedCassandraProvisioningState Failed { get; } = new ManagedCassandraProvisioningState("Failed");
        public static ManagedCassandraProvisioningState Canceled { get; } = new ManagedCassandraProvisioningState("Canceled");

        public static bool operator ==(ManagedCassandraProvisioningState left, ManagedCassandraProvisioningState right) => left.Equals(right);
        public static bool operator !=(ManagedCassandraProvisioningState left, ManagedCassandraProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ManagedCassandraProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedCassandraProvisioningState other && Equals(other);
        public bool Equals(ManagedCassandraProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the resource.
    /// </summary>
    [EnumType]
    public readonly struct ManagedCassandraResourceIdentityType : IEquatable<ManagedCassandraResourceIdentityType>
    {
        private readonly string _value;

        private ManagedCassandraResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedCassandraResourceIdentityType SystemAssigned { get; } = new ManagedCassandraResourceIdentityType("SystemAssigned");
        public static ManagedCassandraResourceIdentityType None { get; } = new ManagedCassandraResourceIdentityType("None");

        public static bool operator ==(ManagedCassandraResourceIdentityType left, ManagedCassandraResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedCassandraResourceIdentityType left, ManagedCassandraResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedCassandraResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedCassandraResourceIdentityType other && Equals(other);
        public bool Equals(ManagedCassandraResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the minimum allowed Tls version. The default value is Tls 1.2. Cassandra and Mongo APIs only work with Tls 1.2.
    /// </summary>
    [EnumType]
    public readonly struct MinimalTlsVersion : IEquatable<MinimalTlsVersion>
    {
        private readonly string _value;

        private MinimalTlsVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MinimalTlsVersion Tls { get; } = new MinimalTlsVersion("Tls");
        public static MinimalTlsVersion Tls11 { get; } = new MinimalTlsVersion("Tls11");
        public static MinimalTlsVersion Tls12 { get; } = new MinimalTlsVersion("Tls12");

        public static bool operator ==(MinimalTlsVersion left, MinimalTlsVersion right) => left.Equals(right);
        public static bool operator !=(MinimalTlsVersion left, MinimalTlsVersion right) => !left.Equals(right);

        public static explicit operator string(MinimalTlsVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalTlsVersion other && Equals(other);
        public bool Equals(MinimalTlsVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the Role Definition was built-in or user created.
    /// </summary>
    [EnumType]
    public readonly struct MongoRoleDefinitionType : IEquatable<MongoRoleDefinitionType>
    {
        private readonly string _value;

        private MongoRoleDefinitionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MongoRoleDefinitionType BuiltInRole { get; } = new MongoRoleDefinitionType("BuiltInRole");
        public static MongoRoleDefinitionType CustomRole { get; } = new MongoRoleDefinitionType("CustomRole");

        public static bool operator ==(MongoRoleDefinitionType left, MongoRoleDefinitionType right) => left.Equals(right);
        public static bool operator !=(MongoRoleDefinitionType left, MongoRoleDefinitionType right) => !left.Equals(right);

        public static explicit operator string(MongoRoleDefinitionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MongoRoleDefinitionType other && Equals(other);
        public bool Equals(MongoRoleDefinitionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates what services are allowed to bypass firewall checks.
    /// </summary>
    [EnumType]
    public readonly struct NetworkAclBypass : IEquatable<NetworkAclBypass>
    {
        private readonly string _value;

        private NetworkAclBypass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkAclBypass None { get; } = new NetworkAclBypass("None");
        public static NetworkAclBypass AzureServices { get; } = new NetworkAclBypass("AzureServices");

        public static bool operator ==(NetworkAclBypass left, NetworkAclBypass right) => left.Equals(right);
        public static bool operator !=(NetworkAclBypass left, NetworkAclBypass right) => !left.Equals(right);

        public static explicit operator string(NetworkAclBypass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkAclBypass other && Equals(other);
        public bool Equals(NetworkAclBypass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The node type deployed in the node group.
    /// </summary>
    [EnumType]
    public readonly struct NodeKind : IEquatable<NodeKind>
    {
        private readonly string _value;

        private NodeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NodeKind Shard { get; } = new NodeKind("Shard");

        public static bool operator ==(NodeKind left, NodeKind right) => left.Equals(right);
        public static bool operator !=(NodeKind left, NodeKind right) => !left.Equals(right);

        public static explicit operator string(NodeKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NodeKind other && Equals(other);
        public bool Equals(NodeKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
    /// </summary>
    [EnumType]
    public readonly struct PartitionKind : IEquatable<PartitionKind>
    {
        private readonly string _value;

        private PartitionKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PartitionKind Hash { get; } = new PartitionKind("Hash");
        public static PartitionKind Range { get; } = new PartitionKind("Range");
        public static PartitionKind MultiHash { get; } = new PartitionKind("MultiHash");

        public static bool operator ==(PartitionKind left, PartitionKind right) => left.Equals(right);
        public static bool operator !=(PartitionKind left, PartitionKind right) => !left.Equals(right);

        public static explicit operator string(PartitionKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PartitionKind other && Equals(other);
        public bool Equals(PartitionKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether requests from Public Network are allowed
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");
        public static PublicNetworkAccess SecuredByPerimeter { get; } = new PublicNetworkAccess("SecuredByPerimeter");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned,UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the mode of the restore.
    /// </summary>
    [EnumType]
    public readonly struct RestoreMode : IEquatable<RestoreMode>
    {
        private readonly string _value;

        private RestoreMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestoreMode PointInTime { get; } = new RestoreMode("PointInTime");

        public static bool operator ==(RestoreMode left, RestoreMode right) => left.Equals(right);
        public static bool operator !=(RestoreMode left, RestoreMode right) => !left.Equals(right);

        public static explicit operator string(RestoreMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestoreMode other && Equals(other);
        public bool Equals(RestoreMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the Role Definition was built-in or user created.
    /// </summary>
    [EnumType]
    public readonly struct RoleDefinitionType : IEquatable<RoleDefinitionType>
    {
        private readonly string _value;

        private RoleDefinitionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoleDefinitionType BuiltInRole { get; } = new RoleDefinitionType("BuiltInRole");
        public static RoleDefinitionType CustomRole { get; } = new RoleDefinitionType("CustomRole");

        public static bool operator ==(RoleDefinitionType left, RoleDefinitionType right) => left.Equals(right);
        public static bool operator !=(RoleDefinitionType left, RoleDefinitionType right) => !left.Equals(right);

        public static explicit operator string(RoleDefinitionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoleDefinitionType other && Equals(other);
        public bool Equals(RoleDefinitionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the ServerVersion of an a MongoDB account.
    /// </summary>
    [EnumType]
    public readonly struct ServerVersion : IEquatable<ServerVersion>
    {
        private readonly string _value;

        private ServerVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerVersion ServerVersion_3_2 { get; } = new ServerVersion("3.2");
        public static ServerVersion ServerVersion_3_6 { get; } = new ServerVersion("3.6");
        public static ServerVersion ServerVersion_4_0 { get; } = new ServerVersion("4.0");
        public static ServerVersion ServerVersion_4_2 { get; } = new ServerVersion("4.2");

        public static bool operator ==(ServerVersion left, ServerVersion right) => left.Equals(right);
        public static bool operator !=(ServerVersion left, ServerVersion right) => !left.Equals(right);

        public static explicit operator string(ServerVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerVersion other && Equals(other);
        public bool Equals(ServerVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Instance type for the service.
    /// </summary>
    [EnumType]
    public readonly struct ServiceSize : IEquatable<ServiceSize>
    {
        private readonly string _value;

        private ServiceSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSize Cosmos_D4s { get; } = new ServiceSize("Cosmos.D4s");
        public static ServiceSize Cosmos_D8s { get; } = new ServiceSize("Cosmos.D8s");
        public static ServiceSize Cosmos_D16s { get; } = new ServiceSize("Cosmos.D16s");

        public static bool operator ==(ServiceSize left, ServiceSize right) => left.Equals(right);
        public static bool operator !=(ServiceSize left, ServiceSize right) => !left.Equals(right);

        public static explicit operator string(ServiceSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSize other && Equals(other);
        public bool Equals(ServiceSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ServiceType for the service.
    /// </summary>
    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType SqlDedicatedGateway { get; } = new ServiceType("SqlDedicatedGateway");
        public static ServiceType DataTransfer { get; } = new ServiceType("DataTransfer");
        public static ServiceType GraphAPICompute { get; } = new ServiceType("GraphAPICompute");
        public static ServiceType MaterializedViewsBuilder { get; } = new ServiceType("MaterializedViewsBuilder");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the spatial type of index.
    /// </summary>
    [EnumType]
    public readonly struct SpatialType : IEquatable<SpatialType>
    {
        private readonly string _value;

        private SpatialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpatialType Point { get; } = new SpatialType("Point");
        public static SpatialType LineString { get; } = new SpatialType("LineString");
        public static SpatialType Polygon { get; } = new SpatialType("Polygon");
        public static SpatialType MultiPolygon { get; } = new SpatialType("MultiPolygon");

        public static bool operator ==(SpatialType left, SpatialType right) => left.Equals(right);
        public static bool operator !=(SpatialType left, SpatialType right) => !left.Equals(right);

        public static explicit operator string(SpatialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpatialType other && Equals(other);
        public bool Equals(SpatialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation the trigger is associated with
    /// </summary>
    [EnumType]
    public readonly struct TriggerOperation : IEquatable<TriggerOperation>
    {
        private readonly string _value;

        private TriggerOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerOperation All { get; } = new TriggerOperation("All");
        public static TriggerOperation Create { get; } = new TriggerOperation("Create");
        public static TriggerOperation Update { get; } = new TriggerOperation("Update");
        public static TriggerOperation Delete { get; } = new TriggerOperation("Delete");
        public static TriggerOperation Replace { get; } = new TriggerOperation("Replace");

        public static bool operator ==(TriggerOperation left, TriggerOperation right) => left.Equals(right);
        public static bool operator !=(TriggerOperation left, TriggerOperation right) => !left.Equals(right);

        public static explicit operator string(TriggerOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerOperation other && Equals(other);
        public bool Equals(TriggerOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the Trigger
    /// </summary>
    [EnumType]
    public readonly struct TriggerType : IEquatable<TriggerType>
    {
        private readonly string _value;

        private TriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerType Pre { get; } = new TriggerType("Pre");
        public static TriggerType Post { get; } = new TriggerType("Post");

        public static bool operator ==(TriggerType left, TriggerType right) => left.Equals(right);
        public static bool operator !=(TriggerType left, TriggerType right) => !left.Equals(right);

        public static explicit operator string(TriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerType other && Equals(other);
        public bool Equals(TriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
