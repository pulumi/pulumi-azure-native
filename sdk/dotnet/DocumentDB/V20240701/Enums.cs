// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DocumentDB.V20240701
{
    /// <summary>
    /// The mode to create a mongo cluster.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Create a new mongo cluster.
        /// </summary>
        public static CreateMode Default { get; } = new CreateMode("Default");
        /// <summary>
        /// Create a mongo cluster from a restore point-in-time.
        /// </summary>
        public static CreateMode PointInTimeRestore { get; } = new CreateMode("PointInTimeRestore");
        /// <summary>
        /// Create a replica cluster in distinct geographic region from the source cluster.
        /// </summary>
        public static CreateMode GeoReplica { get; } = new CreateMode("GeoReplica");
        /// <summary>
        /// Create a replica cluster in the same geographic region as the source cluster.
        /// </summary>
        public static CreateMode Replica { get; } = new CreateMode("Replica");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The target high availability mode requested for the cluster.
    /// </summary>
    [EnumType]
    public readonly struct HighAvailabilityMode : IEquatable<HighAvailabilityMode>
    {
        private readonly string _value;

        private HighAvailabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// High availability mode is disabled. This mode is can see availability impact during faults or maintenance and is not recommended for production.
        /// </summary>
        public static HighAvailabilityMode Disabled { get; } = new HighAvailabilityMode("Disabled");
        /// <summary>
        /// High availability mode is enabled, where each server in a shard is placed in the same availability zone.
        /// </summary>
        public static HighAvailabilityMode SameZone { get; } = new HighAvailabilityMode("SameZone");
        /// <summary>
        /// High availability mode is enabled and preferences ZoneRedundant if availability zones capacity is available in the region, otherwise falls-back to provisioning with SameZone.
        /// </summary>
        public static HighAvailabilityMode ZoneRedundantPreferred { get; } = new HighAvailabilityMode("ZoneRedundantPreferred");

        public static bool operator ==(HighAvailabilityMode left, HighAvailabilityMode right) => left.Equals(right);
        public static bool operator !=(HighAvailabilityMode left, HighAvailabilityMode right) => !left.Equals(right);

        public static explicit operator string(HighAvailabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HighAvailabilityMode other && Equals(other);
        public bool Equals(HighAvailabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Preview features that can be enabled on a mongo cluster.
    /// </summary>
    [EnumType]
    public readonly struct PreviewFeature : IEquatable<PreviewFeature>
    {
        private readonly string _value;

        private PreviewFeature(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enables geo replicas preview feature. The feature must be set at create-time on new cluster to enable linking a geo-replica cluster to it.
        /// </summary>
        public static PreviewFeature GeoReplicas { get; } = new PreviewFeature("GeoReplicas");

        public static bool operator ==(PreviewFeature left, PreviewFeature right) => left.Equals(right);
        public static bool operator !=(PreviewFeature left, PreviewFeature right) => !left.Equals(right);

        public static explicit operator string(PreviewFeature value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreviewFeature other && Equals(other);
        public bool Equals(PreviewFeature other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public endpoint access is allowed for this mongo cluster.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If set, mongo cluster can be accessed through private and public methods.
        /// </summary>
        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        /// <summary>
        /// If set, the private endpoints are the exclusive access method.
        /// </summary>
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
