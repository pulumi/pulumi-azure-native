// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DocumentDB
{
    /// <summary>
    /// Represents a mongo cluster resource.
    /// Azure REST API version: 2023-03-15-preview.
    /// 
    /// Other available API versions: 2023-09-15-preview, 2023-11-15-preview, 2024-02-15-preview, 2024-03-01-preview, 2024-06-01-preview, 2024-07-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:documentdb:MongoCluster")]
    public partial class MongoCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrator's login for the mongo cluster.
        /// </summary>
        [Output("administratorLogin")]
        public Output<string?> AdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// A status of the mongo cluster.
        /// </summary>
        [Output("clusterStatus")]
        public Output<string> ClusterStatus { get; private set; } = null!;

        /// <summary>
        /// The default mongo connection string for the cluster.
        /// </summary>
        [Output("connectionString")]
        public Output<string> ConnectionString { get; private set; } = null!;

        /// <summary>
        /// Earliest restore timestamp in UTC ISO8601 format.
        /// </summary>
        [Output("earliestRestoreTime")]
        public Output<string> EarliestRestoreTime { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of node group specs in the cluster.
        /// </summary>
        [Output("nodeGroupSpecs")]
        public Output<ImmutableArray<Outputs.NodeGroupSpecResponse>> NodeGroupSpecs { get; private set; } = null!;

        /// <summary>
        /// A provisioning state of the mongo cluster.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The Mongo DB server version. Defaults to the latest available version if not specified.
        /// </summary>
        [Output("serverVersion")]
        public Output<string?> ServerVersion { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MongoCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoCluster(string name, MongoClusterArgs args, CustomResourceOptions? options = null)
            : base("azure-native:documentdb:MongoCluster", name, args ?? new MongoClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:documentdb:MongoCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20230301preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20230315preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20230915preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20231115preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20240215preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20240301preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20240601preview:MongoCluster" },
                    new global::Pulumi.Alias { Type = "azure-native:documentdb/v20240701:MongoCluster" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MongoCluster(name, id, options);
        }
    }

    public sealed class MongoClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator's login for the mongo cluster.
        /// </summary>
        [Input("administratorLogin")]
        public Input<string>? AdministratorLogin { get; set; }

        /// <summary>
        /// The password of the administrator login.
        /// </summary>
        [Input("administratorLoginPassword")]
        public Input<string>? AdministratorLoginPassword { get; set; }

        /// <summary>
        /// The mode to create a mongo cluster.
        /// </summary>
        [Input("createMode")]
        public InputUnion<string, Pulumi.AzureNative.DocumentDB.CreateMode>? CreateMode { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the mongo cluster.
        /// </summary>
        [Input("mongoClusterName")]
        public Input<string>? MongoClusterName { get; set; }

        [Input("nodeGroupSpecs")]
        private InputList<Inputs.NodeGroupSpecArgs>? _nodeGroupSpecs;

        /// <summary>
        /// The list of node group specs in the cluster.
        /// </summary>
        public InputList<Inputs.NodeGroupSpecArgs> NodeGroupSpecs
        {
            get => _nodeGroupSpecs ?? (_nodeGroupSpecs = new InputList<Inputs.NodeGroupSpecArgs>());
            set => _nodeGroupSpecs = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Parameters used for restore operations
        /// </summary>
        [Input("restoreParameters")]
        public Input<Inputs.MongoClusterRestoreParametersArgs>? RestoreParameters { get; set; }

        /// <summary>
        /// The Mongo DB server version. Defaults to the latest available version if not specified.
        /// </summary>
        [Input("serverVersion")]
        public Input<string>? ServerVersion { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MongoClusterArgs()
        {
            CreateMode = "Default";
        }
        public static new MongoClusterArgs Empty => new MongoClusterArgs();
    }
}
