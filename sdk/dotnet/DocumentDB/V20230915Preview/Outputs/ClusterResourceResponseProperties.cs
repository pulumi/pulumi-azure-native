// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DocumentDB.V20230915Preview.Outputs
{

    /// <summary>
    /// Properties of a managed Cassandra cluster.
    /// </summary>
    [OutputType]
    public sealed class ClusterResourceResponseProperties
    {
        /// <summary>
        /// Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'.
        /// </summary>
        public readonly string? AuthenticationMethod;
        /// <summary>
        /// List of backup schedules that define when you want to back up your data.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackupScheduleResponse> BackupSchedules;
        /// <summary>
        /// Whether Cassandra audit logging is enabled
        /// </summary>
        public readonly bool? CassandraAuditLoggingEnabled;
        /// <summary>
        /// Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
        /// </summary>
        public readonly string? CassandraVersion;
        /// <summary>
        /// List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateResponse> ClientCertificates;
        /// <summary>
        /// If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
        /// </summary>
        public readonly string? ClusterNameOverride;
        /// <summary>
        /// Type of the cluster. If set to Production, some operations might not be permitted on cluster.
        /// </summary>
        public readonly string? ClusterType;
        /// <summary>
        /// Whether the cluster and associated data centers has been deallocated.
        /// </summary>
        public readonly bool? Deallocated;
        /// <summary>
        /// Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;'
        /// </summary>
        public readonly string? DelegatedManagementSubnetId;
        /// <summary>
        /// Extensions to be added or updated on cluster.
        /// </summary>
        public readonly ImmutableArray<string> Extensions;
        /// <summary>
        /// List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateResponse> ExternalGossipCertificates;
        /// <summary>
        /// List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
        /// </summary>
        public readonly ImmutableArray<Outputs.SeedNodeResponse> ExternalSeedNodes;
        /// <summary>
        /// List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateResponse> GossipCertificates;
        /// <summary>
        /// (Deprecated) Number of hours to wait between taking a backup of the cluster.
        /// </summary>
        public readonly int? HoursBetweenBackups;
        /// <summary>
        /// Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
        /// </summary>
        public readonly Outputs.SeedNodeResponse? PrometheusEndpoint;
        /// <summary>
        /// Error related to resource provisioning.
        /// </summary>
        public readonly Outputs.CassandraErrorResponse? ProvisionError;
        /// <summary>
        /// The status of the resource at the time the operation was called.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
        /// </summary>
        public readonly bool? RepairEnabled;
        /// <summary>
        /// List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.
        /// </summary>
        public readonly ImmutableArray<Outputs.SeedNodeResponse> SeedNodes;

        [OutputConstructor]
        private ClusterResourceResponseProperties(
            string? authenticationMethod,

            ImmutableArray<Outputs.BackupScheduleResponse> backupSchedules,

            bool? cassandraAuditLoggingEnabled,

            string? cassandraVersion,

            ImmutableArray<Outputs.CertificateResponse> clientCertificates,

            string? clusterNameOverride,

            string? clusterType,

            bool? deallocated,

            string? delegatedManagementSubnetId,

            ImmutableArray<string> extensions,

            ImmutableArray<Outputs.CertificateResponse> externalGossipCertificates,

            ImmutableArray<Outputs.SeedNodeResponse> externalSeedNodes,

            ImmutableArray<Outputs.CertificateResponse> gossipCertificates,

            int? hoursBetweenBackups,

            Outputs.SeedNodeResponse? prometheusEndpoint,

            Outputs.CassandraErrorResponse? provisionError,

            string? provisioningState,

            bool? repairEnabled,

            ImmutableArray<Outputs.SeedNodeResponse> seedNodes)
        {
            AuthenticationMethod = authenticationMethod;
            BackupSchedules = backupSchedules;
            CassandraAuditLoggingEnabled = cassandraAuditLoggingEnabled;
            CassandraVersion = cassandraVersion;
            ClientCertificates = clientCertificates;
            ClusterNameOverride = clusterNameOverride;
            ClusterType = clusterType;
            Deallocated = deallocated;
            DelegatedManagementSubnetId = delegatedManagementSubnetId;
            Extensions = extensions;
            ExternalGossipCertificates = externalGossipCertificates;
            ExternalSeedNodes = externalSeedNodes;
            GossipCertificates = gossipCertificates;
            HoursBetweenBackups = hoursBetweenBackups;
            PrometheusEndpoint = prometheusEndpoint;
            ProvisionError = provisionError;
            ProvisioningState = provisioningState;
            RepairEnabled = repairEnabled;
            SeedNodes = seedNodes;
        }
    }
}
