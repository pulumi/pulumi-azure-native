// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DocumentDB.V20240215Preview
{
    public static class GetMongoDBResourceMongoRoleDefinition
    {
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role Definition with the given Id.
        /// </summary>
        public static Task<GetMongoDBResourceMongoRoleDefinitionResult> InvokeAsync(GetMongoDBResourceMongoRoleDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMongoDBResourceMongoRoleDefinitionResult>("azure-native:documentdb/v20240215preview:getMongoDBResourceMongoRoleDefinition", args ?? new GetMongoDBResourceMongoRoleDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role Definition with the given Id.
        /// </summary>
        public static Output<GetMongoDBResourceMongoRoleDefinitionResult> Invoke(GetMongoDBResourceMongoRoleDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMongoDBResourceMongoRoleDefinitionResult>("azure-native:documentdb/v20240215preview:getMongoDBResourceMongoRoleDefinition", args ?? new GetMongoDBResourceMongoRoleDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMongoDBResourceMongoRoleDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </summary>
        [Input("mongoRoleDefinitionId", required: true)]
        public string MongoRoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMongoDBResourceMongoRoleDefinitionArgs()
        {
        }
        public static new GetMongoDBResourceMongoRoleDefinitionArgs Empty => new GetMongoDBResourceMongoRoleDefinitionArgs();
    }

    public sealed class GetMongoDBResourceMongoRoleDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </summary>
        [Input("mongoRoleDefinitionId", required: true)]
        public Input<string> MongoRoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMongoDBResourceMongoRoleDefinitionInvokeArgs()
        {
        }
        public static new GetMongoDBResourceMongoRoleDefinitionInvokeArgs Empty => new GetMongoDBResourceMongoRoleDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMongoDBResourceMongoRoleDefinitionResult
    {
        /// <summary>
        /// The database name for which access is being granted for this Role Definition.
        /// </summary>
        public readonly string? DatabaseName;
        /// <summary>
        /// The unique resource identifier of the database account.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the database account.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivilegeResponse> Privileges;
        /// <summary>
        /// A user-friendly name for the Role Definition. Must be unique for the database account.
        /// </summary>
        public readonly string? RoleName;
        /// <summary>
        /// The set of roles inherited by this Role Definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.RoleResponse> Roles;
        /// <summary>
        /// The type of Azure resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMongoDBResourceMongoRoleDefinitionResult(
            string? databaseName,

            string id,

            string name,

            ImmutableArray<Outputs.PrivilegeResponse> privileges,

            string? roleName,

            ImmutableArray<Outputs.RoleResponse> roles,

            string type)
        {
            DatabaseName = databaseName;
            Id = id;
            Name = name;
            Privileges = privileges;
            RoleName = roleName;
            Roles = roles;
            Type = type;
        }
    }
}
