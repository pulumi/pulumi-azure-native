// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DocumentDB.V20200601Preview
{
    /// <summary>
    /// An Azure Cosmos DB database account.
    /// </summary>
    public partial class DatabaseAccount : Pulumi.CustomResource
    {
        /// <summary>
        /// API specific properties.
        /// </summary>
        [Output("apiProperties")]
        public Output<Outputs.ApiPropertiesResponse?> ApiProperties { get; private set; } = null!;

        /// <summary>
        /// The object representing the policy for taking backups on an account.
        /// </summary>
        [Output("backupPolicy")]
        public Output<Union<Outputs.ContinuousModeBackupPolicyResponse, Outputs.PeriodicModeBackupPolicyResponse>?> BackupPolicy { get; private set; } = null!;

        /// <summary>
        /// List of Cosmos DB capabilities for the account
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<Outputs.CapabilityResponse>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// The cassandra connector offer type for the Cosmos DB database C* account.
        /// </summary>
        [Output("connectorOffer")]
        public Output<string?> ConnectorOffer { get; private set; } = null!;

        /// <summary>
        /// The consistency policy for the Cosmos DB database account.
        /// </summary>
        [Output("consistencyPolicy")]
        public Output<Outputs.ConsistencyPolicyResponse?> ConsistencyPolicy { get; private set; } = null!;

        /// <summary>
        /// The CORS policy for the Cosmos DB database account.
        /// </summary>
        [Output("cors")]
        public Output<ImmutableArray<Outputs.CorsPolicyResponse>> Cors { get; private set; } = null!;

        /// <summary>
        /// Enum to indicate the mode of account creation.
        /// </summary>
        [Output("createMode")]
        public Output<string?> CreateMode { get; private set; } = null!;

        /// <summary>
        /// The offer type for the Cosmos DB database account. Default value: Standard.
        /// </summary>
        [Output("databaseAccountOfferType")]
        public Output<string> DatabaseAccountOfferType { get; private set; } = null!;

        /// <summary>
        /// Disable write operations on metadata resources (databases, containers, throughput) via account keys
        /// </summary>
        [Output("disableKeyBasedMetadataWriteAccess")]
        public Output<bool?> DisableKeyBasedMetadataWriteAccess { get; private set; } = null!;

        /// <summary>
        /// The connection endpoint for the Cosmos DB database account.
        /// </summary>
        [Output("documentEndpoint")]
        public Output<string> DocumentEndpoint { get; private set; } = null!;

        /// <summary>
        /// Flag to indicate whether to enable storage analytics.
        /// </summary>
        [Output("enableAnalyticalStorage")]
        public Output<bool?> EnableAnalyticalStorage { get; private set; } = null!;

        /// <summary>
        /// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
        /// </summary>
        [Output("enableAutomaticFailover")]
        public Output<bool?> EnableAutomaticFailover { get; private set; } = null!;

        /// <summary>
        /// Enables the cassandra connector on the Cosmos DB C* account
        /// </summary>
        [Output("enableCassandraConnector")]
        public Output<bool?> EnableCassandraConnector { get; private set; } = null!;

        /// <summary>
        /// Flag to indicate whether Free Tier is enabled.
        /// </summary>
        [Output("enableFreeTier")]
        public Output<bool?> EnableFreeTier { get; private set; } = null!;

        /// <summary>
        /// Enables the account to write in multiple locations
        /// </summary>
        [Output("enableMultipleWriteLocations")]
        public Output<bool?> EnableMultipleWriteLocations { get; private set; } = null!;

        /// <summary>
        /// An array that contains the regions ordered by their failover priorities.
        /// </summary>
        [Output("failoverPolicies")]
        public Output<ImmutableArray<Outputs.FailoverPolicyResponse>> FailoverPolicies { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// A unique identifier assigned to the database account
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// List of IpRules.
        /// </summary>
        [Output("ipRules")]
        public Output<ImmutableArray<Outputs.IpAddressOrRangeResponse>> IpRules { get; private set; } = null!;

        /// <summary>
        /// Flag to indicate whether to enable/disable Virtual Network ACL rules.
        /// </summary>
        [Output("isVirtualNetworkFilterEnabled")]
        public Output<bool?> IsVirtualNetworkFilterEnabled { get; private set; } = null!;

        /// <summary>
        /// The URI of the key vault
        /// </summary>
        [Output("keyVaultKeyUri")]
        public Output<string?> KeyVaultKeyUri { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of database account. This can only be set at database account creation.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The location of the resource group to which the resource belongs.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// An array that contains all of the locations enabled for the Cosmos DB account.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<Outputs.LocationResponse>> Locations { get; private set; } = null!;

        /// <summary>
        /// The name of the ARM resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of Private Endpoint Connections configured for the Cosmos DB account.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Whether requests from Public Network are allowed
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// An array that contains of the read locations enabled for the Cosmos DB account.
        /// </summary>
        [Output("readLocations")]
        public Output<ImmutableArray<Outputs.LocationResponse>> ReadLocations { get; private set; } = null!;

        /// <summary>
        /// Parameters to indicate the information about the restore.
        /// </summary>
        [Output("restoreParameters")]
        public Output<Outputs.RestoreParametersResponse?> RestoreParameters { get; private set; } = null!;

        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of Azure resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// List of Virtual Network ACL rules configured for the Cosmos DB account.
        /// </summary>
        [Output("virtualNetworkRules")]
        public Output<ImmutableArray<Outputs.VirtualNetworkRuleResponse>> VirtualNetworkRules { get; private set; } = null!;

        /// <summary>
        /// An array that contains the write location for the Cosmos DB account.
        /// </summary>
        [Output("writeLocations")]
        public Output<ImmutableArray<Outputs.LocationResponse>> WriteLocations { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseAccount(string name, DatabaseAccountArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:documentdb/v20200601preview:DatabaseAccount", name, args ?? new DatabaseAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseAccount(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:documentdb/v20200601preview:DatabaseAccount", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/latest:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20150401:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20150408:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20151106:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20160319:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20160331:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20190801:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20191212:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20200301:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20200401:DatabaseAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:documentdb/v20200901:DatabaseAccount"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseAccount Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DatabaseAccount(name, id, options);
        }
    }

    public sealed class DatabaseAccountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cosmos DB database account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Indicates the type of database account. This can only be set at database account creation.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The location of the resource group to which the resource belongs.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Properties to create and update Azure Cosmos DB database accounts.
        /// </summary>
        [Input("properties", required: true)]
        public InputUnion<Inputs.DefaultRequestDatabaseAccountCreateUpdatePropertiesArgs, Inputs.RestoreReqeustDatabaseAccountCreateUpdatePropertiesArgs> Properties { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DatabaseAccountArgs()
        {
        }
    }
}
