// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20230401
{
    /// <summary>
    /// Represents an environment type.
    /// </summary>
    [AzureNativeResourceType("azure-native:devcenter/v20230401:ProjectEnvironmentType")]
    public partial class ProjectEnvironmentType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The role definition assigned to the environment creator on backing resources.
        /// </summary>
        [Output("creatorRoleAssignment")]
        public Output<Outputs.ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment?> CreatorRoleAssignment { get; private set; } = null!;

        /// <summary>
        /// Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        [Output("deploymentTargetId")]
        public Output<string?> DeploymentTargetId { get; private set; } = null!;

        /// <summary>
        /// Managed identity properties
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location for the environment type
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Defines whether this Environment Type can be used in this Project.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
        /// </summary>
        [Output("userRoleAssignments")]
        public Output<ImmutableDictionary<string, Outputs.UserRoleAssignmentResponse>?> UserRoleAssignments { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectEnvironmentType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectEnvironmentType(string name, ProjectEnvironmentTypeArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20230401:ProjectEnvironmentType", name, args ?? new ProjectEnvironmentTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectEnvironmentType(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20230401:ProjectEnvironmentType", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devcenter:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220801preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220901preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221012preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221111preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230101preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230801preview:ProjectEnvironmentType" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20231001preview:ProjectEnvironmentType" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectEnvironmentType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectEnvironmentType Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ProjectEnvironmentType(name, id, options);
        }
    }

    public sealed class ProjectEnvironmentTypeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The role definition assigned to the environment creator on backing resources.
        /// </summary>
        [Input("creatorRoleAssignment")]
        public Input<Inputs.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignmentArgs>? CreatorRoleAssignment { get; set; }

        /// <summary>
        /// Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        [Input("deploymentTargetId")]
        public Input<string>? DeploymentTargetId { get; set; }

        /// <summary>
        /// The name of the environment type.
        /// </summary>
        [Input("environmentTypeName")]
        public Input<string>? EnvironmentTypeName { get; set; }

        /// <summary>
        /// Managed identity properties
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location for the environment type
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Defines whether this Environment Type can be used in this Project.
        /// </summary>
        [Input("status")]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20230401.EnvironmentTypeEnableStatus>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("userRoleAssignments")]
        private InputMap<Inputs.UserRoleAssignmentArgs>? _userRoleAssignments;

        /// <summary>
        /// Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
        /// </summary>
        public InputMap<Inputs.UserRoleAssignmentArgs> UserRoleAssignments
        {
            get => _userRoleAssignments ?? (_userRoleAssignments = new InputMap<Inputs.UserRoleAssignmentArgs>());
            set => _userRoleAssignments = value;
        }

        public ProjectEnvironmentTypeArgs()
        {
        }
        public static new ProjectEnvironmentTypeArgs Empty => new ProjectEnvironmentTypeArgs();
    }
}
