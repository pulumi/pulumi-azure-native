// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20240801Preview
{
    public static class GetDevBoxDefinition
    {
        /// <summary>
        /// Gets a Dev Box definition
        /// </summary>
        public static Task<GetDevBoxDefinitionResult> InvokeAsync(GetDevBoxDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevBoxDefinitionResult>("azure-native:devcenter/v20240801preview:getDevBoxDefinition", args ?? new GetDevBoxDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Dev Box definition
        /// </summary>
        public static Output<GetDevBoxDefinitionResult> Invoke(GetDevBoxDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevBoxDefinitionResult>("azure-native:devcenter/v20240801preview:getDevBoxDefinition", args ?? new GetDevBoxDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevBoxDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Dev Box definition.
        /// </summary>
        [Input("devBoxDefinitionName", required: true)]
        public string DevBoxDefinitionName { get; set; } = null!;

        /// <summary>
        /// The name of the devcenter.
        /// </summary>
        [Input("devCenterName", required: true)]
        public string DevCenterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDevBoxDefinitionArgs()
        {
        }
        public static new GetDevBoxDefinitionArgs Empty => new GetDevBoxDefinitionArgs();
    }

    public sealed class GetDevBoxDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Dev Box definition.
        /// </summary>
        [Input("devBoxDefinitionName", required: true)]
        public Input<string> DevBoxDefinitionName { get; set; } = null!;

        /// <summary>
        /// The name of the devcenter.
        /// </summary>
        [Input("devCenterName", required: true)]
        public Input<string> DevCenterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDevBoxDefinitionInvokeArgs()
        {
        }
        public static new GetDevBoxDefinitionInvokeArgs Empty => new GetDevBoxDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevBoxDefinitionResult
    {
        /// <summary>
        /// Image reference information for the currently active image (only populated during updates).
        /// </summary>
        public readonly Outputs.ImageReferenceResponse ActiveImageReference;
        /// <summary>
        /// Indicates whether Dev Boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate
        /// </summary>
        public readonly string? HibernateSupport;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Image reference information.
        /// </summary>
        public readonly Outputs.ImageReferenceResponse ImageReference;
        /// <summary>
        /// Details for image validator error. Populated when the image validation is not successful.
        /// </summary>
        public readonly Outputs.ImageValidationErrorDetailsResponse ImageValidationErrorDetails;
        /// <summary>
        /// Validation status of the configured image.
        /// </summary>
        public readonly string ImageValidationStatus;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The storage type used for the Operating System disk of Dev Boxes created using this definition.
        /// </summary>
        public readonly string? OsStorageType;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The SKU for Dev Boxes created using this definition.
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Validation status for the Dev Box Definition.
        /// </summary>
        public readonly string ValidationStatus;

        [OutputConstructor]
        private GetDevBoxDefinitionResult(
            Outputs.ImageReferenceResponse activeImageReference,

            string? hibernateSupport,

            string id,

            Outputs.ImageReferenceResponse imageReference,

            Outputs.ImageValidationErrorDetailsResponse imageValidationErrorDetails,

            string imageValidationStatus,

            string location,

            string name,

            string? osStorageType,

            string provisioningState,

            Outputs.SkuResponse sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string validationStatus)
        {
            ActiveImageReference = activeImageReference;
            HibernateSupport = hibernateSupport;
            Id = id;
            ImageReference = imageReference;
            ImageValidationErrorDetails = imageValidationErrorDetails;
            ImageValidationStatus = imageValidationStatus;
            Location = location;
            Name = name;
            OsStorageType = osStorageType;
            ProvisioningState = provisioningState;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            ValidationStatus = validationStatus;
        }
    }
}
