// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20231001Preview
{
    /// <summary>
    /// A pool of Virtual Machines.
    /// </summary>
    [AzureNativeResourceType("azure-native:devcenter/v20231001preview:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates the number of provisioned Dev Boxes in this pool.
        /// </summary>
        [Output("devBoxCount")]
        public Output<int> DevBoxCount { get; private set; } = null!;

        /// <summary>
        /// Name of a Dev Box definition in parent Project of this Pool
        /// </summary>
        [Output("devBoxDefinitionName")]
        public Output<string> DevBoxDefinitionName { get; private set; } = null!;

        /// <summary>
        /// The display name of the pool.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
        /// </summary>
        [Output("healthStatus")]
        public Output<string> HealthStatus { get; private set; } = null!;

        /// <summary>
        /// Details on the Pool health status to help diagnose issues. This is only populated when the pool status indicates the pool is in a non-healthy state
        /// </summary>
        [Output("healthStatusDetails")]
        public Output<ImmutableArray<Outputs.HealthStatusDetailResponse>> HealthStatusDetails { get; private set; } = null!;

        /// <summary>
        /// Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
        /// </summary>
        [Output("localAdministrator")]
        public Output<string> LocalAdministrator { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The regions of the managed virtual network (required when managedNetworkType is Managed).
        /// </summary>
        [Output("managedVirtualNetworkRegions")]
        public Output<ImmutableArray<string>> ManagedVirtualNetworkRegions { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name of a Network Connection in parent Project of this Pool
        /// </summary>
        [Output("networkConnectionName")]
        public Output<string> NetworkConnectionName { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant.
        /// </summary>
        [Output("singleSignOnStatus")]
        public Output<string?> SingleSignOnStatus { get; private set; } = null!;

        /// <summary>
        /// Stop on disconnect configuration settings for Dev Boxes created in this pool.
        /// </summary>
        [Output("stopOnDisconnect")]
        public Output<Outputs.StopOnDisconnectConfigurationResponse?> StopOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.
        /// </summary>
        [Output("virtualNetworkType")]
        public Output<string?> VirtualNetworkType { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20231001preview:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20231001preview:Pool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devcenter:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220801preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220901preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221012preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221111preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230101preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230401:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230801preview:Pool" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of a Dev Box definition in parent Project of this Pool
        /// </summary>
        [Input("devBoxDefinitionName", required: true)]
        public Input<string> DevBoxDefinitionName { get; set; } = null!;

        /// <summary>
        /// The display name of the pool.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created.
        /// </summary>
        [Input("licenseType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20231001Preview.LicenseType> LicenseType { get; set; } = null!;

        /// <summary>
        /// Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
        /// </summary>
        [Input("localAdministrator", required: true)]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20231001Preview.LocalAdminStatus> LocalAdministrator { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("managedVirtualNetworkRegions")]
        private InputList<string>? _managedVirtualNetworkRegions;

        /// <summary>
        /// The regions of the managed virtual network (required when managedNetworkType is Managed).
        /// </summary>
        public InputList<string> ManagedVirtualNetworkRegions
        {
            get => _managedVirtualNetworkRegions ?? (_managedVirtualNetworkRegions = new InputList<string>());
            set => _managedVirtualNetworkRegions = value;
        }

        /// <summary>
        /// Name of a Network Connection in parent Project of this Pool
        /// </summary>
        [Input("networkConnectionName", required: true)]
        public Input<string> NetworkConnectionName { get; set; } = null!;

        /// <summary>
        /// Name of the pool.
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant.
        /// </summary>
        [Input("singleSignOnStatus")]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20231001Preview.SingleSignOnStatus>? SingleSignOnStatus { get; set; }

        /// <summary>
        /// Stop on disconnect configuration settings for Dev Boxes created in this pool.
        /// </summary>
        [Input("stopOnDisconnect")]
        public Input<Inputs.StopOnDisconnectConfigurationArgs>? StopOnDisconnect { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.
        /// </summary>
        [Input("virtualNetworkType")]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20231001Preview.VirtualNetworkType>? VirtualNetworkType { get; set; }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }
}
