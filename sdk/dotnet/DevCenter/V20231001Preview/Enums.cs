// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DevCenter.V20231001Preview
{
    /// <summary>
    /// Indicates the type of sync that is configured for the catalog.
    /// </summary>
    [EnumType]
    public readonly struct CatalogSyncType : IEquatable<CatalogSyncType>
    {
        private readonly string _value;

        private CatalogSyncType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CatalogSyncType Manual { get; } = new CatalogSyncType("Manual");
        public static CatalogSyncType Scheduled { get; } = new CatalogSyncType("Scheduled");

        public static bool operator ==(CatalogSyncType left, CatalogSyncType right) => left.Equals(right);
        public static bool operator !=(CatalogSyncType left, CatalogSyncType right) => !left.Equals(right);

        public static explicit operator string(CatalogSyncType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CatalogSyncType other && Equals(other);
        public bool Equals(CatalogSyncType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AAD Join type.
    /// </summary>
    [EnumType]
    public readonly struct DomainJoinType : IEquatable<DomainJoinType>
    {
        private readonly string _value;

        private DomainJoinType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainJoinType HybridAzureADJoin { get; } = new DomainJoinType("HybridAzureADJoin");
        public static DomainJoinType AzureADJoin { get; } = new DomainJoinType("AzureADJoin");

        public static bool operator ==(DomainJoinType left, DomainJoinType right) => left.Equals(right);
        public static bool operator !=(DomainJoinType left, DomainJoinType right) => !left.Equals(right);

        public static explicit operator string(DomainJoinType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainJoinType other && Equals(other);
        public bool Equals(DomainJoinType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines whether this Environment Type can be used in this Project.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentTypeEnableStatus : IEquatable<EnvironmentTypeEnableStatus>
    {
        private readonly string _value;

        private EnvironmentTypeEnableStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentTypeEnableStatus Enabled { get; } = new EnvironmentTypeEnableStatus("Enabled");
        public static EnvironmentTypeEnableStatus Disabled { get; } = new EnvironmentTypeEnableStatus("Disabled");

        public static bool operator ==(EnvironmentTypeEnableStatus left, EnvironmentTypeEnableStatus right) => left.Equals(right);
        public static bool operator !=(EnvironmentTypeEnableStatus left, EnvironmentTypeEnableStatus right) => !left.Equals(right);

        public static explicit operator string(EnvironmentTypeEnableStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentTypeEnableStatus other && Equals(other);
        public bool Equals(EnvironmentTypeEnableStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Dev Boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate
    /// </summary>
    [EnumType]
    public readonly struct HibernateSupport : IEquatable<HibernateSupport>
    {
        private readonly string _value;

        private HibernateSupport(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HibernateSupport Disabled { get; } = new HibernateSupport("Disabled");
        public static HibernateSupport Enabled { get; } = new HibernateSupport("Enabled");

        public static bool operator ==(HibernateSupport left, HibernateSupport right) => left.Equals(right);
        public static bool operator !=(HibernateSupport left, HibernateSupport right) => !left.Equals(right);

        public static explicit operator string(HibernateSupport value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HibernateSupport other && Equals(other);
        public bool Equals(HibernateSupport other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Values can be systemAssignedIdentity or userAssignedIdentity
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType SystemAssignedIdentity { get; } = new IdentityType("systemAssignedIdentity");
        public static IdentityType UserAssignedIdentity { get; } = new IdentityType("userAssignedIdentity");
        public static IdentityType DelegatedResourceIdentity { get; } = new IdentityType("delegatedResourceIdentity");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType Windows_Client { get; } = new LicenseType("Windows_Client");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
    /// </summary>
    [EnumType]
    public readonly struct LocalAdminStatus : IEquatable<LocalAdminStatus>
    {
        private readonly string _value;

        private LocalAdminStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LocalAdminStatus Disabled { get; } = new LocalAdminStatus("Disabled");
        public static LocalAdminStatus Enabled { get; } = new LocalAdminStatus("Enabled");

        public static bool operator ==(LocalAdminStatus left, LocalAdminStatus right) => left.Equals(right);
        public static bool operator !=(LocalAdminStatus left, LocalAdminStatus right) => !left.Equals(right);

        public static explicit operator string(LocalAdminStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LocalAdminStatus other && Equals(other);
        public bool Equals(LocalAdminStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether or not this scheduled task is enabled.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleEnableStatus : IEquatable<ScheduleEnableStatus>
    {
        private readonly string _value;

        private ScheduleEnableStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleEnableStatus Enabled { get; } = new ScheduleEnableStatus("Enabled");
        public static ScheduleEnableStatus Disabled { get; } = new ScheduleEnableStatus("Disabled");

        public static bool operator ==(ScheduleEnableStatus left, ScheduleEnableStatus right) => left.Equals(right);
        public static bool operator !=(ScheduleEnableStatus left, ScheduleEnableStatus right) => !left.Equals(right);

        public static explicit operator string(ScheduleEnableStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleEnableStatus other && Equals(other);
        public bool Equals(ScheduleEnableStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency of this scheduled task.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledFrequency : IEquatable<ScheduledFrequency>
    {
        private readonly string _value;

        private ScheduledFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledFrequency Daily { get; } = new ScheduledFrequency("Daily");

        public static bool operator ==(ScheduledFrequency left, ScheduledFrequency right) => left.Equals(right);
        public static bool operator !=(ScheduledFrequency left, ScheduledFrequency right) => !left.Equals(right);

        public static explicit operator string(ScheduledFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledFrequency other && Equals(other);
        public bool Equals(ScheduledFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Supported type this scheduled task represents.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledType : IEquatable<ScheduledType>
    {
        private readonly string _value;

        private ScheduledType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledType StopDevBox { get; } = new ScheduledType("StopDevBox");

        public static bool operator ==(ScheduledType left, ScheduledType right) => left.Equals(right);
        public static bool operator !=(ScheduledType left, ScheduledType right) => !left.Equals(right);

        public static explicit operator string(ScheduledType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledType other && Equals(other);
        public bool Equals(ScheduledType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant.
    /// </summary>
    [EnumType]
    public readonly struct SingleSignOnStatus : IEquatable<SingleSignOnStatus>
    {
        private readonly string _value;

        private SingleSignOnStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SingleSignOnStatus Disabled { get; } = new SingleSignOnStatus("Disabled");
        public static SingleSignOnStatus Enabled { get; } = new SingleSignOnStatus("Enabled");

        public static bool operator ==(SingleSignOnStatus left, SingleSignOnStatus right) => left.Equals(right);
        public static bool operator !=(SingleSignOnStatus left, SingleSignOnStatus right) => !left.Equals(right);

        public static explicit operator string(SingleSignOnStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SingleSignOnStatus other && Equals(other);
        public bool Equals(SingleSignOnStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Free { get; } = new SkuTier("Free");
        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled.
    /// </summary>
    [EnumType]
    public readonly struct StopOnDisconnectEnableStatus : IEquatable<StopOnDisconnectEnableStatus>
    {
        private readonly string _value;

        private StopOnDisconnectEnableStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StopOnDisconnectEnableStatus Enabled { get; } = new StopOnDisconnectEnableStatus("Enabled");
        public static StopOnDisconnectEnableStatus Disabled { get; } = new StopOnDisconnectEnableStatus("Disabled");

        public static bool operator ==(StopOnDisconnectEnableStatus left, StopOnDisconnectEnableStatus right) => left.Equals(right);
        public static bool operator !=(StopOnDisconnectEnableStatus left, StopOnDisconnectEnableStatus right) => !left.Equals(right);

        public static explicit operator string(StopOnDisconnectEnableStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StopOnDisconnectEnableStatus other && Equals(other);
        public bool Equals(StopOnDisconnectEnableStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkType : IEquatable<VirtualNetworkType>
    {
        private readonly string _value;

        private VirtualNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VirtualNetworkType Managed { get; } = new VirtualNetworkType("Managed");
        public static VirtualNetworkType Unmanaged { get; } = new VirtualNetworkType("Unmanaged");

        public static bool operator ==(VirtualNetworkType left, VirtualNetworkType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkType left, VirtualNetworkType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkType other && Equals(other);
        public bool Equals(VirtualNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
