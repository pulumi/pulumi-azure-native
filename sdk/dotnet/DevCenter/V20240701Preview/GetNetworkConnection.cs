// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20240701Preview
{
    public static class GetNetworkConnection
    {
        /// <summary>
        /// Gets a network connection resource
        /// </summary>
        public static Task<GetNetworkConnectionResult> InvokeAsync(GetNetworkConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkConnectionResult>("azure-native:devcenter/v20240701preview:getNetworkConnection", args ?? new GetNetworkConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a network connection resource
        /// </summary>
        public static Output<GetNetworkConnectionResult> Invoke(GetNetworkConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkConnectionResult>("azure-native:devcenter/v20240701preview:getNetworkConnection", args ?? new GetNetworkConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Connection that can be applied to a Pool.
        /// </summary>
        [Input("networkConnectionName", required: true)]
        public string NetworkConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkConnectionArgs()
        {
        }
        public static new GetNetworkConnectionArgs Empty => new GetNetworkConnectionArgs();
    }

    public sealed class GetNetworkConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Network Connection that can be applied to a Pool.
        /// </summary>
        [Input("networkConnectionName", required: true)]
        public Input<string> NetworkConnectionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkConnectionInvokeArgs()
        {
        }
        public static new GetNetworkConnectionInvokeArgs Empty => new GetNetworkConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkConnectionResult
    {
        /// <summary>
        /// AAD Join type.
        /// </summary>
        public readonly string DomainJoinType;
        /// <summary>
        /// Active Directory domain name
        /// </summary>
        public readonly string? DomainName;
        /// <summary>
        /// The password for the account used to join domain
        /// </summary>
        public readonly string? DomainPassword;
        /// <summary>
        /// The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com.
        /// </summary>
        public readonly string? DomainUsername;
        /// <summary>
        /// Overall health status of the network connection. Health checks are run on creation, update, and periodically to validate the network connection.
        /// </summary>
        public readonly string HealthCheckStatus;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name for resource group where NICs will be placed.
        /// </summary>
        public readonly string? NetworkingResourceGroupName;
        /// <summary>
        /// Active Directory domain Organization Unit (OU)
        /// </summary>
        public readonly string? OrganizationUnit;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The subnet to attach Virtual Machines to
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkConnectionResult(
            string domainJoinType,

            string? domainName,

            string? domainPassword,

            string? domainUsername,

            string healthCheckStatus,

            string id,

            string location,

            string name,

            string? networkingResourceGroupName,

            string? organizationUnit,

            string provisioningState,

            string subnetId,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DomainJoinType = domainJoinType;
            DomainName = domainName;
            DomainPassword = domainPassword;
            DomainUsername = domainUsername;
            HealthCheckStatus = healthCheckStatus;
            Id = id;
            Location = location;
            Name = name;
            NetworkingResourceGroupName = networkingResourceGroupName;
            OrganizationUnit = organizationUnit;
            ProvisioningState = provisioningState;
            SubnetId = subnetId;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
