// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20240701Preview
{
    public static class GetProjectCatalog
    {
        /// <summary>
        /// Gets an associated project catalog.
        /// </summary>
        public static Task<GetProjectCatalogResult> InvokeAsync(GetProjectCatalogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectCatalogResult>("azure-native:devcenter/v20240701preview:getProjectCatalog", args ?? new GetProjectCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an associated project catalog.
        /// </summary>
        public static Output<GetProjectCatalogResult> Invoke(GetProjectCatalogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectCatalogResult>("azure-native:devcenter/v20240701preview:getProjectCatalog", args ?? new GetProjectCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Catalog.
        /// </summary>
        [Input("catalogName", required: true)]
        public string CatalogName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetProjectCatalogArgs()
        {
        }
        public static new GetProjectCatalogArgs Empty => new GetProjectCatalogArgs();
    }

    public sealed class GetProjectCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Catalog.
        /// </summary>
        [Input("catalogName", required: true)]
        public Input<string> CatalogName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetProjectCatalogInvokeArgs()
        {
        }
        public static new GetProjectCatalogInvokeArgs Empty => new GetProjectCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectCatalogResult
    {
        /// <summary>
        /// Properties for an Azure DevOps catalog type.
        /// </summary>
        public readonly Outputs.GitCatalogResponse? AdoGit;
        /// <summary>
        /// The connection state of the catalog.
        /// </summary>
        public readonly string ConnectionState;
        /// <summary>
        /// Properties for a GitHub catalog type.
        /// </summary>
        public readonly Outputs.GitCatalogResponse? GitHub;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When the catalog was last connected.
        /// </summary>
        public readonly string LastConnectionTime;
        /// <summary>
        /// Stats of the latest synchronization.
        /// </summary>
        public readonly Outputs.SyncStatsResponse LastSyncStats;
        /// <summary>
        /// When the catalog was last synced.
        /// </summary>
        public readonly string LastSyncTime;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The synchronization state of the catalog.
        /// </summary>
        public readonly string SyncState;
        /// <summary>
        /// Indicates the type of sync that is configured for the catalog.
        /// </summary>
        public readonly string? SyncType;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetProjectCatalogResult(
            Outputs.GitCatalogResponse? adoGit,

            string connectionState,

            Outputs.GitCatalogResponse? gitHub,

            string id,

            string lastConnectionTime,

            Outputs.SyncStatsResponse lastSyncStats,

            string lastSyncTime,

            string name,

            string provisioningState,

            string syncState,

            string? syncType,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdoGit = adoGit;
            ConnectionState = connectionState;
            GitHub = gitHub;
            Id = id;
            LastConnectionTime = lastConnectionTime;
            LastSyncStats = lastSyncStats;
            LastSyncTime = lastSyncTime;
            Name = name;
            ProvisioningState = provisioningState;
            SyncState = syncState;
            SyncType = syncType;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
