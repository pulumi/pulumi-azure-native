// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20240201
{
    /// <summary>
    /// Represents a catalog.
    /// </summary>
    [AzureNativeResourceType("azure-native:devcenter/v20240201:ProjectCatalog")]
    public partial class ProjectCatalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Properties for an Azure DevOps catalog type.
        /// </summary>
        [Output("adoGit")]
        public Output<Outputs.GitCatalogResponse?> AdoGit { get; private set; } = null!;

        /// <summary>
        /// The connection state of the catalog.
        /// </summary>
        [Output("connectionState")]
        public Output<string> ConnectionState { get; private set; } = null!;

        /// <summary>
        /// Properties for a GitHub catalog type.
        /// </summary>
        [Output("gitHub")]
        public Output<Outputs.GitCatalogResponse?> GitHub { get; private set; } = null!;

        /// <summary>
        /// When the catalog was last connected.
        /// </summary>
        [Output("lastConnectionTime")]
        public Output<string> LastConnectionTime { get; private set; } = null!;

        /// <summary>
        /// Stats of the latest synchronization.
        /// </summary>
        [Output("lastSyncStats")]
        public Output<Outputs.SyncStatsResponse> LastSyncStats { get; private set; } = null!;

        /// <summary>
        /// When the catalog was last synced.
        /// </summary>
        [Output("lastSyncTime")]
        public Output<string> LastSyncTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The synchronization state of the catalog.
        /// </summary>
        [Output("syncState")]
        public Output<string> SyncState { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of sync that is configured for the catalog.
        /// </summary>
        [Output("syncType")]
        public Output<string?> SyncType { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectCatalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectCatalog(string name, ProjectCatalogArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20240201:ProjectCatalog", name, args ?? new ProjectCatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectCatalog(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devcenter/v20240201:ProjectCatalog", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devcenter:ProjectCatalog" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20240501preview:ProjectCatalog" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20240601preview:ProjectCatalog" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20240701preview:ProjectCatalog" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20240801preview:ProjectCatalog" },
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20241001preview:ProjectCatalog" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectCatalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectCatalog Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ProjectCatalog(name, id, options);
        }
    }

    public sealed class ProjectCatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Properties for an Azure DevOps catalog type.
        /// </summary>
        [Input("adoGit")]
        public Input<Inputs.GitCatalogArgs>? AdoGit { get; set; }

        /// <summary>
        /// The name of the Catalog.
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        /// <summary>
        /// Properties for a GitHub catalog type.
        /// </summary>
        [Input("gitHub")]
        public Input<Inputs.GitCatalogArgs>? GitHub { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Indicates the type of sync that is configured for the catalog.
        /// </summary>
        [Input("syncType")]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.V20240201.CatalogSyncType>? SyncType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ProjectCatalogArgs()
        {
        }
        public static new ProjectCatalogArgs Empty => new ProjectCatalogArgs();
    }
}
