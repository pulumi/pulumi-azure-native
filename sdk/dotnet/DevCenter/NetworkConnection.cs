// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter
{
    /// <summary>
    /// Network related settings
    /// Azure REST API version: 2023-04-01. Prior API version in Azure Native 1.x: 2022-09-01-preview
    /// </summary>
    [AzureNativeResourceType("azure-native:devcenter:NetworkConnection")]
    public partial class NetworkConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AAD Join type.
        /// </summary>
        [Output("domainJoinType")]
        public Output<string> DomainJoinType { get; private set; } = null!;

        /// <summary>
        /// Active Directory domain name
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// The password for the account used to join domain
        /// </summary>
        [Output("domainPassword")]
        public Output<string?> DomainPassword { get; private set; } = null!;

        /// <summary>
        /// The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com.
        /// </summary>
        [Output("domainUsername")]
        public Output<string?> DomainUsername { get; private set; } = null!;

        /// <summary>
        /// Overall health status of the network connection. Health checks are run on creation, update, and periodically to validate the network connection.
        /// </summary>
        [Output("healthCheckStatus")]
        public Output<string> HealthCheckStatus { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name for resource group where NICs will be placed.
        /// </summary>
        [Output("networkingResourceGroupName")]
        public Output<string?> NetworkingResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Active Directory domain Organization Unit (OU)
        /// </summary>
        [Output("organizationUnit")]
        public Output<string?> OrganizationUnit { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The subnet to attach Virtual Machines to
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkConnection(string name, NetworkConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:devcenter:NetworkConnection", name, args ?? new NetworkConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:devcenter:NetworkConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220801preview:NetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20220901preview:NetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221012preview:NetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20221111preview:NetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230101preview:NetworkConnection"},
                    new global::Pulumi.Alias { Type = "azure-native:devcenter/v20230401:NetworkConnection"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NetworkConnection(name, id, options);
        }
    }

    public sealed class NetworkConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AAD Join type.
        /// </summary>
        [Input("domainJoinType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.DevCenter.DomainJoinType> DomainJoinType { get; set; } = null!;

        /// <summary>
        /// Active Directory domain name
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The password for the account used to join domain
        /// </summary>
        [Input("domainPassword")]
        public Input<string>? DomainPassword { get; set; }

        /// <summary>
        /// The username of an Active Directory account (user or service account) that has permissions to create computer objects in Active Directory. Required format: admin@contoso.com.
        /// </summary>
        [Input("domainUsername")]
        public Input<string>? DomainUsername { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the Network Connection that can be applied to a Pool.
        /// </summary>
        [Input("networkConnectionName")]
        public Input<string>? NetworkConnectionName { get; set; }

        /// <summary>
        /// The name for resource group where NICs will be placed.
        /// </summary>
        [Input("networkingResourceGroupName")]
        public Input<string>? NetworkingResourceGroupName { get; set; }

        /// <summary>
        /// Active Directory domain Organization Unit (OU)
        /// </summary>
        [Input("organizationUnit")]
        public Input<string>? OrganizationUnit { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subnet to attach Virtual Machines to
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkConnectionArgs()
        {
        }
        public static new NetworkConnectionArgs Empty => new NetworkConnectionArgs();
    }
}
