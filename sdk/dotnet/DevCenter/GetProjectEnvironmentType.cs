// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter
{
    public static class GetProjectEnvironmentType
    {
        /// <summary>
        /// Gets a project environment type.
        /// API Version: 2022-09-01-preview.
        /// </summary>
        public static Task<GetProjectEnvironmentTypeResult> InvokeAsync(GetProjectEnvironmentTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectEnvironmentTypeResult>("azure-native:devcenter:getProjectEnvironmentType", args ?? new GetProjectEnvironmentTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a project environment type.
        /// API Version: 2022-09-01-preview.
        /// </summary>
        public static Output<GetProjectEnvironmentTypeResult> Invoke(GetProjectEnvironmentTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectEnvironmentTypeResult>("azure-native:devcenter:getProjectEnvironmentType", args ?? new GetProjectEnvironmentTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectEnvironmentTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the environment type.
        /// </summary>
        [Input("environmentTypeName", required: true)]
        public string EnvironmentTypeName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetProjectEnvironmentTypeArgs()
        {
        }
        public static new GetProjectEnvironmentTypeArgs Empty => new GetProjectEnvironmentTypeArgs();
    }

    public sealed class GetProjectEnvironmentTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the environment type.
        /// </summary>
        [Input("environmentTypeName", required: true)]
        public Input<string> EnvironmentTypeName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetProjectEnvironmentTypeInvokeArgs()
        {
        }
        public static new GetProjectEnvironmentTypeInvokeArgs Empty => new GetProjectEnvironmentTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectEnvironmentTypeResult
    {
        /// <summary>
        /// The role definition assigned to the environment creator on backing resources.
        /// </summary>
        public readonly Outputs.ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment? CreatorRoleAssignment;
        /// <summary>
        /// Id of a subscription that the environment type will be mapped to. The environment's resources will be deployed into this subscription.
        /// </summary>
        public readonly string? DeploymentTargetId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed identity properties
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location for the environment type
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Defines whether this Environment Type can be used in this Project.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Role Assignments created on environment backing resources. This is a mapping from a user object ID to an object of role definition IDs.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.UserRoleAssignmentResponse>? UserRoleAssignments;

        [OutputConstructor]
        private GetProjectEnvironmentTypeResult(
            Outputs.ProjectEnvironmentTypeUpdatePropertiesResponseCreatorRoleAssignment? creatorRoleAssignment,

            string? deploymentTargetId,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string? location,

            string name,

            string provisioningState,

            string? status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableDictionary<string, Outputs.UserRoleAssignmentResponse>? userRoleAssignments)
        {
            CreatorRoleAssignment = creatorRoleAssignment;
            DeploymentTargetId = deploymentTargetId;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UserRoleAssignments = userRoleAssignments;
        }
    }
}
