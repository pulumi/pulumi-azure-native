// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter
{
    public static class GetPool
    {
        /// <summary>
        /// Gets a machine pool
        /// API Version: 2023-04-01.
        /// </summary>
        public static Task<GetPoolResult> InvokeAsync(GetPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPoolResult>("azure-native:devcenter:getPool", args ?? new GetPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a machine pool
        /// API Version: 2023-04-01.
        /// </summary>
        public static Output<GetPoolResult> Invoke(GetPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoolResult>("azure-native:devcenter:getPool", args ?? new GetPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the pool.
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPoolArgs()
        {
        }
        public static new GetPoolArgs Empty => new GetPoolArgs();
    }

    public sealed class GetPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the pool.
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPoolInvokeArgs()
        {
        }
        public static new GetPoolInvokeArgs Empty => new GetPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetPoolResult
    {
        /// <summary>
        /// Name of a Dev Box definition in parent Project of this Pool
        /// </summary>
        public readonly string DevBoxDefinitionName;
        /// <summary>
        /// Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
        /// </summary>
        public readonly string HealthStatus;
        /// <summary>
        /// Details on the Pool health status to help diagnose issues. This is only populated when the pool status indicates the pool is in a non-healthy state
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthStatusDetailResponse> HealthStatusDetails;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the license type indicating the caller has already acquired licenses for the Dev Boxes that will be created.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
        /// </summary>
        public readonly string LocalAdministrator;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of a Network Connection in parent Project of this Pool
        /// </summary>
        public readonly string NetworkConnectionName;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Stop on disconnect configuration settings for Dev Boxes created in this pool.
        /// </summary>
        public readonly Outputs.StopOnDisconnectConfigurationResponse? StopOnDisconnect;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPoolResult(
            string devBoxDefinitionName,

            string healthStatus,

            ImmutableArray<Outputs.HealthStatusDetailResponse> healthStatusDetails,

            string id,

            string licenseType,

            string localAdministrator,

            string location,

            string name,

            string networkConnectionName,

            string provisioningState,

            Outputs.StopOnDisconnectConfigurationResponse? stopOnDisconnect,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DevBoxDefinitionName = devBoxDefinitionName;
            HealthStatus = healthStatus;
            HealthStatusDetails = healthStatusDetails;
            Id = id;
            LicenseType = licenseType;
            LocalAdministrator = localAdministrator;
            Location = location;
            Name = name;
            NetworkConnectionName = networkConnectionName;
            ProvisioningState = provisioningState;
            StopOnDisconnect = stopOnDisconnect;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
