// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevCenter.V20241001Preview
{
    public static class GetDevCenter
    {
        /// <summary>
        /// Gets a devcenter.
        /// </summary>
        public static Task<GetDevCenterResult> InvokeAsync(GetDevCenterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevCenterResult>("azure-native:devcenter/v20241001preview:getDevCenter", args ?? new GetDevCenterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a devcenter.
        /// </summary>
        public static Output<GetDevCenterResult> Invoke(GetDevCenterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevCenterResult>("azure-native:devcenter/v20241001preview:getDevCenter", args ?? new GetDevCenterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevCenterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the devcenter.
        /// </summary>
        [Input("devCenterName", required: true)]
        public string DevCenterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDevCenterArgs()
        {
        }
        public static new GetDevCenterArgs Empty => new GetDevCenterArgs();
    }

    public sealed class GetDevCenterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the devcenter.
        /// </summary>
        [Input("devCenterName", required: true)]
        public Input<string> DevCenterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDevCenterInvokeArgs()
        {
        }
        public static new GetDevCenterInvokeArgs Empty => new GetDevCenterInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevCenterResult
    {
        /// <summary>
        /// Settings to be used in the provisioning of all Dev Boxes that belong to this dev center.
        /// </summary>
        public readonly Outputs.DevBoxProvisioningSettingsResponse? DevBoxProvisioningSettings;
        /// <summary>
        /// The URI of the Dev Center.
        /// </summary>
        public readonly string DevCenterUri;
        /// <summary>
        /// The display name of the devcenter.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Encryption settings to be used for server-side encryption for proprietary content (such as catalogs, logs, customizations).
        /// </summary>
        public readonly Outputs.EncryptionResponse? Encryption;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed identity properties
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network settings that will be enforced on network resources associated with the Dev Center.
        /// </summary>
        public readonly Outputs.DevCenterNetworkSettingsResponse? NetworkSettings;
        /// <summary>
        /// Resource Id of an associated Plan
        /// </summary>
        public readonly string? PlanId;
        /// <summary>
        /// Dev Center settings to be used when associating a project with a catalog.
        /// </summary>
        public readonly Outputs.DevCenterProjectCatalogSettingsResponse? ProjectCatalogSettings;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Indicates the resource types that are restricted from being accessed by a project unless allowed by a project policy.
        /// </summary>
        public readonly ImmutableArray<string> RestrictedResourceTypes;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDevCenterResult(
            Outputs.DevBoxProvisioningSettingsResponse? devBoxProvisioningSettings,

            string devCenterUri,

            string? displayName,

            Outputs.EncryptionResponse? encryption,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string location,

            string name,

            Outputs.DevCenterNetworkSettingsResponse? networkSettings,

            string? planId,

            Outputs.DevCenterProjectCatalogSettingsResponse? projectCatalogSettings,

            string provisioningState,

            ImmutableArray<string> restrictedResourceTypes,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DevBoxProvisioningSettings = devBoxProvisioningSettings;
            DevCenterUri = devCenterUri;
            DisplayName = displayName;
            Encryption = encryption;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            NetworkSettings = networkSettings;
            PlanId = planId;
            ProjectCatalogSettings = projectCatalogSettings;
            ProvisioningState = provisioningState;
            RestrictedResourceTypes = restrictedResourceTypes;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
