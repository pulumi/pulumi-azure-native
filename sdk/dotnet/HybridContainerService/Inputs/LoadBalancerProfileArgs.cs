// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.Inputs
{

    /// <summary>
    /// LoadBalancerProfile - Profile of the cluster load balancer.
    /// </summary>
    public sealed class LoadBalancerProfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// AvailabilityZones - The list of Availability zones to use for nodes. Datacenter racks modelled as zones
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        /// <summary>
        /// The underlying cloud infra provider properties.
        /// </summary>
        [Input("cloudProviderProfile")]
        public Input<Inputs.CloudProviderProfileArgs>? CloudProviderProfile { get; set; }

        /// <summary>
        /// Count - Number of agents to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// Profile for Linux VMs in the container service cluster.
        /// </summary>
        [Input("linuxProfile")]
        public Input<Inputs.LinuxProfilePropertiesArgs>? LinuxProfile { get; set; }

        /// <summary>
        /// The maximum number of nodes for auto-scaling
        /// </summary>
        [Input("maxCount")]
        public Input<int>? MaxCount { get; set; }

        /// <summary>
        /// The maximum number of pods that can run on a node.
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        /// <summary>
        /// The minimum number of nodes for auto-scaling
        /// </summary>
        [Input("minCount")]
        public Input<int>? MinCount { get; set; }

        /// <summary>
        /// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
        /// </summary>
        [Input("mode")]
        public InputUnion<string, Pulumi.AzureNative.HybridContainerService.Mode>? Mode { get; set; }

        /// <summary>
        /// Unique name of the agent pool profile in the context of the subscription and resource group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The version of node image
        /// </summary>
        [Input("nodeImageVersion")]
        public Input<string>? NodeImageVersion { get; set; }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// NodeLabels - Agent pool node labels to be persisted across all nodes in agent pool.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        [Input("nodeTaints")]
        private InputList<string>? _nodeTaints;

        /// <summary>
        /// NodeTaints - Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        /// </summary>
        public InputList<string> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<string>());
            set => _nodeTaints = value;
        }

        /// <summary>
        /// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        /// </summary>
        [Input("osType")]
        public InputUnion<string, Pulumi.AzureNative.HybridContainerService.OsType>? OsType { get; set; }

        /// <summary>
        /// VmSize - The size of the agent pool VMs.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public LoadBalancerProfileArgs()
        {
            Count = 1;
            Mode = "User";
        }
        public static new LoadBalancerProfileArgs Empty => new LoadBalancerProfileArgs();
    }
}
