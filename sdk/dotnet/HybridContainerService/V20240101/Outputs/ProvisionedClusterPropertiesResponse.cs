// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.V20240101.Outputs
{

    /// <summary>
    /// Properties of the provisioned cluster.
    /// </summary>
    [OutputType]
    public sealed class ProvisionedClusterPropertiesResponse
    {
        /// <summary>
        /// The agent pool properties for the provisioned cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamedAgentPoolProfileResponse> AgentPoolProfiles;
        /// <summary>
        /// Parameters to be applied to the cluster-autoscaler when auto scaling is enabled for the provisioned cluster.
        /// </summary>
        public readonly Outputs.ProvisionedClusterPropertiesResponseAutoScalerProfile? AutoScalerProfile;
        /// <summary>
        /// The profile for the underlying cloud infrastructure provider for the provisioned cluster.
        /// </summary>
        public readonly Outputs.CloudProviderProfileResponse? CloudProviderProfile;
        /// <summary>
        /// The SSH restricted access profile for the VMs in the provisioned cluster.
        /// </summary>
        public readonly Outputs.ClusterVMAccessProfileResponse? ClusterVMAccessProfile;
        /// <summary>
        /// The profile for control plane of the provisioned cluster.
        /// </summary>
        public readonly Outputs.ControlPlaneProfileResponse? ControlPlane;
        /// <summary>
        /// The version of Kubernetes in use by the provisioned cluster.
        /// </summary>
        public readonly string? KubernetesVersion;
        /// <summary>
        /// The license profile of the provisioned cluster.
        /// </summary>
        public readonly Outputs.ProvisionedClusterLicenseProfileResponse? LicenseProfile;
        /// <summary>
        /// The profile for Linux VMs in the provisioned cluster.
        /// </summary>
        public readonly Outputs.LinuxProfilePropertiesResponse? LinuxProfile;
        /// <summary>
        /// The network configuration profile for the provisioned cluster.
        /// </summary>
        public readonly Outputs.NetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// The status of the latest long running operation for the provisioned cluster.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed status of the provisioned cluster.
        /// </summary>
        public readonly Outputs.ProvisionedClusterPropertiesResponseStatus Status;
        /// <summary>
        /// The storage configuration profile for the provisioned cluster.
        /// </summary>
        public readonly Outputs.StorageProfileResponse? StorageProfile;

        [OutputConstructor]
        private ProvisionedClusterPropertiesResponse(
            ImmutableArray<Outputs.NamedAgentPoolProfileResponse> agentPoolProfiles,

            Outputs.ProvisionedClusterPropertiesResponseAutoScalerProfile? autoScalerProfile,

            Outputs.CloudProviderProfileResponse? cloudProviderProfile,

            Outputs.ClusterVMAccessProfileResponse? clusterVMAccessProfile,

            Outputs.ControlPlaneProfileResponse? controlPlane,

            string? kubernetesVersion,

            Outputs.ProvisionedClusterLicenseProfileResponse? licenseProfile,

            Outputs.LinuxProfilePropertiesResponse? linuxProfile,

            Outputs.NetworkProfileResponse? networkProfile,

            string provisioningState,

            Outputs.ProvisionedClusterPropertiesResponseStatus status,

            Outputs.StorageProfileResponse? storageProfile)
        {
            AgentPoolProfiles = agentPoolProfiles;
            AutoScalerProfile = autoScalerProfile;
            CloudProviderProfile = cloudProviderProfile;
            ClusterVMAccessProfile = clusterVMAccessProfile;
            ControlPlane = controlPlane;
            KubernetesVersion = kubernetesVersion;
            LicenseProfile = licenseProfile;
            LinuxProfile = linuxProfile;
            NetworkProfile = networkProfile;
            ProvisioningState = provisioningState;
            Status = status;
            StorageProfile = storageProfile;
        }
    }
}
