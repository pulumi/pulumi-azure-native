// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HybridContainerService.V20240101
{
    /// <summary>
    /// Indicates whether Azure Hybrid Benefit is opted in. Default value is false
    /// </summary>
    [EnumType]
    public readonly struct AzureHybridBenefit : IEquatable<AzureHybridBenefit>
    {
        private readonly string _value;

        private AzureHybridBenefit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureHybridBenefit True { get; } = new AzureHybridBenefit("True");
        public static AzureHybridBenefit False { get; } = new AzureHybridBenefit("False");
        public static AzureHybridBenefit NotApplicable { get; } = new AzureHybridBenefit("NotApplicable");

        public static bool operator ==(AzureHybridBenefit left, AzureHybridBenefit right) => left.Equals(right);
        public static bool operator !=(AzureHybridBenefit left, AzureHybridBenefit right) => !left.Equals(right);

        public static explicit operator string(AzureHybridBenefit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureHybridBenefit other && Equals(other);
        public bool Equals(AzureHybridBenefit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
    /// </summary>
    [EnumType]
    public readonly struct Expander : IEquatable<Expander>
    {
        private readonly string _value;

        private Expander(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
        /// </summary>
        public static Expander Least_waste { get; } = new Expander("least-waste");
        /// <summary>
        /// Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
        /// </summary>
        public static Expander Most_pods { get; } = new Expander("most-pods");
        /// <summary>
        /// Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
        /// </summary>
        public static Expander Priority { get; } = new Expander("priority");
        /// <summary>
        /// Used when you don't have a particular need for the node groups to scale differently.
        /// </summary>
        public static Expander Random { get; } = new Expander("random");

        public static bool operator ==(Expander left, Expander right) => left.Equals(right);
        public static bool operator !=(Expander left, Expander right) => !left.Equals(right);

        public static explicit operator string(Expander value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Expander other && Equals(other);
        public bool Equals(Expander other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The extended location type. Allowed value: 'CustomLocation'
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network policy used for building Kubernetes network. Possible values include: 'calico'.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPolicy : IEquatable<NetworkPolicy>
    {
        private readonly string _value;

        private NetworkPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkPolicy Calico { get; } = new NetworkPolicy("calico");

        public static bool operator ==(NetworkPolicy left, NetworkPolicy right) => left.Equals(right);
        public static bool operator !=(NetworkPolicy left, NetworkPolicy right) => !left.Equals(right);

        public static explicit operator string(NetworkPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPolicy other && Equals(other);
        public bool Equals(NetworkPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
    /// </summary>
    [EnumType]
    public readonly struct OSSKU : IEquatable<OSSKU>
    {
        private readonly string _value;

        private OSSKU(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use Mariner as the OS for node images.
        /// </summary>
        public static OSSKU CBLMariner { get; } = new OSSKU("CBLMariner");
        /// <summary>
        /// Use Windows2019 as the OS for node images.
        /// </summary>
        public static OSSKU Windows2019 { get; } = new OSSKU("Windows2019");
        /// <summary>
        /// Use Windows2022 as the OS for node images.
        /// </summary>
        public static OSSKU Windows2022 { get; } = new OSSKU("Windows2022");

        public static bool operator ==(OSSKU left, OSSKU right) => left.Equals(right);
        public static bool operator !=(OSSKU left, OSSKU right) => !left.Equals(right);

        public static explicit operator string(OSSKU value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSSKU other && Equals(other);
        public bool Equals(OSSKU other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OSType to be used to specify OS type for the VMs. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
    /// </summary>
    [EnumType]
    public readonly struct OsType : IEquatable<OsType>
    {
        private readonly string _value;

        private OsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OsType Linux { get; } = new OsType("Linux");
        public static OsType Windows { get; } = new OsType("Windows");

        public static bool operator ==(OsType left, OsType right) => left.Equals(right);
        public static bool operator !=(OsType left, OsType right) => !left.Equals(right);

        public static explicit operator string(OsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsType other && Equals(other);
        public bool Equals(OsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
