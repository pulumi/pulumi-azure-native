// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.V20240101
{
    public static class GetAgentPool
    {
        /// <summary>
        /// Gets the specified agent pool in the provisioned cluster
        /// </summary>
        public static Task<GetAgentPoolResult> InvokeAsync(GetAgentPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAgentPoolResult>("azure-native:hybridcontainerservice/v20240101:getAgentPool", args ?? new GetAgentPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified agent pool in the provisioned cluster
        /// </summary>
        public static Output<GetAgentPoolResult> Invoke(GetAgentPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAgentPoolResult>("azure-native:hybridcontainerservice/v20240101:getAgentPool", args ?? new GetAgentPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAgentPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Parameter for the name of the agent pool in the provisioned cluster.
        /// </summary>
        [Input("agentPoolName", required: true)]
        public string AgentPoolName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource Manager identifier of the connected cluster resource.
        /// </summary>
        [Input("connectedClusterResourceUri", required: true)]
        public string ConnectedClusterResourceUri { get; set; } = null!;

        public GetAgentPoolArgs()
        {
        }
        public static new GetAgentPoolArgs Empty => new GetAgentPoolArgs();
    }

    public sealed class GetAgentPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Parameter for the name of the agent pool in the provisioned cluster.
        /// </summary>
        [Input("agentPoolName", required: true)]
        public Input<string> AgentPoolName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource Manager identifier of the connected cluster resource.
        /// </summary>
        [Input("connectedClusterResourceUri", required: true)]
        public Input<string> ConnectedClusterResourceUri { get; set; } = null!;

        public GetAgentPoolInvokeArgs()
        {
        }
        public static new GetAgentPoolInvokeArgs Empty => new GetAgentPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetAgentPoolResult
    {
        /// <summary>
        /// Number of nodes in the agent pool. The default value is 1.
        /// </summary>
        public readonly int? Count;
        /// <summary>
        /// Whether to enable auto-scaler. Default value is false
        /// </summary>
        public readonly bool? EnableAutoScaling;
        /// <summary>
        /// Extended location pointing to the underlying infrastructure
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Version of Kubernetes in use by the agent pool. This is inherited from the kubernetesVersion of the provisioned cluster.
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// The maximum number of nodes for auto-scaling
        /// </summary>
        public readonly int? MaxCount;
        /// <summary>
        /// The maximum number of pods that can run on a node.
        /// </summary>
        public readonly int? MaxPods;
        /// <summary>
        /// The minimum number of nodes for auto-scaling
        /// </summary>
        public readonly int? MinCount;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The node labels to be persisted across all nodes in agent pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? NodeLabels;
        /// <summary>
        /// Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
        /// </summary>
        public readonly ImmutableArray<string> NodeTaints;
        /// <summary>
        /// Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
        /// </summary>
        public readonly string? OsSKU;
        /// <summary>
        /// OSType to be used to specify OS type for the VMs. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The status of the latest long running operation for the agent pool.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed status of the agent pool.
        /// </summary>
        public readonly Outputs.AgentPoolProvisioningStatusResponseStatus? Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VM sku size of the agent pool node VMs.
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private GetAgentPoolResult(
            int? count,

            bool? enableAutoScaling,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string kubernetesVersion,

            int? maxCount,

            int? maxPods,

            int? minCount,

            string name,

            ImmutableDictionary<string, string>? nodeLabels,

            ImmutableArray<string> nodeTaints,

            string? osSKU,

            string? osType,

            string provisioningState,

            Outputs.AgentPoolProvisioningStatusResponseStatus? status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? vmSize)
        {
            Count = count;
            EnableAutoScaling = enableAutoScaling;
            ExtendedLocation = extendedLocation;
            Id = id;
            KubernetesVersion = kubernetesVersion;
            MaxCount = maxCount;
            MaxPods = maxPods;
            MinCount = minCount;
            Name = name;
            NodeLabels = nodeLabels;
            NodeTaints = nodeTaints;
            OsSKU = osSKU;
            OsType = osType;
            ProvisioningState = provisioningState;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VmSize = vmSize;
        }
    }
}
