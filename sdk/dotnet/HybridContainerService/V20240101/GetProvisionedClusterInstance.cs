// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.V20240101
{
    public static class GetProvisionedClusterInstance
    {
        /// <summary>
        /// Gets the provisioned cluster instance
        /// </summary>
        public static Task<GetProvisionedClusterInstanceResult> InvokeAsync(GetProvisionedClusterInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProvisionedClusterInstanceResult>("azure-native:hybridcontainerservice/v20240101:getProvisionedClusterInstance", args ?? new GetProvisionedClusterInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the provisioned cluster instance
        /// </summary>
        public static Output<GetProvisionedClusterInstanceResult> Invoke(GetProvisionedClusterInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProvisionedClusterInstanceResult>("azure-native:hybridcontainerservice/v20240101:getProvisionedClusterInstance", args ?? new GetProvisionedClusterInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProvisionedClusterInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource Manager identifier of the connected cluster resource.
        /// </summary>
        [Input("connectedClusterResourceUri", required: true)]
        public string ConnectedClusterResourceUri { get; set; } = null!;

        public GetProvisionedClusterInstanceArgs()
        {
        }
        public static new GetProvisionedClusterInstanceArgs Empty => new GetProvisionedClusterInstanceArgs();
    }

    public sealed class GetProvisionedClusterInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource Manager identifier of the connected cluster resource.
        /// </summary>
        [Input("connectedClusterResourceUri", required: true)]
        public Input<string> ConnectedClusterResourceUri { get; set; } = null!;

        public GetProvisionedClusterInstanceInvokeArgs()
        {
        }
        public static new GetProvisionedClusterInstanceInvokeArgs Empty => new GetProvisionedClusterInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetProvisionedClusterInstanceResult
    {
        /// <summary>
        /// Extended location pointing to the underlying infrastructure
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties of the provisioned cluster.
        /// </summary>
        public readonly Outputs.ProvisionedClusterPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetProvisionedClusterInstanceResult(
            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string name,

            Outputs.ProvisionedClusterPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            ExtendedLocation = extendedLocation;
            Id = id;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Type = type;
        }
    }
}
