// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.Outputs
{

    /// <summary>
    /// Defines the observed Arc Agent status that is resourceSynced back to the ARM resource.
    /// </summary>
    [OutputType]
    public sealed class ArcAgentStatusResponse
    {
        /// <summary>
        /// Version of the Arc agents currently running on the Provisioned cluster resource.
        /// </summary>
        public readonly string? AgentVersion;
        /// <summary>
        /// Number of CPU cores present in the Provisioned cluster resource
        /// </summary>
        public readonly double? CoreCount;
        /// <summary>
        /// Observed deployment state of the Arc Agents on the target cluster. Possible values include: 'pending', 'provisioning', 'provisioned', 'deleting', 'failed', 'upgrading'
        /// </summary>
        public readonly string? DeploymentState;
        /// <summary>
        /// Error messages while onboarding/upgrading/uninstalling the Arc agents
        /// </summary>
        public readonly string? ErrorMessage;
        /// <summary>
        /// Last connected timestamp of the Provisioned cluster resource.
        /// </summary>
        public readonly string? LastConnectivityTime;
        /// <summary>
        /// ManagedIdentity certificate expiration time (ValidUntil).
        /// </summary>
        public readonly string? ManagedIdentityCertificateExpirationTime;
        /// <summary>
        /// Onboarding public key for provisioning the Managed identity for the HybridAKS cluster. Will be used to create the hybridIdentityMetadata proxy resource and will not be persisted.
        /// </summary>
        public readonly string? OnboardingPublicKey;

        [OutputConstructor]
        private ArcAgentStatusResponse(
            string? agentVersion,

            double? coreCount,

            string? deploymentState,

            string? errorMessage,

            string? lastConnectivityTime,

            string? managedIdentityCertificateExpirationTime,

            string? onboardingPublicKey)
        {
            AgentVersion = agentVersion;
            CoreCount = coreCount;
            DeploymentState = deploymentState;
            ErrorMessage = errorMessage;
            LastConnectivityTime = lastConnectivityTime;
            ManagedIdentityCertificateExpirationTime = managedIdentityCertificateExpirationTime;
            OnboardingPublicKey = onboardingPublicKey;
        }
    }
}
