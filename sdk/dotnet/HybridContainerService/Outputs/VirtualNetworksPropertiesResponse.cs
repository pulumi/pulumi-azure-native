// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.Outputs
{

    /// <summary>
    /// HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork
    /// </summary>
    [OutputType]
    public sealed class VirtualNetworksPropertiesResponse
    {
        /// <summary>
        /// Address of the DHCP servers associated with the network
        /// </summary>
        public readonly ImmutableArray<string> DhcpServers;
        /// <summary>
        /// Address of the DNS servers associated with the network
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// Address of the Gateway associated with the network
        /// </summary>
        public readonly string Gateway;
        public readonly Outputs.VirtualNetworksPropertiesResponseInfraVnetProfile? InfraVnetProfile;
        /// <summary>
        /// IP Address Prefix of the network
        /// </summary>
        public readonly string IpAddressPrefix;
        public readonly string ProvisioningState;
        /// <summary>
        /// HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork
        /// </summary>
        public readonly Outputs.VirtualNetworksPropertiesResponseStatus Status;
        /// <summary>
        /// Virtual IP Pool for Kubernetes
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworksPropertiesResponseVipPool> VipPool;
        /// <summary>
        /// VLAN Id used by the network
        /// </summary>
        public readonly string VlanID;
        /// <summary>
        /// IP Pool for Virtual Machines
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworksPropertiesResponseVmipPool> VmipPool;

        [OutputConstructor]
        private VirtualNetworksPropertiesResponse(
            ImmutableArray<string> dhcpServers,

            ImmutableArray<string> dnsServers,

            string gateway,

            Outputs.VirtualNetworksPropertiesResponseInfraVnetProfile? infraVnetProfile,

            string ipAddressPrefix,

            string provisioningState,

            Outputs.VirtualNetworksPropertiesResponseStatus status,

            ImmutableArray<Outputs.VirtualNetworksPropertiesResponseVipPool> vipPool,

            string vlanID,

            ImmutableArray<Outputs.VirtualNetworksPropertiesResponseVmipPool> vmipPool)
        {
            DhcpServers = dhcpServers;
            DnsServers = dnsServers;
            Gateway = gateway;
            InfraVnetProfile = infraVnetProfile;
            IpAddressPrefix = ipAddressPrefix;
            ProvisioningState = provisioningState;
            Status = status;
            VipPool = vipPool;
            VlanID = vlanID;
            VmipPool = vmipPool;
        }
    }
}
