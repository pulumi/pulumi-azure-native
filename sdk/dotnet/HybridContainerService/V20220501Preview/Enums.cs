// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HybridContainerService.V20220501Preview
{
    /// <summary>
    /// Indicates whether the Arc agents on the provisioned clusters be upgraded automatically to the latest version. Defaults to Enabled.
    /// </summary>
    [EnumType]
    public readonly struct AutoUpgradeOptions : IEquatable<AutoUpgradeOptions>
    {
        private readonly string _value;

        private AutoUpgradeOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoUpgradeOptions Enabled { get; } = new AutoUpgradeOptions("Enabled");
        public static AutoUpgradeOptions Disabled { get; } = new AutoUpgradeOptions("Disabled");

        public static bool operator ==(AutoUpgradeOptions left, AutoUpgradeOptions right) => left.Equals(right);
        public static bool operator !=(AutoUpgradeOptions left, AutoUpgradeOptions right) => !left.Equals(right);

        public static explicit operator string(AutoUpgradeOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoUpgradeOptions other && Equals(other);
        public bool Equals(AutoUpgradeOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// LicenseType - The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType Windows_Server { get; } = new LicenseType("Windows_Server");
        public static LicenseType None { get; } = new LicenseType("None");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerSku : IEquatable<LoadBalancerSku>
    {
        private readonly string _value;

        private LoadBalancerSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerSku Unstacked_haproxy { get; } = new LoadBalancerSku("unstacked-haproxy");
        public static LoadBalancerSku Stacked_kube_vip { get; } = new LoadBalancerSku("stacked-kube-vip");
        public static LoadBalancerSku Stacked_metallb { get; } = new LoadBalancerSku("stacked-metallb");
        public static LoadBalancerSku @Unmanaged { get; } = new LoadBalancerSku("unmanaged");

        public static bool operator ==(LoadBalancerSku left, LoadBalancerSku right) => left.Equals(right);
        public static bool operator !=(LoadBalancerSku left, LoadBalancerSku right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerSku other && Equals(other);
        public bool Equals(LoadBalancerSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode - AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'LB', 'User'. Default is 'User'
    /// </summary>
    [EnumType]
    public readonly struct Mode : IEquatable<Mode>
    {
        private readonly string _value;

        private Mode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Mode System { get; } = new Mode("System");
        public static Mode LB { get; } = new Mode("LB");
        public static Mode User { get; } = new Mode("User");

        public static bool operator ==(Mode left, Mode right) => left.Equals(right);
        public static bool operator !=(Mode left, Mode right) => !left.Equals(right);

        public static explicit operator string(Mode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Mode other && Equals(other);
        public bool Equals(Mode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
    /// </summary>
    [EnumType]
    public readonly struct NetworkPolicy : IEquatable<NetworkPolicy>
    {
        private readonly string _value;

        private NetworkPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkPolicy Calico { get; } = new NetworkPolicy("calico");
        public static NetworkPolicy Flannel { get; } = new NetworkPolicy("flannel");

        public static bool operator ==(NetworkPolicy left, NetworkPolicy right) => left.Equals(right);
        public static bool operator !=(NetworkPolicy left, NetworkPolicy right) => !left.Equals(right);

        public static explicit operator string(NetworkPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPolicy other && Equals(other);
        public bool Equals(NetworkPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OsType - OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. Possible values include: 'Linux', 'Windows'
    /// </summary>
    [EnumType]
    public readonly struct OsType : IEquatable<OsType>
    {
        private readonly string _value;

        private OsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OsType Linux { get; } = new OsType("Linux");
        public static OsType Windows { get; } = new OsType("Windows");

        public static bool operator ==(OsType left, OsType right) => left.Equals(right);
        public static bool operator !=(OsType left, OsType right) => !left.Equals(right);

        public static explicit operator string(OsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsType other && Equals(other);
        public bool Equals(OsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the provisioned cluster. The type SystemAssigned, includes a system created identity. The type None means no identity is assigned to the provisioned cluster.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
