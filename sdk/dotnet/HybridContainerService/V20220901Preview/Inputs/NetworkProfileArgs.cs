// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridContainerService.V20220901Preview.Inputs
{

    /// <summary>
    /// NetworkProfile - Profile of network configuration.
    /// </summary>
    public sealed class NetworkProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNSServiceIP - An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
        /// </summary>
        [Input("dnsServiceIP")]
        public Input<string>? DnsServiceIP { get; set; }

        /// <summary>
        /// LoadBalancerProfile - Profile of the cluster load balancer.
        /// </summary>
        [Input("loadBalancerProfile")]
        public Input<Inputs.LoadBalancerProfileArgs>? LoadBalancerProfile { get; set; }

        /// <summary>
        /// LoadBalancerSku - The load balancer sku for the provisioned cluster. Possible values: 'unstacked-haproxy', 'stacked-kube-vip', 'stacked-metallb', 'unmanaged'. The default is 'unmanaged'.
        /// </summary>
        [Input("loadBalancerSku")]
        public InputUnion<string, Pulumi.AzureNative.HybridContainerService.V20220901Preview.LoadBalancerSku>? LoadBalancerSku { get; set; }

        /// <summary>
        /// NetworkPolicy - Network policy used for building Kubernetes network. Possible values include: 'calico', 'flannel'. Default is 'calico'
        /// </summary>
        [Input("networkPolicy")]
        public InputUnion<string, Pulumi.AzureNative.HybridContainerService.V20220901Preview.NetworkPolicy>? NetworkPolicy { get; set; }

        /// <summary>
        /// PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        /// </summary>
        [Input("podCidr")]
        public Input<string>? PodCidr { get; set; }

        [Input("podCidrs")]
        private InputList<string>? _podCidrs;

        /// <summary>
        /// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        public InputList<string> PodCidrs
        {
            get => _podCidrs ?? (_podCidrs = new InputList<string>());
            set => _podCidrs = value;
        }

        /// <summary>
        /// ServiceCidr - A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        [Input("serviceCidr")]
        public Input<string>? ServiceCidr { get; set; }

        [Input("serviceCidrs")]
        private InputList<string>? _serviceCidrs;

        /// <summary>
        /// The CIDR notation IP ranges from which to assign service cluster IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
        /// </summary>
        public InputList<string> ServiceCidrs
        {
            get => _serviceCidrs ?? (_serviceCidrs = new InputList<string>());
            set => _serviceCidrs = value;
        }

        public NetworkProfileArgs()
        {
            LoadBalancerSku = "unmanaged";
            NetworkPolicy = "calico";
        }
        public static new NetworkProfileArgs Empty => new NetworkProfileArgs();
    }
}
