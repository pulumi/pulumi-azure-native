// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Scheduler.V20160101
{
    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the http authentication type.
    /// </summary>
    [EnumType]
    public readonly struct HttpAuthenticationType : IEquatable<HttpAuthenticationType>
    {
        private readonly string _value;

        private HttpAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HttpAuthenticationType NotSpecified { get; } = new HttpAuthenticationType("NotSpecified");
        public static HttpAuthenticationType ClientCertificate { get; } = new HttpAuthenticationType("ClientCertificate");
        public static HttpAuthenticationType ActiveDirectoryOAuth { get; } = new HttpAuthenticationType("ActiveDirectoryOAuth");
        public static HttpAuthenticationType Basic { get; } = new HttpAuthenticationType("Basic");

        public static bool operator ==(HttpAuthenticationType left, HttpAuthenticationType right) => left.Equals(right);
        public static bool operator !=(HttpAuthenticationType left, HttpAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(HttpAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpAuthenticationType other && Equals(other);
        public bool Equals(HttpAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the job action type.
    /// </summary>
    [EnumType]
    public readonly struct JobActionType : IEquatable<JobActionType>
    {
        private readonly string _value;

        private JobActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobActionType Http { get; } = new JobActionType("Http");
        public static JobActionType Https { get; } = new JobActionType("Https");
        public static JobActionType StorageQueue { get; } = new JobActionType("StorageQueue");
        public static JobActionType ServiceBusQueue { get; } = new JobActionType("ServiceBusQueue");
        public static JobActionType ServiceBusTopic { get; } = new JobActionType("ServiceBusTopic");

        public static bool operator ==(JobActionType left, JobActionType right) => left.Equals(right);
        public static bool operator !=(JobActionType left, JobActionType right) => !left.Equals(right);

        public static explicit operator string(JobActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobActionType other && Equals(other);
        public bool Equals(JobActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the state.
    /// </summary>
    [EnumType]
    public readonly struct JobCollectionState : IEquatable<JobCollectionState>
    {
        private readonly string _value;

        private JobCollectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobCollectionState Enabled { get; } = new JobCollectionState("Enabled");
        public static JobCollectionState Disabled { get; } = new JobCollectionState("Disabled");
        public static JobCollectionState Suspended { get; } = new JobCollectionState("Suspended");
        public static JobCollectionState Deleted { get; } = new JobCollectionState("Deleted");

        public static bool operator ==(JobCollectionState left, JobCollectionState right) => left.Equals(right);
        public static bool operator !=(JobCollectionState left, JobCollectionState right) => !left.Equals(right);

        public static explicit operator string(JobCollectionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobCollectionState other && Equals(other);
        public bool Equals(JobCollectionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
    /// </summary>
    [EnumType]
    public readonly struct JobScheduleDay : IEquatable<JobScheduleDay>
    {
        private readonly string _value;

        private JobScheduleDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobScheduleDay Monday { get; } = new JobScheduleDay("Monday");
        public static JobScheduleDay Tuesday { get; } = new JobScheduleDay("Tuesday");
        public static JobScheduleDay Wednesday { get; } = new JobScheduleDay("Wednesday");
        public static JobScheduleDay Thursday { get; } = new JobScheduleDay("Thursday");
        public static JobScheduleDay Friday { get; } = new JobScheduleDay("Friday");
        public static JobScheduleDay Saturday { get; } = new JobScheduleDay("Saturday");
        public static JobScheduleDay Sunday { get; } = new JobScheduleDay("Sunday");

        public static bool operator ==(JobScheduleDay left, JobScheduleDay right) => left.Equals(right);
        public static bool operator !=(JobScheduleDay left, JobScheduleDay right) => !left.Equals(right);

        public static explicit operator string(JobScheduleDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobScheduleDay other && Equals(other);
        public bool Equals(JobScheduleDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or set the job state.
    /// </summary>
    [EnumType]
    public readonly struct JobState : IEquatable<JobState>
    {
        private readonly string _value;

        private JobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobState Enabled { get; } = new JobState("Enabled");
        public static JobState Disabled { get; } = new JobState("Disabled");
        public static JobState Faulted { get; } = new JobState("Faulted");
        public static JobState Completed { get; } = new JobState("Completed");

        public static bool operator ==(JobState left, JobState right) => left.Equals(right);
        public static bool operator !=(JobState left, JobState right) => !left.Equals(right);

        public static explicit operator string(JobState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobState other && Equals(other);
        public bool Equals(JobState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceFrequency : IEquatable<RecurrenceFrequency>
    {
        private readonly string _value;

        private RecurrenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecurrenceFrequency Minute { get; } = new RecurrenceFrequency("Minute");
        public static RecurrenceFrequency Hour { get; } = new RecurrenceFrequency("Hour");
        public static RecurrenceFrequency Day { get; } = new RecurrenceFrequency("Day");
        public static RecurrenceFrequency Week { get; } = new RecurrenceFrequency("Week");
        public static RecurrenceFrequency Month { get; } = new RecurrenceFrequency("Month");

        public static bool operator ==(RecurrenceFrequency left, RecurrenceFrequency right) => left.Equals(right);
        public static bool operator !=(RecurrenceFrequency left, RecurrenceFrequency right) => !left.Equals(right);

        public static explicit operator string(RecurrenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceFrequency other && Equals(other);
        public bool Equals(RecurrenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the retry strategy to be used.
    /// </summary>
    [EnumType]
    public readonly struct RetryType : IEquatable<RetryType>
    {
        private readonly string _value;

        private RetryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetryType None { get; } = new RetryType("None");
        public static RetryType Fixed { get; } = new RetryType("Fixed");

        public static bool operator ==(RetryType left, RetryType right) => left.Equals(right);
        public static bool operator !=(RetryType left, RetryType right) => !left.Equals(right);

        public static explicit operator string(RetryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetryType other && Equals(other);
        public bool Equals(RetryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the authentication type.
    /// </summary>
    [EnumType]
    public readonly struct ServiceBusAuthenticationType : IEquatable<ServiceBusAuthenticationType>
    {
        private readonly string _value;

        private ServiceBusAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBusAuthenticationType NotSpecified { get; } = new ServiceBusAuthenticationType("NotSpecified");
        public static ServiceBusAuthenticationType SharedAccessKey { get; } = new ServiceBusAuthenticationType("SharedAccessKey");

        public static bool operator ==(ServiceBusAuthenticationType left, ServiceBusAuthenticationType right) => left.Equals(right);
        public static bool operator !=(ServiceBusAuthenticationType left, ServiceBusAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(ServiceBusAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBusAuthenticationType other && Equals(other);
        public bool Equals(ServiceBusAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the transport type.
    /// </summary>
    [EnumType]
    public readonly struct ServiceBusTransportType : IEquatable<ServiceBusTransportType>
    {
        private readonly string _value;

        private ServiceBusTransportType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBusTransportType NotSpecified { get; } = new ServiceBusTransportType("NotSpecified");
        public static ServiceBusTransportType NetMessaging { get; } = new ServiceBusTransportType("NetMessaging");
        public static ServiceBusTransportType AMQP { get; } = new ServiceBusTransportType("AMQP");

        public static bool operator ==(ServiceBusTransportType left, ServiceBusTransportType right) => left.Equals(right);
        public static bool operator !=(ServiceBusTransportType left, ServiceBusTransportType right) => !left.Equals(right);

        public static explicit operator string(ServiceBusTransportType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBusTransportType other && Equals(other);
        public bool Equals(ServiceBusTransportType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or set the SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuDefinition : IEquatable<SkuDefinition>
    {
        private readonly string _value;

        private SkuDefinition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuDefinition Standard { get; } = new SkuDefinition("Standard");
        public static SkuDefinition Free { get; } = new SkuDefinition("Free");
        public static SkuDefinition Premium { get; } = new SkuDefinition("Premium");

        public static bool operator ==(SkuDefinition left, SkuDefinition right) => left.Equals(right);
        public static bool operator !=(SkuDefinition left, SkuDefinition right) => !left.Equals(right);

        public static explicit operator string(SkuDefinition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuDefinition other && Equals(other);
        public bool Equals(SkuDefinition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
