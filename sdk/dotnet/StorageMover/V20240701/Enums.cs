// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.StorageMover.V20240701
{
    /// <summary>
    /// Strategy to use for copy.
    /// </summary>
    [EnumType]
    public readonly struct CopyMode : IEquatable<CopyMode>
    {
        private readonly string _value;

        private CopyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CopyMode Additive { get; } = new CopyMode("Additive");
        public static CopyMode Mirror { get; } = new CopyMode("Mirror");

        public static bool operator ==(CopyMode left, CopyMode right) => left.Equals(right);
        public static bool operator !=(CopyMode left, CopyMode right) => !left.Equals(right);

        public static explicit operator string(CopyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CopyMode other && Equals(other);
        public bool Equals(CopyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Credentials type.
    /// </summary>
    [EnumType]
    public readonly struct CredentialType : IEquatable<CredentialType>
    {
        private readonly string _value;

        private CredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CredentialType AzureKeyVaultSmb { get; } = new CredentialType("AzureKeyVaultSmb");

        public static bool operator ==(CredentialType left, CredentialType right) => left.Equals(right);
        public static bool operator !=(CredentialType left, CredentialType right) => !left.Equals(right);

        public static explicit operator string(CredentialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CredentialType other && Equals(other);
        public bool Equals(CredentialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day of week.
    /// </summary>
    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");
        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Endpoint resource type.
    /// </summary>
    [EnumType]
    public readonly struct EndpointType : IEquatable<EndpointType>
    {
        private readonly string _value;

        private EndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointType AzureStorageBlobContainer { get; } = new EndpointType("AzureStorageBlobContainer");
        public static EndpointType NfsMount { get; } = new EndpointType("NfsMount");
        public static EndpointType AzureStorageSmbFileShare { get; } = new EndpointType("AzureStorageSmbFileShare");
        public static EndpointType SmbMount { get; } = new EndpointType("SmbMount");

        public static bool operator ==(EndpointType left, EndpointType right) => left.Equals(right);
        public static bool operator !=(EndpointType left, EndpointType right) => !left.Equals(right);

        public static explicit operator string(EndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointType other && Equals(other);
        public bool Equals(EndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The NFS protocol version.
    /// </summary>
    [EnumType]
    public readonly struct NfsVersion : IEquatable<NfsVersion>
    {
        private readonly string _value;

        private NfsVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NfsVersion NFSauto { get; } = new NfsVersion("NFSauto");
        public static NfsVersion NFSv3 { get; } = new NfsVersion("NFSv3");
        public static NfsVersion NFSv4 { get; } = new NfsVersion("NFSv4");

        public static bool operator ==(NfsVersion left, NfsVersion right) => left.Equals(right);
        public static bool operator !=(NfsVersion left, NfsVersion right) => !left.Equals(right);

        public static explicit operator string(NfsVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NfsVersion other && Equals(other);
        public bool Equals(NfsVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
