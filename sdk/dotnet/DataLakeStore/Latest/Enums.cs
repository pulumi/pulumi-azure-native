// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DataLakeStore.Latest
{
    /// <summary>
    /// The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionConfigType : IEquatable<EncryptionConfigType>
    {
        private readonly string _value;

        private EncryptionConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionConfigType UserManaged { get; } = new EncryptionConfigType("UserManaged");
        public static EncryptionConfigType ServiceManaged { get; } = new EncryptionConfigType("ServiceManaged");

        public static bool operator ==(EncryptionConfigType left, EncryptionConfigType right) => left.Equals(right);
        public static bool operator !=(EncryptionConfigType left, EncryptionConfigType right) => !left.Equals(right);

        public static explicit operator string(EncryptionConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionConfigType other && Equals(other);
        public bool Equals(EncryptionConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionIdentityType : IEquatable<EncryptionIdentityType>
    {
        private readonly string _value;

        private EncryptionIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionIdentityType SystemAssigned { get; } = new EncryptionIdentityType("SystemAssigned");

        public static bool operator ==(EncryptionIdentityType left, EncryptionIdentityType right) => left.Equals(right);
        public static bool operator !=(EncryptionIdentityType left, EncryptionIdentityType right) => !left.Equals(right);

        public static explicit operator string(EncryptionIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionIdentityType other && Equals(other);
        public bool Equals(EncryptionIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of encryption for this Data Lake Store account.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionState : IEquatable<EncryptionState>
    {
        private readonly string _value;

        private EncryptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionState Enabled { get; } = new EncryptionState("Enabled");
        public static EncryptionState Disabled { get; } = new EncryptionState("Disabled");

        public static bool operator ==(EncryptionState left, EncryptionState right) => left.Equals(right);
        public static bool operator !=(EncryptionState left, EncryptionState right) => !left.Equals(right);

        public static explicit operator string(EncryptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionState other && Equals(other);
        public bool Equals(EncryptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
    /// </summary>
    [EnumType]
    public readonly struct FirewallAllowAzureIpsState : IEquatable<FirewallAllowAzureIpsState>
    {
        private readonly string _value;

        private FirewallAllowAzureIpsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallAllowAzureIpsState Enabled { get; } = new FirewallAllowAzureIpsState("Enabled");
        public static FirewallAllowAzureIpsState Disabled { get; } = new FirewallAllowAzureIpsState("Disabled");

        public static bool operator ==(FirewallAllowAzureIpsState left, FirewallAllowAzureIpsState right) => left.Equals(right);
        public static bool operator !=(FirewallAllowAzureIpsState left, FirewallAllowAzureIpsState right) => !left.Equals(right);

        public static explicit operator string(FirewallAllowAzureIpsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallAllowAzureIpsState other && Equals(other);
        public bool Equals(FirewallAllowAzureIpsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of the IP address firewall for this Data Lake Store account.
    /// </summary>
    [EnumType]
    public readonly struct FirewallState : IEquatable<FirewallState>
    {
        private readonly string _value;

        private FirewallState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallState Enabled { get; } = new FirewallState("Enabled");
        public static FirewallState Disabled { get; } = new FirewallState("Disabled");

        public static bool operator ==(FirewallState left, FirewallState right) => left.Equals(right);
        public static bool operator !=(FirewallState left, FirewallState right) => !left.Equals(right);

        public static explicit operator string(FirewallState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallState other && Equals(other);
        public bool Equals(FirewallState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The commitment tier to use for next month.
    /// </summary>
    [EnumType]
    public readonly struct TierType : IEquatable<TierType>
    {
        private readonly string _value;

        private TierType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TierType Consumption { get; } = new TierType("Consumption");
        public static TierType Commitment_1TB { get; } = new TierType("Commitment_1TB");
        public static TierType Commitment_10TB { get; } = new TierType("Commitment_10TB");
        public static TierType Commitment_100TB { get; } = new TierType("Commitment_100TB");
        public static TierType Commitment_500TB { get; } = new TierType("Commitment_500TB");
        public static TierType Commitment_1PB { get; } = new TierType("Commitment_1PB");
        public static TierType Commitment_5PB { get; } = new TierType("Commitment_5PB");

        public static bool operator ==(TierType left, TierType right) => left.Equals(right);
        public static bool operator !=(TierType left, TierType right) => !left.Equals(right);

        public static explicit operator string(TierType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TierType other && Equals(other);
        public bool Equals(TierType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current state of the trusted identity provider feature for this Data Lake Store account.
    /// </summary>
    [EnumType]
    public readonly struct TrustedIdProviderState : IEquatable<TrustedIdProviderState>
    {
        private readonly string _value;

        private TrustedIdProviderState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrustedIdProviderState Enabled { get; } = new TrustedIdProviderState("Enabled");
        public static TrustedIdProviderState Disabled { get; } = new TrustedIdProviderState("Disabled");

        public static bool operator ==(TrustedIdProviderState left, TrustedIdProviderState right) => left.Equals(right);
        public static bool operator !=(TrustedIdProviderState left, TrustedIdProviderState right) => !left.Equals(right);

        public static explicit operator string(TrustedIdProviderState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrustedIdProviderState other && Equals(other);
        public bool Equals(TrustedIdProviderState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
