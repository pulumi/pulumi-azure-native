// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Databricks
{
    public static class GetAccessConnector
    {
        /// <summary>
        /// Information about azure databricks accessConnector.
        /// API Version: 2022-04-01-preview.
        /// </summary>
        public static Task<GetAccessConnectorResult> InvokeAsync(GetAccessConnectorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccessConnectorResult>("azure-native:databricks:getAccessConnector", args ?? new GetAccessConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Information about azure databricks accessConnector.
        /// API Version: 2022-04-01-preview.
        /// </summary>
        public static Output<GetAccessConnectorResult> Invoke(GetAccessConnectorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAccessConnectorResult>("azure-native:databricks:getAccessConnector", args ?? new GetAccessConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the azure databricks accessConnector.
        /// </summary>
        [Input("connectorName", required: true)]
        public string ConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAccessConnectorArgs()
        {
        }
        public static new GetAccessConnectorArgs Empty => new GetAccessConnectorArgs();
    }

    public sealed class GetAccessConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the azure databricks accessConnector.
        /// </summary>
        [Input("connectorName", required: true)]
        public Input<string> ConnectorName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAccessConnectorInvokeArgs()
        {
        }
        public static new GetAccessConnectorInvokeArgs Empty => new GetAccessConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessConnectorResult
    {
        /// <summary>
        /// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity for the resource.
        /// </summary>
        public readonly Outputs.IdentityDataResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure Databricks accessConnector properties
        /// </summary>
        public readonly Outputs.AccessConnectorPropertiesResponse Properties;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAccessConnectorResult(
            string id,

            Outputs.IdentityDataResponse? identity,

            string location,

            string name,

            Outputs.AccessConnectorPropertiesResponse properties,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
