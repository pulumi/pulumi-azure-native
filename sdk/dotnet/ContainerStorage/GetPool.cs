// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerStorage
{
    public static class GetPool
    {
        /// <summary>
        /// Get a Pool
        /// Azure REST API version: 2023-03-01-preview.
        /// </summary>
        public static Task<GetPoolResult> InvokeAsync(GetPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPoolResult>("azure-native:containerstorage:getPool", args ?? new GetPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Pool
        /// Azure REST API version: 2023-03-01-preview.
        /// </summary>
        public static Output<GetPoolResult> Invoke(GetPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoolResult>("azure-native:containerstorage:getPool", args ?? new GetPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pool Object
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPoolArgs()
        {
        }
        public static new GetPoolArgs Empty => new GetPoolArgs();
    }

    public sealed class GetPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Pool Object
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPoolInvokeArgs()
        {
        }
        public static new GetPoolInvokeArgs Empty => new GetPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetPoolResult
    {
        /// <summary>
        /// List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.
        /// </summary>
        public readonly ImmutableArray<string> Assignments;
        /// <summary>
        /// Disk Pool Properties
        /// </summary>
        public readonly Outputs.DiskPoolPropertiesResponse? DiskPoolProperties;
        /// <summary>
        /// Elastic San Pool Properties
        /// </summary>
        public readonly Outputs.ElasticSanPoolPropertiesResponse ElasticSanPoolProperties;
        /// <summary>
        /// Ephemeral Pool Properties
        /// </summary>
        public readonly Outputs.EphemeralPoolPropertiesResponse? EphemeralPoolProperties;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Initial capacity of the pool in GiB.
        /// </summary>
        public readonly double PoolCapacityGiB;
        /// <summary>
        /// Type of the Pool: ephemeral, disk, managed, or elasticsan.
        /// </summary>
        public readonly double PoolType;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List of availability zones that resources can be created in.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetPoolResult(
            ImmutableArray<string> assignments,

            Outputs.DiskPoolPropertiesResponse? diskPoolProperties,

            Outputs.ElasticSanPoolPropertiesResponse elasticSanPoolProperties,

            Outputs.EphemeralPoolPropertiesResponse? ephemeralPoolProperties,

            string id,

            string location,

            string name,

            double poolCapacityGiB,

            double poolType,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<string> zones)
        {
            Assignments = assignments;
            DiskPoolProperties = diskPoolProperties;
            ElasticSanPoolProperties = elasticSanPoolProperties;
            EphemeralPoolProperties = ephemeralPoolProperties;
            Id = id;
            Location = location;
            Name = name;
            PoolCapacityGiB = poolCapacityGiB;
            PoolType = poolType;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Zones = zones;
        }
    }
}
