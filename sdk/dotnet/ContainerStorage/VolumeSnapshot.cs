// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerStorage
{
    /// <summary>
    /// Concrete proxy resource types can be created by aliasing this type using a specific property type.
    /// Azure REST API version: 2023-03-01-preview. Prior API version in Azure Native 1.x: 2023-03-01-preview
    /// </summary>
    [AzureNativeResourceType("azure-native:containerstorage:VolumeSnapshot")]
    public partial class VolumeSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of string mount options
        /// </summary>
        [Output("mountOptions")]
        public Output<ImmutableArray<string>> MountOptions { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the last operation.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Reclaim Policy, Delete or Retain
        /// </summary>
        [Output("reclaimPolicy")]
        public Output<string> ReclaimPolicy { get; private set; } = null!;

        /// <summary>
        /// Reference to the source volume
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Indicates how the volumes created from the snapshot should be attached
        /// </summary>
        [Output("volumeMode")]
        public Output<string> VolumeMode { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeSnapshot(string name, VolumeSnapshotArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerstorage:VolumeSnapshot", name, args ?? new VolumeSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeSnapshot(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerstorage:VolumeSnapshot", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerstorage/v20230301preview:VolumeSnapshot"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeSnapshot Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VolumeSnapshot(name, id, options);
        }
    }

    public sealed class VolumeSnapshotArgs : global::Pulumi.ResourceArgs
    {
        [Input("mountOptions", required: true)]
        private InputList<string>? _mountOptions;

        /// <summary>
        /// List of string mount options
        /// </summary>
        public InputList<string> MountOptions
        {
            get => _mountOptions ?? (_mountOptions = new InputList<string>());
            set => _mountOptions = value;
        }

        /// <summary>
        /// Pool Object
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// Reclaim Policy, Delete or Retain
        /// </summary>
        [Input("reclaimPolicy", required: true)]
        public InputUnion<string, Pulumi.AzureNative.ContainerStorage.ReclaimPolicy> ReclaimPolicy { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Reference to the source volume
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// Indicates how the volumes created from the snapshot should be attached
        /// </summary>
        [Input("volumeMode", required: true)]
        public InputUnion<string, Pulumi.AzureNative.ContainerStorage.VolumeMode> VolumeMode { get; set; } = null!;

        /// <summary>
        /// Volume Snapshot Resource
        /// </summary>
        [Input("volumeSnapshotName")]
        public Input<string>? VolumeSnapshotName { get; set; }

        public VolumeSnapshotArgs()
        {
        }
        public static new VolumeSnapshotArgs Empty => new VolumeSnapshotArgs();
    }
}
