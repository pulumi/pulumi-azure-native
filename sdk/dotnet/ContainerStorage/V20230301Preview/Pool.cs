// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerStorage.V20230301Preview
{
    /// <summary>
    /// Pool resource
    /// </summary>
    [AzureNativeResourceType("azure-native:containerstorage/v20230301preview:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.
        /// </summary>
        [Output("assignments")]
        public Output<ImmutableArray<string>> Assignments { get; private set; } = null!;

        /// <summary>
        /// Disk Pool Properties
        /// </summary>
        [Output("diskPoolProperties")]
        public Output<Outputs.DiskPoolPropertiesResponse?> DiskPoolProperties { get; private set; } = null!;

        /// <summary>
        /// Elastic San Pool Properties
        /// </summary>
        [Output("elasticSanPoolProperties")]
        public Output<Outputs.ElasticSanPoolPropertiesResponse> ElasticSanPoolProperties { get; private set; } = null!;

        /// <summary>
        /// Ephemeral Pool Properties
        /// </summary>
        [Output("ephemeralPoolProperties")]
        public Output<Outputs.EphemeralPoolPropertiesResponse?> EphemeralPoolProperties { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Initial capacity of the pool in GiB.
        /// </summary>
        [Output("poolCapacityGiB")]
        public Output<double> PoolCapacityGiB { get; private set; } = null!;

        /// <summary>
        /// Type of the Pool: ephemeral, disk, managed, or elasticsan.
        /// </summary>
        [Output("poolType")]
        public Output<double> PoolType { get; private set; } = null!;

        /// <summary>
        /// The status of the last operation.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// List of availability zones that resources can be created in.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerstorage/v20230301preview:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerstorage/v20230301preview:Pool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerstorage:Pool"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("assignments", required: true)]
        private InputList<string>? _assignments;

        /// <summary>
        /// List of resources that should have access to the pool. Typically ARM references to AKS clusters or ACI Container Groups. For local and standard this must be a single reference. For portable there can be many.
        /// </summary>
        public InputList<string> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<string>());
            set => _assignments = value;
        }

        /// <summary>
        /// Disk Pool Properties
        /// </summary>
        [Input("diskPoolProperties")]
        public Input<Inputs.DiskPoolPropertiesArgs>? DiskPoolProperties { get; set; }

        /// <summary>
        /// Elastic San Pool Properties
        /// </summary>
        [Input("elasticSanPoolProperties", required: true)]
        public Input<Inputs.ElasticSanPoolPropertiesArgs> ElasticSanPoolProperties { get; set; } = null!;

        /// <summary>
        /// Ephemeral Pool Properties
        /// </summary>
        [Input("ephemeralPoolProperties")]
        public Input<Inputs.EphemeralPoolPropertiesArgs>? EphemeralPoolProperties { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Initial capacity of the pool in GiB.
        /// </summary>
        [Input("poolCapacityGiB", required: true)]
        public Input<double> PoolCapacityGiB { get; set; } = null!;

        /// <summary>
        /// Pool Object
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// Type of the Pool: ephemeral, disk, managed, or elasticsan.
        /// </summary>
        [Input("poolType", required: true)]
        public Input<double> PoolType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("zones", required: true)]
        private InputList<string>? _zones;

        /// <summary>
        /// List of availability zones that resources can be created in.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }
}
