// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ContainerStorage
{
    /// <summary>
    /// Sku name
    /// </summary>
    [EnumType]
    public readonly struct AzureDiskSkuName : IEquatable<AzureDiskSkuName>
    {
        private readonly string _value;

        private AzureDiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Premium_LRS SKU
        /// </summary>
        public static AzureDiskSkuName Premium_LRS { get; } = new AzureDiskSkuName("Premium_LRS");
        /// <summary>
        /// Standard_LRS SKU
        /// </summary>
        public static AzureDiskSkuName Standard_LRS { get; } = new AzureDiskSkuName("Standard_LRS");
        /// <summary>
        /// StandardSSD_LRS SKU
        /// </summary>
        public static AzureDiskSkuName StandardSSD_LRS { get; } = new AzureDiskSkuName("StandardSSD_LRS");
        /// <summary>
        /// UltraSSD_LRS SKU
        /// </summary>
        public static AzureDiskSkuName UltraSSD_LRS { get; } = new AzureDiskSkuName("UltraSSD_LRS");
        /// <summary>
        /// Premium_ZRS SKU
        /// </summary>
        public static AzureDiskSkuName Premium_ZRS { get; } = new AzureDiskSkuName("Premium_ZRS");
        /// <summary>
        /// PremiumV2_LRS SKU
        /// </summary>
        public static AzureDiskSkuName PremiumV2_LRS { get; } = new AzureDiskSkuName("PremiumV2_LRS");
        /// <summary>
        /// StandardSSD_ZRS SKU
        /// </summary>
        public static AzureDiskSkuName StandardSSD_ZRS { get; } = new AzureDiskSkuName("StandardSSD_ZRS");

        public static bool operator ==(AzureDiskSkuName left, AzureDiskSkuName right) => left.Equals(right);
        public static bool operator !=(AzureDiskSkuName left, AzureDiskSkuName right) => !left.Equals(right);

        public static explicit operator string(AzureDiskSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureDiskSkuName other && Equals(other);
        public bool Equals(AzureDiskSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sku name
    /// </summary>
    [EnumType]
    public readonly struct ElasticSanSkuName : IEquatable<ElasticSanSkuName>
    {
        private readonly string _value;

        private ElasticSanSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Premium_LRS SKU
        /// </summary>
        public static ElasticSanSkuName Premium_LRS { get; } = new ElasticSanSkuName("Premium_LRS");
        /// <summary>
        /// Premium_ZRS SKU
        /// </summary>
        public static ElasticSanSkuName Premium_ZRS { get; } = new ElasticSanSkuName("Premium_ZRS");

        public static bool operator ==(ElasticSanSkuName left, ElasticSanSkuName right) => left.Equals(right);
        public static bool operator !=(ElasticSanSkuName left, ElasticSanSkuName right) => !left.Equals(right);

        public static explicit operator string(ElasticSanSkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ElasticSanSkuName other && Equals(other);
        public bool Equals(ElasticSanSkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ReclaimPolicy defines what happens to the backend storage when StoragePool is deleted
    /// </summary>
    [EnumType]
    public readonly struct ReclaimPolicy : IEquatable<ReclaimPolicy>
    {
        private readonly string _value;

        private ReclaimPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Delete resource
        /// </summary>
        public static ReclaimPolicy Delete { get; } = new ReclaimPolicy("Delete");
        /// <summary>
        /// Retain resource
        /// </summary>
        public static ReclaimPolicy Retain { get; } = new ReclaimPolicy("Retain");

        public static bool operator ==(ReclaimPolicy left, ReclaimPolicy right) => left.Equals(right);
        public static bool operator !=(ReclaimPolicy left, ReclaimPolicy right) => !left.Equals(right);

        public static explicit operator string(ReclaimPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReclaimPolicy other && Equals(other);
        public bool Equals(ReclaimPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Availability Zones
    /// </summary>
    [EnumType]
    public readonly struct Zone : IEquatable<Zone>
    {
        private readonly string _value;

        private Zone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// First availability zone.
        /// </summary>
        public static Zone Zone1 { get; } = new Zone("1");
        /// <summary>
        /// Second availability zone.
        /// </summary>
        public static Zone Zone2 { get; } = new Zone("2");
        /// <summary>
        /// Third availability zone.
        /// </summary>
        public static Zone Zone3 { get; } = new Zone("3");

        public static bool operator ==(Zone left, Zone right) => left.Equals(right);
        public static bool operator !=(Zone left, Zone right) => !left.Equals(right);

        public static explicit operator string(Zone value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Zone other && Equals(other);
        public bool Equals(Zone other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
