// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ContainerStorage
{
    /// <summary>
    /// Reclaim Policy, Delete or Retain
    /// </summary>
    [EnumType]
    public readonly struct ReclaimPolicy : IEquatable<ReclaimPolicy>
    {
        private readonly string _value;

        private ReclaimPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReclaimPolicy Delete { get; } = new ReclaimPolicy("Delete");
        public static ReclaimPolicy Retain { get; } = new ReclaimPolicy("Retain");

        public static bool operator ==(ReclaimPolicy left, ReclaimPolicy right) => left.Equals(right);
        public static bool operator !=(ReclaimPolicy left, ReclaimPolicy right) => !left.Equals(right);

        public static explicit operator string(ReclaimPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReclaimPolicy other && Equals(other);
        public bool Equals(ReclaimPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates how the volumes created from the snapshot should be attached
    /// </summary>
    [EnumType]
    public readonly struct VolumeMode : IEquatable<VolumeMode>
    {
        private readonly string _value;

        private VolumeMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeMode Filesystem { get; } = new VolumeMode("Filesystem");
        public static VolumeMode Raw { get; } = new VolumeMode("Raw");

        public static bool operator ==(VolumeMode left, VolumeMode right) => left.Equals(right);
        public static bool operator !=(VolumeMode left, VolumeMode right) => !left.Equals(right);

        public static explicit operator string(VolumeMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeMode other && Equals(other);
        public bool Equals(VolumeMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
