// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.LoadTestService
{
    public static class GetPlaywrightWorkspace
    {
        /// <summary>
        /// Get a PlaywrightWorkspace
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Task<GetPlaywrightWorkspaceResult> InvokeAsync(GetPlaywrightWorkspaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPlaywrightWorkspaceResult>("azure-native:loadtestservice:getPlaywrightWorkspace", args ?? new GetPlaywrightWorkspaceArgs(), options.WithDefaults());

        /// <summary>
        /// Get a PlaywrightWorkspace
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Output<GetPlaywrightWorkspaceResult> Invoke(GetPlaywrightWorkspaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlaywrightWorkspaceResult>("azure-native:loadtestservice:getPlaywrightWorkspace", args ?? new GetPlaywrightWorkspaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a PlaywrightWorkspace
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Output<GetPlaywrightWorkspaceResult> Invoke(GetPlaywrightWorkspaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlaywrightWorkspaceResult>("azure-native:loadtestservice:getPlaywrightWorkspace", args ?? new GetPlaywrightWorkspaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlaywrightWorkspaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the PlaywrightWorkspace
        /// </summary>
        [Input("playwrightWorkspaceName", required: true)]
        public string PlaywrightWorkspaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPlaywrightWorkspaceArgs()
        {
        }
        public static new GetPlaywrightWorkspaceArgs Empty => new GetPlaywrightWorkspaceArgs();
    }

    public sealed class GetPlaywrightWorkspaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the PlaywrightWorkspace
        /// </summary>
        [Input("playwrightWorkspaceName", required: true)]
        public Input<string> PlaywrightWorkspaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPlaywrightWorkspaceInvokeArgs()
        {
        }
        public static new GetPlaywrightWorkspaceInvokeArgs Empty => new GetPlaywrightWorkspaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlaywrightWorkspaceResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// The workspace data plane URI.
        /// </summary>
        public readonly string DataplaneUri;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When enabled, this feature allows the workspace to use local auth (through service access token) for executing operations.
        /// </summary>
        public readonly string? LocalAuth;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the last resource operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This property sets the connection region for client workers to cloud-hosted browsers. If enabled, workers connect to browsers in the closest Azure region, ensuring lower latency. If disabled, workers connect to browsers in the Azure region in which the workspace was initially created.
        /// </summary>
        public readonly string? RegionalAffinity;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPlaywrightWorkspaceResult(
            string azureApiVersion,

            string dataplaneUri,

            string id,

            string? localAuth,

            string location,

            string name,

            string provisioningState,

            string? regionalAffinity,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            DataplaneUri = dataplaneUri;
            Id = id;
            LocalAuth = localAuth;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            RegionalAffinity = regionalAffinity;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
