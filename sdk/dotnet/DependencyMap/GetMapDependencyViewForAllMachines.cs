// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DependencyMap
{
    public static class GetMapDependencyViewForAllMachines
    {
        /// <summary>
        /// Get dependencies for all machines
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Task<GetMapDependencyViewForAllMachinesResult> InvokeAsync(GetMapDependencyViewForAllMachinesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMapDependencyViewForAllMachinesResult>("azure-native:dependencymap:getMapDependencyViewForAllMachines", args ?? new GetMapDependencyViewForAllMachinesArgs(), options.WithDefaults());

        /// <summary>
        /// Get dependencies for all machines
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Output<GetMapDependencyViewForAllMachinesResult> Invoke(GetMapDependencyViewForAllMachinesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMapDependencyViewForAllMachinesResult>("azure-native:dependencymap:getMapDependencyViewForAllMachines", args ?? new GetMapDependencyViewForAllMachinesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get dependencies for all machines
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// </summary>
        public static Output<GetMapDependencyViewForAllMachinesResult> Invoke(GetMapDependencyViewForAllMachinesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMapDependencyViewForAllMachinesResult>("azure-native:dependencymap:getMapDependencyViewForAllMachines", args ?? new GetMapDependencyViewForAllMachinesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMapDependencyViewForAllMachinesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for GetDependencyViewForAllMachines
        /// </summary>
        [Input("filters")]
        public Inputs.DependencyProcessFilter? Filters { get; set; }

        /// <summary>
        /// Maps resource name
        /// </summary>
        [Input("mapName", required: true)]
        public string MapName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMapDependencyViewForAllMachinesArgs()
        {
        }
        public static new GetMapDependencyViewForAllMachinesArgs Empty => new GetMapDependencyViewForAllMachinesArgs();
    }

    public sealed class GetMapDependencyViewForAllMachinesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for GetDependencyViewForAllMachines
        /// </summary>
        [Input("filters")]
        public Input<Inputs.DependencyProcessFilterArgs>? Filters { get; set; }

        /// <summary>
        /// Maps resource name
        /// </summary>
        [Input("mapName", required: true)]
        public Input<string> MapName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMapDependencyViewForAllMachinesInvokeArgs()
        {
        }
        public static new GetMapDependencyViewForAllMachinesInvokeArgs Empty => new GetMapDependencyViewForAllMachinesInvokeArgs();
    }


    [OutputType]
    public sealed class GetMapDependencyViewForAllMachinesResult
    {
        /// <summary>
        /// The end time of the operation.
        /// </summary>
        public readonly string? EndTime;
        /// <summary>
        /// Contains error details if status is Failed/Canceled.
        /// </summary>
        public readonly Outputs.ErrorDetailResponse? Error;
        /// <summary>
        /// The status URL of the asynchronous operation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The resource name of the operation status. It must match the last segment of 'id' field.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Properties for export dependencies. These should only be set if the status is Succeeded.
        /// </summary>
        public readonly Outputs.GetDependencyViewForAllMachinesResultPropertiesResponse Properties;
        /// <summary>
        /// The start time of the operation.
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// The overall arm status of the operation. It has one of the terminal states - Succeeded/Failed/Canceled.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetMapDependencyViewForAllMachinesResult(
            string? endTime,

            Outputs.ErrorDetailResponse? error,

            string? id,

            string? name,

            Outputs.GetDependencyViewForAllMachinesResultPropertiesResponse properties,

            string? startTime,

            string status)
        {
            EndTime = endTime;
            Error = error;
            Id = id;
            Name = name;
            Properties = properties;
            StartTime = startTime;
            Status = status;
        }
    }
}
