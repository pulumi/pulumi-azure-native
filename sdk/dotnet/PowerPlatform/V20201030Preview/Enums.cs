// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.PowerPlatform.V20201030Preview
{
    /// <summary>
    /// The kind (type) of Enterprise Policy.
    /// </summary>
    [EnumType]
    public readonly struct EnterprisePolicyKind : IEquatable<EnterprisePolicyKind>
    {
        private readonly string _value;

        private EnterprisePolicyKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnterprisePolicyKind Lockbox { get; } = new EnterprisePolicyKind("Lockbox");
        public static EnterprisePolicyKind PrivateEndpoint { get; } = new EnterprisePolicyKind("PrivateEndpoint");
        public static EnterprisePolicyKind Encryption { get; } = new EnterprisePolicyKind("Encryption");
        public static EnterprisePolicyKind NetworkInjection { get; } = new EnterprisePolicyKind("NetworkInjection");
        public static EnterprisePolicyKind Identity { get; } = new EnterprisePolicyKind("Identity");

        public static bool operator ==(EnterprisePolicyKind left, EnterprisePolicyKind right) => left.Equals(right);
        public static bool operator !=(EnterprisePolicyKind left, EnterprisePolicyKind right) => !left.Equals(right);

        public static explicit operator string(EnterprisePolicyKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnterprisePolicyKind other && Equals(other);
        public bool Equals(EnterprisePolicyKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The health status of the resource.
    /// </summary>
    [EnumType]
    public readonly struct HealthStatus : IEquatable<HealthStatus>
    {
        private readonly string _value;

        private HealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HealthStatus Undetermined { get; } = new HealthStatus("Undetermined");
        public static HealthStatus Healthy { get; } = new HealthStatus("Healthy");
        public static HealthStatus Unhealthy { get; } = new HealthStatus("Unhealthy");

        public static bool operator ==(HealthStatus left, HealthStatus right) => left.Equals(right);
        public static bool operator !=(HealthStatus left, HealthStatus right) => !left.Equals(right);

        public static explicit operator string(HealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthStatus other && Equals(other);
        public bool Equals(HealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the EnterprisePolicy. Currently, the only supported type is 'SystemAssigned', which implicitly creates an identity.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// lockbox configuration
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static State Enabled { get; } = new State("Enabled");
        public static State Disabled { get; } = new State("Disabled");
        public static State NotConfigured { get; } = new State("NotConfigured");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
