// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.PowerPlatform.V20201030Preview
{
    public static class GetEnterprisePolicy
    {
        /// <summary>
        /// Definition of the EnterprisePolicy.
        /// </summary>
        public static Task<GetEnterprisePolicyResult> InvokeAsync(GetEnterprisePolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEnterprisePolicyResult>("azure-native:powerplatform/v20201030preview:getEnterprisePolicy", args ?? new GetEnterprisePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of the EnterprisePolicy.
        /// </summary>
        public static Output<GetEnterprisePolicyResult> Invoke(GetEnterprisePolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEnterprisePolicyResult>("azure-native:powerplatform/v20201030preview:getEnterprisePolicy", args ?? new GetEnterprisePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnterprisePolicyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The EnterprisePolicy name.
        /// </summary>
        [Input("enterprisePolicyName", required: true)]
        public string EnterprisePolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEnterprisePolicyArgs()
        {
        }
    }

    public sealed class GetEnterprisePolicyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The EnterprisePolicy name.
        /// </summary>
        [Input("enterprisePolicyName", required: true)]
        public Input<string> EnterprisePolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEnterprisePolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEnterprisePolicyResult
    {
        /// <summary>
        /// The encryption settings for a configuration store.
        /// </summary>
        public readonly Outputs.PropertiesResponseEncryption? Encryption;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the EnterprisePolicy.
        /// </summary>
        public readonly Outputs.EnterprisePolicyIdentityResponse? Identity;
        /// <summary>
        /// The kind (type) of Enterprise Policy.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Settings concerning lockbox.
        /// </summary>
        public readonly Outputs.PropertiesResponseLockbox? Lockbox;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Settings concerning network injection.
        /// </summary>
        public readonly Outputs.PropertiesResponseNetworkInjection? NetworkInjection;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The internally assigned unique identifier of the resource.
        /// </summary>
        public readonly string SystemId;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEnterprisePolicyResult(
            Outputs.PropertiesResponseEncryption? encryption,

            string id,

            Outputs.EnterprisePolicyIdentityResponse? identity,

            string kind,

            string location,

            Outputs.PropertiesResponseLockbox? lockbox,

            string name,

            Outputs.PropertiesResponseNetworkInjection? networkInjection,

            Outputs.SystemDataResponse systemData,

            string systemId,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Encryption = encryption;
            Id = id;
            Identity = identity;
            Kind = kind;
            Location = location;
            Lockbox = lockbox;
            Name = name;
            NetworkInjection = networkInjection;
            SystemData = systemData;
            SystemId = systemId;
            Tags = tags;
            Type = type;
        }
    }
}
