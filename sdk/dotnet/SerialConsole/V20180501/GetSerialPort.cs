// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.SerialConsole.V20180501
{
    public static class GetSerialPort
    {
        /// <summary>
        /// Represents the serial port of the parent resource.
        /// </summary>
        public static Task<GetSerialPortResult> InvokeAsync(GetSerialPortArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSerialPortResult>("azure-nextgen:serialconsole/v20180501:getSerialPort", args ?? new GetSerialPortArgs(), options.WithVersion());
    }


    public sealed class GetSerialPortArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name, or subordinate path, for the parent of the serial port. For example: the name of the virtual machine.
        /// </summary>
        [Input("parentResource", required: true)]
        public string ParentResource { get; set; } = null!;

        /// <summary>
        /// The resource type of the parent resource.  For example: 'virtualMachines' or 'virtualMachineScaleSets'
        /// </summary>
        [Input("parentResourceType", required: true)]
        public string ParentResourceType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The namespace of the resource provider.
        /// </summary>
        [Input("resourceProviderNamespace", required: true)]
        public string ResourceProviderNamespace { get; set; } = null!;

        /// <summary>
        /// The name of the serial port to connect to.
        /// </summary>
        [Input("serialPort", required: true)]
        public string SerialPort { get; set; } = null!;

        public GetSerialPortArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSerialPortResult
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies whether the port is enabled for a serial console connection.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSerialPortResult(
            string id,

            string name,

            string? state,

            string type)
        {
            Id = id;
            Name = name;
            State = state;
            Type = type;
        }
    }
}
