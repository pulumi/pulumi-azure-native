// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DigitalTwins.Inputs
{

    /// <summary>
    /// Properties related to EventGrid.
    /// </summary>
    public sealed class EventGridArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// EventGrid secondary accesskey. Will be obfuscated during read.
        /// </summary>
        [Input("accessKey1", required: true)]
        public Input<string> AccessKey1 { get; set; } = null!;

        /// <summary>
        /// EventGrid secondary accesskey. Will be obfuscated during read.
        /// </summary>
        [Input("accessKey2")]
        public Input<string>? AccessKey2 { get; set; }

        /// <summary>
        /// Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified.
        /// </summary>
        [Input("authenticationType")]
        public InputUnion<string, Pulumi.AzureNative.DigitalTwins.AuthenticationType>? AuthenticationType { get; set; }

        /// <summary>
        /// Dead letter storage secret for key-based authentication. Will be obfuscated during read.
        /// </summary>
        [Input("deadLetterSecret")]
        public Input<string>? DeadLetterSecret { get; set; }

        /// <summary>
        /// Dead letter storage URL for identity-based authentication.
        /// </summary>
        [Input("deadLetterUri")]
        public Input<string>? DeadLetterUri { get; set; }

        /// <summary>
        /// The type of Digital Twins endpoint
        /// Expected value is 'EventGrid'.
        /// </summary>
        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        /// <summary>
        /// Managed identity properties for the endpoint.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedIdentityReferenceArgs>? Identity { get; set; }

        /// <summary>
        /// EventGrid Topic Endpoint.
        /// </summary>
        [Input("topicEndpoint", required: true)]
        public Input<string> TopicEndpoint { get; set; } = null!;

        public EventGridArgs()
        {
        }
        public static new EventGridArgs Empty => new EventGridArgs();
    }
}
