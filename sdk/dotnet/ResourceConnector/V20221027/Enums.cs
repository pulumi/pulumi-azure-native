// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ResourceConnector.V20221027
{
    /// <summary>
    /// Represents a supported Fabric/Infra. (AKSEdge etc...).
    /// </summary>
    [EnumType]
    public readonly struct Distro : IEquatable<Distro>
    {
        private readonly string _value;

        private Distro(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Distro AKSEdge { get; } = new Distro("AKSEdge");

        public static bool operator ==(Distro left, Distro right) => left.Equals(right);
        public static bool operator !=(Distro left, Distro right) => !left.Equals(right);

        public static explicit operator string(Distro value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Distro other && Equals(other);
        public bool Equals(Distro other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Information about the connected appliance.
    /// </summary>
    [EnumType]
    public readonly struct Provider : IEquatable<Provider>
    {
        private readonly string _value;

        private Provider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Provider VMWare { get; } = new Provider("VMWare");
        public static Provider HCI { get; } = new Provider("HCI");
        public static Provider SCVMM { get; } = new Provider("SCVMM");

        public static bool operator ==(Provider left, Provider right) => left.Equals(right);
        public static bool operator !=(Provider left, Provider right) => !left.Equals(right);

        public static explicit operator string(Provider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Provider other && Equals(other);
        public bool Equals(Provider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
