// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ResourceConnector.V20221027
{
    public static class ListApplianceKeys
    {
        /// <summary>
        /// Returns the cluster customer credentials for the dedicated appliance.
        /// </summary>
        public static Task<ListApplianceKeysResult> InvokeAsync(ListApplianceKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListApplianceKeysResult>("azure-native:resourceconnector/v20221027:listApplianceKeys", args ?? new ListApplianceKeysArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the cluster customer credentials for the dedicated appliance.
        /// </summary>
        public static Output<ListApplianceKeysResult> Invoke(ListApplianceKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListApplianceKeysResult>("azure-native:resourceconnector/v20221027:listApplianceKeys", args ?? new ListApplianceKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListApplianceKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Appliances name.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public ListApplianceKeysArgs()
        {
        }
        public static new ListApplianceKeysArgs Empty => new ListApplianceKeysArgs();
    }

    public sealed class ListApplianceKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Appliances name.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public ListApplianceKeysInvokeArgs()
        {
        }
        public static new ListApplianceKeysInvokeArgs Empty => new ListApplianceKeysInvokeArgs();
    }


    [OutputType]
    public sealed class ListApplianceKeysResult
    {
        /// <summary>
        /// Map of artifacts that contains a list of ArtifactProfile used to upload artifacts such as logs.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ArtifactProfileResponse> ArtifactProfiles;
        /// <summary>
        /// The list of appliance kubeconfigs.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplianceCredentialKubeconfigResponse> Kubeconfigs;
        /// <summary>
        /// Map of Customer User Public, Private SSH Keys and Certificate when available.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.SSHKeyResponse> SshKeys;

        [OutputConstructor]
        private ListApplianceKeysResult(
            ImmutableDictionary<string, Outputs.ArtifactProfileResponse> artifactProfiles,

            ImmutableArray<Outputs.ApplianceCredentialKubeconfigResponse> kubeconfigs,

            ImmutableDictionary<string, Outputs.SSHKeyResponse> sshKeys)
        {
            ArtifactProfiles = artifactProfiles;
            Kubeconfigs = kubeconfigs;
            SshKeys = sshKeys;
        }
    }
}
