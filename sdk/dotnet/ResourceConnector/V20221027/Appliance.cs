// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ResourceConnector.V20221027
{
    /// <summary>
    /// Appliances definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:resourceconnector/v20221027:Appliance")]
    public partial class Appliance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Represents a supported Fabric/Infra. (AKSEdge etc...).
        /// </summary>
        [Output("distro")]
        public Output<string?> Distro { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Contains infrastructure information about the Appliance
        /// </summary>
        [Output("infrastructureConfig")]
        public Output<Outputs.AppliancePropertiesResponseInfrastructureConfig?> InfrastructureConfig { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The current deployment or provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Certificates pair used to download MSI certificate from HIS. Can only be set once.
        /// </summary>
        [Output("publicKey")]
        public Output<string?> PublicKey { get; private set; } = null!;

        /// <summary>
        /// Applianceâ€™s health and state of connection to on-prem
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Version of the Appliance
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Appliance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Appliance(string name, ApplianceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:resourceconnector/v20221027:Appliance", name, args ?? new ApplianceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Appliance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:resourceconnector/v20221027:Appliance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:resourceconnector:Appliance"},
                    new global::Pulumi.Alias { Type = "azure-native:resourceconnector/v20211031preview:Appliance"},
                    new global::Pulumi.Alias { Type = "azure-native:resourceconnector/v20220415preview:Appliance"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Appliance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Appliance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Appliance(name, id, options);
        }
    }

    public sealed class ApplianceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents a supported Fabric/Infra. (AKSEdge etc...).
        /// </summary>
        [Input("distro")]
        public InputUnion<string, Pulumi.AzureNative.ResourceConnector.V20221027.Distro>? Distro { get; set; }

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Contains infrastructure information about the Appliance
        /// </summary>
        [Input("infrastructureConfig")]
        public Input<Inputs.AppliancePropertiesInfrastructureConfigArgs>? InfrastructureConfig { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Certificates pair used to download MSI certificate from HIS. Can only be set once.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Appliances name.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Version of the Appliance
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ApplianceArgs()
        {
            Distro = "AKSEdge";
        }
        public static new ApplianceArgs Empty => new ApplianceArgs();
    }
}
