// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ResourceConnector.V20211031Preview
{
    public static class GetAppliance
    {
        /// <summary>
        /// Appliances definition.
        /// </summary>
        public static Task<GetApplianceResult> InvokeAsync(GetApplianceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplianceResult>("azure-native:resourceconnector/v20211031preview:getAppliance", args ?? new GetApplianceArgs(), options.WithDefaults());

        /// <summary>
        /// Appliances definition.
        /// </summary>
        public static Output<GetApplianceResult> Invoke(GetApplianceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetApplianceResult>("azure-native:resourceconnector/v20211031preview:getAppliance", args ?? new GetApplianceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplianceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Appliances name.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetApplianceArgs()
        {
        }
    }

    public sealed class GetApplianceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Appliances name.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public GetApplianceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplianceResult
    {
        /// <summary>
        /// Represents a supported Fabric/Infra. (AKSEdge etc...).
        /// </summary>
        public readonly string? Distro;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity for the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// Contains infrastructure information about the Appliance
        /// </summary>
        public readonly Outputs.AppliancePropertiesResponseInfrastructureConfig? InfrastructureConfig;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The current deployment or provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Certificates pair used to download MSI certificate from HIS
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// Applianceâ€™s health and state of connection to on-prem
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the Appliance
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetApplianceResult(
            string? distro,

            string id,

            Outputs.IdentityResponse? identity,

            Outputs.AppliancePropertiesResponseInfrastructureConfig? infrastructureConfig,

            string location,

            string name,

            string provisioningState,

            string? publicKey,

            string status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string version)
        {
            Distro = distro;
            Id = id;
            Identity = identity;
            InfrastructureConfig = infrastructureConfig;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            PublicKey = publicKey;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
