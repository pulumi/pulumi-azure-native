// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.AlertsManagement.V20200804Preview
{
    /// <summary>
    /// The health alert resource.
    /// </summary>
    public partial class HealthAlert : Pulumi.CustomResource
    {
        /// <summary>
        /// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.HealthAlertActionResponse>> Actions { get; private set; } = null!;

        /// <summary>
        /// defines the specific alert criteria information.
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.HealthAlertCriteriaResponse> Criteria { get; private set; } = null!;

        /// <summary>
        /// the description of the health alert that will be included in the alert email.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// the flag that indicates whether the health alert is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Last time the rule was updated in ISO8601 format.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Azure resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// the list of resource id's that this health alert is scoped to.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Azure resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a HealthAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HealthAlert(string name, HealthAlertArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:alertsmanagement/v20200804preview:HealthAlert", name, args ?? new HealthAlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HealthAlert(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:alertsmanagement/v20200804preview:HealthAlert", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HealthAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HealthAlert Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new HealthAlert(name, id, options);
        }
    }

    public sealed class HealthAlertArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.HealthAlertActionArgs>? _actions;

        /// <summary>
        /// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        /// </summary>
        public InputList<Inputs.HealthAlertActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.HealthAlertActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// defines the specific alert criteria information.
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.HealthAlertCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// the description of the health alert that will be included in the alert email.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// the flag that indicates whether the health alert is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// the list of resource id's that this health alert is scoped to.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HealthAlertArgs()
        {
        }
    }
}
