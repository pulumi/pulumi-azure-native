// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AlertsManagement.V20230301.Inputs
{

    /// <summary>
    /// An Azure Prometheus alerting or recording rule.
    /// </summary>
    public sealed class PrometheusRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.PrometheusRuleGroupActionArgs>? _actions;

        /// <summary>
        /// Actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        /// </summary>
        public InputList<Inputs.PrometheusRuleGroupActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.PrometheusRuleGroupActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Alert rule name.
        /// </summary>
        [Input("alert")]
        public Input<string>? Alert { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// The annotations clause specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links. The annotation values can be templated.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Enable/disable rule.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The PromQL expression to evaluate. https://prometheus.io/docs/prometheus/latest/querying/basics/. Evaluated periodically as given by 'interval', and the result recorded as a new set of time series with the metric name as given by 'record'.
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// The amount of time alert must be active before firing.
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to add or overwrite before storing the result.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Recorded metrics name.
        /// </summary>
        [Input("record")]
        public Input<string>? Record { get; set; }

        /// <summary>
        /// Defines the configuration for resolving fired alerts. Only relevant for alerts.
        /// </summary>
        [Input("resolveConfiguration")]
        public Input<Inputs.PrometheusRuleResolveConfigurationArgs>? ResolveConfiguration { get; set; }

        /// <summary>
        /// The severity of the alerts fired by the rule. Must be between 0 and 4.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        public PrometheusRuleArgs()
        {
        }
        public static new PrometheusRuleArgs Empty => new PrometheusRuleArgs();
    }
}
