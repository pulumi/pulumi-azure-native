// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.AlertsManagement.V20190505Preview
{
    /// <summary>
    /// Indicates if the given action rule is enabled or disabled
    /// </summary>
    [EnumType]
    public readonly struct ActionRuleStatus : IEquatable<ActionRuleStatus>
    {
        private readonly string _value;

        private ActionRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionRuleStatus Enabled { get; } = new ActionRuleStatus("Enabled");
        public static ActionRuleStatus Disabled { get; } = new ActionRuleStatus("Disabled");

        public static bool operator ==(ActionRuleStatus left, ActionRuleStatus right) => left.Equals(right);
        public static bool operator !=(ActionRuleStatus left, ActionRuleStatus right) => !left.Equals(right);

        public static explicit operator string(ActionRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionRuleStatus other && Equals(other);
        public bool Equals(ActionRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates type of action rule
    /// </summary>
    [EnumType]
    public readonly struct ActionRuleType : IEquatable<ActionRuleType>
    {
        private readonly string _value;

        private ActionRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionRuleType Suppression { get; } = new ActionRuleType("Suppression");
        public static ActionRuleType ActionGroup { get; } = new ActionRuleType("ActionGroup");
        public static ActionRuleType Diagnostics { get; } = new ActionRuleType("Diagnostics");

        public static bool operator ==(ActionRuleType left, ActionRuleType right) => left.Equals(right);
        public static bool operator !=(ActionRuleType left, ActionRuleType right) => !left.Equals(right);

        public static explicit operator string(ActionRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionRuleType other && Equals(other);
        public bool Equals(ActionRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// operator for a given condition
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator EqualsValue { get; } = new Operator("Equals");
        public static Operator NotEquals { get; } = new Operator("NotEquals");
        public static Operator Contains { get; } = new Operator("Contains");
        public static Operator DoesNotContain { get; } = new Operator("DoesNotContain");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// type of target scope
    /// </summary>
    [EnumType]
    public readonly struct ScopeType : IEquatable<ScopeType>
    {
        private readonly string _value;

        private ScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScopeType ResourceGroup { get; } = new ScopeType("ResourceGroup");
        public static ScopeType Resource { get; } = new ScopeType("Resource");
        public static ScopeType Subscription { get; } = new ScopeType("Subscription");

        public static bool operator ==(ScopeType left, ScopeType right) => left.Equals(right);
        public static bool operator !=(ScopeType left, ScopeType right) => !left.Equals(right);

        public static explicit operator string(ScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScopeType other && Equals(other);
        public bool Equals(ScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies when the suppression should be applied
    /// </summary>
    [EnumType]
    public readonly struct SuppressionType : IEquatable<SuppressionType>
    {
        private readonly string _value;

        private SuppressionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SuppressionType Always { get; } = new SuppressionType("Always");
        public static SuppressionType Once { get; } = new SuppressionType("Once");
        public static SuppressionType Daily { get; } = new SuppressionType("Daily");
        public static SuppressionType Weekly { get; } = new SuppressionType("Weekly");
        public static SuppressionType Monthly { get; } = new SuppressionType("Monthly");

        public static bool operator ==(SuppressionType left, SuppressionType right) => left.Equals(right);
        public static bool operator !=(SuppressionType left, SuppressionType right) => !left.Equals(right);

        public static explicit operator string(SuppressionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SuppressionType other && Equals(other);
        public bool Equals(SuppressionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
