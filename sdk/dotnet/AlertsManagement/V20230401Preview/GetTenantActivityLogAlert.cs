// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AlertsManagement.V20230401Preview
{
    public static class GetTenantActivityLogAlert
    {
        /// <summary>
        /// Get Tenant Activity Log Alert rule.
        /// </summary>
        public static Task<GetTenantActivityLogAlertResult> InvokeAsync(GetTenantActivityLogAlertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTenantActivityLogAlertResult>("azure-native:alertsmanagement/v20230401preview:getTenantActivityLogAlert", args ?? new GetTenantActivityLogAlertArgs(), options.WithDefaults());

        /// <summary>
        /// Get Tenant Activity Log Alert rule.
        /// </summary>
        public static Output<GetTenantActivityLogAlertResult> Invoke(GetTenantActivityLogAlertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTenantActivityLogAlertResult>("azure-native:alertsmanagement/v20230401preview:getTenantActivityLogAlert", args ?? new GetTenantActivityLogAlertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTenantActivityLogAlertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Tenant Activity Log Alert rule.
        /// </summary>
        [Input("alertRuleName", required: true)]
        public string AlertRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the management group. The name is case insensitive.
        /// </summary>
        [Input("managementGroupName", required: true)]
        public string ManagementGroupName { get; set; } = null!;

        public GetTenantActivityLogAlertArgs()
        {
        }
        public static new GetTenantActivityLogAlertArgs Empty => new GetTenantActivityLogAlertArgs();
    }

    public sealed class GetTenantActivityLogAlertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Tenant Activity Log Alert rule.
        /// </summary>
        [Input("alertRuleName", required: true)]
        public Input<string> AlertRuleName { get; set; } = null!;

        /// <summary>
        /// The name of the management group. The name is case insensitive.
        /// </summary>
        [Input("managementGroupName", required: true)]
        public Input<string> ManagementGroupName { get; set; } = null!;

        public GetTenantActivityLogAlertInvokeArgs()
        {
        }
        public static new GetTenantActivityLogAlertInvokeArgs Empty => new GetTenantActivityLogAlertInvokeArgs();
    }


    [OutputType]
    public sealed class GetTenantActivityLogAlertResult
    {
        /// <summary>
        /// The actions that will activate when the condition is met.
        /// </summary>
        public readonly Outputs.ActionListResponse Actions;
        /// <summary>
        /// The condition that will cause this alert to activate.
        /// </summary>
        public readonly Outputs.AlertRuleAllOfConditionResponse Condition;
        /// <summary>
        /// A description of this Activity Log Alert rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The resource Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be 'global'.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The tenant GUID. Must be provided for tenant-level and management group events rules.
        /// </summary>
        public readonly string? TenantScope;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTenantActivityLogAlertResult(
            Outputs.ActionListResponse actions,

            Outputs.AlertRuleAllOfConditionResponse condition,

            string? description,

            bool? enabled,

            string id,

            string? location,

            string name,

            ImmutableArray<string> scopes,

            ImmutableDictionary<string, string>? tags,

            string? tenantScope,

            string type)
        {
            Actions = actions;
            Condition = condition;
            Description = description;
            Enabled = enabled;
            Id = id;
            Location = location;
            Name = name;
            Scopes = scopes;
            Tags = tags;
            TenantScope = tenantScope;
            Type = type;
        }
    }
}
