// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AlertsManagement
{
    /// <summary>
    /// Action that should be applied.
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType AddActionGroups { get; } = new ActionType("AddActionGroups");
        public static ActionType RemoveAllActionGroups { get; } = new ActionType("RemoveAllActionGroups");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The alert rule state.
    /// </summary>
    [EnumType]
    public readonly struct AlertRuleState : IEquatable<AlertRuleState>
    {
        private readonly string _value;

        private AlertRuleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertRuleState Enabled { get; } = new AlertRuleState("Enabled");
        public static AlertRuleState Disabled { get; } = new AlertRuleState("Disabled");

        public static bool operator ==(AlertRuleState left, AlertRuleState right) => left.Equals(right);
        public static bool operator !=(AlertRuleState left, AlertRuleState right) => !left.Equals(right);

        public static explicit operator string(AlertRuleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertRuleState other && Equals(other);
        public bool Equals(AlertRuleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Days of week.
    /// </summary>
    [EnumType]
    public readonly struct DaysOfWeek : IEquatable<DaysOfWeek>
    {
        private readonly string _value;

        private DaysOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DaysOfWeek Sunday { get; } = new DaysOfWeek("Sunday");
        public static DaysOfWeek Monday { get; } = new DaysOfWeek("Monday");
        public static DaysOfWeek Tuesday { get; } = new DaysOfWeek("Tuesday");
        public static DaysOfWeek Wednesday { get; } = new DaysOfWeek("Wednesday");
        public static DaysOfWeek Thursday { get; } = new DaysOfWeek("Thursday");
        public static DaysOfWeek Friday { get; } = new DaysOfWeek("Friday");
        public static DaysOfWeek Saturday { get; } = new DaysOfWeek("Saturday");

        public static bool operator ==(DaysOfWeek left, DaysOfWeek right) => left.Equals(right);
        public static bool operator !=(DaysOfWeek left, DaysOfWeek right) => !left.Equals(right);

        public static explicit operator string(DaysOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DaysOfWeek other && Equals(other);
        public bool Equals(DaysOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Field for a given condition.
    /// </summary>
    [EnumType]
    public readonly struct Field : IEquatable<Field>
    {
        private readonly string _value;

        private Field(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Field Severity { get; } = new Field("Severity");
        public static Field MonitorService { get; } = new Field("MonitorService");
        public static Field MonitorCondition { get; } = new Field("MonitorCondition");
        public static Field SignalType { get; } = new Field("SignalType");
        public static Field TargetResourceType { get; } = new Field("TargetResourceType");
        public static Field TargetResource { get; } = new Field("TargetResource");
        public static Field TargetResourceGroup { get; } = new Field("TargetResourceGroup");
        public static Field AlertRuleId { get; } = new Field("AlertRuleId");
        public static Field AlertRuleName { get; } = new Field("AlertRuleName");
        public static Field Description { get; } = new Field("Description");
        public static Field AlertContext { get; } = new Field("AlertContext");

        public static bool operator ==(Field left, Field right) => left.Equals(right);
        public static bool operator !=(Field left, Field right) => !left.Equals(right);

        public static explicit operator string(Field value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Field other && Equals(other);
        public bool Equals(Field other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operator for a given condition.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator EqualsValue { get; } = new Operator("Equals");
        public static Operator NotEquals { get; } = new Operator("NotEquals");
        public static Operator Contains { get; } = new Operator("Contains");
        public static Operator DoesNotContain { get; } = new Operator("DoesNotContain");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies when the recurrence should be applied.
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceType : IEquatable<RecurrenceType>
    {
        private readonly string _value;

        private RecurrenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecurrenceType Daily { get; } = new RecurrenceType("Daily");
        public static RecurrenceType Weekly { get; } = new RecurrenceType("Weekly");
        public static RecurrenceType Monthly { get; } = new RecurrenceType("Monthly");

        public static bool operator ==(RecurrenceType left, RecurrenceType right) => left.Equals(right);
        public static bool operator !=(RecurrenceType left, RecurrenceType right) => !left.Equals(right);

        public static explicit operator string(RecurrenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceType other && Equals(other);
        public bool Equals(RecurrenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The alert rule severity.
    /// </summary>
    [EnumType]
    public readonly struct Severity : IEquatable<Severity>
    {
        private readonly string _value;

        private Severity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Severity Sev0 { get; } = new Severity("Sev0");
        public static Severity Sev1 { get; } = new Severity("Sev1");
        public static Severity Sev2 { get; } = new Severity("Sev2");
        public static Severity Sev3 { get; } = new Severity("Sev3");
        public static Severity Sev4 { get; } = new Severity("Sev4");

        public static bool operator ==(Severity left, Severity right) => left.Equals(right);
        public static bool operator !=(Severity left, Severity right) => !left.Equals(right);

        public static explicit operator string(Severity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Severity other && Equals(other);
        public bool Equals(Severity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
