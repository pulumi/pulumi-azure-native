// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AlertsManagement.Outputs
{

    /// <summary>
    /// An Azure Prometheus alerting or recording rule.
    /// </summary>
    [OutputType]
    public sealed class PrometheusRuleResponse
    {
        /// <summary>
        /// Actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrometheusRuleGroupActionResponse> Actions;
        /// <summary>
        /// Alert rule name.
        /// </summary>
        public readonly string? Alert;
        /// <summary>
        /// The annotations clause specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links. The annotation values can be templated.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Annotations;
        /// <summary>
        /// Enable/disable rule.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The PromQL expression to evaluate. https://prometheus.io/docs/prometheus/latest/querying/basics/. Evaluated periodically as given by 'interval', and the result recorded as a new set of time series with the metric name as given by 'record'.
        /// </summary>
        public readonly string Expression;
        /// <summary>
        /// The amount of time alert must be active before firing.
        /// </summary>
        public readonly string? For;
        /// <summary>
        /// Labels to add or overwrite before storing the result.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// Recorded metrics name.
        /// </summary>
        public readonly string? Record;
        /// <summary>
        /// Defines the configuration for resolving fired alerts. Only relevant for alerts.
        /// </summary>
        public readonly Outputs.PrometheusRuleResolveConfigurationResponse? ResolveConfiguration;
        /// <summary>
        /// The severity of the alerts fired by the rule. Must be between 0 and 4.
        /// </summary>
        public readonly int? Severity;

        [OutputConstructor]
        private PrometheusRuleResponse(
            ImmutableArray<Outputs.PrometheusRuleGroupActionResponse> actions,

            string? alert,

            ImmutableDictionary<string, string>? annotations,

            bool? enabled,

            string expression,

            string? @for,

            ImmutableDictionary<string, string>? labels,

            string? record,

            Outputs.PrometheusRuleResolveConfigurationResponse? resolveConfiguration,

            int? severity)
        {
            Actions = actions;
            Alert = alert;
            Annotations = annotations;
            Enabled = enabled;
            Expression = expression;
            For = @for;
            Labels = labels;
            Record = record;
            ResolveConfiguration = resolveConfiguration;
            Severity = severity;
        }
    }
}
