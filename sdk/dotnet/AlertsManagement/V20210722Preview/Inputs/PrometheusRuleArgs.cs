// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AlertsManagement.V20210722Preview.Inputs
{

    public sealed class PrometheusRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.PrometheusRuleGroupActionArgs>? _actions;

        /// <summary>
        /// The array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved. Only relevant for alerts.
        /// </summary>
        public InputList<Inputs.PrometheusRuleGroupActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.PrometheusRuleGroupActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// the name of the alert rule.
        /// </summary>
        [Input("alert")]
        public Input<string>? Alert { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// annotations for rule group. Only relevant for alerts.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// the flag that indicates whether the Prometheus rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// the expression to run for the rule.
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// the amount of time alert must be active before firing. Only relevant for alerts.
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// labels for rule group. Only relevant for alerts.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// the name of the recording rule.
        /// </summary>
        [Input("record")]
        public Input<string>? Record { get; set; }

        /// <summary>
        /// defines the configuration for resolving fired alerts. Only relevant for alerts.
        /// </summary>
        [Input("resolveConfiguration")]
        public Input<Inputs.PrometheusRuleResolveConfigurationArgs>? ResolveConfiguration { get; set; }

        /// <summary>
        /// the severity of the alerts fired by the rule. Only relevant for alerts.
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        public PrometheusRuleArgs()
        {
        }
        public static new PrometheusRuleArgs Empty => new PrometheusRuleArgs();
    }
}
