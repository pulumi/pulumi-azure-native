// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MySQLDiscovery
{
    /// <summary>
    /// mysql server edition.
    /// </summary>
    [EnumType]
    public readonly struct Edition : IEquatable<Edition>
    {
        private readonly string _value;

        private Edition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Edition Community { get; } = new Edition("Community");
        public static Edition Enterprise { get; } = new Edition("Enterprise");

        public static bool operator ==(Edition left, Edition right) => left.Equals(right);
        public static bool operator !=(Edition left, Edition right) => !left.Equals(right);

        public static explicit operator string(Edition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Edition other && Equals(other);
        public bool Equals(Edition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the provisioning state.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Unknown { get; } = new ProvisioningState("Unknown");
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState Creating { get; } = new ProvisioningState("Creating");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// mysql version support status.
    /// </summary>
    [EnumType]
    public readonly struct SupportStatus : IEquatable<SupportStatus>
    {
        private readonly string _value;

        private SupportStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportStatus OutOfSupport { get; } = new SupportStatus("OutOfSupport");
        public static SupportStatus Extended { get; } = new SupportStatus("Extended");
        public static SupportStatus Mainstream { get; } = new SupportStatus("Mainstream");

        public static bool operator ==(SupportStatus left, SupportStatus right) => left.Equals(right);
        public static bool operator !=(SupportStatus left, SupportStatus right) => !left.Equals(right);

        public static explicit operator string(SupportStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportStatus other && Equals(other);
        public bool Equals(SupportStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
