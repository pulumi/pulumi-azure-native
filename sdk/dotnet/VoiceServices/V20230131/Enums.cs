// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.VoiceServices.V20230131
{
    /// <summary>
    /// The scope at which the auto-generated domain name can be re-used
    /// </summary>
    [EnumType]
    public readonly struct AutoGeneratedDomainNameLabelScope : IEquatable<AutoGeneratedDomainNameLabelScope>
    {
        private readonly string _value;

        private AutoGeneratedDomainNameLabelScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoGeneratedDomainNameLabelScope TenantReuse { get; } = new AutoGeneratedDomainNameLabelScope("TenantReuse");
        public static AutoGeneratedDomainNameLabelScope SubscriptionReuse { get; } = new AutoGeneratedDomainNameLabelScope("SubscriptionReuse");
        public static AutoGeneratedDomainNameLabelScope ResourceGroupReuse { get; } = new AutoGeneratedDomainNameLabelScope("ResourceGroupReuse");
        public static AutoGeneratedDomainNameLabelScope NoReuse { get; } = new AutoGeneratedDomainNameLabelScope("NoReuse");

        public static bool operator ==(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => left.Equals(right);
        public static bool operator !=(AutoGeneratedDomainNameLabelScope left, AutoGeneratedDomainNameLabelScope right) => !left.Equals(right);

        public static explicit operator string(AutoGeneratedDomainNameLabelScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoGeneratedDomainNameLabelScope other && Equals(other);
        public bool Equals(AutoGeneratedDomainNameLabelScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Available platform types.
    /// </summary>
    [EnumType]
    public readonly struct CommunicationsPlatform : IEquatable<CommunicationsPlatform>
    {
        private readonly string _value;

        private CommunicationsPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CommunicationsPlatform OperatorConnect { get; } = new CommunicationsPlatform("OperatorConnect");
        public static CommunicationsPlatform TeamsPhoneMobile { get; } = new CommunicationsPlatform("TeamsPhoneMobile");

        public static bool operator ==(CommunicationsPlatform left, CommunicationsPlatform right) => left.Equals(right);
        public static bool operator !=(CommunicationsPlatform left, CommunicationsPlatform right) => !left.Equals(right);

        public static explicit operator string(CommunicationsPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CommunicationsPlatform other && Equals(other);
        public bool Equals(CommunicationsPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How to connect back to the operator network, e.g. MAPS
    /// </summary>
    [EnumType]
    public readonly struct Connectivity : IEquatable<Connectivity>
    {
        private readonly string _value;

        private Connectivity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This deployment connects to the operator network using a Public IP address, e.g. when using MAPS
        /// </summary>
        public static Connectivity PublicAddress { get; } = new Connectivity("PublicAddress");

        public static bool operator ==(Connectivity left, Connectivity right) => left.Equals(right);
        public static bool operator !=(Connectivity left, Connectivity right) => !left.Equals(right);

        public static explicit operator string(Connectivity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Connectivity other && Equals(other);
        public bool Equals(Connectivity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How to handle 911 calls
    /// </summary>
    [EnumType]
    public readonly struct E911Type : IEquatable<E911Type>
    {
        private readonly string _value;

        private E911Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Emergency calls are not handled different from other calls
        /// </summary>
        public static E911Type Standard { get; } = new E911Type("Standard");
        /// <summary>
        /// Emergency calls are routed directly to the ESRP
        /// </summary>
        public static E911Type DirectToEsrp { get; } = new E911Type("DirectToEsrp");

        public static bool operator ==(E911Type left, E911Type right) => left.Equals(right);
        public static bool operator !=(E911Type left, E911Type right) => !left.Equals(right);

        public static explicit operator string(E911Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is E911Type other && Equals(other);
        public bool Equals(E911Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The voice codecs expected for communication with Teams.
    /// </summary>
    [EnumType]
    public readonly struct TeamsCodecs : IEquatable<TeamsCodecs>
    {
        private readonly string _value;

        private TeamsCodecs(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TeamsCodecs PCMA { get; } = new TeamsCodecs("PCMA");
        public static TeamsCodecs PCMU { get; } = new TeamsCodecs("PCMU");
        public static TeamsCodecs G722 { get; } = new TeamsCodecs("G722");
        public static TeamsCodecs G722_2 { get; } = new TeamsCodecs("G722_2");
        public static TeamsCodecs SILK_8 { get; } = new TeamsCodecs("SILK_8");
        public static TeamsCodecs SILK_16 { get; } = new TeamsCodecs("SILK_16");

        public static bool operator ==(TeamsCodecs left, TeamsCodecs right) => left.Equals(right);
        public static bool operator !=(TeamsCodecs left, TeamsCodecs right) => !left.Equals(right);

        public static explicit operator string(TeamsCodecs value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TeamsCodecs other && Equals(other);
        public bool Equals(TeamsCodecs other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Purpose of this test line, e.g. automated or manual testing
    /// </summary>
    [EnumType]
    public readonly struct TestLinePurpose : IEquatable<TestLinePurpose>
    {
        private readonly string _value;

        private TestLinePurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TestLinePurpose Manual { get; } = new TestLinePurpose("Manual");
        public static TestLinePurpose Automated { get; } = new TestLinePurpose("Automated");

        public static bool operator ==(TestLinePurpose left, TestLinePurpose right) => left.Equals(right);
        public static bool operator !=(TestLinePurpose left, TestLinePurpose right) => !left.Equals(right);

        public static explicit operator string(TestLinePurpose value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestLinePurpose other && Equals(other);
        public bool Equals(TestLinePurpose other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
