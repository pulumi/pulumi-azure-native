// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Portal
{
    public static class GetTenantConfiguration
    {
        /// <summary>
        /// Gets the tenant configuration.
        /// Azure REST API version: 2020-09-01-preview.
        /// </summary>
        public static Task<GetTenantConfigurationResult> InvokeAsync(GetTenantConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTenantConfigurationResult>("azure-native:portal:getTenantConfiguration", args ?? new GetTenantConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the tenant configuration.
        /// Azure REST API version: 2020-09-01-preview.
        /// </summary>
        public static Output<GetTenantConfigurationResult> Invoke(GetTenantConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTenantConfigurationResult>("azure-native:portal:getTenantConfiguration", args ?? new GetTenantConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTenantConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The configuration name. Value must be 'default'
        /// </summary>
        [Input("configurationName", required: true)]
        public string ConfigurationName { get; set; } = null!;

        public GetTenantConfigurationArgs()
        {
        }
        public static new GetTenantConfigurationArgs Empty => new GetTenantConfigurationArgs();
    }

    public sealed class GetTenantConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The configuration name. Value must be 'default'
        /// </summary>
        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        public GetTenantConfigurationInvokeArgs()
        {
        }
        public static new GetTenantConfigurationInvokeArgs Empty => new GetTenantConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetTenantConfigurationResult
    {
        /// <summary>
        /// When flag is set to true Markdown tile will require external storage configuration (URI). The inline content configuration will be prohibited.
        /// </summary>
        public readonly bool? EnforcePrivateMarkdownStorage;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTenantConfigurationResult(
            bool? enforcePrivateMarkdownStorage,

            string id,

            string name,

            string type)
        {
            EnforcePrivateMarkdownStorage = enforcePrivateMarkdownStorage;
            Id = id;
            Name = name;
            Type = type;
        }
    }
}
