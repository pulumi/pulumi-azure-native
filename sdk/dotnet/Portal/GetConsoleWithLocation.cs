// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Portal
{
    public static class GetConsoleWithLocation
    {
        /// <summary>
        /// Gets the console for the user.
        /// Azure REST API version: 2018-10-01.
        /// </summary>
        public static Task<GetConsoleWithLocationResult> InvokeAsync(GetConsoleWithLocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConsoleWithLocationResult>("azure-native:portal:getConsoleWithLocation", args ?? new GetConsoleWithLocationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the console for the user.
        /// Azure REST API version: 2018-10-01.
        /// </summary>
        public static Output<GetConsoleWithLocationResult> Invoke(GetConsoleWithLocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConsoleWithLocationResult>("azure-native:portal:getConsoleWithLocation", args ?? new GetConsoleWithLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConsoleWithLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the console
        /// </summary>
        [Input("consoleName", required: true)]
        public string ConsoleName { get; set; } = null!;

        /// <summary>
        /// The provider location
        /// </summary>
        [Input("location", required: true)]
        public string Location { get; set; } = null!;

        public GetConsoleWithLocationArgs()
        {
        }
        public static new GetConsoleWithLocationArgs Empty => new GetConsoleWithLocationArgs();
    }

    public sealed class GetConsoleWithLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the console
        /// </summary>
        [Input("consoleName", required: true)]
        public Input<string> ConsoleName { get; set; } = null!;

        /// <summary>
        /// The provider location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        public GetConsoleWithLocationInvokeArgs()
        {
        }
        public static new GetConsoleWithLocationInvokeArgs Empty => new GetConsoleWithLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetConsoleWithLocationResult
    {
        /// <summary>
        /// Cloud shell console properties.
        /// </summary>
        public readonly Outputs.ConsolePropertiesResponse Properties;

        [OutputConstructor]
        private GetConsoleWithLocationResult(Outputs.ConsolePropertiesResponse properties)
        {
            Properties = properties;
        }
    }
}
