// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20220301Preview
{
    public static class GetBuildServiceResourceUploadUrl
    {
        /// <summary>
        /// Get an resource upload URL for build service, which may be artifacts or source archive.
        /// </summary>
        public static Task<GetBuildServiceResourceUploadUrlResult> InvokeAsync(GetBuildServiceResourceUploadUrlArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBuildServiceResourceUploadUrlResult>("azure-native:appplatform/v20220301preview:getBuildServiceResourceUploadUrl", args ?? new GetBuildServiceResourceUploadUrlArgs(), options.WithDefaults());

        /// <summary>
        /// Get an resource upload URL for build service, which may be artifacts or source archive.
        /// </summary>
        public static Output<GetBuildServiceResourceUploadUrlResult> Invoke(GetBuildServiceResourceUploadUrlInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBuildServiceResourceUploadUrlResult>("azure-native:appplatform/v20220301preview:getBuildServiceResourceUploadUrl", args ?? new GetBuildServiceResourceUploadUrlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBuildServiceResourceUploadUrlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the build service resource.
        /// </summary>
        [Input("buildServiceName", required: true)]
        public string BuildServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Service resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetBuildServiceResourceUploadUrlArgs()
        {
        }
        public static new GetBuildServiceResourceUploadUrlArgs Empty => new GetBuildServiceResourceUploadUrlArgs();
    }

    public sealed class GetBuildServiceResourceUploadUrlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the build service resource.
        /// </summary>
        [Input("buildServiceName", required: true)]
        public Input<string> BuildServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Service resource.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetBuildServiceResourceUploadUrlInvokeArgs()
        {
        }
        public static new GetBuildServiceResourceUploadUrlInvokeArgs Empty => new GetBuildServiceResourceUploadUrlInvokeArgs();
    }


    [OutputType]
    public sealed class GetBuildServiceResourceUploadUrlResult
    {
        /// <summary>
        /// Source relative path
        /// </summary>
        public readonly string? RelativePath;
        /// <summary>
        /// Upload URL
        /// </summary>
        public readonly string? UploadUrl;

        [OutputConstructor]
        private GetBuildServiceResourceUploadUrlResult(
            string? relativePath,

            string? uploadUrl)
        {
            RelativePath = relativePath;
            UploadUrl = uploadUrl;
        }
    }
}
