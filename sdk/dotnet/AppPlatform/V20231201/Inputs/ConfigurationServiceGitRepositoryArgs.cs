// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20231201.Inputs
{

    /// <summary>
    /// Git repository property payload for Application Configuration Service
    /// </summary>
    public sealed class ConfigurationServiceGitRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Resource Id of CA certificate for https URL of Git repository.
        /// </summary>
        [Input("caCertResourceId")]
        public Input<string>? CaCertResourceId { get; set; }

        /// <summary>
        /// Git libraries used to support various repository providers
        /// </summary>
        [Input("gitImplementation")]
        public InputUnion<string, Pulumi.AzureNative.AppPlatform.V20231201.GitImplementation>? GitImplementation { get; set; }

        /// <summary>
        /// Public sshKey of git repository.
        /// </summary>
        [Input("hostKey")]
        public Input<string>? HostKey { get; set; }

        /// <summary>
        /// SshKey algorithm of git repository.
        /// </summary>
        [Input("hostKeyAlgorithm")]
        public Input<string>? HostKeyAlgorithm { get; set; }

        /// <summary>
        /// Label of the repository
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// Name of the repository
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Password of git repository basic auth.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("patterns", required: true)]
        private InputList<string>? _patterns;

        /// <summary>
        /// Collection of patterns of the repository
        /// </summary>
        public InputList<string> Patterns
        {
            get => _patterns ?? (_patterns = new InputList<string>());
            set => _patterns = value;
        }

        /// <summary>
        /// Private sshKey algorithm of git repository.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        [Input("searchPaths")]
        private InputList<string>? _searchPaths;

        /// <summary>
        /// Searching path of the repository
        /// </summary>
        public InputList<string> SearchPaths
        {
            get => _searchPaths ?? (_searchPaths = new InputList<string>());
            set => _searchPaths = value;
        }

        /// <summary>
        /// Strict host key checking or not.
        /// </summary>
        [Input("strictHostKeyChecking")]
        public Input<bool>? StrictHostKeyChecking { get; set; }

        /// <summary>
        /// URI of the repository
        /// </summary>
        [Input("uri", required: true)]
        public Input<string> Uri { get; set; } = null!;

        /// <summary>
        /// Username of git repository basic auth.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ConfigurationServiceGitRepositoryArgs()
        {
        }
        public static new ConfigurationServiceGitRepositoryArgs Empty => new ConfigurationServiceGitRepositoryArgs();
    }
}
