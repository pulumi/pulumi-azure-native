// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20231201.Outputs
{

    /// <summary>
    /// App resource properties payload
    /// </summary>
    [OutputType]
    public sealed class AppResourcePropertiesResponse
    {
        /// <summary>
        /// Collection of addons
        /// </summary>
        public readonly ImmutableDictionary<string, object>? AddonConfigs;
        /// <summary>
        /// List of custom persistent disks
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomPersistentDiskResourceResponse> CustomPersistentDisks;
        /// <summary>
        /// Indicate if end to end TLS is enabled.
        /// </summary>
        public readonly bool? EnableEndToEndTLS;
        /// <summary>
        /// Fully qualified dns Name.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Indicate if only https is allowed.
        /// </summary>
        public readonly bool? HttpsOnly;
        /// <summary>
        /// App ingress settings payload.
        /// </summary>
        public readonly Outputs.IngressSettingsResponse? IngressSettings;
        /// <summary>
        /// Collection of loaded certificates
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadedCertificateResponse> LoadedCertificates;
        /// <summary>
        /// Persistent disk settings
        /// </summary>
        public readonly Outputs.PersistentDiskResponse? PersistentDisk;
        /// <summary>
        /// Provisioning state of the App
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Indicates whether the App exposes public endpoint
        /// </summary>
        public readonly bool? Public;
        /// <summary>
        /// Temporary disk settings
        /// </summary>
        public readonly Outputs.TemporaryDiskResponse? TemporaryDisk;
        /// <summary>
        /// URL of the App
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Additional App settings in vnet injection instance
        /// </summary>
        public readonly Outputs.AppVNetAddonsResponse? VnetAddons;

        [OutputConstructor]
        private AppResourcePropertiesResponse(
            ImmutableDictionary<string, object>? addonConfigs,

            ImmutableArray<Outputs.CustomPersistentDiskResourceResponse> customPersistentDisks,

            bool? enableEndToEndTLS,

            string fqdn,

            bool? httpsOnly,

            Outputs.IngressSettingsResponse? ingressSettings,

            ImmutableArray<Outputs.LoadedCertificateResponse> loadedCertificates,

            Outputs.PersistentDiskResponse? persistentDisk,

            string provisioningState,

            bool? @public,

            Outputs.TemporaryDiskResponse? temporaryDisk,

            string url,

            Outputs.AppVNetAddonsResponse? vnetAddons)
        {
            AddonConfigs = addonConfigs;
            CustomPersistentDisks = customPersistentDisks;
            EnableEndToEndTLS = enableEndToEndTLS;
            Fqdn = fqdn;
            HttpsOnly = httpsOnly;
            IngressSettings = ingressSettings;
            LoadedCertificates = loadedCertificates;
            PersistentDisk = persistentDisk;
            ProvisioningState = provisioningState;
            Public = @public;
            TemporaryDisk = temporaryDisk;
            Url = url;
            VnetAddons = vnetAddons;
        }
    }
}
