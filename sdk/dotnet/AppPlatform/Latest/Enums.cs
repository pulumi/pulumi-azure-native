// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.AppPlatform.Latest
{
    /// <summary>
    /// Type of the managed identity
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");
        public static ManagedIdentityType SystemAssigned_UserAssigned { get; } = new ManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime version
    /// </summary>
    [EnumType]
    public readonly struct RuntimeVersion : IEquatable<RuntimeVersion>
    {
        private readonly string _value;

        private RuntimeVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuntimeVersion Java_8 { get; } = new RuntimeVersion("Java_8");
        public static RuntimeVersion Java_11 { get; } = new RuntimeVersion("Java_11");
        public static RuntimeVersion NetCore_31 { get; } = new RuntimeVersion("NetCore_31");

        public static bool operator ==(RuntimeVersion left, RuntimeVersion right) => left.Equals(right);
        public static bool operator !=(RuntimeVersion left, RuntimeVersion right) => !left.Equals(right);

        public static explicit operator string(RuntimeVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeVersion other && Equals(other);
        public bool Equals(RuntimeVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the source uploaded
    /// </summary>
    [EnumType]
    public readonly struct UserSourceType : IEquatable<UserSourceType>
    {
        private readonly string _value;

        private UserSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSourceType Jar { get; } = new UserSourceType("Jar");
        public static UserSourceType NetCoreZip { get; } = new UserSourceType("NetCoreZip");
        public static UserSourceType Source { get; } = new UserSourceType("Source");

        public static bool operator ==(UserSourceType left, UserSourceType right) => left.Equals(right);
        public static bool operator !=(UserSourceType left, UserSourceType right) => !left.Equals(right);

        public static explicit operator string(UserSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSourceType other && Equals(other);
        public bool Equals(UserSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
