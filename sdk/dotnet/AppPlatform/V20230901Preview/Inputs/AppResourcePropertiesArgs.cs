// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20230901Preview.Inputs
{

    /// <summary>
    /// App resource properties payload
    /// </summary>
    public sealed class AppResourcePropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("addonConfigs")]
        private InputMap<object>? _addonConfigs;

        /// <summary>
        /// Collection of addons
        /// </summary>
        public InputMap<object> AddonConfigs
        {
            get => _addonConfigs ?? (_addonConfigs = new InputMap<object>());
            set => _addonConfigs = value;
        }

        [Input("customPersistentDisks")]
        private InputList<Inputs.CustomPersistentDiskResourceArgs>? _customPersistentDisks;

        /// <summary>
        /// List of custom persistent disks
        /// </summary>
        public InputList<Inputs.CustomPersistentDiskResourceArgs> CustomPersistentDisks
        {
            get => _customPersistentDisks ?? (_customPersistentDisks = new InputList<Inputs.CustomPersistentDiskResourceArgs>());
            set => _customPersistentDisks = value;
        }

        /// <summary>
        /// Indicate if end to end TLS is enabled.
        /// </summary>
        [Input("enableEndToEndTLS")]
        public Input<bool>? EnableEndToEndTLS { get; set; }

        /// <summary>
        /// Indicate if only https is allowed.
        /// </summary>
        [Input("httpsOnly")]
        public Input<bool>? HttpsOnly { get; set; }

        /// <summary>
        /// App ingress settings payload.
        /// </summary>
        [Input("ingressSettings")]
        public Input<Inputs.IngressSettingsArgs>? IngressSettings { get; set; }

        [Input("loadedCertificates")]
        private InputList<Inputs.LoadedCertificateArgs>? _loadedCertificates;

        /// <summary>
        /// Collection of loaded certificates
        /// </summary>
        public InputList<Inputs.LoadedCertificateArgs> LoadedCertificates
        {
            get => _loadedCertificates ?? (_loadedCertificates = new InputList<Inputs.LoadedCertificateArgs>());
            set => _loadedCertificates = value;
        }

        /// <summary>
        /// Persistent disk settings
        /// </summary>
        [Input("persistentDisk")]
        public Input<Inputs.PersistentDiskArgs>? PersistentDisk { get; set; }

        /// <summary>
        /// Indicates whether the App exposes public endpoint
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        [Input("secrets")]
        private InputList<Inputs.SecretArgs>? _secrets;

        /// <summary>
        /// Collection of auth secrets
        /// </summary>
        public InputList<Inputs.SecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.SecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// Temporary disk settings
        /// </summary>
        [Input("temporaryDisk")]
        public Input<Inputs.TemporaryDiskArgs>? TemporaryDisk { get; set; }

        /// <summary>
        /// Additional App settings in vnet injection instance
        /// </summary>
        [Input("vnetAddons")]
        public Input<Inputs.AppVNetAddonsArgs>? VnetAddons { get; set; }

        /// <summary>
        /// The workload profile used for this app. Supported for Consumption + Dedicated plan.
        /// </summary>
        [Input("workloadProfileName")]
        public Input<string>? WorkloadProfileName { get; set; }

        public AppResourcePropertiesArgs()
        {
            EnableEndToEndTLS = false;
            HttpsOnly = false;
        }
        public static new AppResourcePropertiesArgs Empty => new AppResourcePropertiesArgs();
    }
}
