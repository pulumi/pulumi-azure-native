// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.Outputs
{

    /// <summary>
    /// App ingress settings payload.
    /// </summary>
    [OutputType]
    public sealed class IngressSettingsResponse
    {
        /// <summary>
        /// How ingress should communicate with this app backend service.
        /// </summary>
        public readonly string? BackendProtocol;
        /// <summary>
        /// Client-Certification Authentication.
        /// </summary>
        public readonly Outputs.IngressSettingsResponseClientAuth? ClientAuth;
        /// <summary>
        /// Ingress read time out in seconds.
        /// </summary>
        public readonly int? ReadTimeoutInSeconds;
        /// <summary>
        /// Ingress send time out in seconds.
        /// </summary>
        public readonly int? SendTimeoutInSeconds;
        /// <summary>
        /// Type of the affinity, set this to Cookie to enable session affinity.
        /// </summary>
        public readonly string? SessionAffinity;
        /// <summary>
        /// Time in seconds until the cookie expires.
        /// </summary>
        public readonly int? SessionCookieMaxAge;

        [OutputConstructor]
        private IngressSettingsResponse(
            string? backendProtocol,

            Outputs.IngressSettingsResponseClientAuth? clientAuth,

            int? readTimeoutInSeconds,

            int? sendTimeoutInSeconds,

            string? sessionAffinity,

            int? sessionCookieMaxAge)
        {
            BackendProtocol = backendProtocol;
            ClientAuth = clientAuth;
            ReadTimeoutInSeconds = readTimeoutInSeconds;
            SendTimeoutInSeconds = sendTimeoutInSeconds;
            SessionAffinity = sessionAffinity;
            SessionCookieMaxAge = sessionCookieMaxAge;
        }
    }
}
