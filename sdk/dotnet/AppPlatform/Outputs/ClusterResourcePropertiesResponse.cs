// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.Outputs
{

    /// <summary>
    /// Service properties payload
    /// </summary>
    [OutputType]
    public sealed class ClusterResourcePropertiesResponse
    {
        /// <summary>
        /// Fully qualified dns name of the service instance
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Network profile of the Service
        /// </summary>
        public readonly Outputs.NetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// Power state of the Service
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// Provisioning state of the Service
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// ServiceInstanceEntity GUID which uniquely identifies a created resource
        /// </summary>
        public readonly string ServiceId;
        /// <summary>
        /// Version of the Service
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Additional Service settings in vnet injection instance
        /// </summary>
        public readonly Outputs.ServiceVNetAddonsResponse? VnetAddons;
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private ClusterResourcePropertiesResponse(
            string fqdn,

            Outputs.NetworkProfileResponse? networkProfile,

            string powerState,

            string provisioningState,

            string serviceId,

            int version,

            Outputs.ServiceVNetAddonsResponse? vnetAddons,

            bool? zoneRedundant)
        {
            Fqdn = fqdn;
            NetworkProfile = networkProfile;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            ServiceId = serviceId;
            Version = version;
            VnetAddons = vnetAddons;
            ZoneRedundant = zoneRedundant;
        }
    }
}
