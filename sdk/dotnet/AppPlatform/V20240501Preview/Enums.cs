// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AppPlatform.V20240501Preview
{
    /// <summary>
    /// Indicates whether the API try-out feature is enabled or disabled. When enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users cannot try out the API.
    /// </summary>
    [EnumType]
    public readonly struct ApiPortalApiTryOutEnabledState : IEquatable<ApiPortalApiTryOutEnabledState>
    {
        private readonly string _value;

        private ApiPortalApiTryOutEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApiPortalApiTryOutEnabledState Enabled { get; } = new ApiPortalApiTryOutEnabledState("Enabled");
        public static ApiPortalApiTryOutEnabledState Disabled { get; } = new ApiPortalApiTryOutEnabledState("Disabled");

        public static bool operator ==(ApiPortalApiTryOutEnabledState left, ApiPortalApiTryOutEnabledState right) => left.Equals(right);
        public static bool operator !=(ApiPortalApiTryOutEnabledState left, ApiPortalApiTryOutEnabledState right) => !left.Equals(right);

        public static explicit operator string(ApiPortalApiTryOutEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiPortalApiTryOutEnabledState other && Equals(other);
        public bool Equals(ApiPortalApiTryOutEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of application performance monitoring
    /// </summary>
    [EnumType]
    public readonly struct ApmType : IEquatable<ApmType>
    {
        private readonly string _value;

        private ApmType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApmType ApplicationInsights { get; } = new ApmType("ApplicationInsights");
        public static ApmType AppDynamics { get; } = new ApmType("AppDynamics");
        public static ApmType Dynatrace { get; } = new ApmType("Dynatrace");
        public static ApmType NewRelic { get; } = new ApmType("NewRelic");
        public static ApmType ElasticAPM { get; } = new ApmType("ElasticAPM");

        public static bool operator ==(ApmType left, ApmType right) => left.Equals(right);
        public static bool operator !=(ApmType left, ApmType right) => !left.Equals(right);

        public static explicit operator string(ApmType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApmType other && Equals(other);
        public bool Equals(ApmType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How ingress should communicate with this app backend service.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackendProtocol GRPC { get; } = new BackendProtocol("GRPC");
        public static BackendProtocol Default { get; } = new BackendProtocol("Default");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Buildpack Binding Type
    /// </summary>
    [EnumType]
    public readonly struct BindingType : IEquatable<BindingType>
    {
        private readonly string _value;

        private BindingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BindingType ApplicationInsights { get; } = new BindingType("ApplicationInsights");
        public static BindingType ApacheSkyWalking { get; } = new BindingType("ApacheSkyWalking");
        public static BindingType AppDynamics { get; } = new BindingType("AppDynamics");
        public static BindingType Dynatrace { get; } = new BindingType("Dynatrace");
        public static BindingType NewRelic { get; } = new BindingType("NewRelic");
        public static BindingType ElasticAPM { get; } = new BindingType("ElasticAPM");
        public static BindingType CACertificates { get; } = new BindingType("CACertificates");

        public static bool operator ==(BindingType left, BindingType right) => left.Equals(right);
        public static bool operator !=(BindingType left, BindingType right) => !left.Equals(right);

        public static explicit operator string(BindingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BindingType other && Equals(other);
        public bool Equals(BindingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enabled state of the config server. This is only used in Consumption tier.
    /// </summary>
    [EnumType]
    public readonly struct ConfigServerEnabledState : IEquatable<ConfigServerEnabledState>
    {
        private readonly string _value;

        private ConfigServerEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enable the config server.
        /// </summary>
        public static ConfigServerEnabledState Enabled { get; } = new ConfigServerEnabledState("Enabled");
        /// <summary>
        /// Disable the config server.
        /// </summary>
        public static ConfigServerEnabledState Disabled { get; } = new ConfigServerEnabledState("Disabled");

        public static bool operator ==(ConfigServerEnabledState left, ConfigServerEnabledState right) => left.Equals(right);
        public static bool operator !=(ConfigServerEnabledState left, ConfigServerEnabledState right) => !left.Equals(right);

        public static explicit operator string(ConfigServerEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigServerEnabledState other && Equals(other);
        public bool Equals(ConfigServerEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The generation of the Application Configuration Service.
    /// </summary>
    [EnumType]
    public readonly struct ConfigurationServiceGeneration : IEquatable<ConfigurationServiceGeneration>
    {
        private readonly string _value;

        private ConfigurationServiceGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfigurationServiceGeneration Gen1 { get; } = new ConfigurationServiceGeneration("Gen1");
        public static ConfigurationServiceGeneration Gen2 { get; } = new ConfigurationServiceGeneration("Gen2");

        public static bool operator ==(ConfigurationServiceGeneration left, ConfigurationServiceGeneration right) => left.Equals(right);
        public static bool operator !=(ConfigurationServiceGeneration left, ConfigurationServiceGeneration right) => !left.Equals(right);

        public static explicit operator string(ConfigurationServiceGeneration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfigurationServiceGeneration other && Equals(other);
        public bool Equals(ConfigurationServiceGeneration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the customized accelerator.
    /// </summary>
    [EnumType]
    public readonly struct CustomizedAcceleratorType : IEquatable<CustomizedAcceleratorType>
    {
        private readonly string _value;

        private CustomizedAcceleratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomizedAcceleratorType Accelerator { get; } = new CustomizedAcceleratorType("Accelerator");
        public static CustomizedAcceleratorType Fragment { get; } = new CustomizedAcceleratorType("Fragment");

        public static bool operator ==(CustomizedAcceleratorType left, CustomizedAcceleratorType right) => left.Equals(right);
        public static bool operator !=(CustomizedAcceleratorType left, CustomizedAcceleratorType right) => !left.Equals(right);

        public static explicit operator string(CustomizedAcceleratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomizedAcceleratorType other && Equals(other);
        public bool Equals(CustomizedAcceleratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the plugin
    /// </summary>
    [EnumType]
    public readonly struct DevToolPortalFeatureState : IEquatable<DevToolPortalFeatureState>
    {
        private readonly string _value;

        private DevToolPortalFeatureState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enable the plugin in Dev Tool Portal.
        /// </summary>
        public static DevToolPortalFeatureState Enabled { get; } = new DevToolPortalFeatureState("Enabled");
        /// <summary>
        /// Disable the plugin in Dev Tool Portal.
        /// </summary>
        public static DevToolPortalFeatureState Disabled { get; } = new DevToolPortalFeatureState("Disabled");

        public static bool operator ==(DevToolPortalFeatureState left, DevToolPortalFeatureState right) => left.Equals(right);
        public static bool operator !=(DevToolPortalFeatureState left, DevToolPortalFeatureState right) => !left.Equals(right);

        public static explicit operator string(DevToolPortalFeatureState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DevToolPortalFeatureState other && Equals(other);
        public bool Equals(DevToolPortalFeatureState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency to run the maintenance job
    /// </summary>
    [EnumType]
    public readonly struct Frequency : IEquatable<Frequency>
    {
        private readonly string _value;

        private Frequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Frequency Weekly { get; } = new Frequency("Weekly");

        public static bool operator ==(Frequency left, Frequency right) => left.Equals(right);
        public static bool operator !=(Frequency left, Frequency right) => !left.Equals(right);

        public static explicit operator string(Frequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Frequency other && Equals(other);
        public bool Equals(Frequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to enable certificate verification or not
    /// </summary>
    [EnumType]
    public readonly struct GatewayCertificateVerification : IEquatable<GatewayCertificateVerification>
    {
        private readonly string _value;

        private GatewayCertificateVerification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enable certificate verification in Spring Cloud Gateway.
        /// </summary>
        public static GatewayCertificateVerification Enabled { get; } = new GatewayCertificateVerification("Enabled");
        /// <summary>
        /// Disable certificate verification in Spring Cloud Gateway.
        /// </summary>
        public static GatewayCertificateVerification Disabled { get; } = new GatewayCertificateVerification("Disabled");

        public static bool operator ==(GatewayCertificateVerification left, GatewayCertificateVerification right) => left.Equals(right);
        public static bool operator !=(GatewayCertificateVerification left, GatewayCertificateVerification right) => !left.Equals(right);

        public static explicit operator string(GatewayCertificateVerification value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayCertificateVerification other && Equals(other);
        public bool Equals(GatewayCertificateVerification other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol of routed Azure Spring Apps applications.
    /// </summary>
    [EnumType]
    public readonly struct GatewayRouteConfigProtocol : IEquatable<GatewayRouteConfigProtocol>
    {
        private readonly string _value;

        private GatewayRouteConfigProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayRouteConfigProtocol HTTP { get; } = new GatewayRouteConfigProtocol("HTTP");
        public static GatewayRouteConfigProtocol HTTPS { get; } = new GatewayRouteConfigProtocol("HTTPS");

        public static bool operator ==(GatewayRouteConfigProtocol left, GatewayRouteConfigProtocol right) => left.Equals(right);
        public static bool operator !=(GatewayRouteConfigProtocol left, GatewayRouteConfigProtocol right) => !left.Equals(right);

        public static explicit operator string(GatewayRouteConfigProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayRouteConfigProtocol other && Equals(other);
        public bool Equals(GatewayRouteConfigProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Git libraries used to support various repository providers
    /// </summary>
    [EnumType]
    public readonly struct GitImplementation : IEquatable<GitImplementation>
    {
        private readonly string _value;

        private GitImplementation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GitImplementation Go_git { get; } = new GitImplementation("go-git");
        public static GitImplementation Libgit2 { get; } = new GitImplementation("libgit2");

        public static bool operator ==(GitImplementation left, GitImplementation right) => left.Equals(right);
        public static bool operator !=(GitImplementation left, GitImplementation right) => !left.Equals(right);

        public static explicit operator string(GitImplementation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GitImplementation other && Equals(other);
        public bool Equals(GitImplementation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    /// 
    /// Possible enum values:
    ///  - `"HTTP"` means that the scheme used will be http://
    ///  - `"HTTPS"` means that the scheme used will be https://
    /// </summary>
    [EnumType]
    public readonly struct HTTPSchemeType : IEquatable<HTTPSchemeType>
    {
        private readonly string _value;

        private HTTPSchemeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HTTPSchemeType HTTP { get; } = new HTTPSchemeType("HTTP");
        public static HTTPSchemeType HTTPS { get; } = new HTTPSchemeType("HTTPS");

        public static bool operator ==(HTTPSchemeType left, HTTPSchemeType right) => left.Equals(right);
        public static bool operator !=(HTTPSchemeType left, HTTPSchemeType right) => !left.Equals(right);

        public static explicit operator string(HTTPSchemeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HTTPSchemeType other && Equals(other);
        public bool Equals(HTTPSchemeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to automatically synchronize certificate from key vault or not.
    /// </summary>
    [EnumType]
    public readonly struct KeyVaultCertificateAutoSync : IEquatable<KeyVaultCertificateAutoSync>
    {
        private readonly string _value;

        private KeyVaultCertificateAutoSync(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyVaultCertificateAutoSync Disabled { get; } = new KeyVaultCertificateAutoSync("Disabled");
        public static KeyVaultCertificateAutoSync Enabled { get; } = new KeyVaultCertificateAutoSync("Enabled");

        public static bool operator ==(KeyVaultCertificateAutoSync left, KeyVaultCertificateAutoSync right) => left.Equals(right);
        public static bool operator !=(KeyVaultCertificateAutoSync left, KeyVaultCertificateAutoSync right) => !left.Equals(right);

        public static explicit operator string(KeyVaultCertificateAutoSync value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyVaultCertificateAutoSync other && Equals(other);
        public bool Equals(KeyVaultCertificateAutoSync other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the managed identity
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");
        public static ManagedIdentityType SystemAssigned_UserAssigned { get; } = new ManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the vnet injection service enables private links for backend storage account and container registry.
    /// </summary>
    [EnumType]
    public readonly struct PrivateStorageAccess : IEquatable<PrivateStorageAccess>
    {
        private readonly string _value;

        private PrivateStorageAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateStorageAccess Enabled { get; } = new PrivateStorageAccess("Enabled");
        public static PrivateStorageAccess Disabled { get; } = new PrivateStorageAccess("Disabled");

        public static bool operator ==(PrivateStorageAccess left, PrivateStorageAccess right) => left.Equals(right);
        public static bool operator !=(PrivateStorageAccess left, PrivateStorageAccess right) => !left.Equals(right);

        public static explicit operator string(PrivateStorageAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateStorageAccess other && Equals(other);
        public bool Equals(PrivateStorageAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the action to take to perform the health check.
    /// </summary>
    [EnumType]
    public readonly struct ProbeActionType : IEquatable<ProbeActionType>
    {
        private readonly string _value;

        private ProbeActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProbeActionType HTTPGetAction { get; } = new ProbeActionType("HTTPGetAction");
        public static ProbeActionType TCPSocketAction { get; } = new ProbeActionType("TCPSocketAction");
        public static ProbeActionType ExecAction { get; } = new ProbeActionType("ExecAction");

        public static bool operator ==(ProbeActionType left, ProbeActionType right) => left.Equals(right);
        public static bool operator !=(ProbeActionType left, ProbeActionType right) => !left.Equals(right);

        public static explicit operator string(ProbeActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProbeActionType other && Equals(other);
        public bool Equals(ProbeActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the affinity, set this to Cookie to enable session affinity.
    /// </summary>
    [EnumType]
    public readonly struct SessionAffinity : IEquatable<SessionAffinity>
    {
        private readonly string _value;

        private SessionAffinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionAffinity Cookie { get; } = new SessionAffinity("Cookie");
        public static SessionAffinity None { get; } = new SessionAffinity("None");

        public static bool operator ==(SessionAffinity left, SessionAffinity right) => left.Equals(right);
        public static bool operator !=(SessionAffinity left, SessionAffinity right) => !left.Equals(right);

        public static explicit operator string(SessionAffinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionAffinity other && Equals(other);
        public bool Equals(SessionAffinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the storage.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType StorageAccount { get; } = new StorageType("StorageAccount");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (either system assigned, or none).
    /// </summary>
    [EnumType]
    public readonly struct SystemAssignedServiceIdentityType : IEquatable<SystemAssignedServiceIdentityType>
    {
        private readonly string _value;

        private SystemAssignedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemAssignedServiceIdentityType None { get; } = new SystemAssignedServiceIdentityType("None");
        public static SystemAssignedServiceIdentityType SystemAssigned { get; } = new SystemAssignedServiceIdentityType("SystemAssigned");

        public static bool operator ==(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(SystemAssignedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemAssignedServiceIdentityType other && Equals(other);
        public bool Equals(SystemAssignedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of test endpoint auth.
    /// </summary>
    [EnumType]
    public readonly struct TestEndpointAuthState : IEquatable<TestEndpointAuthState>
    {
        private readonly string _value;

        private TestEndpointAuthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enable test endpoint auth.
        /// </summary>
        public static TestEndpointAuthState Enabled { get; } = new TestEndpointAuthState("Enabled");
        /// <summary>
        /// Disable test endpoint auth
        /// </summary>
        public static TestEndpointAuthState Disabled { get; } = new TestEndpointAuthState("Disabled");

        public static bool operator ==(TestEndpointAuthState left, TestEndpointAuthState right) => left.Equals(right);
        public static bool operator !=(TestEndpointAuthState left, TestEndpointAuthState right) => !left.Equals(right);

        public static explicit operator string(TestEndpointAuthState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TestEndpointAuthState other && Equals(other);
        public bool Equals(TestEndpointAuthState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of job trigger
    /// </summary>
    [EnumType]
    public readonly struct TriggerType : IEquatable<TriggerType>
    {
        private readonly string _value;

        private TriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerType Manual { get; } = new TriggerType("Manual");

        public static bool operator ==(TriggerType left, TriggerType right) => left.Equals(right);
        public static bool operator !=(TriggerType left, TriggerType right) => !left.Equals(right);

        public static explicit operator string(TriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerType other && Equals(other);
        public bool Equals(TriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the underlying resource to mount as a persistent disk.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type AzureFileVolume { get; } = new Type("AzureFileVolume");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day to run the maintenance job
    /// </summary>
    [EnumType]
    public readonly struct WeekDay : IEquatable<WeekDay>
    {
        private readonly string _value;

        private WeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekDay Monday { get; } = new WeekDay("Monday");
        public static WeekDay Tuesday { get; } = new WeekDay("Tuesday");
        public static WeekDay Wednesday { get; } = new WeekDay("Wednesday");
        public static WeekDay Thursday { get; } = new WeekDay("Thursday");
        public static WeekDay Friday { get; } = new WeekDay("Friday");
        public static WeekDay Saturday { get; } = new WeekDay("Saturday");
        public static WeekDay Sunday { get; } = new WeekDay("Sunday");

        public static bool operator ==(WeekDay left, WeekDay right) => left.Equals(right);
        public static bool operator !=(WeekDay left, WeekDay right) => !left.Equals(right);

        public static explicit operator string(WeekDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekDay other && Equals(other);
        public bool Equals(WeekDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
