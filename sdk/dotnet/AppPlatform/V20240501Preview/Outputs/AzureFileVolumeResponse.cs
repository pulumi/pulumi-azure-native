// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20240501Preview.Outputs
{

    /// <summary>
    /// The properties of the Azure File volume. Azure File shares are mounted as volumes.
    /// </summary>
    [OutputType]
    public sealed class AzureFileVolumeResponse
    {
        /// <summary>
        /// If set to true, it will create and mount a dedicated directory for every individual app instance.
        /// </summary>
        public readonly bool? EnableSubPath;
        /// <summary>
        /// These are the mount options for a persistent disk.
        /// </summary>
        public readonly ImmutableArray<string> MountOptions;
        /// <summary>
        /// The mount path of the persistent disk.
        /// </summary>
        public readonly string MountPath;
        /// <summary>
        /// Indicates whether the persistent disk is a readOnly one.
        /// </summary>
        public readonly bool? ReadOnly;
        /// <summary>
        /// The share name of the Azure File share.
        /// </summary>
        public readonly string? ShareName;
        /// <summary>
        /// The type of the underlying resource to mount as a persistent disk.
        /// Expected value is 'AzureFileVolume'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private AzureFileVolumeResponse(
            bool? enableSubPath,

            ImmutableArray<string> mountOptions,

            string mountPath,

            bool? readOnly,

            string? shareName,

            string type)
        {
            EnableSubPath = enableSubPath;
            MountOptions = mountOptions;
            MountPath = mountPath;
            ReadOnly = readOnly;
            ShareName = shareName;
            Type = type;
        }
    }
}
