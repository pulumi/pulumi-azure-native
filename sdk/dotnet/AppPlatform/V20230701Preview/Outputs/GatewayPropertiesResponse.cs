// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AppPlatform.V20230701Preview.Outputs
{

    /// <summary>
    /// Spring Cloud Gateway properties payload
    /// </summary>
    [OutputType]
    public sealed class GatewayPropertiesResponse
    {
        /// <summary>
        /// Collection of addons for Spring Cloud Gateway
        /// </summary>
        public readonly ImmutableDictionary<string, object>? AddonConfigs;
        /// <summary>
        /// API metadata property for Spring Cloud Gateway
        /// </summary>
        public readonly Outputs.GatewayApiMetadataPropertiesResponse? ApiMetadataProperties;
        /// <summary>
        /// Collection of APM type used in Spring Cloud Gateway
        /// </summary>
        public readonly ImmutableArray<string> ApmTypes;
        /// <summary>
        /// Client-Certification Authentication.
        /// </summary>
        public readonly Outputs.GatewayPropertiesResponseClientAuth? ClientAuth;
        /// <summary>
        /// Cross-Origin Resource Sharing property
        /// </summary>
        public readonly Outputs.GatewayCorsPropertiesResponse? CorsProperties;
        /// <summary>
        /// Environment variables of Spring Cloud Gateway
        /// </summary>
        public readonly Outputs.GatewayPropertiesResponseEnvironmentVariables? EnvironmentVariables;
        /// <summary>
        /// Indicate if only https is allowed.
        /// </summary>
        public readonly bool? HttpsOnly;
        /// <summary>
        /// Collection of instances belong to Spring Cloud Gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayInstanceResponse> Instances;
        /// <summary>
        /// Properties of the Spring Cloud Gateway Operator.
        /// </summary>
        public readonly Outputs.GatewayOperatorPropertiesResponse OperatorProperties;
        /// <summary>
        /// State of the Spring Cloud Gateway.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Indicates whether the Spring Cloud Gateway exposes endpoint.
        /// </summary>
        public readonly bool? Public;
        /// <summary>
        /// The requested resource quantity for required CPU and Memory.
        /// </summary>
        public readonly Outputs.GatewayResourceRequestsResponse? ResourceRequests;
        /// <summary>
        /// Single sign-on related configuration
        /// </summary>
        public readonly Outputs.SsoPropertiesResponse? SsoProperties;
        /// <summary>
        /// URL of the Spring Cloud Gateway, exposed when 'public' is true.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GatewayPropertiesResponse(
            ImmutableDictionary<string, object>? addonConfigs,

            Outputs.GatewayApiMetadataPropertiesResponse? apiMetadataProperties,

            ImmutableArray<string> apmTypes,

            Outputs.GatewayPropertiesResponseClientAuth? clientAuth,

            Outputs.GatewayCorsPropertiesResponse? corsProperties,

            Outputs.GatewayPropertiesResponseEnvironmentVariables? environmentVariables,

            bool? httpsOnly,

            ImmutableArray<Outputs.GatewayInstanceResponse> instances,

            Outputs.GatewayOperatorPropertiesResponse operatorProperties,

            string provisioningState,

            bool? @public,

            Outputs.GatewayResourceRequestsResponse? resourceRequests,

            Outputs.SsoPropertiesResponse? ssoProperties,

            string url)
        {
            AddonConfigs = addonConfigs;
            ApiMetadataProperties = apiMetadataProperties;
            ApmTypes = apmTypes;
            ClientAuth = clientAuth;
            CorsProperties = corsProperties;
            EnvironmentVariables = environmentVariables;
            HttpsOnly = httpsOnly;
            Instances = instances;
            OperatorProperties = operatorProperties;
            ProvisioningState = provisioningState;
            Public = @public;
            ResourceRequests = resourceRequests;
            SsoProperties = ssoProperties;
            Url = url;
        }
    }
}
