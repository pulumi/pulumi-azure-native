// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AppPlatform.V20221201
{
    /// <summary>
    /// How ingress should communicate with this app backend service.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackendProtocol GRPC { get; } = new BackendProtocol("GRPC");
        public static BackendProtocol Default { get; } = new BackendProtocol("Default");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Buildpack Binding Type
    /// </summary>
    [EnumType]
    public readonly struct BindingType : IEquatable<BindingType>
    {
        private readonly string _value;

        private BindingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BindingType ApplicationInsights { get; } = new BindingType("ApplicationInsights");
        public static BindingType ApacheSkyWalking { get; } = new BindingType("ApacheSkyWalking");
        public static BindingType AppDynamics { get; } = new BindingType("AppDynamics");
        public static BindingType Dynatrace { get; } = new BindingType("Dynatrace");
        public static BindingType NewRelic { get; } = new BindingType("NewRelic");
        public static BindingType ElasticAPM { get; } = new BindingType("ElasticAPM");

        public static bool operator ==(BindingType left, BindingType right) => left.Equals(right);
        public static bool operator !=(BindingType left, BindingType right) => !left.Equals(right);

        public static explicit operator string(BindingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BindingType other && Equals(other);
        public bool Equals(BindingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol of routed Azure Spring Apps applications.
    /// </summary>
    [EnumType]
    public readonly struct GatewayRouteConfigProtocol : IEquatable<GatewayRouteConfigProtocol>
    {
        private readonly string _value;

        private GatewayRouteConfigProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayRouteConfigProtocol HTTP { get; } = new GatewayRouteConfigProtocol("HTTP");
        public static GatewayRouteConfigProtocol HTTPS { get; } = new GatewayRouteConfigProtocol("HTTPS");

        public static bool operator ==(GatewayRouteConfigProtocol left, GatewayRouteConfigProtocol right) => left.Equals(right);
        public static bool operator !=(GatewayRouteConfigProtocol left, GatewayRouteConfigProtocol right) => !left.Equals(right);

        public static explicit operator string(GatewayRouteConfigProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayRouteConfigProtocol other && Equals(other);
        public bool Equals(GatewayRouteConfigProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    /// 
    /// Possible enum values:
    ///  - `"HTTP"` means that the scheme used will be http://
    ///  - `"HTTPS"` means that the scheme used will be https://
    /// </summary>
    [EnumType]
    public readonly struct HTTPSchemeType : IEquatable<HTTPSchemeType>
    {
        private readonly string _value;

        private HTTPSchemeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HTTPSchemeType HTTP { get; } = new HTTPSchemeType("HTTP");
        public static HTTPSchemeType HTTPS { get; } = new HTTPSchemeType("HTTPS");

        public static bool operator ==(HTTPSchemeType left, HTTPSchemeType right) => left.Equals(right);
        public static bool operator !=(HTTPSchemeType left, HTTPSchemeType right) => !left.Equals(right);

        public static explicit operator string(HTTPSchemeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HTTPSchemeType other && Equals(other);
        public bool Equals(HTTPSchemeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the managed identity
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");
        public static ManagedIdentityType SystemAssigned_UserAssigned { get; } = new ManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the action to take to perform the health check.
    /// </summary>
    [EnumType]
    public readonly struct ProbeActionType : IEquatable<ProbeActionType>
    {
        private readonly string _value;

        private ProbeActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProbeActionType HTTPGetAction { get; } = new ProbeActionType("HTTPGetAction");
        public static ProbeActionType TCPSocketAction { get; } = new ProbeActionType("TCPSocketAction");
        public static ProbeActionType ExecAction { get; } = new ProbeActionType("ExecAction");

        public static bool operator ==(ProbeActionType left, ProbeActionType right) => left.Equals(right);
        public static bool operator !=(ProbeActionType left, ProbeActionType right) => !left.Equals(right);

        public static explicit operator string(ProbeActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProbeActionType other && Equals(other);
        public bool Equals(ProbeActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the affinity, set this to Cookie to enable session affinity.
    /// </summary>
    [EnumType]
    public readonly struct SessionAffinity : IEquatable<SessionAffinity>
    {
        private readonly string _value;

        private SessionAffinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionAffinity Cookie { get; } = new SessionAffinity("Cookie");
        public static SessionAffinity None { get; } = new SessionAffinity("None");

        public static bool operator ==(SessionAffinity left, SessionAffinity right) => left.Equals(right);
        public static bool operator !=(SessionAffinity left, SessionAffinity right) => !left.Equals(right);

        public static explicit operator string(SessionAffinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionAffinity other && Equals(other);
        public bool Equals(SessionAffinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the storage.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType StorageAccount { get; } = new StorageType("StorageAccount");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the underlying resource to mount as a persistent disk.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type AzureFileVolume { get; } = new Type("AzureFileVolume");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
