// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CognitiveServices.Outputs
{

    /// <summary>
    /// Represents a managed agent deployment where the underlying infrastructure is managed by the platform in the deployer's subscription.
    /// </summary>
    [OutputType]
    public sealed class ManagedAgentDeploymentResponse
    {
        /// <summary>
        /// Returns a flat list of agent:version deployed in this deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.VersionedAgentReferenceResponse> Agents;
        /// <summary>
        /// Gets or sets the unique identifier of the deployment.
        /// </summary>
        public readonly string? DeploymentId;
        /// <summary>
        /// Specifies the type of deployment for an agent, indicating how the underlying compute and network infrastructure is managed.
        /// Expected value is 'Managed'.
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// The asset description text.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Gets or sets the display name of the deployment.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Gets or sets the supported protocol types and versions exposed by this deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.AgentProtocolVersionResponse> Protocols;
        /// <summary>
        /// Gets or sets the provisioning state of the agent deployment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets or sets the current operational state of the deployment (and, intrinsically, of the comprising agents).
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Tag dictionary. Tags can be added, removed, and updated.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private ManagedAgentDeploymentResponse(
            ImmutableArray<Outputs.VersionedAgentReferenceResponse> agents,

            string? deploymentId,

            string deploymentType,

            string? description,

            string? displayName,

            ImmutableArray<Outputs.AgentProtocolVersionResponse> protocols,

            string provisioningState,

            string? state,

            ImmutableDictionary<string, string>? tags)
        {
            Agents = agents;
            DeploymentId = deploymentId;
            DeploymentType = deploymentType;
            Description = description;
            DisplayName = displayName;
            Protocols = protocols;
            ProvisioningState = provisioningState;
            State = state;
            Tags = tags;
        }
    }
}
