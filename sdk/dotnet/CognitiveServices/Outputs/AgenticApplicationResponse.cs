// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.CognitiveServices.Outputs
{

    /// <summary>
    /// Resource type representing an agentic application as a management construct.
    /// </summary>
    [OutputType]
    public sealed class AgenticApplicationResponse
    {
        /// <summary>
        /// The EntraId Agentic Blueprint of the application.
        /// </summary>
        public readonly Outputs.AssignedIdentityResponse? AgentIdentityBlueprint;
        /// <summary>
        /// The list of agent definitions comprising this application, returned as references to the objects under the parent project; use this to obtain a flat list of all agent-version pairs represented by this application.
        /// </summary>
        public readonly ImmutableArray<Outputs.AgentReferenceResponse> Agents;
        /// <summary>
        /// Gets or sets the authorization policy associated with this agentic application instance.
        /// </summary>
        public readonly object? AuthorizationPolicy;
        /// <summary>
        /// The application's dedicated invocation endpoint.
        /// </summary>
        public readonly string? BaseUrl;
        /// <summary>
        /// The (default) agent instance identity of the application.
        /// </summary>
        public readonly Outputs.AssignedIdentityResponse? DefaultInstanceIdentity;
        /// <summary>
        /// The asset description text.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the application.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Enabledstate of the application.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Provisioning state of the application.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Tag dictionary. Tags can be added, removed, and updated.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Gets or sets the traffic routing policy for the application's deployments.
        /// </summary>
        public readonly Outputs.ApplicationTrafficRoutingPolicyResponse? TrafficRoutingPolicy;

        [OutputConstructor]
        private AgenticApplicationResponse(
            Outputs.AssignedIdentityResponse? agentIdentityBlueprint,

            ImmutableArray<Outputs.AgentReferenceResponse> agents,

            object? authorizationPolicy,

            string? baseUrl,

            Outputs.AssignedIdentityResponse? defaultInstanceIdentity,

            string? description,

            string? displayName,

            bool isEnabled,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            Outputs.ApplicationTrafficRoutingPolicyResponse? trafficRoutingPolicy)
        {
            AgentIdentityBlueprint = agentIdentityBlueprint;
            Agents = agents;
            AuthorizationPolicy = authorizationPolicy;
            BaseUrl = baseUrl;
            DefaultInstanceIdentity = defaultInstanceIdentity;
            Description = description;
            DisplayName = displayName;
            IsEnabled = isEnabled;
            ProvisioningState = provisioningState;
            Tags = tags;
            TrafficRoutingPolicy = trafficRoutingPolicy;
        }
    }
}
