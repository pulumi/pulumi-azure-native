// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.CognitiveServices
{
    /// <summary>
    /// Level at which content is filtered.
    /// </summary>
    [EnumType]
    public readonly struct AllowedContentLevel : IEquatable<AllowedContentLevel>
    {
        private readonly string _value;

        private AllowedContentLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowedContentLevel Low { get; } = new AllowedContentLevel("Low");
        public static AllowedContentLevel Medium { get; } = new AllowedContentLevel("Medium");
        public static AllowedContentLevel High { get; } = new AllowedContentLevel("High");

        public static bool operator ==(AllowedContentLevel left, AllowedContentLevel right) => left.Equals(right);
        public static bool operator !=(AllowedContentLevel left, AllowedContentLevel right) => !left.Equals(right);

        public static explicit operator string(AllowedContentLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowedContentLevel other && Equals(other);
        public bool Equals(AllowedContentLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Setting for trusted services.
    /// </summary>
    [EnumType]
    public readonly struct ByPassSelection : IEquatable<ByPassSelection>
    {
        private readonly string _value;

        private ByPassSelection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ByPassSelection None { get; } = new ByPassSelection("None");
        public static ByPassSelection AzureServices { get; } = new ByPassSelection("AzureServices");

        public static bool operator ==(ByPassSelection left, ByPassSelection right) => left.Equals(right);
        public static bool operator !=(ByPassSelection left, ByPassSelection right) => !left.Equals(right);

        public static explicit operator string(ByPassSelection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ByPassSelection other && Equals(other);
        public bool Equals(ByPassSelection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of this capability host.
    /// </summary>
    [EnumType]
    public readonly struct CapabilityHostKind : IEquatable<CapabilityHostKind>
    {
        private readonly string _value;

        private CapabilityHostKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapabilityHostKind Agents { get; } = new CapabilityHostKind("Agents");

        public static bool operator ==(CapabilityHostKind left, CapabilityHostKind right) => left.Equals(right);
        public static bool operator !=(CapabilityHostKind left, CapabilityHostKind right) => !left.Equals(right);

        public static explicit operator string(CapabilityHostKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapabilityHostKind other && Equals(other);
        public bool Equals(CapabilityHostKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Authentication type of the connection target
    /// </summary>
    [EnumType]
    public readonly struct ConnectionAuthType : IEquatable<ConnectionAuthType>
    {
        private readonly string _value;

        private ConnectionAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionAuthType PAT { get; } = new ConnectionAuthType("PAT");
        public static ConnectionAuthType ManagedIdentity { get; } = new ConnectionAuthType("ManagedIdentity");
        public static ConnectionAuthType UsernamePassword { get; } = new ConnectionAuthType("UsernamePassword");
        public static ConnectionAuthType None { get; } = new ConnectionAuthType("None");
        public static ConnectionAuthType SAS { get; } = new ConnectionAuthType("SAS");
        public static ConnectionAuthType AccountKey { get; } = new ConnectionAuthType("AccountKey");
        public static ConnectionAuthType ServicePrincipal { get; } = new ConnectionAuthType("ServicePrincipal");
        public static ConnectionAuthType AccessKey { get; } = new ConnectionAuthType("AccessKey");
        public static ConnectionAuthType ApiKey { get; } = new ConnectionAuthType("ApiKey");
        public static ConnectionAuthType CustomKeys { get; } = new ConnectionAuthType("CustomKeys");
        public static ConnectionAuthType OAuth2 { get; } = new ConnectionAuthType("OAuth2");
        public static ConnectionAuthType AAD { get; } = new ConnectionAuthType("AAD");

        public static bool operator ==(ConnectionAuthType left, ConnectionAuthType right) => left.Equals(right);
        public static bool operator !=(ConnectionAuthType left, ConnectionAuthType right) => !left.Equals(right);

        public static explicit operator string(ConnectionAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionAuthType other && Equals(other);
        public bool Equals(ConnectionAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Category of the connection
    /// </summary>
    [EnumType]
    public readonly struct ConnectionCategory : IEquatable<ConnectionCategory>
    {
        private readonly string _value;

        private ConnectionCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionCategory PythonFeed { get; } = new ConnectionCategory("PythonFeed");
        public static ConnectionCategory ContainerRegistry { get; } = new ConnectionCategory("ContainerRegistry");
        public static ConnectionCategory Git { get; } = new ConnectionCategory("Git");
        public static ConnectionCategory S3 { get; } = new ConnectionCategory("S3");
        public static ConnectionCategory Snowflake { get; } = new ConnectionCategory("Snowflake");
        public static ConnectionCategory AzureSqlDb { get; } = new ConnectionCategory("AzureSqlDb");
        public static ConnectionCategory AzureSynapseAnalytics { get; } = new ConnectionCategory("AzureSynapseAnalytics");
        public static ConnectionCategory AzureMySqlDb { get; } = new ConnectionCategory("AzureMySqlDb");
        public static ConnectionCategory AzurePostgresDb { get; } = new ConnectionCategory("AzurePostgresDb");
        public static ConnectionCategory ADLSGen2 { get; } = new ConnectionCategory("ADLSGen2");
        public static ConnectionCategory Redis { get; } = new ConnectionCategory("Redis");
        public static ConnectionCategory ApiKey { get; } = new ConnectionCategory("ApiKey");
        public static ConnectionCategory AzureOpenAI { get; } = new ConnectionCategory("AzureOpenAI");
        public static ConnectionCategory AIServices { get; } = new ConnectionCategory("AIServices");
        public static ConnectionCategory CognitiveSearch { get; } = new ConnectionCategory("CognitiveSearch");
        public static ConnectionCategory CognitiveService { get; } = new ConnectionCategory("CognitiveService");
        public static ConnectionCategory CustomKeys { get; } = new ConnectionCategory("CustomKeys");
        public static ConnectionCategory AzureBlob { get; } = new ConnectionCategory("AzureBlob");
        public static ConnectionCategory AzureOneLake { get; } = new ConnectionCategory("AzureOneLake");
        public static ConnectionCategory CosmosDb { get; } = new ConnectionCategory("CosmosDb");
        public static ConnectionCategory CosmosDbMongoDbApi { get; } = new ConnectionCategory("CosmosDbMongoDbApi");
        public static ConnectionCategory AzureDataExplorer { get; } = new ConnectionCategory("AzureDataExplorer");
        public static ConnectionCategory AzureMariaDb { get; } = new ConnectionCategory("AzureMariaDb");
        public static ConnectionCategory AzureDatabricksDeltaLake { get; } = new ConnectionCategory("AzureDatabricksDeltaLake");
        public static ConnectionCategory AzureSqlMi { get; } = new ConnectionCategory("AzureSqlMi");
        public static ConnectionCategory AzureTableStorage { get; } = new ConnectionCategory("AzureTableStorage");
        public static ConnectionCategory AmazonRdsForOracle { get; } = new ConnectionCategory("AmazonRdsForOracle");
        public static ConnectionCategory AmazonRdsForSqlServer { get; } = new ConnectionCategory("AmazonRdsForSqlServer");
        public static ConnectionCategory AmazonRedshift { get; } = new ConnectionCategory("AmazonRedshift");
        public static ConnectionCategory Db2 { get; } = new ConnectionCategory("Db2");
        public static ConnectionCategory Drill { get; } = new ConnectionCategory("Drill");
        public static ConnectionCategory GoogleBigQuery { get; } = new ConnectionCategory("GoogleBigQuery");
        public static ConnectionCategory Greenplum { get; } = new ConnectionCategory("Greenplum");
        public static ConnectionCategory Hbase { get; } = new ConnectionCategory("Hbase");
        public static ConnectionCategory Hive { get; } = new ConnectionCategory("Hive");
        public static ConnectionCategory Impala { get; } = new ConnectionCategory("Impala");
        public static ConnectionCategory Informix { get; } = new ConnectionCategory("Informix");
        public static ConnectionCategory MariaDb { get; } = new ConnectionCategory("MariaDb");
        public static ConnectionCategory MicrosoftAccess { get; } = new ConnectionCategory("MicrosoftAccess");
        public static ConnectionCategory MySql { get; } = new ConnectionCategory("MySql");
        public static ConnectionCategory Netezza { get; } = new ConnectionCategory("Netezza");
        public static ConnectionCategory Oracle { get; } = new ConnectionCategory("Oracle");
        public static ConnectionCategory Phoenix { get; } = new ConnectionCategory("Phoenix");
        public static ConnectionCategory PostgreSql { get; } = new ConnectionCategory("PostgreSql");
        public static ConnectionCategory Presto { get; } = new ConnectionCategory("Presto");
        public static ConnectionCategory SapOpenHub { get; } = new ConnectionCategory("SapOpenHub");
        public static ConnectionCategory SapBw { get; } = new ConnectionCategory("SapBw");
        public static ConnectionCategory SapHana { get; } = new ConnectionCategory("SapHana");
        public static ConnectionCategory SapTable { get; } = new ConnectionCategory("SapTable");
        public static ConnectionCategory Spark { get; } = new ConnectionCategory("Spark");
        public static ConnectionCategory SqlServer { get; } = new ConnectionCategory("SqlServer");
        public static ConnectionCategory Sybase { get; } = new ConnectionCategory("Sybase");
        public static ConnectionCategory Teradata { get; } = new ConnectionCategory("Teradata");
        public static ConnectionCategory Vertica { get; } = new ConnectionCategory("Vertica");
        public static ConnectionCategory Pinecone { get; } = new ConnectionCategory("Pinecone");
        public static ConnectionCategory Cassandra { get; } = new ConnectionCategory("Cassandra");
        public static ConnectionCategory Couchbase { get; } = new ConnectionCategory("Couchbase");
        public static ConnectionCategory MongoDbV2 { get; } = new ConnectionCategory("MongoDbV2");
        public static ConnectionCategory MongoDbAtlas { get; } = new ConnectionCategory("MongoDbAtlas");
        public static ConnectionCategory AmazonS3Compatible { get; } = new ConnectionCategory("AmazonS3Compatible");
        public static ConnectionCategory FileServer { get; } = new ConnectionCategory("FileServer");
        public static ConnectionCategory FtpServer { get; } = new ConnectionCategory("FtpServer");
        public static ConnectionCategory GoogleCloudStorage { get; } = new ConnectionCategory("GoogleCloudStorage");
        public static ConnectionCategory Hdfs { get; } = new ConnectionCategory("Hdfs");
        public static ConnectionCategory OracleCloudStorage { get; } = new ConnectionCategory("OracleCloudStorage");
        public static ConnectionCategory Sftp { get; } = new ConnectionCategory("Sftp");
        public static ConnectionCategory GenericHttp { get; } = new ConnectionCategory("GenericHttp");
        public static ConnectionCategory ODataRest { get; } = new ConnectionCategory("ODataRest");
        public static ConnectionCategory Odbc { get; } = new ConnectionCategory("Odbc");
        public static ConnectionCategory GenericRest { get; } = new ConnectionCategory("GenericRest");
        public static ConnectionCategory AmazonMws { get; } = new ConnectionCategory("AmazonMws");
        public static ConnectionCategory Concur { get; } = new ConnectionCategory("Concur");
        public static ConnectionCategory Dynamics { get; } = new ConnectionCategory("Dynamics");
        public static ConnectionCategory DynamicsAx { get; } = new ConnectionCategory("DynamicsAx");
        public static ConnectionCategory DynamicsCrm { get; } = new ConnectionCategory("DynamicsCrm");
        public static ConnectionCategory GoogleAdWords { get; } = new ConnectionCategory("GoogleAdWords");
        public static ConnectionCategory Hubspot { get; } = new ConnectionCategory("Hubspot");
        public static ConnectionCategory Jira { get; } = new ConnectionCategory("Jira");
        public static ConnectionCategory Magento { get; } = new ConnectionCategory("Magento");
        public static ConnectionCategory Marketo { get; } = new ConnectionCategory("Marketo");
        public static ConnectionCategory Office365 { get; } = new ConnectionCategory("Office365");
        public static ConnectionCategory Eloqua { get; } = new ConnectionCategory("Eloqua");
        public static ConnectionCategory Responsys { get; } = new ConnectionCategory("Responsys");
        public static ConnectionCategory OracleServiceCloud { get; } = new ConnectionCategory("OracleServiceCloud");
        public static ConnectionCategory PayPal { get; } = new ConnectionCategory("PayPal");
        public static ConnectionCategory QuickBooks { get; } = new ConnectionCategory("QuickBooks");
        public static ConnectionCategory Salesforce { get; } = new ConnectionCategory("Salesforce");
        public static ConnectionCategory SalesforceServiceCloud { get; } = new ConnectionCategory("SalesforceServiceCloud");
        public static ConnectionCategory SalesforceMarketingCloud { get; } = new ConnectionCategory("SalesforceMarketingCloud");
        public static ConnectionCategory SapCloudForCustomer { get; } = new ConnectionCategory("SapCloudForCustomer");
        public static ConnectionCategory SapEcc { get; } = new ConnectionCategory("SapEcc");
        public static ConnectionCategory ServiceNow { get; } = new ConnectionCategory("ServiceNow");
        public static ConnectionCategory SharePointOnlineList { get; } = new ConnectionCategory("SharePointOnlineList");
        public static ConnectionCategory Shopify { get; } = new ConnectionCategory("Shopify");
        public static ConnectionCategory Square { get; } = new ConnectionCategory("Square");
        public static ConnectionCategory WebTable { get; } = new ConnectionCategory("WebTable");
        public static ConnectionCategory Xero { get; } = new ConnectionCategory("Xero");
        public static ConnectionCategory Zoho { get; } = new ConnectionCategory("Zoho");
        public static ConnectionCategory GenericContainerRegistry { get; } = new ConnectionCategory("GenericContainerRegistry");
        public static ConnectionCategory Elasticsearch { get; } = new ConnectionCategory("Elasticsearch");
        public static ConnectionCategory OpenAI { get; } = new ConnectionCategory("OpenAI");
        public static ConnectionCategory Serp { get; } = new ConnectionCategory("Serp");
        public static ConnectionCategory BingLLMSearch { get; } = new ConnectionCategory("BingLLMSearch");
        public static ConnectionCategory Serverless { get; } = new ConnectionCategory("Serverless");
        public static ConnectionCategory ManagedOnlineEndpoint { get; } = new ConnectionCategory("ManagedOnlineEndpoint");

        public static bool operator ==(ConnectionCategory left, ConnectionCategory right) => left.Equals(right);
        public static bool operator !=(ConnectionCategory left, ConnectionCategory right) => !left.Equals(right);

        public static explicit operator string(ConnectionCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionCategory other && Equals(other);
        public bool Equals(ConnectionCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Deployment model version upgrade option.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentModelVersionUpgradeOption : IEquatable<DeploymentModelVersionUpgradeOption>
    {
        private readonly string _value;

        private DeploymentModelVersionUpgradeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentModelVersionUpgradeOption OnceNewDefaultVersionAvailable { get; } = new DeploymentModelVersionUpgradeOption("OnceNewDefaultVersionAvailable");
        public static DeploymentModelVersionUpgradeOption OnceCurrentVersionExpired { get; } = new DeploymentModelVersionUpgradeOption("OnceCurrentVersionExpired");
        public static DeploymentModelVersionUpgradeOption NoAutoUpgrade { get; } = new DeploymentModelVersionUpgradeOption("NoAutoUpgrade");

        public static bool operator ==(DeploymentModelVersionUpgradeOption left, DeploymentModelVersionUpgradeOption right) => left.Equals(right);
        public static bool operator !=(DeploymentModelVersionUpgradeOption left, DeploymentModelVersionUpgradeOption right) => !left.Equals(right);

        public static explicit operator string(DeploymentModelVersionUpgradeOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentModelVersionUpgradeOption other && Equals(other);
        public bool Equals(DeploymentModelVersionUpgradeOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Deployment scale type.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentScaleType : IEquatable<DeploymentScaleType>
    {
        private readonly string _value;

        private DeploymentScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentScaleType Standard { get; } = new DeploymentScaleType("Standard");
        public static DeploymentScaleType Manual { get; } = new DeploymentScaleType("Manual");

        public static bool operator ==(DeploymentScaleType left, DeploymentScaleType right) => left.Equals(right);
        public static bool operator !=(DeploymentScaleType left, DeploymentScaleType right) => !left.Equals(right);

        public static explicit operator string(DeploymentScaleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentScaleType other && Equals(other);
        public bool Equals(DeploymentScaleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryptionScope state.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionScopeState : IEquatable<EncryptionScopeState>
    {
        private readonly string _value;

        private EncryptionScopeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionScopeState Disabled { get; } = new EncryptionScopeState("Disabled");
        public static EncryptionScopeState Enabled { get; } = new EncryptionScopeState("Enabled");

        public static bool operator ==(EncryptionScopeState left, EncryptionScopeState right) => left.Equals(right);
        public static bool operator !=(EncryptionScopeState left, EncryptionScopeState right) => !left.Equals(right);

        public static explicit operator string(EncryptionScopeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionScopeState other && Equals(other);
        public bool Equals(EncryptionScopeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Account hosting model.
    /// </summary>
    [EnumType]
    public readonly struct HostingModel : IEquatable<HostingModel>
    {
        private readonly string _value;

        private HostingModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostingModel Web { get; } = new HostingModel("Web");
        public static HostingModel ConnectedContainer { get; } = new HostingModel("ConnectedContainer");
        public static HostingModel DisconnectedContainer { get; } = new HostingModel("DisconnectedContainer");
        public static HostingModel ProvisionedWeb { get; } = new HostingModel("ProvisionedWeb");

        public static bool operator ==(HostingModel left, HostingModel right) => left.Equals(right);
        public static bool operator !=(HostingModel left, HostingModel right) => !left.Equals(right);

        public static explicit operator string(HostingModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostingModel other && Equals(other);
        public bool Equals(HostingModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enumerates the possible value of keySource for Encryption
    /// </summary>
    [EnumType]
    public readonly struct KeySource : IEquatable<KeySource>
    {
        private readonly string _value;

        private KeySource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeySource Microsoft_CognitiveServices { get; } = new KeySource("Microsoft.CognitiveServices");
        public static KeySource Microsoft_KeyVault { get; } = new KeySource("Microsoft.KeyVault");

        public static bool operator ==(KeySource left, KeySource right) => left.Equals(right);
        public static bool operator !=(KeySource left, KeySource right) => !left.Equals(right);

        public static explicit operator string(KeySource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeySource other && Equals(other);
        public bool Equals(KeySource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ManagedPERequirement : IEquatable<ManagedPERequirement>
    {
        private readonly string _value;

        private ManagedPERequirement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedPERequirement Required { get; } = new ManagedPERequirement("Required");
        public static ManagedPERequirement NotRequired { get; } = new ManagedPERequirement("NotRequired");
        public static ManagedPERequirement NotApplicable { get; } = new ManagedPERequirement("NotApplicable");

        public static bool operator ==(ManagedPERequirement left, ManagedPERequirement right) => left.Equals(right);
        public static bool operator !=(ManagedPERequirement left, ManagedPERequirement right) => !left.Equals(right);

        public static explicit operator string(ManagedPERequirement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedPERequirement other && Equals(other);
        public bool Equals(ManagedPERequirement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ManagedPEStatus : IEquatable<ManagedPEStatus>
    {
        private readonly string _value;

        private ManagedPEStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedPEStatus Inactive { get; } = new ManagedPEStatus("Inactive");
        public static ManagedPEStatus Active { get; } = new ManagedPEStatus("Active");
        public static ManagedPEStatus NotApplicable { get; } = new ManagedPEStatus("NotApplicable");

        public static bool operator ==(ManagedPEStatus left, ManagedPEStatus right) => left.Equals(right);
        public static bool operator !=(ManagedPEStatus left, ManagedPEStatus right) => !left.Equals(right);

        public static explicit operator string(ManagedPEStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedPEStatus other && Equals(other);
        public bool Equals(ManagedPEStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
    /// </summary>
    [EnumType]
    public readonly struct NetworkRuleAction : IEquatable<NetworkRuleAction>
    {
        private readonly string _value;

        private NetworkRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkRuleAction Allow { get; } = new NetworkRuleAction("Allow");
        public static NetworkRuleAction Deny { get; } = new NetworkRuleAction("Deny");

        public static bool operator ==(NetworkRuleAction left, NetworkRuleAction right) => left.Equals(right);
        public static bool operator !=(NetworkRuleAction left, NetworkRuleAction right) => !left.Equals(right);

        public static explicit operator string(NetworkRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkRuleAction other && Equals(other);
        public bool Equals(NetworkRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public endpoint access is allowed for this account.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content source to apply the Content Filters.
    /// </summary>
    [EnumType]
    public readonly struct RaiPolicyContentSource : IEquatable<RaiPolicyContentSource>
    {
        private readonly string _value;

        private RaiPolicyContentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RaiPolicyContentSource Prompt { get; } = new RaiPolicyContentSource("Prompt");
        public static RaiPolicyContentSource Completion { get; } = new RaiPolicyContentSource("Completion");

        public static bool operator ==(RaiPolicyContentSource left, RaiPolicyContentSource right) => left.Equals(right);
        public static bool operator !=(RaiPolicyContentSource left, RaiPolicyContentSource right) => !left.Equals(right);

        public static explicit operator string(RaiPolicyContentSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RaiPolicyContentSource other && Equals(other);
        public bool Equals(RaiPolicyContentSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Content Filters mode.
    /// </summary>
    [EnumType]
    public readonly struct RaiPolicyMode : IEquatable<RaiPolicyMode>
    {
        private readonly string _value;

        private RaiPolicyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RaiPolicyMode Default { get; } = new RaiPolicyMode("Default");
        public static RaiPolicyMode Deferred { get; } = new RaiPolicyMode("Deferred");
        public static RaiPolicyMode Blocking { get; } = new RaiPolicyMode("Blocking");

        public static bool operator ==(RaiPolicyMode left, RaiPolicyMode right) => left.Equals(right);
        public static bool operator !=(RaiPolicyMode left, RaiPolicyMode right) => !left.Equals(right);

        public static explicit operator string(RaiPolicyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RaiPolicyMode other && Equals(other);
        public bool Equals(RaiPolicyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Multiregion routing methods.
    /// </summary>
    [EnumType]
    public readonly struct RoutingMethods : IEquatable<RoutingMethods>
    {
        private readonly string _value;

        private RoutingMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingMethods Priority { get; } = new RoutingMethods("Priority");
        public static RoutingMethods Weighted { get; } = new RoutingMethods("Weighted");
        public static RoutingMethods Performance { get; } = new RoutingMethods("Performance");

        public static bool operator ==(RoutingMethods left, RoutingMethods right) => left.Equals(right);
        public static bool operator !=(RoutingMethods left, RoutingMethods right) => !left.Equals(right);

        public static explicit operator string(RoutingMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingMethods other && Equals(other);
        public bool Equals(RoutingMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Free { get; } = new SkuTier("Free");
        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");
        public static SkuTier Enterprise { get; } = new SkuTier("Enterprise");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
