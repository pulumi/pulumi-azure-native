// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.CognitiveServices.V20160201Preview
{
    /// <summary>
    /// Required. Indicates the type of cognitive service account.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind Academic { get; } = new Kind("Academic");
        public static Kind Bing_Autosuggest { get; } = new Kind("Bing.Autosuggest");
        public static Kind Bing_Search { get; } = new Kind("Bing.Search");
        public static Kind Bing_Speech { get; } = new Kind("Bing.Speech");
        public static Kind Bing_SpellCheck { get; } = new Kind("Bing.SpellCheck");
        public static Kind ComputerVision { get; } = new Kind("ComputerVision");
        public static Kind ContentModerator { get; } = new Kind("ContentModerator");
        public static Kind Emotion { get; } = new Kind("Emotion");
        public static Kind Face { get; } = new Kind("Face");
        public static Kind LUIS { get; } = new Kind("LUIS");
        public static Kind Recommendations { get; } = new Kind("Recommendations");
        public static Kind SpeakerRecognition { get; } = new Kind("SpeakerRecognition");
        public static Kind Speech { get; } = new Kind("Speech");
        public static Kind SpeechTranslation { get; } = new Kind("SpeechTranslation");
        public static Kind TextAnalytics { get; } = new Kind("TextAnalytics");
        public static Kind TextTranslation { get; } = new Kind("TextTranslation");
        public static Kind WebLM { get; } = new Kind("WebLM");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the sku name. Required for account creation, optional for update.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName F0 { get; } = new SkuName("F0");
        public static SkuName P0 { get; } = new SkuName("P0");
        public static SkuName P1 { get; } = new SkuName("P1");
        public static SkuName P2 { get; } = new SkuName("P2");
        public static SkuName S0 { get; } = new SkuName("S0");
        public static SkuName S1 { get; } = new SkuName("S1");
        public static SkuName S2 { get; } = new SkuName("S2");
        public static SkuName S3 { get; } = new SkuName("S3");
        public static SkuName S4 { get; } = new SkuName("S4");
        public static SkuName S5 { get; } = new SkuName("S5");
        public static SkuName S6 { get; } = new SkuName("S6");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
