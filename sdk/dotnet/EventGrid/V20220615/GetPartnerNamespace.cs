// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20220615
{
    public static class GetPartnerNamespace
    {
        /// <summary>
        /// EventGrid Partner Namespace.
        /// </summary>
        public static Task<GetPartnerNamespaceResult> InvokeAsync(GetPartnerNamespaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPartnerNamespaceResult>("azure-native:eventgrid/v20220615:getPartnerNamespace", args ?? new GetPartnerNamespaceArgs(), options.WithDefaults());

        /// <summary>
        /// EventGrid Partner Namespace.
        /// </summary>
        public static Output<GetPartnerNamespaceResult> Invoke(GetPartnerNamespaceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPartnerNamespaceResult>("azure-native:eventgrid/v20220615:getPartnerNamespace", args ?? new GetPartnerNamespaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerNamespaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner namespace.
        /// </summary>
        [Input("partnerNamespaceName", required: true)]
        public string PartnerNamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerNamespaceArgs()
        {
        }
        public static new GetPartnerNamespaceArgs Empty => new GetPartnerNamespaceArgs();
    }

    public sealed class GetPartnerNamespaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner namespace.
        /// </summary>
        [Input("partnerNamespaceName", required: true)]
        public Input<string> PartnerNamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerNamespaceInvokeArgs()
        {
        }
        public static new GetPartnerNamespaceInvokeArgs Empty => new GetPartnerNamespaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerNamespaceResult
    {
        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace.
        /// </summary>
        public readonly bool? DisableLocalAuth;
        /// <summary>
        /// Endpoint for the partner namespace.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundIpRuleResponse> InboundIpRules;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
        /// </summary>
        public readonly string? PartnerRegistrationFullyQualifiedId;
        /// <summary>
        /// This determines if events published to this partner namespace should use the source attribute in the event payload
        /// or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
        /// </summary>
        public readonly string? PartnerTopicRoutingMode;
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the partner namespace.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The system metadata relating to Partner Namespace resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerNamespaceResult(
            bool? disableLocalAuth,

            string endpoint,

            string id,

            ImmutableArray<Outputs.InboundIpRuleResponse> inboundIpRules,

            string location,

            string name,

            string? partnerRegistrationFullyQualifiedId,

            string? partnerTopicRoutingMode,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DisableLocalAuth = disableLocalAuth;
            Endpoint = endpoint;
            Id = id;
            InboundIpRules = inboundIpRules;
            Location = location;
            Name = name;
            PartnerRegistrationFullyQualifiedId = partnerRegistrationFullyQualifiedId;
            PartnerTopicRoutingMode = partnerTopicRoutingMode;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
