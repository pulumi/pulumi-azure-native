// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20240601Preview
{
    public static class GetPartnerConfiguration
    {
        /// <summary>
        /// Get properties of a partner configuration.
        /// </summary>
        public static Task<GetPartnerConfigurationResult> InvokeAsync(GetPartnerConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerConfigurationResult>("azure-native:eventgrid/v20240601preview:getPartnerConfiguration", args ?? new GetPartnerConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a partner configuration.
        /// </summary>
        public static Output<GetPartnerConfigurationResult> Invoke(GetPartnerConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerConfigurationResult>("azure-native:eventgrid/v20240601preview:getPartnerConfiguration", args ?? new GetPartnerConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerConfigurationArgs()
        {
        }
        public static new GetPartnerConfigurationArgs Empty => new GetPartnerConfigurationArgs();
    }

    public sealed class GetPartnerConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerConfigurationInvokeArgs()
        {
        }
        public static new GetPartnerConfigurationInvokeArgs Empty => new GetPartnerConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerConfigurationResult
    {
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The details of authorized partners.
        /// </summary>
        public readonly Outputs.PartnerAuthorizationResponse? PartnerAuthorization;
        /// <summary>
        /// Provisioning state of the partner configuration.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The system metadata relating to partner configuration resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerConfigurationResult(
            string id,

            string? location,

            string name,

            Outputs.PartnerAuthorizationResponse? partnerAuthorization,

            string? provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            PartnerAuthorization = partnerAuthorization;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
