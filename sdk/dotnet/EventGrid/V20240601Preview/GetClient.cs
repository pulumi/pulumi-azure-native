// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20240601Preview
{
    public static class GetClient
    {
        /// <summary>
        /// Get properties of a client.
        /// </summary>
        public static Task<GetClientResult> InvokeAsync(GetClientArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClientResult>("azure-native:eventgrid/v20240601preview:getClient", args ?? new GetClientArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a client.
        /// </summary>
        public static Output<GetClientResult> Invoke(GetClientInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClientResult>("azure-native:eventgrid/v20240601preview:getClient", args ?? new GetClientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the client.
        /// </summary>
        [Input("clientName", required: true)]
        public string ClientName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClientArgs()
        {
        }
        public static new GetClientArgs Empty => new GetClientArgs();
    }

    public sealed class GetClientInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the client.
        /// </summary>
        [Input("clientName", required: true)]
        public Input<string> ClientName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetClientInvokeArgs()
        {
        }
        public static new GetClientInvokeArgs Empty => new GetClientInvokeArgs();
    }


    [OutputType]
    public sealed class GetClientResult
    {
        /// <summary>
        /// Attributes for the client. Supported values are int, bool, string, string[].
        /// Example:
        /// "attributes": { "room": "345", "floor": 12, "deviceTypes": ["Fan", "Light"] }
        /// </summary>
        public readonly object? Attributes;
        /// <summary>
        /// The name presented by the client for authentication. The default value is the name of the resource.
        /// </summary>
        public readonly string? AuthenticationName;
        /// <summary>
        /// The client certificate authentication information.
        /// </summary>
        public readonly Outputs.ClientCertificateAuthenticationResponse? ClientCertificateAuthentication;
        /// <summary>
        /// Description for the Client resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Client resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Indicates if the client is enabled or not. Default value is Enabled.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The system metadata relating to the Client resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetClientResult(
            object? attributes,

            string? authenticationName,

            Outputs.ClientCertificateAuthenticationResponse? clientCertificateAuthentication,

            string? description,

            string id,

            string name,

            string provisioningState,

            string? state,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Attributes = attributes;
            AuthenticationName = authenticationName;
            ClientCertificateAuthentication = clientCertificateAuthentication;
            Description = description;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            State = state;
            SystemData = systemData;
            Type = type;
        }
    }
}
