// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20240601Preview
{
    public static class GetTopic
    {
        /// <summary>
        /// Get properties of a topic.
        /// </summary>
        public static Task<GetTopicResult> InvokeAsync(GetTopicArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicResult>("azure-native:eventgrid/v20240601preview:getTopic", args ?? new GetTopicArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a topic.
        /// </summary>
        public static Output<GetTopicResult> Invoke(GetTopicInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicResult>("azure-native:eventgrid/v20240601preview:getTopic", args ?? new GetTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the topic.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetTopicArgs()
        {
        }
        public static new GetTopicArgs Empty => new GetTopicArgs();
    }

    public sealed class GetTopicInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetTopicInvokeArgs()
        {
        }
        public static new GetTopicInvokeArgs Empty => new GetTopicInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicResult
    {
        /// <summary>
        /// Data Residency Boundary of the resource.
        /// </summary>
        public readonly string? DataResidencyBoundary;
        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic.
        /// </summary>
        public readonly bool? DisableLocalAuth;
        /// <summary>
        /// Endpoint for the topic.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Event Type Information for the user topic. This information is provided by the publisher and can be used by the 
        /// subscriber to view different types of events that are published.
        /// </summary>
        public readonly Outputs.EventTypeInfoResponse? EventTypeInfo;
        /// <summary>
        /// Extended location of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity information for the resource.
        /// </summary>
        public readonly Outputs.IdentityInfoResponse? Identity;
        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundIpRuleResponse> InboundIpRules;
        /// <summary>
        /// This determines the format that Event Grid should expect for incoming events published to the topic.
        /// </summary>
        public readonly string? InputSchema;
        /// <summary>
        /// This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema.
        /// </summary>
        public readonly Outputs.JsonInputSchemaMappingResponse? InputSchemaMapping;
        /// <summary>
        /// Kind of the resource.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Metric resource id for the topic.
        /// </summary>
        public readonly string MetricResourceId;
        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this topic
        /// </summary>
        public readonly string? MinimumTlsVersionAllowed;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the topic.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" /&gt;
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The Sku pricing tier for the topic.
        /// </summary>
        public readonly Outputs.ResourceSkuResponse? Sku;
        /// <summary>
        /// The system metadata relating to Topic resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTopicResult(
            string? dataResidencyBoundary,

            bool? disableLocalAuth,

            string endpoint,

            Outputs.EventTypeInfoResponse? eventTypeInfo,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            Outputs.IdentityInfoResponse? identity,

            ImmutableArray<Outputs.InboundIpRuleResponse> inboundIpRules,

            string? inputSchema,

            Outputs.JsonInputSchemaMappingResponse? inputSchemaMapping,

            string? kind,

            string location,

            string metricResourceId,

            string? minimumTlsVersionAllowed,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.ResourceSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DataResidencyBoundary = dataResidencyBoundary;
            DisableLocalAuth = disableLocalAuth;
            Endpoint = endpoint;
            EventTypeInfo = eventTypeInfo;
            ExtendedLocation = extendedLocation;
            Id = id;
            Identity = identity;
            InboundIpRules = inboundIpRules;
            InputSchema = inputSchema;
            InputSchemaMapping = inputSchemaMapping;
            Kind = kind;
            Location = location;
            MetricResourceId = metricResourceId;
            MinimumTlsVersionAllowed = minimumTlsVersionAllowed;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
