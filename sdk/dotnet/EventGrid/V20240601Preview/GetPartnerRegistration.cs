// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20240601Preview
{
    public static class GetPartnerRegistration
    {
        /// <summary>
        /// Gets a partner registration with the specified parameters.
        /// </summary>
        public static Task<GetPartnerRegistrationResult> InvokeAsync(GetPartnerRegistrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerRegistrationResult>("azure-native:eventgrid/v20240601preview:getPartnerRegistration", args ?? new GetPartnerRegistrationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a partner registration with the specified parameters.
        /// </summary>
        public static Output<GetPartnerRegistrationResult> Invoke(GetPartnerRegistrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerRegistrationResult>("azure-native:eventgrid/v20240601preview:getPartnerRegistration", args ?? new GetPartnerRegistrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerRegistrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner registration.
        /// </summary>
        [Input("partnerRegistrationName", required: true)]
        public string PartnerRegistrationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerRegistrationArgs()
        {
        }
        public static new GetPartnerRegistrationArgs Empty => new GetPartnerRegistrationArgs();
    }

    public sealed class GetPartnerRegistrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner registration.
        /// </summary>
        [Input("partnerRegistrationName", required: true)]
        public Input<string> PartnerRegistrationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerRegistrationInvokeArgs()
        {
        }
        public static new GetPartnerRegistrationInvokeArgs Empty => new GetPartnerRegistrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerRegistrationResult
    {
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The immutableId of the corresponding partner registration.
        /// Note: This property is marked for deprecation and is not supported in any future GA API version
        /// </summary>
        public readonly string? PartnerRegistrationImmutableId;
        /// <summary>
        /// Provisioning state of the partner registration.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system metadata relating to Partner Registration resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerRegistrationResult(
            string id,

            string location,

            string name,

            string? partnerRegistrationImmutableId,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            PartnerRegistrationImmutableId = partnerRegistrationImmutableId;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
