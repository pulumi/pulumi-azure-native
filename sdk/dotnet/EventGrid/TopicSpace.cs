// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    /// <summary>
    /// The Topic space resource.
    /// Azure REST API version: 2023-06-01-preview.
    /// 
    /// Other available API versions: 2023-12-15-preview, 2024-06-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:eventgrid:TopicSpace")]
    public partial class TopicSpace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description for the Topic Space resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the TopicSpace resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to the TopicSpace resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The topic filters in the topic space.
        /// Example: "topicTemplates": [ 
        ///               "devices/foo/bar",
        ///               "devices/topic1/+",
        ///               "devices/${principal.name}/${principal.attributes.keyName}" ].
        /// </summary>
        [Output("topicTemplates")]
        public Output<ImmutableArray<string>> TopicTemplates { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a TopicSpace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TopicSpace(string name, TopicSpaceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:TopicSpace", name, args ?? new TopicSpaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TopicSpace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:TopicSpace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20230601preview:TopicSpace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20231215preview:TopicSpace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20240601preview:TopicSpace" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TopicSpace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TopicSpace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TopicSpace(name, id, options);
        }
    }

    public sealed class TopicSpaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the Topic Space resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The topic space name.
        /// </summary>
        [Input("topicSpaceName")]
        public Input<string>? TopicSpaceName { get; set; }

        [Input("topicTemplates")]
        private InputList<string>? _topicTemplates;

        /// <summary>
        /// The topic filters in the topic space.
        /// Example: "topicTemplates": [ 
        ///               "devices/foo/bar",
        ///               "devices/topic1/+",
        ///               "devices/${principal.name}/${principal.attributes.keyName}" ].
        /// </summary>
        public InputList<string> TopicTemplates
        {
            get => _topicTemplates ?? (_topicTemplates = new InputList<string>());
            set => _topicTemplates = value;
        }

        public TopicSpaceArgs()
        {
        }
        public static new TopicSpaceArgs Empty => new TopicSpaceArgs();
    }
}
