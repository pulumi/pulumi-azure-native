// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.EventGrid.V20210601Preview
{
    /// <summary>
    /// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
    /// </summary>
    [EnumType]
    public readonly struct AdvancedFilterOperatorType : IEquatable<AdvancedFilterOperatorType>
    {
        private readonly string _value;

        private AdvancedFilterOperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AdvancedFilterOperatorType NumberIn { get; } = new AdvancedFilterOperatorType("NumberIn");
        public static AdvancedFilterOperatorType NumberNotIn { get; } = new AdvancedFilterOperatorType("NumberNotIn");
        public static AdvancedFilterOperatorType NumberLessThan { get; } = new AdvancedFilterOperatorType("NumberLessThan");
        public static AdvancedFilterOperatorType NumberGreaterThan { get; } = new AdvancedFilterOperatorType("NumberGreaterThan");
        public static AdvancedFilterOperatorType NumberLessThanOrEquals { get; } = new AdvancedFilterOperatorType("NumberLessThanOrEquals");
        public static AdvancedFilterOperatorType NumberGreaterThanOrEquals { get; } = new AdvancedFilterOperatorType("NumberGreaterThanOrEquals");
        public static AdvancedFilterOperatorType BoolEquals { get; } = new AdvancedFilterOperatorType("BoolEquals");
        public static AdvancedFilterOperatorType StringIn { get; } = new AdvancedFilterOperatorType("StringIn");
        public static AdvancedFilterOperatorType StringNotIn { get; } = new AdvancedFilterOperatorType("StringNotIn");
        public static AdvancedFilterOperatorType StringBeginsWith { get; } = new AdvancedFilterOperatorType("StringBeginsWith");
        public static AdvancedFilterOperatorType StringEndsWith { get; } = new AdvancedFilterOperatorType("StringEndsWith");
        public static AdvancedFilterOperatorType StringContains { get; } = new AdvancedFilterOperatorType("StringContains");
        public static AdvancedFilterOperatorType NumberInRange { get; } = new AdvancedFilterOperatorType("NumberInRange");
        public static AdvancedFilterOperatorType NumberNotInRange { get; } = new AdvancedFilterOperatorType("NumberNotInRange");
        public static AdvancedFilterOperatorType StringNotBeginsWith { get; } = new AdvancedFilterOperatorType("StringNotBeginsWith");
        public static AdvancedFilterOperatorType StringNotEndsWith { get; } = new AdvancedFilterOperatorType("StringNotEndsWith");
        public static AdvancedFilterOperatorType StringNotContains { get; } = new AdvancedFilterOperatorType("StringNotContains");
        public static AdvancedFilterOperatorType IsNullOrUndefined { get; } = new AdvancedFilterOperatorType("IsNullOrUndefined");
        public static AdvancedFilterOperatorType IsNotNull { get; } = new AdvancedFilterOperatorType("IsNotNull");

        public static bool operator ==(AdvancedFilterOperatorType left, AdvancedFilterOperatorType right) => left.Equals(right);
        public static bool operator !=(AdvancedFilterOperatorType left, AdvancedFilterOperatorType right) => !left.Equals(right);

        public static explicit operator string(AdvancedFilterOperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AdvancedFilterOperatorType other && Equals(other);
        public bool Equals(AdvancedFilterOperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned_UserAssigned { get; } = new IdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to perform based on the match or no match of the IpMask.
    /// </summary>
    [EnumType]
    public readonly struct IpActionType : IEquatable<IpActionType>
    {
        private readonly string _value;

        private IpActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpActionType Allow { get; } = new IpActionType("Allow");

        public static bool operator ==(IpActionType left, IpActionType right) => left.Equals(right);
        public static bool operator !=(IpActionType left, IpActionType right) => !left.Equals(right);

        public static explicit operator string(IpActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpActionType other && Equals(other);
        public bool Equals(IpActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Visibility state of the partner registration.
    /// </summary>
    [EnumType]
    public readonly struct PartnerRegistrationVisibilityState : IEquatable<PartnerRegistrationVisibilityState>
    {
        private readonly string _value;

        private PartnerRegistrationVisibilityState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PartnerRegistrationVisibilityState Hidden { get; } = new PartnerRegistrationVisibilityState("Hidden");
        public static PartnerRegistrationVisibilityState PublicPreview { get; } = new PartnerRegistrationVisibilityState("PublicPreview");
        public static PartnerRegistrationVisibilityState GenerallyAvailable { get; } = new PartnerRegistrationVisibilityState("GenerallyAvailable");

        public static bool operator ==(PartnerRegistrationVisibilityState left, PartnerRegistrationVisibilityState right) => left.Equals(right);
        public static bool operator !=(PartnerRegistrationVisibilityState left, PartnerRegistrationVisibilityState right) => !left.Equals(right);

        public static explicit operator string(PartnerRegistrationVisibilityState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PartnerRegistrationVisibilityState other && Equals(other);
        public bool Equals(PartnerRegistrationVisibilityState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This determines if traffic is allowed over public network. By default it is enabled.
    /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" /&gt;
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
