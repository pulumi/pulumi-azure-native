// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20210601Preview
{
    /// <summary>
    /// EventGrid Domain.
    /// </summary>
    [AzureNativeResourceType("azure-native:eventgrid/v20210601preview:Domain")]
    public partial class Domain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
        /// created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
        /// by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
        /// flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
        /// domain topic on demand if needed.
        /// </summary>
        [Output("autoCreateTopicWithFirstSubscription")]
        public Output<bool?> AutoCreateTopicWithFirstSubscription { get; private set; } = null!;

        /// <summary>
        /// This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
        /// of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
        /// (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
        /// control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
        /// resources by the user.
        /// </summary>
        [Output("autoDeleteTopicWithLastSubscription")]
        public Output<bool?> AutoDeleteTopicWithLastSubscription { get; private set; } = null!;

        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain.
        /// </summary>
        [Output("disableLocalAuth")]
        public Output<bool?> DisableLocalAuth { get; private set; } = null!;

        /// <summary>
        /// Endpoint for the Event Grid Domain Resource which is used for publishing the events.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Identity information for the Event Grid Domain resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityInfoResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        [Output("inboundIpRules")]
        public Output<ImmutableArray<Outputs.InboundIpRuleResponse>> InboundIpRules { get; private set; } = null!;

        /// <summary>
        /// This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource.
        /// </summary>
        [Output("inputSchema")]
        public Output<string?> InputSchema { get; private set; } = null!;

        /// <summary>
        /// Information about the InputSchemaMapping which specified the info about mapping event payload.
        /// </summary>
        [Output("inputSchemaMapping")]
        public Output<Outputs.JsonInputSchemaMappingResponse?> InputSchemaMapping { get; private set; } = null!;

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metric resource id for the Event Grid Domain Resource.
        /// </summary>
        [Output("metricResourceId")]
        public Output<string> MetricResourceId { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of private endpoint connections.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the Event Grid Domain Resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" /&gt;
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The Sku pricing tier for the Event Grid Domain resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ResourceSkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to the Event Grid Domain resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Domain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Domain(string name, DomainArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid/v20210601preview:Domain", name, args ?? new DomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Domain(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid/v20210601preview:Domain", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20180915preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20190201preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20190601:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20200101preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20200401preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20200601:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20201015preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20211015preview:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20211201:Domain"},
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20220615:Domain"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Domain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Domain Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Domain(name, id, options);
        }
    }

    public sealed class DomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
        /// created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
        /// by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
        /// flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
        /// domain topic on demand if needed.
        /// </summary>
        [Input("autoCreateTopicWithFirstSubscription")]
        public Input<bool>? AutoCreateTopicWithFirstSubscription { get; set; }

        /// <summary>
        /// This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
        /// of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
        /// (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
        /// control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
        /// resources by the user.
        /// </summary>
        [Input("autoDeleteTopicWithLastSubscription")]
        public Input<bool>? AutoDeleteTopicWithLastSubscription { get; set; }

        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain.
        /// </summary>
        [Input("disableLocalAuth")]
        public Input<bool>? DisableLocalAuth { get; set; }

        /// <summary>
        /// Name of the domain.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Identity information for the Event Grid Domain resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityInfoArgs>? Identity { get; set; }

        [Input("inboundIpRules")]
        private InputList<Inputs.InboundIpRuleArgs>? _inboundIpRules;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public InputList<Inputs.InboundIpRuleArgs> InboundIpRules
        {
            get => _inboundIpRules ?? (_inboundIpRules = new InputList<Inputs.InboundIpRuleArgs>());
            set => _inboundIpRules = value;
        }

        /// <summary>
        /// This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource.
        /// </summary>
        [Input("inputSchema")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.V20210601Preview.InputSchema>? InputSchema { get; set; }

        /// <summary>
        /// Information about the InputSchemaMapping which specified the info about mapping event payload.
        /// </summary>
        [Input("inputSchemaMapping")]
        public Input<Inputs.JsonInputSchemaMappingArgs>? InputSchemaMapping { get; set; }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" /&gt;
        /// </summary>
        [Input("publicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.V20210601Preview.PublicNetworkAccess>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Sku pricing tier for the Event Grid Domain resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ResourceSkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DomainArgs()
        {
            AutoCreateTopicWithFirstSubscription = true;
            AutoDeleteTopicWithLastSubscription = true;
            DisableLocalAuth = false;
            InputSchema = "EventGridSchema";
            PublicNetworkAccess = "Enabled";
        }
        public static new DomainArgs Empty => new DomainArgs();
    }
}
