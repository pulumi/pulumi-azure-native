// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    public static class GetPartnerTopic
    {
        /// <summary>
        /// Get properties of a partner topic.
        /// Azure REST API version: 2022-06-15.
        /// </summary>
        public static Task<GetPartnerTopicResult> InvokeAsync(GetPartnerTopicArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerTopicResult>("azure-native:eventgrid:getPartnerTopic", args ?? new GetPartnerTopicArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a partner topic.
        /// Azure REST API version: 2022-06-15.
        /// </summary>
        public static Output<GetPartnerTopicResult> Invoke(GetPartnerTopicInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerTopicResult>("azure-native:eventgrid:getPartnerTopic", args ?? new GetPartnerTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerTopicArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner topic.
        /// </summary>
        [Input("partnerTopicName", required: true)]
        public string PartnerTopicName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerTopicArgs()
        {
        }
        public static new GetPartnerTopicArgs Empty => new GetPartnerTopicArgs();
    }

    public sealed class GetPartnerTopicInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the partner topic.
        /// </summary>
        [Input("partnerTopicName", required: true)]
        public Input<string> PartnerTopicName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerTopicInvokeArgs()
        {
        }
        public static new GetPartnerTopicInvokeArgs Empty => new GetPartnerTopicInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerTopicResult
    {
        /// <summary>
        /// Activation state of the partner topic.
        /// </summary>
        public readonly string? ActivationState;
        /// <summary>
        /// Event Type information from the corresponding event channel.
        /// </summary>
        public readonly Outputs.EventTypeInfoResponse? EventTypeInfo;
        /// <summary>
        /// Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
        /// the partner topic and corresponding event channel are deleted.
        /// </summary>
        public readonly string? ExpirationTimeIfNotActivatedUtc;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity information for the Partner Topic resource.
        /// </summary>
        public readonly Outputs.IdentityInfoResponse? Identity;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Context or helpful message that can be used during the approval process by the subscriber.
        /// </summary>
        public readonly string? MessageForActivation;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The immutableId of the corresponding partner registration.
        /// </summary>
        public readonly string? PartnerRegistrationImmutableId;
        /// <summary>
        /// Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
        /// </summary>
        public readonly string? PartnerTopicFriendlyDescription;
        /// <summary>
        /// Provisioning state of the partner topic.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Source associated with this partner topic. This represents a unique partner resource.
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// The system metadata relating to Partner Topic resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerTopicResult(
            string? activationState,

            Outputs.EventTypeInfoResponse? eventTypeInfo,

            string? expirationTimeIfNotActivatedUtc,

            string id,

            Outputs.IdentityInfoResponse? identity,

            string location,

            string? messageForActivation,

            string name,

            string? partnerRegistrationImmutableId,

            string? partnerTopicFriendlyDescription,

            string provisioningState,

            string? source,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ActivationState = activationState;
            EventTypeInfo = eventTypeInfo;
            ExpirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            Id = id;
            Identity = identity;
            Location = location;
            MessageForActivation = messageForActivation;
            Name = name;
            PartnerRegistrationImmutableId = partnerRegistrationImmutableId;
            PartnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            ProvisioningState = provisioningState;
            Source = source;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
