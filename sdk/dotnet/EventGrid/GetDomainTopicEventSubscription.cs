// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    public static class GetDomainTopicEventSubscription
    {
        /// <summary>
        /// Get properties of a nested event subscription for a domain topic.
        /// Azure REST API version: 2022-06-15.
        /// </summary>
        public static Task<GetDomainTopicEventSubscriptionResult> InvokeAsync(GetDomainTopicEventSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainTopicEventSubscriptionResult>("azure-native:eventgrid:getDomainTopicEventSubscription", args ?? new GetDomainTopicEventSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a nested event subscription for a domain topic.
        /// Azure REST API version: 2022-06-15.
        /// </summary>
        public static Output<GetDomainTopicEventSubscriptionResult> Invoke(GetDomainTopicEventSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainTopicEventSubscriptionResult>("azure-native:eventgrid:getDomainTopicEventSubscription", args ?? new GetDomainTopicEventSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainTopicEventSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the top level domain.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        /// <summary>
        /// Name of the event subscription.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public string EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the domain topic.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetDomainTopicEventSubscriptionArgs()
        {
        }
        public static new GetDomainTopicEventSubscriptionArgs Empty => new GetDomainTopicEventSubscriptionArgs();
    }

    public sealed class GetDomainTopicEventSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the top level domain.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Name of the event subscription.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public Input<string> EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the domain topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetDomainTopicEventSubscriptionInvokeArgs()
        {
        }
        public static new GetDomainTopicEventSubscriptionInvokeArgs Empty => new GetDomainTopicEventSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainTopicEventSubscriptionResult
    {
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.StorageBlobDeadLetterDestinationResponse? DeadLetterDestination;
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.DeadLetterWithResourceIdentityResponse? DeadLetterWithResourceIdentity;
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.DeliveryWithResourceIdentityResponse? DeliveryWithResourceIdentity;
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly object? Destination;
        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        public readonly string? EventDeliverySchema;
        /// <summary>
        /// Expiration time of the event subscription.
        /// </summary>
        public readonly string? ExpirationTimeUtc;
        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        public readonly Outputs.EventSubscriptionFilterResponse? Filter;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of user defined labels.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        public readonly Outputs.RetryPolicyResponse? RetryPolicy;
        /// <summary>
        /// The system metadata relating to Event Subscription resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Name of the topic of the event subscription.
        /// </summary>
        public readonly string Topic;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDomainTopicEventSubscriptionResult(
            Outputs.StorageBlobDeadLetterDestinationResponse? deadLetterDestination,

            Outputs.DeadLetterWithResourceIdentityResponse? deadLetterWithResourceIdentity,

            Outputs.DeliveryWithResourceIdentityResponse? deliveryWithResourceIdentity,

            object? destination,

            string? eventDeliverySchema,

            string? expirationTimeUtc,

            Outputs.EventSubscriptionFilterResponse? filter,

            string id,

            ImmutableArray<string> labels,

            string name,

            string provisioningState,

            Outputs.RetryPolicyResponse? retryPolicy,

            Outputs.SystemDataResponse systemData,

            string topic,

            string type)
        {
            DeadLetterDestination = deadLetterDestination;
            DeadLetterWithResourceIdentity = deadLetterWithResourceIdentity;
            DeliveryWithResourceIdentity = deliveryWithResourceIdentity;
            Destination = destination;
            EventDeliverySchema = eventDeliverySchema;
            ExpirationTimeUtc = expirationTimeUtc;
            Filter = filter;
            Id = id;
            Labels = labels;
            Name = name;
            ProvisioningState = provisioningState;
            RetryPolicy = retryPolicy;
            SystemData = systemData;
            Topic = topic;
            Type = type;
        }
    }
}
