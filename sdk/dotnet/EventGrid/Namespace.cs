// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    /// <summary>
    /// Namespace resource.
    /// Azure REST API version: 2023-06-01-preview.
    /// 
    /// Other available API versions: 2023-12-15-preview, 2024-06-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:eventgrid:Namespace")]
    public partial class Namespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identity information for the Namespace resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityInfoResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        [Output("inboundIpRules")]
        public Output<ImmutableArray<Outputs.InboundIpRuleResponse>> InboundIpRules { get; private set; } = null!;

        /// <summary>
        /// Allows the user to specify if the service is zone-redundant. This is a required property and user needs to specify this value explicitly.
        /// Once specified, this property cannot be updated.
        /// </summary>
        [Output("isZoneRedundant")]
        public Output<bool?> IsZoneRedundant { get; private set; } = null!;

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this namespace. Only TLS version 1.2 is supported.
        /// </summary>
        [Output("minimumTlsVersionAllowed")]
        public Output<string?> MinimumTlsVersionAllowed { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the namespace resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PubSub.NamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Represents available Sku pricing tiers.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.NamespaceSkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to the namespace resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Topic spaces configuration information for the namespace resource
        /// </summary>
        [Output("topicSpacesConfiguration")]
        public Output<Outputs.TopicSpacesConfigurationResponse?> TopicSpacesConfiguration { get; private set; } = null!;

        /// <summary>
        /// Topics configuration information for the namespace resource
        /// </summary>
        [Output("topicsConfiguration")]
        public Output<Outputs.TopicsConfigurationResponse?> TopicsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid:Namespace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20230601preview:Namespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20231215preview:Namespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20240601preview:Namespace" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, options);
        }
    }

    public sealed class NamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identity information for the Namespace resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityInfoArgs>? Identity { get; set; }

        [Input("inboundIpRules")]
        private InputList<Inputs.InboundIpRuleArgs>? _inboundIpRules;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public InputList<Inputs.InboundIpRuleArgs> InboundIpRules
        {
            get => _inboundIpRules ?? (_inboundIpRules = new InputList<Inputs.InboundIpRuleArgs>());
            set => _inboundIpRules = value;
        }

        /// <summary>
        /// Allows the user to specify if the service is zone-redundant. This is a required property and user needs to specify this value explicitly.
        /// Once specified, this property cannot be updated.
        /// </summary>
        [Input("isZoneRedundant")]
        public Input<bool>? IsZoneRedundant { get; set; }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this namespace. Only TLS version 1.2 is supported.
        /// </summary>
        [Input("minimumTlsVersionAllowed")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.TlsVersion>? MinimumTlsVersionAllowed { get; set; }

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        [Input("privateEndpointConnections")]
        private InputList<Inputs.PrivateEndpointConnectionArgs>? _privateEndpointConnections;
        public InputList<Inputs.PrivateEndpointConnectionArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PubSub.NamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        [Input("publicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.PublicNetworkAccess>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Represents available Sku pricing tiers.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.NamespaceSkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Topic spaces configuration information for the namespace resource
        /// </summary>
        [Input("topicSpacesConfiguration")]
        public Input<Inputs.TopicSpacesConfigurationArgs>? TopicSpacesConfiguration { get; set; }

        public NamespaceArgs()
        {
        }
        public static new NamespaceArgs Empty => new NamespaceArgs();
    }
}
