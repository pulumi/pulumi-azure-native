// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20230601Preview
{
    public static class GetTopicSpace
    {
        /// <summary>
        /// Get properties of a topic space.
        /// </summary>
        public static Task<GetTopicSpaceResult> InvokeAsync(GetTopicSpaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicSpaceResult>("azure-native:eventgrid/v20230601preview:getTopicSpace", args ?? new GetTopicSpaceArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a topic space.
        /// </summary>
        public static Output<GetTopicSpaceResult> Invoke(GetTopicSpaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicSpaceResult>("azure-native:eventgrid/v20230601preview:getTopicSpace", args ?? new GetTopicSpaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicSpaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Topic space.
        /// </summary>
        [Input("topicSpaceName", required: true)]
        public string TopicSpaceName { get; set; } = null!;

        public GetTopicSpaceArgs()
        {
        }
        public static new GetTopicSpaceArgs Empty => new GetTopicSpaceArgs();
    }

    public sealed class GetTopicSpaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Topic space.
        /// </summary>
        [Input("topicSpaceName", required: true)]
        public Input<string> TopicSpaceName { get; set; } = null!;

        public GetTopicSpaceInvokeArgs()
        {
        }
        public static new GetTopicSpaceInvokeArgs Empty => new GetTopicSpaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicSpaceResult
    {
        /// <summary>
        /// Description for the Topic Space resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the TopicSpace resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system metadata relating to the TopicSpace resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The topic filters in the topic space.
        /// Example: "topicTemplates": [ 
        ///               "devices/foo/bar",
        ///               "devices/topic1/+",
        ///               "devices/${principal.name}/${principal.attributes.keyName}" ].
        /// </summary>
        public readonly ImmutableArray<string> TopicTemplates;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTopicSpaceResult(
            string? description,

            string id,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableArray<string> topicTemplates,

            string type)
        {
            Description = description;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            TopicTemplates = topicTemplates;
            Type = type;
        }
    }
}
