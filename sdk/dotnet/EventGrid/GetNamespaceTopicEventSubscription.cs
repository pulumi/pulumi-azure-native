// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid
{
    public static class GetNamespaceTopicEventSubscription
    {
        /// <summary>
        /// Get properties of an event subscription of a namespace topic.
        /// Azure REST API version: 2023-06-01-preview.
        /// 
        /// Other available API versions: 2023-12-15-preview, 2024-06-01-preview.
        /// </summary>
        public static Task<GetNamespaceTopicEventSubscriptionResult> InvokeAsync(GetNamespaceTopicEventSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceTopicEventSubscriptionResult>("azure-native:eventgrid:getNamespaceTopicEventSubscription", args ?? new GetNamespaceTopicEventSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of an event subscription of a namespace topic.
        /// Azure REST API version: 2023-06-01-preview.
        /// 
        /// Other available API versions: 2023-12-15-preview, 2024-06-01-preview.
        /// </summary>
        public static Output<GetNamespaceTopicEventSubscriptionResult> Invoke(GetNamespaceTopicEventSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceTopicEventSubscriptionResult>("azure-native:eventgrid:getNamespaceTopicEventSubscription", args ?? new GetNamespaceTopicEventSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceTopicEventSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public string EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace topic.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetNamespaceTopicEventSubscriptionArgs()
        {
        }
        public static new GetNamespaceTopicEventSubscriptionArgs Empty => new GetNamespaceTopicEventSubscriptionArgs();
    }

    public sealed class GetNamespaceTopicEventSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public Input<string> EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the namespace topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetNamespaceTopicEventSubscriptionInvokeArgs()
        {
        }
        public static new GetNamespaceTopicEventSubscriptionInvokeArgs Empty => new GetNamespaceTopicEventSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceTopicEventSubscriptionResult
    {
        /// <summary>
        /// Information about the delivery configuration of the event subscription.
        /// </summary>
        public readonly Outputs.DeliveryConfigurationResponse? DeliveryConfiguration;
        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        public readonly string? EventDeliverySchema;
        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        public readonly Outputs.FiltersConfigurationResponse? FiltersConfiguration;
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system metadata relating to Event Subscription resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNamespaceTopicEventSubscriptionResult(
            Outputs.DeliveryConfigurationResponse? deliveryConfiguration,

            string? eventDeliverySchema,

            Outputs.FiltersConfigurationResponse? filtersConfiguration,

            string id,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            DeliveryConfiguration = deliveryConfiguration;
            EventDeliverySchema = eventDeliverySchema;
            FiltersConfiguration = filtersConfiguration;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
