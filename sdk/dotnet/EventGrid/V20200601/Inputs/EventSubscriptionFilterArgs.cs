// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200601.Inputs
{

    /// <summary>
    /// Filter for the Event Subscription.
    /// </summary>
    public sealed class EventSubscriptionFilterArgs : Pulumi.ResourceArgs
    {
        [Input("advancedFilters")]
        private InputList<Union<Inputs.BoolEqualsAdvancedFilterArgs, Union<Inputs.NumberGreaterThanAdvancedFilterArgs, Union<Inputs.NumberGreaterThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberInAdvancedFilterArgs, Union<Inputs.NumberLessThanAdvancedFilterArgs, Union<Inputs.NumberLessThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberNotInAdvancedFilterArgs, Union<Inputs.StringBeginsWithAdvancedFilterArgs, Union<Inputs.StringContainsAdvancedFilterArgs, Union<Inputs.StringEndsWithAdvancedFilterArgs, Union<Inputs.StringInAdvancedFilterArgs, Inputs.StringNotInAdvancedFilterArgs>>>>>>>>>>>>? _advancedFilters;

        /// <summary>
        /// An array of advanced filters that are used for filtering event subscriptions.
        /// </summary>
        public InputList<Union<Inputs.BoolEqualsAdvancedFilterArgs, Union<Inputs.NumberGreaterThanAdvancedFilterArgs, Union<Inputs.NumberGreaterThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberInAdvancedFilterArgs, Union<Inputs.NumberLessThanAdvancedFilterArgs, Union<Inputs.NumberLessThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberNotInAdvancedFilterArgs, Union<Inputs.StringBeginsWithAdvancedFilterArgs, Union<Inputs.StringContainsAdvancedFilterArgs, Union<Inputs.StringEndsWithAdvancedFilterArgs, Union<Inputs.StringInAdvancedFilterArgs, Inputs.StringNotInAdvancedFilterArgs>>>>>>>>>>>> AdvancedFilters
        {
            get => _advancedFilters ?? (_advancedFilters = new InputList<Union<Inputs.BoolEqualsAdvancedFilterArgs, Union<Inputs.NumberGreaterThanAdvancedFilterArgs, Union<Inputs.NumberGreaterThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberInAdvancedFilterArgs, Union<Inputs.NumberLessThanAdvancedFilterArgs, Union<Inputs.NumberLessThanOrEqualsAdvancedFilterArgs, Union<Inputs.NumberNotInAdvancedFilterArgs, Union<Inputs.StringBeginsWithAdvancedFilterArgs, Union<Inputs.StringContainsAdvancedFilterArgs, Union<Inputs.StringEndsWithAdvancedFilterArgs, Union<Inputs.StringInAdvancedFilterArgs, Inputs.StringNotInAdvancedFilterArgs>>>>>>>>>>>>());
            set => _advancedFilters = value;
        }

        [Input("includedEventTypes")]
        private InputList<string>? _includedEventTypes;

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
        /// </summary>
        public InputList<string> IncludedEventTypes
        {
            get => _includedEventTypes ?? (_includedEventTypes = new InputList<string>());
            set => _includedEventTypes = value;
        }

        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        [Input("isSubjectCaseSensitive")]
        public Input<bool>? IsSubjectCaseSensitive { get; set; }

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Input("subjectBeginsWith")]
        public Input<string>? SubjectBeginsWith { get; set; }

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Input("subjectEndsWith")]
        public Input<string>? SubjectEndsWith { get; set; }

        public EventSubscriptionFilterArgs()
        {
        }
    }
}
