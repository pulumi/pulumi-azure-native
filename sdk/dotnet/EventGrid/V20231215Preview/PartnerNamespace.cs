// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20231215Preview
{
    /// <summary>
    /// EventGrid Partner Namespace.
    /// </summary>
    [AzureNativeResourceType("azure-native:eventgrid/v20231215preview:PartnerNamespace")]
    public partial class PartnerNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace.
        /// </summary>
        [Output("disableLocalAuth")]
        public Output<bool?> DisableLocalAuth { get; private set; } = null!;

        /// <summary>
        /// Endpoint for the partner namespace.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        [Output("inboundIpRules")]
        public Output<ImmutableArray<Outputs.InboundIpRuleResponse>> InboundIpRules { get; private set; } = null!;

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this partner namespace
        /// </summary>
        [Output("minimumTlsVersionAllowed")]
        public Output<string?> MinimumTlsVersionAllowed { get; private set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
        /// </summary>
        [Output("partnerRegistrationFullyQualifiedId")]
        public Output<string?> PartnerRegistrationFullyQualifiedId { get; private set; } = null!;

        /// <summary>
        /// This determines if events published to this partner namespace should use the source attribute in the event payload
        /// or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
        /// </summary>
        [Output("partnerTopicRoutingMode")]
        public Output<string?> PartnerTopicRoutingMode { get; private set; } = null!;

        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the partner namespace.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to Partner Namespace resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerNamespace(string name, PartnerNamespaceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid/v20231215preview:PartnerNamespace", name, args ?? new PartnerNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerNamespace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventgrid/v20231215preview:PartnerNamespace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20200401preview:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20201015preview:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20210601preview:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20211015preview:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20220615:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20230601preview:PartnerNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:eventgrid/v20240601preview:PartnerNamespace" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerNamespace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PartnerNamespace(name, id, options);
        }
    }

    public sealed class PartnerNamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace.
        /// </summary>
        [Input("disableLocalAuth")]
        public Input<bool>? DisableLocalAuth { get; set; }

        [Input("inboundIpRules")]
        private InputList<Inputs.InboundIpRuleArgs>? _inboundIpRules;

        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public InputList<Inputs.InboundIpRuleArgs> InboundIpRules
        {
            get => _inboundIpRules ?? (_inboundIpRules = new InputList<Inputs.InboundIpRuleArgs>());
            set => _inboundIpRules = value;
        }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this partner namespace
        /// </summary>
        [Input("minimumTlsVersionAllowed")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.V20231215Preview.TlsVersion>? MinimumTlsVersionAllowed { get; set; }

        /// <summary>
        /// Name of the partner namespace.
        /// </summary>
        [Input("partnerNamespaceName")]
        public Input<string>? PartnerNamespaceName { get; set; }

        /// <summary>
        /// The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
        /// </summary>
        [Input("partnerRegistrationFullyQualifiedId")]
        public Input<string>? PartnerRegistrationFullyQualifiedId { get; set; }

        /// <summary>
        /// This determines if events published to this partner namespace should use the source attribute in the event payload
        /// or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
        /// </summary>
        [Input("partnerTopicRoutingMode")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.V20231215Preview.PartnerTopicRoutingMode>? PartnerTopicRoutingMode { get; set; }

        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        [Input("publicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.EventGrid.V20231215Preview.PublicNetworkAccess>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PartnerNamespaceArgs()
        {
            DisableLocalAuth = false;
            PartnerTopicRoutingMode = "SourceEventAttribute";
            PublicNetworkAccess = "Enabled";
        }
        public static new PartnerNamespaceArgs Empty => new PartnerNamespaceArgs();
    }
}
