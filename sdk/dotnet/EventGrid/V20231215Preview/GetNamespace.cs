// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventGrid.V20231215Preview
{
    public static class GetNamespace
    {
        /// <summary>
        /// Get properties of a namespace.
        /// </summary>
        public static Task<GetNamespaceResult> InvokeAsync(GetNamespaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceResult>("azure-native:eventgrid/v20231215preview:getNamespace", args ?? new GetNamespaceArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of a namespace.
        /// </summary>
        public static Output<GetNamespaceResult> Invoke(GetNamespaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceResult>("azure-native:eventgrid/v20231215preview:getNamespace", args ?? new GetNamespaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNamespaceArgs()
        {
        }
        public static new GetNamespaceArgs Empty => new GetNamespaceArgs();
    }

    public sealed class GetNamespaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNamespaceInvokeArgs()
        {
        }
        public static new GetNamespaceInvokeArgs Empty => new GetNamespaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceResult
    {
        /// <summary>
        /// Fully qualified identifier of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity information for the Namespace resource.
        /// </summary>
        public readonly Outputs.IdentityInfoResponse? Identity;
        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundIpRuleResponse> InboundIpRules;
        /// <summary>
        /// This is an optional property and it allows the user to specify if the namespace resource supports zone-redundancy capability or not. If this
        /// property is not specified explicitly by the user, its default value depends on the following conditions:
        ///     a. For Availability Zones enabled regions - The default property value would be true.
        ///     b. For non-Availability Zones enabled regions - The default property value would be false.
        /// Once specified, this property cannot be updated.
        /// </summary>
        public readonly bool? IsZoneRedundant;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Minimum TLS version of the publisher allowed to publish to this namespace. Only TLS version 1.2 is supported.
        /// </summary>
        public readonly string? MinimumTlsVersionAllowed;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the namespace resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PubSub.NamespaceProperties.InboundIpRules" /&gt;
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// Represents available Sku pricing tiers.
        /// </summary>
        public readonly Outputs.NamespaceSkuResponse? Sku;
        /// <summary>
        /// The system metadata relating to the namespace resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Topic spaces configuration information for the namespace resource
        /// </summary>
        public readonly Outputs.TopicSpacesConfigurationResponse? TopicSpacesConfiguration;
        /// <summary>
        /// Topics configuration information for the namespace resource
        /// </summary>
        public readonly Outputs.TopicsConfigurationResponse? TopicsConfiguration;
        /// <summary>
        /// Type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNamespaceResult(
            string id,

            Outputs.IdentityInfoResponse? identity,

            ImmutableArray<Outputs.InboundIpRuleResponse> inboundIpRules,

            bool? isZoneRedundant,

            string location,

            string? minimumTlsVersionAllowed,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.NamespaceSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.TopicSpacesConfigurationResponse? topicSpacesConfiguration,

            Outputs.TopicsConfigurationResponse? topicsConfiguration,

            string type)
        {
            Id = id;
            Identity = identity;
            InboundIpRules = inboundIpRules;
            IsZoneRedundant = isZoneRedundant;
            Location = location;
            MinimumTlsVersionAllowed = minimumTlsVersionAllowed;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            TopicSpacesConfiguration = topicSpacesConfiguration;
            TopicsConfiguration = topicsConfiguration;
            Type = type;
        }
    }
}
