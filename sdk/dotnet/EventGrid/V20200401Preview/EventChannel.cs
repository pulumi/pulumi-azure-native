// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200401Preview
{
    /// <summary>
    /// Event Channel.
    /// </summary>
    public partial class EventChannel : Pulumi.CustomResource
    {
        /// <summary>
        /// Represents the destination of an event channel.
        /// </summary>
        [Output("destination")]
        public Output<Outputs.EventChannelDestinationResponse?> Destination { get; private set; } = null!;

        /// <summary>
        /// Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
        /// the event channel and corresponding partner topic are deleted.
        /// </summary>
        [Output("expirationTimeIfNotActivatedUtc")]
        public Output<string?> ExpirationTimeIfNotActivatedUtc { get; private set; } = null!;

        /// <summary>
        /// Information about the filter for the event channel.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.EventChannelFilterResponse?> Filter { get; private set; } = null!;

        /// <summary>
        /// Name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
        /// </summary>
        [Output("partnerTopicFriendlyDescription")]
        public Output<string?> PartnerTopicFriendlyDescription { get; private set; } = null!;

        /// <summary>
        /// The readiness state of the corresponding partner topic.
        /// </summary>
        [Output("partnerTopicReadinessState")]
        public Output<string> PartnerTopicReadinessState { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the event channel.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Source of the event channel. This represents a unique resource in the partner's resource model.
        /// </summary>
        [Output("source")]
        public Output<Outputs.EventChannelSourceResponse?> Source { get; private set; } = null!;

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventChannel(string name, EventChannelArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:EventChannel", name, args ?? new EventChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventChannel(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:EventChannel", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventChannel Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EventChannel(name, id, options);
        }
    }

    public sealed class EventChannelArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represents the destination of an event channel.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.EventChannelDestinationArgs>? Destination { get; set; }

        /// <summary>
        /// Name of the event channel.
        /// </summary>
        [Input("eventChannelName", required: true)]
        public Input<string> EventChannelName { get; set; } = null!;

        /// <summary>
        /// Expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
        /// the event channel and corresponding partner topic are deleted.
        /// </summary>
        [Input("expirationTimeIfNotActivatedUtc")]
        public Input<string>? ExpirationTimeIfNotActivatedUtc { get; set; }

        /// <summary>
        /// Information about the filter for the event channel.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.EventChannelFilterArgs>? Filter { get; set; }

        /// <summary>
        /// Name of the partner namespace.
        /// </summary>
        [Input("partnerNamespaceName", required: true)]
        public Input<string> PartnerNamespaceName { get; set; } = null!;

        /// <summary>
        /// Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
        /// </summary>
        [Input("partnerTopicFriendlyDescription")]
        public Input<string>? PartnerTopicFriendlyDescription { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Source of the event channel. This represents a unique resource in the partner's resource model.
        /// </summary>
        [Input("source")]
        public Input<Inputs.EventChannelSourceArgs>? Source { get; set; }

        public EventChannelArgs()
        {
        }
    }
}
