// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200401Preview
{
    /// <summary>
    /// Event Subscription
    /// </summary>
    public partial class PartnerTopicEventSubscription : Pulumi.CustomResource
    {
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Output("deadLetterDestination")]
        public Output<Outputs.StorageBlobDeadLetterDestinationResponse?> DeadLetterDestination { get; private set; } = null!;

        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Output("deadLetterWithResourceIdentity")]
        public Output<Outputs.DeadLetterWithResourceIdentityResponse?> DeadLetterWithResourceIdentity { get; private set; } = null!;

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Output("deliveryWithResourceIdentity")]
        public Output<Outputs.DeliveryWithResourceIdentityResponse?> DeliveryWithResourceIdentity { get; private set; } = null!;

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Output("destination")]
        public Output<Union<Outputs.AzureFunctionEventSubscriptionDestinationResponse, Union<Outputs.EventHubEventSubscriptionDestinationResponse, Union<Outputs.HybridConnectionEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusQueueEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusTopicEventSubscriptionDestinationResponse, Union<Outputs.StorageQueueEventSubscriptionDestinationResponse, Outputs.WebHookEventSubscriptionDestinationResponse>>>>>>?> Destination { get; private set; } = null!;

        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        [Output("eventDeliverySchema")]
        public Output<string?> EventDeliverySchema { get; private set; } = null!;

        /// <summary>
        /// Expiration time of the event subscription.
        /// </summary>
        [Output("expirationTimeUtc")]
        public Output<string?> ExpirationTimeUtc { get; private set; } = null!;

        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.EventSubscriptionFilterResponse?> Filter { get; private set; } = null!;

        /// <summary>
        /// List of user defined labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        [Output("retryPolicy")]
        public Output<Outputs.RetryPolicyResponse?> RetryPolicy { get; private set; } = null!;

        /// <summary>
        /// Name of the topic of the event subscription.
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerTopicEventSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerTopicEventSubscription(string name, PartnerTopicEventSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:PartnerTopicEventSubscription", name, args ?? new PartnerTopicEventSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerTopicEventSubscription(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:PartnerTopicEventSubscription", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerTopicEventSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerTopicEventSubscription Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PartnerTopicEventSubscription(name, id, options);
        }
    }

    public sealed class PartnerTopicEventSubscriptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Input("deadLetterDestination")]
        public Input<Inputs.StorageBlobDeadLetterDestinationArgs>? DeadLetterDestination { get; set; }

        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Input("deadLetterWithResourceIdentity")]
        public Input<Inputs.DeadLetterWithResourceIdentityArgs>? DeadLetterWithResourceIdentity { get; set; }

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Input("deliveryWithResourceIdentity")]
        public Input<Inputs.DeliveryWithResourceIdentityArgs>? DeliveryWithResourceIdentity { get; set; }

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Input("destination")]
        public InputUnion<Inputs.AzureFunctionEventSubscriptionDestinationArgs, InputUnion<Inputs.EventHubEventSubscriptionDestinationArgs, InputUnion<Inputs.HybridConnectionEventSubscriptionDestinationArgs, InputUnion<Inputs.ServiceBusQueueEventSubscriptionDestinationArgs, InputUnion<Inputs.ServiceBusTopicEventSubscriptionDestinationArgs, InputUnion<Inputs.StorageQueueEventSubscriptionDestinationArgs, Inputs.WebHookEventSubscriptionDestinationArgs>>>>>>? Destination { get; set; }

        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        [Input("eventDeliverySchema")]
        public Input<string>? EventDeliverySchema { get; set; }

        /// <summary>
        /// Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public Input<string> EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// Expiration time of the event subscription.
        /// </summary>
        [Input("expirationTimeUtc")]
        public Input<string>? ExpirationTimeUtc { get; set; }

        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.EventSubscriptionFilterArgs>? Filter { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of user defined labels.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the partner topic.
        /// </summary>
        [Input("partnerTopicName", required: true)]
        public Input<string> PartnerTopicName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.RetryPolicyArgs>? RetryPolicy { get; set; }

        public PartnerTopicEventSubscriptionArgs()
        {
        }
    }
}
