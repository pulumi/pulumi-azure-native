// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200401Preview
{
    /// <summary>
    /// Information about a partner registration.
    /// </summary>
    public partial class PartnerRegistration : Pulumi.CustomResource
    {
        /// <summary>
        /// List of Azure subscription Ids that are authorized to create a partner namespace
        /// associated with this partner registration. This is an optional property. Creating
        /// partner namespaces is always permitted under the same Azure subscription as the one used
        /// for creating the partner registration.
        /// </summary>
        [Output("authorizedAzureSubscriptionIds")]
        public Output<ImmutableArray<string>> AuthorizedAzureSubscriptionIds { get; private set; } = null!;

        /// <summary>
        /// The extension of the customer service URI of the publisher.
        /// </summary>
        [Output("customerServiceUri")]
        public Output<string?> CustomerServiceUri { get; private set; } = null!;

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// URI of the logo.
        /// </summary>
        [Output("logoUri")]
        public Output<string?> LogoUri { get; private set; } = null!;

        /// <summary>
        /// Long description for the custom scenarios and integration to be displayed in the portal if needed.
        /// Length of this description should not exceed 2048 characters.
        /// </summary>
        [Output("longDescription")]
        public Output<string?> LongDescription { get; private set; } = null!;

        /// <summary>
        /// Name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The extension of the customer service number of the publisher. Only digits are allowed and number of digits should not exceed 10.
        /// </summary>
        [Output("partnerCustomerServiceExtension")]
        public Output<string?> PartnerCustomerServiceExtension { get; private set; } = null!;

        /// <summary>
        /// The customer service number of the publisher. The expected phone format should start with a '+' sign 
        /// followed by the country code. The remaining digits are then followed. Only digits and spaces are allowed and its
        /// length cannot exceed 16 digits including country code. Examples of valid phone numbers are: +1 515 123 4567 and
        /// +966 7 5115 2471. Examples of invalid phone numbers are: +1 (515) 123-4567, 1 515 123 4567 and +966 121 5115 24 7 551 1234 43
        /// </summary>
        [Output("partnerCustomerServiceNumber")]
        public Output<string?> PartnerCustomerServiceNumber { get; private set; } = null!;

        /// <summary>
        /// Official name of the partner name. For example: "Contoso".
        /// </summary>
        [Output("partnerName")]
        public Output<string?> PartnerName { get; private set; } = null!;

        /// <summary>
        /// Short description of the partner resource type. The length of this description should not exceed 256 characters.
        /// </summary>
        [Output("partnerResourceTypeDescription")]
        public Output<string?> PartnerResourceTypeDescription { get; private set; } = null!;

        /// <summary>
        /// Display name of the partner resource type.
        /// </summary>
        [Output("partnerResourceTypeDisplayName")]
        public Output<string?> PartnerResourceTypeDisplayName { get; private set; } = null!;

        /// <summary>
        /// Name of the partner resource type.
        /// </summary>
        [Output("partnerResourceTypeName")]
        public Output<string?> PartnerResourceTypeName { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the partner registration.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// URI of the partner website that can be used by Azure customers to setup Event Grid
        /// integration on an event source.
        /// </summary>
        [Output("setupUri")]
        public Output<string?> SetupUri { get; private set; } = null!;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Visibility state of the partner registration.
        /// </summary>
        [Output("visibilityState")]
        public Output<string?> VisibilityState { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerRegistration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerRegistration(string name, PartnerRegistrationArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:PartnerRegistration", name, args ?? new PartnerRegistrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerRegistration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:eventgrid/v20200401preview:PartnerRegistration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerRegistration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerRegistration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PartnerRegistration(name, id, options);
        }
    }

    public sealed class PartnerRegistrationArgs : Pulumi.ResourceArgs
    {
        [Input("authorizedAzureSubscriptionIds")]
        private InputList<string>? _authorizedAzureSubscriptionIds;

        /// <summary>
        /// List of Azure subscription Ids that are authorized to create a partner namespace
        /// associated with this partner registration. This is an optional property. Creating
        /// partner namespaces is always permitted under the same Azure subscription as the one used
        /// for creating the partner registration.
        /// </summary>
        public InputList<string> AuthorizedAzureSubscriptionIds
        {
            get => _authorizedAzureSubscriptionIds ?? (_authorizedAzureSubscriptionIds = new InputList<string>());
            set => _authorizedAzureSubscriptionIds = value;
        }

        /// <summary>
        /// The extension of the customer service URI of the publisher.
        /// </summary>
        [Input("customerServiceUri")]
        public Input<string>? CustomerServiceUri { get; set; }

        /// <summary>
        /// Location of the resource.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// URI of the logo.
        /// </summary>
        [Input("logoUri")]
        public Input<string>? LogoUri { get; set; }

        /// <summary>
        /// Long description for the custom scenarios and integration to be displayed in the portal if needed.
        /// Length of this description should not exceed 2048 characters.
        /// </summary>
        [Input("longDescription")]
        public Input<string>? LongDescription { get; set; }

        /// <summary>
        /// The extension of the customer service number of the publisher. Only digits are allowed and number of digits should not exceed 10.
        /// </summary>
        [Input("partnerCustomerServiceExtension")]
        public Input<string>? PartnerCustomerServiceExtension { get; set; }

        /// <summary>
        /// The customer service number of the publisher. The expected phone format should start with a '+' sign 
        /// followed by the country code. The remaining digits are then followed. Only digits and spaces are allowed and its
        /// length cannot exceed 16 digits including country code. Examples of valid phone numbers are: +1 515 123 4567 and
        /// +966 7 5115 2471. Examples of invalid phone numbers are: +1 (515) 123-4567, 1 515 123 4567 and +966 121 5115 24 7 551 1234 43
        /// </summary>
        [Input("partnerCustomerServiceNumber")]
        public Input<string>? PartnerCustomerServiceNumber { get; set; }

        /// <summary>
        /// Official name of the partner name. For example: "Contoso".
        /// </summary>
        [Input("partnerName")]
        public Input<string>? PartnerName { get; set; }

        /// <summary>
        /// Name of the partner registration.
        /// </summary>
        [Input("partnerRegistrationName", required: true)]
        public Input<string> PartnerRegistrationName { get; set; } = null!;

        /// <summary>
        /// Short description of the partner resource type. The length of this description should not exceed 256 characters.
        /// </summary>
        [Input("partnerResourceTypeDescription")]
        public Input<string>? PartnerResourceTypeDescription { get; set; }

        /// <summary>
        /// Display name of the partner resource type.
        /// </summary>
        [Input("partnerResourceTypeDisplayName")]
        public Input<string>? PartnerResourceTypeDisplayName { get; set; }

        /// <summary>
        /// Name of the partner resource type.
        /// </summary>
        [Input("partnerResourceTypeName")]
        public Input<string>? PartnerResourceTypeName { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// URI of the partner website that can be used by Azure customers to setup Event Grid
        /// integration on an event source.
        /// </summary>
        [Input("setupUri")]
        public Input<string>? SetupUri { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Visibility state of the partner registration.
        /// </summary>
        [Input("visibilityState")]
        public Input<string>? VisibilityState { get; set; }

        public PartnerRegistrationArgs()
        {
        }
    }
}
