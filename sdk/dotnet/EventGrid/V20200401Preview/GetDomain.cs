// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200401Preview
{
    public static class GetDomain
    {
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("azure-nextgen:eventgrid/v20200401preview:getDomain", args ?? new GetDomainArgs(), options.WithVersion());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the domain.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDomainArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// Endpoint for the domain.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Identity information for the resource.
        /// </summary>
        public readonly Outputs.IdentityInfoResponse? Identity;
        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundIpRuleResponse> InboundIpRules;
        /// <summary>
        /// This determines the format that Event Grid should expect for incoming events published to the domain.
        /// </summary>
        public readonly string? InputSchema;
        /// <summary>
        /// Information about the InputSchemaMapping which specified the info about mapping event payload.
        /// </summary>
        public readonly Outputs.JsonInputSchemaMappingResponse? InputSchemaMapping;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Metric resource id for the domain.
        /// </summary>
        public readonly string MetricResourceId;
        /// <summary>
        /// Name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the domain.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" /&gt;
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The Sku pricing tier for the domain.
        /// </summary>
        public readonly Outputs.ResourceSkuResponse? Sku;
        /// <summary>
        /// Tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the resource
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDomainResult(
            string endpoint,

            Outputs.IdentityInfoResponse? identity,

            ImmutableArray<Outputs.InboundIpRuleResponse> inboundIpRules,

            string? inputSchema,

            Outputs.JsonInputSchemaMappingResponse? inputSchemaMapping,

            string location,

            string metricResourceId,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.ResourceSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Endpoint = endpoint;
            Identity = identity;
            InboundIpRules = inboundIpRules;
            InputSchema = inputSchema;
            InputSchemaMapping = inputSchemaMapping;
            Location = location;
            MetricResourceId = metricResourceId;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            Tags = tags;
            Type = type;
        }
    }
}
