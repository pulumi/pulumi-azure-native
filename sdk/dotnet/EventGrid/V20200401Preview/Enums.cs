// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.EventGrid.V20200401Preview
{
    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType SystemAssigned_UserAssigned { get; } = new IdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This determines the format that Event Grid should expect for incoming events published to the topic.
    /// </summary>
    [EnumType]
    public readonly struct InputSchema : IEquatable<InputSchema>
    {
        private readonly string _value;

        private InputSchema(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InputSchema EventGridSchema { get; } = new InputSchema("EventGridSchema");
        public static InputSchema CustomEventSchema { get; } = new InputSchema("CustomEventSchema");
        public static InputSchema CloudEventSchemaV1_0 { get; } = new InputSchema("CloudEventSchemaV1_0");

        public static bool operator ==(InputSchema left, InputSchema right) => left.Equals(right);
        public static bool operator !=(InputSchema left, InputSchema right) => !left.Equals(right);

        public static explicit operator string(InputSchema value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InputSchema other && Equals(other);
        public bool Equals(InputSchema other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the custom mapping
    /// </summary>
    [EnumType]
    public readonly struct InputSchemaMappingType : IEquatable<InputSchemaMappingType>
    {
        private readonly string _value;

        private InputSchemaMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InputSchemaMappingType Json { get; } = new InputSchemaMappingType("Json");

        public static bool operator ==(InputSchemaMappingType left, InputSchemaMappingType right) => left.Equals(right);
        public static bool operator !=(InputSchemaMappingType left, InputSchemaMappingType right) => !left.Equals(right);

        public static explicit operator string(InputSchemaMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InputSchemaMappingType other && Equals(other);
        public bool Equals(InputSchemaMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to perform based on the match or no match of the IpMask.
    /// </summary>
    [EnumType]
    public readonly struct IpActionType : IEquatable<IpActionType>
    {
        private readonly string _value;

        private IpActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpActionType Allow { get; } = new IpActionType("Allow");

        public static bool operator ==(IpActionType left, IpActionType right) => left.Equals(right);
        public static bool operator !=(IpActionType left, IpActionType right) => !left.Equals(right);

        public static explicit operator string(IpActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpActionType other && Equals(other);
        public bool Equals(IpActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the connection.
    /// </summary>
    [EnumType]
    public readonly struct PersistedConnectionStatus : IEquatable<PersistedConnectionStatus>
    {
        private readonly string _value;

        private PersistedConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PersistedConnectionStatus Pending { get; } = new PersistedConnectionStatus("Pending");
        public static PersistedConnectionStatus Approved { get; } = new PersistedConnectionStatus("Approved");
        public static PersistedConnectionStatus Rejected { get; } = new PersistedConnectionStatus("Rejected");
        public static PersistedConnectionStatus Disconnected { get; } = new PersistedConnectionStatus("Disconnected");

        public static bool operator ==(PersistedConnectionStatus left, PersistedConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PersistedConnectionStatus left, PersistedConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PersistedConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PersistedConnectionStatus other && Equals(other);
        public bool Equals(PersistedConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This determines if traffic is allowed over public network. By default it is enabled. 
    /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" /&gt;
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provisioning state of the Private Endpoint Connection.
    /// </summary>
    [EnumType]
    public readonly struct ResourceProvisioningState : IEquatable<ResourceProvisioningState>
    {
        private readonly string _value;

        private ResourceProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceProvisioningState Creating { get; } = new ResourceProvisioningState("Creating");
        public static ResourceProvisioningState Updating { get; } = new ResourceProvisioningState("Updating");
        public static ResourceProvisioningState Deleting { get; } = new ResourceProvisioningState("Deleting");
        public static ResourceProvisioningState Succeeded { get; } = new ResourceProvisioningState("Succeeded");
        public static ResourceProvisioningState Canceled { get; } = new ResourceProvisioningState("Canceled");
        public static ResourceProvisioningState Failed { get; } = new ResourceProvisioningState("Failed");

        public static bool operator ==(ResourceProvisioningState left, ResourceProvisioningState right) => left.Equals(right);
        public static bool operator !=(ResourceProvisioningState left, ResourceProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ResourceProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceProvisioningState other && Equals(other);
        public bool Equals(ResourceProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Sku name of the resource. The possible values are: Basic or Premium.
    /// </summary>
    [EnumType]
    public readonly struct Sku : IEquatable<Sku>
    {
        private readonly string _value;

        private Sku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Sku Basic { get; } = new Sku("Basic");
        public static Sku Premium { get; } = new Sku("Premium");

        public static bool operator ==(Sku left, Sku right) => left.Equals(right);
        public static bool operator !=(Sku left, Sku right) => !left.Equals(right);

        public static explicit operator string(Sku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Sku other && Equals(other);
        public bool Equals(Sku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
