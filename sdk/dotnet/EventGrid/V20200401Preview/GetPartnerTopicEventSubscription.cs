// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventGrid.V20200401Preview
{
    public static class GetPartnerTopicEventSubscription
    {
        public static Task<GetPartnerTopicEventSubscriptionResult> InvokeAsync(GetPartnerTopicEventSubscriptionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPartnerTopicEventSubscriptionResult>("azure-nextgen:eventgrid/v20200401preview:getPartnerTopicEventSubscription", args ?? new GetPartnerTopicEventSubscriptionArgs(), options.WithVersion());
    }


    public sealed class GetPartnerTopicEventSubscriptionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the event subscription to be found. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public string EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// Name of the partner topic.
        /// </summary>
        [Input("partnerTopicName", required: true)]
        public string PartnerTopicName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerTopicEventSubscriptionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPartnerTopicEventSubscriptionResult
    {
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.StorageBlobDeadLetterDestinationResponse? DeadLetterDestination;
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.DeadLetterWithResourceIdentityResponse? DeadLetterWithResourceIdentity;
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Outputs.DeliveryWithResourceIdentityResponse? DeliveryWithResourceIdentity;
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        public readonly Union<Outputs.AzureFunctionEventSubscriptionDestinationResponse, Union<Outputs.EventHubEventSubscriptionDestinationResponse, Union<Outputs.HybridConnectionEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusQueueEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusTopicEventSubscriptionDestinationResponse, Union<Outputs.StorageQueueEventSubscriptionDestinationResponse, Outputs.WebHookEventSubscriptionDestinationResponse>>>>>>? Destination;
        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        public readonly string? EventDeliverySchema;
        /// <summary>
        /// Expiration time of the event subscription.
        /// </summary>
        public readonly string? ExpirationTimeUtc;
        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        public readonly Outputs.EventSubscriptionFilterResponse? Filter;
        /// <summary>
        /// List of user defined labels.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        public readonly Outputs.RetryPolicyResponse? RetryPolicy;
        /// <summary>
        /// Name of the topic of the event subscription.
        /// </summary>
        public readonly string Topic;
        /// <summary>
        /// Type of the resource
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerTopicEventSubscriptionResult(
            Outputs.StorageBlobDeadLetterDestinationResponse? deadLetterDestination,

            Outputs.DeadLetterWithResourceIdentityResponse? deadLetterWithResourceIdentity,

            Outputs.DeliveryWithResourceIdentityResponse? deliveryWithResourceIdentity,

            Union<Outputs.AzureFunctionEventSubscriptionDestinationResponse, Union<Outputs.EventHubEventSubscriptionDestinationResponse, Union<Outputs.HybridConnectionEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusQueueEventSubscriptionDestinationResponse, Union<Outputs.ServiceBusTopicEventSubscriptionDestinationResponse, Union<Outputs.StorageQueueEventSubscriptionDestinationResponse, Outputs.WebHookEventSubscriptionDestinationResponse>>>>>>? destination,

            string? eventDeliverySchema,

            string? expirationTimeUtc,

            Outputs.EventSubscriptionFilterResponse? filter,

            ImmutableArray<string> labels,

            string name,

            string provisioningState,

            Outputs.RetryPolicyResponse? retryPolicy,

            string topic,

            string type)
        {
            DeadLetterDestination = deadLetterDestination;
            DeadLetterWithResourceIdentity = deadLetterWithResourceIdentity;
            DeliveryWithResourceIdentity = deliveryWithResourceIdentity;
            Destination = destination;
            EventDeliverySchema = eventDeliverySchema;
            ExpirationTimeUtc = expirationTimeUtc;
            Filter = filter;
            Labels = labels;
            Name = name;
            ProvisioningState = provisioningState;
            RetryPolicy = retryPolicy;
            Topic = topic;
            Type = type;
        }
    }
}
