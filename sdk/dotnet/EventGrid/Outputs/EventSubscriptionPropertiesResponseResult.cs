// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.EventGrid.Outputs
{

    [OutputType]
    public sealed class EventSubscriptionPropertiesResponseResult
    {
        /// <summary>
        /// The DeadLetter destination of the event subscription.
        /// </summary>
        public readonly Outputs.DeadLetterDestinationResponseResult? DeadLetterDestination;
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// </summary>
        public readonly Outputs.EventSubscriptionDestinationResponseResult? Destination;
        /// <summary>
        /// The event delivery schema for the event subscription.
        /// </summary>
        public readonly string? EventDeliverySchema;
        /// <summary>
        /// Expiration time of the event subscription.
        /// </summary>
        public readonly string? ExpirationTimeUtc;
        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        public readonly Outputs.EventSubscriptionFilterResponseResult? Filter;
        /// <summary>
        /// List of user defined labels.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        public readonly Outputs.RetryPolicyResponseResult? RetryPolicy;
        /// <summary>
        /// Name of the topic of the event subscription.
        /// </summary>
        public readonly string Topic;

        [OutputConstructor]
        private EventSubscriptionPropertiesResponseResult(
            Outputs.DeadLetterDestinationResponseResult? deadLetterDestination,

            Outputs.EventSubscriptionDestinationResponseResult? destination,

            string? eventDeliverySchema,

            string? expirationTimeUtc,

            Outputs.EventSubscriptionFilterResponseResult? filter,

            ImmutableArray<string> labels,

            string provisioningState,

            Outputs.RetryPolicyResponseResult? retryPolicy,

            string topic)
        {
            DeadLetterDestination = deadLetterDestination;
            Destination = destination;
            EventDeliverySchema = eventDeliverySchema;
            ExpirationTimeUtc = expirationTimeUtc;
            Filter = filter;
            Labels = labels;
            ProvisioningState = provisioningState;
            RetryPolicy = retryPolicy;
            Topic = topic;
        }
    }
}
