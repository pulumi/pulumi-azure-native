// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.EventGrid.Outputs
{

    [OutputType]
    public sealed class DomainPropertiesResponse
    {
        /// <summary>
        /// Endpoint for the domain.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.InboundIpRuleResponse> InboundIpRules;
        /// <summary>
        /// This determines the format that Event Grid should expect for incoming events published to the domain.
        /// </summary>
        public readonly string? InputSchema;
        /// <summary>
        /// Information about the InputSchemaMapping which specified the info about mapping event payload.
        /// </summary>
        public readonly Outputs.InputSchemaMappingResponse? InputSchemaMapping;
        /// <summary>
        /// Metric resource id for the domain.
        /// </summary>
        public readonly string MetricResourceId;
        /// <summary>
        /// List of private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the domain.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" /&gt;
        /// </summary>
        public readonly string? PublicNetworkAccess;

        [OutputConstructor]
        private DomainPropertiesResponse(
            string endpoint,

            ImmutableArray<Outputs.InboundIpRuleResponse> inboundIpRules,

            string? inputSchema,

            Outputs.InputSchemaMappingResponse? inputSchemaMapping,

            string metricResourceId,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess)
        {
            Endpoint = endpoint;
            InboundIpRules = inboundIpRules;
            InputSchema = inputSchema;
            InputSchemaMapping = inputSchemaMapping;
            MetricResourceId = metricResourceId;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
        }
    }
}
