// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Maintenance.V20220701Preview.Outputs
{

    /// <summary>
    /// Input configuration for a patch run
    /// </summary>
    [OutputType]
    public sealed class InputPatchConfigurationResponse
    {
        /// <summary>
        /// Input parameters specific to patching Linux machine. For Windows machines, do not pass this property. This property only applies to Guest (InGuestPatch) scope.
        /// </summary>
        public readonly Outputs.InputLinuxParametersResponse? LinuxParameters;
        /// <summary>
        /// [Not supported] List of post tasks. e.g. [{'source' :'runbook', 'taskScope': 'Resource', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskPropertiesResponse> PostTasks;
        /// <summary>
        /// [Not supported] List of pre tasks. e.g. [{'source' :'runbook', 'taskScope': 'Global', 'parameters': { 'arg1': 'value1'}}]
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskPropertiesResponse> PreTasks;
        /// <summary>
        /// Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed. This property only applies to Guest (InGuestPatch) scope.
        /// </summary>
        public readonly string? RebootSetting;
        /// <summary>
        /// Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property. This property only applies to Guest (InGuestPatch) scope.
        /// </summary>
        public readonly Outputs.InputWindowsParametersResponse? WindowsParameters;

        [OutputConstructor]
        private InputPatchConfigurationResponse(
            Outputs.InputLinuxParametersResponse? linuxParameters,

            ImmutableArray<Outputs.TaskPropertiesResponse> postTasks,

            ImmutableArray<Outputs.TaskPropertiesResponse> preTasks,

            string? rebootSetting,

            Outputs.InputWindowsParametersResponse? windowsParameters)
        {
            LinuxParameters = linuxParameters;
            PostTasks = postTasks;
            PreTasks = preTasks;
            RebootSetting = rebootSetting;
            WindowsParameters = windowsParameters;
        }
    }
}
