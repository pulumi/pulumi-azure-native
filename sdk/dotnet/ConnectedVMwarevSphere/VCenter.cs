// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere
{
    /// <summary>
    /// Defines the vCenter.
    /// API Version: 2022-07-15-preview.
    /// Previous API Version: 2020-10-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:connectedvmwarevsphere:VCenter")]
    public partial class VCenter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets the connection status to the vCenter.
        /// </summary>
        [Output("connectionStatus")]
        public Output<string> ConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// Username / Password Credentials to connect to vcenter.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.VICredentialResponse?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        [Output("customResourceName")]
        public Output<string> CustomResourceName { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse?> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the FQDN/IPAddress of the vCenter.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the instance UUID of the vCenter.
        /// </summary>
        [Output("instanceUuid")]
        public Output<string> InstanceUuid { get; private set; } = null!;

        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the port of the vCenter.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The resource status information.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ResourceStatusResponse>> Statuses { get; private set; } = null!;

        /// <summary>
        /// The system data.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the version of the vCenter.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a VCenter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VCenter(string name, VCenterArgs args, CustomResourceOptions? options = null)
            : base("azure-native:connectedvmwarevsphere:VCenter", name, args ?? new VCenterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VCenter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:connectedvmwarevsphere:VCenter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:connectedvmwarevsphere/v20201001preview:VCenter"},
                    new global::Pulumi.Alias { Type = "azure-native:connectedvmwarevsphere/v20220110preview:VCenter"},
                    new global::Pulumi.Alias { Type = "azure-native:connectedvmwarevsphere/v20220715preview:VCenter"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VCenter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VCenter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VCenter(name, id, options);
        }
    }

    public sealed class VCenterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Username / Password Credentials to connect to vcenter.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.VICredentialArgs>? Credentials { get; set; }

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Input("extendedLocation")]
        public Input<Inputs.ExtendedLocationArgs>? ExtendedLocation { get; set; }

        /// <summary>
        /// Gets or sets the FQDN/IPAddress of the vCenter.
        /// </summary>
        [Input("fqdn", required: true)]
        public Input<string> Fqdn { get; set; } = null!;

        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Gets or sets the port of the vCenter.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The Resource Group Name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the vCenter.
        /// </summary>
        [Input("vcenterName")]
        public Input<string>? VcenterName { get; set; }

        public VCenterArgs()
        {
        }
        public static new VCenterArgs Empty => new VCenterArgs();
    }
}
