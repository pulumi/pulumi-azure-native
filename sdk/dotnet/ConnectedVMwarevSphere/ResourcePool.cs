// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere
{
    /// <summary>
    /// Define the resourcePool.
    /// API Version: 2020-10-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:connectedvmwarevsphere:ResourcePool")]
    public partial class ResourcePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.
        /// Utilization will not exceed this limit even if there are available resources.
        /// </summary>
        [Output("cpuLimitMHz")]
        public Output<double> CpuLimitMHz { get; private set; } = null!;

        /// <summary>
        /// Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed
        /// to be available.
        /// </summary>
        [Output("cpuReservationMHz")]
        public Output<double> CpuReservationMHz { get; private set; } = null!;

        /// <summary>
        /// Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.
        /// This property is used in relative allocation between resource consumers.
        /// </summary>
        [Output("cpuSharesLevel")]
        public Output<string> CpuSharesLevel { get; private set; } = null!;

        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        [Output("customResourceName")]
        public Output<string> CustomResourceName { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse?> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the inventory Item ID for the resource pool.
        /// </summary>
        [Output("inventoryItemId")]
        public Output<string?> InventoryItemId { get; private set; } = null!;

        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Gets or sets MemLimitMB specifies a memory usage limit in megabytes.
        /// Utilization will not exceed the specified limit even if there are available resources.
        /// </summary>
        [Output("memLimitMB")]
        public Output<double> MemLimitMB { get; private set; } = null!;

        /// <summary>
        /// Gets or sets MemReservationMB which specifies the guaranteed available memory in
        /// megabytes.
        /// </summary>
        [Output("memReservationMB")]
        public Output<double> MemReservationMB { get; private set; } = null!;

        /// <summary>
        /// Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.
        /// This property is used in relative allocation between resource consumers.
        /// </summary>
        [Output("memSharesLevel")]
        public Output<string> MemSharesLevel { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the vCenter Managed Object name for the resource pool.
        /// </summary>
        [Output("moName")]
        public Output<string> MoName { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool.
        /// </summary>
        [Output("moRefId")]
        public Output<string?> MoRefId { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The resource status information.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.ResourceStatusResponse>> Statuses { get; private set; } = null!;

        /// <summary>
        /// The system data.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Output("vCenterId")]
        public Output<string?> VCenterId { get; private set; } = null!;


        /// <summary>
        /// Create a ResourcePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourcePool(string name, ResourcePoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:connectedvmwarevsphere:ResourcePool", name, args ?? new ResourcePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourcePool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:connectedvmwarevsphere:ResourcePool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:connectedvmwarevsphere/v20201001preview:ResourcePool"},
                    new global::Pulumi.Alias { Type = "azure-native:connectedvmwarevsphere/v20220110preview:ResourcePool"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourcePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourcePool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ResourcePool(name, id, options);
        }
    }

    public sealed class ResourcePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Input("extendedLocation")]
        public Input<Inputs.ExtendedLocationArgs>? ExtendedLocation { get; set; }

        /// <summary>
        /// Gets or sets the inventory Item ID for the resource pool.
        /// </summary>
        [Input("inventoryItemId")]
        public Input<string>? InventoryItemId { get; set; }

        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool.
        /// </summary>
        [Input("moRefId")]
        public Input<string>? MoRefId { get; set; }

        /// <summary>
        /// The Resource Group Name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the resourcePool.
        /// </summary>
        [Input("resourcePoolName")]
        public Input<string>? ResourcePoolName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        [Input("vCenterId")]
        public Input<string>? VCenterId { get; set; }

        public ResourcePoolArgs()
        {
        }
        public static new ResourcePoolArgs Empty => new ResourcePoolArgs();
    }
}
