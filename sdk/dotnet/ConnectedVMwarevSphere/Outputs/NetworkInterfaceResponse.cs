// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere.Outputs
{

    /// <summary>
    /// Network Interface model
    /// </summary>
    [OutputType]
    public sealed class NetworkInterfaceResponse
    {
        /// <summary>
        /// Gets or sets the device key value.
        /// </summary>
        public readonly int? DeviceKey;
        /// <summary>
        /// Gets or sets the nic ip addresses.
        /// </summary>
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// Gets or sets the ipsettings.
        /// </summary>
        public readonly Outputs.NicIPSettingsResponse? IpSettings;
        /// <summary>
        /// Gets or sets the label of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// Gets or sets the NIC MAC address.
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// Gets or sets the name of the network interface.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Gets or sets the ARM Id of the network resource to connect the virtual machine.
        /// </summary>
        public readonly string? NetworkId;
        /// <summary>
        /// Gets or sets the name of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        public readonly string NetworkMoName;
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
        /// that the nic is connected to.
        /// </summary>
        public readonly string NetworkMoRefId;
        /// <summary>
        /// NIC type
        /// </summary>
        public readonly string? NicType;
        /// <summary>
        /// Gets or sets the power on boot.
        /// </summary>
        public readonly string? PowerOnBoot;

        [OutputConstructor]
        private NetworkInterfaceResponse(
            int? deviceKey,

            ImmutableArray<string> ipAddresses,

            Outputs.NicIPSettingsResponse? ipSettings,

            string label,

            string macAddress,

            string? name,

            string? networkId,

            string networkMoName,

            string networkMoRefId,

            string? nicType,

            string? powerOnBoot)
        {
            DeviceKey = deviceKey;
            IpAddresses = ipAddresses;
            IpSettings = ipSettings;
            Label = label;
            MacAddress = macAddress;
            Name = name;
            NetworkId = networkId;
            NetworkMoName = networkMoName;
            NetworkMoRefId = networkMoRefId;
            NicType = nicType;
            PowerOnBoot = powerOnBoot;
        }
    }
}
