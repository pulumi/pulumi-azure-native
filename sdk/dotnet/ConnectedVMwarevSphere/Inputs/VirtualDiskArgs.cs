// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere.Inputs
{

    /// <summary>
    /// Virtual disk model
    /// </summary>
    public sealed class VirtualDiskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Gets or sets the controller id.
        /// </summary>
        [Input("controllerKey")]
        public Input<int>? ControllerKey { get; set; }

        /// <summary>
        /// Gets or sets the device key value.
        /// </summary>
        [Input("deviceKey")]
        public Input<int>? DeviceKey { get; set; }

        /// <summary>
        /// Gets or sets the device name.
        /// </summary>
        [Input("deviceName")]
        public Input<string>? DeviceName { get; set; }

        /// <summary>
        /// Gets or sets the disk mode.
        /// </summary>
        [Input("diskMode")]
        public InputUnion<string, Pulumi.AzureNative.ConnectedVMwarevSphere.DiskMode>? DiskMode { get; set; }

        /// <summary>
        /// Gets or sets the disk total size.
        /// </summary>
        [Input("diskSizeGB")]
        public Input<int>? DiskSizeGB { get; set; }

        /// <summary>
        /// Gets or sets the disk backing type.
        /// </summary>
        [Input("diskType")]
        public InputUnion<string, Pulumi.AzureNative.ConnectedVMwarevSphere.DiskType>? DiskType { get; set; }

        /// <summary>
        /// Gets or sets the name of the virtual disk.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Gets or sets the unit number of the disk on the controller.
        /// </summary>
        [Input("unitNumber")]
        public Input<int>? UnitNumber { get; set; }

        public VirtualDiskArgs()
        {
        }
        public static new VirtualDiskArgs Empty => new VirtualDiskArgs();
    }
}
