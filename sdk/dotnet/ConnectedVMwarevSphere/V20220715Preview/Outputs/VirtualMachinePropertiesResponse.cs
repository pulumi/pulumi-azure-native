// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere.V20220715Preview.Outputs
{

    /// <summary>
    /// Describes the properties of a Virtual Machine.
    /// </summary>
    [OutputType]
    public sealed class VirtualMachinePropertiesResponse
    {
        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        public readonly string CustomResourceName;
        /// <summary>
        /// Firmware type
        /// </summary>
        public readonly string? FirmwareType;
        /// <summary>
        /// Gets or sets the folder path of the vm.
        /// </summary>
        public readonly string FolderPath;
        /// <summary>
        /// Guest agent status properties.
        /// </summary>
        public readonly Outputs.GuestAgentProfileResponse? GuestAgentProfile;
        /// <summary>
        /// Hardware properties.
        /// </summary>
        public readonly Outputs.HardwareProfileResponse? HardwareProfile;
        /// <summary>
        /// Gets or sets the instance uuid of the vm.
        /// </summary>
        public readonly string InstanceUuid;
        /// <summary>
        /// Gets or sets the inventory Item ID for the virtual machine.
        /// </summary>
        public readonly string? InventoryItemId;
        /// <summary>
        /// Gets or sets the vCenter Managed Object name for the virtual machine.
        /// </summary>
        public readonly string MoName;
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        public readonly string? MoRefId;
        /// <summary>
        /// Network properties.
        /// </summary>
        public readonly Outputs.NetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// OS properties.
        /// </summary>
        public readonly Outputs.OsProfileResponse? OsProfile;
        /// <summary>
        /// Placement properties.
        /// </summary>
        public readonly Outputs.PlacementProfileResponse? PlacementProfile;
        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        /// deploy.
        /// </summary>
        public readonly string? ResourcePoolId;
        /// <summary>
        /// Gets the security profile.
        /// </summary>
        public readonly Outputs.SecurityProfileResponse? SecurityProfile;
        /// <summary>
        /// Gets or sets the SMBIOS UUID of the vm.
        /// </summary>
        public readonly string? SmbiosUuid;
        /// <summary>
        /// The resource status information.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceStatusResponse> Statuses;
        /// <summary>
        /// Storage properties.
        /// </summary>
        public readonly Outputs.StorageProfileResponse? StorageProfile;
        /// <summary>
        /// Gets or sets the ARM Id of the template resource to deploy the virtual machine.
        /// </summary>
        public readonly string? TemplateId;
        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        public readonly string? VCenterId;
        /// <summary>
        /// Gets or sets a unique identifier for the vm resource.
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private VirtualMachinePropertiesResponse(
            string customResourceName,

            string? firmwareType,

            string folderPath,

            Outputs.GuestAgentProfileResponse? guestAgentProfile,

            Outputs.HardwareProfileResponse? hardwareProfile,

            string instanceUuid,

            string? inventoryItemId,

            string moName,

            string? moRefId,

            Outputs.NetworkProfileResponse? networkProfile,

            Outputs.OsProfileResponse? osProfile,

            Outputs.PlacementProfileResponse? placementProfile,

            string powerState,

            string provisioningState,

            string? resourcePoolId,

            Outputs.SecurityProfileResponse? securityProfile,

            string? smbiosUuid,

            ImmutableArray<Outputs.ResourceStatusResponse> statuses,

            Outputs.StorageProfileResponse? storageProfile,

            string? templateId,

            string uuid,

            string? vCenterId,

            string vmId)
        {
            CustomResourceName = customResourceName;
            FirmwareType = firmwareType;
            FolderPath = folderPath;
            GuestAgentProfile = guestAgentProfile;
            HardwareProfile = hardwareProfile;
            InstanceUuid = instanceUuid;
            InventoryItemId = inventoryItemId;
            MoName = moName;
            MoRefId = moRefId;
            NetworkProfile = networkProfile;
            OsProfile = osProfile;
            PlacementProfile = placementProfile;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            ResourcePoolId = resourcePoolId;
            SecurityProfile = securityProfile;
            SmbiosUuid = smbiosUuid;
            Statuses = statuses;
            StorageProfile = storageProfile;
            TemplateId = templateId;
            Uuid = uuid;
            VCenterId = vCenterId;
            VmId = vmId;
        }
    }
}
