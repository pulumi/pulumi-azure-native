// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ConnectedVMwarevSphere.V20220110Preview
{
    public static class GetVirtualMachine
    {
        /// <summary>
        /// Define the virtualMachine.
        /// </summary>
        public static Task<GetVirtualMachineResult> InvokeAsync(GetVirtualMachineArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineResult>("azure-native:connectedvmwarevsphere/v20220110preview:getVirtualMachine", args ?? new GetVirtualMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Define the virtualMachine.
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("azure-native:connectedvmwarevsphere/v20220110preview:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Resource Group Name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual machine resource.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public string VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineArgs()
        {
        }
        public static new GetVirtualMachineArgs Empty => new GetVirtualMachineArgs();
    }

    public sealed class GetVirtualMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Resource Group Name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual machine resource.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public Input<string> VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineInvokeArgs()
        {
        }
        public static new GetVirtualMachineInvokeArgs Empty => new GetVirtualMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineResult
    {
        /// <summary>
        /// Gets the name of the corresponding resource in Kubernetes.
        /// </summary>
        public readonly string CustomResourceName;
        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Firmware type
        /// </summary>
        public readonly string? FirmwareType;
        /// <summary>
        /// Gets or sets the folder path of the vm.
        /// </summary>
        public readonly string FolderPath;
        /// <summary>
        /// Guest agent status properties.
        /// </summary>
        public readonly Outputs.GuestAgentProfileResponse? GuestAgentProfile;
        /// <summary>
        /// Hardware properties.
        /// </summary>
        public readonly Outputs.HardwareProfileResponse? HardwareProfile;
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// Gets or sets the instance uuid of the vm.
        /// </summary>
        public readonly string InstanceUuid;
        /// <summary>
        /// Gets or sets the inventory Item ID for the virtual machine.
        /// </summary>
        public readonly string? InventoryItemId;
        /// <summary>
        /// Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Gets or sets the vCenter Managed Object name for the virtual machine.
        /// </summary>
        public readonly string MoName;
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
        /// </summary>
        public readonly string? MoRefId;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network properties.
        /// </summary>
        public readonly Outputs.NetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// OS properties.
        /// </summary>
        public readonly Outputs.OsProfileResponse? OsProfile;
        /// <summary>
        /// Placement properties.
        /// </summary>
        public readonly Outputs.PlacementProfileResponse? PlacementProfile;
        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
        /// deploy.
        /// </summary>
        public readonly string? ResourcePoolId;
        /// <summary>
        /// Gets the security profile.
        /// </summary>
        public readonly Outputs.SecurityProfileResponse? SecurityProfile;
        /// <summary>
        /// Gets or sets the SMBIOS UUID of the vm.
        /// </summary>
        public readonly string? SmbiosUuid;
        /// <summary>
        /// The resource status information.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceStatusResponse> Statuses;
        /// <summary>
        /// Storage properties.
        /// </summary>
        public readonly Outputs.StorageProfileResponse? StorageProfile;
        /// <summary>
        /// The system data.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Gets or sets the Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Gets or sets the ARM Id of the template resource to deploy the virtual machine.
        /// </summary>
        public readonly string? TemplateId;
        /// <summary>
        /// Gets or sets the type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Gets or sets a unique identifier for this resource.
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
        /// </summary>
        public readonly string? VCenterId;
        /// <summary>
        /// Gets or sets a unique identifier for the vm resource.
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private GetVirtualMachineResult(
            string customResourceName,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string? firmwareType,

            string folderPath,

            Outputs.GuestAgentProfileResponse? guestAgentProfile,

            Outputs.HardwareProfileResponse? hardwareProfile,

            string id,

            Outputs.IdentityResponse? identity,

            string instanceUuid,

            string? inventoryItemId,

            string? kind,

            string location,

            string moName,

            string? moRefId,

            string name,

            Outputs.NetworkProfileResponse? networkProfile,

            Outputs.OsProfileResponse? osProfile,

            Outputs.PlacementProfileResponse? placementProfile,

            string powerState,

            string provisioningState,

            string? resourcePoolId,

            Outputs.SecurityProfileResponse? securityProfile,

            string? smbiosUuid,

            ImmutableArray<Outputs.ResourceStatusResponse> statuses,

            Outputs.StorageProfileResponse? storageProfile,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? templateId,

            string type,

            string uuid,

            string? vCenterId,

            string vmId)
        {
            CustomResourceName = customResourceName;
            ExtendedLocation = extendedLocation;
            FirmwareType = firmwareType;
            FolderPath = folderPath;
            GuestAgentProfile = guestAgentProfile;
            HardwareProfile = hardwareProfile;
            Id = id;
            Identity = identity;
            InstanceUuid = instanceUuid;
            InventoryItemId = inventoryItemId;
            Kind = kind;
            Location = location;
            MoName = moName;
            MoRefId = moRefId;
            Name = name;
            NetworkProfile = networkProfile;
            OsProfile = osProfile;
            PlacementProfile = placementProfile;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            ResourcePoolId = resourcePoolId;
            SecurityProfile = securityProfile;
            SmbiosUuid = smbiosUuid;
            Statuses = statuses;
            StorageProfile = storageProfile;
            SystemData = systemData;
            Tags = tags;
            TemplateId = templateId;
            Type = type;
            Uuid = uuid;
            VCenterId = vCenterId;
            VmId = vmId;
        }
    }
}
