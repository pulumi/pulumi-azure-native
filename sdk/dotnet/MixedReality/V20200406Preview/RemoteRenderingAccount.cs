// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.MixedReality.V20200406Preview
{
    /// <summary>
    /// RemoteRenderingAccount Response.
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:mixedreality/v20200406preview:RemoteRenderingAccount")]
    public partial class RemoteRenderingAccount : Pulumi.CustomResource
    {
        /// <summary>
        /// Correspond domain name of certain Spatial Anchors Account
        /// </summary>
        [Output("accountDomain")]
        public Output<string> AccountDomain { get; private set; } = null!;

        /// <summary>
        /// unique id of certain account.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The identity associated with this account
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The kind of account, if supported
        /// </summary>
        [Output("kind")]
        public Output<Outputs.SkuResponse?> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan associated with this account
        /// </summary>
        [Output("plan")]
        public Output<Outputs.IdentityResponse?> Plan { get; private set; } = null!;

        /// <summary>
        /// The sku associated with this account
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// The name of the storage account associated with this accountId
        /// </summary>
        [Output("storageAccountName")]
        public Output<string?> StorageAccountName { get; private set; } = null!;

        /// <summary>
        /// System metadata for this account
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RemoteRenderingAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemoteRenderingAccount(string name, RemoteRenderingAccountArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:mixedreality/v20200406preview:RemoteRenderingAccount", name, args ?? new RemoteRenderingAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemoteRenderingAccount(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:mixedreality/v20200406preview:RemoteRenderingAccount", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:mixedreality:RemoteRenderingAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:mixedreality/latest:RemoteRenderingAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:mixedreality/v20191202preview:RemoteRenderingAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:mixedreality/v20210101:RemoteRenderingAccount"},
                    new Pulumi.Alias { Type = "azure-nextgen:mixedreality/v20210301preview:RemoteRenderingAccount"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemoteRenderingAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemoteRenderingAccount Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RemoteRenderingAccount(name, id, options);
        }
    }

    public sealed class RemoteRenderingAccountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of an Mixed Reality Account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The identity associated with this account
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The kind of account, if supported
        /// </summary>
        [Input("kind")]
        public Input<Inputs.SkuArgs>? Kind { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The plan associated with this account
        /// </summary>
        [Input("plan")]
        public Input<Inputs.IdentityArgs>? Plan { get; set; }

        /// <summary>
        /// Name of an Azure resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The sku associated with this account
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuArgs>? Sku { get; set; }

        /// <summary>
        /// The name of the storage account associated with this accountId
        /// </summary>
        [Input("storageAccountName")]
        public Input<string>? StorageAccountName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RemoteRenderingAccountArgs()
        {
        }
    }
}
