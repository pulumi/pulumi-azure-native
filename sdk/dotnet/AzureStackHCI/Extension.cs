// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI
{
    /// <summary>
    /// Details of a particular extension in HCI Cluster.
    /// API Version: 2023-02-01.
    /// Previous API Version: 2021-01-01-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:azurestackhci:Extension")]
    public partial class Extension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Aggregate state of Arc Extensions across the nodes in this HCI cluster.
        /// </summary>
        [Output("aggregateState")]
        public Output<string> AggregateState { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Output("autoUpgradeMinorVersion")]
        public Output<bool?> AutoUpgradeMinorVersion { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available.
        /// </summary>
        [Output("enableAutomaticUpgrade")]
        public Output<bool?> EnableAutomaticUpgrade { get; private set; } = null!;

        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        [Output("forceUpdateTag")]
        public Output<string?> ForceUpdateTag { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of Arc Extension in each of the nodes.
        /// </summary>
        [Output("perNodeExtensionDetails")]
        public Output<ImmutableArray<Outputs.PerNodeExtensionStateResponse>> PerNodeExtensionDetails { get; private set; } = null!;

        /// <summary>
        /// Protected settings (may contain secrets).
        /// </summary>
        [Output("protectedSettings")]
        public Output<object?> ProtectedSettings { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the Extension proxy resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The name of the extension handler publisher.
        /// </summary>
        [Output("publisher")]
        public Output<string?> Publisher { get; private set; } = null!;

        /// <summary>
        /// Json formatted public settings for the extension.
        /// </summary>
        [Output("settings")]
        public Output<object?> Settings { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the version of the script handler. Latest version would be used if not specified.
        /// </summary>
        [Output("typeHandlerVersion")]
        public Output<string?> TypeHandlerVersion { get; private set; } = null!;


        /// <summary>
        /// Create a Extension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Extension(string name, ExtensionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:azurestackhci:Extension", name, args ?? new ExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Extension(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:azurestackhci:Extension", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20210101preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20210901:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20210901preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20220101:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20220301:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20220501:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20220901:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20221001:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20221201:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20221215preview:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20230201:Extension"},
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20230301:Extension"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Extension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Extension Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Extension(name, id, options);
        }
    }

    public sealed class ExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the proxy resource holding details of HCI ArcSetting information.
        /// </summary>
        [Input("arcSettingName", required: true)]
        public Input<string> ArcSettingName { get; set; } = null!;

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Input("autoUpgradeMinorVersion")]
        public Input<bool>? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available.
        /// </summary>
        [Input("enableAutomaticUpgrade")]
        public Input<bool>? EnableAutomaticUpgrade { get; set; }

        /// <summary>
        /// The name of the machine extension.
        /// </summary>
        [Input("extensionName")]
        public Input<string>? ExtensionName { get; set; }

        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// Protected settings (may contain secrets).
        /// </summary>
        [Input("protectedSettings")]
        public Input<object>? ProtectedSettings { get; set; }

        /// <summary>
        /// The name of the extension handler publisher.
        /// </summary>
        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Json formatted public settings for the extension.
        /// </summary>
        [Input("settings")]
        public Input<object>? Settings { get; set; }

        /// <summary>
        /// Specifies the type of the extension; an example is "CustomScriptExtension".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the version of the script handler. Latest version would be used if not specified.
        /// </summary>
        [Input("typeHandlerVersion")]
        public Input<string>? TypeHandlerVersion { get; set; }

        public ExtensionArgs()
        {
        }
        public static new ExtensionArgs Empty => new ExtensionArgs();
    }
}
