// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureStackHCI.V20210901
{
    /// <summary>
    /// The type of identity that last modified the resource.
    /// </summary>
    [EnumType]
    public readonly struct CreatedByType : IEquatable<CreatedByType>
    {
        private readonly string _value;

        private CreatedByType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreatedByType User { get; } = new CreatedByType("User");
        public static CreatedByType Application { get; } = new CreatedByType("Application");
        public static CreatedByType ManagedIdentity { get; } = new CreatedByType("ManagedIdentity");
        public static CreatedByType Key { get; } = new CreatedByType("Key");

        public static bool operator ==(CreatedByType left, CreatedByType right) => left.Equals(right);
        public static bool operator !=(CreatedByType left, CreatedByType right) => !left.Equals(right);

        public static explicit operator string(CreatedByType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreatedByType other && Equals(other);
        public bool Equals(CreatedByType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Desired level of diagnostic data emitted by the cluster.
    /// </summary>
    [EnumType]
    public readonly struct DiagnosticLevel : IEquatable<DiagnosticLevel>
    {
        private readonly string _value;

        private DiagnosticLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiagnosticLevel Off { get; } = new DiagnosticLevel("Off");
        public static DiagnosticLevel Basic { get; } = new DiagnosticLevel("Basic");
        public static DiagnosticLevel Enhanced { get; } = new DiagnosticLevel("Enhanced");

        public static bool operator ==(DiagnosticLevel left, DiagnosticLevel right) => left.Equals(right);
        public static bool operator !=(DiagnosticLevel left, DiagnosticLevel right) => !left.Equals(right);

        public static explicit operator string(DiagnosticLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiagnosticLevel other && Equals(other);
        public bool Equals(DiagnosticLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Desired state of Windows Server Subscription.
    /// </summary>
    [EnumType]
    public readonly struct WindowsServerSubscription : IEquatable<WindowsServerSubscription>
    {
        private readonly string _value;

        private WindowsServerSubscription(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WindowsServerSubscription Disabled { get; } = new WindowsServerSubscription("Disabled");
        public static WindowsServerSubscription Enabled { get; } = new WindowsServerSubscription("Enabled");

        public static bool operator ==(WindowsServerSubscription left, WindowsServerSubscription right) => left.Equals(right);
        public static bool operator !=(WindowsServerSubscription left, WindowsServerSubscription right) => !left.Equals(right);

        public static explicit operator string(WindowsServerSubscription value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WindowsServerSubscription other && Equals(other);
        public bool Equals(WindowsServerSubscription other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
