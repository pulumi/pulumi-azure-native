// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI
{
    public static class GetVirtualNetwork
    {
        /// <summary>
        /// The virtual network resource definition.
        /// Azure REST API version: 2022-12-15-preview.
        /// </summary>
        public static Task<GetVirtualNetworkResult> InvokeAsync(GetVirtualNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkResult>("azure-native:azurestackhci:getVirtualNetwork", args ?? new GetVirtualNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// The virtual network resource definition.
        /// Azure REST API version: 2022-12-15-preview.
        /// </summary>
        public static Output<GetVirtualNetworkResult> Invoke(GetVirtualNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkResult>("azure-native:azurestackhci:getVirtualNetwork", args ?? new GetVirtualNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual network
        /// </summary>
        [Input("virtualNetworkName", required: true)]
        public string VirtualNetworkName { get; set; } = null!;

        public GetVirtualNetworkArgs()
        {
        }
        public static new GetVirtualNetworkArgs Empty => new GetVirtualNetworkArgs();
    }

    public sealed class GetVirtualNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual network
        /// </summary>
        [Input("virtualNetworkName", required: true)]
        public Input<string> VirtualNetworkName { get; set; } = null!;

        public GetVirtualNetworkInvokeArgs()
        {
        }
        public static new GetVirtualNetworkInvokeArgs Empty => new GetVirtualNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualNetworkResult
    {
        /// <summary>
        /// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
        /// </summary>
        public readonly Outputs.VirtualNetworkPropertiesResponseDhcpOptions? DhcpOptions;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of the network
        /// </summary>
        public readonly string? NetworkType;
        /// <summary>
        /// Provisioning state of the virtual network.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed state of virtual networks
        /// </summary>
        public readonly Outputs.VirtualNetworkStatusResponse Status;
        /// <summary>
        /// Subnet - list of subnets under the virtual network
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualNetworkPropertiesResponseSubnets> Subnets;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// name of the network switch to be used for VMs
        /// </summary>
        public readonly string? VmSwitchName;

        [OutputConstructor]
        private GetVirtualNetworkResult(
            Outputs.VirtualNetworkPropertiesResponseDhcpOptions? dhcpOptions,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string location,

            string name,

            string? networkType,

            string provisioningState,

            Outputs.VirtualNetworkStatusResponse status,

            ImmutableArray<Outputs.VirtualNetworkPropertiesResponseSubnets> subnets,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? vmSwitchName)
        {
            DhcpOptions = dhcpOptions;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            NetworkType = networkType;
            ProvisioningState = provisioningState;
            Status = status;
            Subnets = subnets;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VmSwitchName = vmSwitchName;
        }
    }
}
