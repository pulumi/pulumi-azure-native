// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20221215Preview
{
    public static class GetVirtualMachine
    {
        /// <summary>
        /// Gets a virtual machine
        /// </summary>
        public static Task<GetVirtualMachineResult> InvokeAsync(GetVirtualMachineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineResult>("azure-native:azurestackhci/v20221215preview:getVirtualMachine", args ?? new GetVirtualMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a virtual machine
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("azure-native:azurestackhci/v20221215preview:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual machine
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public string VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineArgs()
        {
        }
        public static new GetVirtualMachineArgs Empty => new GetVirtualMachineArgs();
    }

    public sealed class GetVirtualMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual machine
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public Input<string> VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineInvokeArgs()
        {
        }
        public static new GetVirtualMachineInvokeArgs Empty => new GetVirtualMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineResult
    {
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Guest agent status properties.
        /// </summary>
        public readonly Outputs.GuestAgentProfileResponse? GuestAgentProfile;
        /// <summary>
        /// HardwareProfile - Specifies the hardware settings for the virtual machine.
        /// </summary>
        public readonly Outputs.VirtualMachinePropertiesResponseHardwareProfile? HardwareProfile;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity for the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NetworkProfile - describes the network configuration the virtual machine
        /// </summary>
        public readonly Outputs.VirtualMachinePropertiesResponseNetworkProfile? NetworkProfile;
        /// <summary>
        /// OsProfile - describes the configuration of the operating system and sets login data
        /// </summary>
        public readonly Outputs.VirtualMachinePropertiesResponseOsProfile? OsProfile;
        /// <summary>
        /// Provisioning state of the virtual machine.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// SecurityProfile - Specifies the security settings for the virtual machine.
        /// </summary>
        public readonly Outputs.VirtualMachinePropertiesResponseSecurityProfile? SecurityProfile;
        /// <summary>
        /// The observed state of virtual machines
        /// </summary>
        public readonly Outputs.VirtualMachineStatusResponse Status;
        /// <summary>
        /// StorageProfile - contains information about the disks and storage information for the virtual machine
        /// </summary>
        public readonly Outputs.VirtualMachinePropertiesResponseStorageProfile? StorageProfile;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique identifier for the vm resource.
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private GetVirtualMachineResult(
            Outputs.ExtendedLocationResponse? extendedLocation,

            Outputs.GuestAgentProfileResponse? guestAgentProfile,

            Outputs.VirtualMachinePropertiesResponseHardwareProfile? hardwareProfile,

            string id,

            Outputs.IdentityResponse? identity,

            string location,

            string name,

            Outputs.VirtualMachinePropertiesResponseNetworkProfile? networkProfile,

            Outputs.VirtualMachinePropertiesResponseOsProfile? osProfile,

            string provisioningState,

            Outputs.VirtualMachinePropertiesResponseSecurityProfile? securityProfile,

            Outputs.VirtualMachineStatusResponse status,

            Outputs.VirtualMachinePropertiesResponseStorageProfile? storageProfile,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string vmId)
        {
            ExtendedLocation = extendedLocation;
            GuestAgentProfile = guestAgentProfile;
            HardwareProfile = hardwareProfile;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            NetworkProfile = networkProfile;
            OsProfile = osProfile;
            ProvisioningState = provisioningState;
            SecurityProfile = securityProfile;
            Status = status;
            StorageProfile = storageProfile;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VmId = vmId;
        }
    }
}
