// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20230901Preview
{
    public static class GetNetworkInterface
    {
        /// <summary>
        /// Gets a network interface
        /// </summary>
        public static Task<GetNetworkInterfaceResult> InvokeAsync(GetNetworkInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInterfaceResult>("azure-native:azurestackhci/v20230901preview:getNetworkInterface", args ?? new GetNetworkInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a network interface
        /// </summary>
        public static Output<GetNetworkInterfaceResult> Invoke(GetNetworkInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInterfaceResult>("azure-native:azurestackhci/v20230901preview:getNetworkInterface", args ?? new GetNetworkInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the network interface
        /// </summary>
        [Input("networkInterfaceName", required: true)]
        public string NetworkInterfaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceArgs()
        {
        }
        public static new GetNetworkInterfaceArgs Empty => new GetNetworkInterfaceArgs();
    }

    public sealed class GetNetworkInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the network interface
        /// </summary>
        [Input("networkInterfaceName", required: true)]
        public Input<string> NetworkInterfaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceInvokeArgs()
        {
        }
        public static new GetNetworkInterfaceInvokeArgs Empty => new GetNetworkInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkInterfaceResult
    {
        /// <summary>
        /// DNS Settings for the interface
        /// </summary>
        public readonly Outputs.InterfaceDNSSettingsResponse? DnsSettings;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPConfigurations - A list of IPConfigurations of the network interface.
        /// </summary>
        public readonly ImmutableArray<Outputs.IPConfigurationResponse> IpConfigurations;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// MacAddress - The MAC address of the network interface.
        /// </summary>
        public readonly string? MacAddress;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the network interface.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed state of network interfaces
        /// </summary>
        public readonly Outputs.NetworkInterfaceStatusResponse Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkInterfaceResult(
            Outputs.InterfaceDNSSettingsResponse? dnsSettings,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            ImmutableArray<Outputs.IPConfigurationResponse> ipConfigurations,

            string location,

            string? macAddress,

            string name,

            string provisioningState,

            Outputs.NetworkInterfaceStatusResponse status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            DnsSettings = dnsSettings;
            ExtendedLocation = extendedLocation;
            Id = id;
            IpConfigurations = ipConfigurations;
            Location = location;
            MacAddress = macAddress;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
