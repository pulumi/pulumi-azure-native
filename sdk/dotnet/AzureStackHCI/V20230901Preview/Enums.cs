// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureStackHCI.V20230901Preview
{
    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the IP Pool [vm, vippool]
    /// </summary>
    [EnumType]
    public readonly struct IPPoolTypeEnum : IEquatable<IPPoolTypeEnum>
    {
        private readonly string _value;

        private IPPoolTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPPoolTypeEnum Vm { get; } = new IPPoolTypeEnum("vm");
        public static IPPoolTypeEnum Vippool { get; } = new IPPoolTypeEnum("vippool");

        public static bool operator ==(IPPoolTypeEnum left, IPPoolTypeEnum right) => left.Equals(right);
        public static bool operator !=(IPPoolTypeEnum left, IPPoolTypeEnum right) => !left.Equals(right);

        public static explicit operator string(IPPoolTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPPoolTypeEnum other && Equals(other);
        public bool Equals(IPPoolTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
    /// </summary>
    [EnumType]
    public readonly struct IpAllocationMethodEnum : IEquatable<IpAllocationMethodEnum>
    {
        private readonly string _value;

        private IpAllocationMethodEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpAllocationMethodEnum Dynamic { get; } = new IpAllocationMethodEnum("Dynamic");
        public static IpAllocationMethodEnum Static { get; } = new IpAllocationMethodEnum("Static");

        public static bool operator ==(IpAllocationMethodEnum left, IpAllocationMethodEnum right) => left.Equals(right);
        public static bool operator !=(IpAllocationMethodEnum left, IpAllocationMethodEnum right) => !left.Equals(right);

        public static explicit operator string(IpAllocationMethodEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAllocationMethodEnum other && Equals(other);
        public bool Equals(IpAllocationMethodEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
