// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI
{
    public static class GetLogicalNetwork
    {
        /// <summary>
        /// The logical network resource definition.
        /// Azure REST API version: 2023-09-01-preview.
        /// 
        /// Other available API versions: 2024-01-01, 2024-02-01-preview, 2024-05-01-preview.
        /// </summary>
        public static Task<GetLogicalNetworkResult> InvokeAsync(GetLogicalNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogicalNetworkResult>("azure-native:azurestackhci:getLogicalNetwork", args ?? new GetLogicalNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// The logical network resource definition.
        /// Azure REST API version: 2023-09-01-preview.
        /// 
        /// Other available API versions: 2024-01-01, 2024-02-01-preview, 2024-05-01-preview.
        /// </summary>
        public static Output<GetLogicalNetworkResult> Invoke(GetLogicalNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogicalNetworkResult>("azure-native:azurestackhci:getLogicalNetwork", args ?? new GetLogicalNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogicalNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the logical network
        /// </summary>
        [Input("logicalNetworkName", required: true)]
        public string LogicalNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLogicalNetworkArgs()
        {
        }
        public static new GetLogicalNetworkArgs Empty => new GetLogicalNetworkArgs();
    }

    public sealed class GetLogicalNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the logical network
        /// </summary>
        [Input("logicalNetworkName", required: true)]
        public Input<string> LogicalNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLogicalNetworkInvokeArgs()
        {
        }
        public static new GetLogicalNetworkInvokeArgs Empty => new GetLogicalNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogicalNetworkResult
    {
        /// <summary>
        /// DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
        /// </summary>
        public readonly Outputs.LogicalNetworkPropertiesResponseDhcpOptions? DhcpOptions;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the logical network.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed state of logical networks
        /// </summary>
        public readonly Outputs.LogicalNetworkStatusResponse Status;
        /// <summary>
        /// Subnet - list of subnets under the logical network
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetResponse> Subnets;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// name of the network switch to be used for VMs
        /// </summary>
        public readonly string? VmSwitchName;

        [OutputConstructor]
        private GetLogicalNetworkResult(
            Outputs.LogicalNetworkPropertiesResponseDhcpOptions? dhcpOptions,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.LogicalNetworkStatusResponse status,

            ImmutableArray<Outputs.SubnetResponse> subnets,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? vmSwitchName)
        {
            DhcpOptions = dhcpOptions;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            Subnets = subnets;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VmSwitchName = vmSwitchName;
        }
    }
}
