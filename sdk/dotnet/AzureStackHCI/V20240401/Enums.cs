// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureStackHCI.V20240401
{
    /// <summary>
    /// Indicates the way the update content can be downloaded.
    /// </summary>
    [EnumType]
    public readonly struct AvailabilityType : IEquatable<AvailabilityType>
    {
        private readonly string _value;

        private AvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AvailabilityType Local { get; } = new AvailabilityType("Local");
        public static AvailabilityType Online { get; } = new AvailabilityType("Online");
        public static AvailabilityType Notify { get; } = new AvailabilityType("Notify");

        public static bool operator ==(AvailabilityType left, AvailabilityType right) => left.Equals(right);
        public static bool operator !=(AvailabilityType left, AvailabilityType right) => !left.Equals(right);

        public static explicit operator string(AvailabilityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AvailabilityType other && Equals(other);
        public bool Equals(AvailabilityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// WDAC Compliance Assignment
    /// </summary>
    [EnumType]
    public readonly struct ComplianceAssignmentType : IEquatable<ComplianceAssignmentType>
    {
        private readonly string _value;

        private ComplianceAssignmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Report on the state of the machine, but don't make changes.
        /// </summary>
        public static ComplianceAssignmentType Audit { get; } = new ComplianceAssignmentType("Audit");
        /// <summary>
        /// Applied to the machine. If it drifts, the local service inside the machine makes a correction at the next evaluation.
        /// </summary>
        public static ComplianceAssignmentType ApplyAndAutoCorrect { get; } = new ComplianceAssignmentType("ApplyAndAutoCorrect");

        public static bool operator ==(ComplianceAssignmentType left, ComplianceAssignmentType right) => left.Equals(right);
        public static bool operator !=(ComplianceAssignmentType left, ComplianceAssignmentType right) => !left.Equals(right);

        public static explicit operator string(ComplianceAssignmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ComplianceAssignmentType other && Equals(other);
        public bool Equals(ComplianceAssignmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment mode for cluster deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentMode : IEquatable<DeploymentMode>
    {
        private readonly string _value;

        private DeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Validate ECE action deployment for a cluster.
        /// </summary>
        public static DeploymentMode Validate { get; } = new DeploymentMode("Validate");
        /// <summary>
        /// Deploy ECE action deployment for a cluster.
        /// </summary>
        public static DeploymentMode Deploy { get; } = new DeploymentMode("Deploy");

        public static bool operator ==(DeploymentMode left, DeploymentMode right) => left.Equals(right);
        public static bool operator !=(DeploymentMode left, DeploymentMode right) => !left.Equals(right);

        public static explicit operator string(DeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentMode other && Equals(other);
        public bool Equals(DeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Device kind to support polymorphic resource.
    /// </summary>
    [EnumType]
    public readonly struct DeviceKind : IEquatable<DeviceKind>
    {
        private readonly string _value;

        private DeviceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Arc-enabled edge device with HCI OS.
        /// </summary>
        public static DeviceKind HCI { get; } = new DeviceKind("HCI");

        public static bool operator ==(DeviceKind left, DeviceKind right) => left.Equals(right);
        public static bool operator !=(DeviceKind left, DeviceKind right) => !left.Equals(right);

        public static explicit operator string(DeviceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeviceKind other && Equals(other);
        public bool Equals(DeviceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Desired level of diagnostic data emitted by the cluster.
    /// </summary>
    [EnumType]
    public readonly struct DiagnosticLevel : IEquatable<DiagnosticLevel>
    {
        private readonly string _value;

        private DiagnosticLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiagnosticLevel Off { get; } = new DiagnosticLevel("Off");
        public static DiagnosticLevel Basic { get; } = new DiagnosticLevel("Basic");
        public static DiagnosticLevel Enhanced { get; } = new DiagnosticLevel("Enhanced");

        public static bool operator ==(DiagnosticLevel left, DiagnosticLevel right) => left.Equals(right);
        public static bool operator !=(DiagnosticLevel left, DiagnosticLevel right) => !left.Equals(right);

        public static explicit operator string(DiagnosticLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiagnosticLevel other && Equals(other);
        public bool Equals(DiagnosticLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Secret name expected for Enterprise Cloud Engine (ECE) deployment.
    /// </summary>
    [EnumType]
    public readonly struct EceSecrets : IEquatable<EceSecrets>
    {
        private readonly string _value;

        private EceSecrets(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// AzureStackLCMUserCredential used for LCM operations for AzureStackHCI cluster.
        /// </summary>
        public static EceSecrets AzureStackLCMUserCredential { get; } = new EceSecrets("AzureStackLCMUserCredential");
        /// <summary>
        /// DefaultARBApplication used to manage Azure Arc resource bridge (ARB) for AzureStackHCI cluster.
        /// </summary>
        public static EceSecrets DefaultARBApplication { get; } = new EceSecrets("DefaultARBApplication");
        /// <summary>
        /// LocalAdminCredential used for admin operations for AzureStackHCI cluster.
        /// </summary>
        public static EceSecrets LocalAdminCredential { get; } = new EceSecrets("LocalAdminCredential");
        /// <summary>
        /// WitnessStorageKey used for setting up a cloud witness for AzureStackHCI cluster.
        /// </summary>
        public static EceSecrets WitnessStorageKey { get; } = new EceSecrets("WitnessStorageKey");

        public static bool operator ==(EceSecrets left, EceSecrets right) => left.Equals(right);
        public static bool operator !=(EceSecrets left, EceSecrets right) => !left.Equals(right);

        public static explicit operator string(EceSecrets value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EceSecrets other && Equals(other);
        public bool Equals(EceSecrets other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The intended operation for a cluster.
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Cluster provisioning operation.
        /// </summary>
        public static OperationType ClusterProvisioning { get; } = new OperationType("ClusterProvisioning");
        /// <summary>
        /// Cluster upgrade operation.
        /// </summary>
        public static OperationType ClusterUpgrade { get; } = new OperationType("ClusterUpgrade");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the service.
    /// </summary>
    [EnumType]
    public readonly struct ServiceName : IEquatable<ServiceName>
    {
        private readonly string _value;

        private ServiceName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceName WAC { get; } = new ServiceName("WAC");

        public static bool operator ==(ServiceName left, ServiceName right) => left.Equals(right);
        public static bool operator !=(ServiceName left, ServiceName right) => !left.Equals(right);

        public static explicit operator string(ServiceName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceName other && Equals(other);
        public bool Equals(ServiceName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Customer Intent for Software Assurance Benefit.
    /// </summary>
    [EnumType]
    public readonly struct SoftwareAssuranceIntent : IEquatable<SoftwareAssuranceIntent>
    {
        private readonly string _value;

        private SoftwareAssuranceIntent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SoftwareAssuranceIntent Enable { get; } = new SoftwareAssuranceIntent("Enable");
        public static SoftwareAssuranceIntent Disable { get; } = new SoftwareAssuranceIntent("Disable");

        public static bool operator ==(SoftwareAssuranceIntent left, SoftwareAssuranceIntent right) => left.Equals(right);
        public static bool operator !=(SoftwareAssuranceIntent left, SoftwareAssuranceIntent right) => !left.Equals(right);

        public static explicit operator string(SoftwareAssuranceIntent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoftwareAssuranceIntent other && Equals(other);
        public bool Equals(SoftwareAssuranceIntent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the update as it relates to this stamp.
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static State HasPrerequisite { get; } = new State("HasPrerequisite");
        public static State Obsolete { get; } = new State("Obsolete");
        public static State Ready { get; } = new State("Ready");
        public static State NotApplicableBecauseAnotherUpdateIsInProgress { get; } = new State("NotApplicableBecauseAnotherUpdateIsInProgress");
        public static State Preparing { get; } = new State("Preparing");
        public static State Installing { get; } = new State("Installing");
        public static State Installed { get; } = new State("Installed");
        public static State PreparationFailed { get; } = new State("PreparationFailed");
        public static State InstallationFailed { get; } = new State("InstallationFailed");
        public static State Invalid { get; } = new State("Invalid");
        public static State Recalled { get; } = new State("Recalled");
        public static State Downloading { get; } = new State("Downloading");
        public static State DownloadFailed { get; } = new State("DownloadFailed");
        public static State HealthChecking { get; } = new State("HealthChecking");
        public static State HealthCheckFailed { get; } = new State("HealthCheckFailed");
        public static State ReadyToInstall { get; } = new State("ReadyToInstall");
        public static State ScanInProgress { get; } = new State("ScanInProgress");
        public static State ScanFailed { get; } = new State("ScanFailed");
        public static State AdditionalContentRequired { get; } = new State("AdditionalContentRequired");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the update run.
    /// </summary>
    [EnumType]
    public readonly struct UpdateRunPropertiesState : IEquatable<UpdateRunPropertiesState>
    {
        private readonly string _value;

        private UpdateRunPropertiesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UpdateRunPropertiesState Unknown { get; } = new UpdateRunPropertiesState("Unknown");
        public static UpdateRunPropertiesState Succeeded { get; } = new UpdateRunPropertiesState("Succeeded");
        public static UpdateRunPropertiesState InProgress { get; } = new UpdateRunPropertiesState("InProgress");
        public static UpdateRunPropertiesState Failed { get; } = new UpdateRunPropertiesState("Failed");

        public static bool operator ==(UpdateRunPropertiesState left, UpdateRunPropertiesState right) => left.Equals(right);
        public static bool operator !=(UpdateRunPropertiesState left, UpdateRunPropertiesState right) => !left.Equals(right);

        public static explicit operator string(UpdateRunPropertiesState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpdateRunPropertiesState other && Equals(other);
        public bool Equals(UpdateRunPropertiesState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Overall update state of the stamp.
    /// </summary>
    [EnumType]
    public readonly struct UpdateSummariesPropertiesState : IEquatable<UpdateSummariesPropertiesState>
    {
        private readonly string _value;

        private UpdateSummariesPropertiesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UpdateSummariesPropertiesState Unknown { get; } = new UpdateSummariesPropertiesState("Unknown");
        public static UpdateSummariesPropertiesState AppliedSuccessfully { get; } = new UpdateSummariesPropertiesState("AppliedSuccessfully");
        public static UpdateSummariesPropertiesState UpdateAvailable { get; } = new UpdateSummariesPropertiesState("UpdateAvailable");
        public static UpdateSummariesPropertiesState UpdateInProgress { get; } = new UpdateSummariesPropertiesState("UpdateInProgress");
        public static UpdateSummariesPropertiesState UpdateFailed { get; } = new UpdateSummariesPropertiesState("UpdateFailed");
        public static UpdateSummariesPropertiesState NeedsAttention { get; } = new UpdateSummariesPropertiesState("NeedsAttention");
        public static UpdateSummariesPropertiesState PreparationInProgress { get; } = new UpdateSummariesPropertiesState("PreparationInProgress");
        public static UpdateSummariesPropertiesState PreparationFailed { get; } = new UpdateSummariesPropertiesState("PreparationFailed");

        public static bool operator ==(UpdateSummariesPropertiesState left, UpdateSummariesPropertiesState right) => left.Equals(right);
        public static bool operator !=(UpdateSummariesPropertiesState left, UpdateSummariesPropertiesState right) => !left.Equals(right);

        public static explicit operator string(UpdateSummariesPropertiesState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpdateSummariesPropertiesState other && Equals(other);
        public bool Equals(UpdateSummariesPropertiesState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Desired state of Windows Server Subscription.
    /// </summary>
    [EnumType]
    public readonly struct WindowsServerSubscription : IEquatable<WindowsServerSubscription>
    {
        private readonly string _value;

        private WindowsServerSubscription(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WindowsServerSubscription Disabled { get; } = new WindowsServerSubscription("Disabled");
        public static WindowsServerSubscription Enabled { get; } = new WindowsServerSubscription("Enabled");

        public static bool operator ==(WindowsServerSubscription left, WindowsServerSubscription right) => left.Equals(right);
        public static bool operator !=(WindowsServerSubscription left, WindowsServerSubscription right) => !left.Equals(right);

        public static explicit operator string(WindowsServerSubscription value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WindowsServerSubscription other && Equals(other);
        public bool Equals(WindowsServerSubscription other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
