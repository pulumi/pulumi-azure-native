// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20240401.Inputs
{

    /// <summary>
    /// The NIC Detail of a device.
    /// </summary>
    public sealed class NicDetailArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adapter Name of NIC
        /// </summary>
        [Input("adapterName")]
        public Input<string>? AdapterName { get; set; }

        /// <summary>
        /// Component Id of NIC
        /// </summary>
        [Input("componentId")]
        public Input<string>? ComponentId { get; set; }

        /// <summary>
        /// Default Gateway of NIC
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Default Isolation of Management NIC
        /// </summary>
        [Input("defaultIsolationId")]
        public Input<string>? DefaultIsolationId { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// DNS Servers for NIC
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Driver Version of NIC
        /// </summary>
        [Input("driverVersion")]
        public Input<string>? DriverVersion { get; set; }

        /// <summary>
        /// Interface Description of NIC
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Subnet Mask of NIC
        /// </summary>
        [Input("ip4Address")]
        public Input<string>? Ip4Address { get; set; }

        /// <summary>
        /// Subnet Mask of NIC
        /// </summary>
        [Input("subnetMask")]
        public Input<string>? SubnetMask { get; set; }

        public NicDetailArgs()
        {
        }
        public static new NicDetailArgs Empty => new NicDetailArgs();
    }
}
