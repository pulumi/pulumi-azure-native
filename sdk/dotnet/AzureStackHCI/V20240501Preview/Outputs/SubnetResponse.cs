// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20240501Preview.Outputs
{

    /// <summary>
    /// Properties of the subnet.
    /// </summary>
    [OutputType]
    public sealed class SubnetResponse
    {
        /// <summary>
        /// The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        /// </summary>
        public readonly string? AddressPrefix;
        /// <summary>
        /// List of address prefixes for the subnet.
        /// </summary>
        public readonly ImmutableArray<string> AddressPrefixes;
        /// <summary>
        /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        /// </summary>
        public readonly string? IpAllocationMethod;
        /// <summary>
        /// IPConfigurationReferences - list of IPConfigurationReferences
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetIpConfigurationReferenceResponse> IpConfigurationReferences;
        /// <summary>
        /// network associated pool of IP Addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.IPPoolResponse> IpPools;
        /// <summary>
        /// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// NetworkSecurityGroup - Network Security Group attached to the logical network.
        /// </summary>
        public readonly Outputs.NetworkSecurityGroupArmReferenceResponse? NetworkSecurityGroup;
        /// <summary>
        /// Route table resource.
        /// </summary>
        public readonly Outputs.RouteTableResponse? RouteTable;
        /// <summary>
        /// Vlan to use for the subnet
        /// </summary>
        public readonly int? Vlan;

        [OutputConstructor]
        private SubnetResponse(
            string? addressPrefix,

            ImmutableArray<string> addressPrefixes,

            string? ipAllocationMethod,

            ImmutableArray<Outputs.SubnetIpConfigurationReferenceResponse> ipConfigurationReferences,

            ImmutableArray<Outputs.IPPoolResponse> ipPools,

            string? name,

            Outputs.NetworkSecurityGroupArmReferenceResponse? networkSecurityGroup,

            Outputs.RouteTableResponse? routeTable,

            int? vlan)
        {
            AddressPrefix = addressPrefix;
            AddressPrefixes = addressPrefixes;
            IpAllocationMethod = ipAllocationMethod;
            IpConfigurationReferences = ipConfigurationReferences;
            IpPools = ipPools;
            Name = name;
            NetworkSecurityGroup = networkSecurityGroup;
            RouteTable = routeTable;
            Vlan = vlan;
        }
    }
}
