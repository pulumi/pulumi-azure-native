// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20221201
{
    public static class GetUpdate
    {
        /// <summary>
        /// Get specified Update
        /// </summary>
        public static Task<GetUpdateResult> InvokeAsync(GetUpdateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUpdateResult>("azure-native:azurestackhci/v20221201:getUpdate", args ?? new GetUpdateArgs(), options.WithDefaults());

        /// <summary>
        /// Get specified Update
        /// </summary>
        public static Output<GetUpdateResult> Invoke(GetUpdateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUpdateResult>("azure-native:azurestackhci/v20221201:getUpdate", args ?? new GetUpdateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUpdateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Update
        /// </summary>
        [Input("updateName", required: true)]
        public string UpdateName { get; set; } = null!;

        public GetUpdateArgs()
        {
        }
        public static new GetUpdateArgs Empty => new GetUpdateArgs();
    }

    public sealed class GetUpdateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the Update
        /// </summary>
        [Input("updateName", required: true)]
        public Input<string> UpdateName { get; set; } = null!;

        public GetUpdateInvokeArgs()
        {
        }
        public static new GetUpdateInvokeArgs Empty => new GetUpdateInvokeArgs();
    }


    [OutputType]
    public sealed class GetUpdateResult
    {
        /// <summary>
        /// Extensible KV pairs serialized as a string. This is currently used to report the stamp OEM family and hardware model information when an update is flagged as Invalid for the stamp based on OEM type.
        /// </summary>
        public readonly string? AdditionalProperties;
        /// <summary>
        /// Indicates the way the update content can be downloaded.
        /// </summary>
        public readonly string? AvailabilityType;
        /// <summary>
        /// Description of the update.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of the Update
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Last time the package-specific checks were run.
        /// </summary>
        public readonly string? HealthCheckDate;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Date that the update was installed.
        /// </summary>
        public readonly string? InstalledDate;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Brief message with instructions for updates of AvailabilityType Notify.
        /// </summary>
        public readonly string? NotifyMessage;
        /// <summary>
        /// Path where the update package is available.
        /// </summary>
        public readonly string? PackagePath;
        /// <summary>
        /// Size of the package. This value is a combination of the size from update metadata and size of the payload that results from the live scan operation for OS update content.
        /// </summary>
        public readonly double? PackageSizeInMb;
        /// <summary>
        /// Customer-visible type of the update.
        /// </summary>
        public readonly string? PackageType;
        /// <summary>
        /// If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
        /// </summary>
        public readonly ImmutableArray<Outputs.UpdatePrerequisiteResponse> Prerequisites;
        /// <summary>
        /// Progress percentage of ongoing operation. Currently this property is only valid when the update is in the Downloading state, where it maps to how much of the update content has been downloaded.
        /// </summary>
        public readonly double? ProgressPercentage;
        /// <summary>
        /// Provisioning state of the Updates proxy resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Publisher of the update package.
        /// </summary>
        public readonly string? Publisher;
        /// <summary>
        /// Link to release notes for the update.
        /// </summary>
        public readonly string? ReleaseLink;
        /// <summary>
        /// State of the update as it relates to this stamp.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the update.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetUpdateResult(
            string? additionalProperties,

            string? availabilityType,

            string? description,

            string? displayName,

            string? healthCheckDate,

            string id,

            string? installedDate,

            string? location,

            string name,

            string? notifyMessage,

            string? packagePath,

            double? packageSizeInMb,

            string? packageType,

            ImmutableArray<Outputs.UpdatePrerequisiteResponse> prerequisites,

            double? progressPercentage,

            string provisioningState,

            string? publisher,

            string? releaseLink,

            string? state,

            Outputs.SystemDataResponse systemData,

            string type,

            string? version)
        {
            AdditionalProperties = additionalProperties;
            AvailabilityType = availabilityType;
            Description = description;
            DisplayName = displayName;
            HealthCheckDate = healthCheckDate;
            Id = id;
            InstalledDate = installedDate;
            Location = location;
            Name = name;
            NotifyMessage = notifyMessage;
            PackagePath = packagePath;
            PackageSizeInMb = packageSizeInMb;
            PackageType = packageType;
            Prerequisites = prerequisites;
            ProgressPercentage = progressPercentage;
            ProvisioningState = provisioningState;
            Publisher = publisher;
            ReleaseLink = releaseLink;
            State = state;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
