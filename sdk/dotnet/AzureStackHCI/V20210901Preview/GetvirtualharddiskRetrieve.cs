// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20210901Preview
{
    public static class GetvirtualharddiskRetrieve
    {
        /// <summary>
        /// Gets virtualharddisks by resource name
        /// </summary>
        public static Task<GetvirtualharddiskRetrieveResult> InvokeAsync(GetvirtualharddiskRetrieveArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetvirtualharddiskRetrieveResult>("azure-native:azurestackhci/v20210901preview:getvirtualharddiskRetrieve", args ?? new GetvirtualharddiskRetrieveArgs(), options.WithDefaults());

        /// <summary>
        /// Gets virtualharddisks by resource name
        /// </summary>
        public static Output<GetvirtualharddiskRetrieveResult> Invoke(GetvirtualharddiskRetrieveInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetvirtualharddiskRetrieveResult>("azure-native:azurestackhci/v20210901preview:getvirtualharddiskRetrieve", args ?? new GetvirtualharddiskRetrieveInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetvirtualharddiskRetrieveArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("virtualharddisksName", required: true)]
        public string VirtualharddisksName { get; set; } = null!;

        public GetvirtualharddiskRetrieveArgs()
        {
        }
        public static new GetvirtualharddiskRetrieveArgs Empty => new GetvirtualharddiskRetrieveArgs();
    }

    public sealed class GetvirtualharddiskRetrieveInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("virtualharddisksName", required: true)]
        public Input<string> VirtualharddisksName { get; set; } = null!;

        public GetvirtualharddiskRetrieveInvokeArgs()
        {
        }
        public static new GetvirtualharddiskRetrieveInvokeArgs Empty => new GetvirtualharddiskRetrieveInvokeArgs();
    }


    [OutputType]
    public sealed class GetvirtualharddiskRetrieveResult
    {
        public readonly int? BlockSizeBytes;
        /// <summary>
        /// Storage ContainerID of the storage container to be used for VHD
        /// </summary>
        public readonly string? ContainerId;
        /// <summary>
        /// The format of the actual VHD file [vhd, vhdx]
        /// </summary>
        public readonly string? DiskFileFormat;
        /// <summary>
        /// diskSizeBytes - size of the disk in GB
        /// </summary>
        public readonly double? DiskSizeBytes;
        /// <summary>
        /// Boolean for enabling dynamic sizing on the virtual hard disk
        /// </summary>
        public readonly bool? Dynamic;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        public readonly int? LogicalSectorBytes;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly int? PhysicalSectorBytes;
        public readonly string ProvisioningState;
        /// <summary>
        /// name of the object to be used in moc
        /// </summary>
        public readonly string? ResourceName;
        /// <summary>
        /// VirtualHardDiskStatus defines the observed state of virtualharddisks
        /// </summary>
        public readonly Outputs.VirtualHardDiskStatusResponse Status;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetvirtualharddiskRetrieveResult(
            int? blockSizeBytes,

            string? containerId,

            string? diskFileFormat,

            double? diskSizeBytes,

            bool? dynamic,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string? hyperVGeneration,

            string id,

            string location,

            int? logicalSectorBytes,

            string name,

            int? physicalSectorBytes,

            string provisioningState,

            string? resourceName,

            Outputs.VirtualHardDiskStatusResponse status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BlockSizeBytes = blockSizeBytes;
            ContainerId = containerId;
            DiskFileFormat = diskFileFormat;
            DiskSizeBytes = diskSizeBytes;
            Dynamic = dynamic;
            ExtendedLocation = extendedLocation;
            HyperVGeneration = hyperVGeneration;
            Id = id;
            Location = location;
            LogicalSectorBytes = logicalSectorBytes;
            Name = name;
            PhysicalSectorBytes = physicalSectorBytes;
            ProvisioningState = provisioningState;
            ResourceName = resourceName;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
