// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20240801Preview
{
    public static class GetNetworkSecurityGroup
    {
        /// <summary>
        /// Gets the specified network security group.
        /// </summary>
        public static Task<GetNetworkSecurityGroupResult> InvokeAsync(GetNetworkSecurityGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkSecurityGroupResult>("azure-native:azurestackhci/v20240801preview:getNetworkSecurityGroup", args ?? new GetNetworkSecurityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the specified network security group.
        /// </summary>
        public static Output<GetNetworkSecurityGroupResult> Invoke(GetNetworkSecurityGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkSecurityGroupResult>("azure-native:azurestackhci/v20240801preview:getNetworkSecurityGroup", args ?? new GetNetworkSecurityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkSecurityGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the network security group
        /// </summary>
        [Input("networkSecurityGroupName", required: true)]
        public string NetworkSecurityGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkSecurityGroupArgs()
        {
        }
        public static new GetNetworkSecurityGroupArgs Empty => new GetNetworkSecurityGroupArgs();
    }

    public sealed class GetNetworkSecurityGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the network security group
        /// </summary>
        [Input("networkSecurityGroupName", required: true)]
        public Input<string> NetworkSecurityGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkSecurityGroupInvokeArgs()
        {
        }
        public static new GetNetworkSecurityGroupInvokeArgs Empty => new GetNetworkSecurityGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkSecurityGroupResult
    {
        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        public readonly string ETag;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A collection of references to network interfaces that are currently using this NSG.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceArmReferenceResponse> NetworkInterfaces;
        /// <summary>
        /// The provisioning state of the network security group resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// A collection of references to logical networks that are currently using this NSG
        /// </summary>
        public readonly ImmutableArray<Outputs.LogicalNetworkArmReferenceResponse> Subnets;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkSecurityGroupResult(
            string eTag,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string location,

            string name,

            ImmutableArray<Outputs.NetworkInterfaceArmReferenceResponse> networkInterfaces,

            string provisioningState,

            ImmutableArray<Outputs.LogicalNetworkArmReferenceResponse> subnets,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ETag = eTag;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            ProvisioningState = provisioningState;
            Subnets = subnets;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
