// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureStackHCI.V20240801Preview
{
    /// <summary>
    /// Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
    /// </summary>
    [EnumType]
    public readonly struct CloudInitDataSource : IEquatable<CloudInitDataSource>
    {
        private readonly string _value;

        private CloudInitDataSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// NoCloud is used as the datasource
        /// </summary>
        public static CloudInitDataSource NoCloud { get; } = new CloudInitDataSource("NoCloud");
        /// <summary>
        /// Azure is used as the datasource
        /// </summary>
        public static CloudInitDataSource Azure { get; } = new CloudInitDataSource("Azure");

        public static bool operator ==(CloudInitDataSource left, CloudInitDataSource right) => left.Equals(right);
        public static bool operator !=(CloudInitDataSource left, CloudInitDataSource right) => !left.Equals(right);

        public static explicit operator string(CloudInitDataSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudInitDataSource other && Equals(other);
        public bool Equals(CloudInitDataSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the actual VHD file [vhd, vhdx]
    /// </summary>
    [EnumType]
    public readonly struct DiskFileFormat : IEquatable<DiskFileFormat>
    {
        private readonly string _value;

        private DiskFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// VHDX file format
        /// </summary>
        public static DiskFileFormat Vhdx { get; } = new DiskFileFormat("vhdx");
        /// <summary>
        /// VHD file format
        /// </summary>
        public static DiskFileFormat Vhd { get; } = new DiskFileFormat("vhd");

        public static bool operator ==(DiskFileFormat left, DiskFileFormat right) => left.Equals(right);
        public static bool operator !=(DiskFileFormat left, DiskFileFormat right) => !left.Equals(right);

        public static explicit operator string(DiskFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskFileFormat other && Equals(other);
        public bool Equals(DiskFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Custom extended location type
        /// </summary>
        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// GPU assignment type
    /// </summary>
    [EnumType]
    public readonly struct GpuAssignmentTypeEnum : IEquatable<GpuAssignmentTypeEnum>
    {
        private readonly string _value;

        private GpuAssignmentTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Attach Graphics Processing Unit (GPU) using Discrete Device Assignment (DDA)
        /// </summary>
        public static GpuAssignmentTypeEnum GpuDDA { get; } = new GpuAssignmentTypeEnum("GpuDDA");
        /// <summary>
        /// Attach Graphics Processing Unit (GPU) using GPU Partitioning
        /// </summary>
        public static GpuAssignmentTypeEnum GpuP { get; } = new GpuAssignmentTypeEnum("GpuP");

        public static bool operator ==(GpuAssignmentTypeEnum left, GpuAssignmentTypeEnum right) => left.Equals(right);
        public static bool operator !=(GpuAssignmentTypeEnum left, GpuAssignmentTypeEnum right) => !left.Equals(right);

        public static explicit operator string(GpuAssignmentTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GpuAssignmentTypeEnum other && Equals(other);
        public bool Equals(GpuAssignmentTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The hypervisor generation of the Virtual Machine [V1, V2]
    /// </summary>
    [EnumType]
    public readonly struct HyperVGeneration : IEquatable<HyperVGeneration>
    {
        private readonly string _value;

        private HyperVGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Generation 1 (V1) hypervisor
        /// </summary>
        public static HyperVGeneration V1 { get; } = new HyperVGeneration("V1");
        /// <summary>
        /// Generation 2 (V2) hypervisor
        /// </summary>
        public static HyperVGeneration V2 { get; } = new HyperVGeneration("V2");

        public static bool operator ==(HyperVGeneration left, HyperVGeneration right) => left.Equals(right);
        public static bool operator !=(HyperVGeneration left, HyperVGeneration right) => !left.Equals(right);

        public static explicit operator string(HyperVGeneration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HyperVGeneration other && Equals(other);
        public bool Equals(HyperVGeneration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the IP Pool [vm, vippool]
    /// </summary>
    [EnumType]
    public readonly struct IPPoolTypeEnum : IEquatable<IPPoolTypeEnum>
    {
        private readonly string _value;

        private IPPoolTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Virtual Machine IP Pool
        /// </summary>
        public static IPPoolTypeEnum Vm { get; } = new IPPoolTypeEnum("vm");
        /// <summary>
        /// VIP Pool
        /// </summary>
        public static IPPoolTypeEnum Vippool { get; } = new IPPoolTypeEnum("vippool");

        public static bool operator ==(IPPoolTypeEnum left, IPPoolTypeEnum right) => left.Equals(right);
        public static bool operator !=(IPPoolTypeEnum left, IPPoolTypeEnum right) => !left.Equals(right);

        public static explicit operator string(IPPoolTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPPoolTypeEnum other && Equals(other);
        public bool Equals(IPPoolTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
    /// </summary>
    [EnumType]
    public readonly struct IpAllocationMethodEnum : IEquatable<IpAllocationMethodEnum>
    {
        private readonly string _value;

        private IpAllocationMethodEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Dynamic IP allocation method
        /// </summary>
        public static IpAllocationMethodEnum Dynamic { get; } = new IpAllocationMethodEnum("Dynamic");
        /// <summary>
        /// Static IP allocation method
        /// </summary>
        public static IpAllocationMethodEnum Static { get; } = new IpAllocationMethodEnum("Static");

        public static bool operator ==(IpAllocationMethodEnum left, IpAllocationMethodEnum right) => left.Equals(right);
        public static bool operator !=(IpAllocationMethodEnum left, IpAllocationMethodEnum right) => !left.Equals(right);

        public static explicit operator string(IpAllocationMethodEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAllocationMethodEnum other && Equals(other);
        public bool Equals(IpAllocationMethodEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
    /// </summary>
    [EnumType]
    public readonly struct OperatingSystemTypes : IEquatable<OperatingSystemTypes>
    {
        private readonly string _value;

        private OperatingSystemTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Windows operating system
        /// </summary>
        public static OperatingSystemTypes Windows { get; } = new OperatingSystemTypes("Windows");
        /// <summary>
        /// Linux operating system
        /// </summary>
        public static OperatingSystemTypes Linux { get; } = new OperatingSystemTypes("Linux");

        public static bool operator ==(OperatingSystemTypes left, OperatingSystemTypes right) => left.Equals(right);
        public static bool operator !=(OperatingSystemTypes left, OperatingSystemTypes right) => !left.Equals(right);

        public static explicit operator string(OperatingSystemTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatingSystemTypes other && Equals(other);
        public bool Equals(OperatingSystemTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The guest agent provisioning action.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningAction : IEquatable<ProvisioningAction>
    {
        private readonly string _value;

        private ProvisioningAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Install guest agent
        /// </summary>
        public static ProvisioningAction Install { get; } = new ProvisioningAction("install");
        /// <summary>
        /// Uninstall guest agent
        /// </summary>
        public static ProvisioningAction Uninstall { get; } = new ProvisioningAction("uninstall");
        /// <summary>
        /// Repair guest agent
        /// </summary>
        public static ProvisioningAction Repair { get; } = new ProvisioningAction("repair");

        public static bool operator ==(ProvisioningAction left, ProvisioningAction right) => left.Equals(right);
        public static bool operator !=(ProvisioningAction left, ProvisioningAction right) => !left.Equals(right);

        public static explicit operator string(ProvisioningAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningAction other && Equals(other);
        public bool Equals(ProvisioningAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs.
    /// </summary>
    [EnumType]
    public readonly struct SecurityEncryptionType : IEquatable<SecurityEncryptionType>
    {
        private readonly string _value;

        private SecurityEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Non-persisted TPM encryption type
        /// </summary>
        public static SecurityEncryptionType NonPersistedTPM { get; } = new SecurityEncryptionType("NonPersistedTPM");

        public static bool operator ==(SecurityEncryptionType left, SecurityEncryptionType right) => left.Equals(right);
        public static bool operator !=(SecurityEncryptionType left, SecurityEncryptionType right) => !left.Equals(right);

        public static explicit operator string(SecurityEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityEncryptionType other && Equals(other);
        public bool Equals(SecurityEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network traffic is allowed or denied.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleAccess : IEquatable<SecurityRuleAccess>
    {
        private readonly string _value;

        private SecurityRuleAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Network traffic is allowed
        /// </summary>
        public static SecurityRuleAccess Allow { get; } = new SecurityRuleAccess("Allow");
        /// <summary>
        /// Network traffic is denied
        /// </summary>
        public static SecurityRuleAccess Deny { get; } = new SecurityRuleAccess("Deny");

        public static bool operator ==(SecurityRuleAccess left, SecurityRuleAccess right) => left.Equals(right);
        public static bool operator !=(SecurityRuleAccess left, SecurityRuleAccess right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleAccess other && Equals(other);
        public bool Equals(SecurityRuleAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleDirection : IEquatable<SecurityRuleDirection>
    {
        private readonly string _value;

        private SecurityRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Rule is evaluated on incoming traffic
        /// </summary>
        public static SecurityRuleDirection Inbound { get; } = new SecurityRuleDirection("Inbound");
        /// <summary>
        /// Rule is evaluated on outgoing traffic
        /// </summary>
        public static SecurityRuleDirection Outbound { get; } = new SecurityRuleDirection("Outbound");

        public static bool operator ==(SecurityRuleDirection left, SecurityRuleDirection right) => left.Equals(right);
        public static bool operator !=(SecurityRuleDirection left, SecurityRuleDirection right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleDirection other && Equals(other);
        public bool Equals(SecurityRuleDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network protocol this rule applies to.
    /// </summary>
    [EnumType]
    public readonly struct SecurityRuleProtocol : IEquatable<SecurityRuleProtocol>
    {
        private readonly string _value;

        private SecurityRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Transmission Control Protocol
        /// </summary>
        public static SecurityRuleProtocol Tcp { get; } = new SecurityRuleProtocol("Tcp");
        /// <summary>
        /// User Datagram Protocol
        /// </summary>
        public static SecurityRuleProtocol Udp { get; } = new SecurityRuleProtocol("Udp");
        /// <summary>
        /// Internet Control Message Protocol
        /// </summary>
        public static SecurityRuleProtocol Icmp { get; } = new SecurityRuleProtocol("Icmp");
        /// <summary>
        /// Wildcard rule for all protocols
        /// </summary>
        public static SecurityRuleProtocol Asterisk { get; } = new SecurityRuleProtocol("*");

        public static bool operator ==(SecurityRuleProtocol left, SecurityRuleProtocol right) => left.Equals(right);
        public static bool operator !=(SecurityRuleProtocol left, SecurityRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(SecurityRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityRuleProtocol other && Equals(other);
        public bool Equals(SecurityRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.
    /// </summary>
    [EnumType]
    public readonly struct SecurityTypes : IEquatable<SecurityTypes>
    {
        private readonly string _value;

        private SecurityTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Trusted Launch security type
        /// </summary>
        public static SecurityTypes TrustedLaunch { get; } = new SecurityTypes("TrustedLaunch");
        /// <summary>
        /// Confidential VM security type
        /// </summary>
        public static SecurityTypes ConfidentialVM { get; } = new SecurityTypes("ConfidentialVM");

        public static bool operator ==(SecurityTypes left, SecurityTypes right) => left.Equals(right);
        public static bool operator !=(SecurityTypes left, SecurityTypes right) => !left.Equals(right);

        public static explicit operator string(SecurityTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityTypes other && Equals(other);
        public bool Equals(SecurityTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum of VM Sizes
    /// </summary>
    [EnumType]
    public readonly struct VmSizeEnum : IEquatable<VmSizeEnum>
    {
        private readonly string _value;

        private VmSizeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Default virtual machine size
        /// </summary>
        public static VmSizeEnum Default { get; } = new VmSizeEnum("Default");
        /// <summary>
        /// Standard A2 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_A2_v2 { get; } = new VmSizeEnum("Standard_A2_v2");
        /// <summary>
        /// Standard A4 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_A4_v2 { get; } = new VmSizeEnum("Standard_A4_v2");
        /// <summary>
        /// Standard D2s v3 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_D2s_v3 { get; } = new VmSizeEnum("Standard_D2s_v3");
        /// <summary>
        /// Standard D4s v3 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_D4s_v3 { get; } = new VmSizeEnum("Standard_D4s_v3");
        /// <summary>
        /// Standard D8s v3 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_D8s_v3 { get; } = new VmSizeEnum("Standard_D8s_v3");
        /// <summary>
        /// Standard D16s v3 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_D16s_v3 { get; } = new VmSizeEnum("Standard_D16s_v3");
        /// <summary>
        /// Standard D32s v3 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_D32s_v3 { get; } = new VmSizeEnum("Standard_D32s_v3");
        /// <summary>
        /// Standard DS2 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_DS2_v2 { get; } = new VmSizeEnum("Standard_DS2_v2");
        /// <summary>
        /// Standard DS3 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_DS3_v2 { get; } = new VmSizeEnum("Standard_DS3_v2");
        /// <summary>
        /// Standard DS4 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_DS4_v2 { get; } = new VmSizeEnum("Standard_DS4_v2");
        /// <summary>
        /// Standard DS5 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_DS5_v2 { get; } = new VmSizeEnum("Standard_DS5_v2");
        /// <summary>
        /// Standard DS13 v2 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_DS13_v2 { get; } = new VmSizeEnum("Standard_DS13_v2");
        /// <summary>
        /// Standard K8S v1 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_K8S_v1 { get; } = new VmSizeEnum("Standard_K8S_v1");
        /// <summary>
        /// Standard K8S2 v1 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_K8S2_v1 { get; } = new VmSizeEnum("Standard_K8S2_v1");
        /// <summary>
        /// Standard K8S3 v1 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_K8S3_v1 { get; } = new VmSizeEnum("Standard_K8S3_v1");
        /// <summary>
        /// Standard K8S4 v1 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_K8S4_v1 { get; } = new VmSizeEnum("Standard_K8S4_v1");
        /// <summary>
        /// Standard NK6 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_NK6 { get; } = new VmSizeEnum("Standard_NK6");
        /// <summary>
        /// Standard NK12 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_NK12 { get; } = new VmSizeEnum("Standard_NK12");
        /// <summary>
        /// Standard NV6 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_NV6 { get; } = new VmSizeEnum("Standard_NV6");
        /// <summary>
        /// Standard NV12 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_NV12 { get; } = new VmSizeEnum("Standard_NV12");
        /// <summary>
        /// Standard K8S5 v1 virtual machine size
        /// </summary>
        public static VmSizeEnum Standard_K8S5_v1 { get; } = new VmSizeEnum("Standard_K8S5_v1");
        /// <summary>
        /// Custom virtual machine size
        /// </summary>
        public static VmSizeEnum Custom { get; } = new VmSizeEnum("Custom");

        public static bool operator ==(VmSizeEnum left, VmSizeEnum right) => left.Equals(right);
        public static bool operator !=(VmSizeEnum left, VmSizeEnum right) => !left.Equals(right);

        public static explicit operator string(VmSizeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VmSizeEnum other && Equals(other);
        public bool Equals(VmSizeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
