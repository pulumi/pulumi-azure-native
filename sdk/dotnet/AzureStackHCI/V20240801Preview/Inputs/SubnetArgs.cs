// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20240801Preview.Inputs
{

    /// <summary>
    /// Properties of the subnet.
    /// </summary>
    public sealed class SubnetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
        /// </summary>
        [Input("addressPrefix")]
        public Input<string>? AddressPrefix { get; set; }

        [Input("addressPrefixes")]
        private InputList<string>? _addressPrefixes;

        /// <summary>
        /// List of address prefixes for the subnet.
        /// </summary>
        public InputList<string> AddressPrefixes
        {
            get => _addressPrefixes ?? (_addressPrefixes = new InputList<string>());
            set => _addressPrefixes = value;
        }

        /// <summary>
        /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        /// </summary>
        [Input("ipAllocationMethod")]
        public InputUnion<string, Pulumi.AzureNative.AzureStackHCI.V20240801Preview.IpAllocationMethodEnum>? IpAllocationMethod { get; set; }

        [Input("ipConfigurationReferences")]
        private InputList<Inputs.SubnetIpConfigurationReferenceArgs>? _ipConfigurationReferences;

        /// <summary>
        /// IPConfigurationReferences - list of IPConfigurationReferences
        /// </summary>
        public InputList<Inputs.SubnetIpConfigurationReferenceArgs> IpConfigurationReferences
        {
            get => _ipConfigurationReferences ?? (_ipConfigurationReferences = new InputList<Inputs.SubnetIpConfigurationReferenceArgs>());
            set => _ipConfigurationReferences = value;
        }

        [Input("ipPools")]
        private InputList<Inputs.IPPoolArgs>? _ipPools;

        /// <summary>
        /// network associated pool of IP Addresses
        /// </summary>
        public InputList<Inputs.IPPoolArgs> IpPools
        {
            get => _ipPools ?? (_ipPools = new InputList<Inputs.IPPoolArgs>());
            set => _ipPools = value;
        }

        /// <summary>
        /// Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NetworkSecurityGroup - Network Security Group attached to the logical network.
        /// </summary>
        [Input("networkSecurityGroup")]
        public Input<Inputs.NetworkSecurityGroupArmReferenceArgs>? NetworkSecurityGroup { get; set; }

        /// <summary>
        /// Route table resource.
        /// </summary>
        [Input("routeTable")]
        public Input<Inputs.RouteTableArgs>? RouteTable { get; set; }

        /// <summary>
        /// Vlan to use for the subnet
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        public SubnetArgs()
        {
        }
        public static new SubnetArgs Empty => new SubnetArgs();
    }
}
