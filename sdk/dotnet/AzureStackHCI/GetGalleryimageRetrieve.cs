// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI
{
    public static class GetGalleryimageRetrieve
    {
        /// <summary>
        /// Gets galleryimages by resource name
        /// Azure REST API version: 2021-09-01-preview.
        /// </summary>
        public static Task<GetGalleryimageRetrieveResult> InvokeAsync(GetGalleryimageRetrieveArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGalleryimageRetrieveResult>("azure-native:azurestackhci:getGalleryimageRetrieve", args ?? new GetGalleryimageRetrieveArgs(), options.WithDefaults());

        /// <summary>
        /// Gets galleryimages by resource name
        /// Azure REST API version: 2021-09-01-preview.
        /// </summary>
        public static Output<GetGalleryimageRetrieveResult> Invoke(GetGalleryimageRetrieveInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGalleryimageRetrieveResult>("azure-native:azurestackhci:getGalleryimageRetrieve", args ?? new GetGalleryimageRetrieveInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGalleryimageRetrieveArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the gallery image
        /// </summary>
        [Input("galleryimagesName", required: true)]
        public string GalleryimagesName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGalleryimageRetrieveArgs()
        {
        }
        public static new GetGalleryimageRetrieveArgs Empty => new GetGalleryimageRetrieveArgs();
    }

    public sealed class GetGalleryimageRetrieveInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the gallery image
        /// </summary>
        [Input("galleryimagesName", required: true)]
        public Input<string> GalleryimagesName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetGalleryimageRetrieveInvokeArgs()
        {
        }
        public static new GetGalleryimageRetrieveInvokeArgs Empty => new GetGalleryimageRetrieveInvokeArgs();
    }


    [OutputType]
    public sealed class GetGalleryimageRetrieveResult
    {
        /// <summary>
        /// Datasource for the gallery image when provisioning with cloud-init (Azure or NoCloud)
        /// </summary>
        public readonly string? CloudInitDataSource;
        /// <summary>
        /// Container Name for storage container
        /// </summary>
        public readonly string? ContainerName;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This is the gallery image definition identifier.
        /// </summary>
        public readonly Outputs.GalleryImageIdentifierResponse? Identifier;
        /// <summary>
        /// location of the image the gallery image should be created from
        /// </summary>
        public readonly string? ImagePath;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// operating system type that the gallery image uses. Expected to be linux or windows
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// Provisioning state of the gallery image.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// name of the object to be used in moc
        /// </summary>
        public readonly string? ResourceName;
        /// <summary>
        /// GalleryImageStatus defines the observed state of galleryimages
        /// </summary>
        public readonly Outputs.GalleryImageStatusResponse Status;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies information about the gallery image version that you want to create or update.
        /// </summary>
        public readonly Outputs.GalleryImageVersionResponse? Version;

        [OutputConstructor]
        private GetGalleryimageRetrieveResult(
            string? cloudInitDataSource,

            string? containerName,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string? hyperVGeneration,

            string id,

            Outputs.GalleryImageIdentifierResponse? identifier,

            string? imagePath,

            string location,

            string name,

            string? osType,

            string provisioningState,

            string? resourceName,

            Outputs.GalleryImageStatusResponse status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.GalleryImageVersionResponse? version)
        {
            CloudInitDataSource = cloudInitDataSource;
            ContainerName = containerName;
            ExtendedLocation = extendedLocation;
            HyperVGeneration = hyperVGeneration;
            Id = id;
            Identifier = identifier;
            ImagePath = imagePath;
            Location = location;
            Name = name;
            OsType = osType;
            ProvisioningState = provisioningState;
            ResourceName = resourceName;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
