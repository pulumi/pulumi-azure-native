// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI
{
    public static class GetVirtualHardDisk
    {
        /// <summary>
        /// Gets a virtual hard disk
        /// Azure REST API version: 2022-12-15-preview.
        /// 
        /// Other available API versions: 2023-07-01-preview, 2023-09-01-preview, 2024-01-01, 2024-02-01-preview, 2024-05-01-preview, 2024-07-15-preview, 2024-08-01-preview.
        /// </summary>
        public static Task<GetVirtualHardDiskResult> InvokeAsync(GetVirtualHardDiskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualHardDiskResult>("azure-native:azurestackhci:getVirtualHardDisk", args ?? new GetVirtualHardDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a virtual hard disk
        /// Azure REST API version: 2022-12-15-preview.
        /// 
        /// Other available API versions: 2023-07-01-preview, 2023-09-01-preview, 2024-01-01, 2024-02-01-preview, 2024-05-01-preview, 2024-07-15-preview, 2024-08-01-preview.
        /// </summary>
        public static Output<GetVirtualHardDiskResult> Invoke(GetVirtualHardDiskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHardDiskResult>("azure-native:azurestackhci:getVirtualHardDisk", args ?? new GetVirtualHardDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualHardDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual hard disk
        /// </summary>
        [Input("virtualHardDiskName", required: true)]
        public string VirtualHardDiskName { get; set; } = null!;

        public GetVirtualHardDiskArgs()
        {
        }
        public static new GetVirtualHardDiskArgs Empty => new GetVirtualHardDiskArgs();
    }

    public sealed class GetVirtualHardDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the virtual hard disk
        /// </summary>
        [Input("virtualHardDiskName", required: true)]
        public Input<string> VirtualHardDiskName { get; set; } = null!;

        public GetVirtualHardDiskInvokeArgs()
        {
        }
        public static new GetVirtualHardDiskInvokeArgs Empty => new GetVirtualHardDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualHardDiskResult
    {
        public readonly int? BlockSizeBytes;
        /// <summary>
        /// Storage ContainerID of the storage container to be used for VHD
        /// </summary>
        public readonly string? ContainerId;
        /// <summary>
        /// The format of the actual VHD file [vhd, vhdx]
        /// </summary>
        public readonly string? DiskFileFormat;
        /// <summary>
        /// Size of the disk in GB
        /// </summary>
        public readonly double? DiskSizeGB;
        /// <summary>
        /// Boolean for enabling dynamic sizing on the virtual hard disk
        /// </summary>
        public readonly bool? Dynamic;
        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        public readonly int? LogicalSectorBytes;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly int? PhysicalSectorBytes;
        /// <summary>
        /// Provisioning state of the virtual hard disk.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The observed state of virtual hard disks
        /// </summary>
        public readonly Outputs.VirtualHardDiskStatusResponse Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetVirtualHardDiskResult(
            int? blockSizeBytes,

            string? containerId,

            string? diskFileFormat,

            double? diskSizeGB,

            bool? dynamic,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string? hyperVGeneration,

            string id,

            string location,

            int? logicalSectorBytes,

            string name,

            int? physicalSectorBytes,

            string provisioningState,

            Outputs.VirtualHardDiskStatusResponse status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            BlockSizeBytes = blockSizeBytes;
            ContainerId = containerId;
            DiskFileFormat = diskFileFormat;
            DiskSizeGB = diskSizeGB;
            Dynamic = dynamic;
            ExtendedLocation = extendedLocation;
            HyperVGeneration = hyperVGeneration;
            Id = id;
            Location = location;
            LogicalSectorBytes = logicalSectorBytes;
            Name = name;
            PhysicalSectorBytes = physicalSectorBytes;
            ProvisioningState = provisioningState;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
