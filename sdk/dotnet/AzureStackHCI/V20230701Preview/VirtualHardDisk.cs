// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureStackHCI.V20230701Preview
{
    /// <summary>
    /// The virtual hard disk resource definition.
    /// </summary>
    [AzureNativeResourceType("azure-native:azurestackhci/v20230701preview:VirtualHardDisk")]
    public partial class VirtualHardDisk : global::Pulumi.CustomResource
    {
        [Output("blockSizeBytes")]
        public Output<int?> BlockSizeBytes { get; private set; } = null!;

        /// <summary>
        /// Storage ContainerID of the storage container to be used for VHD
        /// </summary>
        [Output("containerId")]
        public Output<string?> ContainerId { get; private set; } = null!;

        /// <summary>
        /// The format of the actual VHD file [vhd, vhdx]
        /// </summary>
        [Output("diskFileFormat")]
        public Output<string?> DiskFileFormat { get; private set; } = null!;

        /// <summary>
        /// Size of the disk in GB
        /// </summary>
        [Output("diskSizeGB")]
        public Output<double?> DiskSizeGB { get; private set; } = null!;

        /// <summary>
        /// Boolean for enabling dynamic sizing on the virtual hard disk
        /// </summary>
        [Output("dynamic")]
        public Output<bool?> Dynamic { get; private set; } = null!;

        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse?> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        [Output("hyperVGeneration")]
        public Output<string?> HyperVGeneration { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        [Output("logicalSectorBytes")]
        public Output<int?> LogicalSectorBytes { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("physicalSectorBytes")]
        public Output<int?> PhysicalSectorBytes { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the virtual hard disk.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The observed state of virtual hard disks
        /// </summary>
        [Output("status")]
        public Output<Outputs.VirtualHardDiskStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualHardDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualHardDisk(string name, VirtualHardDiskArgs args, CustomResourceOptions? options = null)
            : base("azure-native:azurestackhci/v20230701preview:VirtualHardDisk", name, args ?? new VirtualHardDiskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualHardDisk(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:azurestackhci/v20230701preview:VirtualHardDisk", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20210701preview:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20210901preview:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20221215preview:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20230901preview:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20240101:VirtualHardDisk" },
                    new global::Pulumi.Alias { Type = "azure-native:azurestackhci/v20240201preview:VirtualHardDisk" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualHardDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualHardDisk Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualHardDisk(name, id, options);
        }
    }

    public sealed class VirtualHardDiskArgs : global::Pulumi.ResourceArgs
    {
        [Input("blockSizeBytes")]
        public Input<int>? BlockSizeBytes { get; set; }

        /// <summary>
        /// Storage ContainerID of the storage container to be used for VHD
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// The format of the actual VHD file [vhd, vhdx]
        /// </summary>
        [Input("diskFileFormat")]
        public InputUnion<string, Pulumi.AzureNative.AzureStackHCI.V20230701Preview.DiskFileFormat>? DiskFileFormat { get; set; }

        /// <summary>
        /// Size of the disk in GB
        /// </summary>
        [Input("diskSizeGB")]
        public Input<double>? DiskSizeGB { get; set; }

        /// <summary>
        /// Boolean for enabling dynamic sizing on the virtual hard disk
        /// </summary>
        [Input("dynamic")]
        public Input<bool>? Dynamic { get; set; }

        /// <summary>
        /// The extendedLocation of the resource.
        /// </summary>
        [Input("extendedLocation")]
        public Input<Inputs.ExtendedLocationArgs>? ExtendedLocation { get; set; }

        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        [Input("hyperVGeneration")]
        public InputUnion<string, Pulumi.AzureNative.AzureStackHCI.V20230701Preview.HyperVGeneration>? HyperVGeneration { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("logicalSectorBytes")]
        public Input<int>? LogicalSectorBytes { get; set; }

        [Input("physicalSectorBytes")]
        public Input<int>? PhysicalSectorBytes { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the virtual hard disk
        /// </summary>
        [Input("virtualHardDiskName")]
        public Input<string>? VirtualHardDiskName { get; set; }

        public VirtualHardDiskArgs()
        {
        }
        public static new VirtualHardDiskArgs Empty => new VirtualHardDiskArgs();
    }
}
