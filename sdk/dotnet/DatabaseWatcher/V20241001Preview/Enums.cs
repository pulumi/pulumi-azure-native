// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DatabaseWatcher.V20241001Preview
{
    /// <summary>
    /// The properties with which the alert rule resource was created.
    /// </summary>
    [EnumType]
    public readonly struct AlertRuleCreationProperties : IEquatable<AlertRuleCreationProperties>
    {
        private readonly string _value;

        private AlertRuleCreationProperties(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The alert rule was created with an action group.
        /// </summary>
        public static AlertRuleCreationProperties CreatedWithActionGroup { get; } = new AlertRuleCreationProperties("CreatedWithActionGroup");
        /// <summary>
        /// The alert rule was created with no properties.
        /// </summary>
        public static AlertRuleCreationProperties None { get; } = new AlertRuleCreationProperties("None");

        public static bool operator ==(AlertRuleCreationProperties left, AlertRuleCreationProperties right) => left.Equals(right);
        public static bool operator !=(AlertRuleCreationProperties left, AlertRuleCreationProperties right) => !left.Equals(right);

        public static explicit operator string(AlertRuleCreationProperties value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertRuleCreationProperties other && Equals(other);
        public bool Equals(AlertRuleCreationProperties other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of a Kusto offering.
    /// </summary>
    [EnumType]
    public readonly struct KustoOfferingType : IEquatable<KustoOfferingType>
    {
        private readonly string _value;

        private KustoOfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Azure Data Explorer cluster Kusto offering.
        /// </summary>
        public static KustoOfferingType Adx { get; } = new KustoOfferingType("adx");
        /// <summary>
        /// The free Azure Data Explorer cluster Kusto offering.
        /// </summary>
        public static KustoOfferingType Free { get; } = new KustoOfferingType("free");
        /// <summary>
        /// The Fabric Real-Time Analytics Kusto offering.
        /// </summary>
        public static KustoOfferingType Fabric { get; } = new KustoOfferingType("fabric");

        public static bool operator ==(KustoOfferingType left, KustoOfferingType right) => left.Equals(right);
        public static bool operator !=(KustoOfferingType left, KustoOfferingType right) => !left.Equals(right);

        public static explicit operator string(KustoOfferingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KustoOfferingType other && Equals(other);
        public bool Equals(KustoOfferingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of authentication to use when connecting to a target.
    /// </summary>
    [EnumType]
    public readonly struct TargetAuthenticationType : IEquatable<TargetAuthenticationType>
    {
        private readonly string _value;

        private TargetAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Azure Active Directory authentication.
        /// </summary>
        public static TargetAuthenticationType Aad { get; } = new TargetAuthenticationType("Aad");
        /// <summary>
        /// The SQL password authentication.
        /// </summary>
        public static TargetAuthenticationType Sql { get; } = new TargetAuthenticationType("Sql");

        public static bool operator ==(TargetAuthenticationType left, TargetAuthenticationType right) => left.Equals(right);
        public static bool operator !=(TargetAuthenticationType left, TargetAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(TargetAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TargetAuthenticationType other && Equals(other);
        public bool Equals(TargetAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
