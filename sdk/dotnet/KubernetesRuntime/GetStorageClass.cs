// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesRuntime
{
    public static class GetStorageClass
    {
        /// <summary>
        /// Get a StorageClassResource
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Task<GetStorageClassResult> InvokeAsync(GetStorageClassArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageClassResult>("azure-native:kubernetesruntime:getStorageClass", args ?? new GetStorageClassArgs(), options.WithDefaults());

        /// <summary>
        /// Get a StorageClassResource
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Output<GetStorageClassResult> Invoke(GetStorageClassInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageClassResult>("azure-native:kubernetesruntime:getStorageClass", args ?? new GetStorageClassInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageClassArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        /// <summary>
        /// The name of the the storage class
        /// </summary>
        [Input("storageClassName", required: true)]
        public string StorageClassName { get; set; } = null!;

        public GetStorageClassArgs()
        {
        }
        public static new GetStorageClassArgs Empty => new GetStorageClassArgs();
    }

    public sealed class GetStorageClassInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        /// <summary>
        /// The name of the the storage class
        /// </summary>
        [Input("storageClassName", required: true)]
        public Input<string> StorageClassName { get; set; } = null!;

        public GetStorageClassInvokeArgs()
        {
        }
        public static new GetStorageClassInvokeArgs Empty => new GetStorageClassInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageClassResult
    {
        /// <summary>
        /// The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
        /// </summary>
        public readonly ImmutableArray<string> AccessModes;
        /// <summary>
        /// Volume can be expanded or not
        /// </summary>
        public readonly string? AllowVolumeExpansion;
        /// <summary>
        /// Allow single data node failure
        /// </summary>
        public readonly string? DataResilience;
        /// <summary>
        /// Failover speed: NA, Slow, Fast
        /// </summary>
        public readonly string? FailoverSpeed;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Limitations of the storage class
        /// </summary>
        public readonly ImmutableArray<string> Limitations;
        /// <summary>
        /// Additional mount options
        /// </summary>
        public readonly ImmutableArray<string> MountOptions;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Performance tier
        /// </summary>
        public readonly string? Performance;
        /// <summary>
        /// Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
        /// </summary>
        public readonly double? Priority;
        /// <summary>
        /// Provisioner name
        /// </summary>
        public readonly string? Provisioner;
        /// <summary>
        /// Resource provision state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Properties of the StorageClass
        /// </summary>
        public readonly object TypeProperties;
        /// <summary>
        /// Binding mode of volumes: Immediate, WaitForFirstConsumer
        /// </summary>
        public readonly string? VolumeBindingMode;

        [OutputConstructor]
        private GetStorageClassResult(
            ImmutableArray<string> accessModes,

            string? allowVolumeExpansion,

            string? dataResilience,

            string? failoverSpeed,

            string id,

            ImmutableArray<string> limitations,

            ImmutableArray<string> mountOptions,

            string name,

            string? performance,

            double? priority,

            string? provisioner,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type,

            object typeProperties,

            string? volumeBindingMode)
        {
            AccessModes = accessModes;
            AllowVolumeExpansion = allowVolumeExpansion;
            DataResilience = dataResilience;
            FailoverSpeed = failoverSpeed;
            Id = id;
            Limitations = limitations;
            MountOptions = mountOptions;
            Name = name;
            Performance = performance;
            Priority = priority;
            Provisioner = provisioner;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
            TypeProperties = typeProperties;
            VolumeBindingMode = volumeBindingMode;
        }
    }
}
