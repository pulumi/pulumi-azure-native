// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.KubernetesRuntime.V20240301
{
    public static class GetBgpPeer
    {
        /// <summary>
        /// Get a BgpPeer
        /// </summary>
        public static Task<GetBgpPeerResult> InvokeAsync(GetBgpPeerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBgpPeerResult>("azure-native:kubernetesruntime/v20240301:getBgpPeer", args ?? new GetBgpPeerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a BgpPeer
        /// </summary>
        public static Output<GetBgpPeerResult> Invoke(GetBgpPeerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBgpPeerResult>("azure-native:kubernetesruntime/v20240301:getBgpPeer", args ?? new GetBgpPeerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBgpPeerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the BgpPeer
        /// </summary>
        [Input("bgpPeerName", required: true)]
        public string BgpPeerName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetBgpPeerArgs()
        {
        }
        public static new GetBgpPeerArgs Empty => new GetBgpPeerArgs();
    }

    public sealed class GetBgpPeerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the BgpPeer
        /// </summary>
        [Input("bgpPeerName", required: true)]
        public Input<string> BgpPeerName { get; set; } = null!;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public GetBgpPeerInvokeArgs()
        {
        }
        public static new GetBgpPeerInvokeArgs Empty => new GetBgpPeerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBgpPeerResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// My ASN
        /// </summary>
        public readonly int MyAsn;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Peer Address
        /// </summary>
        public readonly string PeerAddress;
        /// <summary>
        /// Peer ASN
        /// </summary>
        public readonly int PeerAsn;
        /// <summary>
        /// Resource provision state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBgpPeerResult(
            string id,

            int myAsn,

            string name,

            string peerAddress,

            int peerAsn,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Id = id;
            MyAsn = myAsn;
            Name = name;
            PeerAddress = peerAddress;
            PeerAsn = peerAsn;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
