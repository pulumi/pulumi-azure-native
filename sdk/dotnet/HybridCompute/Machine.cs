// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute
{
    /// <summary>
    /// Describes a hybrid machine.
    /// Azure REST API version: 2022-12-27. Prior API version in Azure Native 1.x: 2020-08-02
    /// </summary>
    [AzureNativeResourceType("azure-native:hybridcompute:Machine")]
    public partial class Machine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the AD fully qualified display name.
        /// </summary>
        [Output("adFqdn")]
        public Output<string> AdFqdn { get; private set; } = null!;

        /// <summary>
        /// Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
        /// </summary>
        [Output("agentConfiguration")]
        public Output<Outputs.AgentConfigurationResponse> AgentConfiguration { get; private set; } = null!;

        /// <summary>
        /// The info of the machine w.r.t Agent Upgrade
        /// </summary>
        [Output("agentUpgrade")]
        public Output<Outputs.AgentUpgradeResponse?> AgentUpgrade { get; private set; } = null!;

        /// <summary>
        /// The hybrid machine agent full version.
        /// </summary>
        [Output("agentVersion")]
        public Output<string> AgentVersion { get; private set; } = null!;

        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        [Output("clientPublicKey")]
        public Output<string?> ClientPublicKey { get; private set; } = null!;

        /// <summary>
        /// The metadata of the cloud environment (Azure/GCP/AWS/OCI...).
        /// </summary>
        [Output("cloudMetadata")]
        public Output<Outputs.CloudMetadataResponse?> CloudMetadata { get; private set; } = null!;

        /// <summary>
        /// Detected properties from the machine.
        /// </summary>
        [Output("detectedProperties")]
        public Output<ImmutableDictionary<string, string>> DetectedProperties { get; private set; } = null!;

        /// <summary>
        /// Specifies the hybrid machine display name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Specifies the DNS fully qualified display name.
        /// </summary>
        [Output("dnsFqdn")]
        public Output<string> DnsFqdn { get; private set; } = null!;

        /// <summary>
        /// Specifies the Windows domain name.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Details about the error state.
        /// </summary>
        [Output("errorDetails")]
        public Output<ImmutableArray<Outputs.ErrorDetailResponse>> ErrorDetails { get; private set; } = null!;

        /// <summary>
        /// Machine Extensions information (deprecated field)
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.MachineExtensionInstanceViewResponse>> Extensions { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The time of the last status change.
        /// </summary>
        [Output("lastStatusChange")]
        public Output<string> LastStatusChange { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to the geographic location of the resource.
        /// </summary>
        [Output("locationData")]
        public Output<Outputs.LocationDataResponse?> LocationData { get; private set; } = null!;

        /// <summary>
        /// Specifies the hybrid machine FQDN.
        /// </summary>
        [Output("machineFqdn")]
        public Output<string> MachineFqdn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether any MS SQL instance is discovered on the machine.
        /// </summary>
        [Output("mssqlDiscovered")]
        public Output<string?> MssqlDiscovered { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Operating System running on the hybrid machine.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// Specifies the operating system settings for the hybrid machine.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.OSProfileResponse?> OsProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the Operating System product SKU.
        /// </summary>
        [Output("osSku")]
        public Output<string> OsSku { get; private set; } = null!;

        /// <summary>
        /// The type of Operating System (windows/linux).
        /// </summary>
        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        /// <summary>
        /// The version of Operating System running on the hybrid machine.
        /// </summary>
        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        [Output("parentClusterResourceId")]
        public Output<string?> ParentClusterResourceId { get; private set; } = null!;

        /// <summary>
        /// The resource id of the private link scope this machine is assigned to, if any.
        /// </summary>
        [Output("privateLinkScopeResourceId")]
        public Output<string?> PrivateLinkScopeResourceId { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The list of extensions affiliated to the machine
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.MachineExtensionResponse>> Resources { get; private set; } = null!;

        /// <summary>
        /// Statuses of dependent services that are reported back to ARM.
        /// </summary>
        [Output("serviceStatuses")]
        public Output<Outputs.ServiceStatusesResponse?> ServiceStatuses { get; private set; } = null!;

        /// <summary>
        /// The status of the hybrid machine agent.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the hybrid machine unique ID.
        /// </summary>
        [Output("vmId")]
        public Output<string?> VmId { get; private set; } = null!;

        /// <summary>
        /// Specifies the Arc Machine's unique SMBIOS ID
        /// </summary>
        [Output("vmUuid")]
        public Output<string> VmUuid { get; private set; } = null!;


        /// <summary>
        /// Create a Machine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Machine(string name, MachineArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute:Machine", name, args ?? new MachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Machine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute:Machine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20190318preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20190802preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20191212:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20200730preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20200802:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20200815preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210128preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210325preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210422preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210517preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210520:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20210610preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20211210preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20220310:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20220510preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20220811preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20221110:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20221227:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20221227preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20230315preview:Machine"},
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20230425preview:Machine"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Machine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Machine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Machine(name, id, options);
        }
    }

    public sealed class MachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The info of the machine w.r.t Agent Upgrade
        /// </summary>
        [Input("agentUpgrade")]
        public Input<Inputs.AgentUpgradeArgs>? AgentUpgrade { get; set; }

        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        [Input("clientPublicKey")]
        public Input<string>? ClientPublicKey { get; set; }

        [Input("extensions")]
        private InputList<Inputs.MachineExtensionInstanceViewArgs>? _extensions;

        /// <summary>
        /// Machine Extensions information (deprecated field)
        /// </summary>
        public InputList<Inputs.MachineExtensionInstanceViewArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.MachineExtensionInstanceViewArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Metadata pertaining to the geographic location of the resource.
        /// </summary>
        [Input("locationData")]
        public Input<Inputs.LocationDataArgs>? LocationData { get; set; }

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("machineName")]
        public Input<string>? MachineName { get; set; }

        /// <summary>
        /// Specifies whether any MS SQL instance is discovered on the machine.
        /// </summary>
        [Input("mssqlDiscovered")]
        public Input<string>? MssqlDiscovered { get; set; }

        /// <summary>
        /// Specifies the operating system settings for the hybrid machine.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.OSProfileArgs>? OsProfile { get; set; }

        /// <summary>
        /// The type of Operating System (windows/linux).
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        [Input("parentClusterResourceId")]
        public Input<string>? ParentClusterResourceId { get; set; }

        /// <summary>
        /// The resource id of the private link scope this machine is assigned to, if any.
        /// </summary>
        [Input("privateLinkScopeResourceId")]
        public Input<string>? PrivateLinkScopeResourceId { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Statuses of dependent services that are reported back to ARM.
        /// </summary>
        [Input("serviceStatuses")]
        public Input<Inputs.ServiceStatusesArgs>? ServiceStatuses { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the hybrid machine unique ID.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public MachineArgs()
        {
        }
        public static new MachineArgs Empty => new MachineArgs();
    }
}
