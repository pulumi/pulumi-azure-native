// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute.V20240731Preview
{
    /// <summary>
    /// Describes a license profile in a hybrid machine.
    /// </summary>
    [AzureNativeResourceType("azure-native:hybridcompute/v20240731preview:LicenseProfile")]
    public partial class LicenseProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource id of the license.
        /// </summary>
        [Output("assignedLicense")]
        public Output<string?> AssignedLicense { get; private set; } = null!;

        /// <summary>
        /// The guid id of the license.
        /// </summary>
        [Output("assignedLicenseImmutableId")]
        public Output<string> AssignedLicenseImmutableId { get; private set; } = null!;

        /// <summary>
        /// The timestamp in UTC when the billing ends.
        /// </summary>
        [Output("billingEndDate")]
        public Output<string> BillingEndDate { get; private set; } = null!;

        /// <summary>
        /// The timestamp in UTC when the billing starts.
        /// </summary>
        [Output("billingStartDate")]
        public Output<string> BillingStartDate { get; private set; } = null!;

        /// <summary>
        /// The timestamp in UTC when the user disenrolled the feature.
        /// </summary>
        [Output("disenrollmentDate")]
        public Output<string> DisenrollmentDate { get; private set; } = null!;

        /// <summary>
        /// The timestamp in UTC when the user enrolls the feature.
        /// </summary>
        [Output("enrollmentDate")]
        public Output<string> EnrollmentDate { get; private set; } = null!;

        /// <summary>
        /// The errors that were encountered during the feature enrollment or disenrollment.
        /// </summary>
        [Output("error")]
        public Output<Outputs.ErrorDetailResponse> Error { get; private set; } = null!;

        /// <summary>
        /// Indicates the eligibility state of Esu.
        /// </summary>
        [Output("esuEligibility")]
        public Output<string> EsuEligibility { get; private set; } = null!;

        /// <summary>
        /// Indicates whether there is an ESU Key currently active for the machine.
        /// </summary>
        [Output("esuKeyState")]
        public Output<string> EsuKeyState { get; private set; } = null!;

        /// <summary>
        /// The list of ESU keys.
        /// </summary>
        [Output("esuKeys")]
        public Output<ImmutableArray<Outputs.EsuKeyResponse>> EsuKeys { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of product features.
        /// </summary>
        [Output("productFeatures")]
        public Output<ImmutableArray<Outputs.ProductFeatureResponse>> ProductFeatures { get; private set; } = null!;

        /// <summary>
        /// Indicates the product type of the license.
        /// </summary>
        [Output("productType")]
        public Output<string?> ProductType { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The type of the Esu servers.
        /// </summary>
        [Output("serverType")]
        public Output<string> ServerType { get; private set; } = null!;

        /// <summary>
        /// Specifies if this machine is licensed as part of a Software Assurance agreement.
        /// </summary>
        [Output("softwareAssuranceCustomer")]
        public Output<bool?> SoftwareAssuranceCustomer { get; private set; } = null!;

        /// <summary>
        /// Indicates the subscription status of the product.
        /// </summary>
        [Output("subscriptionStatus")]
        public Output<string?> SubscriptionStatus { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseProfile(string name, LicenseProfileArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute/v20240731preview:LicenseProfile", name, args ?? new LicenseProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseProfile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute/v20240731preview:LicenseProfile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute:LicenseProfile" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20230620preview:LicenseProfile" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20231003preview:LicenseProfile" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20240331preview:LicenseProfile" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20240520preview:LicenseProfile" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20240710:LicenseProfile" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseProfile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new LicenseProfile(name, id, options);
        }
    }

    public sealed class LicenseProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource id of the license.
        /// </summary>
        [Input("assignedLicense")]
        public Input<string>? AssignedLicense { get; set; }

        /// <summary>
        /// The name of the license profile.
        /// </summary>
        [Input("licenseProfileName")]
        public Input<string>? LicenseProfileName { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("machineName", required: true)]
        public Input<string> MachineName { get; set; } = null!;

        [Input("productFeatures")]
        private InputList<Inputs.ProductFeatureArgs>? _productFeatures;

        /// <summary>
        /// The list of product features.
        /// </summary>
        public InputList<Inputs.ProductFeatureArgs> ProductFeatures
        {
            get => _productFeatures ?? (_productFeatures = new InputList<Inputs.ProductFeatureArgs>());
            set => _productFeatures = value;
        }

        /// <summary>
        /// Indicates the product type of the license.
        /// </summary>
        [Input("productType")]
        public InputUnion<string, Pulumi.AzureNative.HybridCompute.V20240731Preview.LicenseProfileProductType>? ProductType { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies if this machine is licensed as part of a Software Assurance agreement.
        /// </summary>
        [Input("softwareAssuranceCustomer")]
        public Input<bool>? SoftwareAssuranceCustomer { get; set; }

        /// <summary>
        /// Indicates the subscription status of the product.
        /// </summary>
        [Input("subscriptionStatus")]
        public InputUnion<string, Pulumi.AzureNative.HybridCompute.V20240731Preview.LicenseProfileSubscriptionStatus>? SubscriptionStatus { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LicenseProfileArgs()
        {
        }
        public static new LicenseProfileArgs Empty => new LicenseProfileArgs();
    }
}
