// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute.V20240520Preview
{
    /// <summary>
    /// Describes a Run Command
    /// </summary>
    [AzureNativeResourceType("azure-native:hybridcompute/v20240520preview:MachineRunCommand")]
    public partial class MachineRunCommand : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. If set to true, provisioning will complete as soon as script starts and will not wait for script to complete.
        /// </summary>
        [Output("asyncExecution")]
        public Output<bool?> AsyncExecution { get; private set; } = null!;

        /// <summary>
        /// User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        [Output("errorBlobManagedIdentity")]
        public Output<Outputs.RunCommandManagedIdentityResponse?> ErrorBlobManagedIdentity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
        /// </summary>
        [Output("errorBlobUri")]
        public Output<string?> ErrorBlobUri { get; private set; } = null!;

        /// <summary>
        /// The machine run command instance view.
        /// </summary>
        [Output("instanceView")]
        public Output<Outputs.MachineRunCommandInstanceViewResponse> InstanceView { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        [Output("outputBlobManagedIdentity")]
        public Output<Outputs.RunCommandManagedIdentityResponse?> OutputBlobManagedIdentity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter. 
        /// </summary>
        [Output("outputBlobUri")]
        public Output<string?> OutputBlobUri { get; private set; } = null!;

        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.RunCommandInputParameterResponse>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        [Output("protectedParameters")]
        public Output<ImmutableArray<Outputs.RunCommandInputParameterResponse>> ProtectedParameters { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Specifies the user account password on the machine when executing the run command.
        /// </summary>
        [Output("runAsPassword")]
        public Output<string?> RunAsPassword { get; private set; } = null!;

        /// <summary>
        /// Specifies the user account on the machine when executing the run command.
        /// </summary>
        [Output("runAsUser")]
        public Output<string?> RunAsUser { get; private set; } = null!;

        /// <summary>
        /// The source of the run command script.
        /// </summary>
        [Output("source")]
        public Output<Outputs.MachineRunCommandScriptSourceResponse?> Source { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The timeout in seconds to execute the run command.
        /// </summary>
        [Output("timeoutInSeconds")]
        public Output<int?> TimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MachineRunCommand resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MachineRunCommand(string name, MachineRunCommandArgs args, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute/v20240520preview:MachineRunCommand", name, args ?? new MachineRunCommandArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MachineRunCommand(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:hybridcompute/v20240520preview:MachineRunCommand", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute:MachineRunCommand" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20231003preview:MachineRunCommand" },
                    new global::Pulumi.Alias { Type = "azure-native:hybridcompute/v20240331preview:MachineRunCommand" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MachineRunCommand resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MachineRunCommand Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MachineRunCommand(name, id, options);
        }
    }

    public sealed class MachineRunCommandArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. If set to true, provisioning will complete as soon as script starts and will not wait for script to complete.
        /// </summary>
        [Input("asyncExecution")]
        public Input<bool>? AsyncExecution { get; set; }

        /// <summary>
        /// User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        [Input("errorBlobManagedIdentity")]
        public Input<Inputs.RunCommandManagedIdentityArgs>? ErrorBlobManagedIdentity { get; set; }

        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
        /// </summary>
        [Input("errorBlobUri")]
        public Input<string>? ErrorBlobUri { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("machineName", required: true)]
        public Input<string> MachineName { get; set; } = null!;

        /// <summary>
        /// User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        [Input("outputBlobManagedIdentity")]
        public Input<Inputs.RunCommandManagedIdentityArgs>? OutputBlobManagedIdentity { get; set; }

        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter. 
        /// </summary>
        [Input("outputBlobUri")]
        public Input<string>? OutputBlobUri { get; set; }

        [Input("parameters")]
        private InputList<Inputs.RunCommandInputParameterArgs>? _parameters;

        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandInputParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.RunCommandInputParameterArgs>());
            set => _parameters = value;
        }

        [Input("protectedParameters")]
        private InputList<Inputs.RunCommandInputParameterArgs>? _protectedParameters;

        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        public InputList<Inputs.RunCommandInputParameterArgs> ProtectedParameters
        {
            get => _protectedParameters ?? (_protectedParameters = new InputList<Inputs.RunCommandInputParameterArgs>());
            set => _protectedParameters = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the user account password on the machine when executing the run command.
        /// </summary>
        [Input("runAsPassword")]
        public Input<string>? RunAsPassword { get; set; }

        /// <summary>
        /// Specifies the user account on the machine when executing the run command.
        /// </summary>
        [Input("runAsUser")]
        public Input<string>? RunAsUser { get; set; }

        /// <summary>
        /// The name of the run command.
        /// </summary>
        [Input("runCommandName")]
        public Input<string>? RunCommandName { get; set; }

        /// <summary>
        /// The source of the run command script.
        /// </summary>
        [Input("source")]
        public Input<Inputs.MachineRunCommandScriptSourceArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout in seconds to execute the run command.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        public MachineRunCommandArgs()
        {
            AsyncExecution = false;
        }
        public static new MachineRunCommandArgs Empty => new MachineRunCommandArgs();
    }
}
