// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute.V20190318Preview
{
    [Obsolete(@"Version 2019-03-18-preview will be removed in v2 of the provider.")]
    public static class GetMachine
    {
        /// <summary>
        /// Retrieves information about the model view or the instance view of a hybrid machine.
        /// </summary>
        public static Task<GetMachineResult> InvokeAsync(GetMachineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMachineResult>("azure-native:hybridcompute/v20190318preview:getMachine", args ?? new GetMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about the model view or the instance view of a hybrid machine.
        /// </summary>
        public static Output<GetMachineResult> Invoke(GetMachineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMachineResult>("azure-native:hybridcompute/v20190318preview:getMachine", args ?? new GetMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMachineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMachineArgs()
        {
        }
        public static new GetMachineArgs Empty => new GetMachineArgs();
    }

    public sealed class GetMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMachineInvokeArgs()
        {
        }
        public static new GetMachineInvokeArgs Empty => new GetMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetMachineResult
    {
        /// <summary>
        /// The hybrid machine agent full version.
        /// </summary>
        public readonly string AgentVersion;
        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        public readonly string? ClientPublicKey;
        /// <summary>
        /// Specifies the hybrid machine display name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Details about the error state.
        /// </summary>
        public readonly ImmutableArray<Outputs.ErrorDetailResponse> ErrorDetails;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The time of the last status change.
        /// </summary>
        public readonly string LastStatusChange;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Specifies the hybrid machine FQDN.
        /// </summary>
        public readonly string MachineFqdn;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Operating System running on the hybrid machine.
        /// </summary>
        public readonly string OsName;
        /// <summary>
        /// Specifies the operating system settings for the hybrid machine.
        /// </summary>
        public readonly Outputs.OSProfileResponse OsProfile;
        /// <summary>
        /// The version of Operating System running on the hybrid machine.
        /// </summary>
        public readonly string OsVersion;
        /// <summary>
        /// Resource's Physical Location
        /// </summary>
        public readonly string? PhysicalLocation;
        /// <summary>
        /// The identity's principal id.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The status of the hybrid machine agent.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The identity's tenant id.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies the hybrid machine unique ID.
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private GetMachineResult(
            string agentVersion,

            string? clientPublicKey,

            string displayName,

            ImmutableArray<Outputs.ErrorDetailResponse> errorDetails,

            string id,

            string lastStatusChange,

            string location,

            string machineFqdn,

            string name,

            string osName,

            Outputs.OSProfileResponse osProfile,

            string osVersion,

            string? physicalLocation,

            string principalId,

            string provisioningState,

            string status,

            ImmutableDictionary<string, string>? tags,

            string tenantId,

            string type,

            string vmId)
        {
            AgentVersion = agentVersion;
            ClientPublicKey = clientPublicKey;
            DisplayName = displayName;
            ErrorDetails = errorDetails;
            Id = id;
            LastStatusChange = lastStatusChange;
            Location = location;
            MachineFqdn = machineFqdn;
            Name = name;
            OsName = osName;
            OsProfile = osProfile;
            OsVersion = osVersion;
            PhysicalLocation = physicalLocation;
            PrincipalId = principalId;
            ProvisioningState = provisioningState;
            Status = status;
            Tags = tags;
            TenantId = tenantId;
            Type = type;
            VmId = vmId;
        }
    }
}
