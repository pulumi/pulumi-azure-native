// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute
{
    public static class GetLicenseProfile
    {
        /// <summary>
        /// Retrieves information about the view of a license profile.
        /// Azure REST API version: 2023-06-20-preview.
        /// 
        /// Other available API versions: 2023-10-03-preview, 2024-03-31-preview, 2024-05-20-preview, 2024-07-10, 2024-07-31-preview.
        /// </summary>
        public static Task<GetLicenseProfileResult> InvokeAsync(GetLicenseProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicenseProfileResult>("azure-native:hybridcompute:getLicenseProfile", args ?? new GetLicenseProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about the view of a license profile.
        /// Azure REST API version: 2023-06-20-preview.
        /// 
        /// Other available API versions: 2023-10-03-preview, 2024-03-31-preview, 2024-05-20-preview, 2024-07-10, 2024-07-31-preview.
        /// </summary>
        public static Output<GetLicenseProfileResult> Invoke(GetLicenseProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicenseProfileResult>("azure-native:hybridcompute:getLicenseProfile", args ?? new GetLicenseProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicenseProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the license profile.
        /// </summary>
        [Input("licenseProfileName", required: true)]
        public string LicenseProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("machineName", required: true)]
        public string MachineName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLicenseProfileArgs()
        {
        }
        public static new GetLicenseProfileArgs Empty => new GetLicenseProfileArgs();
    }

    public sealed class GetLicenseProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the license profile.
        /// </summary>
        [Input("licenseProfileName", required: true)]
        public Input<string> LicenseProfileName { get; set; } = null!;

        /// <summary>
        /// The name of the hybrid machine.
        /// </summary>
        [Input("machineName", required: true)]
        public Input<string> MachineName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLicenseProfileInvokeArgs()
        {
        }
        public static new GetLicenseProfileInvokeArgs Empty => new GetLicenseProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicenseProfileResult
    {
        /// <summary>
        /// The resource id of the license.
        /// </summary>
        public readonly string? AssignedLicense;
        /// <summary>
        /// The guid id of the license.
        /// </summary>
        public readonly string AssignedLicenseImmutableId;
        /// <summary>
        /// Indicates the eligibility state of Esu.
        /// </summary>
        public readonly string EsuEligibility;
        /// <summary>
        /// Indicates whether there is an ESU Key currently active for the machine.
        /// </summary>
        public readonly string EsuKeyState;
        /// <summary>
        /// The list of ESU keys.
        /// </summary>
        public readonly ImmutableArray<Outputs.EsuKeyResponse> EsuKeys;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The type of the Esu servers.
        /// </summary>
        public readonly string ServerType;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLicenseProfileResult(
            string? assignedLicense,

            string assignedLicenseImmutableId,

            string esuEligibility,

            string esuKeyState,

            ImmutableArray<Outputs.EsuKeyResponse> esuKeys,

            string id,

            string location,

            string name,

            string provisioningState,

            string serverType,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AssignedLicense = assignedLicense;
            AssignedLicenseImmutableId = assignedLicenseImmutableId;
            EsuEligibility = esuEligibility;
            EsuKeyState = esuKeyState;
            EsuKeys = esuKeys;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ServerType = serverType;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
