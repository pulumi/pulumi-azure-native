// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HybridCompute.V20240331Preview.Inputs
{

    /// <summary>
    /// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
    /// </summary>
    public sealed class MachineRunCommandScriptSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the commandId of predefined built-in script.
        /// </summary>
        [Input("commandId")]
        public Input<string>? CommandId { get; set; }

        /// <summary>
        /// Specifies the script content to be executed on the machine.
        /// </summary>
        [Input("script")]
        public Input<string>? Script { get; set; }

        /// <summary>
        /// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
        /// </summary>
        [Input("scriptUri")]
        public Input<string>? ScriptUri { get; set; }

        /// <summary>
        /// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
        /// </summary>
        [Input("scriptUriManagedIdentity")]
        public Input<Inputs.RunCommandManagedIdentityArgs>? ScriptUriManagedIdentity { get; set; }

        public MachineRunCommandScriptSourceArgs()
        {
        }
        public static new MachineRunCommandScriptSourceArgs Empty => new MachineRunCommandScriptSourceArgs();
    }
}
