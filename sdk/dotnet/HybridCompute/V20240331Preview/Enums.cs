// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.HybridCompute.V20240331Preview
{
    /// <summary>
    /// Indicates which kind of Arc machine placement on-premises, such as HCI, SCVMM or VMware etc.
    /// </summary>
    [EnumType]
    public readonly struct ArcKindEnum : IEquatable<ArcKindEnum>
    {
        private readonly string _value;

        private ArcKindEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ArcKindEnum AVS { get; } = new ArcKindEnum("AVS");
        public static ArcKindEnum HCI { get; } = new ArcKindEnum("HCI");
        public static ArcKindEnum SCVMM { get; } = new ArcKindEnum("SCVMM");
        public static ArcKindEnum VMware { get; } = new ArcKindEnum("VMware");
        public static ArcKindEnum EPS { get; } = new ArcKindEnum("EPS");
        public static ArcKindEnum GCP { get; } = new ArcKindEnum("GCP");
        public static ArcKindEnum AWS { get; } = new ArcKindEnum("AWS");

        public static bool operator ==(ArcKindEnum left, ArcKindEnum right) => left.Equals(right);
        public static bool operator !=(ArcKindEnum left, ArcKindEnum right) => !left.Equals(right);

        public static explicit operator string(ArcKindEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ArcKindEnum other && Equals(other);
        public bool Equals(ArcKindEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the assessment mode.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentModeTypes : IEquatable<AssessmentModeTypes>
    {
        private readonly string _value;

        private AssessmentModeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentModeTypes ImageDefault { get; } = new AssessmentModeTypes("ImageDefault");
        public static AssessmentModeTypes AutomaticByPlatform { get; } = new AssessmentModeTypes("AutomaticByPlatform");

        public static bool operator ==(AssessmentModeTypes left, AssessmentModeTypes right) => left.Equals(right);
        public static bool operator !=(AssessmentModeTypes left, AssessmentModeTypes right) => !left.Equals(right);

        public static explicit operator string(AssessmentModeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentModeTypes other && Equals(other);
        public bool Equals(AssessmentModeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the Gateway resource.
    /// </summary>
    [EnumType]
    public readonly struct GatewayType : IEquatable<GatewayType>
    {
        private readonly string _value;

        private GatewayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayType Public { get; } = new GatewayType("Public");

        public static bool operator ==(GatewayType left, GatewayType right) => left.Equals(right);
        public static bool operator !=(GatewayType left, GatewayType right) => !left.Equals(right);

        public static explicit operator string(GatewayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayType other && Equals(other);
        public bool Equals(GatewayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the license assignment state (Assigned or NotAssigned).
    /// </summary>
    [EnumType]
    public readonly struct LicenseAssignmentState : IEquatable<LicenseAssignmentState>
    {
        private readonly string _value;

        private LicenseAssignmentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseAssignmentState Assigned { get; } = new LicenseAssignmentState("Assigned");
        public static LicenseAssignmentState NotAssigned { get; } = new LicenseAssignmentState("NotAssigned");

        public static bool operator ==(LicenseAssignmentState left, LicenseAssignmentState right) => left.Equals(right);
        public static bool operator !=(LicenseAssignmentState left, LicenseAssignmentState right) => !left.Equals(right);

        public static explicit operator string(LicenseAssignmentState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseAssignmentState other && Equals(other);
        public bool Equals(LicenseAssignmentState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the license core type (pCore or vCore).
    /// </summary>
    [EnumType]
    public readonly struct LicenseCoreType : IEquatable<LicenseCoreType>
    {
        private readonly string _value;

        private LicenseCoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseCoreType PCore { get; } = new LicenseCoreType("pCore");
        public static LicenseCoreType VCore { get; } = new LicenseCoreType("vCore");

        public static bool operator ==(LicenseCoreType left, LicenseCoreType right) => left.Equals(right);
        public static bool operator !=(LicenseCoreType left, LicenseCoreType right) => !left.Equals(right);

        public static explicit operator string(LicenseCoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseCoreType other && Equals(other);
        public bool Equals(LicenseCoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the edition of the license. The values are either Standard or Datacenter.
    /// </summary>
    [EnumType]
    public readonly struct LicenseEdition : IEquatable<LicenseEdition>
    {
        private readonly string _value;

        private LicenseEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseEdition Standard { get; } = new LicenseEdition("Standard");
        public static LicenseEdition Datacenter { get; } = new LicenseEdition("Datacenter");

        public static bool operator ==(LicenseEdition left, LicenseEdition right) => left.Equals(right);
        public static bool operator !=(LicenseEdition left, LicenseEdition right) => !left.Equals(right);

        public static explicit operator string(LicenseEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseEdition other && Equals(other);
        public bool Equals(LicenseEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the product type of the license.
    /// </summary>
    [EnumType]
    public readonly struct LicenseProfileProductType : IEquatable<LicenseProfileProductType>
    {
        private readonly string _value;

        private LicenseProfileProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseProfileProductType WindowsServer { get; } = new LicenseProfileProductType("WindowsServer");
        public static LicenseProfileProductType WindowsIoTEnterprise { get; } = new LicenseProfileProductType("WindowsIoTEnterprise");

        public static bool operator ==(LicenseProfileProductType left, LicenseProfileProductType right) => left.Equals(right);
        public static bool operator !=(LicenseProfileProductType left, LicenseProfileProductType right) => !left.Equals(right);

        public static explicit operator string(LicenseProfileProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseProfileProductType other && Equals(other);
        public bool Equals(LicenseProfileProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the subscription status of the product.
    /// </summary>
    [EnumType]
    public readonly struct LicenseProfileSubscriptionStatus : IEquatable<LicenseProfileSubscriptionStatus>
    {
        private readonly string _value;

        private LicenseProfileSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseProfileSubscriptionStatus Unknown { get; } = new LicenseProfileSubscriptionStatus("Unknown");
        public static LicenseProfileSubscriptionStatus Enabling { get; } = new LicenseProfileSubscriptionStatus("Enabling");
        public static LicenseProfileSubscriptionStatus Enabled { get; } = new LicenseProfileSubscriptionStatus("Enabled");
        public static LicenseProfileSubscriptionStatus Disabled { get; } = new LicenseProfileSubscriptionStatus("Disabled");

        public static bool operator ==(LicenseProfileSubscriptionStatus left, LicenseProfileSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(LicenseProfileSubscriptionStatus left, LicenseProfileSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(LicenseProfileSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseProfileSubscriptionStatus other && Equals(other);
        public bool Equals(LicenseProfileSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the state of the license.
    /// </summary>
    [EnumType]
    public readonly struct LicenseState : IEquatable<LicenseState>
    {
        private readonly string _value;

        private LicenseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseState Activated { get; } = new LicenseState("Activated");
        public static LicenseState Deactivated { get; } = new LicenseState("Deactivated");

        public static bool operator ==(LicenseState left, LicenseState right) => left.Equals(right);
        public static bool operator !=(LicenseState left, LicenseState right) => !left.Equals(right);

        public static explicit operator string(LicenseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseState other && Equals(other);
        public bool Equals(LicenseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the license target server.
    /// </summary>
    [EnumType]
    public readonly struct LicenseTarget : IEquatable<LicenseTarget>
    {
        private readonly string _value;

        private LicenseTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseTarget Windows_Server_2012 { get; } = new LicenseTarget("Windows Server 2012");
        public static LicenseTarget Windows_Server_2012_R2 { get; } = new LicenseTarget("Windows Server 2012 R2");

        public static bool operator ==(LicenseTarget left, LicenseTarget right) => left.Equals(right);
        public static bool operator !=(LicenseTarget left, LicenseTarget right) => !left.Equals(right);

        public static explicit operator string(LicenseTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseTarget other && Equals(other);
        public bool Equals(LicenseTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the license resource.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType ESU { get; } = new LicenseType("ESU");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the patch mode.
    /// </summary>
    [EnumType]
    public readonly struct PatchModeTypes : IEquatable<PatchModeTypes>
    {
        private readonly string _value;

        private PatchModeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PatchModeTypes ImageDefault { get; } = new PatchModeTypes("ImageDefault");
        public static PatchModeTypes AutomaticByPlatform { get; } = new PatchModeTypes("AutomaticByPlatform");
        public static PatchModeTypes AutomaticByOS { get; } = new PatchModeTypes("AutomaticByOS");
        public static PatchModeTypes Manual { get; } = new PatchModeTypes("Manual");

        public static bool operator ==(PatchModeTypes left, PatchModeTypes right) => left.Equals(right);
        public static bool operator !=(PatchModeTypes left, PatchModeTypes right) => !left.Equals(right);

        public static explicit operator string(PatchModeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PatchModeTypes other && Equals(other);
        public bool Equals(PatchModeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the program year the volume license is for.
    /// </summary>
    [EnumType]
    public readonly struct ProgramYear : IEquatable<ProgramYear>
    {
        private readonly string _value;

        private ProgramYear(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProgramYear Year_1 { get; } = new ProgramYear("Year 1");
        public static ProgramYear Year_2 { get; } = new ProgramYear("Year 2");
        public static ProgramYear Year_3 { get; } = new ProgramYear("Year 3");

        public static bool operator ==(ProgramYear left, ProgramYear right) => left.Equals(right);
        public static bool operator !=(ProgramYear left, ProgramYear right) => !left.Equals(right);

        public static explicit operator string(ProgramYear value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProgramYear other && Equals(other);
        public bool Equals(ProgramYear other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Allows Azure Arc agents to communicate with Azure Arc services over both public (internet) and private endpoints.
        /// </summary>
        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        /// <summary>
        /// Does not allow Azure Arc agents to communicate with Azure Arc services over public (internet) endpoints. The agents must use the private link.
        /// </summary>
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");
        /// <summary>
        /// Azure Arc agent communication with Azure Arc services over public (internet) is enforced by Network Security Perimeter (NSP)
        /// </summary>
        public static PublicNetworkAccessType SecuredByPerimeter { get; } = new PublicNetworkAccessType("SecuredByPerimeter");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level code.
    /// </summary>
    [EnumType]
    public readonly struct StatusLevelTypes : IEquatable<StatusLevelTypes>
    {
        private readonly string _value;

        private StatusLevelTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StatusLevelTypes Info { get; } = new StatusLevelTypes("Info");
        public static StatusLevelTypes Warning { get; } = new StatusLevelTypes("Warning");
        public static StatusLevelTypes Error { get; } = new StatusLevelTypes("Error");

        public static bool operator ==(StatusLevelTypes left, StatusLevelTypes right) => left.Equals(right);
        public static bool operator !=(StatusLevelTypes left, StatusLevelTypes right) => !left.Equals(right);

        public static explicit operator string(StatusLevelTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StatusLevelTypes other && Equals(other);
        public bool Equals(StatusLevelTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
