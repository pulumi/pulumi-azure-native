// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.VMwareCloudSimple
{
    /// <summary>
    /// Disk's independence mode type
    /// </summary>
    [EnumType]
    public readonly struct DiskIndependenceMode : IEquatable<DiskIndependenceMode>
    {
        private readonly string _value;

        private DiskIndependenceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskIndependenceMode Persistent { get; } = new DiskIndependenceMode("persistent");
        public static DiskIndependenceMode Independent_persistent { get; } = new DiskIndependenceMode("independent_persistent");
        public static DiskIndependenceMode Independent_nonpersistent { get; } = new DiskIndependenceMode("independent_nonpersistent");

        public static bool operator ==(DiskIndependenceMode left, DiskIndependenceMode right) => left.Equals(right);
        public static bool operator !=(DiskIndependenceMode left, DiskIndependenceMode right) => !left.Equals(right);

        public static explicit operator string(DiskIndependenceMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskIndependenceMode other && Equals(other);
        public bool Equals(DiskIndependenceMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// NIC type
    /// </summary>
    [EnumType]
    public readonly struct NICType : IEquatable<NICType>
    {
        private readonly string _value;

        private NICType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NICType E1000 { get; } = new NICType("E1000");
        public static NICType E1000E { get; } = new NICType("E1000E");
        public static NICType PCNET32 { get; } = new NICType("PCNET32");
        public static NICType VMXNET { get; } = new NICType("VMXNET");
        public static NICType VMXNET2 { get; } = new NICType("VMXNET2");
        public static NICType VMXNET3 { get; } = new NICType("VMXNET3");

        public static bool operator ==(NICType left, NICType right) => left.Equals(right);
        public static bool operator !=(NICType left, NICType right) => !left.Equals(right);

        public static explicit operator string(NICType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NICType other && Equals(other);
        public bool Equals(NICType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
