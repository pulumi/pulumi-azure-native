// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    public static class GetVirtualMachine
    {
        /// <summary>
        /// Get properties of the provided virtual machine.
        /// API Version: 2022-12-12-preview.
        /// </summary>
        public static Task<GetVirtualMachineResult> InvokeAsync(GetVirtualMachineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineResult>("azure-native:networkcloud:getVirtualMachine", args ?? new GetVirtualMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of the provided virtual machine.
        /// API Version: 2022-12-12-preview.
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("azure-native:networkcloud:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public string VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineArgs()
        {
        }
        public static new GetVirtualMachineArgs Empty => new GetVirtualMachineArgs();
    }

    public sealed class GetVirtualMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public Input<string> VirtualMachineName { get; set; } = null!;

        public GetVirtualMachineInvokeArgs()
        {
        }
        public static new GetVirtualMachineInvokeArgs Empty => new GetVirtualMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineResult
    {
        /// <summary>
        /// The name of the administrator to which the ssh public keys will be added into the authorized keys.
        /// </summary>
        public readonly string AdminUsername;
        /// <summary>
        /// The resource ID of the bare metal machine the virtual machine has landed to.
        /// </summary>
        public readonly string BareMetalMachineId;
        /// <summary>
        /// Selects the boot method for the virtual machine.
        /// </summary>
        public readonly string? BootMethod;
        /// <summary>
        /// The cloud service network that provides platform-level services for the virtual machine.
        /// </summary>
        public readonly Outputs.NetworkAttachmentResponse CloudServicesNetworkAttachment;
        /// <summary>
        /// The resource ID of the cluster the virtual machine is created for.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The number of CPU cores in the virtual machine.
        /// </summary>
        public readonly double CpuCores;
        /// <summary>
        /// The more detailed status of the virtual machine.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        /// </summary>
        public readonly string? IsolateEmulatorThread;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The memory size of the virtual machine in GB.
        /// </summary>
        public readonly double MemorySizeGB;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of network attachments to the virtual machine.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkAttachmentResponse> NetworkAttachments;
        /// <summary>
        /// The Base64 encoded cloud-init network data.
        /// </summary>
        public readonly string? NetworkData;
        /// <summary>
        /// The scheduling hints for the virtual machine.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachinePlacementHintResponse> PlacementHints;
        /// <summary>
        /// The power state of the virtual machine.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// The provisioning state of the virtual machine.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        /// </summary>
        public readonly ImmutableArray<Outputs.SshPublicKeyResponse> SshPublicKeys;
        /// <summary>
        /// The storage profile that specifies size and other parameters about the disks related to the virtual machine.
        /// </summary>
        public readonly Outputs.StorageProfileResponse StorageProfile;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The Base64 encoded cloud-init user data.
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        /// </summary>
        public readonly string? VirtioInterface;
        /// <summary>
        /// The type of the device model to use.
        /// </summary>
        public readonly string? VmDeviceModel;
        /// <summary>
        /// The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        /// </summary>
        public readonly string VmImage;
        /// <summary>
        /// The credentials used to login to the image repository that has access to the specified image.
        /// </summary>
        public readonly Outputs.ImageRepositoryCredentialsResponse? VmImageRepositoryCredentials;
        /// <summary>
        /// The resource IDs of volumes that are attached to the virtual machine.
        /// </summary>
        public readonly ImmutableArray<string> Volumes;

        [OutputConstructor]
        private GetVirtualMachineResult(
            string adminUsername,

            string bareMetalMachineId,

            string? bootMethod,

            Outputs.NetworkAttachmentResponse cloudServicesNetworkAttachment,

            string clusterId,

            double cpuCores,

            string detailedStatus,

            string detailedStatusMessage,

            Outputs.ExtendedLocationResponse extendedLocation,

            string id,

            string? isolateEmulatorThread,

            string location,

            double memorySizeGB,

            string name,

            ImmutableArray<Outputs.NetworkAttachmentResponse> networkAttachments,

            string? networkData,

            ImmutableArray<Outputs.VirtualMachinePlacementHintResponse> placementHints,

            string powerState,

            string provisioningState,

            ImmutableArray<Outputs.SshPublicKeyResponse> sshPublicKeys,

            Outputs.StorageProfileResponse storageProfile,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? userData,

            string? virtioInterface,

            string? vmDeviceModel,

            string vmImage,

            Outputs.ImageRepositoryCredentialsResponse? vmImageRepositoryCredentials,

            ImmutableArray<string> volumes)
        {
            AdminUsername = adminUsername;
            BareMetalMachineId = bareMetalMachineId;
            BootMethod = bootMethod;
            CloudServicesNetworkAttachment = cloudServicesNetworkAttachment;
            ClusterId = clusterId;
            CpuCores = cpuCores;
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            ExtendedLocation = extendedLocation;
            Id = id;
            IsolateEmulatorThread = isolateEmulatorThread;
            Location = location;
            MemorySizeGB = memorySizeGB;
            Name = name;
            NetworkAttachments = networkAttachments;
            NetworkData = networkData;
            PlacementHints = placementHints;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            SshPublicKeys = sshPublicKeys;
            StorageProfile = storageProfile;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UserData = userData;
            VirtioInterface = virtioInterface;
            VmDeviceModel = vmDeviceModel;
            VmImage = vmImage;
            VmImageRepositoryCredentials = vmImageRepositoryCredentials;
            Volumes = volumes;
        }
    }
}
