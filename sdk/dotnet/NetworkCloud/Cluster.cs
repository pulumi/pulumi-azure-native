// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    /// <summary>
    /// Azure REST API version: 2023-05-01-preview. Prior API version in Azure Native 1.x: 2022-12-12-preview.
    /// 
    /// Other available API versions: 2023-07-01, 2023-10-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:networkcloud:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
        /// </summary>
        [Output("aggregatorOrSingleRackDefinition")]
        public Output<Outputs.RackDefinitionResponse> AggregatorOrSingleRackDefinition { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
        /// </summary>
        [Output("analyticsWorkspaceId")]
        public Output<string?> AnalyticsWorkspaceId { get; private set; } = null!;

        /// <summary>
        /// The list of cluster runtime version upgrades available for this cluster.
        /// </summary>
        [Output("availableUpgradeVersions")]
        public Output<ImmutableArray<Outputs.ClusterAvailableUpgradeVersionResponse>> AvailableUpgradeVersions { get; private set; } = null!;

        /// <summary>
        /// The capacity supported by this cluster.
        /// </summary>
        [Output("clusterCapacity")]
        public Output<Outputs.ClusterCapacityResponse> ClusterCapacity { get; private set; } = null!;

        /// <summary>
        /// The latest heartbeat status between the cluster manager and the cluster.
        /// </summary>
        [Output("clusterConnectionStatus")]
        public Output<string> ClusterConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// The extended location (custom location) that represents the cluster's control plane location. This extended location is used to route the requests of child objects of the cluster that are handled by the platform operator.
        /// </summary>
        [Output("clusterExtendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ClusterExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The customer-provided location information to identify where the cluster resides.
        /// </summary>
        [Output("clusterLocation")]
        public Output<string?> ClusterLocation { get; private set; } = null!;

        /// <summary>
        /// The latest connectivity status between cluster manager and the cluster.
        /// </summary>
        [Output("clusterManagerConnectionStatus")]
        public Output<string> ClusterManagerConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the cluster manager that manages this cluster. This is set by the Cluster Manager when the cluster is created.
        /// </summary>
        [Output("clusterManagerId")]
        public Output<string> ClusterManagerId { get; private set; } = null!;

        /// <summary>
        /// The service principal to be used by the cluster during Arc Appliance installation.
        /// </summary>
        [Output("clusterServicePrincipal")]
        public Output<Outputs.ServicePrincipalInformationResponse?> ClusterServicePrincipal { get; private set; } = null!;

        /// <summary>
        /// The type of rack configuration for the cluster.
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// The current runtime version of the cluster.
        /// </summary>
        [Output("clusterVersion")]
        public Output<string> ClusterVersion { get; private set; } = null!;

        /// <summary>
        /// The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.
        /// </summary>
        [Output("computeDeploymentThreshold")]
        public Output<Outputs.ValidationThresholdResponse?> ComputeDeploymentThreshold { get; private set; } = null!;

        /// <summary>
        /// The list of rack definitions for the compute racks in a multi-rack
        /// cluster, or an empty list in a single-rack cluster.
        /// </summary>
        [Output("computeRackDefinitions")]
        public Output<ImmutableArray<Outputs.RackDefinitionResponse>> ComputeRackDefinitions { get; private set; } = null!;

        /// <summary>
        /// The current detailed status of the cluster.
        /// </summary>
        [Output("detailedStatus")]
        public Output<string> DetailedStatus { get; private set; } = null!;

        /// <summary>
        /// The descriptive message about the detailed status.
        /// </summary>
        [Output("detailedStatusMessage")]
        public Output<string> DetailedStatusMessage { get; private set; } = null!;

        /// <summary>
        /// The extended location of the cluster manager associated with the cluster.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Field Deprecated. This field will not be populated in an upcoming version. The extended location (custom location) that represents the Hybrid AKS control plane location. This extended location is used when creating provisioned clusters (Hybrid AKS clusters).
        /// </summary>
        [Output("hybridAksExtendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> HybridAksExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The configuration of the managed resource group associated with the resource.
        /// </summary>
        [Output("managedResourceGroupConfiguration")]
        public Output<Outputs.ManagedResourceGroupConfigurationResponse?> ManagedResourceGroupConfiguration { get; private set; } = null!;

        /// <summary>
        /// The count of Manual Action Taken (MAT) events that have not been validated.
        /// </summary>
        [Output("manualActionCount")]
        public Output<double> ManualActionCount { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Network Fabric associated with the cluster.
        /// </summary>
        [Output("networkFabricId")]
        public Output<string> NetworkFabricId { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the cluster.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The support end date of the runtime version of the cluster.
        /// </summary>
        [Output("supportExpiryDate")]
        public Output<string> SupportExpiryDate { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The list of workload resource IDs that are hosted within this cluster.
        /// </summary>
        [Output("workloadResourceIds")]
        public Output<ImmutableArray<string>> WorkloadResourceIds { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud:Cluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20230501preview:Cluster" },
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20230701:Cluster" },
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20231001preview:Cluster" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
        /// </summary>
        [Input("aggregatorOrSingleRackDefinition", required: true)]
        public Input<Inputs.RackDefinitionArgs> AggregatorOrSingleRackDefinition { get; set; } = null!;

        /// <summary>
        /// The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.
        /// </summary>
        [Input("analyticsWorkspaceId")]
        public Input<string>? AnalyticsWorkspaceId { get; set; }

        /// <summary>
        /// The customer-provided location information to identify where the cluster resides.
        /// </summary>
        [Input("clusterLocation")]
        public Input<string>? ClusterLocation { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The service principal to be used by the cluster during Arc Appliance installation.
        /// </summary>
        [Input("clusterServicePrincipal")]
        public Input<Inputs.ServicePrincipalInformationArgs>? ClusterServicePrincipal { get; set; }

        /// <summary>
        /// The type of rack configuration for the cluster.
        /// </summary>
        [Input("clusterType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.ClusterType> ClusterType { get; set; } = null!;

        /// <summary>
        /// The current runtime version of the cluster.
        /// </summary>
        [Input("clusterVersion", required: true)]
        public Input<string> ClusterVersion { get; set; } = null!;

        /// <summary>
        /// The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.
        /// </summary>
        [Input("computeDeploymentThreshold")]
        public Input<Inputs.ValidationThresholdArgs>? ComputeDeploymentThreshold { get; set; }

        [Input("computeRackDefinitions")]
        private InputList<Inputs.RackDefinitionArgs>? _computeRackDefinitions;

        /// <summary>
        /// The list of rack definitions for the compute racks in a multi-rack
        /// cluster, or an empty list in a single-rack cluster.
        /// </summary>
        public InputList<Inputs.RackDefinitionArgs> ComputeRackDefinitions
        {
            get => _computeRackDefinitions ?? (_computeRackDefinitions = new InputList<Inputs.RackDefinitionArgs>());
            set => _computeRackDefinitions = value;
        }

        /// <summary>
        /// The extended location of the cluster manager associated with the cluster.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The configuration of the managed resource group associated with the resource.
        /// </summary>
        [Input("managedResourceGroupConfiguration")]
        public Input<Inputs.ManagedResourceGroupConfigurationArgs>? ManagedResourceGroupConfiguration { get; set; }

        /// <summary>
        /// The resource ID of the Network Fabric associated with the cluster.
        /// </summary>
        [Input("networkFabricId", required: true)]
        public Input<string> NetworkFabricId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }
}
