// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.Inputs
{

    public sealed class VirtualMachinePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the administrator to which the ssh public keys will be added into the authorized keys.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// Selects the boot method for the virtual machine.
        /// </summary>
        [Input("bootMethod")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.VirtualMachineBootMethod>? BootMethod { get; set; }

        [Input("cloudServicesNetworkAttachment", required: true)]
        public Input<Inputs.NetworkAttachmentArgs> CloudServicesNetworkAttachment { get; set; } = null!;

        /// <summary>
        /// The number of CPU cores in the virtual machine.
        /// </summary>
        [Input("cpuCores", required: true)]
        public Input<double> CpuCores { get; set; } = null!;

        /// <summary>
        /// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        /// </summary>
        [Input("isolateEmulatorThread")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.VirtualMachineIsolateEmulatorThread>? IsolateEmulatorThread { get; set; }

        /// <summary>
        /// The memory size of the virtual machine in GB.
        /// </summary>
        [Input("memorySizeGB", required: true)]
        public Input<double> MemorySizeGB { get; set; } = null!;

        [Input("networkAttachments")]
        private InputList<Inputs.NetworkAttachmentArgs>? _networkAttachments;

        /// <summary>
        /// The list of network attachments to the virtual machine.
        /// </summary>
        public InputList<Inputs.NetworkAttachmentArgs> NetworkAttachments
        {
            get => _networkAttachments ?? (_networkAttachments = new InputList<Inputs.NetworkAttachmentArgs>());
            set => _networkAttachments = value;
        }

        /// <summary>
        /// The Base64 encoded cloud-init network data.
        /// </summary>
        [Input("networkData")]
        public Input<string>? NetworkData { get; set; }

        [Input("placementHints")]
        private InputList<Inputs.VirtualMachinePlacementHintArgs>? _placementHints;

        /// <summary>
        /// The scheduling hints for the virtual machine.
        /// </summary>
        public InputList<Inputs.VirtualMachinePlacementHintArgs> PlacementHints
        {
            get => _placementHints ?? (_placementHints = new InputList<Inputs.VirtualMachinePlacementHintArgs>());
            set => _placementHints = value;
        }

        [Input("sshPublicKeys")]
        private InputList<Inputs.SshPublicKeyArgs>? _sshPublicKeys;

        /// <summary>
        /// The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        /// </summary>
        public InputList<Inputs.SshPublicKeyArgs> SshPublicKeys
        {
            get => _sshPublicKeys ?? (_sshPublicKeys = new InputList<Inputs.SshPublicKeyArgs>());
            set => _sshPublicKeys = value;
        }

        [Input("storageProfile", required: true)]
        public Input<Inputs.StorageProfileArgs> StorageProfile { get; set; } = null!;

        /// <summary>
        /// The Base64 encoded cloud-init user data.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        /// </summary>
        [Input("virtioInterface")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.VirtualMachineVirtioInterfaceType>? VirtioInterface { get; set; }

        /// <summary>
        /// The type of the device model to use.
        /// </summary>
        [Input("vmDeviceModel")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.VirtualMachineDeviceModelType>? VmDeviceModel { get; set; }

        /// <summary>
        /// The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        /// </summary>
        [Input("vmImage", required: true)]
        public Input<string> VmImage { get; set; } = null!;

        [Input("vmImageRepositoryCredentials")]
        public Input<Inputs.ImageRepositoryCredentialsArgs>? VmImageRepositoryCredentials { get; set; }

        public VirtualMachinePropertiesArgs()
        {
            BootMethod = "UEFI";
            IsolateEmulatorThread = "True";
            VirtioInterface = "Modern";
            VmDeviceModel = "T2";
        }
        public static new VirtualMachinePropertiesArgs Empty => new VirtualMachinePropertiesArgs();
    }
}
