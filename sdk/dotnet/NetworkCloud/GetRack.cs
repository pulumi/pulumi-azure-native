// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    public static class GetRack
    {
        /// <summary>
        /// Get properties of the provided rack.
        /// Azure REST API version: 2023-10-01-preview.
        /// 
        /// Other available API versions: 2023-07-01.
        /// </summary>
        public static Task<GetRackResult> InvokeAsync(GetRackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRackResult>("azure-native:networkcloud:getRack", args ?? new GetRackArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of the provided rack.
        /// Azure REST API version: 2023-10-01-preview.
        /// 
        /// Other available API versions: 2023-07-01.
        /// </summary>
        public static Output<GetRackResult> Invoke(GetRackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRackResult>("azure-native:networkcloud:getRack", args ?? new GetRackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the rack.
        /// </summary>
        [Input("rackName", required: true)]
        public string RackName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRackArgs()
        {
        }
        public static new GetRackArgs Empty => new GetRackArgs();
    }

    public sealed class GetRackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the rack.
        /// </summary>
        [Input("rackName", required: true)]
        public Input<string> RackName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetRackInvokeArgs()
        {
        }
        public static new GetRackInvokeArgs Empty => new GetRackInvokeArgs();
    }


    [OutputType]
    public sealed class GetRackResult
    {
        /// <summary>
        /// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The resource ID of the cluster the rack is created for. This value is set when the rack is created by the cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The more detailed status of the rack.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the rack resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
        /// </summary>
        public readonly string RackLocation;
        /// <summary>
        /// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        /// </summary>
        public readonly string RackSerialNumber;
        /// <summary>
        /// The SKU for the rack.
        /// </summary>
        public readonly string RackSkuId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRackResult(
            string availabilityZone,

            string clusterId,

            string detailedStatus,

            string detailedStatusMessage,

            Outputs.ExtendedLocationResponse extendedLocation,

            string id,

            string location,

            string name,

            string provisioningState,

            string rackLocation,

            string rackSerialNumber,

            string rackSkuId,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AvailabilityZone = availabilityZone;
            ClusterId = clusterId;
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            RackLocation = rackLocation;
            RackSerialNumber = rackSerialNumber;
            RackSkuId = rackSkuId;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
