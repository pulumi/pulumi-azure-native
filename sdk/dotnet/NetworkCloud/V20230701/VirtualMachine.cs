// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.V20230701
{
    [AzureNativeResourceType("azure-native:networkcloud/v20230701:VirtualMachine")]
    public partial class VirtualMachine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the administrator to which the ssh public keys will be added into the authorized keys.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// The cluster availability zone containing this virtual machine.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the bare metal machine the virtual machine has landed to.
        /// </summary>
        [Output("bareMetalMachineId")]
        public Output<string> BareMetalMachineId { get; private set; } = null!;

        /// <summary>
        /// Selects the boot method for the virtual machine.
        /// </summary>
        [Output("bootMethod")]
        public Output<string?> BootMethod { get; private set; } = null!;

        /// <summary>
        /// The cloud service network that provides platform-level services for the virtual machine.
        /// </summary>
        [Output("cloudServicesNetworkAttachment")]
        public Output<Outputs.NetworkAttachmentResponse> CloudServicesNetworkAttachment { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the cluster the virtual machine is created for.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The number of CPU cores in the virtual machine.
        /// </summary>
        [Output("cpuCores")]
        public Output<double> CpuCores { get; private set; } = null!;

        /// <summary>
        /// The more detailed status of the virtual machine.
        /// </summary>
        [Output("detailedStatus")]
        public Output<string> DetailedStatus { get; private set; } = null!;

        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        [Output("detailedStatusMessage")]
        public Output<string> DetailedStatusMessage { get; private set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        /// </summary>
        [Output("isolateEmulatorThread")]
        public Output<string?> IsolateEmulatorThread { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The memory size of the virtual machine in GB.
        /// </summary>
        [Output("memorySizeGB")]
        public Output<double> MemorySizeGB { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of network attachments to the virtual machine.
        /// </summary>
        [Output("networkAttachments")]
        public Output<ImmutableArray<Outputs.NetworkAttachmentResponse>> NetworkAttachments { get; private set; } = null!;

        /// <summary>
        /// The Base64 encoded cloud-init network data.
        /// </summary>
        [Output("networkData")]
        public Output<string?> NetworkData { get; private set; } = null!;

        /// <summary>
        /// The scheduling hints for the virtual machine.
        /// </summary>
        [Output("placementHints")]
        public Output<ImmutableArray<Outputs.VirtualMachinePlacementHintResponse>> PlacementHints { get; private set; } = null!;

        /// <summary>
        /// The power state of the virtual machine.
        /// </summary>
        [Output("powerState")]
        public Output<string> PowerState { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the virtual machine.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        /// </summary>
        [Output("sshPublicKeys")]
        public Output<ImmutableArray<Outputs.SshPublicKeyResponse>> SshPublicKeys { get; private set; } = null!;

        /// <summary>
        /// The storage profile that specifies size and other parameters about the disks related to the virtual machine.
        /// </summary>
        [Output("storageProfile")]
        public Output<Outputs.StorageProfileResponse> StorageProfile { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The Base64 encoded cloud-init user data.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        /// </summary>
        [Output("virtioInterface")]
        public Output<string?> VirtioInterface { get; private set; } = null!;

        /// <summary>
        /// The type of the device model to use.
        /// </summary>
        [Output("vmDeviceModel")]
        public Output<string?> VmDeviceModel { get; private set; } = null!;

        /// <summary>
        /// The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        /// </summary>
        [Output("vmImage")]
        public Output<string> VmImage { get; private set; } = null!;

        /// <summary>
        /// The credentials used to login to the image repository that has access to the specified image.
        /// </summary>
        [Output("vmImageRepositoryCredentials")]
        public Output<Outputs.ImageRepositoryCredentialsResponse?> VmImageRepositoryCredentials { get; private set; } = null!;

        /// <summary>
        /// The resource IDs of volumes that are attached to the virtual machine.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<string>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud/v20230701:VirtualMachine", name, args ?? new VirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud/v20230701:VirtualMachine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud:VirtualMachine" },
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20231001preview:VirtualMachine" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, options);
        }
    }

    public sealed class VirtualMachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the administrator to which the ssh public keys will be added into the authorized keys.
        /// </summary>
        [Input("adminUsername", required: true)]
        public Input<string> AdminUsername { get; set; } = null!;

        /// <summary>
        /// Selects the boot method for the virtual machine.
        /// </summary>
        [Input("bootMethod")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.V20230701.VirtualMachineBootMethod>? BootMethod { get; set; }

        /// <summary>
        /// The cloud service network that provides platform-level services for the virtual machine.
        /// </summary>
        [Input("cloudServicesNetworkAttachment", required: true)]
        public Input<Inputs.NetworkAttachmentArgs> CloudServicesNetworkAttachment { get; set; } = null!;

        /// <summary>
        /// The number of CPU cores in the virtual machine.
        /// </summary>
        [Input("cpuCores", required: true)]
        public Input<double> CpuCores { get; set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        /// </summary>
        [Input("isolateEmulatorThread")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.V20230701.VirtualMachineIsolateEmulatorThread>? IsolateEmulatorThread { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The memory size of the virtual machine in GB.
        /// </summary>
        [Input("memorySizeGB", required: true)]
        public Input<double> MemorySizeGB { get; set; } = null!;

        [Input("networkAttachments")]
        private InputList<Inputs.NetworkAttachmentArgs>? _networkAttachments;

        /// <summary>
        /// The list of network attachments to the virtual machine.
        /// </summary>
        public InputList<Inputs.NetworkAttachmentArgs> NetworkAttachments
        {
            get => _networkAttachments ?? (_networkAttachments = new InputList<Inputs.NetworkAttachmentArgs>());
            set => _networkAttachments = value;
        }

        /// <summary>
        /// The Base64 encoded cloud-init network data.
        /// </summary>
        [Input("networkData")]
        public Input<string>? NetworkData { get; set; }

        [Input("placementHints")]
        private InputList<Inputs.VirtualMachinePlacementHintArgs>? _placementHints;

        /// <summary>
        /// The scheduling hints for the virtual machine.
        /// </summary>
        public InputList<Inputs.VirtualMachinePlacementHintArgs> PlacementHints
        {
            get => _placementHints ?? (_placementHints = new InputList<Inputs.VirtualMachinePlacementHintArgs>());
            set => _placementHints = value;
        }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("sshPublicKeys")]
        private InputList<Inputs.SshPublicKeyArgs>? _sshPublicKeys;

        /// <summary>
        /// The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        /// </summary>
        public InputList<Inputs.SshPublicKeyArgs> SshPublicKeys
        {
            get => _sshPublicKeys ?? (_sshPublicKeys = new InputList<Inputs.SshPublicKeyArgs>());
            set => _sshPublicKeys = value;
        }

        /// <summary>
        /// The storage profile that specifies size and other parameters about the disks related to the virtual machine.
        /// </summary>
        [Input("storageProfile", required: true)]
        public Input<Inputs.StorageProfileArgs> StorageProfile { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Base64 encoded cloud-init user data.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        /// </summary>
        [Input("virtioInterface")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.V20230701.VirtualMachineVirtioInterfaceType>? VirtioInterface { get; set; }

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("virtualMachineName")]
        public Input<string>? VirtualMachineName { get; set; }

        /// <summary>
        /// The type of the device model to use.
        /// </summary>
        [Input("vmDeviceModel")]
        public InputUnion<string, Pulumi.AzureNative.NetworkCloud.V20230701.VirtualMachineDeviceModelType>? VmDeviceModel { get; set; }

        /// <summary>
        /// The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        /// </summary>
        [Input("vmImage", required: true)]
        public Input<string> VmImage { get; set; } = null!;

        /// <summary>
        /// The credentials used to login to the image repository that has access to the specified image.
        /// </summary>
        [Input("vmImageRepositoryCredentials")]
        public Input<Inputs.ImageRepositoryCredentialsArgs>? VmImageRepositoryCredentials { get; set; }

        public VirtualMachineArgs()
        {
            BootMethod = "UEFI";
            IsolateEmulatorThread = "True";
            VirtioInterface = "Modern";
            VmDeviceModel = "T2";
        }
        public static new VirtualMachineArgs Empty => new VirtualMachineArgs();
    }
}
