// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.V20230701
{
    [AzureNativeResourceType("azure-native:networkcloud/v20230701:Rack")]
    public partial class Rack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the cluster the rack is created for. This value is set when the rack is created by the cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The more detailed status of the rack.
        /// </summary>
        [Output("detailedStatus")]
        public Output<string> DetailedStatus { get; private set; } = null!;

        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        [Output("detailedStatusMessage")]
        public Output<string> DetailedStatusMessage { get; private set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the rack resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
        /// </summary>
        [Output("rackLocation")]
        public Output<string> RackLocation { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        /// </summary>
        [Output("rackSerialNumber")]
        public Output<string> RackSerialNumber { get; private set; } = null!;

        /// <summary>
        /// The SKU for the rack.
        /// </summary>
        [Output("rackSkuId")]
        public Output<string> RackSkuId { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Rack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rack(string name, RackArgs args, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud/v20230701:Rack", name, args ?? new RackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rack(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud/v20230701:Rack", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud:Rack" },
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20231001preview:Rack" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rack Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Rack(name, id, options);
        }
    }

    public sealed class RackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
        /// </summary>
        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
        /// </summary>
        [Input("rackLocation", required: true)]
        public Input<string> RackLocation { get; set; } = null!;

        /// <summary>
        /// The name of the rack.
        /// </summary>
        [Input("rackName")]
        public Input<string>? RackName { get; set; }

        /// <summary>
        /// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
        /// </summary>
        [Input("rackSerialNumber", required: true)]
        public Input<string> RackSerialNumber { get; set; } = null!;

        /// <summary>
        /// The SKU for the rack.
        /// </summary>
        [Input("rackSkuId", required: true)]
        public Input<string> RackSkuId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RackArgs()
        {
        }
        public static new RackArgs Empty => new RackArgs();
    }
}
