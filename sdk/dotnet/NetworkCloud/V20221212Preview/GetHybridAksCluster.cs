// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.V20221212Preview
{
    public static class GetHybridAksCluster
    {
        /// <summary>
        /// Get the additional details related to the provided Hybrid AKS provisioned cluster.
        /// </summary>
        public static Task<GetHybridAksClusterResult> InvokeAsync(GetHybridAksClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHybridAksClusterResult>("azure-native:networkcloud/v20221212preview:getHybridAksCluster", args ?? new GetHybridAksClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get the additional details related to the provided Hybrid AKS provisioned cluster.
        /// </summary>
        public static Output<GetHybridAksClusterResult> Invoke(GetHybridAksClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHybridAksClusterResult>("azure-native:networkcloud/v20221212preview:getHybridAksCluster", args ?? new GetHybridAksClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHybridAksClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Hybrid AKS cluster.
        /// </summary>
        [Input("hybridAksClusterName", required: true)]
        public string HybridAksClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetHybridAksClusterArgs()
        {
        }
        public static new GetHybridAksClusterArgs Empty => new GetHybridAksClusterArgs();
    }

    public sealed class GetHybridAksClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Hybrid AKS cluster.
        /// </summary>
        [Input("hybridAksClusterName", required: true)]
        public Input<string> HybridAksClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetHybridAksClusterInvokeArgs()
        {
        }
        public static new GetHybridAksClusterInvokeArgs Empty => new GetHybridAksClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetHybridAksClusterResult
    {
        /// <summary>
        /// The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork.
        /// </summary>
        public readonly ImmutableArray<string> AssociatedNetworkIds;
        /// <summary>
        /// The resource ID of the associated cloud services network.
        /// </summary>
        public readonly string CloudServicesNetworkId;
        /// <summary>
        /// The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The number of control plane node VMs.
        /// </summary>
        public readonly double ControlPlaneCount;
        /// <summary>
        /// The list of node configurations detailing associated VMs that are part of the control plane nodes of this Hybrid AKS cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeConfigurationResponse> ControlPlaneNodes;
        /// <summary>
        /// The resource ID of the associated default CNI network.
        /// </summary>
        public readonly string DefaultCniNetworkId;
        /// <summary>
        /// The more detailed status of this Hybrid AKS cluster.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// The resource ID of the Hybrid AKS cluster that this additional information is for.
        /// </summary>
        public readonly string HybridAksProvisionedClusterId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the Hybrid AKS cluster resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The resource IDs of volumes that are attached to the Hybrid AKS cluster.
        /// </summary>
        public readonly ImmutableArray<string> Volumes;
        /// <summary>
        /// The number of worker node VMs.
        /// </summary>
        public readonly double WorkerCount;
        /// <summary>
        /// The list of node configurations detailing associated VMs that are part of the worker nodes of this Hybrid AKS cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeConfigurationResponse> WorkerNodes;

        [OutputConstructor]
        private GetHybridAksClusterResult(
            ImmutableArray<string> associatedNetworkIds,

            string cloudServicesNetworkId,

            string clusterId,

            double controlPlaneCount,

            ImmutableArray<Outputs.NodeConfigurationResponse> controlPlaneNodes,

            string defaultCniNetworkId,

            string detailedStatus,

            string detailedStatusMessage,

            Outputs.ExtendedLocationResponse extendedLocation,

            string hybridAksProvisionedClusterId,

            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<string> volumes,

            double workerCount,

            ImmutableArray<Outputs.NodeConfigurationResponse> workerNodes)
        {
            AssociatedNetworkIds = associatedNetworkIds;
            CloudServicesNetworkId = cloudServicesNetworkId;
            ClusterId = clusterId;
            ControlPlaneCount = controlPlaneCount;
            ControlPlaneNodes = controlPlaneNodes;
            DefaultCniNetworkId = defaultCniNetworkId;
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            ExtendedLocation = extendedLocation;
            HybridAksProvisionedClusterId = hybridAksProvisionedClusterId;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Volumes = volumes;
            WorkerCount = workerCount;
            WorkerNodes = workerNodes;
        }
    }
}
