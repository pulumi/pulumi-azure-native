// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.V20221212Preview
{
    public static class GetConsole
    {
        /// <summary>
        /// Get properties of the provided virtual machine console.
        /// </summary>
        public static Task<GetConsoleResult> InvokeAsync(GetConsoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConsoleResult>("azure-native:networkcloud/v20221212preview:getConsole", args ?? new GetConsoleArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of the provided virtual machine console.
        /// </summary>
        public static Output<GetConsoleResult> Invoke(GetConsoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConsoleResult>("azure-native:networkcloud/v20221212preview:getConsole", args ?? new GetConsoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConsoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the virtual machine console.
        /// </summary>
        [Input("consoleName", required: true)]
        public string ConsoleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public string VirtualMachineName { get; set; } = null!;

        public GetConsoleArgs()
        {
        }
        public static new GetConsoleArgs Empty => new GetConsoleArgs();
    }

    public sealed class GetConsoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the virtual machine console.
        /// </summary>
        [Input("consoleName", required: true)]
        public Input<string> ConsoleName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("virtualMachineName", required: true)]
        public Input<string> VirtualMachineName { get; set; } = null!;

        public GetConsoleInvokeArgs()
        {
        }
        public static new GetConsoleInvokeArgs Empty => new GetConsoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetConsoleResult
    {
        /// <summary>
        /// The more detailed status of the console.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// The indicator of whether the console access is enabled.
        /// </summary>
        public readonly string Enabled;
        /// <summary>
        /// The date and time after which the key will be disallowed access.
        /// </summary>
        public readonly string? Expiration;
        /// <summary>
        /// The extended location of the cluster manager associated with the cluster this virtual machine is created on.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource ID of the private link service that is used to provide virtual machine console access.
        /// </summary>
        public readonly string PrivateLinkServiceId;
        /// <summary>
        /// The provisioning state of the virtual machine console.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
        /// </summary>
        public readonly Outputs.SshPublicKeyResponse SshPublicKey;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique identifier for the virtual machine that is used to access the console.
        /// </summary>
        public readonly string VirtualMachineAccessId;

        [OutputConstructor]
        private GetConsoleResult(
            string detailedStatus,

            string detailedStatusMessage,

            string enabled,

            string? expiration,

            Outputs.ExtendedLocationResponse extendedLocation,

            string id,

            string location,

            string name,

            string privateLinkServiceId,

            string provisioningState,

            Outputs.SshPublicKeyResponse sshPublicKey,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string virtualMachineAccessId)
        {
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            Enabled = enabled;
            Expiration = expiration;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            PrivateLinkServiceId = privateLinkServiceId;
            ProvisioningState = provisioningState;
            SshPublicKey = sshPublicKey;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VirtualMachineAccessId = virtualMachineAccessId;
        }
    }
}
