// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.NetworkCloud.V20221212Preview
{
    /// <summary>
    /// The type of rack configuration for the cluster.
    /// </summary>
    [EnumType]
    public readonly struct ClusterType : IEquatable<ClusterType>
    {
        private readonly string _value;

        private ClusterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterType SingleRack { get; } = new ClusterType("SingleRack");
        public static ClusterType MultiRack { get; } = new ClusterType("MultiRack");

        public static bool operator ==(ClusterType left, ClusterType right) => left.Equals(right);
        public static bool operator !=(ClusterType left, ClusterType right) => !left.Equals(right);

        public static explicit operator string(ClusterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterType other && Equals(other);
        public bool Equals(ClusterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the IP address allocation.
    /// </summary>
    [EnumType]
    public readonly struct IpAllocationType : IEquatable<IpAllocationType>
    {
        private readonly string _value;

        private IpAllocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpAllocationType IPV4 { get; } = new IpAllocationType("IPV4");
        public static IpAllocationType IPV6 { get; } = new IpAllocationType("IPV6");
        public static IpAllocationType DualStack { get; } = new IpAllocationType("DualStack");

        public static bool operator ==(IpAllocationType left, IpAllocationType right) => left.Equals(right);
        public static bool operator !=(IpAllocationType left, IpAllocationType right) => !left.Equals(right);

        public static explicit operator string(IpAllocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAllocationType other && Equals(other);
        public bool Equals(IpAllocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Selection of how the type evaluation is applied to the cluster calculation.
    /// </summary>
    [EnumType]
    public readonly struct ValidationThresholdGrouping : IEquatable<ValidationThresholdGrouping>
    {
        private readonly string _value;

        private ValidationThresholdGrouping(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ValidationThresholdGrouping PerCluster { get; } = new ValidationThresholdGrouping("PerCluster");
        public static ValidationThresholdGrouping PerRack { get; } = new ValidationThresholdGrouping("PerRack");

        public static bool operator ==(ValidationThresholdGrouping left, ValidationThresholdGrouping right) => left.Equals(right);
        public static bool operator !=(ValidationThresholdGrouping left, ValidationThresholdGrouping right) => !left.Equals(right);

        public static explicit operator string(ValidationThresholdGrouping value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ValidationThresholdGrouping other && Equals(other);
        public bool Equals(ValidationThresholdGrouping other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Selection of how the threshold should be evaluated.
    /// </summary>
    [EnumType]
    public readonly struct ValidationThresholdType : IEquatable<ValidationThresholdType>
    {
        private readonly string _value;

        private ValidationThresholdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ValidationThresholdType CountSuccess { get; } = new ValidationThresholdType("CountSuccess");
        public static ValidationThresholdType PercentSuccess { get; } = new ValidationThresholdType("PercentSuccess");

        public static bool operator ==(ValidationThresholdType left, ValidationThresholdType right) => left.Equals(right);
        public static bool operator !=(ValidationThresholdType left, ValidationThresholdType right) => !left.Equals(right);

        public static explicit operator string(ValidationThresholdType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ValidationThresholdType other && Equals(other);
        public bool Equals(ValidationThresholdType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
