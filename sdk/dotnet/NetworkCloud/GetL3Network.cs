// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    public static class GetL3Network
    {
        /// <summary>
        /// Get properties of the provided layer 3 (L3) network.
        /// API Version: 2022-12-12-preview.
        /// </summary>
        public static Task<GetL3NetworkResult> InvokeAsync(GetL3NetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetL3NetworkResult>("azure-native:networkcloud:getL3Network", args ?? new GetL3NetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Get properties of the provided layer 3 (L3) network.
        /// API Version: 2022-12-12-preview.
        /// </summary>
        public static Output<GetL3NetworkResult> Invoke(GetL3NetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetL3NetworkResult>("azure-native:networkcloud:getL3Network", args ?? new GetL3NetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetL3NetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the L3 network.
        /// </summary>
        [Input("l3NetworkName", required: true)]
        public string L3NetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetL3NetworkArgs()
        {
        }
        public static new GetL3NetworkArgs Empty => new GetL3NetworkArgs();
    }

    public sealed class GetL3NetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the L3 network.
        /// </summary>
        [Input("l3NetworkName", required: true)]
        public Input<string> L3NetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetL3NetworkInvokeArgs()
        {
        }
        public static new GetL3NetworkInvokeArgs Empty => new GetL3NetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetL3NetworkResult
    {
        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of the resource properties.
        /// </summary>
        public readonly Outputs.L3NetworkPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetL3NetworkResult(
            Outputs.ExtendedLocationResponse extendedLocation,

            string id,

            string location,

            string name,

            Outputs.L3NetworkPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
