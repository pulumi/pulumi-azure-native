// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    /// <summary>
    /// The details are specific to the Network Cloud use of the Hybrid AKS cluster.
    /// API Version: 2022-12-12-preview.
    /// Previous API Version: 2022-12-12-preview. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:networkcloud:HybridAksCluster")]
    public partial class HybridAksCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork.
        /// </summary>
        [Output("associatedNetworkIds")]
        public Output<ImmutableArray<string>> AssociatedNetworkIds { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the associated cloud services network.
        /// </summary>
        [Output("cloudServicesNetworkId")]
        public Output<string> CloudServicesNetworkId { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Network Cloud cluster hosting the Hybrid AKS cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The number of control plane node VMs.
        /// </summary>
        [Output("controlPlaneCount")]
        public Output<double> ControlPlaneCount { get; private set; } = null!;

        /// <summary>
        /// The list of node configurations detailing associated VMs that are part of the control plane nodes of this Hybrid AKS cluster.
        /// </summary>
        [Output("controlPlaneNodes")]
        public Output<ImmutableArray<Outputs.NodeConfigurationResponse>> ControlPlaneNodes { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the associated default CNI network.
        /// </summary>
        [Output("defaultCniNetworkId")]
        public Output<string> DefaultCniNetworkId { get; private set; } = null!;

        /// <summary>
        /// The more detailed status of this Hybrid AKS cluster.
        /// </summary>
        [Output("detailedStatus")]
        public Output<string> DetailedStatus { get; private set; } = null!;

        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        [Output("detailedStatusMessage")]
        public Output<string> DetailedStatusMessage { get; private set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Hybrid AKS cluster that this additional information is for.
        /// </summary>
        [Output("hybridAksProvisionedClusterId")]
        public Output<string> HybridAksProvisionedClusterId { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the Hybrid AKS cluster resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The resource IDs of volumes that are attached to the Hybrid AKS cluster.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<string>> Volumes { get; private set; } = null!;

        /// <summary>
        /// The number of worker node VMs.
        /// </summary>
        [Output("workerCount")]
        public Output<double> WorkerCount { get; private set; } = null!;

        /// <summary>
        /// The list of node configurations detailing associated VMs that are part of the worker nodes of this Hybrid AKS cluster.
        /// </summary>
        [Output("workerNodes")]
        public Output<ImmutableArray<Outputs.NodeConfigurationResponse>> WorkerNodes { get; private set; } = null!;


        /// <summary>
        /// Create a HybridAksCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HybridAksCluster(string name, HybridAksClusterArgs args, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud:HybridAksCluster", name, args ?? new HybridAksClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HybridAksCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:networkcloud:HybridAksCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:networkcloud/v20221212preview:HybridAksCluster"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HybridAksCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HybridAksCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new HybridAksCluster(name, id, options);
        }
    }

    public sealed class HybridAksClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("associatedNetworkIds", required: true)]
        private InputList<string>? _associatedNetworkIds;

        /// <summary>
        /// The list of resource IDs for the workload networks associated with the Hybrid AKS cluster. It can be any of l2Networks, l3Networks, or trunkedNetworks resources. This field will also contain one cloudServicesNetwork and one defaultCniNetwork.
        /// </summary>
        public InputList<string> AssociatedNetworkIds
        {
            get => _associatedNetworkIds ?? (_associatedNetworkIds = new InputList<string>());
            set => _associatedNetworkIds = value;
        }

        /// <summary>
        /// The number of control plane node VMs.
        /// </summary>
        [Input("controlPlaneCount", required: true)]
        public Input<double> ControlPlaneCount { get; set; } = null!;

        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// The name of the Hybrid AKS cluster.
        /// </summary>
        [Input("hybridAksClusterName")]
        public Input<string>? HybridAksClusterName { get; set; }

        /// <summary>
        /// The resource ID of the Hybrid AKS cluster that this additional information is for.
        /// </summary>
        [Input("hybridAksProvisionedClusterId", required: true)]
        public Input<string> HybridAksProvisionedClusterId { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of worker node VMs.
        /// </summary>
        [Input("workerCount", required: true)]
        public Input<double> WorkerCount { get; set; } = null!;

        public HybridAksClusterArgs()
        {
        }
        public static new HybridAksClusterArgs Empty => new HybridAksClusterArgs();
    }
}
