// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud
{
    public static class GetMetricsConfiguration
    {
        /// <summary>
        /// Get metrics configuration of the provided cluster.
        /// Azure REST API version: 2023-10-01-preview.
        /// 
        /// Other available API versions: 2023-07-01, 2024-06-01-preview.
        /// </summary>
        public static Task<GetMetricsConfigurationResult> InvokeAsync(GetMetricsConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricsConfigurationResult>("azure-native:networkcloud:getMetricsConfiguration", args ?? new GetMetricsConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Get metrics configuration of the provided cluster.
        /// Azure REST API version: 2023-10-01-preview.
        /// 
        /// Other available API versions: 2023-07-01, 2024-06-01-preview.
        /// </summary>
        public static Output<GetMetricsConfigurationResult> Invoke(GetMetricsConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricsConfigurationResult>("azure-native:networkcloud:getMetricsConfiguration", args ?? new GetMetricsConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricsConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the metrics configuration for the cluster.
        /// </summary>
        [Input("metricsConfigurationName", required: true)]
        public string MetricsConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMetricsConfigurationArgs()
        {
        }
        public static new GetMetricsConfigurationArgs Empty => new GetMetricsConfigurationArgs();
    }

    public sealed class GetMetricsConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the metrics configuration for the cluster.
        /// </summary>
        [Input("metricsConfigurationName", required: true)]
        public Input<string> MetricsConfigurationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMetricsConfigurationInvokeArgs()
        {
        }
        public static new GetMetricsConfigurationInvokeArgs Empty => new GetMetricsConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricsConfigurationResult
    {
        /// <summary>
        /// The interval in minutes by which metrics will be collected.
        /// </summary>
        public readonly double CollectionInterval;
        /// <summary>
        /// The more detailed status of the metrics configuration.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// The list of metrics that are available for the cluster but disabled at the moment.
        /// </summary>
        public readonly ImmutableArray<string> DisabledMetrics;
        /// <summary>
        /// The list of metric names that have been chosen to be enabled in addition to the core set of enabled metrics.
        /// </summary>
        public readonly ImmutableArray<string> EnabledMetrics;
        /// <summary>
        /// The extended location of the cluster associated with the resource.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the metrics configuration.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMetricsConfigurationResult(
            double collectionInterval,

            string detailedStatus,

            string detailedStatusMessage,

            ImmutableArray<string> disabledMetrics,

            ImmutableArray<string> enabledMetrics,

            Outputs.ExtendedLocationResponse extendedLocation,

            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            CollectionInterval = collectionInterval;
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            DisabledMetrics = disabledMetrics;
            EnabledMetrics = enabledMetrics;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
