// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetworkCloud.Outputs
{

    [OutputType]
    public sealed class VirtualMachinePropertiesResponse
    {
        /// <summary>
        /// The name of the administrator to which the ssh public keys will be added into the authorized keys.
        /// </summary>
        public readonly string AdminUsername;
        /// <summary>
        /// The resource ID of the bare metal machine the virtual machine has landed to.
        /// </summary>
        public readonly string BareMetalMachineId;
        /// <summary>
        /// Selects the boot method for the virtual machine.
        /// </summary>
        public readonly string? BootMethod;
        public readonly Outputs.NetworkAttachmentResponse CloudServicesNetworkAttachment;
        /// <summary>
        /// The resource ID of the cluster the virtual machine is created for.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The number of CPU cores in the virtual machine.
        /// </summary>
        public readonly double CpuCores;
        /// <summary>
        /// The more detailed status of the virtual machine.
        /// </summary>
        public readonly string DetailedStatus;
        /// <summary>
        /// The descriptive message about the current detailed status.
        /// </summary>
        public readonly string DetailedStatusMessage;
        /// <summary>
        /// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
        /// </summary>
        public readonly string? IsolateEmulatorThread;
        /// <summary>
        /// The memory size of the virtual machine in GB.
        /// </summary>
        public readonly double MemorySizeGB;
        /// <summary>
        /// The list of network attachments to the virtual machine.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkAttachmentResponse> NetworkAttachments;
        /// <summary>
        /// The Base64 encoded cloud-init network data.
        /// </summary>
        public readonly string? NetworkData;
        /// <summary>
        /// The scheduling hints for the virtual machine.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachinePlacementHintResponse> PlacementHints;
        /// <summary>
        /// The power state of the virtual machine.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// The provisioning state of the virtual machine.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.
        /// </summary>
        public readonly ImmutableArray<Outputs.SshPublicKeyResponse> SshPublicKeys;
        public readonly Outputs.StorageProfileResponse StorageProfile;
        /// <summary>
        /// The Base64 encoded cloud-init user data.
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
        /// </summary>
        public readonly string? VirtioInterface;
        /// <summary>
        /// The type of the device model to use.
        /// </summary>
        public readonly string? VmDeviceModel;
        /// <summary>
        /// The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.
        /// </summary>
        public readonly string VmImage;
        public readonly Outputs.ImageRepositoryCredentialsResponse? VmImageRepositoryCredentials;
        /// <summary>
        /// The resource IDs of volumes that are attached to the virtual machine.
        /// </summary>
        public readonly ImmutableArray<string> Volumes;

        [OutputConstructor]
        private VirtualMachinePropertiesResponse(
            string adminUsername,

            string bareMetalMachineId,

            string? bootMethod,

            Outputs.NetworkAttachmentResponse cloudServicesNetworkAttachment,

            string clusterId,

            double cpuCores,

            string detailedStatus,

            string detailedStatusMessage,

            string? isolateEmulatorThread,

            double memorySizeGB,

            ImmutableArray<Outputs.NetworkAttachmentResponse> networkAttachments,

            string? networkData,

            ImmutableArray<Outputs.VirtualMachinePlacementHintResponse> placementHints,

            string powerState,

            string provisioningState,

            ImmutableArray<Outputs.SshPublicKeyResponse> sshPublicKeys,

            Outputs.StorageProfileResponse storageProfile,

            string? userData,

            string? virtioInterface,

            string? vmDeviceModel,

            string vmImage,

            Outputs.ImageRepositoryCredentialsResponse? vmImageRepositoryCredentials,

            ImmutableArray<string> volumes)
        {
            AdminUsername = adminUsername;
            BareMetalMachineId = bareMetalMachineId;
            BootMethod = bootMethod;
            CloudServicesNetworkAttachment = cloudServicesNetworkAttachment;
            ClusterId = clusterId;
            CpuCores = cpuCores;
            DetailedStatus = detailedStatus;
            DetailedStatusMessage = detailedStatusMessage;
            IsolateEmulatorThread = isolateEmulatorThread;
            MemorySizeGB = memorySizeGB;
            NetworkAttachments = networkAttachments;
            NetworkData = networkData;
            PlacementHints = placementHints;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            SshPublicKeys = sshPublicKeys;
            StorageProfile = storageProfile;
            UserData = userData;
            VirtioInterface = virtioInterface;
            VmDeviceModel = vmDeviceModel;
            VmImage = vmImage;
            VmImageRepositoryCredentials = vmImageRepositoryCredentials;
            Volumes = volumes;
        }
    }
}
