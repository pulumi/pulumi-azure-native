// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.WebPubSub.V20211001
{
    /// <summary>
    /// A class represent a resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:webpubsub/v20211001:WebPubSub")]
    public partial class WebPubSub : Pulumi.CustomResource
    {
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Output("disableAadAuth")]
        public Output<bool?> DisableAadAuth { get; private set; } = null!;

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Output("disableLocalAuth")]
        public Output<bool?> DisableLocalAuth { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible IP of the resource.
        /// </summary>
        [Output("externalIP")]
        public Output<string> ExternalIP { get; private set; } = null!;

        /// <summary>
        /// FQDN of the service instance.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// Deprecated.
        /// </summary>
        [Output("hostNamePrefix")]
        public Output<string> HostNamePrefix { get; private set; } = null!;

        /// <summary>
        /// A class represent managed identities used for request and response
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Live trace configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Output("liveTraceConfiguration")]
        public Output<Outputs.LiveTraceConfigurationResponse?> LiveTraceConfiguration { get; private set; } = null!;

        /// <summary>
        /// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network ACLs for the resource
        /// </summary>
        [Output("networkACLs")]
        public Output<Outputs.WebPubSubNetworkACLsResponse?> NetworkACLs { get; private set; } = null!;

        /// <summary>
        /// Private endpoint connections to the resource.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Output("publicPort")]
        public Output<int> PublicPort { get; private set; } = null!;

        /// <summary>
        /// Resource log configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Output("resourceLogConfiguration")]
        public Output<Outputs.ResourceLogConfigurationResponse?> ResourceLogConfiguration { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Output("serverPort")]
        public Output<int> ServerPort { get; private set; } = null!;

        /// <summary>
        /// The list of shared private link resources.
        /// </summary>
        [Output("sharedPrivateLinkResources")]
        public Output<ImmutableArray<Outputs.SharedPrivateLinkResourceResponse>> SharedPrivateLinkResources { get; private set; } = null!;

        /// <summary>
        /// The billing information of the resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ResourceSkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// TLS settings for the resource
        /// </summary>
        [Output("tls")]
        public Output<Outputs.WebPubSubTlsSettingsResponse?> Tls { get; private set; } = null!;

        /// <summary>
        /// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a WebPubSub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebPubSub(string name, WebPubSubArgs args, CustomResourceOptions? options = null)
            : base("azure-native:webpubsub/v20211001:WebPubSub", name, args ?? new WebPubSubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebPubSub(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:webpubsub/v20211001:WebPubSub", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:webpubsub:WebPubSub"},
                    new Pulumi.Alias { Type = "azure-native:webpubsub/v20210401preview:WebPubSub"},
                    new Pulumi.Alias { Type = "azure-native:webpubsub/v20210601preview:WebPubSub"},
                    new Pulumi.Alias { Type = "azure-native:webpubsub/v20210901preview:WebPubSub"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebPubSub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebPubSub Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WebPubSub(name, id, options);
        }
    }

    public sealed class WebPubSubArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Input("disableAadAuth")]
        public Input<bool>? DisableAadAuth { get; set; }

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Input("disableLocalAuth")]
        public Input<bool>? DisableLocalAuth { get; set; }

        /// <summary>
        /// A class represent managed identities used for request and response
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Live trace configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Input("liveTraceConfiguration")]
        public Input<Inputs.LiveTraceConfigurationArgs>? LiveTraceConfiguration { get; set; }

        /// <summary>
        /// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Network ACLs for the resource
        /// </summary>
        [Input("networkACLs")]
        public Input<Inputs.WebPubSubNetworkACLsArgs>? NetworkACLs { get; set; }

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Resource log configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Input("resourceLogConfiguration")]
        public Input<Inputs.ResourceLogConfigurationArgs>? ResourceLogConfiguration { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// The billing information of the resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ResourceSkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// TLS settings for the resource
        /// </summary>
        [Input("tls")]
        public Input<Inputs.WebPubSubTlsSettingsArgs>? Tls { get; set; }

        public WebPubSubArgs()
        {
            DisableAadAuth = false;
            DisableLocalAuth = false;
            PublicNetworkAccess = "Enabled";
        }
    }
}
