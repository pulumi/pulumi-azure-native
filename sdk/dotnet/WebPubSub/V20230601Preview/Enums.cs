// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.WebPubSub.V20230601Preview
{
    /// <summary>
    /// Azure Networking ACL Action.
    /// </summary>
    [EnumType]
    public readonly struct ACLAction : IEquatable<ACLAction>
    {
        private readonly string _value;

        private ACLAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ACLAction Allow { get; } = new ACLAction("Allow");
        public static ACLAction Deny { get; } = new ACLAction("Deny");

        public static bool operator ==(ACLAction left, ACLAction right) => left.Equals(right);
        public static bool operator !=(ACLAction left, ACLAction right) => !left.Equals(right);

        public static explicit operator string(ACLAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ACLAction other && Equals(other);
        public bool Equals(ACLAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EventListenerEndpointDiscriminator : IEquatable<EventListenerEndpointDiscriminator>
    {
        private readonly string _value;

        private EventListenerEndpointDiscriminator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventListenerEndpointDiscriminator EventHub { get; } = new EventListenerEndpointDiscriminator("EventHub");

        public static bool operator ==(EventListenerEndpointDiscriminator left, EventListenerEndpointDiscriminator right) => left.Equals(right);
        public static bool operator !=(EventListenerEndpointDiscriminator left, EventListenerEndpointDiscriminator right) => !left.Equals(right);

        public static explicit operator string(EventListenerEndpointDiscriminator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventListenerEndpointDiscriminator other && Equals(other);
        public bool Equals(EventListenerEndpointDiscriminator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EventListenerFilterDiscriminator : IEquatable<EventListenerFilterDiscriminator>
    {
        private readonly string _value;

        private EventListenerFilterDiscriminator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventListenerFilterDiscriminator EventName { get; } = new EventListenerFilterDiscriminator("EventName");

        public static bool operator ==(EventListenerFilterDiscriminator left, EventListenerFilterDiscriminator right) => left.Equals(right);
        public static bool operator !=(EventListenerFilterDiscriminator left, EventListenerFilterDiscriminator right) => !left.Equals(right);

        public static explicit operator string(EventListenerFilterDiscriminator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventListenerFilterDiscriminator other && Equals(other);
        public bool Equals(EventListenerFilterDiscriminator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Represents the identity type: systemAssigned, userAssigned, None
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateLinkServiceConnectionStatus : IEquatable<PrivateLinkServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateLinkServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateLinkServiceConnectionStatus Pending { get; } = new PrivateLinkServiceConnectionStatus("Pending");
        public static PrivateLinkServiceConnectionStatus Approved { get; } = new PrivateLinkServiceConnectionStatus("Approved");
        public static PrivateLinkServiceConnectionStatus Rejected { get; } = new PrivateLinkServiceConnectionStatus("Rejected");
        public static PrivateLinkServiceConnectionStatus Disconnected { get; } = new PrivateLinkServiceConnectionStatus("Disconnected");

        public static bool operator ==(PrivateLinkServiceConnectionStatus left, PrivateLinkServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateLinkServiceConnectionStatus left, PrivateLinkServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateLinkServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateLinkServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateLinkServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the service
    /// </summary>
    [EnumType]
    public readonly struct ServiceKind : IEquatable<ServiceKind>
    {
        private readonly string _value;

        private ServiceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceKind WebPubSub { get; } = new ServiceKind("WebPubSub");
        public static ServiceKind SocketIO { get; } = new ServiceKind("SocketIO");

        public static bool operator ==(ServiceKind left, ServiceKind right) => left.Equals(right);
        public static bool operator !=(ServiceKind left, ServiceKind right) => !left.Equals(right);

        public static explicit operator string(ServiceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceKind other && Equals(other);
        public bool Equals(ServiceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Upstream auth type enum.
    /// </summary>
    [EnumType]
    public readonly struct UpstreamAuthType : IEquatable<UpstreamAuthType>
    {
        private readonly string _value;

        private UpstreamAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UpstreamAuthType None { get; } = new UpstreamAuthType("None");
        public static UpstreamAuthType ManagedIdentity { get; } = new UpstreamAuthType("ManagedIdentity");

        public static bool operator ==(UpstreamAuthType left, UpstreamAuthType right) => left.Equals(right);
        public static bool operator !=(UpstreamAuthType left, UpstreamAuthType right) => !left.Equals(right);

        public static explicit operator string(UpstreamAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpstreamAuthType other && Equals(other);
        public bool Equals(UpstreamAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The incoming request type to the service
    /// </summary>
    [EnumType]
    public readonly struct WebPubSubRequestType : IEquatable<WebPubSubRequestType>
    {
        private readonly string _value;

        private WebPubSubRequestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebPubSubRequestType ClientConnection { get; } = new WebPubSubRequestType("ClientConnection");
        public static WebPubSubRequestType ServerConnection { get; } = new WebPubSubRequestType("ServerConnection");
        public static WebPubSubRequestType RESTAPI { get; } = new WebPubSubRequestType("RESTAPI");
        public static WebPubSubRequestType Trace { get; } = new WebPubSubRequestType("Trace");

        public static bool operator ==(WebPubSubRequestType left, WebPubSubRequestType right) => left.Equals(right);
        public static bool operator !=(WebPubSubRequestType left, WebPubSubRequestType right) => !left.Equals(right);

        public static explicit operator string(WebPubSubRequestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebPubSubRequestType other && Equals(other);
        public bool Equals(WebPubSubRequestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional tier of this particular SKU. 'Standard' or 'Free'. 
    /// 
    /// `Basic` is deprecated, use `Standard` instead.
    /// </summary>
    [EnumType]
    public readonly struct WebPubSubSkuTier : IEquatable<WebPubSubSkuTier>
    {
        private readonly string _value;

        private WebPubSubSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebPubSubSkuTier Free { get; } = new WebPubSubSkuTier("Free");
        public static WebPubSubSkuTier Basic { get; } = new WebPubSubSkuTier("Basic");
        public static WebPubSubSkuTier Standard { get; } = new WebPubSubSkuTier("Standard");
        public static WebPubSubSkuTier Premium { get; } = new WebPubSubSkuTier("Premium");

        public static bool operator ==(WebPubSubSkuTier left, WebPubSubSkuTier right) => left.Equals(right);
        public static bool operator !=(WebPubSubSkuTier left, WebPubSubSkuTier right) => !left.Equals(right);

        public static explicit operator string(WebPubSubSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebPubSubSkuTier other && Equals(other);
        public bool Equals(WebPubSubSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
