// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.WebPubSub.V20240801Preview.Outputs
{

    /// <summary>
    /// Properties of event handler.
    /// </summary>
    [OutputType]
    public sealed class EventHandlerResponse
    {
        /// <summary>
        /// Upstream auth settings. If not set, no auth is used for upstream messages.
        /// </summary>
        public readonly Outputs.UpstreamAuthSettingsResponse? Auth;
        /// <summary>
        /// Gets or sets the list of system events.
        /// </summary>
        public readonly ImmutableArray<string> SystemEvents;
        /// <summary>
        /// Gets or sets the URL template for the event handler. The actual URL is calculated when the corresponding event is triggered. 
        /// The template supports predefined parameters syntax: `{event}`, `{hub}`, and KeyVault reference syntax `{@Microsoft.KeyVault(SecretUri=_your_secret_identifier_)}` 
        /// For example, if the template is `http://example.com/api/{event}`, when `connect` event is triggered, a POST request will be sent to the URL `http://example.com/chat/api/connect`.
        /// Note: Parameters are not allowed in the hostname of the URL, and curly brackets `{}` are reserved for parameter syntax only. If your URL path contains literal curly brackets, please URL-encode them to ensure proper handling.
        /// </summary>
        public readonly string UrlTemplate;
        /// <summary>
        /// Gets or sets the matching pattern for event names.
        /// There are 3 kinds of patterns supported:
        ///     1. "*", it matches any event name
        ///     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
        ///     3. A single event name, for example, "event1", it matches "event1"
        /// </summary>
        public readonly string? UserEventPattern;

        [OutputConstructor]
        private EventHandlerResponse(
            Outputs.UpstreamAuthSettingsResponse? auth,

            ImmutableArray<string> systemEvents,

            string urlTemplate,

            string? userEventPattern)
        {
            Auth = auth;
            SystemEvents = systemEvents;
            UrlTemplate = urlTemplate;
            UserEventPattern = userEventPattern;
        }
    }
}
