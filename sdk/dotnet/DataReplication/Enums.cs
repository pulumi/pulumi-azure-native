// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DataReplication
{
    /// <summary>
    /// Gets or sets the status.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointConnectionStatus : IEquatable<PrivateEndpointConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Approved Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Approved { get; } = new PrivateEndpointConnectionStatus("Approved");
        /// <summary>
        /// Disconnected Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Disconnected { get; } = new PrivateEndpointConnectionStatus("Disconnected");
        /// <summary>
        /// Pending Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Pending { get; } = new PrivateEndpointConnectionStatus("Pending");
        /// <summary>
        /// Rejected Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Rejected { get; } = new PrivateEndpointConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the type of vault.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationVaultType : IEquatable<ReplicationVaultType>
    {
        private readonly string _value;

        private ReplicationVaultType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationVaultType DisasterRecovery { get; } = new ReplicationVaultType("DisasterRecovery");
        public static ReplicationVaultType Migrate { get; } = new ReplicationVaultType("Migrate");

        public static bool operator ==(ReplicationVaultType left, ReplicationVaultType right) => left.Equals(right);
        public static bool operator !=(ReplicationVaultType left, ReplicationVaultType right) => !left.Equals(right);

        public static explicit operator string(ReplicationVaultType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationVaultType other && Equals(other);
        public bool Equals(ReplicationVaultType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the selection type of the NIC.
    /// </summary>
    [EnumType]
    public readonly struct VMNicSelection : IEquatable<VMNicSelection>
    {
        private readonly string _value;

        private VMNicSelection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VMNicSelection NotSelected { get; } = new VMNicSelection("NotSelected");
        public static VMNicSelection SelectedByUser { get; } = new VMNicSelection("SelectedByUser");
        public static VMNicSelection SelectedByDefault { get; } = new VMNicSelection("SelectedByDefault");
        public static VMNicSelection SelectedByUserOverride { get; } = new VMNicSelection("SelectedByUserOverride");

        public static bool operator ==(VMNicSelection left, VMNicSelection right) => left.Equals(right);
        public static bool operator !=(VMNicSelection left, VMNicSelection right) => !left.Equals(right);

        public static explicit operator string(VMNicSelection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMNicSelection other && Equals(other);
        public bool Equals(VMNicSelection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
