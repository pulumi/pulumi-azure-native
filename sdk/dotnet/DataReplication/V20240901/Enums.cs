// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DataReplication.V20240901
{
    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the status.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointConnectionStatus : IEquatable<PrivateEndpointConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Approved Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Approved { get; } = new PrivateEndpointConnectionStatus("Approved");
        /// <summary>
        /// Disconnected Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Disconnected { get; } = new PrivateEndpointConnectionStatus("Disconnected");
        /// <summary>
        /// Pending Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Pending { get; } = new PrivateEndpointConnectionStatus("Pending");
        /// <summary>
        /// Rejected Status.
        /// </summary>
        public static PrivateEndpointConnectionStatus Rejected { get; } = new PrivateEndpointConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the type of vault.
    /// </summary>
    [EnumType]
    public readonly struct ReplicationVaultType : IEquatable<ReplicationVaultType>
    {
        private readonly string _value;

        private ReplicationVaultType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disaster recovery vault.
        /// </summary>
        public static ReplicationVaultType DisasterRecovery { get; } = new ReplicationVaultType("DisasterRecovery");
        /// <summary>
        /// Migrate vault.
        /// </summary>
        public static ReplicationVaultType Migrate { get; } = new ReplicationVaultType("Migrate");

        public static bool operator ==(ReplicationVaultType left, ReplicationVaultType right) => left.Equals(right);
        public static bool operator !=(ReplicationVaultType left, ReplicationVaultType right) => !left.Equals(right);

        public static explicit operator string(ReplicationVaultType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationVaultType other && Equals(other);
        public bool Equals(ReplicationVaultType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the selection type of the NIC.
    /// </summary>
    [EnumType]
    public readonly struct VMNicSelection : IEquatable<VMNicSelection>
    {
        private readonly string _value;

        private VMNicSelection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Not Selected.
        /// </summary>
        public static VMNicSelection NotSelected { get; } = new VMNicSelection("NotSelected");
        /// <summary>
        /// Selected by user.
        /// </summary>
        public static VMNicSelection SelectedByUser { get; } = new VMNicSelection("SelectedByUser");
        /// <summary>
        /// Default selection by ASR.
        /// </summary>
        public static VMNicSelection SelectedByDefault { get; } = new VMNicSelection("SelectedByDefault");
        /// <summary>
        /// NIC configuration overridden by user. Differs from SelectedByUser in the sense that the legacy SelectedByUser is used both for explicit modification by user and implicit approval of user if the settings are used for TFO/FO. SelectedByUserOverride implies user overriding at least one of the configurations.
        /// </summary>
        public static VMNicSelection SelectedByUserOverride { get; } = new VMNicSelection("SelectedByUserOverride");

        public static bool operator ==(VMNicSelection left, VMNicSelection right) => left.Equals(right);
        public static bool operator !=(VMNicSelection left, VMNicSelection right) => !left.Equals(right);

        public static explicit operator string(VMNicSelection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMNicSelection other && Equals(other);
        public bool Equals(VMNicSelection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
