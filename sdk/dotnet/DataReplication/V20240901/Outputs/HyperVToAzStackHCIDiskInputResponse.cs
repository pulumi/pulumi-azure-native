// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataReplication.V20240901.Outputs
{

    /// <summary>
    /// HyperVToAzStack disk input.
    /// </summary>
    [OutputType]
    public sealed class HyperVToAzStackHCIDiskInputResponse
    {
        /// <summary>
        /// Gets or sets a value of disk block size.
        /// </summary>
        public readonly double? DiskBlockSize;
        /// <summary>
        /// Disk controller.
        /// </summary>
        public readonly Outputs.DiskControllerInputsResponse? DiskController;
        /// <summary>
        /// Gets or sets the type of the virtual hard disk, vhd or vhdx.
        /// </summary>
        public readonly string DiskFileFormat;
        /// <summary>
        /// Gets or sets the disk Id.
        /// </summary>
        public readonly string DiskId;
        /// <summary>
        /// Gets or sets a value of disk identifier.
        /// </summary>
        public readonly string? DiskIdentifier;
        /// <summary>
        /// Gets or sets a value of disk logical sector size.
        /// </summary>
        public readonly double? DiskLogicalSectorSize;
        /// <summary>
        /// Gets or sets a value of disk physical sector size.
        /// </summary>
        public readonly double? DiskPhysicalSectorSize;
        /// <summary>
        /// Gets or sets the disk size in GB.
        /// </summary>
        public readonly double DiskSizeGB;
        /// <summary>
        /// Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        /// </summary>
        public readonly bool? IsDynamic;
        /// <summary>
        /// Gets or sets a value indicating whether disk is os disk.
        /// </summary>
        public readonly bool IsOsDisk;
        /// <summary>
        /// Gets or sets the target storage account ARM Id.
        /// </summary>
        public readonly string? StorageContainerId;

        [OutputConstructor]
        private HyperVToAzStackHCIDiskInputResponse(
            double? diskBlockSize,

            Outputs.DiskControllerInputsResponse? diskController,

            string diskFileFormat,

            string diskId,

            string? diskIdentifier,

            double? diskLogicalSectorSize,

            double? diskPhysicalSectorSize,

            double diskSizeGB,

            bool? isDynamic,

            bool isOsDisk,

            string? storageContainerId)
        {
            DiskBlockSize = diskBlockSize;
            DiskController = diskController;
            DiskFileFormat = diskFileFormat;
            DiskId = diskId;
            DiskIdentifier = diskIdentifier;
            DiskLogicalSectorSize = diskLogicalSectorSize;
            DiskPhysicalSectorSize = diskPhysicalSectorSize;
            DiskSizeGB = diskSizeGB;
            IsDynamic = isDynamic;
            IsOsDisk = isOsDisk;
            StorageContainerId = storageContainerId;
        }
    }
}
