// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20180101
{
    /// <summary>
    /// Backend communication protocol.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Backend is a RESTful service.
        /// </summary>
        public static BackendProtocol Http { get; } = new BackendProtocol("http");
        /// <summary>
        /// The Backend is a SOAP service.
        /// </summary>
        public static BackendProtocol Soap { get; } = new BackendProtocol("soap");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of confirmation e-mail that will be sent to the newly created user.
    /// </summary>
    [EnumType]
    public readonly struct Confirmation : IEquatable<Confirmation>
    {
        private readonly string _value;

        private Confirmation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Send an e-mail to the user confirming they have successfully signed up.
        /// </summary>
        public static Confirmation Signup { get; } = new Confirmation("signup");
        /// <summary>
        /// Send an e-mail inviting the user to sign-up and complete registration.
        /// </summary>
        public static Confirmation Invite { get; } = new Confirmation("invite");

        public static bool operator ==(Confirmation left, Confirmation right) => left.Equals(right);
        public static bool operator !=(Confirmation left, Confirmation right) => !left.Equals(right);

        public static explicit operator string(Confirmation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Confirmation other && Equals(other);
        public bool Equals(Confirmation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Logger type.
    /// </summary>
    [EnumType]
    public readonly struct LoggerType : IEquatable<LoggerType>
    {
        private readonly string _value;

        private LoggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Event Hub as log destination.
        /// </summary>
        public static LoggerType AzureEventHub { get; } = new LoggerType("azureEventHub");
        /// <summary>
        /// Azure Application Insights as log destination.
        /// </summary>
        public static LoggerType ApplicationInsights { get; } = new LoggerType("applicationInsights");

        public static bool operator ==(LoggerType left, LoggerType right) => left.Equals(right);
        public static bool operator !=(LoggerType left, LoggerType right) => !left.Equals(right);

        public static explicit operator string(LoggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggerType other && Equals(other);
        public bool Equals(LoggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState Suspended { get; } = new SubscriptionState("suspended");
        public static SubscriptionState Active { get; } = new SubscriptionState("active");
        public static SubscriptionState Expired { get; } = new SubscriptionState("expired");
        public static SubscriptionState Submitted { get; } = new SubscriptionState("submitted");
        public static SubscriptionState Rejected { get; } = new SubscriptionState("rejected");
        public static SubscriptionState Cancelled { get; } = new SubscriptionState("cancelled");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
    /// </summary>
    [EnumType]
    public readonly struct UserState : IEquatable<UserState>
    {
        private readonly string _value;

        private UserState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User state is active.
        /// </summary>
        public static UserState Active { get; } = new UserState("active");
        /// <summary>
        /// User is blocked. Blocked users cannot authenticate at developer portal or call API.
        /// </summary>
        public static UserState Blocked { get; } = new UserState("blocked");
        /// <summary>
        /// User account is pending. Requires identity confirmation before it can be made active.
        /// </summary>
        public static UserState Pending { get; } = new UserState("pending");
        /// <summary>
        /// User account is closed. All identities and related entities are removed.
        /// </summary>
        public static UserState Deleted { get; } = new UserState("deleted");

        public static bool operator ==(UserState left, UserState right) => left.Equals(right);
        public static bool operator !=(UserState left, UserState right) => !left.Equals(right);

        public static explicit operator string(UserState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserState other && Equals(other);
        public bool Equals(UserState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
