// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20220901Preview
{
    /// <summary>
    /// Type of API.
    /// </summary>
    [EnumType]
    public readonly struct ApiType : IEquatable<ApiType>
    {
        private readonly string _value;

        private ApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApiType Http { get; } = new ApiType("http");
        public static ApiType Soap { get; } = new ApiType("soap");
        public static ApiType Websocket { get; } = new ApiType("websocket");
        public static ApiType Graphql { get; } = new ApiType("graphql");

        public static bool operator ==(ApiType left, ApiType right) => left.Equals(right);
        public static bool operator !=(ApiType left, ApiType right) => !left.Equals(right);

        public static explicit operator string(ApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiType other && Equals(other);
        public bool Equals(ApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Form of an authorization grant, which the client uses to request the access token.
    /// </summary>
    [EnumType]
    public readonly struct BearerTokenSendingMethods : IEquatable<BearerTokenSendingMethods>
    {
        private readonly string _value;

        private BearerTokenSendingMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Access token will be transmitted in the Authorization header using Bearer schema
        /// </summary>
        public static BearerTokenSendingMethods AuthorizationHeader { get; } = new BearerTokenSendingMethods("authorizationHeader");
        /// <summary>
        /// Access token will be transmitted as query parameters.
        /// </summary>
        public static BearerTokenSendingMethods Query { get; } = new BearerTokenSendingMethods("query");

        public static bool operator ==(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => left.Equals(right);
        public static bool operator !=(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => !left.Equals(right);

        public static explicit operator string(BearerTokenSendingMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BearerTokenSendingMethods other && Equals(other);
        public bool Equals(BearerTokenSendingMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the Content in which the API is getting imported.
    /// </summary>
    [EnumType]
    public readonly struct ContentFormat : IEquatable<ContentFormat>
    {
        private readonly string _value;

        private ContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is a WADL document.
        /// </summary>
        public static ContentFormat Wadl_xml { get; } = new ContentFormat("wadl-xml");
        /// <summary>
        /// The WADL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wadl_link_json { get; } = new ContentFormat("wadl-link-json");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
        /// </summary>
        public static ContentFormat Swagger_json { get; } = new ContentFormat("swagger-json");
        /// <summary>
        /// The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Swagger_link_json { get; } = new ContentFormat("swagger-link-json");
        /// <summary>
        /// The contents are inline and the document is a WSDL/Soap document.
        /// </summary>
        public static ContentFormat Wsdl { get; } = new ContentFormat("wsdl");
        /// <summary>
        /// The WSDL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wsdl_link { get; } = new ContentFormat("wsdl-link");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
        /// </summary>
        public static ContentFormat Openapi { get; } = new ContentFormat("openapi");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
        /// </summary>
        public static ContentFormat Openapi_json { get; } = new ContentFormat("openapi+json");
        /// <summary>
        /// The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_link { get; } = new ContentFormat("openapi-link");
        /// <summary>
        /// The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_json_link { get; } = new ContentFormat("openapi+json-link");
        /// <summary>
        /// The GraphQL API endpoint hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Graphql_link { get; } = new ContentFormat("graphql-link");

        public static bool operator ==(ContentFormat left, ContentFormat right) => left.Equals(right);
        public static bool operator !=(ContentFormat left, ContentFormat right) => !left.Equals(right);

        public static explicit operator string(ContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentFormat other && Equals(other);
        public bool Equals(ContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Group type.
    /// </summary>
    [EnumType]
    public readonly struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        private GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupType Custom { get; } = new GroupType("custom");
        public static GroupType System { get; } = new GroupType("system");
        public static GroupType External { get; } = new GroupType("external");

        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);

        public static explicit operator string(GroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupType other && Equals(other);
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the policyContent.
    /// </summary>
    [EnumType]
    public readonly struct PolicyContentFormat : IEquatable<PolicyContentFormat>
    {
        private readonly string _value;

        private PolicyContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is an XML document.
        /// </summary>
        public static PolicyContentFormat Xml { get; } = new PolicyContentFormat("xml");
        /// <summary>
        /// The policy XML document is hosted on a HTTP endpoint accessible from the API Management service.
        /// </summary>
        public static PolicyContentFormat Xml_link { get; } = new PolicyContentFormat("xml-link");
        /// <summary>
        /// The contents are inline and Content type is a non XML encoded policy document.
        /// </summary>
        public static PolicyContentFormat Rawxml { get; } = new PolicyContentFormat("rawxml");
        /// <summary>
        /// The policy document is not XML encoded and is hosted on a HTTP endpoint accessible from the API Management service.
        /// </summary>
        public static PolicyContentFormat Rawxml_link { get; } = new PolicyContentFormat("rawxml-link");

        public static bool operator ==(PolicyContentFormat left, PolicyContentFormat right) => left.Equals(right);
        public static bool operator !=(PolicyContentFormat left, PolicyContentFormat right) => !left.Equals(right);

        public static explicit operator string(PolicyContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyContentFormat other && Equals(other);
        public bool Equals(PolicyContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the policy fragment content.
    /// </summary>
    [EnumType]
    public readonly struct PolicyFragmentContentFormat : IEquatable<PolicyFragmentContentFormat>
    {
        private readonly string _value;

        private PolicyFragmentContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is an XML document.
        /// </summary>
        public static PolicyFragmentContentFormat Xml { get; } = new PolicyFragmentContentFormat("xml");
        /// <summary>
        /// The contents are inline and Content type is a non XML encoded policy document.
        /// </summary>
        public static PolicyFragmentContentFormat Rawxml { get; } = new PolicyFragmentContentFormat("rawxml");

        public static bool operator ==(PolicyFragmentContentFormat left, PolicyFragmentContentFormat right) => left.Equals(right);
        public static bool operator !=(PolicyFragmentContentFormat left, PolicyFragmentContentFormat right) => !left.Equals(right);

        public static explicit operator string(PolicyFragmentContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyFragmentContentFormat other && Equals(other);
        public bool Equals(PolicyFragmentContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
    /// </summary>
    [EnumType]
    public readonly struct ProductState : IEquatable<ProductState>
    {
        private readonly string _value;

        private ProductState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProductState NotPublished { get; } = new ProductState("notPublished");
        public static ProductState Published { get; } = new ProductState("published");

        public static bool operator ==(ProductState left, ProductState right) => left.Equals(right);
        public static bool operator !=(ProductState left, ProductState right) => !left.Equals(right);

        public static explicit operator string(ProductState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProductState other && Equals(other);
        public bool Equals(ProductState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol Http { get; } = new Protocol("http");
        public static Protocol Https { get; } = new Protocol("https");
        public static Protocol Ws { get; } = new Protocol("ws");
        public static Protocol Wss { get; } = new Protocol("wss");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schema Type. Immutable.
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// XML schema type.
        /// </summary>
        public static SchemaType Xml { get; } = new SchemaType("xml");
        /// <summary>
        /// Json schema type.
        /// </summary>
        public static SchemaType Json { get; } = new SchemaType("json");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of API to create. 
    ///  * `http` creates a REST API 
    ///  * `soap` creates a SOAP pass-through API  
    ///  * `websocket` creates websocket API 
    ///  * `graphql` creates GraphQL API.
    /// </summary>
    [EnumType]
    public readonly struct SoapApiType : IEquatable<SoapApiType>
    {
        private readonly string _value;

        private SoapApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Imports a SOAP API having a RESTful front end.
        /// </summary>
        public static SoapApiType SoapToRest { get; } = new SoapApiType("http");
        /// <summary>
        /// Imports the SOAP API having a SOAP front end.
        /// </summary>
        public static SoapApiType SoapPassThrough { get; } = new SoapApiType("soap");
        /// <summary>
        /// Imports the API having a Websocket front end.
        /// </summary>
        public static SoapApiType WebSocket { get; } = new SoapApiType("websocket");
        /// <summary>
        /// Imports the API having a GraphQL front end.
        /// </summary>
        public static SoapApiType GraphQL { get; } = new SoapApiType("graphql");

        public static bool operator ==(SoapApiType left, SoapApiType right) => left.Equals(right);
        public static bool operator !=(SoapApiType left, SoapApiType right) => !left.Equals(right);

        public static explicit operator string(SoapApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoapApiType other && Equals(other);
        public bool Equals(SoapApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState Suspended { get; } = new SubscriptionState("suspended");
        public static SubscriptionState Active { get; } = new SubscriptionState("active");
        public static SubscriptionState Expired { get; } = new SubscriptionState("expired");
        public static SubscriptionState Submitted { get; } = new SubscriptionState("submitted");
        public static SubscriptionState Rejected { get; } = new SubscriptionState("rejected");
        public static SubscriptionState Cancelled { get; } = new SubscriptionState("cancelled");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Strategy of translating required query parameters to template ones. By default has value 'template'. Possible values: 'template', 'query'
    /// </summary>
    [EnumType]
    public readonly struct TranslateRequiredQueryParametersConduct : IEquatable<TranslateRequiredQueryParametersConduct>
    {
        private readonly string _value;

        private TranslateRequiredQueryParametersConduct(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Translates required query parameters to template ones. Is a default value
        /// </summary>
        public static TranslateRequiredQueryParametersConduct Template { get; } = new TranslateRequiredQueryParametersConduct("template");
        /// <summary>
        /// Leaves required query parameters as they are (no translation done).
        /// </summary>
        public static TranslateRequiredQueryParametersConduct Query { get; } = new TranslateRequiredQueryParametersConduct("query");

        public static bool operator ==(TranslateRequiredQueryParametersConduct left, TranslateRequiredQueryParametersConduct right) => left.Equals(right);
        public static bool operator !=(TranslateRequiredQueryParametersConduct left, TranslateRequiredQueryParametersConduct right) => !left.Equals(right);

        public static explicit operator string(TranslateRequiredQueryParametersConduct value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TranslateRequiredQueryParametersConduct other && Equals(other);
        public bool Equals(TranslateRequiredQueryParametersConduct other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An value that determines where the API Version identifier will be located in a HTTP request.
    /// </summary>
    [EnumType]
    public readonly struct VersioningScheme : IEquatable<VersioningScheme>
    {
        private readonly string _value;

        private VersioningScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The API Version is passed in a path segment.
        /// </summary>
        public static VersioningScheme Segment { get; } = new VersioningScheme("Segment");
        /// <summary>
        /// The API Version is passed in a query parameter.
        /// </summary>
        public static VersioningScheme Query { get; } = new VersioningScheme("Query");
        /// <summary>
        /// The API Version is passed in a HTTP header.
        /// </summary>
        public static VersioningScheme Header { get; } = new VersioningScheme("Header");

        public static bool operator ==(VersioningScheme left, VersioningScheme right) => left.Equals(right);
        public static bool operator !=(VersioningScheme left, VersioningScheme right) => !left.Equals(right);

        public static explicit operator string(VersioningScheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersioningScheme other && Equals(other);
        public bool Equals(VersioningScheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
