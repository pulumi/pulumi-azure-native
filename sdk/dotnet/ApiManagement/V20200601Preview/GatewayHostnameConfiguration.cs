// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ApiManagement.V20200601Preview
{
    /// <summary>
    /// Gateway hostname configuration details.
    /// </summary>
    public partial class GatewayHostnameConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// Hostname value. Supports valid domain name, partial or full wildcard
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// Specifies if HTTP/2.0 is supported
        /// </summary>
        [Output("http2Enabled")]
        public Output<bool?> Http2Enabled { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Determines whether gateway requests client certificate
        /// </summary>
        [Output("negotiateClientCertificate")]
        public Output<bool?> NegotiateClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Specifies if TLS 1.0 is supported
        /// </summary>
        [Output("tls10Enabled")]
        public Output<bool?> Tls10Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies if TLS 1.1 is supported
        /// </summary>
        [Output("tls11Enabled")]
        public Output<bool?> Tls11Enabled { get; private set; } = null!;

        /// <summary>
        /// Resource type for API Management resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayHostnameConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayHostnameConfiguration(string name, GatewayHostnameConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:apimanagement/v20200601preview:GatewayHostnameConfiguration", name, args ?? new GatewayHostnameConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayHostnameConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:apimanagement/v20200601preview:GatewayHostnameConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/latest:GatewayHostnameConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20191201:GatewayHostnameConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20191201preview:GatewayHostnameConfiguration"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayHostnameConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayHostnameConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GatewayHostnameConfiguration(name, id, options);
        }
    }

    public sealed class GatewayHostnameConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of Certificate entity that will be used for TLS connection establishment
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        /// <summary>
        /// Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
        /// </summary>
        [Input("hcId", required: true)]
        public Input<string> HcId { get; set; } = null!;

        /// <summary>
        /// Hostname value. Supports valid domain name, partial or full wildcard
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Specifies if HTTP/2.0 is supported
        /// </summary>
        [Input("http2Enabled")]
        public Input<bool>? Http2Enabled { get; set; }

        /// <summary>
        /// Determines whether gateway requests client certificate
        /// </summary>
        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Specifies if TLS 1.0 is supported
        /// </summary>
        [Input("tls10Enabled")]
        public Input<bool>? Tls10Enabled { get; set; }

        /// <summary>
        /// Specifies if TLS 1.1 is supported
        /// </summary>
        [Input("tls11Enabled")]
        public Input<bool>? Tls11Enabled { get; set; }

        public GatewayHostnameConfigurationArgs()
        {
        }
    }
}
