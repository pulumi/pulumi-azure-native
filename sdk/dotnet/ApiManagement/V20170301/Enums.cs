// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ApiManagement.V20170301
{
    /// <summary>
    /// Type of API.
    /// </summary>
    [EnumType]
    public readonly struct ApiType : IEquatable<ApiType>
    {
        private readonly string _value;

        private ApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApiType Http { get; } = new ApiType("http");
        public static ApiType Soap { get; } = new ApiType("soap");

        public static bool operator ==(ApiType left, ApiType right) => left.Equals(right);
        public static bool operator !=(ApiType left, ApiType right) => !left.Equals(right);

        public static explicit operator string(ApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiType other && Equals(other);
        public bool Equals(ApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type. Currently the only supported type is 'SystemAssigned'.
    /// </summary>
    [EnumType]
    public readonly struct ApimIdentityType : IEquatable<ApimIdentityType>
    {
        private readonly string _value;

        private ApimIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApimIdentityType SystemAssigned { get; } = new ApimIdentityType("SystemAssigned");

        public static bool operator ==(ApimIdentityType left, ApimIdentityType right) => left.Equals(right);
        public static bool operator !=(ApimIdentityType left, ApimIdentityType right) => !left.Equals(right);

        public static explicit operator string(ApimIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApimIdentityType other && Equals(other);
        public bool Equals(ApimIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AuthorizationMethod : IEquatable<AuthorizationMethod>
    {
        private readonly string _value;

        private AuthorizationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthorizationMethod HEAD { get; } = new AuthorizationMethod("HEAD");
        public static AuthorizationMethod OPTIONS { get; } = new AuthorizationMethod("OPTIONS");
        public static AuthorizationMethod TRACE { get; } = new AuthorizationMethod("TRACE");
        public static AuthorizationMethod GET { get; } = new AuthorizationMethod("GET");
        public static AuthorizationMethod POST { get; } = new AuthorizationMethod("POST");
        public static AuthorizationMethod PUT { get; } = new AuthorizationMethod("PUT");
        public static AuthorizationMethod PATCH { get; } = new AuthorizationMethod("PATCH");
        public static AuthorizationMethod DELETE { get; } = new AuthorizationMethod("DELETE");

        public static bool operator ==(AuthorizationMethod left, AuthorizationMethod right) => left.Equals(right);
        public static bool operator !=(AuthorizationMethod left, AuthorizationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthorizationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthorizationMethod other && Equals(other);
        public bool Equals(AuthorizationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backend communication protocol.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Backend is a RESTful service.
        /// </summary>
        public static BackendProtocol Http { get; } = new BackendProtocol("http");
        /// <summary>
        /// The Backend is a SOAP service.
        /// </summary>
        public static BackendProtocol Soap { get; } = new BackendProtocol("soap");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BearerTokenSendingMethod : IEquatable<BearerTokenSendingMethod>
    {
        private readonly string _value;

        private BearerTokenSendingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BearerTokenSendingMethod AuthorizationHeader { get; } = new BearerTokenSendingMethod("authorizationHeader");
        public static BearerTokenSendingMethod Query { get; } = new BearerTokenSendingMethod("query");

        public static bool operator ==(BearerTokenSendingMethod left, BearerTokenSendingMethod right) => left.Equals(right);
        public static bool operator !=(BearerTokenSendingMethod left, BearerTokenSendingMethod right) => !left.Equals(right);

        public static explicit operator string(BearerTokenSendingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BearerTokenSendingMethod other && Equals(other);
        public bool Equals(BearerTokenSendingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ClientAuthenticationMethod : IEquatable<ClientAuthenticationMethod>
    {
        private readonly string _value;

        private ClientAuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Basic Client Authentication method.
        /// </summary>
        public static ClientAuthenticationMethod Basic { get; } = new ClientAuthenticationMethod("Basic");
        /// <summary>
        /// Body based Authentication method.
        /// </summary>
        public static ClientAuthenticationMethod Body { get; } = new ClientAuthenticationMethod("Body");

        public static bool operator ==(ClientAuthenticationMethod left, ClientAuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(ClientAuthenticationMethod left, ClientAuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(ClientAuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientAuthenticationMethod other && Equals(other);
        public bool Equals(ClientAuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of confirmation e-mail that will be sent to the newly created user.
    /// </summary>
    [EnumType]
    public readonly struct Confirmation : IEquatable<Confirmation>
    {
        private readonly string _value;

        private Confirmation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Send an e-mail to the user confirming they have successfully signed up.
        /// </summary>
        public static Confirmation Signup { get; } = new Confirmation("signup");
        /// <summary>
        /// Send an e-mail inviting the user to sign-up and complete registration.
        /// </summary>
        public static Confirmation Invite { get; } = new Confirmation("invite");

        public static bool operator ==(Confirmation left, Confirmation right) => left.Equals(right);
        public static bool operator !=(Confirmation left, Confirmation right) => !left.Equals(right);

        public static explicit operator string(Confirmation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Confirmation other && Equals(other);
        public bool Equals(Confirmation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the Content in which the API is getting imported.
    /// </summary>
    [EnumType]
    public readonly struct ContentFormat : IEquatable<ContentFormat>
    {
        private readonly string _value;

        private ContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is a WADL document.
        /// </summary>
        public static ContentFormat Wadl_xml { get; } = new ContentFormat("wadl-xml");
        /// <summary>
        /// The WADL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wadl_link_json { get; } = new ContentFormat("wadl-link-json");
        /// <summary>
        /// The contents are inline and Content Type is a OpenApi 2.0 Document.
        /// </summary>
        public static ContentFormat Swagger_json { get; } = new ContentFormat("swagger-json");
        /// <summary>
        /// The Open Api 2.0 document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Swagger_link_json { get; } = new ContentFormat("swagger-link-json");
        /// <summary>
        /// The contents are inline and the document is a WSDL/Soap document.
        /// </summary>
        public static ContentFormat Wsdl { get; } = new ContentFormat("wsdl");
        /// <summary>
        /// The WSDL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wsdl_link { get; } = new ContentFormat("wsdl-link");

        public static bool operator ==(ContentFormat left, ContentFormat right) => left.Equals(right);
        public static bool operator !=(ContentFormat left, ContentFormat right) => !left.Equals(right);

        public static explicit operator string(ContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentFormat other && Equals(other);
        public bool Equals(ContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GrantType : IEquatable<GrantType>
    {
        private readonly string _value;

        private GrantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
        /// </summary>
        public static GrantType AuthorizationCode { get; } = new GrantType("authorizationCode");
        /// <summary>
        /// Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
        /// </summary>
        public static GrantType @Implicit { get; } = new GrantType("implicit");
        /// <summary>
        /// Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
        /// </summary>
        public static GrantType ResourceOwnerPassword { get; } = new GrantType("resourceOwnerPassword");
        /// <summary>
        /// Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
        /// </summary>
        public static GrantType ClientCredentials { get; } = new GrantType("clientCredentials");

        public static bool operator ==(GrantType left, GrantType right) => left.Equals(right);
        public static bool operator !=(GrantType left, GrantType right) => !left.Equals(right);

        public static explicit operator string(GrantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GrantType other && Equals(other);
        public bool Equals(GrantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Group type.
    /// </summary>
    [EnumType]
    public readonly struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        private GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupType Custom { get; } = new GroupType("custom");
        public static GroupType System { get; } = new GroupType("system");
        public static GroupType External { get; } = new GroupType("external");

        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);

        public static explicit operator string(GroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupType other && Equals(other);
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Hostname type.
    /// </summary>
    [EnumType]
    public readonly struct HostnameType : IEquatable<HostnameType>
    {
        private readonly string _value;

        private HostnameType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostnameType Proxy { get; } = new HostnameType("Proxy");
        public static HostnameType Portal { get; } = new HostnameType("Portal");
        public static HostnameType Management { get; } = new HostnameType("Management");
        public static HostnameType Scm { get; } = new HostnameType("Scm");

        public static bool operator ==(HostnameType left, HostnameType right) => left.Equals(right);
        public static bool operator !=(HostnameType left, HostnameType right) => !left.Equals(right);

        public static explicit operator string(HostnameType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostnameType other && Equals(other);
        public bool Equals(HostnameType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identity Provider Type identifier.
    /// </summary>
    [EnumType]
    public readonly struct IdentityProviderType : IEquatable<IdentityProviderType>
    {
        private readonly string _value;

        private IdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Facebook as Identity provider.
        /// </summary>
        public static IdentityProviderType Facebook { get; } = new IdentityProviderType("facebook");
        /// <summary>
        /// Google as Identity provider.
        /// </summary>
        public static IdentityProviderType Google { get; } = new IdentityProviderType("google");
        /// <summary>
        /// Microsoft Live as Identity provider.
        /// </summary>
        public static IdentityProviderType Microsoft { get; } = new IdentityProviderType("microsoft");
        /// <summary>
        /// Twitter as Identity provider.
        /// </summary>
        public static IdentityProviderType Twitter { get; } = new IdentityProviderType("twitter");
        /// <summary>
        /// Azure Active Directory as Identity provider.
        /// </summary>
        public static IdentityProviderType Aad { get; } = new IdentityProviderType("aad");
        /// <summary>
        /// Azure Active Directory B2C as Identity provider.
        /// </summary>
        public static IdentityProviderType AadB2C { get; } = new IdentityProviderType("aadB2C");

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right) => left.Equals(right);
        public static bool operator !=(IdentityProviderType left, IdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderType other && Equals(other);
        public bool Equals(IdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Logger type.
    /// </summary>
    [EnumType]
    public readonly struct LoggerType : IEquatable<LoggerType>
    {
        private readonly string _value;

        private LoggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Event Hub as log destination.
        /// </summary>
        public static LoggerType AzureEventHub { get; } = new LoggerType("azureEventHub");
        /// <summary>
        /// Azure Application Insights as log destination.
        /// </summary>
        public static LoggerType ApplicationInsights { get; } = new LoggerType("applicationInsights");

        public static bool operator ==(LoggerType left, LoggerType right) => left.Equals(right);
        public static bool operator !=(LoggerType left, LoggerType right) => !left.Equals(right);

        public static explicit operator string(LoggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggerType other && Equals(other);
        public bool Equals(LoggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
    /// </summary>
    [EnumType]
    public readonly struct ProductState : IEquatable<ProductState>
    {
        private readonly string _value;

        private ProductState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProductState NotPublished { get; } = new ProductState("notPublished");
        public static ProductState Published { get; } = new ProductState("published");

        public static bool operator ==(ProductState left, ProductState right) => left.Equals(right);
        public static bool operator !=(ProductState left, ProductState right) => !left.Equals(right);

        public static explicit operator string(ProductState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProductState other && Equals(other);
        public bool Equals(ProductState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol Http { get; } = new Protocol("http");
        public static Protocol Https { get; } = new Protocol("https");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sampling type.
    /// </summary>
    [EnumType]
    public readonly struct SamplingType : IEquatable<SamplingType>
    {
        private readonly string _value;

        private SamplingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Fixed-rate sampling.
        /// </summary>
        public static SamplingType @Fixed { get; } = new SamplingType("fixed");
        /// <summary>
        /// Sampling with a dynamically adjustable rate.
        /// </summary>
        public static SamplingType Adaptive { get; } = new SamplingType("adaptive");

        public static bool operator ==(SamplingType left, SamplingType right) => left.Equals(right);
        public static bool operator !=(SamplingType left, SamplingType right) => !left.Equals(right);

        public static explicit operator string(SamplingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SamplingType other && Equals(other);
        public bool Equals(SamplingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the Sku.
    /// </summary>
    [EnumType]
    public readonly struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        private SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Developer SKU of Api Management.
        /// </summary>
        public static SkuType Developer { get; } = new SkuType("Developer");
        /// <summary>
        /// Standard SKU of Api Management.
        /// </summary>
        public static SkuType Standard { get; } = new SkuType("Standard");
        /// <summary>
        /// Premium SKU of Api Management.
        /// </summary>
        public static SkuType Premium { get; } = new SkuType("Premium");
        /// <summary>
        /// Basic SKU of Api Management.
        /// </summary>
        public static SkuType Basic { get; } = new SkuType("Basic");

        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);

        public static explicit operator string(SkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuType other && Equals(other);
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the issue.
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The issue is proposed.
        /// </summary>
        public static State Proposed { get; } = new State("proposed");
        /// <summary>
        /// The issue is opened.
        /// </summary>
        public static State Open { get; } = new State("open");
        /// <summary>
        /// The issue was removed.
        /// </summary>
        public static State Removed { get; } = new State("removed");
        /// <summary>
        /// The issue is now resolved.
        /// </summary>
        public static State Resolved { get; } = new State("resolved");
        /// <summary>
        /// The issue was closed.
        /// </summary>
        public static State Closed { get; } = new State("closed");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState Suspended { get; } = new SubscriptionState("suspended");
        public static SubscriptionState Active { get; } = new SubscriptionState("active");
        public static SubscriptionState Expired { get; } = new SubscriptionState("expired");
        public static SubscriptionState Submitted { get; } = new SubscriptionState("submitted");
        public static SubscriptionState Rejected { get; } = new SubscriptionState("rejected");
        public static SubscriptionState Cancelled { get; } = new SubscriptionState("cancelled");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
    /// </summary>
    [EnumType]
    public readonly struct UserState : IEquatable<UserState>
    {
        private readonly string _value;

        private UserState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User state is active.
        /// </summary>
        public static UserState Active { get; } = new UserState("active");
        /// <summary>
        /// User is blocked. Blocked users cannot authenticate at developer portal or call API.
        /// </summary>
        public static UserState Blocked { get; } = new UserState("blocked");
        /// <summary>
        /// User account is pending. Requires identity confirmation before it can be made active.
        /// </summary>
        public static UserState Pending { get; } = new UserState("pending");
        /// <summary>
        /// User account is closed. All identities and related entities are removed.
        /// </summary>
        public static UserState Deleted { get; } = new UserState("deleted");

        public static bool operator ==(UserState left, UserState right) => left.Equals(right);
        public static bool operator !=(UserState left, UserState right) => !left.Equals(right);

        public static explicit operator string(UserState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserState other && Equals(other);
        public bool Equals(UserState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An value that determines where the API Version identifer will be located in a HTTP request.
    /// </summary>
    [EnumType]
    public readonly struct VersioningScheme : IEquatable<VersioningScheme>
    {
        private readonly string _value;

        private VersioningScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The API Version is passed in a path segment.
        /// </summary>
        public static VersioningScheme Segment { get; } = new VersioningScheme("Segment");
        /// <summary>
        /// The API Version is passed in a query parameter.
        /// </summary>
        public static VersioningScheme Query { get; } = new VersioningScheme("Query");
        /// <summary>
        /// The API Version is passed in a HTTP header.
        /// </summary>
        public static VersioningScheme Header { get; } = new VersioningScheme("Header");

        public static bool operator ==(VersioningScheme left, VersioningScheme right) => left.Equals(right);
        public static bool operator !=(VersioningScheme left, VersioningScheme right) => !left.Equals(right);

        public static explicit operator string(VersioningScheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersioningScheme other && Equals(other);
        public bool Equals(VersioningScheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkType : IEquatable<VirtualNetworkType>
    {
        private readonly string _value;

        private VirtualNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The service is not part of any Virtual Network.
        /// </summary>
        public static VirtualNetworkType None { get; } = new VirtualNetworkType("None");
        /// <summary>
        /// The service is part of Virtual Network and it is accessible from Internet.
        /// </summary>
        public static VirtualNetworkType External { get; } = new VirtualNetworkType("External");
        /// <summary>
        /// The service is part of Virtual Network and it is only accessible from within the virtual network.
        /// </summary>
        public static VirtualNetworkType Internal { get; } = new VirtualNetworkType("Internal");

        public static bool operator ==(VirtualNetworkType left, VirtualNetworkType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkType left, VirtualNetworkType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkType other && Equals(other);
        public bool Equals(VirtualNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
