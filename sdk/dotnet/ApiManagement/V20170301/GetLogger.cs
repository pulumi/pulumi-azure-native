// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20170301
{
    public static class GetLogger
    {
        /// <summary>
        /// Gets the details of the logger specified by its identifier.
        /// </summary>
        public static Task<GetLoggerResult> InvokeAsync(GetLoggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoggerResult>("azure-native:apimanagement/v20170301:getLogger", args ?? new GetLoggerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the logger specified by its identifier.
        /// </summary>
        public static Output<GetLoggerResult> Invoke(GetLoggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggerResult>("azure-native:apimanagement/v20170301:getLogger", args ?? new GetLoggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Logger identifier. Must be unique in the API Management service instance.
        /// </summary>
        [Input("loggerid", required: true)]
        public string Loggerid { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetLoggerArgs()
        {
        }
        public static new GetLoggerArgs Empty => new GetLoggerArgs();
    }

    public sealed class GetLoggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Logger identifier. Must be unique in the API Management service instance.
        /// </summary>
        [Input("loggerid", required: true)]
        public Input<string> Loggerid { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetLoggerInvokeArgs()
        {
        }
        public static new GetLoggerInvokeArgs Empty => new GetLoggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoggerResult
    {
        /// <summary>
        /// The name and SendRule connection string of the event hub for azureEventHub logger.
        /// Instrumentation key for applicationInsights logger.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Credentials;
        /// <summary>
        /// Logger description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether records are buffered in the logger before publishing. Default is assumed to be true.
        /// </summary>
        public readonly bool? IsBuffered;
        /// <summary>
        /// Logger type.
        /// </summary>
        public readonly string LoggerType;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Sampling settings for an ApplicationInsights logger.
        /// </summary>
        public readonly Outputs.LoggerSamplingContractResponse? Sampling;
        /// <summary>
        /// Resource type for API Management resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLoggerResult(
            ImmutableDictionary<string, string> credentials,

            string? description,

            string id,

            bool? isBuffered,

            string loggerType,

            string name,

            Outputs.LoggerSamplingContractResponse? sampling,

            string type)
        {
            Credentials = credentials;
            Description = description;
            Id = id;
            IsBuffered = isBuffered;
            LoggerType = loggerType;
            Name = name;
            Sampling = sampling;
            Type = type;
        }
    }
}
