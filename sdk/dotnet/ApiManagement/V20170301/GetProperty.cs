// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20170301
{
    public static class GetProperty
    {
        /// <summary>
        /// Property details.
        /// </summary>
        public static Task<GetPropertyResult> InvokeAsync(GetPropertyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPropertyResult>("azure-native:apimanagement/v20170301:getProperty", args ?? new GetPropertyArgs(), options.WithDefaults());

        /// <summary>
        /// Property details.
        /// </summary>
        public static Output<GetPropertyResult> Invoke(GetPropertyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPropertyResult>("azure-native:apimanagement/v20170301:getProperty", args ?? new GetPropertyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPropertyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the property.
        /// </summary>
        [Input("propId", required: true)]
        public string PropId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetPropertyArgs()
        {
        }
        public static new GetPropertyArgs Empty => new GetPropertyArgs();
    }

    public sealed class GetPropertyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the property.
        /// </summary>
        [Input("propId", required: true)]
        public Input<string> PropId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetPropertyInvokeArgs()
        {
        }
        public static new GetPropertyInvokeArgs Empty => new GetPropertyInvokeArgs();
    }


    [OutputType]
    public sealed class GetPropertyResult
    {
        /// <summary>
        /// Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Determines whether the value is a secret and should be encrypted or not. Default value is false.
        /// </summary>
        public readonly bool? Secret;
        /// <summary>
        /// Optional tags that when provided can be used to filter the property list.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Resource type for API Management resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private GetPropertyResult(
            string displayName,

            string id,

            string name,

            bool? secret,

            ImmutableArray<string> tags,

            string type,

            string value)
        {
            DisplayName = displayName;
            Id = id;
            Name = name;
            Secret = secret;
            Tags = tags;
            Type = type;
            Value = value;
        }
    }
}
