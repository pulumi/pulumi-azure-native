// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20240501.Inputs
{

    /// <summary>
    /// The trip conditions of the circuit breaker
    /// </summary>
    public sealed class CircuitBreakerFailureConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The threshold for opening the circuit.
        /// </summary>
        [Input("count")]
        public Input<double>? Count { get; set; }

        [Input("errorReasons")]
        private InputList<string>? _errorReasons;

        /// <summary>
        /// The error reasons which are considered as failure.
        /// </summary>
        public InputList<string> ErrorReasons
        {
            get => _errorReasons ?? (_errorReasons = new InputList<string>());
            set => _errorReasons = value;
        }

        /// <summary>
        /// The interval during which the failures are counted.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The threshold for opening the circuit.
        /// </summary>
        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        [Input("statusCodeRanges")]
        private InputList<Inputs.FailureStatusCodeRangeArgs>? _statusCodeRanges;

        /// <summary>
        /// The status code ranges which are considered as failure.
        /// </summary>
        public InputList<Inputs.FailureStatusCodeRangeArgs> StatusCodeRanges
        {
            get => _statusCodeRanges ?? (_statusCodeRanges = new InputList<Inputs.FailureStatusCodeRangeArgs>());
            set => _statusCodeRanges = value;
        }

        public CircuitBreakerFailureConditionArgs()
        {
        }
        public static new CircuitBreakerFailureConditionArgs Empty => new CircuitBreakerFailureConditionArgs();
    }
}
