// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20240501
{
    /// <summary>
    /// Specifies for what type of messages sampling settings should not apply.
    /// </summary>
    [EnumType]
    public readonly struct AlwaysLog : IEquatable<AlwaysLog>
    {
        private readonly string _value;

        private AlwaysLog(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Always log all erroneous request regardless of sampling settings.
        /// </summary>
        public static AlwaysLog AllErrors { get; } = new AlwaysLog("allErrors");

        public static bool operator ==(AlwaysLog left, AlwaysLog right) => left.Equals(right);
        public static bool operator !=(AlwaysLog left, AlwaysLog right) => !left.Equals(right);

        public static explicit operator string(AlwaysLog value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlwaysLog other && Equals(other);
        public bool Equals(AlwaysLog other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the Sku.
    /// </summary>
    [EnumType]
    public readonly struct ApiGatewaySkuType : IEquatable<ApiGatewaySkuType>
    {
        private readonly string _value;

        private ApiGatewaySkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Standard SKU of the API gateway.
        /// </summary>
        public static ApiGatewaySkuType Standard { get; } = new ApiGatewaySkuType("Standard");
        /// <summary>
        /// Standard SKU of the API gateway to be used in Workspaces.
        /// </summary>
        public static ApiGatewaySkuType WorkspaceGatewayStandard { get; } = new ApiGatewaySkuType("WorkspaceGatewayStandard");
        /// <summary>
        /// Premium SKU of the API gateway to be used in Workspaces.
        /// </summary>
        public static ApiGatewaySkuType WorkspaceGatewayPremium { get; } = new ApiGatewaySkuType("WorkspaceGatewayPremium");

        public static bool operator ==(ApiGatewaySkuType left, ApiGatewaySkuType right) => left.Equals(right);
        public static bool operator !=(ApiGatewaySkuType left, ApiGatewaySkuType right) => !left.Equals(right);

        public static explicit operator string(ApiGatewaySkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiGatewaySkuType other && Equals(other);
        public bool Equals(ApiGatewaySkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of API.
    /// </summary>
    [EnumType]
    public readonly struct ApiType : IEquatable<ApiType>
    {
        private readonly string _value;

        private ApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApiType Http { get; } = new ApiType("http");
        public static ApiType Soap { get; } = new ApiType("soap");
        public static ApiType Websocket { get; } = new ApiType("websocket");
        public static ApiType Graphql { get; } = new ApiType("graphql");
        public static ApiType Odata { get; } = new ApiType("odata");
        public static ApiType Grpc { get; } = new ApiType("grpc");

        public static bool operator ==(ApiType left, ApiType right) => left.Equals(right);
        public static bool operator !=(ApiType left, ApiType right) => !left.Equals(right);

        public static explicit operator string(ApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiType other && Equals(other);
        public bool Equals(ApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
    /// </summary>
    [EnumType]
    public readonly struct ApimIdentityType : IEquatable<ApimIdentityType>
    {
        private readonly string _value;

        private ApimIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApimIdentityType SystemAssigned { get; } = new ApimIdentityType("SystemAssigned");
        public static ApimIdentityType UserAssigned { get; } = new ApimIdentityType("UserAssigned");
        public static ApimIdentityType SystemAssigned_UserAssigned { get; } = new ApimIdentityType("SystemAssigned, UserAssigned");
        public static ApimIdentityType None { get; } = new ApimIdentityType("None");

        public static bool operator ==(ApimIdentityType left, ApimIdentityType right) => left.Equals(right);
        public static bool operator !=(ApimIdentityType left, ApimIdentityType right) => !left.Equals(right);

        public static explicit operator string(ApimIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApimIdentityType other && Equals(other);
        public bool Equals(ApimIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of application which send the create user request. Default is legacy portal.
    /// </summary>
    [EnumType]
    public readonly struct AppType : IEquatable<AppType>
    {
        private readonly string _value;

        private AppType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User create request was sent by legacy developer portal.
        /// </summary>
        public static AppType Portal { get; } = new AppType("portal");
        /// <summary>
        /// User create request was sent by new developer portal.
        /// </summary>
        public static AppType DeveloperPortal { get; } = new AppType("developerPortal");

        public static bool operator ==(AppType left, AppType right) => left.Equals(right);
        public static bool operator !=(AppType left, AppType right) => !left.Equals(right);

        public static explicit operator string(AppType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppType other && Equals(other);
        public bool Equals(AppType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AuthorizationMethod : IEquatable<AuthorizationMethod>
    {
        private readonly string _value;

        private AuthorizationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthorizationMethod HEAD { get; } = new AuthorizationMethod("HEAD");
        public static AuthorizationMethod OPTIONS { get; } = new AuthorizationMethod("OPTIONS");
        public static AuthorizationMethod TRACE { get; } = new AuthorizationMethod("TRACE");
        public static AuthorizationMethod GET { get; } = new AuthorizationMethod("GET");
        public static AuthorizationMethod POST { get; } = new AuthorizationMethod("POST");
        public static AuthorizationMethod PUT { get; } = new AuthorizationMethod("PUT");
        public static AuthorizationMethod PATCH { get; } = new AuthorizationMethod("PATCH");
        public static AuthorizationMethod DELETE { get; } = new AuthorizationMethod("DELETE");

        public static bool operator ==(AuthorizationMethod left, AuthorizationMethod right) => left.Equals(right);
        public static bool operator !=(AuthorizationMethod left, AuthorizationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthorizationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthorizationMethod other && Equals(other);
        public bool Equals(AuthorizationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Authorization type options
    /// </summary>
    [EnumType]
    public readonly struct AuthorizationType : IEquatable<AuthorizationType>
    {
        private readonly string _value;

        private AuthorizationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// OAuth2 authorization type
        /// </summary>
        public static AuthorizationType OAuth2 { get; } = new AuthorizationType("OAuth2");

        public static bool operator ==(AuthorizationType left, AuthorizationType right) => left.Equals(right);
        public static bool operator !=(AuthorizationType left, AuthorizationType right) => !left.Equals(right);

        public static explicit operator string(AuthorizationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthorizationType other && Equals(other);
        public bool Equals(AuthorizationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backend communication protocol.
    /// </summary>
    [EnumType]
    public readonly struct BackendProtocol : IEquatable<BackendProtocol>
    {
        private readonly string _value;

        private BackendProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Backend is a RESTful service.
        /// </summary>
        public static BackendProtocol Http { get; } = new BackendProtocol("http");
        /// <summary>
        /// The Backend is a SOAP service.
        /// </summary>
        public static BackendProtocol Soap { get; } = new BackendProtocol("soap");

        public static bool operator ==(BackendProtocol left, BackendProtocol right) => left.Equals(right);
        public static bool operator !=(BackendProtocol left, BackendProtocol right) => !left.Equals(right);

        public static explicit operator string(BackendProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendProtocol other && Equals(other);
        public bool Equals(BackendProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the backend. A backend can be either Single or Pool.
    /// </summary>
    [EnumType]
    public readonly struct BackendType : IEquatable<BackendType>
    {
        private readonly string _value;

        private BackendType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// supports single backend
        /// </summary>
        public static BackendType Single { get; } = new BackendType("Single");
        /// <summary>
        /// supports pool backend
        /// </summary>
        public static BackendType Pool { get; } = new BackendType("Pool");

        public static bool operator ==(BackendType left, BackendType right) => left.Equals(right);
        public static bool operator !=(BackendType left, BackendType right) => !left.Equals(right);

        public static explicit operator string(BackendType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackendType other && Equals(other);
        public bool Equals(BackendType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BearerTokenSendingMethod : IEquatable<BearerTokenSendingMethod>
    {
        private readonly string _value;

        private BearerTokenSendingMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BearerTokenSendingMethod AuthorizationHeader { get; } = new BearerTokenSendingMethod("authorizationHeader");
        public static BearerTokenSendingMethod Query { get; } = new BearerTokenSendingMethod("query");

        public static bool operator ==(BearerTokenSendingMethod left, BearerTokenSendingMethod right) => left.Equals(right);
        public static bool operator !=(BearerTokenSendingMethod left, BearerTokenSendingMethod right) => !left.Equals(right);

        public static explicit operator string(BearerTokenSendingMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BearerTokenSendingMethod other && Equals(other);
        public bool Equals(BearerTokenSendingMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Form of an authorization grant, which the client uses to request the access token.
    /// </summary>
    [EnumType]
    public readonly struct BearerTokenSendingMethods : IEquatable<BearerTokenSendingMethods>
    {
        private readonly string _value;

        private BearerTokenSendingMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Access token will be transmitted in the Authorization header using Bearer schema
        /// </summary>
        public static BearerTokenSendingMethods AuthorizationHeader { get; } = new BearerTokenSendingMethods("authorizationHeader");
        /// <summary>
        /// Access token will be transmitted as query parameters.
        /// </summary>
        public static BearerTokenSendingMethods Query { get; } = new BearerTokenSendingMethods("query");

        public static bool operator ==(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => left.Equals(right);
        public static bool operator !=(BearerTokenSendingMethods left, BearerTokenSendingMethods right) => !left.Equals(right);

        public static explicit operator string(BearerTokenSendingMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BearerTokenSendingMethods other && Equals(other);
        public bool Equals(BearerTokenSendingMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Certificate Source.
    /// </summary>
    [EnumType]
    public readonly struct CertificateSource : IEquatable<CertificateSource>
    {
        private readonly string _value;

        private CertificateSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateSource Managed { get; } = new CertificateSource("Managed");
        public static CertificateSource KeyVault { get; } = new CertificateSource("KeyVault");
        public static CertificateSource Custom { get; } = new CertificateSource("Custom");
        public static CertificateSource BuiltIn { get; } = new CertificateSource("BuiltIn");

        public static bool operator ==(CertificateSource left, CertificateSource right) => left.Equals(right);
        public static bool operator !=(CertificateSource left, CertificateSource right) => !left.Equals(right);

        public static explicit operator string(CertificateSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateSource other && Equals(other);
        public bool Equals(CertificateSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Certificate Status.
    /// </summary>
    [EnumType]
    public readonly struct CertificateStatus : IEquatable<CertificateStatus>
    {
        private readonly string _value;

        private CertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateStatus Completed { get; } = new CertificateStatus("Completed");
        public static CertificateStatus Failed { get; } = new CertificateStatus("Failed");
        public static CertificateStatus InProgress { get; } = new CertificateStatus("InProgress");

        public static bool operator ==(CertificateStatus left, CertificateStatus right) => left.Equals(right);
        public static bool operator !=(CertificateStatus left, CertificateStatus right) => !left.Equals(right);

        public static explicit operator string(CertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateStatus other && Equals(other);
        public bool Equals(CertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ClientAuthenticationMethod : IEquatable<ClientAuthenticationMethod>
    {
        private readonly string _value;

        private ClientAuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Basic Client Authentication method.
        /// </summary>
        public static ClientAuthenticationMethod Basic { get; } = new ClientAuthenticationMethod("Basic");
        /// <summary>
        /// Body based Authentication method.
        /// </summary>
        public static ClientAuthenticationMethod Body { get; } = new ClientAuthenticationMethod("Body");

        public static bool operator ==(ClientAuthenticationMethod left, ClientAuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(ClientAuthenticationMethod left, ClientAuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(ClientAuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientAuthenticationMethod other && Equals(other);
        public bool Equals(ClientAuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of confirmation e-mail that will be sent to the newly created user.
    /// </summary>
    [EnumType]
    public readonly struct Confirmation : IEquatable<Confirmation>
    {
        private readonly string _value;

        private Confirmation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Send an e-mail to the user confirming they have successfully signed up.
        /// </summary>
        public static Confirmation Signup { get; } = new Confirmation("signup");
        /// <summary>
        /// Send an e-mail inviting the user to sign-up and complete registration.
        /// </summary>
        public static Confirmation Invite { get; } = new Confirmation("invite");

        public static bool operator ==(Confirmation left, Confirmation right) => left.Equals(right);
        public static bool operator !=(Confirmation left, Confirmation right) => !left.Equals(right);

        public static explicit operator string(Confirmation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Confirmation other && Equals(other);
        public bool Equals(Confirmation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the Content in which the API is getting imported. New formats can be added in the future
    /// </summary>
    [EnumType]
    public readonly struct ContentFormat : IEquatable<ContentFormat>
    {
        private readonly string _value;

        private ContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is a WADL document.
        /// </summary>
        public static ContentFormat Wadl_xml { get; } = new ContentFormat("wadl-xml");
        /// <summary>
        /// The WADL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wadl_link_json { get; } = new ContentFormat("wadl-link-json");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 2.0 JSON Document.
        /// </summary>
        public static ContentFormat Swagger_json { get; } = new ContentFormat("swagger-json");
        /// <summary>
        /// The OpenAPI 2.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Swagger_link_json { get; } = new ContentFormat("swagger-link-json");
        /// <summary>
        /// The contents are inline and the document is a WSDL/Soap document.
        /// </summary>
        public static ContentFormat Wsdl { get; } = new ContentFormat("wsdl");
        /// <summary>
        /// The WSDL document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Wsdl_link { get; } = new ContentFormat("wsdl-link");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 YAML Document.
        /// </summary>
        public static ContentFormat Openapi { get; } = new ContentFormat("openapi");
        /// <summary>
        /// The contents are inline and Content Type is a OpenAPI 3.0 JSON Document.
        /// </summary>
        public static ContentFormat Openapi_json { get; } = new ContentFormat("openapi+json");
        /// <summary>
        /// The OpenAPI 3.0 YAML document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_link { get; } = new ContentFormat("openapi-link");
        /// <summary>
        /// The OpenAPI 3.0 JSON document is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Openapi_json_link { get; } = new ContentFormat("openapi+json-link");
        /// <summary>
        /// The GraphQL API endpoint hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Graphql_link { get; } = new ContentFormat("graphql-link");
        /// <summary>
        /// The contents are inline and Content Type is a OData XML Document.
        /// </summary>
        public static ContentFormat Odata { get; } = new ContentFormat("odata");
        /// <summary>
        /// The OData metadata document hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Odata_link { get; } = new ContentFormat("odata-link");
        /// <summary>
        /// The contents are inline and Content Type is a gRPC protobuf file.
        /// </summary>
        public static ContentFormat Grpc { get; } = new ContentFormat("grpc");
        /// <summary>
        /// The gRPC protobuf file is hosted on a publicly accessible internet address.
        /// </summary>
        public static ContentFormat Grpc_link { get; } = new ContentFormat("grpc-link");

        public static bool operator ==(ContentFormat left, ContentFormat right) => left.Equals(right);
        public static bool operator !=(ContentFormat left, ContentFormat right) => !left.Equals(right);

        public static explicit operator string(ContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentFormat other && Equals(other);
        public bool Equals(ContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data masking mode.
    /// </summary>
    [EnumType]
    public readonly struct DataMaskingMode : IEquatable<DataMaskingMode>
    {
        private readonly string _value;

        private DataMaskingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Mask the value of an entity.
        /// </summary>
        public static DataMaskingMode Mask { get; } = new DataMaskingMode("Mask");
        /// <summary>
        /// Hide the presence of an entity.
        /// </summary>
        public static DataMaskingMode Hide { get; } = new DataMaskingMode("Hide");

        public static bool operator ==(DataMaskingMode left, DataMaskingMode right) => left.Equals(right);
        public static bool operator !=(DataMaskingMode left, DataMaskingMode right) => !left.Equals(right);

        public static explicit operator string(DataMaskingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataMaskingMode other && Equals(other);
        public bool Equals(DataMaskingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of developer portal in this API Management service.
    /// </summary>
    [EnumType]
    public readonly struct DeveloperPortalStatus : IEquatable<DeveloperPortalStatus>
    {
        private readonly string _value;

        private DeveloperPortalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Developer Portal is enabled for the service.
        /// </summary>
        public static DeveloperPortalStatus Enabled { get; } = new DeveloperPortalStatus("Enabled");
        /// <summary>
        /// Developer Portal is disabled for the service.
        /// </summary>
        public static DeveloperPortalStatus Disabled { get; } = new DeveloperPortalStatus("Disabled");

        public static bool operator ==(DeveloperPortalStatus left, DeveloperPortalStatus right) => left.Equals(right);
        public static bool operator !=(DeveloperPortalStatus left, DeveloperPortalStatus right) => !left.Equals(right);

        public static explicit operator string(DeveloperPortalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeveloperPortalStatus other && Equals(other);
        public bool Equals(DeveloperPortalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Purpose of debug credential.
    /// </summary>
    [EnumType]
    public readonly struct GatewayListDebugCredentialsContractPurpose : IEquatable<GatewayListDebugCredentialsContractPurpose>
    {
        private readonly string _value;

        private GatewayListDebugCredentialsContractPurpose(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The tracing purpose.
        /// </summary>
        public static GatewayListDebugCredentialsContractPurpose Tracing { get; } = new GatewayListDebugCredentialsContractPurpose("tracing");

        public static bool operator ==(GatewayListDebugCredentialsContractPurpose left, GatewayListDebugCredentialsContractPurpose right) => left.Equals(right);
        public static bool operator !=(GatewayListDebugCredentialsContractPurpose left, GatewayListDebugCredentialsContractPurpose right) => !left.Equals(right);

        public static explicit operator string(GatewayListDebugCredentialsContractPurpose value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayListDebugCredentialsContractPurpose other && Equals(other);
        public bool Equals(GatewayListDebugCredentialsContractPurpose other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GrantType : IEquatable<GrantType>
    {
        private readonly string _value;

        private GrantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authorization Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.1.
        /// </summary>
        public static GrantType AuthorizationCode { get; } = new GrantType("authorizationCode");
        /// <summary>
        /// Implicit Code Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.2.
        /// </summary>
        public static GrantType @Implicit { get; } = new GrantType("implicit");
        /// <summary>
        /// Resource Owner Password Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.3.
        /// </summary>
        public static GrantType ResourceOwnerPassword { get; } = new GrantType("resourceOwnerPassword");
        /// <summary>
        /// Client Credentials Grant flow as described https://tools.ietf.org/html/rfc6749#section-4.4.
        /// </summary>
        public static GrantType ClientCredentials { get; } = new GrantType("clientCredentials");

        public static bool operator ==(GrantType left, GrantType right) => left.Equals(right);
        public static bool operator !=(GrantType left, GrantType right) => !left.Equals(right);

        public static explicit operator string(GrantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GrantType other && Equals(other);
        public bool Equals(GrantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Group type.
    /// </summary>
    [EnumType]
    public readonly struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        private GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupType Custom { get; } = new GroupType("custom");
        public static GroupType System { get; } = new GroupType("system");
        public static GroupType External { get; } = new GroupType("external");

        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);

        public static explicit operator string(GroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupType other && Equals(other);
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Hostname type.
    /// </summary>
    [EnumType]
    public readonly struct HostnameType : IEquatable<HostnameType>
    {
        private readonly string _value;

        private HostnameType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostnameType Proxy { get; } = new HostnameType("Proxy");
        public static HostnameType Portal { get; } = new HostnameType("Portal");
        public static HostnameType Management { get; } = new HostnameType("Management");
        public static HostnameType Scm { get; } = new HostnameType("Scm");
        public static HostnameType DeveloperPortal { get; } = new HostnameType("DeveloperPortal");
        public static HostnameType ConfigurationApi { get; } = new HostnameType("ConfigurationApi");

        public static bool operator ==(HostnameType left, HostnameType right) => left.Equals(right);
        public static bool operator !=(HostnameType left, HostnameType right) => !left.Equals(right);

        public static explicit operator string(HostnameType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostnameType other && Equals(other);
        public bool Equals(HostnameType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets correlation protocol to use for Application Insights diagnostics.
    /// </summary>
    [EnumType]
    public readonly struct HttpCorrelationProtocol : IEquatable<HttpCorrelationProtocol>
    {
        private readonly string _value;

        private HttpCorrelationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Do not read and inject correlation headers.
        /// </summary>
        public static HttpCorrelationProtocol None { get; } = new HttpCorrelationProtocol("None");
        /// <summary>
        /// Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
        /// </summary>
        public static HttpCorrelationProtocol Legacy { get; } = new HttpCorrelationProtocol("Legacy");
        /// <summary>
        /// Inject Trace Context headers. See https://w3c.github.io/trace-context.
        /// </summary>
        public static HttpCorrelationProtocol W3C { get; } = new HttpCorrelationProtocol("W3C");

        public static bool operator ==(HttpCorrelationProtocol left, HttpCorrelationProtocol right) => left.Equals(right);
        public static bool operator !=(HttpCorrelationProtocol left, HttpCorrelationProtocol right) => !left.Equals(right);

        public static explicit operator string(HttpCorrelationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpCorrelationProtocol other && Equals(other);
        public bool Equals(HttpCorrelationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identity Provider Type identifier.
    /// </summary>
    [EnumType]
    public readonly struct IdentityProviderType : IEquatable<IdentityProviderType>
    {
        private readonly string _value;

        private IdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Facebook as Identity provider.
        /// </summary>
        public static IdentityProviderType Facebook { get; } = new IdentityProviderType("facebook");
        /// <summary>
        /// Google as Identity provider.
        /// </summary>
        public static IdentityProviderType Google { get; } = new IdentityProviderType("google");
        /// <summary>
        /// Microsoft Live as Identity provider.
        /// </summary>
        public static IdentityProviderType Microsoft { get; } = new IdentityProviderType("microsoft");
        /// <summary>
        /// Twitter as Identity provider.
        /// </summary>
        public static IdentityProviderType Twitter { get; } = new IdentityProviderType("twitter");
        /// <summary>
        /// Azure Active Directory as Identity provider.
        /// </summary>
        public static IdentityProviderType Aad { get; } = new IdentityProviderType("aad");
        /// <summary>
        /// Azure Active Directory B2C as Identity provider.
        /// </summary>
        public static IdentityProviderType AadB2C { get; } = new IdentityProviderType("aadB2C");

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right) => left.Equals(right);
        public static bool operator !=(IdentityProviderType left, IdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderType other && Equals(other);
        public bool Equals(IdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Key to be used to generate token for user.
    /// </summary>
    [EnumType]
    public readonly struct KeyType : IEquatable<KeyType>
    {
        private readonly string _value;

        private KeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyType Primary { get; } = new KeyType("primary");
        public static KeyType Secondary { get; } = new KeyType("secondary");

        public static bool operator ==(KeyType left, KeyType right) => left.Equals(right);
        public static bool operator !=(KeyType left, KeyType right) => !left.Equals(right);

        public static explicit operator string(KeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyType other && Equals(other);
        public bool Equals(KeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indication whether or not the legacy Configuration API (v1) should be exposed on the API Management service. Value is optional but must be 'Enabled' or 'Disabled'. If 'Disabled', legacy Configuration API (v1) will not be available for self-hosted gateways. Default value is 'Enabled'
    /// </summary>
    [EnumType]
    public readonly struct LegacyApiState : IEquatable<LegacyApiState>
    {
        private readonly string _value;

        private LegacyApiState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Legacy Configuration API (v1) is enabled for the service and self-hosted gateways can connect to it.
        /// </summary>
        public static LegacyApiState Enabled { get; } = new LegacyApiState("Enabled");
        /// <summary>
        /// Legacy Configuration API (v1) is disabled for the service and self-hosted gateways can not connect to it.
        /// </summary>
        public static LegacyApiState Disabled { get; } = new LegacyApiState("Disabled");

        public static bool operator ==(LegacyApiState left, LegacyApiState right) => left.Equals(right);
        public static bool operator !=(LegacyApiState left, LegacyApiState right) => !left.Equals(right);

        public static explicit operator string(LegacyApiState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LegacyApiState other && Equals(other);
        public bool Equals(LegacyApiState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of legacy portal in the API Management service.
    /// </summary>
    [EnumType]
    public readonly struct LegacyPortalStatus : IEquatable<LegacyPortalStatus>
    {
        private readonly string _value;

        private LegacyPortalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Legacy Portal is enabled for the service.
        /// </summary>
        public static LegacyPortalStatus Enabled { get; } = new LegacyPortalStatus("Enabled");
        /// <summary>
        /// Legacy Portal is disabled for the service.
        /// </summary>
        public static LegacyPortalStatus Disabled { get; } = new LegacyPortalStatus("Disabled");

        public static bool operator ==(LegacyPortalStatus left, LegacyPortalStatus right) => left.Equals(right);
        public static bool operator !=(LegacyPortalStatus left, LegacyPortalStatus right) => !left.Equals(right);

        public static explicit operator string(LegacyPortalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LegacyPortalStatus other && Equals(other);
        public bool Equals(LegacyPortalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Logger type.
    /// </summary>
    [EnumType]
    public readonly struct LoggerType : IEquatable<LoggerType>
    {
        private readonly string _value;

        private LoggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Event Hub as log destination.
        /// </summary>
        public static LoggerType AzureEventHub { get; } = new LoggerType("azureEventHub");
        /// <summary>
        /// Azure Application Insights as log destination.
        /// </summary>
        public static LoggerType ApplicationInsights { get; } = new LoggerType("applicationInsights");
        /// <summary>
        /// Azure Monitor
        /// </summary>
        public static LoggerType AzureMonitor { get; } = new LoggerType("azureMonitor");

        public static bool operator ==(LoggerType left, LoggerType right) => left.Equals(right);
        public static bool operator !=(LoggerType left, LoggerType right) => !left.Equals(right);

        public static explicit operator string(LoggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggerType other && Equals(other);
        public bool Equals(LoggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Property can be used to enable NAT Gateway for this API Management service.
    /// </summary>
    [EnumType]
    public readonly struct NatGatewayState : IEquatable<NatGatewayState>
    {
        private readonly string _value;

        private NatGatewayState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Nat Gateway is enabled for the service.
        /// </summary>
        public static NatGatewayState Enabled { get; } = new NatGatewayState("Enabled");
        /// <summary>
        /// Nat Gateway is disabled for the service.
        /// </summary>
        public static NatGatewayState Disabled { get; } = new NatGatewayState("Disabled");

        public static bool operator ==(NatGatewayState left, NatGatewayState right) => left.Equals(right);
        public static bool operator !=(NatGatewayState left, NatGatewayState right) => !left.Equals(right);

        public static explicit operator string(NatGatewayState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NatGatewayState other && Equals(other);
        public bool Equals(NatGatewayState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OAuth2 grant type options
    /// </summary>
    [EnumType]
    public readonly struct OAuth2GrantType : IEquatable<OAuth2GrantType>
    {
        private readonly string _value;

        private OAuth2GrantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authorization Code grant
        /// </summary>
        public static OAuth2GrantType AuthorizationCode { get; } = new OAuth2GrantType("AuthorizationCode");
        /// <summary>
        /// Client Credential grant
        /// </summary>
        public static OAuth2GrantType ClientCredentials { get; } = new OAuth2GrantType("ClientCredentials");

        public static bool operator ==(OAuth2GrantType left, OAuth2GrantType right) => left.Equals(right);
        public static bool operator !=(OAuth2GrantType left, OAuth2GrantType right) => !left.Equals(right);

        public static explicit operator string(OAuth2GrantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OAuth2GrantType other && Equals(other);
        public bool Equals(OAuth2GrantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the Operation Name for Application Insights telemetries. Default is Name.
    /// </summary>
    [EnumType]
    public readonly struct OperationNameFormat : IEquatable<OperationNameFormat>
    {
        private readonly string _value;

        private OperationNameFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// API_NAME;rev=API_REVISION - OPERATION_NAME
        /// </summary>
        public static OperationNameFormat Name { get; } = new OperationNameFormat("Name");
        /// <summary>
        /// HTTP_VERB URL
        /// </summary>
        public static OperationNameFormat Url { get; } = new OperationNameFormat("Url");

        public static bool operator ==(OperationNameFormat left, OperationNameFormat right) => left.Equals(right);
        public static bool operator !=(OperationNameFormat left, OperationNameFormat right) => !left.Equals(right);

        public static explicit operator string(OperationNameFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationNameFormat other && Equals(other);
        public bool Equals(OperationNameFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the policyContent.
    /// </summary>
    [EnumType]
    public readonly struct PolicyContentFormat : IEquatable<PolicyContentFormat>
    {
        private readonly string _value;

        private PolicyContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is an XML document.
        /// </summary>
        public static PolicyContentFormat Xml { get; } = new PolicyContentFormat("xml");
        /// <summary>
        /// The policy XML document is hosted on a HTTP endpoint accessible from the API Management service.
        /// </summary>
        public static PolicyContentFormat Xml_link { get; } = new PolicyContentFormat("xml-link");
        /// <summary>
        /// The contents are inline and Content type is a non XML encoded policy document.
        /// </summary>
        public static PolicyContentFormat Rawxml { get; } = new PolicyContentFormat("rawxml");
        /// <summary>
        /// The policy document is not XML encoded and is hosted on a HTTP endpoint accessible from the API Management service.
        /// </summary>
        public static PolicyContentFormat Rawxml_link { get; } = new PolicyContentFormat("rawxml-link");

        public static bool operator ==(PolicyContentFormat left, PolicyContentFormat right) => left.Equals(right);
        public static bool operator !=(PolicyContentFormat left, PolicyContentFormat right) => !left.Equals(right);

        public static explicit operator string(PolicyContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyContentFormat other && Equals(other);
        public bool Equals(PolicyContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the policy fragment content.
    /// </summary>
    [EnumType]
    public readonly struct PolicyFragmentContentFormat : IEquatable<PolicyFragmentContentFormat>
    {
        private readonly string _value;

        private PolicyFragmentContentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The contents are inline and Content type is an XML document.
        /// </summary>
        public static PolicyFragmentContentFormat Xml { get; } = new PolicyFragmentContentFormat("xml");
        /// <summary>
        /// The contents are inline and Content type is a non XML encoded policy document.
        /// </summary>
        public static PolicyFragmentContentFormat Rawxml { get; } = new PolicyFragmentContentFormat("rawxml");

        public static bool operator ==(PolicyFragmentContentFormat left, PolicyFragmentContentFormat right) => left.Equals(right);
        public static bool operator !=(PolicyFragmentContentFormat left, PolicyFragmentContentFormat right) => !left.Equals(right);

        public static explicit operator string(PolicyFragmentContentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyFragmentContentFormat other && Equals(other);
        public bool Equals(PolicyFragmentContentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if base policy should be enforced for the policy document.
    /// </summary>
    [EnumType]
    public readonly struct PolicyRestrictionRequireBase : IEquatable<PolicyRestrictionRequireBase>
    {
        private readonly string _value;

        private PolicyRestrictionRequireBase(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The policy is required to have base policy
        /// </summary>
        public static PolicyRestrictionRequireBase @True { get; } = new PolicyRestrictionRequireBase("true");
        /// <summary>
        /// The policy does not require to have base policy
        /// </summary>
        public static PolicyRestrictionRequireBase @False { get; } = new PolicyRestrictionRequireBase("false");

        public static bool operator ==(PolicyRestrictionRequireBase left, PolicyRestrictionRequireBase right) => left.Equals(right);
        public static bool operator !=(PolicyRestrictionRequireBase left, PolicyRestrictionRequireBase right) => !left.Equals(right);

        public static explicit operator string(PolicyRestrictionRequireBase value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyRestrictionRequireBase other && Equals(other);
        public bool Equals(PolicyRestrictionRequireBase other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
    /// </summary>
    [EnumType]
    public readonly struct ProductState : IEquatable<ProductState>
    {
        private readonly string _value;

        private ProductState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProductState NotPublished { get; } = new ProductState("notPublished");
        public static ProductState Published { get; } = new ProductState("published");

        public static bool operator ==(ProductState left, ProductState right) => left.Equals(right);
        public static bool operator !=(ProductState left, ProductState right) => !left.Equals(right);

        public static explicit operator string(ProductState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProductState other && Equals(other);
        public bool Equals(ProductState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol Http { get; } = new Protocol("http");
        public static Protocol Https { get; } = new Protocol("https");
        public static Protocol Ws { get; } = new Protocol("ws");
        public static Protocol Wss { get; } = new Protocol("wss");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provisioning state.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Created { get; } = new ProvisioningState("created");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sampling type.
    /// </summary>
    [EnumType]
    public readonly struct SamplingType : IEquatable<SamplingType>
    {
        private readonly string _value;

        private SamplingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Fixed-rate sampling.
        /// </summary>
        public static SamplingType @Fixed { get; } = new SamplingType("fixed");

        public static bool operator ==(SamplingType left, SamplingType right) => left.Equals(right);
        public static bool operator !=(SamplingType left, SamplingType right) => !left.Equals(right);

        public static explicit operator string(SamplingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SamplingType other && Equals(other);
        public bool Equals(SamplingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schema Type. Immutable.
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// XML schema type.
        /// </summary>
        public static SchemaType Xml { get; } = new SchemaType("xml");
        /// <summary>
        /// Json schema type.
        /// </summary>
        public static SchemaType Json { get; } = new SchemaType("json");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the Sku.
    /// </summary>
    [EnumType]
    public readonly struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        private SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Developer SKU of Api Management.
        /// </summary>
        public static SkuType Developer { get; } = new SkuType("Developer");
        /// <summary>
        /// Standard SKU of Api Management.
        /// </summary>
        public static SkuType Standard { get; } = new SkuType("Standard");
        /// <summary>
        /// Premium SKU of Api Management.
        /// </summary>
        public static SkuType Premium { get; } = new SkuType("Premium");
        /// <summary>
        /// Basic SKU of Api Management.
        /// </summary>
        public static SkuType Basic { get; } = new SkuType("Basic");
        /// <summary>
        /// Consumption SKU of Api Management.
        /// </summary>
        public static SkuType Consumption { get; } = new SkuType("Consumption");
        /// <summary>
        /// Isolated SKU of Api Management.
        /// </summary>
        public static SkuType Isolated { get; } = new SkuType("Isolated");
        /// <summary>
        /// BasicV2 SKU of Api Management.
        /// </summary>
        public static SkuType BasicV2 { get; } = new SkuType("BasicV2");
        /// <summary>
        /// StandardV2 SKU of Api Management.
        /// </summary>
        public static SkuType StandardV2 { get; } = new SkuType("StandardV2");

        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);

        public static explicit operator string(SkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuType other && Equals(other);
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of API to create. 
    ///  * `http` creates a REST API 
    ///  * `soap` creates a SOAP pass-through API  
    ///  * `websocket` creates websocket API 
    ///  * `graphql` creates GraphQL API. 
    ///  New types can be added in the future.
    /// </summary>
    [EnumType]
    public readonly struct SoapApiType : IEquatable<SoapApiType>
    {
        private readonly string _value;

        private SoapApiType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Imports a SOAP API having a RESTful front end.
        /// </summary>
        public static SoapApiType SoapToRest { get; } = new SoapApiType("http");
        /// <summary>
        /// Imports the SOAP API having a SOAP front end.
        /// </summary>
        public static SoapApiType SoapPassThrough { get; } = new SoapApiType("soap");
        /// <summary>
        /// Imports the API having a Websocket front end.
        /// </summary>
        public static SoapApiType WebSocket { get; } = new SoapApiType("websocket");
        /// <summary>
        /// Imports the API having a GraphQL front end.
        /// </summary>
        public static SoapApiType GraphQL { get; } = new SoapApiType("graphql");
        /// <summary>
        /// Imports the API having a OData front end.
        /// </summary>
        public static SoapApiType OData { get; } = new SoapApiType("odata");
        /// <summary>
        /// Imports the API having a gRPC front end.
        /// </summary>
        public static SoapApiType GRPC { get; } = new SoapApiType("grpc");

        public static bool operator ==(SoapApiType left, SoapApiType right) => left.Equals(right);
        public static bool operator !=(SoapApiType left, SoapApiType right) => !left.Equals(right);

        public static explicit operator string(SoapApiType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoapApiType other && Equals(other);
        public bool Equals(SoapApiType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the issue.
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The issue is proposed.
        /// </summary>
        public static State Proposed { get; } = new State("proposed");
        /// <summary>
        /// The issue is opened.
        /// </summary>
        public static State Open { get; } = new State("open");
        /// <summary>
        /// The issue was removed.
        /// </summary>
        public static State Removed { get; } = new State("removed");
        /// <summary>
        /// The issue is now resolved.
        /// </summary>
        public static State Resolved { get; } = new State("resolved");
        /// <summary>
        /// The issue was closed.
        /// </summary>
        public static State Closed { get; } = new State("closed");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState Suspended { get; } = new SubscriptionState("suspended");
        public static SubscriptionState Active { get; } = new SubscriptionState("active");
        public static SubscriptionState Expired { get; } = new SubscriptionState("expired");
        public static SubscriptionState Submitted { get; } = new SubscriptionState("submitted");
        public static SubscriptionState Rejected { get; } = new SubscriptionState("rejected");
        public static SubscriptionState Cancelled { get; } = new SubscriptionState("cancelled");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Strategy of translating required query parameters to template ones. By default has value 'template'. Possible values: 'template', 'query'
    /// </summary>
    [EnumType]
    public readonly struct TranslateRequiredQueryParametersConduct : IEquatable<TranslateRequiredQueryParametersConduct>
    {
        private readonly string _value;

        private TranslateRequiredQueryParametersConduct(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Translates required query parameters to template ones. Is a default value
        /// </summary>
        public static TranslateRequiredQueryParametersConduct Template { get; } = new TranslateRequiredQueryParametersConduct("template");
        /// <summary>
        /// Leaves required query parameters as they are (no translation done).
        /// </summary>
        public static TranslateRequiredQueryParametersConduct Query { get; } = new TranslateRequiredQueryParametersConduct("query");

        public static bool operator ==(TranslateRequiredQueryParametersConduct left, TranslateRequiredQueryParametersConduct right) => left.Equals(right);
        public static bool operator !=(TranslateRequiredQueryParametersConduct left, TranslateRequiredQueryParametersConduct right) => !left.Equals(right);

        public static explicit operator string(TranslateRequiredQueryParametersConduct value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TranslateRequiredQueryParametersConduct other && Equals(other);
        public bool Equals(TranslateRequiredQueryParametersConduct other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
    /// </summary>
    [EnumType]
    public readonly struct UserState : IEquatable<UserState>
    {
        private readonly string _value;

        private UserState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// User state is active.
        /// </summary>
        public static UserState Active { get; } = new UserState("active");
        /// <summary>
        /// User is blocked. Blocked users cannot authenticate at developer portal or call API.
        /// </summary>
        public static UserState Blocked { get; } = new UserState("blocked");
        /// <summary>
        /// User account is pending. Requires identity confirmation before it can be made active.
        /// </summary>
        public static UserState Pending { get; } = new UserState("pending");
        /// <summary>
        /// User account is closed. All identities and related entities are removed.
        /// </summary>
        public static UserState Deleted { get; } = new UserState("deleted");

        public static bool operator ==(UserState left, UserState right) => left.Equals(right);
        public static bool operator !=(UserState left, UserState right) => !left.Equals(right);

        public static explicit operator string(UserState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserState other && Equals(other);
        public bool Equals(UserState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The verbosity level applied to traces emitted by trace policies.
    /// </summary>
    [EnumType]
    public readonly struct Verbosity : IEquatable<Verbosity>
    {
        private readonly string _value;

        private Verbosity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Verbose { get; } = new Verbosity("verbose");
        /// <summary>
        /// Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Information { get; } = new Verbosity("information");
        /// <summary>
        /// Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Error { get; } = new Verbosity("error");

        public static bool operator ==(Verbosity left, Verbosity right) => left.Equals(right);
        public static bool operator !=(Verbosity left, Verbosity right) => !left.Equals(right);

        public static explicit operator string(Verbosity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Verbosity other && Equals(other);
        public bool Equals(Verbosity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An value that determines where the API Version identifier will be located in a HTTP request.
    /// </summary>
    [EnumType]
    public readonly struct VersioningScheme : IEquatable<VersioningScheme>
    {
        private readonly string _value;

        private VersioningScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The API Version is passed in a path segment.
        /// </summary>
        public static VersioningScheme Segment { get; } = new VersioningScheme("Segment");
        /// <summary>
        /// The API Version is passed in a query parameter.
        /// </summary>
        public static VersioningScheme Query { get; } = new VersioningScheme("Query");
        /// <summary>
        /// The API Version is passed in a HTTP header.
        /// </summary>
        public static VersioningScheme Header { get; } = new VersioningScheme("Header");

        public static bool operator ==(VersioningScheme left, VersioningScheme right) => left.Equals(right);
        public static bool operator !=(VersioningScheme left, VersioningScheme right) => !left.Equals(right);

        public static explicit operator string(VersioningScheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VersioningScheme other && Equals(other);
        public bool Equals(VersioningScheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
    /// </summary>
    [EnumType]
    public readonly struct VirtualNetworkType : IEquatable<VirtualNetworkType>
    {
        private readonly string _value;

        private VirtualNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The service is not part of any Virtual Network.
        /// </summary>
        public static VirtualNetworkType None { get; } = new VirtualNetworkType("None");
        /// <summary>
        /// The service is part of Virtual Network and it is accessible from Internet.
        /// </summary>
        public static VirtualNetworkType External { get; } = new VirtualNetworkType("External");
        /// <summary>
        /// The service is part of Virtual Network and it is only accessible from within the virtual network.
        /// </summary>
        public static VirtualNetworkType Internal { get; } = new VirtualNetworkType("Internal");

        public static bool operator ==(VirtualNetworkType left, VirtualNetworkType right) => left.Equals(right);
        public static bool operator !=(VirtualNetworkType left, VirtualNetworkType right) => !left.Equals(right);

        public static explicit operator string(VirtualNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualNetworkType other && Equals(other);
        public bool Equals(VirtualNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
