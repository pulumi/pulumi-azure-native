// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20210401Preview
{
    public static class GetUser
    {
        /// <summary>
        /// User details.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("azure-native:apimanagement/v20210401preview:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// User details.
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("azure-native:apimanagement/v20210401preview:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// User identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetUserArgs()
        {
        }
    }

    public sealed class GetUserInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// User identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetUserInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// Email address.
        /// </summary>
        public readonly string? Email;
        /// <summary>
        /// First name.
        /// </summary>
        public readonly string? FirstName;
        /// <summary>
        /// Collection of groups user is part of.
        /// </summary>
        public readonly ImmutableArray<Outputs.GroupContractPropertiesResponse> Groups;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Collection of user identities.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserIdentityContractResponse> Identities;
        /// <summary>
        /// Last name.
        /// </summary>
        public readonly string? LastName;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional note about a user set by the administrator.
        /// </summary>
        public readonly string? Note;
        /// <summary>
        /// Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        public readonly string? RegistrationDate;
        /// <summary>
        /// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetUserResult(
            string? email,

            string? firstName,

            ImmutableArray<Outputs.GroupContractPropertiesResponse> groups,

            string id,

            ImmutableArray<Outputs.UserIdentityContractResponse> identities,

            string? lastName,

            string name,

            string? note,

            string? registrationDate,

            string? state,

            string type)
        {
            Email = email;
            FirstName = firstName;
            Groups = groups;
            Id = id;
            Identities = identities;
            LastName = lastName;
            Name = name;
            Note = note;
            RegistrationDate = registrationDate;
            State = state;
            Type = type;
        }
    }
}
