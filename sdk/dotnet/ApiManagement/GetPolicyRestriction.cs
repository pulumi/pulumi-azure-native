// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement
{
    public static class GetPolicyRestriction
    {
        /// <summary>
        /// Get the policy restriction of the Api Management service.
        /// Azure REST API version: 2023-05-01-preview.
        /// 
        /// Other available API versions: 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Task<GetPolicyRestrictionResult> InvokeAsync(GetPolicyRestrictionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyRestrictionResult>("azure-native:apimanagement:getPolicyRestriction", args ?? new GetPolicyRestrictionArgs(), options.WithDefaults());

        /// <summary>
        /// Get the policy restriction of the Api Management service.
        /// Azure REST API version: 2023-05-01-preview.
        /// 
        /// Other available API versions: 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Output<GetPolicyRestrictionResult> Invoke(GetPolicyRestrictionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyRestrictionResult>("azure-native:apimanagement:getPolicyRestriction", args ?? new GetPolicyRestrictionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyRestrictionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Policy restrictions after an entity level
        /// </summary>
        [Input("policyRestrictionId", required: true)]
        public string PolicyRestrictionId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetPolicyRestrictionArgs()
        {
        }
        public static new GetPolicyRestrictionArgs Empty => new GetPolicyRestrictionArgs();
    }

    public sealed class GetPolicyRestrictionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Policy restrictions after an entity level
        /// </summary>
        [Input("policyRestrictionId", required: true)]
        public Input<string> PolicyRestrictionId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetPolicyRestrictionInvokeArgs()
        {
        }
        public static new GetPolicyRestrictionInvokeArgs Empty => new GetPolicyRestrictionInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyRestrictionResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Indicates if base policy should be enforced for the policy document.
        /// </summary>
        public readonly string? RequireBase;
        /// <summary>
        /// Path to the policy document.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPolicyRestrictionResult(
            string id,

            string name,

            string? requireBase,

            string? scope,

            string type)
        {
            Id = id;
            Name = name;
            RequireBase = requireBase;
            Scope = scope;
            Type = type;
        }
    }
}
