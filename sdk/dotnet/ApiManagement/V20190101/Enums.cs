// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiManagement.V20190101
{
    /// <summary>
    /// Specifies for what type of messages sampling settings should not apply.
    /// </summary>
    [EnumType]
    public readonly struct AlwaysLog : IEquatable<AlwaysLog>
    {
        private readonly string _value;

        private AlwaysLog(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Always log all erroneous request regardless of sampling settings.
        /// </summary>
        public static AlwaysLog AllErrors { get; } = new AlwaysLog("allErrors");

        public static bool operator ==(AlwaysLog left, AlwaysLog right) => left.Equals(right);
        public static bool operator !=(AlwaysLog left, AlwaysLog right) => !left.Equals(right);

        public static explicit operator string(AlwaysLog value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlwaysLog other && Equals(other);
        public bool Equals(AlwaysLog other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets correlation protocol to use for Application Insights diagnostics.
    /// </summary>
    [EnumType]
    public readonly struct HttpCorrelationProtocol : IEquatable<HttpCorrelationProtocol>
    {
        private readonly string _value;

        private HttpCorrelationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Do not read and inject correlation headers.
        /// </summary>
        public static HttpCorrelationProtocol None { get; } = new HttpCorrelationProtocol("None");
        /// <summary>
        /// Inject Request-Id and Request-Context headers with request correlation data. See https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/HttpCorrelationProtocol.md.
        /// </summary>
        public static HttpCorrelationProtocol Legacy { get; } = new HttpCorrelationProtocol("Legacy");
        /// <summary>
        /// Inject Trace Context headers. See https://w3c.github.io/trace-context.
        /// </summary>
        public static HttpCorrelationProtocol W3C { get; } = new HttpCorrelationProtocol("W3C");

        public static bool operator ==(HttpCorrelationProtocol left, HttpCorrelationProtocol right) => left.Equals(right);
        public static bool operator !=(HttpCorrelationProtocol left, HttpCorrelationProtocol right) => !left.Equals(right);

        public static explicit operator string(HttpCorrelationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpCorrelationProtocol other && Equals(other);
        public bool Equals(HttpCorrelationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identity Provider Type identifier.
    /// </summary>
    [EnumType]
    public readonly struct IdentityProviderType : IEquatable<IdentityProviderType>
    {
        private readonly string _value;

        private IdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Facebook as Identity provider.
        /// </summary>
        public static IdentityProviderType Facebook { get; } = new IdentityProviderType("facebook");
        /// <summary>
        /// Google as Identity provider.
        /// </summary>
        public static IdentityProviderType Google { get; } = new IdentityProviderType("google");
        /// <summary>
        /// Microsoft Live as Identity provider.
        /// </summary>
        public static IdentityProviderType Microsoft { get; } = new IdentityProviderType("microsoft");
        /// <summary>
        /// Twitter as Identity provider.
        /// </summary>
        public static IdentityProviderType Twitter { get; } = new IdentityProviderType("twitter");
        /// <summary>
        /// Azure Active Directory as Identity provider.
        /// </summary>
        public static IdentityProviderType Aad { get; } = new IdentityProviderType("aad");
        /// <summary>
        /// Azure Active Directory B2C as Identity provider.
        /// </summary>
        public static IdentityProviderType AadB2C { get; } = new IdentityProviderType("aadB2C");

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right) => left.Equals(right);
        public static bool operator !=(IdentityProviderType left, IdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderType other && Equals(other);
        public bool Equals(IdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sampling type.
    /// </summary>
    [EnumType]
    public readonly struct SamplingType : IEquatable<SamplingType>
    {
        private readonly string _value;

        private SamplingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Fixed-rate sampling.
        /// </summary>
        public static SamplingType @Fixed { get; } = new SamplingType("fixed");

        public static bool operator ==(SamplingType left, SamplingType right) => left.Equals(right);
        public static bool operator !=(SamplingType left, SamplingType right) => !left.Equals(right);

        public static explicit operator string(SamplingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SamplingType other && Equals(other);
        public bool Equals(SamplingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
    /// </summary>
    [EnumType]
    public readonly struct SubscriptionState : IEquatable<SubscriptionState>
    {
        private readonly string _value;

        private SubscriptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubscriptionState Suspended { get; } = new SubscriptionState("suspended");
        public static SubscriptionState Active { get; } = new SubscriptionState("active");
        public static SubscriptionState Expired { get; } = new SubscriptionState("expired");
        public static SubscriptionState Submitted { get; } = new SubscriptionState("submitted");
        public static SubscriptionState Rejected { get; } = new SubscriptionState("rejected");
        public static SubscriptionState Cancelled { get; } = new SubscriptionState("cancelled");

        public static bool operator ==(SubscriptionState left, SubscriptionState right) => left.Equals(right);
        public static bool operator !=(SubscriptionState left, SubscriptionState right) => !left.Equals(right);

        public static explicit operator string(SubscriptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubscriptionState other && Equals(other);
        public bool Equals(SubscriptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The verbosity level applied to traces emitted by trace policies.
    /// </summary>
    [EnumType]
    public readonly struct Verbosity : IEquatable<Verbosity>
    {
        private readonly string _value;

        private Verbosity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Verbose { get; } = new Verbosity("verbose");
        /// <summary>
        /// Traces with 'severity' set to 'information' and 'error' will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Information { get; } = new Verbosity("information");
        /// <summary>
        /// Only traces with 'severity' set to 'error' will be sent to the logger attached to this diagnostic instance.
        /// </summary>
        public static Verbosity Error { get; } = new Verbosity("error");

        public static bool operator ==(Verbosity left, Verbosity right) => left.Equals(right);
        public static bool operator !=(Verbosity left, Verbosity right) => !left.Equals(right);

        public static explicit operator string(Verbosity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Verbosity other && Equals(other);
        public bool Equals(Verbosity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
