// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20220801
{
    public static class GetCache
    {
        /// <summary>
        /// Gets the details of the Cache specified by its identifier.
        /// </summary>
        public static Task<GetCacheResult> InvokeAsync(GetCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azure-native:apimanagement/v20220801:getCache", args ?? new GetCacheArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the Cache specified by its identifier.
        /// </summary>
        public static Output<GetCacheResult> Invoke(GetCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCacheResult>("azure-native:apimanagement/v20220801:getCache", args ?? new GetCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCacheArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the Cache entity. Cache identifier (should be either 'default' or valid Azure region identifier).
        /// </summary>
        [Input("cacheId", required: true)]
        public string CacheId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetCacheArgs()
        {
        }
        public static new GetCacheArgs Empty => new GetCacheArgs();
    }

    public sealed class GetCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the Cache entity. Cache identifier (should be either 'default' or valid Azure region identifier).
        /// </summary>
        [Input("cacheId", required: true)]
        public Input<string> CacheId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetCacheInvokeArgs()
        {
        }
        public static new GetCacheInvokeArgs Empty => new GetCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// Runtime connection string to cache
        /// </summary>
        public readonly string ConnectionString;
        /// <summary>
        /// Cache description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Original uri of entity in external system cache points to
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Location identifier to use cache from (should be either 'default' or valid Azure region identifier)
        /// </summary>
        public readonly string UseFromLocation;

        [OutputConstructor]
        private GetCacheResult(
            string connectionString,

            string? description,

            string id,

            string name,

            string? resourceId,

            string type,

            string useFromLocation)
        {
            ConnectionString = connectionString;
            Description = description;
            Id = id;
            Name = name;
            ResourceId = resourceId;
            Type = type;
            UseFromLocation = useFromLocation;
        }
    }
}
