// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ApiManagement.V20180601Preview
{
    /// <summary>
    /// Diagnostic details.
    /// </summary>
    public partial class ApiDiagnostic : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies for what type of messages sampling settings should not apply.
        /// </summary>
        [Output("alwaysLog")]
        public Output<string?> AlwaysLog { get; private set; } = null!;

        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        /// </summary>
        [Output("backend")]
        public Output<Outputs.PipelineDiagnosticSettingsResponse?> Backend { get; private set; } = null!;

        /// <summary>
        /// Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.
        /// </summary>
        [Output("enableHttpCorrelationHeaders")]
        public Output<bool?> EnableHttpCorrelationHeaders { get; private set; } = null!;

        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        /// </summary>
        [Output("frontend")]
        public Output<Outputs.PipelineDiagnosticSettingsResponse?> Frontend { get; private set; } = null!;

        /// <summary>
        /// Resource Id of a target logger.
        /// </summary>
        [Output("loggerId")]
        public Output<string> LoggerId { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Sampling settings for Diagnostic.
        /// </summary>
        [Output("sampling")]
        public Output<Outputs.SamplingSettingsResponse?> Sampling { get; private set; } = null!;

        /// <summary>
        /// Resource type for API Management resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ApiDiagnostic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiDiagnostic(string name, ApiDiagnosticArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:apimanagement/v20180601preview:ApiDiagnostic", name, args ?? new ApiDiagnosticArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiDiagnostic(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:apimanagement/v20180601preview:ApiDiagnostic", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/latest:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20170301:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20180101:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20190101:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20191201:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20191201preview:ApiDiagnostic"},
                    new Pulumi.Alias { Type = "azure-nextgen:apimanagement/v20200601preview:ApiDiagnostic"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiDiagnostic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiDiagnostic Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ApiDiagnostic(name, id, options);
        }
    }

    public sealed class ApiDiagnosticArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies for what type of messages sampling settings should not apply.
        /// </summary>
        [Input("alwaysLog")]
        public Input<string>? AlwaysLog { get; set; }

        /// <summary>
        /// API identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        /// </summary>
        [Input("backend")]
        public Input<Inputs.PipelineDiagnosticSettingsArgs>? Backend { get; set; }

        /// <summary>
        /// Diagnostic identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("diagnosticId", required: true)]
        public Input<string> DiagnosticId { get; set; } = null!;

        /// <summary>
        /// Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.
        /// </summary>
        [Input("enableHttpCorrelationHeaders")]
        public Input<bool>? EnableHttpCorrelationHeaders { get; set; }

        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        /// </summary>
        [Input("frontend")]
        public Input<Inputs.PipelineDiagnosticSettingsArgs>? Frontend { get; set; }

        /// <summary>
        /// Resource Id of a target logger.
        /// </summary>
        [Input("loggerId", required: true)]
        public Input<string> LoggerId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Sampling settings for Diagnostic.
        /// </summary>
        [Input("sampling")]
        public Input<Inputs.SamplingSettingsArgs>? Sampling { get; set; }

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public ApiDiagnosticArgs()
        {
        }
    }
}
