// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20180601Preview
{
    public static class GetDiagnostic
    {
        /// <summary>
        /// Gets the details of the Diagnostic specified by its identifier.
        /// </summary>
        public static Task<GetDiagnosticResult> InvokeAsync(GetDiagnosticArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiagnosticResult>("azure-native:apimanagement/v20180601preview:getDiagnostic", args ?? new GetDiagnosticArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the Diagnostic specified by its identifier.
        /// </summary>
        public static Output<GetDiagnosticResult> Invoke(GetDiagnosticInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiagnosticResult>("azure-native:apimanagement/v20180601preview:getDiagnostic", args ?? new GetDiagnosticInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiagnosticArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Diagnostic identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("diagnosticId", required: true)]
        public string DiagnosticId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetDiagnosticArgs()
        {
        }
        public static new GetDiagnosticArgs Empty => new GetDiagnosticArgs();
    }

    public sealed class GetDiagnosticInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Diagnostic identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("diagnosticId", required: true)]
        public Input<string> DiagnosticId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetDiagnosticInvokeArgs()
        {
        }
        public static new GetDiagnosticInvokeArgs Empty => new GetDiagnosticInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiagnosticResult
    {
        /// <summary>
        /// Specifies for what type of messages sampling settings should not apply.
        /// </summary>
        public readonly string? AlwaysLog;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponse? Backend;
        /// <summary>
        /// Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.
        /// </summary>
        public readonly bool? EnableHttpCorrelationHeaders;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponse? Frontend;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource Id of a target logger.
        /// </summary>
        public readonly string LoggerId;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Sampling settings for Diagnostic.
        /// </summary>
        public readonly Outputs.SamplingSettingsResponse? Sampling;
        /// <summary>
        /// Resource type for API Management resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDiagnosticResult(
            string? alwaysLog,

            Outputs.PipelineDiagnosticSettingsResponse? backend,

            bool? enableHttpCorrelationHeaders,

            Outputs.PipelineDiagnosticSettingsResponse? frontend,

            string id,

            string loggerId,

            string name,

            Outputs.SamplingSettingsResponse? sampling,

            string type)
        {
            AlwaysLog = alwaysLog;
            Backend = backend;
            EnableHttpCorrelationHeaders = enableHttpCorrelationHeaders;
            Frontend = frontend;
            Id = id;
            LoggerId = loggerId;
            Name = name;
            Sampling = sampling;
            Type = type;
        }
    }
}
