// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20220401Preview
{
    public static class GetApiDiagnostic
    {
        /// <summary>
        /// Gets the details of the Diagnostic for an API specified by its identifier.
        /// </summary>
        public static Task<GetApiDiagnosticResult> InvokeAsync(GetApiDiagnosticArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiDiagnosticResult>("azure-native:apimanagement/v20220401preview:getApiDiagnostic", args ?? new GetApiDiagnosticArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the Diagnostic for an API specified by its identifier.
        /// </summary>
        public static Output<GetApiDiagnosticResult> Invoke(GetApiDiagnosticInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiDiagnosticResult>("azure-native:apimanagement/v20220401preview:getApiDiagnostic", args ?? new GetApiDiagnosticInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiDiagnosticArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// API identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        /// <summary>
        /// Diagnostic identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("diagnosticId", required: true)]
        public string DiagnosticId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetApiDiagnosticArgs()
        {
        }
        public static new GetApiDiagnosticArgs Empty => new GetApiDiagnosticArgs();
    }

    public sealed class GetApiDiagnosticInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// API identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// Diagnostic identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("diagnosticId", required: true)]
        public Input<string> DiagnosticId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetApiDiagnosticInvokeArgs()
        {
        }
        public static new GetApiDiagnosticInvokeArgs Empty => new GetApiDiagnosticInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiDiagnosticResult
    {
        /// <summary>
        /// Specifies for what type of messages sampling settings should not apply.
        /// </summary>
        public readonly string? AlwaysLog;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponse? Backend;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponse? Frontend;
        /// <summary>
        /// Sets correlation protocol to use for Application Insights diagnostics.
        /// </summary>
        public readonly string? HttpCorrelationProtocol;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Log the ClientIP. Default is false.
        /// </summary>
        public readonly bool? LogClientIp;
        /// <summary>
        /// Resource Id of a target logger.
        /// </summary>
        public readonly string LoggerId;
        /// <summary>
        /// Emit custom metrics via emit-metric policy. Applicable only to Application Insights diagnostic settings.
        /// </summary>
        public readonly bool? Metrics;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The format of the Operation Name for Application Insights telemetries. Default is Name.
        /// </summary>
        public readonly string? OperationNameFormat;
        /// <summary>
        /// Sampling settings for Diagnostic.
        /// </summary>
        public readonly Outputs.SamplingSettingsResponse? Sampling;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The verbosity level applied to traces emitted by trace policies.
        /// </summary>
        public readonly string? Verbosity;

        [OutputConstructor]
        private GetApiDiagnosticResult(
            string? alwaysLog,

            Outputs.PipelineDiagnosticSettingsResponse? backend,

            Outputs.PipelineDiagnosticSettingsResponse? frontend,

            string? httpCorrelationProtocol,

            string id,

            bool? logClientIp,

            string loggerId,

            bool? metrics,

            string name,

            string? operationNameFormat,

            Outputs.SamplingSettingsResponse? sampling,

            string type,

            string? verbosity)
        {
            AlwaysLog = alwaysLog;
            Backend = backend;
            Frontend = frontend;
            HttpCorrelationProtocol = httpCorrelationProtocol;
            Id = id;
            LogClientIp = logClientIp;
            LoggerId = loggerId;
            Metrics = metrics;
            Name = name;
            OperationNameFormat = operationNameFormat;
            Sampling = sampling;
            Type = type;
            Verbosity = verbosity;
        }
    }
}
