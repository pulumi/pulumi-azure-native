// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ApiManagement.V20191201.Outputs
{

    [OutputType]
    public sealed class DiagnosticContractPropertiesResponseResult
    {
        /// <summary>
        /// Specifies for what type of messages sampling settings should not apply.
        /// </summary>
        public readonly string? AlwaysLog;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Backend
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponseResult? Backend;
        /// <summary>
        /// Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
        /// </summary>
        public readonly Outputs.PipelineDiagnosticSettingsResponseResult? Frontend;
        /// <summary>
        /// Sets correlation protocol to use for Application Insights diagnostics.
        /// </summary>
        public readonly string? HttpCorrelationProtocol;
        /// <summary>
        /// Log the ClientIP. Default is false.
        /// </summary>
        public readonly bool? LogClientIp;
        /// <summary>
        /// Resource Id of a target logger.
        /// </summary>
        public readonly string LoggerId;
        /// <summary>
        /// Sampling settings for Diagnostic.
        /// </summary>
        public readonly Outputs.SamplingSettingsResponseResult? Sampling;
        /// <summary>
        /// The verbosity level applied to traces emitted by trace policies.
        /// </summary>
        public readonly string? Verbosity;

        [OutputConstructor]
        private DiagnosticContractPropertiesResponseResult(
            string? alwaysLog,

            Outputs.PipelineDiagnosticSettingsResponseResult? backend,

            Outputs.PipelineDiagnosticSettingsResponseResult? frontend,

            string? httpCorrelationProtocol,

            bool? logClientIp,

            string loggerId,

            Outputs.SamplingSettingsResponseResult? sampling,

            string? verbosity)
        {
            AlwaysLog = alwaysLog;
            Backend = backend;
            Frontend = frontend;
            HttpCorrelationProtocol = httpCorrelationProtocol;
            LogClientIp = logClientIp;
            LoggerId = loggerId;
            Sampling = sampling;
            Verbosity = verbosity;
        }
    }
}
