// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement
{
    public static class GetWorkspaceBackend
    {
        /// <summary>
        /// Gets the details of the backend specified by its identifier.
        /// Azure REST API version: 2023-09-01-preview.
        /// </summary>
        public static Task<GetWorkspaceBackendResult> InvokeAsync(GetWorkspaceBackendArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceBackendResult>("azure-native:apimanagement:getWorkspaceBackend", args ?? new GetWorkspaceBackendArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the backend specified by its identifier.
        /// Azure REST API version: 2023-09-01-preview.
        /// </summary>
        public static Output<GetWorkspaceBackendResult> Invoke(GetWorkspaceBackendInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspaceBackendResult>("azure-native:apimanagement:getWorkspaceBackend", args ?? new GetWorkspaceBackendInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceBackendArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the Backend entity. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("backendId", required: true)]
        public string BackendId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Workspace identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetWorkspaceBackendArgs()
        {
        }
        public static new GetWorkspaceBackendArgs Empty => new GetWorkspaceBackendArgs();
    }

    public sealed class GetWorkspaceBackendInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the Backend entity. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("backendId", required: true)]
        public Input<string> BackendId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Workspace identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetWorkspaceBackendInvokeArgs()
        {
        }
        public static new GetWorkspaceBackendInvokeArgs Empty => new GetWorkspaceBackendInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceBackendResult
    {
        /// <summary>
        /// Backend Circuit Breaker Configuration
        /// </summary>
        public readonly Outputs.BackendCircuitBreakerResponse? CircuitBreaker;
        /// <summary>
        /// Backend Credentials Contract Properties
        /// </summary>
        public readonly Outputs.BackendCredentialsContractResponse? Credentials;
        /// <summary>
        /// Backend Description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        public readonly Outputs.BackendBaseParametersResponsePool? Pool;
        /// <summary>
        /// Backend Properties contract
        /// </summary>
        public readonly Outputs.BackendPropertiesResponse Properties;
        /// <summary>
        /// Backend communication protocol.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Backend gateway Contract Properties
        /// </summary>
        public readonly Outputs.BackendProxyContractResponse? Proxy;
        /// <summary>
        /// Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// Backend Title.
        /// </summary>
        public readonly string? Title;
        /// <summary>
        /// Backend TLS Properties
        /// </summary>
        public readonly Outputs.BackendTlsPropertiesResponse? Tls;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Runtime Url of the Backend.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetWorkspaceBackendResult(
            Outputs.BackendCircuitBreakerResponse? circuitBreaker,

            Outputs.BackendCredentialsContractResponse? credentials,

            string? description,

            string id,

            string name,

            Outputs.BackendBaseParametersResponsePool? pool,

            Outputs.BackendPropertiesResponse properties,

            string protocol,

            Outputs.BackendProxyContractResponse? proxy,

            string? resourceId,

            string? title,

            Outputs.BackendTlsPropertiesResponse? tls,

            string type,

            string url)
        {
            CircuitBreaker = circuitBreaker;
            Credentials = credentials;
            Description = description;
            Id = id;
            Name = name;
            Pool = pool;
            Properties = properties;
            Protocol = protocol;
            Proxy = proxy;
            ResourceId = resourceId;
            Title = title;
            Tls = tls;
            Type = type;
            Url = url;
        }
    }
}
