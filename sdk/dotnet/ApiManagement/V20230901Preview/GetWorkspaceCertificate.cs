// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20230901Preview
{
    public static class GetWorkspaceCertificate
    {
        /// <summary>
        /// Gets the details of the certificate specified by its identifier.
        /// </summary>
        public static Task<GetWorkspaceCertificateResult> InvokeAsync(GetWorkspaceCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceCertificateResult>("azure-native:apimanagement/v20230901preview:getWorkspaceCertificate", args ?? new GetWorkspaceCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the certificate specified by its identifier.
        /// </summary>
        public static Output<GetWorkspaceCertificateResult> Invoke(GetWorkspaceCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspaceCertificateResult>("azure-native:apimanagement/v20230901preview:getWorkspaceCertificate", args ?? new GetWorkspaceCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the certificate entity. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Workspace identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetWorkspaceCertificateArgs()
        {
        }
        public static new GetWorkspaceCertificateArgs Empty => new GetWorkspaceCertificateArgs();
    }

    public sealed class GetWorkspaceCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the certificate entity. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Workspace identifier. Must be unique in the current API Management service instance.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetWorkspaceCertificateInvokeArgs()
        {
        }
        public static new GetWorkspaceCertificateInvokeArgs Empty => new GetWorkspaceCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceCertificateResult
    {
        /// <summary>
        /// Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// KeyVault location details of the certificate.
        /// </summary>
        public readonly Outputs.KeyVaultContractPropertiesResponse? KeyVault;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Subject attribute of the certificate.
        /// </summary>
        public readonly string Subject;
        /// <summary>
        /// Thumbprint of the certificate.
        /// </summary>
        public readonly string Thumbprint;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWorkspaceCertificateResult(
            string expirationDate,

            string id,

            Outputs.KeyVaultContractPropertiesResponse? keyVault,

            string name,

            string subject,

            string thumbprint,

            string type)
        {
            ExpirationDate = expirationDate;
            Id = id;
            KeyVault = keyVault;
            Name = name;
            Subject = subject;
            Thumbprint = thumbprint;
            Type = type;
        }
    }
}
