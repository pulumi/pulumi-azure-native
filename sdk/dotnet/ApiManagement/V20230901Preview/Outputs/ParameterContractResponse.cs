// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20230901Preview.Outputs
{

    /// <summary>
    /// Operation parameters details.
    /// </summary>
    [OutputType]
    public sealed class ParameterContractResponse
    {
        /// <summary>
        /// Default parameter value.
        /// </summary>
        public readonly string? DefaultValue;
        /// <summary>
        /// Parameter description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Exampled defined for the parameter.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterExampleContractResponse>? Examples;
        /// <summary>
        /// Parameter name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies whether parameter is required or not.
        /// </summary>
        public readonly bool? Required;
        /// <summary>
        /// Schema identifier.
        /// </summary>
        public readonly string? SchemaId;
        /// <summary>
        /// Parameter type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Type name defined by the schema.
        /// </summary>
        public readonly string? TypeName;
        /// <summary>
        /// Parameter values.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private ParameterContractResponse(
            string? defaultValue,

            string? description,

            ImmutableDictionary<string, Outputs.ParameterExampleContractResponse>? examples,

            string name,

            bool? required,

            string? schemaId,

            string type,

            string? typeName,

            ImmutableArray<string> values)
        {
            DefaultValue = defaultValue;
            Description = description;
            Examples = examples;
            Name = name;
            Required = required;
            SchemaId = schemaId;
            Type = type;
            TypeName = typeName;
            Values = values;
        }
    }
}
