// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement.V20230901Preview
{
    public static class GetAuthorization
    {
        /// <summary>
        /// Gets the details of the authorization specified by its identifier.
        /// </summary>
        public static Task<GetAuthorizationResult> InvokeAsync(GetAuthorizationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizationResult>("azure-native:apimanagement/v20230901preview:getAuthorization", args ?? new GetAuthorizationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the details of the authorization specified by its identifier.
        /// </summary>
        public static Output<GetAuthorizationResult> Invoke(GetAuthorizationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationResult>("azure-native:apimanagement/v20230901preview:getAuthorization", args ?? new GetAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the authorization.
        /// </summary>
        [Input("authorizationId", required: true)]
        public string AuthorizationId { get; set; } = null!;

        /// <summary>
        /// Identifier of the authorization provider.
        /// </summary>
        [Input("authorizationProviderId", required: true)]
        public string AuthorizationProviderId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetAuthorizationArgs()
        {
        }
        public static new GetAuthorizationArgs Empty => new GetAuthorizationArgs();
    }

    public sealed class GetAuthorizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the authorization.
        /// </summary>
        [Input("authorizationId", required: true)]
        public Input<string> AuthorizationId { get; set; } = null!;

        /// <summary>
        /// Identifier of the authorization provider.
        /// </summary>
        [Input("authorizationProviderId", required: true)]
        public Input<string> AuthorizationProviderId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetAuthorizationInvokeArgs()
        {
        }
        public static new GetAuthorizationInvokeArgs Empty => new GetAuthorizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizationResult
    {
        /// <summary>
        /// Authorization type options
        /// </summary>
        public readonly string? AuthorizationType;
        /// <summary>
        /// Authorization error details.
        /// </summary>
        public readonly Outputs.AuthorizationErrorResponse? Error;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// OAuth2 grant type options
        /// </summary>
        public readonly string? OAuth2GrantType;
        /// <summary>
        /// Authorization parameters
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Parameters;
        /// <summary>
        /// Status of the Authorization
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAuthorizationResult(
            string? authorizationType,

            Outputs.AuthorizationErrorResponse? error,

            string id,

            string name,

            string? oAuth2GrantType,

            ImmutableDictionary<string, string>? parameters,

            string? status,

            string type)
        {
            AuthorizationType = authorizationType;
            Error = error;
            Id = id;
            Name = name;
            OAuth2GrantType = oAuth2GrantType;
            Parameters = parameters;
            Status = status;
            Type = type;
        }
    }
}
