// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement
{
    /// <summary>
    /// Logger details.
    /// Azure REST API version: 2022-08-01. Prior API version in Azure Native 1.x: 2020-12-01.
    /// 
    /// Other available API versions: 2016-07-07, 2016-10-10, 2017-03-01, 2018-01-01, 2019-12-01-preview, 2022-09-01-preview, 2023-03-01-preview, 2023-05-01-preview, 2023-09-01-preview, 2024-05-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:apimanagement:Logger")]
    public partial class Logger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name and SendRule connection string of the event hub for azureEventHub logger.
        /// Instrumentation key for applicationInsights logger.
        /// </summary>
        [Output("credentials")]
        public Output<ImmutableDictionary<string, string>?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Logger description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether records are buffered in the logger before publishing. Default is assumed to be true.
        /// </summary>
        [Output("isBuffered")]
        public Output<bool?> IsBuffered { get; private set; } = null!;

        /// <summary>
        /// Logger type.
        /// </summary>
        [Output("loggerType")]
        public Output<string> LoggerType { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
        /// </summary>
        [Output("resourceId")]
        public Output<string?> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Logger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Logger(string name, LoggerArgs args, CustomResourceOptions? options = null)
            : base("azure-native:apimanagement:Logger", name, args ?? new LoggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Logger(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:apimanagement:Logger", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20160707:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20161010:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20170301:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20180101:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20180601preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20190101:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20191201:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20191201preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20200601preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20201201:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20210101preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20210401preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20210801:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20211201preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20220401preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20220801:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20220901preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20230301preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20230501preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20230901preview:Logger" },
                    new global::Pulumi.Alias { Type = "azure-native:apimanagement/v20240501:Logger" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Logger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Logger Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Logger(name, id, options);
        }
    }

    public sealed class LoggerArgs : global::Pulumi.ResourceArgs
    {
        [Input("credentials")]
        private InputMap<string>? _credentials;

        /// <summary>
        /// The name and SendRule connection string of the event hub for azureEventHub logger.
        /// Instrumentation key for applicationInsights logger.
        /// </summary>
        public InputMap<string> Credentials
        {
            get => _credentials ?? (_credentials = new InputMap<string>());
            set => _credentials = value;
        }

        /// <summary>
        /// Logger description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether records are buffered in the logger before publishing. Default is assumed to be true.
        /// </summary>
        [Input("isBuffered")]
        public Input<bool>? IsBuffered { get; set; }

        /// <summary>
        /// Logger identifier. Must be unique in the API Management service instance.
        /// </summary>
        [Input("loggerId")]
        public Input<string>? LoggerId { get; set; }

        /// <summary>
        /// Logger type.
        /// </summary>
        [Input("loggerType", required: true)]
        public InputUnion<string, Pulumi.AzureNative.ApiManagement.LoggerType> LoggerType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource).
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public LoggerArgs()
        {
        }
        public static new LoggerArgs Empty => new LoggerArgs();
    }
}
