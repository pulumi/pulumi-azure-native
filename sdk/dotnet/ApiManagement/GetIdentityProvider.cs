// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiManagement
{
    public static class GetIdentityProvider
    {
        /// <summary>
        /// Gets the configuration details of the identity Provider configured in specified service instance.
        /// Azure REST API version: 2022-08-01.
        /// 
        /// Other available API versions: 2016-07-07, 2016-10-10, 2019-01-01, 2022-09-01-preview, 2023-03-01-preview, 2023-05-01-preview, 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Task<GetIdentityProviderResult> InvokeAsync(GetIdentityProviderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIdentityProviderResult>("azure-native:apimanagement:getIdentityProvider", args ?? new GetIdentityProviderArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the configuration details of the identity Provider configured in specified service instance.
        /// Azure REST API version: 2022-08-01.
        /// 
        /// Other available API versions: 2016-07-07, 2016-10-10, 2019-01-01, 2022-09-01-preview, 2023-03-01-preview, 2023-05-01-preview, 2023-09-01-preview, 2024-05-01.
        /// </summary>
        public static Output<GetIdentityProviderResult> Invoke(GetIdentityProviderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentityProviderResult>("azure-native:apimanagement:getIdentityProvider", args ?? new GetIdentityProviderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentityProviderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identity Provider Type identifier.
        /// </summary>
        [Input("identityProviderName", required: true)]
        public string IdentityProviderName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetIdentityProviderArgs()
        {
        }
        public static new GetIdentityProviderArgs Empty => new GetIdentityProviderArgs();
    }

    public sealed class GetIdentityProviderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identity Provider Type identifier.
        /// </summary>
        [Input("identityProviderName", required: true)]
        public Input<string> IdentityProviderName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetIdentityProviderInvokeArgs()
        {
        }
        public static new GetIdentityProviderInvokeArgs Empty => new GetIdentityProviderInvokeArgs();
    }


    [OutputType]
    public sealed class GetIdentityProviderResult
    {
        /// <summary>
        /// List of Allowed Tenants when configuring Azure Active Directory login.
        /// </summary>
        public readonly ImmutableArray<string> AllowedTenants;
        /// <summary>
        /// OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
        /// </summary>
        public readonly string? Authority;
        /// <summary>
        /// Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The client library to be used in the developer portal. Only applies to AAD and AAD B2C Identity Provider.
        /// </summary>
        public readonly string? ClientLibrary;
        /// <summary>
        /// Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        public readonly string? PasswordResetPolicyName;
        /// <summary>
        /// Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        public readonly string? ProfileEditingPolicyName;
        /// <summary>
        /// Signin Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        public readonly string? SigninPolicyName;
        /// <summary>
        /// The TenantId to use instead of Common when logging into Active Directory
        /// </summary>
        public readonly string? SigninTenant;
        /// <summary>
        /// Signup Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        public readonly string? SignupPolicyName;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetIdentityProviderResult(
            ImmutableArray<string> allowedTenants,

            string? authority,

            string clientId,

            string? clientLibrary,

            string? clientSecret,

            string id,

            string name,

            string? passwordResetPolicyName,

            string? profileEditingPolicyName,

            string? signinPolicyName,

            string? signinTenant,

            string? signupPolicyName,

            string type)
        {
            AllowedTenants = allowedTenants;
            Authority = authority;
            ClientId = clientId;
            ClientLibrary = clientLibrary;
            ClientSecret = clientSecret;
            Id = id;
            Name = name;
            PasswordResetPolicyName = passwordResetPolicyName;
            ProfileEditingPolicyName = profileEditingPolicyName;
            SigninPolicyName = signinPolicyName;
            SigninTenant = signinTenant;
            SignupPolicyName = signupPolicyName;
            Type = type;
        }
    }
}
