// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ApiManagement.Latest
{
    public static class GetApiManagementService
    {
        public static Task<GetApiManagementServiceResult> InvokeAsync(GetApiManagementServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApiManagementServiceResult>("azure-nextgen:apimanagement/latest:getApiManagementService", args ?? new GetApiManagementServiceArgs(), options.WithVersion());
    }


    public sealed class GetApiManagementServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the API Management service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetApiManagementServiceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApiManagementServiceResult
    {
        /// <summary>
        /// Additional datacenter locations of the API Management service.
        /// </summary>
        public readonly ImmutableArray<Outputs.AdditionalLocationResponse> AdditionalLocations;
        /// <summary>
        /// Control Plane Apis version constraint for the API Management service.
        /// </summary>
        public readonly Outputs.ApiVersionConstraintResponse? ApiVersionConstraint;
        /// <summary>
        /// List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateConfigurationResponse> Certificates;
        /// <summary>
        /// Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        public readonly string CreatedAtUtc;
        /// <summary>
        /// Custom properties of the API Management service.&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.&lt;/br&gt;Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.&lt;/br&gt;&lt;/br&gt;Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1st 2018 and `False` otherwise. Http2 setting's default value is `False`.&lt;/br&gt;&lt;/br&gt;You can disable any of next ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`:&lt;/br&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/br&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;/br&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;/br&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;/br&gt;TLS_RSA_WITH_AES_128_GCM_SHA256&lt;/br&gt;TLS_RSA_WITH_AES_256_CBC_SHA256&lt;br/&gt;TLS_RSA_WITH_AES_128_CBC_SHA256&lt;br/&gt;TLS_RSA_WITH_AES_256_CBC_SHA&lt;br/&gt;TLS_RSA_WITH_AES_128_CBC_SHA.&lt;br/&gt;&lt;br/&gt;For example: `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for all of them.&lt;br/&gt;&lt;br/&gt;Note: next ciphers can't be disabled since they are required by Azure CloudService internal components:&lt;br/&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;br/&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;br/&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;br/&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;br/&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;br/&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;br/&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;br/&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;br/&gt;TLS_RSA_WITH_AES_256_GCM_SHA384
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CustomProperties;
        /// <summary>
        /// DEveloper Portal endpoint URL of the API Management service.
        /// </summary>
        public readonly string DeveloperPortalUrl;
        /// <summary>
        /// Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region.
        /// </summary>
        public readonly bool? DisableGateway;
        /// <summary>
        /// Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway.
        /// </summary>
        public readonly bool? EnableClientCertificate;
        /// <summary>
        /// ETag of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Gateway URL of the API Management service in the Default Region.
        /// </summary>
        public readonly string GatewayRegionalUrl;
        /// <summary>
        /// Gateway URL of the API Management service.
        /// </summary>
        public readonly string GatewayUrl;
        /// <summary>
        /// Custom hostname configuration of the API Management service.
        /// </summary>
        public readonly ImmutableArray<Outputs.HostnameConfigurationResponse> HostnameConfigurations;
        /// <summary>
        /// Managed service identity of the Api Management service.
        /// </summary>
        public readonly Outputs.ApiManagementServiceIdentityResponse? Identity;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Management API endpoint URL of the API Management service.
        /// </summary>
        public readonly string ManagementApiUrl;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Email address from which the notification will be sent.
        /// </summary>
        public readonly string? NotificationSenderEmail;
        /// <summary>
        /// Publisher portal endpoint Url of the API Management service.
        /// </summary>
        public readonly string PortalUrl;
        /// <summary>
        /// Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIPAddresses;
        /// <summary>
        /// The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard and Premium SKU.
        /// </summary>
        public readonly ImmutableArray<string> PublicIPAddresses;
        /// <summary>
        /// Publisher email.
        /// </summary>
        public readonly string PublisherEmail;
        /// <summary>
        /// Publisher name.
        /// </summary>
        public readonly string PublisherName;
        /// <summary>
        /// SCM endpoint URL of the API Management service.
        /// </summary>
        public readonly string ScmUrl;
        /// <summary>
        /// SKU properties of the API Management service.
        /// </summary>
        public readonly Outputs.ApiManagementServiceSkuPropertiesResponse Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
        /// </summary>
        public readonly string TargetProvisioningState;
        /// <summary>
        /// Resource type for API Management resource is set to Microsoft.ApiManagement.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Virtual network configuration of the API Management service.
        /// </summary>
        public readonly Outputs.VirtualNetworkConfigurationResponse? VirtualNetworkConfiguration;
        /// <summary>
        /// The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only.
        /// </summary>
        public readonly string? VirtualNetworkType;

        [OutputConstructor]
        private GetApiManagementServiceResult(
            ImmutableArray<Outputs.AdditionalLocationResponse> additionalLocations,

            Outputs.ApiVersionConstraintResponse? apiVersionConstraint,

            ImmutableArray<Outputs.CertificateConfigurationResponse> certificates,

            string createdAtUtc,

            ImmutableDictionary<string, string>? customProperties,

            string developerPortalUrl,

            bool? disableGateway,

            bool? enableClientCertificate,

            string etag,

            string gatewayRegionalUrl,

            string gatewayUrl,

            ImmutableArray<Outputs.HostnameConfigurationResponse> hostnameConfigurations,

            Outputs.ApiManagementServiceIdentityResponse? identity,

            string location,

            string managementApiUrl,

            string name,

            string? notificationSenderEmail,

            string portalUrl,

            ImmutableArray<string> privateIPAddresses,

            string provisioningState,

            ImmutableArray<string> publicIPAddresses,

            string publisherEmail,

            string publisherName,

            string scmUrl,

            Outputs.ApiManagementServiceSkuPropertiesResponse sku,

            ImmutableDictionary<string, string>? tags,

            string targetProvisioningState,

            string type,

            Outputs.VirtualNetworkConfigurationResponse? virtualNetworkConfiguration,

            string? virtualNetworkType)
        {
            AdditionalLocations = additionalLocations;
            ApiVersionConstraint = apiVersionConstraint;
            Certificates = certificates;
            CreatedAtUtc = createdAtUtc;
            CustomProperties = customProperties;
            DeveloperPortalUrl = developerPortalUrl;
            DisableGateway = disableGateway;
            EnableClientCertificate = enableClientCertificate;
            Etag = etag;
            GatewayRegionalUrl = gatewayRegionalUrl;
            GatewayUrl = gatewayUrl;
            HostnameConfigurations = hostnameConfigurations;
            Identity = identity;
            Location = location;
            ManagementApiUrl = managementApiUrl;
            Name = name;
            NotificationSenderEmail = notificationSenderEmail;
            PortalUrl = portalUrl;
            PrivateIPAddresses = privateIPAddresses;
            ProvisioningState = provisioningState;
            PublicIPAddresses = publicIPAddresses;
            PublisherEmail = publisherEmail;
            PublisherName = publisherName;
            ScmUrl = scmUrl;
            Sku = sku;
            Tags = tags;
            TargetProvisioningState = targetProvisioningState;
            Type = type;
            VirtualNetworkConfiguration = virtualNetworkConfiguration;
            VirtualNetworkType = virtualNetworkType;
        }
    }
}
