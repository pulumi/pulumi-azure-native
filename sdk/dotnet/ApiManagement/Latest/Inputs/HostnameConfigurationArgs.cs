// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ApiManagement.Latest.Inputs
{

    /// <summary>
    /// Custom hostname configuration.
    /// </summary>
    public sealed class HostnameConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate information.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.CertificateInformationArgs>? Certificate { get; set; }

        /// <summary>
        /// Certificate Password.
        /// </summary>
        [Input("certificatePassword")]
        public Input<string>? CertificatePassword { get; set; }

        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
        /// </summary>
        [Input("defaultSslBinding")]
        public Input<bool>? DefaultSslBinding { get; set; }

        /// <summary>
        /// Base64 Encoded certificate.
        /// </summary>
        [Input("encodedCertificate")]
        public Input<string>? EncodedCertificate { get; set; }

        /// <summary>
        /// Hostname to configure on the Api Management service.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
        /// </summary>
        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        [Input("negotiateClientCertificate")]
        public Input<bool>? NegotiateClientCertificate { get; set; }

        /// <summary>
        /// Hostname type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public HostnameConfigurationArgs()
        {
        }
    }
}
