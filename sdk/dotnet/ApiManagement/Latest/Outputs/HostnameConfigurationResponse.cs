// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ApiManagement.Latest.Outputs
{

    [OutputType]
    public sealed class HostnameConfigurationResponse
    {
        /// <summary>
        /// Certificate information.
        /// </summary>
        public readonly Outputs.CertificateInformationResponse? Certificate;
        /// <summary>
        /// Certificate Password.
        /// </summary>
        public readonly string? CertificatePassword;
        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
        /// </summary>
        public readonly bool? DefaultSslBinding;
        /// <summary>
        /// Base64 Encoded certificate.
        /// </summary>
        public readonly string? EncodedCertificate;
        /// <summary>
        /// Hostname to configure on the Api Management service.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*
        /// </summary>
        public readonly string? KeyVaultId;
        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        public readonly bool? NegotiateClientCertificate;
        /// <summary>
        /// Hostname type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private HostnameConfigurationResponse(
            Outputs.CertificateInformationResponse? certificate,

            string? certificatePassword,

            bool? defaultSslBinding,

            string? encodedCertificate,

            string hostName,

            string? keyVaultId,

            bool? negotiateClientCertificate,

            string type)
        {
            Certificate = certificate;
            CertificatePassword = certificatePassword;
            DefaultSslBinding = defaultSslBinding;
            EncodedCertificate = encodedCertificate;
            HostName = hostName;
            KeyVaultId = keyVaultId;
            NegotiateClientCertificate = negotiateClientCertificate;
            Type = type;
        }
    }
}
