// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Communication.V20220701Preview
{
    /// <summary>
    /// Describes how a Domains resource is being managed.
    /// </summary>
    [EnumType]
    public readonly struct DomainManagement : IEquatable<DomainManagement>
    {
        private readonly string _value;

        private DomainManagement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainManagement AzureManaged { get; } = new DomainManagement("AzureManaged");
        public static DomainManagement CustomerManaged { get; } = new DomainManagement("CustomerManaged");
        public static DomainManagement CustomerManagedInExchangeOnline { get; } = new DomainManagement("CustomerManagedInExchangeOnline");

        public static bool operator ==(DomainManagement left, DomainManagement right) => left.Equals(right);
        public static bool operator !=(DomainManagement left, DomainManagement right) => !left.Equals(right);

        public static explicit operator string(DomainManagement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainManagement other && Equals(other);
        public bool Equals(DomainManagement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes whether user engagement tracking is enabled or disabled.
    /// </summary>
    [EnumType]
    public readonly struct UserEngagementTracking : IEquatable<UserEngagementTracking>
    {
        private readonly string _value;

        private UserEngagementTracking(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserEngagementTracking Disabled { get; } = new UserEngagementTracking("Disabled");
        public static UserEngagementTracking Enabled { get; } = new UserEngagementTracking("Enabled");

        public static bool operator ==(UserEngagementTracking left, UserEngagementTracking right) => left.Equals(right);
        public static bool operator !=(UserEngagementTracking left, UserEngagementTracking right) => !left.Equals(right);

        public static explicit operator string(UserEngagementTracking value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserEngagementTracking other && Equals(other);
        public bool Equals(UserEngagementTracking other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
