// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Cache.V20201001Preview
{
    public static class GetDatabase
    {
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("azure-nextgen:cache/v20201001preview:getDatabase", args ?? new GetDatabaseArgs(), options.WithVersion());
    }


    public sealed class GetDatabaseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the RedisEnterprise cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("databaseName", required: true)]
        public string DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDatabaseArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
        /// </summary>
        public readonly string? ClientProtocol;
        /// <summary>
        /// Clustering policy - default is OSSCluster. Specified at create time.
        /// </summary>
        public readonly string? ClusteringPolicy;
        /// <summary>
        /// Redis eviction policy - default is VolatileLRU
        /// </summary>
        public readonly string? EvictionPolicy;
        /// <summary>
        /// Optional set of redis modules to enable in this database - modules can only be added at creation time.
        /// </summary>
        public readonly ImmutableArray<Outputs.ModuleResponse> Modules;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Current provisioning status of the database
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Current resource status of the database
        /// </summary>
        public readonly string ResourceState;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDatabaseResult(
            string? clientProtocol,

            string? clusteringPolicy,

            string? evictionPolicy,

            ImmutableArray<Outputs.ModuleResponse> modules,

            string name,

            int? port,

            string provisioningState,

            string resourceState,

            string type)
        {
            ClientProtocol = clientProtocol;
            ClusteringPolicy = clusteringPolicy;
            EvictionPolicy = evictionPolicy;
            Modules = modules;
            Name = name;
            Port = port;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            Type = type;
        }
    }
}
