// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Cache.V20170201.Outputs
{

    [OutputType]
    public sealed class RedisResourcePropertiesResponseResult
    {
        /// <summary>
        /// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
        /// </summary>
        public readonly Outputs.RedisAccessKeysResponseResult AccessKeys;
        /// <summary>
        /// Specifies whether the non-ssl Redis server port (6379) is enabled.
        /// </summary>
        public readonly bool? EnableNonSslPort;
        /// <summary>
        /// Redis host name.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// List of the linked servers associated with the cache
        /// </summary>
        public readonly Outputs.RedisLinkedServerListResponseResult LinkedServers;
        /// <summary>
        /// Redis non-SSL port.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Redis instance provisioning status.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? RedisConfiguration;
        /// <summary>
        /// Redis version.
        /// </summary>
        public readonly string RedisVersion;
        /// <summary>
        /// The number of shards to be created on a Premium Cluster Cache.
        /// </summary>
        public readonly int? ShardCount;
        /// <summary>
        /// The SKU of the Redis cache to deploy.
        /// </summary>
        public readonly Outputs.SkuResponseResult? Sku;
        /// <summary>
        /// Redis SSL port.
        /// </summary>
        public readonly int SslPort;
        /// <summary>
        /// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
        /// </summary>
        public readonly string? StaticIP;
        /// <summary>
        /// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// tenantSettings
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TenantSettings;

        [OutputConstructor]
        private RedisResourcePropertiesResponseResult(
            Outputs.RedisAccessKeysResponseResult accessKeys,

            bool? enableNonSslPort,

            string hostName,

            Outputs.RedisLinkedServerListResponseResult linkedServers,

            int port,

            string provisioningState,

            ImmutableDictionary<string, string>? redisConfiguration,

            string redisVersion,

            int? shardCount,

            Outputs.SkuResponseResult? sku,

            int sslPort,

            string? staticIP,

            string? subnetId,

            ImmutableDictionary<string, string>? tenantSettings)
        {
            AccessKeys = accessKeys;
            EnableNonSslPort = enableNonSslPort;
            HostName = hostName;
            LinkedServers = linkedServers;
            Port = port;
            ProvisioningState = provisioningState;
            RedisConfiguration = redisConfiguration;
            RedisVersion = redisVersion;
            ShardCount = shardCount;
            Sku = sku;
            SslPort = sslPort;
            StaticIP = staticIP;
            SubnetId = subnetId;
            TenantSettings = tenantSettings;
        }
    }
}
