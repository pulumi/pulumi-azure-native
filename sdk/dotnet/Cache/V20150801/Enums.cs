// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Cache.V20150801
{
    /// <summary>
    /// Which family to use. Valid values: (C, P).
    /// </summary>
    [EnumType]
    public readonly struct SkuFamily : IEquatable<SkuFamily>
    {
        private readonly string _value;

        private SkuFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuFamily C { get; } = new SkuFamily("C");
        public static SkuFamily P { get; } = new SkuFamily("P");

        public static bool operator ==(SkuFamily left, SkuFamily right) => left.Equals(right);
        public static bool operator !=(SkuFamily left, SkuFamily right) => !left.Equals(right);

        public static explicit operator string(SkuFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuFamily other && Equals(other);
        public bool Equals(SkuFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Basic { get; } = new SkuName("Basic");
        public static SkuName Standard { get; } = new SkuName("Standard");
        public static SkuName Premium { get; } = new SkuName("Premium");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
