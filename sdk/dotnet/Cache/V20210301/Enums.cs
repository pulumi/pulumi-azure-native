// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Cache.V20210301
{
    /// <summary>
    /// Sets the frequency at which data is written to disk.
    /// </summary>
    [EnumType]
    public readonly struct AofFrequency : IEquatable<AofFrequency>
    {
        private readonly string _value;

        private AofFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AofFrequency AofFrequency_1s { get; } = new AofFrequency("1s");
        public static AofFrequency Always { get; } = new AofFrequency("always");

        public static bool operator ==(AofFrequency left, AofFrequency right) => left.Equals(right);
        public static bool operator !=(AofFrequency left, AofFrequency right) => !left.Equals(right);

        public static explicit operator string(AofFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AofFrequency other && Equals(other);
        public bool Equals(AofFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Clustering policy - default is OSSCluster. Specified at create time.
    /// </summary>
    [EnumType]
    public readonly struct ClusteringPolicy : IEquatable<ClusteringPolicy>
    {
        private readonly string _value;

        private ClusteringPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusteringPolicy EnterpriseCluster { get; } = new ClusteringPolicy("EnterpriseCluster");
        public static ClusteringPolicy OSSCluster { get; } = new ClusteringPolicy("OSSCluster");

        public static bool operator ==(ClusteringPolicy left, ClusteringPolicy right) => left.Equals(right);
        public static bool operator !=(ClusteringPolicy left, ClusteringPolicy right) => !left.Equals(right);

        public static explicit operator string(ClusteringPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusteringPolicy other && Equals(other);
        public bool Equals(ClusteringPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Redis eviction policy - default is VolatileLRU
    /// </summary>
    [EnumType]
    public readonly struct EvictionPolicy : IEquatable<EvictionPolicy>
    {
        private readonly string _value;

        private EvictionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EvictionPolicy AllKeysLFU { get; } = new EvictionPolicy("AllKeysLFU");
        public static EvictionPolicy AllKeysLRU { get; } = new EvictionPolicy("AllKeysLRU");
        public static EvictionPolicy AllKeysRandom { get; } = new EvictionPolicy("AllKeysRandom");
        public static EvictionPolicy VolatileLRU { get; } = new EvictionPolicy("VolatileLRU");
        public static EvictionPolicy VolatileLFU { get; } = new EvictionPolicy("VolatileLFU");
        public static EvictionPolicy VolatileTTL { get; } = new EvictionPolicy("VolatileTTL");
        public static EvictionPolicy VolatileRandom { get; } = new EvictionPolicy("VolatileRandom");
        public static EvictionPolicy NoEviction { get; } = new EvictionPolicy("NoEviction");

        public static bool operator ==(EvictionPolicy left, EvictionPolicy right) => left.Equals(right);
        public static bool operator !=(EvictionPolicy left, EvictionPolicy right) => !left.Equals(right);

        public static explicit operator string(EvictionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EvictionPolicy other && Equals(other);
        public bool Equals(EvictionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
    /// </summary>
    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Protocol Encrypted { get; } = new Protocol("Encrypted");
        public static Protocol Plaintext { get; } = new Protocol("Plaintext");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the frequency at which a snapshot of the database is created.
    /// </summary>
    [EnumType]
    public readonly struct RdbFrequency : IEquatable<RdbFrequency>
    {
        private readonly string _value;

        private RdbFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RdbFrequency RdbFrequency_1h { get; } = new RdbFrequency("1h");
        public static RdbFrequency RdbFrequency_6h { get; } = new RdbFrequency("6h");
        public static RdbFrequency RdbFrequency_12h { get; } = new RdbFrequency("12h");

        public static bool operator ==(RdbFrequency left, RdbFrequency right) => left.Equals(right);
        public static bool operator !=(RdbFrequency left, RdbFrequency right) => !left.Equals(right);

        public static explicit operator string(RdbFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RdbFrequency other && Equals(other);
        public bool Equals(RdbFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Enterprise_E10 { get; } = new SkuName("Enterprise_E10");
        public static SkuName Enterprise_E20 { get; } = new SkuName("Enterprise_E20");
        public static SkuName Enterprise_E50 { get; } = new SkuName("Enterprise_E50");
        public static SkuName Enterprise_E100 { get; } = new SkuName("Enterprise_E100");
        public static SkuName EnterpriseFlash_F300 { get; } = new SkuName("EnterpriseFlash_F300");
        public static SkuName EnterpriseFlash_F700 { get; } = new SkuName("EnterpriseFlash_F700");
        public static SkuName EnterpriseFlash_F1500 { get; } = new SkuName("EnterpriseFlash_F1500");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The minimum TLS version for the cluster to support, e.g. '1.2'
    /// </summary>
    [EnumType]
    public readonly struct TlsVersion : IEquatable<TlsVersion>
    {
        private readonly string _value;

        private TlsVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TlsVersion TlsVersion_1_0 { get; } = new TlsVersion("1.0");
        public static TlsVersion TlsVersion_1_1 { get; } = new TlsVersion("1.1");
        public static TlsVersion TlsVersion_1_2 { get; } = new TlsVersion("1.2");

        public static bool operator ==(TlsVersion left, TlsVersion right) => left.Equals(right);
        public static bool operator !=(TlsVersion left, TlsVersion right) => !left.Equals(right);

        public static explicit operator string(TlsVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TlsVersion other && Equals(other);
        public bool Equals(TlsVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
