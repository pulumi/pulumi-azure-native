// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cache
{
    public static class GetLinkedServer
    {
        /// <summary>
        /// Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
        /// Azure REST API version: 2023-04-01.
        /// 
        /// Other available API versions: 2023-05-01-preview, 2023-08-01, 2024-03-01, 2024-04-01-preview.
        /// </summary>
        public static Task<GetLinkedServerResult> InvokeAsync(GetLinkedServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLinkedServerResult>("azure-native:cache:getLinkedServer", args ?? new GetLinkedServerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
        /// Azure REST API version: 2023-04-01.
        /// 
        /// Other available API versions: 2023-05-01-preview, 2023-08-01, 2024-03-01, 2024-04-01-preview.
        /// </summary>
        public static Output<GetLinkedServerResult> Invoke(GetLinkedServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLinkedServerResult>("azure-native:cache:getLinkedServer", args ?? new GetLinkedServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinkedServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the linked server.
        /// </summary>
        [Input("linkedServerName", required: true)]
        public string LinkedServerName { get; set; } = null!;

        /// <summary>
        /// The name of the redis cache.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLinkedServerArgs()
        {
        }
        public static new GetLinkedServerArgs Empty => new GetLinkedServerArgs();
    }

    public sealed class GetLinkedServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the linked server.
        /// </summary>
        [Input("linkedServerName", required: true)]
        public Input<string> LinkedServerName { get; set; } = null!;

        /// <summary>
        /// The name of the redis cache.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLinkedServerInvokeArgs()
        {
        }
        public static new GetLinkedServerInvokeArgs Empty => new GetLinkedServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLinkedServerResult
    {
        /// <summary>
        /// The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
        /// </summary>
        public readonly string GeoReplicatedPrimaryHostName;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Fully qualified resourceId of the linked redis cache.
        /// </summary>
        public readonly string LinkedRedisCacheId;
        /// <summary>
        /// Location of the linked redis cache.
        /// </summary>
        public readonly string LinkedRedisCacheLocation;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
        /// </summary>
        public readonly string PrimaryHostName;
        /// <summary>
        /// Terminal state of the link between primary and secondary redis cache.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Role of the linked server.
        /// </summary>
        public readonly string ServerRole;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLinkedServerResult(
            string geoReplicatedPrimaryHostName,

            string id,

            string linkedRedisCacheId,

            string linkedRedisCacheLocation,

            string name,

            string primaryHostName,

            string provisioningState,

            string serverRole,

            string type)
        {
            GeoReplicatedPrimaryHostName = geoReplicatedPrimaryHostName;
            Id = id;
            LinkedRedisCacheId = linkedRedisCacheId;
            LinkedRedisCacheLocation = linkedRedisCacheLocation;
            Name = name;
            PrimaryHostName = primaryHostName;
            ProvisioningState = provisioningState;
            ServerRole = serverRole;
            Type = type;
        }
    }
}
