// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cache.V20241001
{
    /// <summary>
    /// Describes a database on the RedisEnterprise cluster
    /// </summary>
    [AzureNativeResourceType("azure-native:cache/v20241001:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
        /// </summary>
        [Output("clientProtocol")]
        public Output<string?> ClientProtocol { get; private set; } = null!;

        /// <summary>
        /// Clustering policy - default is OSSCluster. Specified at create time.
        /// </summary>
        [Output("clusteringPolicy")]
        public Output<string?> ClusteringPolicy { get; private set; } = null!;

        /// <summary>
        /// Redis eviction policy - default is VolatileLRU
        /// </summary>
        [Output("evictionPolicy")]
        public Output<string?> EvictionPolicy { get; private set; } = null!;

        /// <summary>
        /// Optional set of properties to configure geo replication for this database.
        /// </summary>
        [Output("geoReplication")]
        public Output<Outputs.DatabasePropertiesResponseGeoReplication?> GeoReplication { get; private set; } = null!;

        /// <summary>
        /// Optional set of redis modules to enable in this database - modules can only be added at creation time.
        /// </summary>
        [Output("modules")]
        public Output<ImmutableArray<Outputs.ModuleResponse>> Modules { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Persistence settings
        /// </summary>
        [Output("persistence")]
        public Output<Outputs.PersistenceResponse?> Persistence { get; private set; } = null!;

        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// Current provisioning status of the database
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Current resource status of the database
        /// </summary>
        [Output("resourceState")]
        public Output<string> ResourceState { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("azure-native:cache/v20241001:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:cache/v20241001:Database", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:cache:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20201001preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20210201preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20210301:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20210801:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20220101:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20221101preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20230301preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20230701:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20230801preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20231001preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20231101:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20240201:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20240301preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20240601preview:Database" },
                    new global::Pulumi.Alias { Type = "azure-native:cache/v20240901preview:Database" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Database(name, id, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
        /// </summary>
        [Input("clientProtocol")]
        public InputUnion<string, Pulumi.AzureNative.Cache.V20241001.Protocol>? ClientProtocol { get; set; }

        /// <summary>
        /// The name of the Redis Enterprise cluster. Name must be 1-60 characters long. Allowed characters(A-Z, a-z, 0-9) and hyphen(-). There can be no leading nor trailing nor consecutive hyphens
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Clustering policy - default is OSSCluster. Specified at create time.
        /// </summary>
        [Input("clusteringPolicy")]
        public InputUnion<string, Pulumi.AzureNative.Cache.V20241001.ClusteringPolicy>? ClusteringPolicy { get; set; }

        /// <summary>
        /// The name of the Redis Enterprise database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Redis eviction policy - default is VolatileLRU
        /// </summary>
        [Input("evictionPolicy")]
        public InputUnion<string, Pulumi.AzureNative.Cache.V20241001.EvictionPolicy>? EvictionPolicy { get; set; }

        /// <summary>
        /// Optional set of properties to configure geo replication for this database.
        /// </summary>
        [Input("geoReplication")]
        public Input<Inputs.DatabasePropertiesGeoReplicationArgs>? GeoReplication { get; set; }

        [Input("modules")]
        private InputList<Inputs.ModuleArgs>? _modules;

        /// <summary>
        /// Optional set of redis modules to enable in this database - modules can only be added at creation time.
        /// </summary>
        public InputList<Inputs.ModuleArgs> Modules
        {
            get => _modules ?? (_modules = new InputList<Inputs.ModuleArgs>());
            set => _modules = value;
        }

        /// <summary>
        /// Persistence settings
        /// </summary>
        [Input("persistence")]
        public Input<Inputs.PersistenceArgs>? Persistence { get; set; }

        /// <summary>
        /// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }
}
