// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Cache.Inputs
{

    /// <summary>
    /// Properties of the redis cache.
    /// </summary>
    public sealed class RedisPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
        /// </summary>
        [Input("accessKeys", required: true)]
        public Input<Inputs.RedisAccessKeysResponseGetArgs> AccessKeys { get; set; } = null!;

        /// <summary>
        /// Specifies whether the non-ssl Redis server port (6379) is enabled.
        /// </summary>
        [Input("enableNonSslPort")]
        public Input<bool>? EnableNonSslPort { get; set; }

        /// <summary>
        /// Redis host name.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        [Input("linkedServers", required: true)]
        private InputList<Inputs.RedisLinkedServerResponseGetArgs>? _linkedServers;

        /// <summary>
        /// List of the linked servers associated with the cache
        /// </summary>
        public InputList<Inputs.RedisLinkedServerResponseGetArgs> LinkedServers
        {
            get => _linkedServers ?? (_linkedServers = new InputList<Inputs.RedisLinkedServerResponseGetArgs>());
            set => _linkedServers = value;
        }

        /// <summary>
        /// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Redis non-SSL port.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Redis instance provisioning status.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        [Input("redisConfiguration")]
        private InputMap<string>? _redisConfiguration;

        /// <summary>
        /// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
        /// </summary>
        public InputMap<string> RedisConfiguration
        {
            get => _redisConfiguration ?? (_redisConfiguration = new InputMap<string>());
            set => _redisConfiguration = value;
        }

        /// <summary>
        /// Redis version.
        /// </summary>
        [Input("redisVersion", required: true)]
        public Input<string> RedisVersion { get; set; } = null!;

        /// <summary>
        /// The number of shards to be created on a Premium Cluster Cache.
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        /// <summary>
        /// The SKU of the Redis cache to deploy.
        /// </summary>
        [Input("sku", required: true)]
        public Input<Inputs.SkuResponseGetArgs> Sku { get; set; } = null!;

        /// <summary>
        /// Redis SSL port.
        /// </summary>
        [Input("sslPort", required: true)]
        public Input<int> SslPort { get; set; } = null!;

        /// <summary>
        /// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
        /// </summary>
        [Input("staticIP")]
        public Input<string>? StaticIP { get; set; }

        /// <summary>
        /// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tenantSettings")]
        private InputMap<string>? _tenantSettings;

        /// <summary>
        /// A dictionary of tenant settings
        /// </summary>
        public InputMap<string> TenantSettings
        {
            get => _tenantSettings ?? (_tenantSettings = new InputMap<string>());
            set => _tenantSettings = value;
        }

        public RedisPropertiesResponseGetArgs()
        {
        }
    }
}
