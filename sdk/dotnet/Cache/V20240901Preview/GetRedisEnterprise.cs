// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cache.V20240901Preview
{
    public static class GetRedisEnterprise
    {
        /// <summary>
        /// Gets information about a Redis Enterprise cluster
        /// </summary>
        public static Task<GetRedisEnterpriseResult> InvokeAsync(GetRedisEnterpriseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRedisEnterpriseResult>("azure-native:cache/v20240901preview:getRedisEnterprise", args ?? new GetRedisEnterpriseArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Redis Enterprise cluster
        /// </summary>
        public static Output<GetRedisEnterpriseResult> Invoke(GetRedisEnterpriseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRedisEnterpriseResult>("azure-native:cache/v20240901preview:getRedisEnterprise", args ?? new GetRedisEnterpriseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRedisEnterpriseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Redis Enterprise cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRedisEnterpriseArgs()
        {
        }
        public static new GetRedisEnterpriseArgs Empty => new GetRedisEnterpriseArgs();
    }

    public sealed class GetRedisEnterpriseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Redis Enterprise cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetRedisEnterpriseInvokeArgs()
        {
        }
        public static new GetRedisEnterpriseInvokeArgs Empty => new GetRedisEnterpriseInvokeArgs();
    }


    [OutputType]
    public sealed class GetRedisEnterpriseResult
    {
        /// <summary>
        /// Encryption-at-rest configuration for the cluster.
        /// </summary>
        public readonly Outputs.ClusterPropertiesResponseEncryption? Encryption;
        /// <summary>
        /// Enabled by default. If highAvailability is disabled, the data set is not replicated. This affects the availability SLA, and increases the risk of data loss.
        /// </summary>
        public readonly string? HighAvailability;
        /// <summary>
        /// DNS name of the cluster endpoint
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the resource.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The minimum TLS version for the cluster to support, e.g. '1.2'. Newer versions can be added in the future. Note that TLS 1.0 and TLS 1.1 are now completely obsolete -- you cannot use them. They are mentioned only for the sake of consistency with old API versions.
        /// </summary>
        public readonly string? MinimumTlsVersion;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of private endpoint connections associated with the specified Redis Enterprise cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Current provisioning status of the cluster
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Version of redis the cluster supports, e.g. '6'
        /// </summary>
        public readonly string RedisVersion;
        /// <summary>
        /// Explains the current redundancy strategy of the cluster, which affects the expected SLA.
        /// </summary>
        public readonly string RedundancyMode;
        /// <summary>
        /// Current resource status of the cluster
        /// </summary>
        public readonly string ResourceState;
        /// <summary>
        /// The SKU to create, which affects price, performance, and features.
        /// </summary>
        public readonly Outputs.EnterpriseSkuResponse Sku;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The Availability Zones where this cluster will be deployed.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetRedisEnterpriseResult(
            Outputs.ClusterPropertiesResponseEncryption? encryption,

            string? highAvailability,

            string hostName,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string location,

            string? minimumTlsVersion,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string redisVersion,

            string redundancyMode,

            string resourceState,

            Outputs.EnterpriseSkuResponse sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<string> zones)
        {
            Encryption = encryption;
            HighAvailability = highAvailability;
            HostName = hostName;
            Id = id;
            Identity = identity;
            Location = location;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            RedisVersion = redisVersion;
            RedundancyMode = redundancyMode;
            ResourceState = resourceState;
            Sku = sku;
            Tags = tags;
            Type = type;
            Zones = zones;
        }
    }
}
