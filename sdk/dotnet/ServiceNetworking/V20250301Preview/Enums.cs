// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ServiceNetworking.V20250301Preview
{
    /// <summary>
    /// Association Type
    /// </summary>
    [EnumType]
    public readonly struct AssociationType : IEquatable<AssociationType>
    {
        private readonly string _value;

        private AssociationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Association of Type Subnet
        /// </summary>
        public static AssociationType Subnets { get; } = new AssociationType("subnets");

        public static bool operator ==(AssociationType left, AssociationType right) => left.Equals(right);
        public static bool operator !=(AssociationType left, AssociationType right) => !left.Equals(right);

        public static explicit operator string(AssociationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssociationType other && Equals(other);
        public bool Equals(AssociationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action of the Rule
    /// </summary>
    [EnumType]
    public readonly struct IpAccessRuleAction : IEquatable<IpAccessRuleAction>
    {
        private readonly string _value;

        private IpAccessRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Allow Source Ip Prefixes
        /// </summary>
        public static IpAccessRuleAction Allow { get; } = new IpAccessRuleAction("allow");
        /// <summary>
        /// Deny Source Ip Prefixes
        /// </summary>
        public static IpAccessRuleAction Deny { get; } = new IpAccessRuleAction("deny");

        public static bool operator ==(IpAccessRuleAction left, IpAccessRuleAction right) => left.Equals(right);
        public static bool operator !=(IpAccessRuleAction left, IpAccessRuleAction right) => !left.Equals(right);

        public static explicit operator string(IpAccessRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpAccessRuleAction other && Equals(other);
        public bool Equals(IpAccessRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
