// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ServiceNetworking
{
    /// <summary>
    /// Association Type
    /// </summary>
    [EnumType]
    public readonly struct AssociationType : IEquatable<AssociationType>
    {
        private readonly string _value;

        private AssociationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssociationType Subnets { get; } = new AssociationType("subnets");

        public static bool operator ==(AssociationType left, AssociationType right) => left.Equals(right);
        public static bool operator !=(AssociationType left, AssociationType right) => !left.Equals(right);

        public static explicit operator string(AssociationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssociationType other && Equals(other);
        public bool Equals(AssociationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Frontend IP Address Version (Optional).
    /// </summary>
    [EnumType]
    public readonly struct FrontendIPAddressVersion : IEquatable<FrontendIPAddressVersion>
    {
        private readonly string _value;

        private FrontendIPAddressVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontendIPAddressVersion IPv4 { get; } = new FrontendIPAddressVersion("IPv4");
        public static FrontendIPAddressVersion IPv6 { get; } = new FrontendIPAddressVersion("IPv6");

        public static bool operator ==(FrontendIPAddressVersion left, FrontendIPAddressVersion right) => left.Equals(right);
        public static bool operator !=(FrontendIPAddressVersion left, FrontendIPAddressVersion right) => !left.Equals(right);

        public static explicit operator string(FrontendIPAddressVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontendIPAddressVersion other && Equals(other);
        public bool Equals(FrontendIPAddressVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Frontend Mode (Optional).
    /// </summary>
    [EnumType]
    public readonly struct FrontendMode : IEquatable<FrontendMode>
    {
        private readonly string _value;

        private FrontendMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FrontendMode @Public { get; } = new FrontendMode("public");

        public static bool operator ==(FrontendMode left, FrontendMode right) => left.Equals(right);
        public static bool operator !=(FrontendMode left, FrontendMode right) => !left.Equals(right);

        public static explicit operator string(FrontendMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FrontendMode other && Equals(other);
        public bool Equals(FrontendMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
