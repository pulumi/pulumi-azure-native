// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.StorageActions.V20230101
{
    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to be taken when the operation fails for a object.
    /// </summary>
    [EnumType]
    public readonly struct OnFailure : IEquatable<OnFailure>
    {
        private readonly string _value;

        private OnFailure(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OnFailure @Break { get; } = new OnFailure("break");

        public static bool operator ==(OnFailure left, OnFailure right) => left.Equals(right);
        public static bool operator !=(OnFailure left, OnFailure right) => !left.Equals(right);

        public static explicit operator string(OnFailure value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OnFailure other && Equals(other);
        public bool Equals(OnFailure other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to be taken when the operation is successful for a object.
    /// </summary>
    [EnumType]
    public readonly struct OnSuccess : IEquatable<OnSuccess>
    {
        private readonly string _value;

        private OnSuccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OnSuccess @Continue { get; } = new OnSuccess("continue");

        public static bool operator ==(OnSuccess left, OnSuccess right) => left.Equals(right);
        public static bool operator !=(OnSuccess left, OnSuccess right) => !left.Equals(right);

        public static explicit operator string(OnSuccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OnSuccess other && Equals(other);
        public bool Equals(OnSuccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operation to be performed on the object.
    /// </summary>
    [EnumType]
    public readonly struct StorageTaskOperationName : IEquatable<StorageTaskOperationName>
    {
        private readonly string _value;

        private StorageTaskOperationName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageTaskOperationName SetBlobTier { get; } = new StorageTaskOperationName("SetBlobTier");
        public static StorageTaskOperationName SetBlobTags { get; } = new StorageTaskOperationName("SetBlobTags");
        public static StorageTaskOperationName SetBlobImmutabilityPolicy { get; } = new StorageTaskOperationName("SetBlobImmutabilityPolicy");
        public static StorageTaskOperationName SetBlobLegalHold { get; } = new StorageTaskOperationName("SetBlobLegalHold");
        public static StorageTaskOperationName SetBlobExpiry { get; } = new StorageTaskOperationName("SetBlobExpiry");
        public static StorageTaskOperationName DeleteBlob { get; } = new StorageTaskOperationName("DeleteBlob");
        public static StorageTaskOperationName UndeleteBlob { get; } = new StorageTaskOperationName("UndeleteBlob");

        public static bool operator ==(StorageTaskOperationName left, StorageTaskOperationName right) => left.Equals(right);
        public static bool operator !=(StorageTaskOperationName left, StorageTaskOperationName right) => !left.Equals(right);

        public static explicit operator string(StorageTaskOperationName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageTaskOperationName other && Equals(other);
        public bool Equals(StorageTaskOperationName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
