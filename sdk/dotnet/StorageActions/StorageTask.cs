// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageActions
{
    /// <summary>
    /// Represents Storage Task.
    /// Azure REST API version: 2023-01-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:storageactions:StorageTask")]
    public partial class StorageTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The storage task action that is executed
        /// </summary>
        [Output("action")]
        public Output<Outputs.StorageTaskActionResponse> Action { get; private set; } = null!;

        /// <summary>
        /// The creation date and time of the storage task in UTC.
        /// </summary>
        [Output("creationTimeInUtc")]
        public Output<string> CreationTimeInUtc { get; private set; } = null!;

        /// <summary>
        /// Text that describes the purpose of the storage task
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Storage Task is enabled when set to true and disabled when set to false
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The managed service identity of the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Represents the provisioning state of the storage task.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Storage task version.
        /// </summary>
        [Output("taskVersion")]
        public Output<double> TaskVersion { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a StorageTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageTask(string name, StorageTaskArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storageactions:StorageTask", name, args ?? new StorageTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageTask(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storageactions:StorageTask", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:storageactions/v20230101:StorageTask" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageTask Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StorageTask(name, id, options);
        }
    }

    public sealed class StorageTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The storage task action that is executed
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.StorageTaskActionArgs> Action { get; set; } = null!;

        /// <summary>
        /// Text that describes the purpose of the storage task
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Storage Task is enabled when set to true and disabled when set to false
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The managed service identity of the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only.
        /// </summary>
        [Input("storageTaskName")]
        public Input<string>? StorageTaskName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StorageTaskArgs()
        {
        }
        public static new StorageTaskArgs Empty => new StorageTaskArgs();
    }
}
