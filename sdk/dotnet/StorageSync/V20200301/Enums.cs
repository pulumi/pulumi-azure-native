// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.StorageSync.V20200301
{
    /// <summary>
    /// Offline data transfer
    /// </summary>
    [EnumType]
    public readonly struct FeatureStatus : IEquatable<FeatureStatus>
    {
        private readonly string _value;

        private FeatureStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureStatus @On { get; } = new FeatureStatus("on");
        public static FeatureStatus Off { get; } = new FeatureStatus("off");

        public static bool operator ==(FeatureStatus left, FeatureStatus right) => left.Equals(right);
        public static bool operator !=(FeatureStatus left, FeatureStatus right) => !left.Equals(right);

        public static explicit operator string(FeatureStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureStatus other && Equals(other);
        public bool Equals(FeatureStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Incoming Traffic Policy
    /// </summary>
    [EnumType]
    public readonly struct IncomingTrafficPolicy : IEquatable<IncomingTrafficPolicy>
    {
        private readonly string _value;

        private IncomingTrafficPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IncomingTrafficPolicy AllowAllTraffic { get; } = new IncomingTrafficPolicy("AllowAllTraffic");
        public static IncomingTrafficPolicy AllowVirtualNetworksOnly { get; } = new IncomingTrafficPolicy("AllowVirtualNetworksOnly");

        public static bool operator ==(IncomingTrafficPolicy left, IncomingTrafficPolicy right) => left.Equals(right);
        public static bool operator !=(IncomingTrafficPolicy left, IncomingTrafficPolicy right) => !left.Equals(right);

        public static explicit operator string(IncomingTrafficPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncomingTrafficPolicy other && Equals(other);
        public bool Equals(IncomingTrafficPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Policy for how namespace and files are recalled during FastDr.
    /// </summary>
    [EnumType]
    public readonly struct InitialDownloadPolicy : IEquatable<InitialDownloadPolicy>
    {
        private readonly string _value;

        private InitialDownloadPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InitialDownloadPolicy NamespaceOnly { get; } = new InitialDownloadPolicy("NamespaceOnly");
        public static InitialDownloadPolicy NamespaceThenModifiedFiles { get; } = new InitialDownloadPolicy("NamespaceThenModifiedFiles");
        public static InitialDownloadPolicy AvoidTieredFiles { get; } = new InitialDownloadPolicy("AvoidTieredFiles");

        public static bool operator ==(InitialDownloadPolicy left, InitialDownloadPolicy right) => left.Equals(right);
        public static bool operator !=(InitialDownloadPolicy left, InitialDownloadPolicy right) => !left.Equals(right);

        public static explicit operator string(InitialDownloadPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InitialDownloadPolicy other && Equals(other);
        public bool Equals(InitialDownloadPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
    /// </summary>
    [EnumType]
    public readonly struct LocalCacheMode : IEquatable<LocalCacheMode>
    {
        private readonly string _value;

        private LocalCacheMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LocalCacheMode DownloadNewAndModifiedFiles { get; } = new LocalCacheMode("DownloadNewAndModifiedFiles");
        public static LocalCacheMode UpdateLocallyCachedFiles { get; } = new LocalCacheMode("UpdateLocallyCachedFiles");

        public static bool operator ==(LocalCacheMode left, LocalCacheMode right) => left.Equals(right);
        public static bool operator !=(LocalCacheMode left, LocalCacheMode right) => !left.Equals(right);

        public static explicit operator string(LocalCacheMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LocalCacheMode other && Equals(other);
        public bool Equals(LocalCacheMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
