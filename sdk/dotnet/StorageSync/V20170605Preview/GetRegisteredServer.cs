// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.StorageSync.V20170605Preview
{
    public static class GetRegisteredServer
    {
        public static Task<GetRegisteredServerResult> InvokeAsync(GetRegisteredServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegisteredServerResult>("azure-nextgen:storagesync/v20170605preview:getRegisteredServer", args ?? new GetRegisteredServerArgs(), options.WithVersion());
    }


    public sealed class GetRegisteredServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// GUID identifying the on-premises server.
        /// </summary>
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        /// <summary>
        /// Name of Storage Sync Service resource.
        /// </summary>
        [Input("storageSyncServiceName", required: true)]
        public string StorageSyncServiceName { get; set; } = null!;

        public GetRegisteredServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegisteredServerResult
    {
        /// <summary>
        /// Registered Server Agent Version
        /// </summary>
        public readonly string? AgentVersion;
        /// <summary>
        /// Registered Server clusterId
        /// </summary>
        public readonly string? ClusterId;
        /// <summary>
        /// Registered Server clusterName
        /// </summary>
        public readonly string? ClusterName;
        /// <summary>
        /// Registered Server last heart beat
        /// </summary>
        public readonly string? LastHeartBeat;
        /// <summary>
        /// Registered Server lastWorkflowId
        /// </summary>
        public readonly string? LastWorkflowId;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Registered Server Provisioning State
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Registered Server Certificate
        /// </summary>
        public readonly string? ServerCertificate;
        /// <summary>
        /// Registered Server serverId
        /// </summary>
        public readonly string? ServerId;
        /// <summary>
        /// Registered Server Management Error Code
        /// </summary>
        public readonly int? ServerManagementtErrorCode;
        /// <summary>
        /// Registered Server OS Version
        /// </summary>
        public readonly string? ServerOSVersion;
        /// <summary>
        /// Registered Server serverRole
        /// </summary>
        public readonly string? ServerRole;
        /// <summary>
        /// Registered Server storageSyncServiceUid
        /// </summary>
        public readonly string? StorageSyncServiceUid;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegisteredServerResult(
            string? agentVersion,

            string? clusterId,

            string? clusterName,

            string? lastHeartBeat,

            string? lastWorkflowId,

            string name,

            string? provisioningState,

            string? serverCertificate,

            string? serverId,

            int? serverManagementtErrorCode,

            string? serverOSVersion,

            string? serverRole,

            string? storageSyncServiceUid,

            string type)
        {
            AgentVersion = agentVersion;
            ClusterId = clusterId;
            ClusterName = clusterName;
            LastHeartBeat = lastHeartBeat;
            LastWorkflowId = lastWorkflowId;
            Name = name;
            ProvisioningState = provisioningState;
            ServerCertificate = serverCertificate;
            ServerId = serverId;
            ServerManagementtErrorCode = serverManagementtErrorCode;
            ServerOSVersion = serverOSVersion;
            ServerRole = serverRole;
            StorageSyncServiceUid = storageSyncServiceUid;
            Type = type;
        }
    }
}
