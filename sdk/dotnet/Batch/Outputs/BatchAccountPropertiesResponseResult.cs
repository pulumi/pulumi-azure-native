// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Batch.Outputs
{

    [OutputType]
    public sealed class BatchAccountPropertiesResponseResult
    {
        /// <summary>
        /// The account endpoint used to interact with the Batch service.
        /// </summary>
        public readonly string AccountEndpoint;
        public readonly int ActiveJobAndJobScheduleQuota;
        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        public readonly Outputs.AutoStoragePropertiesResponseResult AutoStorage;
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        public readonly int DedicatedCoreQuota;
        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineFamilyCoreQuotaResponseResult> DedicatedCoreQuotaPerVMFamily;
        /// <summary>
        /// Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
        /// </summary>
        public readonly bool DedicatedCoreQuotaPerVMFamilyEnforced;
        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        public readonly Outputs.EncryptionPropertiesResponseResult Encryption;
        /// <summary>
        /// Identifies the Azure key vault associated with a Batch account.
        /// </summary>
        public readonly Outputs.KeyVaultReferenceResponseResult KeyVaultReference;
        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        public readonly int LowPriorityCoreQuota;
        /// <summary>
        /// The allocation mode for creating pools in the Batch account.
        /// </summary>
        public readonly string PoolAllocationMode;
        public readonly int PoolQuota;
        /// <summary>
        /// List of private endpoint connections associated with the Batch account
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponseResult> PrivateEndpointConnections;
        /// <summary>
        /// The provisioned state of the resource
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// If not specified, the default value is 'enabled'.
        /// </summary>
        public readonly string PublicNetworkAccess;

        [OutputConstructor]
        private BatchAccountPropertiesResponseResult(
            string accountEndpoint,

            int activeJobAndJobScheduleQuota,

            Outputs.AutoStoragePropertiesResponseResult autoStorage,

            int dedicatedCoreQuota,

            ImmutableArray<Outputs.VirtualMachineFamilyCoreQuotaResponseResult> dedicatedCoreQuotaPerVMFamily,

            bool dedicatedCoreQuotaPerVMFamilyEnforced,

            Outputs.EncryptionPropertiesResponseResult encryption,

            Outputs.KeyVaultReferenceResponseResult keyVaultReference,

            int lowPriorityCoreQuota,

            string poolAllocationMode,

            int poolQuota,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponseResult> privateEndpointConnections,

            string provisioningState,

            string publicNetworkAccess)
        {
            AccountEndpoint = accountEndpoint;
            ActiveJobAndJobScheduleQuota = activeJobAndJobScheduleQuota;
            AutoStorage = autoStorage;
            DedicatedCoreQuota = dedicatedCoreQuota;
            DedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamily;
            DedicatedCoreQuotaPerVMFamilyEnforced = dedicatedCoreQuotaPerVMFamilyEnforced;
            Encryption = encryption;
            KeyVaultReference = keyVaultReference;
            LowPriorityCoreQuota = lowPriorityCoreQuota;
            PoolAllocationMode = poolAllocationMode;
            PoolQuota = poolQuota;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
        }
    }
}
