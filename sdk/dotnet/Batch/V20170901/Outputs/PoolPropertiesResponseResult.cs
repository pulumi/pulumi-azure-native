// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Batch.V20170901.Outputs
{

    [OutputType]
    public sealed class PoolPropertiesResponseResult
    {
        /// <summary>
        /// Values are:
        /// 
        ///  Steady - The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes.
        ///  Resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool.
        ///  Stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.
        /// </summary>
        public readonly string AllocationState;
        public readonly string AllocationStateTransitionTime;
        /// <summary>
        /// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
        /// </summary>
        public readonly ImmutableArray<string> ApplicationLicenses;
        /// <summary>
        /// Changes to application packages affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationPackageReferenceResponseResult> ApplicationPackages;
        /// <summary>
        /// This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
        /// </summary>
        public readonly Outputs.AutoScaleRunResponseResult AutoScaleRun;
        /// <summary>
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateReferenceResponseResult> Certificates;
        public readonly string CreationTime;
        public readonly int CurrentDedicatedNodes;
        public readonly int CurrentLowPriorityNodes;
        /// <summary>
        /// Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        /// </summary>
        public readonly Outputs.DeploymentConfigurationResponseResult? DeploymentConfiguration;
        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
        /// </summary>
        public readonly string? InterNodeCommunication;
        /// <summary>
        /// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
        /// </summary>
        public readonly string LastModified;
        public readonly int? MaxTasksPerNode;
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
        /// </summary>
        public readonly ImmutableArray<Outputs.MetadataItemResponseResult> Metadata;
        /// <summary>
        /// The network configuration for a pool.
        /// </summary>
        public readonly Outputs.NetworkConfigurationResponseResult? NetworkConfiguration;
        /// <summary>
        /// Values are:
        /// 
        ///  Succeeded - The pool is available to run tasks subject to the availability of compute nodes.
        ///  Deleting - The user has requested that the pool be deleted, but the delete operation has not yet completed.
        /// </summary>
        public readonly string ProvisioningState;
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
        /// </summary>
        public readonly Outputs.ResizeOperationStatusResponseResult ResizeOperationStatus;
        /// <summary>
        /// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
        /// </summary>
        public readonly Outputs.ScaleSettingsResponseResult? ScaleSettings;
        /// <summary>
        /// In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool.
        /// </summary>
        public readonly Outputs.StartTaskResponseResult? StartTask;
        public readonly Outputs.TaskSchedulingPolicyResponseResult? TaskSchedulingPolicy;
        public readonly ImmutableArray<Outputs.UserAccountResponseResult> UserAccounts;
        /// <summary>
        /// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        public readonly string? VmSize;

        [OutputConstructor]
        private PoolPropertiesResponseResult(
            string allocationState,

            string allocationStateTransitionTime,

            ImmutableArray<string> applicationLicenses,

            ImmutableArray<Outputs.ApplicationPackageReferenceResponseResult> applicationPackages,

            Outputs.AutoScaleRunResponseResult autoScaleRun,

            ImmutableArray<Outputs.CertificateReferenceResponseResult> certificates,

            string creationTime,

            int currentDedicatedNodes,

            int currentLowPriorityNodes,

            Outputs.DeploymentConfigurationResponseResult? deploymentConfiguration,

            string? displayName,

            string? interNodeCommunication,

            string lastModified,

            int? maxTasksPerNode,

            ImmutableArray<Outputs.MetadataItemResponseResult> metadata,

            Outputs.NetworkConfigurationResponseResult? networkConfiguration,

            string provisioningState,

            string provisioningStateTransitionTime,

            Outputs.ResizeOperationStatusResponseResult resizeOperationStatus,

            Outputs.ScaleSettingsResponseResult? scaleSettings,

            Outputs.StartTaskResponseResult? startTask,

            Outputs.TaskSchedulingPolicyResponseResult? taskSchedulingPolicy,

            ImmutableArray<Outputs.UserAccountResponseResult> userAccounts,

            string? vmSize)
        {
            AllocationState = allocationState;
            AllocationStateTransitionTime = allocationStateTransitionTime;
            ApplicationLicenses = applicationLicenses;
            ApplicationPackages = applicationPackages;
            AutoScaleRun = autoScaleRun;
            Certificates = certificates;
            CreationTime = creationTime;
            CurrentDedicatedNodes = currentDedicatedNodes;
            CurrentLowPriorityNodes = currentLowPriorityNodes;
            DeploymentConfiguration = deploymentConfiguration;
            DisplayName = displayName;
            InterNodeCommunication = interNodeCommunication;
            LastModified = lastModified;
            MaxTasksPerNode = maxTasksPerNode;
            Metadata = metadata;
            NetworkConfiguration = networkConfiguration;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            ResizeOperationStatus = resizeOperationStatus;
            ScaleSettings = scaleSettings;
            StartTask = startTask;
            TaskSchedulingPolicy = taskSchedulingPolicy;
            UserAccounts = userAccounts;
            VmSize = vmSize;
        }
    }
}
