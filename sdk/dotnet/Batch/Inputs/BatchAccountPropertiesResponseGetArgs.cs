// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Batch.Inputs
{

    /// <summary>
    /// Account specific properties.
    /// </summary>
    public sealed class BatchAccountPropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account endpoint used to interact with the Batch service.
        /// </summary>
        [Input("accountEndpoint", required: true)]
        public Input<string> AccountEndpoint { get; set; } = null!;

        [Input("activeJobAndJobScheduleQuota", required: true)]
        public Input<int> ActiveJobAndJobScheduleQuota { get; set; } = null!;

        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        [Input("autoStorage", required: true)]
        public Input<Inputs.AutoStoragePropertiesResponseGetArgs> AutoStorage { get; set; } = null!;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Input("dedicatedCoreQuota", required: true)]
        public Input<int> DedicatedCoreQuota { get; set; } = null!;

        [Input("dedicatedCoreQuotaPerVMFamily", required: true)]
        private InputList<Inputs.VirtualMachineFamilyCoreQuotaResponseGetArgs>? _dedicatedCoreQuotaPerVMFamily;

        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        public InputList<Inputs.VirtualMachineFamilyCoreQuotaResponseGetArgs> DedicatedCoreQuotaPerVMFamily
        {
            get => _dedicatedCoreQuotaPerVMFamily ?? (_dedicatedCoreQuotaPerVMFamily = new InputList<Inputs.VirtualMachineFamilyCoreQuotaResponseGetArgs>());
            set => _dedicatedCoreQuotaPerVMFamily = value;
        }

        /// <summary>
        /// Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
        /// </summary>
        [Input("dedicatedCoreQuotaPerVMFamilyEnforced", required: true)]
        public Input<bool> DedicatedCoreQuotaPerVMFamilyEnforced { get; set; } = null!;

        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        [Input("encryption", required: true)]
        public Input<Inputs.EncryptionPropertiesResponseGetArgs> Encryption { get; set; } = null!;

        /// <summary>
        /// Identifies the Azure key vault associated with a Batch account.
        /// </summary>
        [Input("keyVaultReference", required: true)]
        public Input<Inputs.KeyVaultReferenceResponseGetArgs> KeyVaultReference { get; set; } = null!;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Input("lowPriorityCoreQuota", required: true)]
        public Input<int> LowPriorityCoreQuota { get; set; } = null!;

        /// <summary>
        /// The allocation mode for creating pools in the Batch account.
        /// </summary>
        [Input("poolAllocationMode", required: true)]
        public Input<string> PoolAllocationMode { get; set; } = null!;

        [Input("poolQuota", required: true)]
        public Input<int> PoolQuota { get; set; } = null!;

        [Input("privateEndpointConnections", required: true)]
        private InputList<Inputs.PrivateEndpointConnectionResponseGetArgs>? _privateEndpointConnections;

        /// <summary>
        /// List of private endpoint connections associated with the Batch account
        /// </summary>
        public InputList<Inputs.PrivateEndpointConnectionResponseGetArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionResponseGetArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// The provisioned state of the resource
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// If not specified, the default value is 'enabled'.
        /// </summary>
        [Input("publicNetworkAccess", required: true)]
        public Input<string> PublicNetworkAccess { get; set; } = null!;

        public BatchAccountPropertiesResponseGetArgs()
        {
        }
    }
}
