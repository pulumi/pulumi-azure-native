// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Batch.Inputs
{

    /// <summary>
    /// Certificate properties.
    /// </summary>
    public sealed class CertificatePropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is only returned when the certificate provisioningState is 'Failed'.
        /// </summary>
        [Input("deleteCertificateError", required: true)]
        public Input<Inputs.DeleteCertificateErrorResponseGetArgs> DeleteCertificateError { get; set; } = null!;

        /// <summary>
        /// The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The previous provisioned state of the resource
        /// </summary>
        [Input("previousProvisioningState", required: true)]
        public Input<string> PreviousProvisioningState { get; set; } = null!;

        [Input("previousProvisioningStateTransitionTime", required: true)]
        public Input<string> PreviousProvisioningStateTransitionTime { get; set; } = null!;

        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        [Input("provisioningStateTransitionTime", required: true)]
        public Input<string> ProvisioningStateTransitionTime { get; set; } = null!;

        /// <summary>
        /// The public key of the certificate.
        /// </summary>
        [Input("publicData", required: true)]
        public Input<string> PublicData { get; set; } = null!;

        /// <summary>
        /// This must match the thumbprint from the name.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        /// <summary>
        /// This must match the first portion of the certificate name. Currently required to be 'SHA1'.
        /// </summary>
        [Input("thumbprintAlgorithm")]
        public Input<string>? ThumbprintAlgorithm { get; set; }

        public CertificatePropertiesResponseGetArgs()
        {
        }
    }
}
