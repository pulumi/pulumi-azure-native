// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Batch.V20220101
{
    /// <summary>
    /// The authentication mode for the Batch account.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        private AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The authentication mode using shared keys.
        /// </summary>
        public static AuthenticationMode SharedKey { get; } = new AuthenticationMode("SharedKey");
        /// <summary>
        /// The authentication mode using Azure Active Directory.
        /// </summary>
        public static AuthenticationMode AAD { get; } = new AuthenticationMode("AAD");
        /// <summary>
        /// The authentication mode using task authentication tokens.
        /// </summary>
        public static AuthenticationMode TaskAuthenticationToken { get; } = new AuthenticationMode("TaskAuthenticationToken");

        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMode other && Equals(other);
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mode which the Batch service will use to manage the auto-storage account.
    /// </summary>
    [EnumType]
    public readonly struct AutoStorageAuthenticationMode : IEquatable<AutoStorageAuthenticationMode>
    {
        private readonly string _value;

        private AutoStorageAuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Batch service will authenticate requests to auto-storage using storage account keys.
        /// </summary>
        public static AutoStorageAuthenticationMode StorageKeys { get; } = new AutoStorageAuthenticationMode("StorageKeys");
        /// <summary>
        /// The Batch service will authenticate requests to auto-storage using the managed identity assigned to the Batch account.
        /// </summary>
        public static AutoStorageAuthenticationMode BatchAccountManagedIdentity { get; } = new AutoStorageAuthenticationMode("BatchAccountManagedIdentity");

        public static bool operator ==(AutoStorageAuthenticationMode left, AutoStorageAuthenticationMode right) => left.Equals(right);
        public static bool operator !=(AutoStorageAuthenticationMode left, AutoStorageAuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(AutoStorageAuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoStorageAuthenticationMode other && Equals(other);
        public bool Equals(AutoStorageAuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the key source.
    /// </summary>
    [EnumType]
    public readonly struct KeySource : IEquatable<KeySource>
    {
        private readonly string _value;

        private KeySource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Batch creates and manages the encryption keys used to protect the account data.
        /// </summary>
        public static KeySource Microsoft_Batch { get; } = new KeySource("Microsoft.Batch");
        /// <summary>
        /// The encryption keys used to protect the account data are stored in an external key vault. If this is set then the Batch Account identity must be set to `SystemAssigned` and a valid Key Identifier must also be supplied under the keyVaultProperties.
        /// </summary>
        public static KeySource Microsoft_KeyVault { get; } = new KeySource("Microsoft.KeyVault");

        public static bool operator ==(KeySource left, KeySource right) => left.Equals(right);
        public static bool operator !=(KeySource left, KeySource right) => !left.Equals(right);

        public static explicit operator string(KeySource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeySource other && Equals(other);
        public bool Equals(KeySource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
    /// </summary>
    [EnumType]
    public readonly struct PoolAllocationMode : IEquatable<PoolAllocationMode>
    {
        private readonly string _value;

        private PoolAllocationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Pools will be allocated in subscriptions owned by the Batch service.
        /// </summary>
        public static PoolAllocationMode BatchService { get; } = new PoolAllocationMode("BatchService");
        /// <summary>
        /// Pools will be allocated in a subscription owned by the user.
        /// </summary>
        public static PoolAllocationMode UserSubscription { get; } = new PoolAllocationMode("UserSubscription");

        public static bool operator ==(PoolAllocationMode left, PoolAllocationMode right) => left.Equals(right);
        public static bool operator !=(PoolAllocationMode left, PoolAllocationMode right) => !left.Equals(right);

        public static explicit operator string(PoolAllocationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PoolAllocationMode other && Equals(other);
        public bool Equals(PoolAllocationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If not specified, the default value is 'enabled'.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enables connectivity to Azure Batch through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        /// <summary>
        /// Disables public connectivity and enables private connectivity to Azure Batch Service through private endpoint resource.
        /// </summary>
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the Batch account.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Batch account has a system assigned identity with it.
        /// </summary>
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        /// <summary>
        /// Batch account has user assigned identities with it.
        /// </summary>
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        /// <summary>
        /// Batch account has no identity associated with it. Setting `None` in update account will remove existing identities.
        /// </summary>
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
