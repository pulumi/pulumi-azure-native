// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Batch.V20190801.Outputs
{

    [OutputType]
    public sealed class CertificatePropertiesResponseResult
    {
        /// <summary>
        /// This is only returned when the certificate provisioningState is 'Failed'.
        /// </summary>
        public readonly Outputs.DeleteCertificateErrorResponseResult DeleteCertificateError;
        /// <summary>
        /// The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The previous provisioned state of the resource
        /// </summary>
        public readonly string PreviousProvisioningState;
        public readonly string PreviousProvisioningStateTransitionTime;
        public readonly string ProvisioningState;
        public readonly string ProvisioningStateTransitionTime;
        /// <summary>
        /// The public key of the certificate.
        /// </summary>
        public readonly string PublicData;
        /// <summary>
        /// This must match the thumbprint from the name.
        /// </summary>
        public readonly string? Thumbprint;
        /// <summary>
        /// This must match the first portion of the certificate name. Currently required to be 'SHA1'.
        /// </summary>
        public readonly string? ThumbprintAlgorithm;

        [OutputConstructor]
        private CertificatePropertiesResponseResult(
            Outputs.DeleteCertificateErrorResponseResult deleteCertificateError,

            string? format,

            string previousProvisioningState,

            string previousProvisioningStateTransitionTime,

            string provisioningState,

            string provisioningStateTransitionTime,

            string publicData,

            string? thumbprint,

            string? thumbprintAlgorithm)
        {
            DeleteCertificateError = deleteCertificateError;
            Format = format;
            PreviousProvisioningState = previousProvisioningState;
            PreviousProvisioningStateTransitionTime = previousProvisioningStateTransitionTime;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            PublicData = publicData;
            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
        }
    }
}
