// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Batch.V20221001
{
    /// <summary>
    /// Contains information about an Azure Batch account.
    /// </summary>
    [AzureNativeResourceType("azure-native:batch/v20221001:BatchAccount")]
    public partial class BatchAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account endpoint used to interact with the Batch service.
        /// </summary>
        [Output("accountEndpoint")]
        public Output<string> AccountEndpoint { get; private set; } = null!;

        [Output("activeJobAndJobScheduleQuota")]
        public Output<int> ActiveJobAndJobScheduleQuota { get; private set; } = null!;

        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane.
        /// </summary>
        [Output("allowedAuthenticationModes")]
        public Output<ImmutableArray<string>> AllowedAuthenticationModes { get; private set; } = null!;

        /// <summary>
        /// Contains information about the auto-storage account associated with a Batch account.
        /// </summary>
        [Output("autoStorage")]
        public Output<Outputs.AutoStoragePropertiesResponse> AutoStorage { get; private set; } = null!;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Output("dedicatedCoreQuota")]
        public Output<int> DedicatedCoreQuota { get; private set; } = null!;

        /// <summary>
        /// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Output("dedicatedCoreQuotaPerVMFamily")]
        public Output<ImmutableArray<Outputs.VirtualMachineFamilyCoreQuotaResponse>> DedicatedCoreQuotaPerVMFamily { get; private set; } = null!;

        /// <summary>
        /// If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property on the account and does not consider Virtual Machine family.
        /// </summary>
        [Output("dedicatedCoreQuotaPerVMFamilyEnforced")]
        public Output<bool> DedicatedCoreQuotaPerVMFamilyEnforced { get; private set; } = null!;

        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.EncryptionPropertiesResponse> Encryption { get; private set; } = null!;

        /// <summary>
        /// The identity of the Batch account.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.BatchAccountIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Identifies the Azure key vault associated with a Batch account.
        /// </summary>
        [Output("keyVaultReference")]
        public Output<Outputs.KeyVaultReferenceResponse> KeyVaultReference { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
        /// </summary>
        [Output("lowPriorityCoreQuota")]
        public Output<int> LowPriorityCoreQuota { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network profile only takes effect when publicNetworkAccess is enabled.
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.NetworkProfileResponse?> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// The endpoint used by compute node to connect to the Batch node management service.
        /// </summary>
        [Output("nodeManagementEndpoint")]
        public Output<string> NodeManagementEndpoint { get; private set; } = null!;

        /// <summary>
        /// The allocation mode for creating pools in the Batch account.
        /// </summary>
        [Output("poolAllocationMode")]
        public Output<string> PoolAllocationMode { get; private set; } = null!;

        [Output("poolQuota")]
        public Output<int> PoolQuota { get; private set; } = null!;

        /// <summary>
        /// List of private endpoint connections associated with the Batch account
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// The provisioned state of the resource
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// If not specified, the default value is 'enabled'.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a BatchAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BatchAccount(string name, BatchAccountArgs args, CustomResourceOptions? options = null)
            : base("azure-native:batch/v20221001:BatchAccount", name, args ?? new BatchAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BatchAccount(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:batch/v20221001:BatchAccount", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:batch:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20151201:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20170101:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20170501:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20170901:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20181201:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20190401:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20190801:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200301:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200501:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20200901:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20210101:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20210601:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20220101:BatchAccount"},
                    new global::Pulumi.Alias { Type = "azure-native:batch/v20220601:BatchAccount"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BatchAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BatchAccount Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new BatchAccount(name, id, options);
        }
    }

    public sealed class BatchAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A name for the Batch account which must be unique within the region. Batch account names must be between 3 and 24 characters in length and must use only numbers and lowercase letters. This name is used as part of the DNS name that is used to access the Batch service in the region in which the account is created. For example: http://accountname.region.batch.azure.com/.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("allowedAuthenticationModes")]
        private InputList<Pulumi.AzureNative.Batch.V20221001.AuthenticationMode>? _allowedAuthenticationModes;

        /// <summary>
        /// List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane.
        /// </summary>
        public InputList<Pulumi.AzureNative.Batch.V20221001.AuthenticationMode> AllowedAuthenticationModes
        {
            get => _allowedAuthenticationModes ?? (_allowedAuthenticationModes = new InputList<Pulumi.AzureNative.Batch.V20221001.AuthenticationMode>());
            set => _allowedAuthenticationModes = value;
        }

        /// <summary>
        /// The properties related to the auto-storage account.
        /// </summary>
        [Input("autoStorage")]
        public Input<Inputs.AutoStorageBasePropertiesArgs>? AutoStorage { get; set; }

        /// <summary>
        /// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.EncryptionPropertiesArgs>? Encryption { get; set; }

        /// <summary>
        /// The identity of the Batch account.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.BatchAccountIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// A reference to the Azure key vault associated with the Batch account.
        /// </summary>
        [Input("keyVaultReference")]
        public Input<Inputs.KeyVaultReferenceArgs>? KeyVaultReference { get; set; }

        /// <summary>
        /// The region in which to create the account.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The network profile only takes effect when publicNetworkAccess is enabled.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService.
        /// </summary>
        [Input("poolAllocationMode")]
        public Input<Pulumi.AzureNative.Batch.V20221001.PoolAllocationMode>? PoolAllocationMode { get; set; }

        /// <summary>
        /// If not specified, the default value is 'enabled'.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<Pulumi.AzureNative.Batch.V20221001.PublicNetworkAccessType>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group that contains the Batch account.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The user-specified tags associated with the account.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public BatchAccountArgs()
        {
        }
        public static new BatchAccountArgs Empty => new BatchAccountArgs();
    }
}
