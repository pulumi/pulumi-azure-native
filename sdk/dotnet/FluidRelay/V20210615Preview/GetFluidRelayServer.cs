// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.FluidRelay.V20210615Preview
{
    public static class GetFluidRelayServer
    {
        /// <summary>
        /// A FluidRelay Server.
        /// </summary>
        public static Task<GetFluidRelayServerResult> InvokeAsync(GetFluidRelayServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFluidRelayServerResult>("azure-native:fluidrelay/v20210615preview:getFluidRelayServer", args ?? new GetFluidRelayServerArgs(), options.WithDefaults());

        /// <summary>
        /// A FluidRelay Server.
        /// </summary>
        public static Output<GetFluidRelayServerResult> Invoke(GetFluidRelayServerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFluidRelayServerResult>("azure-native:fluidrelay/v20210615preview:getFluidRelayServer", args ?? new GetFluidRelayServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFluidRelayServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource group containing the resource.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public string ResourceGroup { get; set; } = null!;

        public GetFluidRelayServerArgs()
        {
        }
        public static new GetFluidRelayServerArgs Empty => new GetFluidRelayServerArgs();
    }

    public sealed class GetFluidRelayServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource group containing the resource.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        public GetFluidRelayServerInvokeArgs()
        {
        }
        public static new GetFluidRelayServerInvokeArgs Empty => new GetFluidRelayServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetFluidRelayServerResult
    {
        /// <summary>
        /// The Fluid Relay Service endpoints for this server.
        /// </summary>
        public readonly Outputs.FluidRelayEndpointsResponse FluidRelayEndpoints;
        /// <summary>
        /// The Fluid tenantId for this server
        /// </summary>
        public readonly string FrsTenantId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of identity used for the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provision states for FluidRelay RP
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// System meta data for this resource, including creation and modification information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFluidRelayServerResult(
            Outputs.FluidRelayEndpointsResponse fluidRelayEndpoints,

            string frsTenantId,

            string id,

            Outputs.IdentityResponse? identity,

            string location,

            string name,

            string? provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            FluidRelayEndpoints = fluidRelayEndpoints;
            FrsTenantId = frsTenantId;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
