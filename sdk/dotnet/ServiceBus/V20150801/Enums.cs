// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ServiceBus.V20150801
{
    [EnumType]
    public readonly struct AccessRights : IEquatable<AccessRights>
    {
        private readonly string _value;

        private AccessRights(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessRights Manage { get; } = new AccessRights("Manage");
        public static AccessRights Send { get; } = new AccessRights("Send");
        public static AccessRights Listen { get; } = new AccessRights("Listen");

        public static bool operator ==(AccessRights left, AccessRights right) => left.Equals(right);
        public static bool operator !=(AccessRights left, AccessRights right) => !left.Equals(right);

        public static explicit operator string(AccessRights value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessRights other && Equals(other);
        public bool Equals(AccessRights other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Entity availability status for the topic.
    /// </summary>
    [EnumType]
    public readonly struct EntityAvailabilityStatus : IEquatable<EntityAvailabilityStatus>
    {
        private readonly string _value;

        private EntityAvailabilityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityAvailabilityStatus Available { get; } = new EntityAvailabilityStatus("Available");
        public static EntityAvailabilityStatus Limited { get; } = new EntityAvailabilityStatus("Limited");
        public static EntityAvailabilityStatus Renaming { get; } = new EntityAvailabilityStatus("Renaming");
        public static EntityAvailabilityStatus Restoring { get; } = new EntityAvailabilityStatus("Restoring");
        public static EntityAvailabilityStatus Unknown { get; } = new EntityAvailabilityStatus("Unknown");

        public static bool operator ==(EntityAvailabilityStatus left, EntityAvailabilityStatus right) => left.Equals(right);
        public static bool operator !=(EntityAvailabilityStatus left, EntityAvailabilityStatus right) => !left.Equals(right);

        public static explicit operator string(EntityAvailabilityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityAvailabilityStatus other && Equals(other);
        public bool Equals(EntityAvailabilityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enumerates the possible values for the status of a messaging entity.
    /// </summary>
    [EnumType]
    public readonly struct EntityStatus : IEquatable<EntityStatus>
    {
        private readonly string _value;

        private EntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityStatus Active { get; } = new EntityStatus("Active");
        public static EntityStatus Creating { get; } = new EntityStatus("Creating");
        public static EntityStatus Deleting { get; } = new EntityStatus("Deleting");
        public static EntityStatus Disabled { get; } = new EntityStatus("Disabled");
        public static EntityStatus ReceiveDisabled { get; } = new EntityStatus("ReceiveDisabled");
        public static EntityStatus Renaming { get; } = new EntityStatus("Renaming");
        public static EntityStatus Restoring { get; } = new EntityStatus("Restoring");
        public static EntityStatus SendDisabled { get; } = new EntityStatus("SendDisabled");
        public static EntityStatus Unknown { get; } = new EntityStatus("Unknown");

        public static bool operator ==(EntityStatus left, EntityStatus right) => left.Equals(right);
        public static bool operator !=(EntityStatus left, EntityStatus right) => !left.Equals(right);

        public static explicit operator string(EntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityStatus other && Equals(other);
        public bool Equals(EntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the namespace.
    /// </summary>
    [EnumType]
    public readonly struct NamespaceState : IEquatable<NamespaceState>
    {
        private readonly string _value;

        private NamespaceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NamespaceState Unknown { get; } = new NamespaceState("Unknown");
        public static NamespaceState Creating { get; } = new NamespaceState("Creating");
        public static NamespaceState Created { get; } = new NamespaceState("Created");
        public static NamespaceState Activating { get; } = new NamespaceState("Activating");
        public static NamespaceState Enabling { get; } = new NamespaceState("Enabling");
        public static NamespaceState Active { get; } = new NamespaceState("Active");
        public static NamespaceState Disabling { get; } = new NamespaceState("Disabling");
        public static NamespaceState Disabled { get; } = new NamespaceState("Disabled");
        public static NamespaceState SoftDeleting { get; } = new NamespaceState("SoftDeleting");
        public static NamespaceState SoftDeleted { get; } = new NamespaceState("SoftDeleted");
        public static NamespaceState Removing { get; } = new NamespaceState("Removing");
        public static NamespaceState Removed { get; } = new NamespaceState("Removed");
        public static NamespaceState Failed { get; } = new NamespaceState("Failed");

        public static bool operator ==(NamespaceState left, NamespaceState right) => left.Equals(right);
        public static bool operator !=(NamespaceState left, NamespaceState right) => !left.Equals(right);

        public static explicit operator string(NamespaceState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamespaceState other && Equals(other);
        public bool Equals(NamespaceState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of this SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Basic { get; } = new SkuName("Basic");
        public static SkuName Standard { get; } = new SkuName("Standard");
        public static SkuName Premium { get; } = new SkuName("Premium");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The billing tier of this particular SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Basic { get; } = new SkuTier("Basic");
        public static SkuTier Standard { get; } = new SkuTier("Standard");
        public static SkuTier Premium { get; } = new SkuTier("Premium");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
