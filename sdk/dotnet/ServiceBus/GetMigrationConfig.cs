// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceBus
{
    public static class GetMigrationConfig
    {
        /// <summary>
        /// Retrieves Migration Config
        /// Azure REST API version: 2022-01-01-preview.
        /// 
        /// Other available API versions: 2022-10-01-preview, 2023-01-01-preview.
        /// </summary>
        public static Task<GetMigrationConfigResult> InvokeAsync(GetMigrationConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMigrationConfigResult>("azure-native:servicebus:getMigrationConfig", args ?? new GetMigrationConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves Migration Config
        /// Azure REST API version: 2022-01-01-preview.
        /// 
        /// Other available API versions: 2022-10-01-preview, 2023-01-01-preview.
        /// </summary>
        public static Output<GetMigrationConfigResult> Invoke(GetMigrationConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMigrationConfigResult>("azure-native:servicebus:getMigrationConfig", args ?? new GetMigrationConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMigrationConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The configuration name. Should always be "$default".
        /// </summary>
        [Input("configName", required: true)]
        public string ConfigName { get; set; } = null!;

        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMigrationConfigArgs()
        {
        }
        public static new GetMigrationConfigArgs Empty => new GetMigrationConfigArgs();
    }

    public sealed class GetMigrationConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The configuration name. Should always be "$default".
        /// </summary>
        [Input("configName", required: true)]
        public Input<string> ConfigName { get; set; } = null!;

        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetMigrationConfigInvokeArgs()
        {
        }
        public static new GetMigrationConfigInvokeArgs Empty => new GetMigrationConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetMigrationConfigResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
        /// </summary>
        public readonly string MigrationState;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of entities pending to be replicated.
        /// </summary>
        public readonly double PendingReplicationOperationsCount;
        /// <summary>
        /// Name to access Standard Namespace after migration
        /// </summary>
        public readonly string PostMigrationName;
        /// <summary>
        /// Provisioning state of Migration Configuration 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Existing premium Namespace ARM Id name which has no entities, will be used for migration
        /// </summary>
        public readonly string TargetNamespace;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMigrationConfigResult(
            string id,

            string location,

            string migrationState,

            string name,

            double pendingReplicationOperationsCount,

            string postMigrationName,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string targetNamespace,

            string type)
        {
            Id = id;
            Location = location;
            MigrationState = migrationState;
            Name = name;
            PendingReplicationOperationsCount = pendingReplicationOperationsCount;
            PostMigrationName = postMigrationName;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            TargetNamespace = targetNamespace;
            Type = type;
        }
    }
}
