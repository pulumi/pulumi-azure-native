// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ServiceBus.Inputs
{

    /// <summary>
    /// The Topic Properties definition.
    /// </summary>
    public sealed class SBTopicPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Last time the message was sent, or a request was received, for this topic.
        /// </summary>
        [Input("accessedAt", required: true)]
        public Input<string> AccessedAt { get; set; } = null!;

        /// <summary>
        /// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
        /// </summary>
        [Input("autoDeleteOnIdle")]
        public Input<string>? AutoDeleteOnIdle { get; set; }

        /// <summary>
        /// Message count details
        /// </summary>
        [Input("countDetails", required: true)]
        public Input<Inputs.MessageCountDetailsResponseArgs> CountDetails { get; set; } = null!;

        /// <summary>
        /// Exact time the message was created.
        /// </summary>
        [Input("createdAt", required: true)]
        public Input<string> CreatedAt { get; set; } = null!;

        /// <summary>
        /// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
        /// </summary>
        [Input("defaultMessageTimeToLive")]
        public Input<string>? DefaultMessageTimeToLive { get; set; }

        /// <summary>
        /// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
        /// </summary>
        [Input("duplicateDetectionHistoryTimeWindow")]
        public Input<string>? DuplicateDetectionHistoryTimeWindow { get; set; }

        /// <summary>
        /// Value that indicates whether server-side batched operations are enabled.
        /// </summary>
        [Input("enableBatchedOperations")]
        public Input<bool>? EnableBatchedOperations { get; set; }

        /// <summary>
        /// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
        /// </summary>
        [Input("enableExpress")]
        public Input<bool>? EnableExpress { get; set; }

        /// <summary>
        /// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
        /// </summary>
        [Input("enablePartitioning")]
        public Input<bool>? EnablePartitioning { get; set; }

        /// <summary>
        /// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
        /// </summary>
        [Input("maxSizeInMegabytes")]
        public Input<int>? MaxSizeInMegabytes { get; set; }

        /// <summary>
        /// Value indicating if this topic requires duplicate detection.
        /// </summary>
        [Input("requiresDuplicateDetection")]
        public Input<bool>? RequiresDuplicateDetection { get; set; }

        /// <summary>
        /// Size of the topic, in bytes.
        /// </summary>
        [Input("sizeInBytes", required: true)]
        public Input<int> SizeInBytes { get; set; } = null!;

        /// <summary>
        /// Enumerates the possible values for the status of a messaging entity.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Number of subscriptions.
        /// </summary>
        [Input("subscriptionCount", required: true)]
        public Input<int> SubscriptionCount { get; set; } = null!;

        /// <summary>
        /// Value that indicates whether the topic supports ordering.
        /// </summary>
        [Input("supportOrdering")]
        public Input<bool>? SupportOrdering { get; set; }

        /// <summary>
        /// The exact time the message was updated.
        /// </summary>
        [Input("updatedAt", required: true)]
        public Input<string> UpdatedAt { get; set; } = null!;

        public SBTopicPropertiesResponseArgs()
        {
        }
    }
}
