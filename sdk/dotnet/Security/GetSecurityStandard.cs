// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security
{
    public static class GetSecurityStandard
    {
        /// <summary>
        /// Get a specific security standard for the requested scope by standardId
        /// Azure REST API version: 2024-08-01.
        /// </summary>
        public static Task<GetSecurityStandardResult> InvokeAsync(GetSecurityStandardArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityStandardResult>("azure-native:security:getSecurityStandard", args ?? new GetSecurityStandardArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific security standard for the requested scope by standardId
        /// Azure REST API version: 2024-08-01.
        /// </summary>
        public static Output<GetSecurityStandardResult> Invoke(GetSecurityStandardInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityStandardResult>("azure-native:security:getSecurityStandard", args ?? new GetSecurityStandardInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityStandardArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        /// <summary>
        /// The Security Standard key - unique key for the standard type
        /// </summary>
        [Input("standardId", required: true)]
        public string StandardId { get; set; } = null!;

        public GetSecurityStandardArgs()
        {
        }
        public static new GetSecurityStandardArgs Empty => new GetSecurityStandardArgs();
    }

    public sealed class GetSecurityStandardInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The Security Standard key - unique key for the standard type
        /// </summary>
        [Input("standardId", required: true)]
        public Input<string> StandardId { get; set; } = null!;

        public GetSecurityStandardInvokeArgs()
        {
        }
        public static new GetSecurityStandardInvokeArgs Empty => new GetSecurityStandardInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityStandardResult
    {
        /// <summary>
        /// List of assessment keys to apply to standard scope.
        /// </summary>
        public readonly ImmutableArray<Outputs.PartialAssessmentPropertiesResponse> Assessments;
        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        public readonly ImmutableArray<string> CloudProviders;
        /// <summary>
        /// Description of the standard
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of the standard, equivalent to the standardId
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The security standard metadata.
        /// </summary>
        public readonly Outputs.StandardMetadataResponse? Metadata;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The policy set definition id associated with the standard.
        /// </summary>
        public readonly string? PolicySetDefinitionId;
        /// <summary>
        /// Standard type (Custom or Default or Compliance only currently)
        /// </summary>
        public readonly string StandardType;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSecurityStandardResult(
            ImmutableArray<Outputs.PartialAssessmentPropertiesResponse> assessments,

            ImmutableArray<string> cloudProviders,

            string? description,

            string? displayName,

            string id,

            Outputs.StandardMetadataResponse? metadata,

            string name,

            string? policySetDefinitionId,

            string standardType,

            string type)
        {
            Assessments = assessments;
            CloudProviders = cloudProviders;
            Description = description;
            DisplayName = displayName;
            Id = id;
            Metadata = metadata;
            Name = name;
            PolicySetDefinitionId = policySetDefinitionId;
            StandardType = standardType;
            Type = type;
        }
    }
}
