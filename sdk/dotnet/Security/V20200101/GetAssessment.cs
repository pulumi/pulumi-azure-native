// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Security.V20200101
{
    public static class GetAssessment
    {
        public static Task<GetAssessmentResult> InvokeAsync(GetAssessmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAssessmentResult>("azure-nextgen:security/v20200101:getAssessment", args ?? new GetAssessmentArgs(), options.WithVersion());
    }


    public sealed class GetAssessmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Assessment Key - Unique key for the assessment type
        /// </summary>
        [Input("assessmentName", required: true)]
        public string AssessmentName { get; set; } = null!;

        /// <summary>
        /// OData expand. Optional.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public string ResourceId { get; set; } = null!;

        public GetAssessmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAssessmentResult
    {
        /// <summary>
        /// Additional data regarding the assessment
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AdditionalData;
        /// <summary>
        /// User friendly display name of the assessment
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Links relevant to the assessment
        /// </summary>
        public readonly Outputs.AssessmentLinksInvokeResponseResult Links;
        /// <summary>
        /// Describes properties of an assessment metadata.
        /// </summary>
        public readonly Outputs.SecurityAssessmentMetadataPropertiesInvokeResponseResult? Metadata;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Data regarding 3rd party partner integration
        /// </summary>
        public readonly Outputs.SecurityAssessmentPartnerDataInvokeResponseResult? PartnersData;
        /// <summary>
        /// Details of the resource that was assessed
        /// </summary>
        public readonly object ResourceDetails;
        /// <summary>
        /// The result of the assessment
        /// </summary>
        public readonly Outputs.AssessmentStatusInvokeResponseResult Status;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAssessmentResult(
            ImmutableDictionary<string, string>? additionalData,

            string displayName,

            string id,

            Outputs.AssessmentLinksInvokeResponseResult links,

            Outputs.SecurityAssessmentMetadataPropertiesInvokeResponseResult? metadata,

            string name,

            Outputs.SecurityAssessmentPartnerDataInvokeResponseResult? partnersData,

            object resourceDetails,

            Outputs.AssessmentStatusInvokeResponseResult status,

            string type)
        {
            AdditionalData = additionalData;
            DisplayName = displayName;
            Id = id;
            Links = links;
            Metadata = metadata;
            Name = name;
            PartnersData = partnersData;
            ResourceDetails = resourceDetails;
            Status = status;
            Type = type;
        }
    }
}
