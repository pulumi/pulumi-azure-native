// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Security.V20250301
{
    /// <summary>
    /// Agentless Enablement states.
    /// </summary>
    [EnumType]
    public readonly struct AgentlessEnablement : IEquatable<AgentlessEnablement>
    {
        private readonly string _value;

        private AgentlessEnablement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentlessEnablement Disabled { get; } = new AgentlessEnablement("Disabled");
        public static AgentlessEnablement Enabled { get; } = new AgentlessEnablement("Enabled");
        public static AgentlessEnablement NotApplicable { get; } = new AgentlessEnablement("NotApplicable");

        public static bool operator ==(AgentlessEnablement left, AgentlessEnablement right) => left.Equals(right);
        public static bool operator !=(AgentlessEnablement left, AgentlessEnablement right) => !left.Equals(right);

        public static explicit operator string(AgentlessEnablement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentlessEnablement other && Equals(other);
        public bool Equals(AgentlessEnablement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AutoDiscovery states.
    /// </summary>
    [EnumType]
    public readonly struct AutoDiscovery : IEquatable<AutoDiscovery>
    {
        private readonly string _value;

        private AutoDiscovery(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutoDiscovery Disabled { get; } = new AutoDiscovery("Disabled");
        public static AutoDiscovery Enabled { get; } = new AutoDiscovery("Enabled");
        public static AutoDiscovery NotApplicable { get; } = new AutoDiscovery("NotApplicable");

        public static bool operator ==(AutoDiscovery left, AutoDiscovery right) => left.Equals(right);
        public static bool operator !=(AutoDiscovery left, AutoDiscovery right) => !left.Equals(right);

        public static explicit operator string(AutoDiscovery value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutoDiscovery other && Equals(other);
        public bool Equals(AutoDiscovery other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Types for inventory kind.
    /// </summary>
    [EnumType]
    public readonly struct InventoryKind : IEquatable<InventoryKind>
    {
        private readonly string _value;

        private InventoryKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InventoryKind AzureDevOpsOrganization { get; } = new InventoryKind("AzureDevOpsOrganization");
        public static InventoryKind AzureDevOpsProject { get; } = new InventoryKind("AzureDevOpsProject");
        public static InventoryKind AzureDevOpsRepository { get; } = new InventoryKind("AzureDevOpsRepository");
        public static InventoryKind GitHubOwner { get; } = new InventoryKind("GitHubOwner");
        public static InventoryKind GitHubRepository { get; } = new InventoryKind("GitHubRepository");

        public static bool operator ==(InventoryKind left, InventoryKind right) => left.Equals(right);
        public static bool operator !=(InventoryKind left, InventoryKind right) => !left.Equals(right);

        public static explicit operator string(InventoryKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InventoryKind other && Equals(other);
        public bool Equals(InventoryKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Types for inventory list.
    /// </summary>
    [EnumType]
    public readonly struct InventoryListKind : IEquatable<InventoryListKind>
    {
        private readonly string _value;

        private InventoryListKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InventoryListKind Inclusion { get; } = new InventoryListKind("Inclusion");
        public static InventoryListKind Exclusion { get; } = new InventoryListKind("Exclusion");

        public static bool operator ==(InventoryListKind left, InventoryListKind right) => left.Equals(right);
        public static bool operator !=(InventoryListKind left, InventoryListKind right) => !left.Equals(right);

        public static explicit operator string(InventoryListKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InventoryListKind other && Equals(other);
        public bool Equals(InventoryListKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
