// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Security.V20190101Preview
{
    /// <summary>
    /// The type of the action that will be triggered by the Automation
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType LogicApp { get; } = new ActionType("LogicApp");
        public static ActionType EventHub { get; } = new ActionType("EventHub");
        public static ActionType Workspace { get; } = new ActionType("Workspace");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Programmatic code for the status of the assessment
    /// </summary>
    [EnumType]
    public readonly struct AssessmentStatusCode : IEquatable<AssessmentStatusCode>
    {
        private readonly string _value;

        private AssessmentStatusCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The resource is healthy
        /// </summary>
        public static AssessmentStatusCode Healthy { get; } = new AssessmentStatusCode("Healthy");
        /// <summary>
        /// The resource has a security issue that needs to be addressed
        /// </summary>
        public static AssessmentStatusCode Unhealthy { get; } = new AssessmentStatusCode("Unhealthy");
        /// <summary>
        /// Assessment for this resource did not happen
        /// </summary>
        public static AssessmentStatusCode NotApplicable { get; } = new AssessmentStatusCode("NotApplicable");

        public static bool operator ==(AssessmentStatusCode left, AssessmentStatusCode right) => left.Equals(right);
        public static bool operator !=(AssessmentStatusCode left, AssessmentStatusCode right) => !left.Equals(right);

        public static explicit operator string(AssessmentStatusCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentStatusCode other && Equals(other);
        public bool Equals(AssessmentStatusCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
    /// </summary>
    [EnumType]
    public readonly struct AssessmentType : IEquatable<AssessmentType>
    {
        private readonly string _value;

        private AssessmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Security Center managed assessments
        /// </summary>
        public static AssessmentType BuiltIn { get; } = new AssessmentType("BuiltIn");
        /// <summary>
        /// User defined policies that are automatically ingested from Azure Policy to Azure Security Center
        /// </summary>
        public static AssessmentType CustomPolicy { get; } = new AssessmentType("CustomPolicy");
        /// <summary>
        /// User assessments pushed directly by the user or other third party to Azure Security Center
        /// </summary>
        public static AssessmentType CustomerManaged { get; } = new AssessmentType("CustomerManaged");

        public static bool operator ==(AssessmentType left, AssessmentType right) => left.Equals(right);
        public static bool operator !=(AssessmentType left, AssessmentType right) => !left.Equals(right);

        public static explicit operator string(AssessmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentType other && Equals(other);
        public bool Equals(AssessmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The category of resource that is at risk when the assessment is unhealthy
    /// </summary>
    [EnumType]
    public readonly struct Category : IEquatable<Category>
    {
        private readonly string _value;

        private Category(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Category Compute { get; } = new Category("Compute");
        public static Category Networking { get; } = new Category("Networking");
        public static Category Data { get; } = new Category("Data");
        public static Category IdentityAndAccess { get; } = new Category("IdentityAndAccess");
        public static Category IoT { get; } = new Category("IoT");

        public static bool operator ==(Category left, Category right) => left.Equals(right);
        public static bool operator !=(Category left, Category right) => !left.Equals(right);

        public static explicit operator string(Category value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Category other && Equals(other);
        public bool Equals(Category other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A valid event source type.
    /// </summary>
    [EnumType]
    public readonly struct EventSource : IEquatable<EventSource>
    {
        private readonly string _value;

        private EventSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventSource Assessments { get; } = new EventSource("Assessments");
        public static EventSource SubAssessments { get; } = new EventSource("SubAssessments");
        public static EventSource Alerts { get; } = new EventSource("Alerts");
        public static EventSource SecureScores { get; } = new EventSource("SecureScores");
        public static EventSource SecureScoreControls { get; } = new EventSource("SecureScoreControls");

        public static bool operator ==(EventSource left, EventSource right) => left.Equals(right);
        public static bool operator !=(EventSource left, EventSource right) => !left.Equals(right);

        public static explicit operator string(EventSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventSource other && Equals(other);
        public bool Equals(EventSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The implementation effort required to remediate this assessment
    /// </summary>
    [EnumType]
    public readonly struct ImplementationEffort : IEquatable<ImplementationEffort>
    {
        private readonly string _value;

        private ImplementationEffort(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImplementationEffort Low { get; } = new ImplementationEffort("Low");
        public static ImplementationEffort Moderate { get; } = new ImplementationEffort("Moderate");
        public static ImplementationEffort High { get; } = new ImplementationEffort("High");

        public static bool operator ==(ImplementationEffort left, ImplementationEffort right) => left.Equals(right);
        public static bool operator !=(ImplementationEffort left, ImplementationEffort right) => !left.Equals(right);

        public static explicit operator string(ImplementationEffort value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImplementationEffort other && Equals(other);
        public bool Equals(ImplementationEffort other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator EqualsValue { get; } = new Operator("Equals");
        public static Operator GreaterThan { get; } = new Operator("GreaterThan");
        public static Operator GreaterThanOrEqualTo { get; } = new Operator("GreaterThanOrEqualTo");
        public static Operator LesserThan { get; } = new Operator("LesserThan");
        public static Operator LesserThanOrEqualTo { get; } = new Operator("LesserThanOrEqualTo");
        public static Operator NotEquals { get; } = new Operator("NotEquals");
        public static Operator Contains { get; } = new Operator("Contains");
        public static Operator StartsWith { get; } = new Operator("StartsWith");
        public static Operator EndsWith { get; } = new Operator("EndsWith");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
    /// </summary>
    [EnumType]
    public readonly struct PropertyType : IEquatable<PropertyType>
    {
        private readonly string _value;

        private PropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PropertyType String { get; } = new PropertyType("String");
        public static PropertyType Integer { get; } = new PropertyType("Integer");
        public static PropertyType Number { get; } = new PropertyType("Number");
        public static PropertyType Boolean { get; } = new PropertyType("Boolean");

        public static bool operator ==(PropertyType left, PropertyType right) => left.Equals(right);
        public static bool operator !=(PropertyType left, PropertyType right) => !left.Equals(right);

        public static explicit operator string(PropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PropertyType other && Equals(other);
        public bool Equals(PropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Possible states of the rule
    /// </summary>
    [EnumType]
    public readonly struct RuleState : IEquatable<RuleState>
    {
        private readonly string _value;

        private RuleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleState Enabled { get; } = new RuleState("Enabled");
        public static RuleState Disabled { get; } = new RuleState("Disabled");
        public static RuleState Expired { get; } = new RuleState("Expired");

        public static bool operator ==(RuleState left, RuleState right) => left.Equals(right);
        public static bool operator !=(RuleState left, RuleState right) => !left.Equals(right);

        public static explicit operator string(RuleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleState other && Equals(other);
        public bool Equals(RuleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity level of the assessment
    /// </summary>
    [EnumType]
    public readonly struct Severity : IEquatable<Severity>
    {
        private readonly string _value;

        private Severity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Severity Low { get; } = new Severity("Low");
        public static Severity Medium { get; } = new Severity("Medium");
        public static Severity High { get; } = new Severity("High");

        public static bool operator ==(Severity left, Severity right) => left.Equals(right);
        public static bool operator !=(Severity left, Severity right) => !left.Equals(right);

        public static explicit operator string(Severity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Severity other && Equals(other);
        public bool Equals(Severity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The platform where the assessed resource resides
    /// </summary>
    [EnumType]
    public readonly struct Source : IEquatable<Source>
    {
        private readonly string _value;

        private Source(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resource is in Azure
        /// </summary>
        public static Source Azure { get; } = new Source("Azure");
        /// <summary>
        /// Resource in an on premise machine connected to Azure cloud
        /// </summary>
        public static Source OnPremise { get; } = new Source("OnPremise");
        /// <summary>
        /// SQL Resource in an on premise machine connected to Azure cloud
        /// </summary>
        public static Source OnPremiseSql { get; } = new Source("OnPremiseSql");

        public static bool operator ==(Source left, Source right) => left.Equals(right);
        public static bool operator !=(Source left, Source right) => !left.Equals(right);

        public static explicit operator string(Source value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Source other && Equals(other);
        public bool Equals(Source other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Threats impact of the assessment
    /// </summary>
    [EnumType]
    public readonly struct Threats : IEquatable<Threats>
    {
        private readonly string _value;

        private Threats(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Threats AccountBreach { get; } = new Threats("accountBreach");
        public static Threats DataExfiltration { get; } = new Threats("dataExfiltration");
        public static Threats DataSpillage { get; } = new Threats("dataSpillage");
        public static Threats MaliciousInsider { get; } = new Threats("maliciousInsider");
        public static Threats ElevationOfPrivilege { get; } = new Threats("elevationOfPrivilege");
        public static Threats ThreatResistance { get; } = new Threats("threatResistance");
        public static Threats MissingCoverage { get; } = new Threats("missingCoverage");
        public static Threats DenialOfService { get; } = new Threats("denialOfService");

        public static bool operator ==(Threats left, Threats right) => left.Equals(right);
        public static bool operator !=(Threats left, Threats right) => !left.Equals(right);

        public static explicit operator string(Threats value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Threats other && Equals(other);
        public bool Equals(Threats other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The user impact of the assessment
    /// </summary>
    [EnumType]
    public readonly struct UserImpact : IEquatable<UserImpact>
    {
        private readonly string _value;

        private UserImpact(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserImpact Low { get; } = new UserImpact("Low");
        public static UserImpact Moderate { get; } = new UserImpact("Moderate");
        public static UserImpact High { get; } = new UserImpact("High");

        public static bool operator ==(UserImpact left, UserImpact right) => left.Equals(right);
        public static bool operator !=(UserImpact left, UserImpact right) => !left.Equals(right);

        public static explicit operator string(UserImpact value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserImpact other && Equals(other);
        public bool Equals(UserImpact other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
