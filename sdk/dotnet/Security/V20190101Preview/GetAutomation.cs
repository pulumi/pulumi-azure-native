// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Security.V20190101Preview
{
    public static class GetAutomation
    {
        public static Task<GetAutomationResult> InvokeAsync(GetAutomationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAutomationResult>("azure-nextgen:security/v20190101preview:getAutomation", args ?? new GetAutomationArgs(), options.WithVersion());
    }


    public sealed class GetAutomationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The security automation name.
        /// </summary>
        [Input("automationName", required: true)]
        public string AutomationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAutomationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAutomationResult
    {
        /// <summary>
        /// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
        /// </summary>
        public readonly ImmutableArray<Union<Outputs.AutomationActionEventHubResponse, Union<Outputs.AutomationActionLogicAppResponse, Outputs.AutomationActionWorkspaceResponse>>> Actions;
        /// <summary>
        /// The security automation description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Indicates whether the security automation is enabled.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// Kind of the resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
        /// </summary>
        public readonly ImmutableArray<Outputs.AutomationScopeResponse> Scopes;
        /// <summary>
        /// A collection of the source event types which evaluate the security automation set of rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.AutomationSourceResponse> Sources;
        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAutomationResult(
            ImmutableArray<Union<Outputs.AutomationActionEventHubResponse, Union<Outputs.AutomationActionLogicAppResponse, Outputs.AutomationActionWorkspaceResponse>>> actions,

            string? description,

            string? etag,

            bool? isEnabled,

            string? kind,

            string? location,

            string name,

            ImmutableArray<Outputs.AutomationScopeResponse> scopes,

            ImmutableArray<Outputs.AutomationSourceResponse> sources,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Actions = actions;
            Description = description;
            Etag = etag;
            IsEnabled = isEnabled;
            Kind = kind;
            Location = location;
            Name = name;
            Scopes = scopes;
            Sources = sources;
            Tags = tags;
            Type = type;
        }
    }
}
