// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20240101
{
    /// <summary>
    /// Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
    /// </summary>
    [AzureNativeResourceType("azure-native:security/v20240101:Pricing")]
    public partial class Pricing : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional. True if the plan is deprecated. If there are replacing plans they will appear in `replacedBy` property
        /// </summary>
        [Output("deprecated")]
        public Output<bool> Deprecated { get; private set; } = null!;

        /// <summary>
        /// Optional. If `pricingTier` is `Standard` then this property holds the date of the last time the `pricingTier` was set to `Standard`, when available (e.g 2023-03-01T12:42:42.1921106Z).
        /// </summary>
        [Output("enablementTime")]
        public Output<string> EnablementTime { get; private set; } = null!;

        /// <summary>
        /// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        /// </summary>
        [Output("enforce")]
        public Output<string?> Enforce { get; private set; } = null!;

        /// <summary>
        /// Optional. List of extensions offered under a plan.
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<Outputs.ExtensionResponse>> Extensions { get; private set; } = null!;

        /// <summary>
        /// The duration left for the subscriptions free trial period - in ISO 8601 format (e.g. P3Y6M4DT12H30M5S).
        /// </summary>
        [Output("freeTrialRemainingTime")]
        public Output<string> FreeTrialRemainingTime { get; private set; } = null!;

        /// <summary>
        /// "inherited" = "True" indicates that the current scope inherits its pricing configuration from its parent. The ID of the parent scope that provides the inherited configuration is displayed in the "inheritedFrom" field. On the other hand, "inherited" = "False" indicates that the current scope has its own pricing configuration explicitly set, and does not inherit from its parent. This field is read only and available only for resource-level pricing.
        /// </summary>
        [Output("inherited")]
        public Output<string> Inherited { get; private set; } = null!;

        /// <summary>
        /// The id of the scope inherited from. "Null" if not inherited. This field is only available for resource-level pricing.
        /// </summary>
        [Output("inheritedFrom")]
        public Output<string> InheritedFrom { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        /// </summary>
        [Output("pricingTier")]
        public Output<string> PricingTier { get; private set; } = null!;

        /// <summary>
        /// Optional. List of plans that replace this plan. This property exists only if this plan is deprecated.
        /// </summary>
        [Output("replacedBy")]
        public Output<ImmutableArray<string>> ReplacedBy { get; private set; } = null!;

        /// <summary>
        /// This field is available for subscription-level only, and reflects the coverage status of the resources under the subscription. Please note: The "pricingTier" field reflects the plan status of the subscription. However, since the plan status can also be defined at the resource level, there might be misalignment between the subscription's plan status and the resource status. This field helps indicate the coverage status of the resources.
        /// </summary>
        [Output("resourcesCoverageStatus")]
        public Output<string> ResourcesCoverageStatus { get; private set; } = null!;

        /// <summary>
        /// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' &amp; 'P2', where for resource level only 'P1' sub plan is supported.
        /// </summary>
        [Output("subPlan")]
        public Output<string?> SubPlan { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Pricing resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pricing(string name, PricingArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security/v20240101:Pricing", name, args ?? new PricingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pricing(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security/v20240101:Pricing", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:security:Pricing" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pricing resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pricing Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pricing(name, id, options);
        }
    }

    public sealed class PricingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to "False", it allows the descendants of this scope to override the pricing configuration set on this scope (allows setting inherited="False"). If set to "True", it prevents overrides and forces this pricing configuration on all the descendants of this scope. This field is only available for subscription-level pricing.
        /// </summary>
        [Input("enforce")]
        public InputUnion<string, Pulumi.AzureNative.Security.V20240101.Enforce>? Enforce { get; set; }

        [Input("extensions")]
        private InputList<Inputs.ExtensionArgs>? _extensions;

        /// <summary>
        /// Optional. List of extensions offered under a plan.
        /// </summary>
        public InputList<Inputs.ExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.ExtensionArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// name of the pricing configuration
        /// </summary>
        [Input("pricingName")]
        public Input<string>? PricingName { get; set; }

        /// <summary>
        /// Indicates whether the Defender plan is enabled on the selected scope. Microsoft Defender for Cloud is provided in two pricing tiers: free and standard. The standard tier offers advanced security capabilities, while the free tier offers basic security features.
        /// </summary>
        [Input("pricingTier", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Security.V20240101.PricingTier> PricingTier { get; set; } = null!;

        /// <summary>
        /// The scope id of the pricing. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or a specific resource (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}) - Supported resources are (VirtualMachines)
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        /// <summary>
        /// The sub-plan selected for a Standard pricing configuration, when more than one sub-plan is available. Each sub-plan enables a set of security features. When not specified, full plan is applied. For VirtualMachines plan, available sub plans are 'P1' &amp; 'P2', where for resource level only 'P1' sub plan is supported.
        /// </summary>
        [Input("subPlan")]
        public Input<string>? SubPlan { get; set; }

        public PricingArgs()
        {
        }
        public static new PricingArgs Empty => new PricingArgs();
    }
}
