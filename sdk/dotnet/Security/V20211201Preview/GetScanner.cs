// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.AzureNative.Security.V20211201Preview
{
    public static class GetScanner
    {
        /// <summary>
        /// Security Scanner resource
        /// </summary>
        public static Task<GetScannerResult> InvokeAsync(GetScannerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScannerResult>("azure-native:security/v20211201preview:getScanner", args ?? new GetScannerArgs(), options.WithVersion());

        /// <summary>
        /// Security Scanner resource
        /// </summary>
        public static Output<GetScannerResult> Invoke(GetScannerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScannerResult>("azure-native:security/v20211201preview:getScanner", args ?? new GetScannerInvokeArgs(), options.WithVersion());
    }


    public sealed class GetScannerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Security scanner name
        /// </summary>
        [Input("scannerName", required: true)]
        public string ScannerName { get; set; } = null!;

        public GetScannerArgs()
        {
        }
    }

    public sealed class GetScannerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Security scanner name
        /// </summary>
        [Input("scannerName", required: true)]
        public Input<string> ScannerName { get; set; } = null!;

        public GetScannerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetScannerResult
    {
        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of the resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScannerResult(
            string? etag,

            string id,

            string? kind,

            string? location,

            string name,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Etag = etag;
            Id = id;
            Kind = kind;
            Location = location;
            Name = name;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
