// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Security.V20210701Preview
{
    /// <summary>
    /// The multi cloud resource's cloud name.
    /// </summary>
    [EnumType]
    public readonly struct CloudName : IEquatable<CloudName>
    {
        private readonly string _value;

        private CloudName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CloudName Azure { get; } = new CloudName("Azure");
        public static CloudName AWS { get; } = new CloudName("AWS");
        public static CloudName GCP { get; } = new CloudName("GCP");

        public static bool operator ==(CloudName left, CloudName right) => left.Equals(right);
        public static bool operator !=(CloudName left, CloudName right) => !left.Equals(right);

        public static explicit operator string(CloudName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudName other && Equals(other);
        public bool Equals(CloudName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the security offering.
    /// </summary>
    [EnumType]
    public readonly struct OfferingType : IEquatable<OfferingType>
    {
        private readonly string _value;

        private OfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OfferingType CspmMonitorAws { get; } = new OfferingType("CspmMonitorAws");
        public static OfferingType DefenderForContainersAws { get; } = new OfferingType("DefenderForContainersAws");
        public static OfferingType DefenderForServersAws { get; } = new OfferingType("DefenderForServersAws");
        public static OfferingType InformationProtectionAws { get; } = new OfferingType("InformationProtectionAws");

        public static bool operator ==(OfferingType left, OfferingType right) => left.Equals(right);
        public static bool operator !=(OfferingType left, OfferingType right) => !left.Equals(right);

        public static explicit operator string(OfferingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OfferingType other && Equals(other);
        public bool Equals(OfferingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The multi cloud account's membership type in the organization
    /// </summary>
    [EnumType]
    public readonly struct OrganizationMembershipType : IEquatable<OrganizationMembershipType>
    {
        private readonly string _value;

        private OrganizationMembershipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrganizationMembershipType Member { get; } = new OrganizationMembershipType("Member");
        public static OrganizationMembershipType Organization { get; } = new OrganizationMembershipType("Organization");

        public static bool operator ==(OrganizationMembershipType left, OrganizationMembershipType right) => left.Equals(right);
        public static bool operator !=(OrganizationMembershipType left, OrganizationMembershipType right) => !left.Equals(right);

        public static explicit operator string(OrganizationMembershipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationMembershipType other && Equals(other);
        public bool Equals(OrganizationMembershipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity to relate to the assessments generated by this assessment automation.
    /// </summary>
    [EnumType]
    public readonly struct SeverityEnum : IEquatable<SeverityEnum>
    {
        private readonly string _value;

        private SeverityEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SeverityEnum High { get; } = new SeverityEnum("High");
        public static SeverityEnum Medium { get; } = new SeverityEnum("Medium");
        public static SeverityEnum Low { get; } = new SeverityEnum("Low");

        public static bool operator ==(SeverityEnum left, SeverityEnum right) => left.Equals(right);
        public static bool operator !=(SeverityEnum left, SeverityEnum right) => !left.Equals(right);

        public static explicit operator string(SeverityEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SeverityEnum other && Equals(other);
        public bool Equals(SeverityEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Relevant cloud for the custom assessment automation.
    /// </summary>
    [EnumType]
    public readonly struct SupportedCloudEnum : IEquatable<SupportedCloudEnum>
    {
        private readonly string _value;

        private SupportedCloudEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SupportedCloudEnum AWS { get; } = new SupportedCloudEnum("AWS");
        public static SupportedCloudEnum GCP { get; } = new SupportedCloudEnum("GCP");

        public static bool operator ==(SupportedCloudEnum left, SupportedCloudEnum right) => left.Equals(right);
        public static bool operator !=(SupportedCloudEnum left, SupportedCloudEnum right) => !left.Equals(right);

        public static explicit operator string(SupportedCloudEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportedCloudEnum other && Equals(other);
        public bool Equals(SupportedCloudEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
