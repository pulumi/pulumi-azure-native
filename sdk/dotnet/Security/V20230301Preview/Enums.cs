// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Security.V20230301Preview
{
    /// <summary>
    /// The multi cloud resource's cloud name.
    /// </summary>
    [EnumType]
    public readonly struct CloudName : IEquatable<CloudName>
    {
        private readonly string _value;

        private CloudName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CloudName Azure { get; } = new CloudName("Azure");
        public static CloudName AWS { get; } = new CloudName("AWS");
        public static CloudName GCP { get; } = new CloudName("GCP");
        public static CloudName Github { get; } = new CloudName("Github");
        public static CloudName AzureDevOps { get; } = new CloudName("AzureDevOps");
        public static CloudName GitLab { get; } = new CloudName("GitLab");

        public static bool operator ==(CloudName left, CloudName right) => left.Equals(right);
        public static bool operator !=(CloudName left, CloudName right) => !left.Equals(right);

        public static explicit operator string(CloudName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CloudName other && Equals(other);
        public bool Equals(CloudName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the environment data.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentType : IEquatable<EnvironmentType>
    {
        private readonly string _value;

        private EnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentType AwsAccount { get; } = new EnvironmentType("AwsAccount");
        public static EnvironmentType GcpProject { get; } = new EnvironmentType("GcpProject");
        public static EnvironmentType GithubScope { get; } = new EnvironmentType("GithubScope");
        public static EnvironmentType AzureDevOpsScope { get; } = new EnvironmentType("AzureDevOpsScope");
        public static EnvironmentType GitlabScope { get; } = new EnvironmentType("GitlabScope");

        public static bool operator ==(EnvironmentType left, EnvironmentType right) => left.Equals(right);
        public static bool operator !=(EnvironmentType left, EnvironmentType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentType other && Equals(other);
        public bool Equals(EnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the security offering.
    /// </summary>
    [EnumType]
    public readonly struct OfferingType : IEquatable<OfferingType>
    {
        private readonly string _value;

        private OfferingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OfferingType CspmMonitorAws { get; } = new OfferingType("CspmMonitorAws");
        public static OfferingType DefenderForContainersAws { get; } = new OfferingType("DefenderForContainersAws");
        public static OfferingType DefenderForServersAws { get; } = new OfferingType("DefenderForServersAws");
        public static OfferingType DefenderForDatabasesAws { get; } = new OfferingType("DefenderForDatabasesAws");
        public static OfferingType InformationProtectionAws { get; } = new OfferingType("InformationProtectionAws");
        public static OfferingType CspmMonitorGcp { get; } = new OfferingType("CspmMonitorGcp");
        public static OfferingType CspmMonitorGithub { get; } = new OfferingType("CspmMonitorGithub");
        public static OfferingType CspmMonitorAzureDevOps { get; } = new OfferingType("CspmMonitorAzureDevOps");
        public static OfferingType DefenderForServersGcp { get; } = new OfferingType("DefenderForServersGcp");
        public static OfferingType DefenderForContainersGcp { get; } = new OfferingType("DefenderForContainersGcp");
        public static OfferingType DefenderForDatabasesGcp { get; } = new OfferingType("DefenderForDatabasesGcp");
        public static OfferingType DefenderCspmAws { get; } = new OfferingType("DefenderCspmAws");
        public static OfferingType DefenderCspmGcp { get; } = new OfferingType("DefenderCspmGcp");
        public static OfferingType DefenderForDevOpsGithub { get; } = new OfferingType("DefenderForDevOpsGithub");
        public static OfferingType DefenderForDevOpsAzureDevOps { get; } = new OfferingType("DefenderForDevOpsAzureDevOps");
        public static OfferingType CspmMonitorGitLab { get; } = new OfferingType("CspmMonitorGitLab");
        public static OfferingType DefenderForDevOpsGitLab { get; } = new OfferingType("DefenderForDevOpsGitLab");

        public static bool operator ==(OfferingType left, OfferingType right) => left.Equals(right);
        public static bool operator !=(OfferingType left, OfferingType right) => !left.Equals(right);

        public static explicit operator string(OfferingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OfferingType other && Equals(other);
        public bool Equals(OfferingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The multi cloud account's membership type in the organization
    /// </summary>
    [EnumType]
    public readonly struct OrganizationMembershipType : IEquatable<OrganizationMembershipType>
    {
        private readonly string _value;

        private OrganizationMembershipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrganizationMembershipType Member { get; } = new OrganizationMembershipType("Member");
        public static OrganizationMembershipType Organization { get; } = new OrganizationMembershipType("Organization");

        public static bool operator ==(OrganizationMembershipType left, OrganizationMembershipType right) => left.Equals(right);
        public static bool operator !=(OrganizationMembershipType left, OrganizationMembershipType right) => !left.Equals(right);

        public static explicit operator string(OrganizationMembershipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationMembershipType other && Equals(other);
        public bool Equals(OrganizationMembershipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The scanning mode for the VM scan.
    /// </summary>
    [EnumType]
    public readonly struct ScanningMode : IEquatable<ScanningMode>
    {
        private readonly string _value;

        private ScanningMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScanningMode Default { get; } = new ScanningMode("Default");

        public static bool operator ==(ScanningMode left, ScanningMode right) => left.Equals(right);
        public static bool operator !=(ScanningMode left, ScanningMode right) => !left.Equals(right);

        public static explicit operator string(ScanningMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScanningMode other && Equals(other);
        public bool Equals(ScanningMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The available sub plans
    /// </summary>
    [EnumType]
    public readonly struct SubPlan : IEquatable<SubPlan>
    {
        private readonly string _value;

        private SubPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SubPlan P1 { get; } = new SubPlan("P1");
        public static SubPlan P2 { get; } = new SubPlan("P2");

        public static bool operator ==(SubPlan left, SubPlan right) => left.Equals(right);
        public static bool operator !=(SubPlan left, SubPlan right) => !left.Equals(right);

        public static explicit operator string(SubPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SubPlan other && Equals(other);
        public bool Equals(SubPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Vulnerability Assessment solution to be provisioned. Can be either 'TVM' or 'Qualys'
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Qualys { get; } = new Type("Qualys");
        public static Type TVM { get; } = new Type("TVM");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
