// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security
{
    public static class GetAlertsSuppressionRule
    {
        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// Azure REST API version: 2019-01-01-preview.
        /// </summary>
        public static Task<GetAlertsSuppressionRuleResult> InvokeAsync(GetAlertsSuppressionRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertsSuppressionRuleResult>("azure-native:security:getAlertsSuppressionRule", args ?? new GetAlertsSuppressionRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// Azure REST API version: 2019-01-01-preview.
        /// </summary>
        public static Output<GetAlertsSuppressionRuleResult> Invoke(GetAlertsSuppressionRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertsSuppressionRuleResult>("azure-native:security:getAlertsSuppressionRule", args ?? new GetAlertsSuppressionRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertsSuppressionRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name of the suppression alert rule
        /// </summary>
        [Input("alertsSuppressionRuleName", required: true)]
        public string AlertsSuppressionRuleName { get; set; } = null!;

        public GetAlertsSuppressionRuleArgs()
        {
        }
        public static new GetAlertsSuppressionRuleArgs Empty => new GetAlertsSuppressionRuleArgs();
    }

    public sealed class GetAlertsSuppressionRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name of the suppression alert rule
        /// </summary>
        [Input("alertsSuppressionRuleName", required: true)]
        public Input<string> AlertsSuppressionRuleName { get; set; } = null!;

        public GetAlertsSuppressionRuleInvokeArgs()
        {
        }
        public static new GetAlertsSuppressionRuleInvokeArgs Empty => new GetAlertsSuppressionRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertsSuppressionRuleResult
    {
        /// <summary>
        /// Type of the alert to automatically suppress. For all alert types, use '*'
        /// </summary>
        public readonly string AlertType;
        /// <summary>
        /// Any comment regarding the rule
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// Expiration date of the rule, if value is not provided or provided as null this field will default to the maximum allowed expiration date.
        /// </summary>
        public readonly string? ExpirationDateUtc;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The last time this rule was modified
        /// </summary>
        public readonly string LastModifiedUtc;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The reason for dismissing the alert
        /// </summary>
        public readonly string Reason;
        /// <summary>
        /// Possible states of the rule
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The suppression conditions
        /// </summary>
        public readonly Outputs.SuppressionAlertsScopeResponse? SuppressionAlertsScope;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAlertsSuppressionRuleResult(
            string alertType,

            string? comment,

            string? expirationDateUtc,

            string id,

            string lastModifiedUtc,

            string name,

            string reason,

            string state,

            Outputs.SuppressionAlertsScopeResponse? suppressionAlertsScope,

            string type)
        {
            AlertType = alertType;
            Comment = comment;
            ExpirationDateUtc = expirationDateUtc;
            Id = id;
            LastModifiedUtc = lastModifiedUtc;
            Name = name;
            Reason = reason;
            State = state;
            SuppressionAlertsScope = suppressionAlertsScope;
            Type = type;
        }
    }
}
