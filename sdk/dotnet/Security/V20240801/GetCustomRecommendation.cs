// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20240801
{
    public static class GetCustomRecommendation
    {
        /// <summary>
        /// Get a specific custom recommendation for the requested scope by customRecommendationName
        /// </summary>
        public static Task<GetCustomRecommendationResult> InvokeAsync(GetCustomRecommendationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomRecommendationResult>("azure-native:security/v20240801:getCustomRecommendation", args ?? new GetCustomRecommendationArgs(), options.WithDefaults());

        /// <summary>
        /// Get a specific custom recommendation for the requested scope by customRecommendationName
        /// </summary>
        public static Output<GetCustomRecommendationResult> Invoke(GetCustomRecommendationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomRecommendationResult>("azure-native:security/v20240801:getCustomRecommendation", args ?? new GetCustomRecommendationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomRecommendationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Custom Recommendation.
        /// </summary>
        [Input("customRecommendationName", required: true)]
        public string CustomRecommendationName { get; set; } = null!;

        /// <summary>
        /// The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetCustomRecommendationArgs()
        {
        }
        public static new GetCustomRecommendationArgs Empty => new GetCustomRecommendationArgs();
    }

    public sealed class GetCustomRecommendationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Custom Recommendation.
        /// </summary>
        [Input("customRecommendationName", required: true)]
        public Input<string> CustomRecommendationName { get; set; } = null!;

        /// <summary>
        /// The scope of the custom recommendation. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetCustomRecommendationInvokeArgs()
        {
        }
        public static new GetCustomRecommendationInvokeArgs Empty => new GetCustomRecommendationInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomRecommendationResult
    {
        /// <summary>
        /// The assessment metadata key used when an assessment is generated for this Recommendation.
        /// </summary>
        public readonly string AssessmentKey;
        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        public readonly ImmutableArray<string> CloudProviders;
        /// <summary>
        /// The description to relate to the assessments generated by this Recommendation.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The display name of the assessments generated by this Recommendation.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// KQL query representing the Recommendation results required.
        /// </summary>
        public readonly string? Query;
        /// <summary>
        /// The remediation description to relate to the assessments generated by this Recommendation.
        /// </summary>
        public readonly string? RemediationDescription;
        /// <summary>
        /// The severity to relate to the assessments generated by this Recommendation.
        /// </summary>
        public readonly string? SecurityIssue;
        /// <summary>
        /// The severity to relate to the assessments generated by this Recommendation.
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCustomRecommendationResult(
            string assessmentKey,

            ImmutableArray<string> cloudProviders,

            string? description,

            string? displayName,

            string id,

            string name,

            string? query,

            string? remediationDescription,

            string? securityIssue,

            string? severity,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AssessmentKey = assessmentKey;
            CloudProviders = cloudProviders;
            Description = description;
            DisplayName = displayName;
            Id = id;
            Name = name;
            Query = query;
            RemediationDescription = remediationDescription;
            SecurityIssue = securityIssue;
            Severity = severity;
            SystemData = systemData;
            Type = type;
        }
    }
}
