// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security
{
    /// <summary>
    /// Security Standard on a resource
    /// Azure REST API version: 2024-08-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:security:SecurityStandard")]
    public partial class SecurityStandard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of assessment keys to apply to standard scope.
        /// </summary>
        [Output("assessments")]
        public Output<ImmutableArray<Outputs.PartialAssessmentPropertiesResponse>> Assessments { get; private set; } = null!;

        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        [Output("cloudProviders")]
        public Output<ImmutableArray<string>> CloudProviders { get; private set; } = null!;

        /// <summary>
        /// Description of the standard
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name of the standard, equivalent to the standardId
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The security standard metadata.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.StandardMetadataResponse?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The policy set definition id associated with the standard.
        /// </summary>
        [Output("policySetDefinitionId")]
        public Output<string?> PolicySetDefinitionId { get; private set; } = null!;

        /// <summary>
        /// Standard type (Custom or Default or Compliance only currently)
        /// </summary>
        [Output("standardType")]
        public Output<string> StandardType { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityStandard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityStandard(string name, SecurityStandardArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security:SecurityStandard", name, args ?? new SecurityStandardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityStandard(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security:SecurityStandard", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:security/v20240801:SecurityStandard" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityStandard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityStandard Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SecurityStandard(name, id, options);
        }
    }

    public sealed class SecurityStandardArgs : global::Pulumi.ResourceArgs
    {
        [Input("assessments")]
        private InputList<Inputs.PartialAssessmentPropertiesArgs>? _assessments;

        /// <summary>
        /// List of assessment keys to apply to standard scope.
        /// </summary>
        public InputList<Inputs.PartialAssessmentPropertiesArgs> Assessments
        {
            get => _assessments ?? (_assessments = new InputList<Inputs.PartialAssessmentPropertiesArgs>());
            set => _assessments = value;
        }

        [Input("cloudProviders")]
        private InputList<Union<string, Pulumi.AzureNative.Security.StandardSupportedCloud>>? _cloudProviders;

        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.Security.StandardSupportedCloud>> CloudProviders
        {
            get => _cloudProviders ?? (_cloudProviders = new InputList<Union<string, Pulumi.AzureNative.Security.StandardSupportedCloud>>());
            set => _cloudProviders = value;
        }

        /// <summary>
        /// Description of the standard
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name of the standard, equivalent to the standardId
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The policy set definition id associated with the standard.
        /// </summary>
        [Input("policySetDefinitionId")]
        public Input<string>? PolicySetDefinitionId { get; set; }

        /// <summary>
        /// The scope of the security standard. Valid scopes are: management group (format: 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The Security Standard key - unique key for the standard type
        /// </summary>
        [Input("standardId")]
        public Input<string>? StandardId { get; set; }

        public SecurityStandardArgs()
        {
        }
        public static new SecurityStandardArgs Empty => new SecurityStandardArgs();
    }
}
