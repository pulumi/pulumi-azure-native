// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security
{
    public static class GetStandardAssignment
    {
        /// <summary>
        /// This operation retrieves a single standard assignment, given its name and the scope it was created at.
        /// Azure REST API version: 2024-08-01.
        /// </summary>
        public static Task<GetStandardAssignmentResult> InvokeAsync(GetStandardAssignmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStandardAssignmentResult>("azure-native:security:getStandardAssignment", args ?? new GetStandardAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// This operation retrieves a single standard assignment, given its name and the scope it was created at.
        /// Azure REST API version: 2024-08-01.
        /// </summary>
        public static Output<GetStandardAssignmentResult> Invoke(GetStandardAssignmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStandardAssignmentResult>("azure-native:security:getStandardAssignment", args ?? new GetStandardAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStandardAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public string ResourceId { get; set; } = null!;

        /// <summary>
        /// The standard assignments assignment key - unique key for the standard assignment
        /// </summary>
        [Input("standardAssignmentName", required: true)]
        public string StandardAssignmentName { get; set; } = null!;

        public GetStandardAssignmentArgs()
        {
        }
        public static new GetStandardAssignmentArgs Empty => new GetStandardAssignmentArgs();
    }

    public sealed class GetStandardAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// The standard assignments assignment key - unique key for the standard assignment
        /// </summary>
        [Input("standardAssignmentName", required: true)]
        public Input<string> StandardAssignmentName { get; set; } = null!;

        public GetStandardAssignmentInvokeArgs()
        {
        }
        public static new GetStandardAssignmentInvokeArgs Empty => new GetStandardAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetStandardAssignmentResult
    {
        /// <summary>
        /// Standard item with key as applied to this standard assignment over the given scope
        /// </summary>
        public readonly Outputs.AssignedStandardItemResponse? AssignedStandard;
        /// <summary>
        /// Additional data about assignment that has Attest effect
        /// </summary>
        public readonly Outputs.StandardAssignmentPropertiesResponseAttestationData? AttestationData;
        /// <summary>
        /// Description of the standardAssignment
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of the standardAssignment
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Expected effect of this assignment (Audit/Exempt/Attest)
        /// </summary>
        public readonly string? Effect;
        /// <summary>
        /// Excluded scopes, filter out the descendants of the scope (on management scopes)
        /// </summary>
        public readonly ImmutableArray<string> ExcludedScopes;
        /// <summary>
        /// Additional data about assignment that has Exempt effect
        /// </summary>
        public readonly Outputs.StandardAssignmentPropertiesResponseExemptionData? ExemptionData;
        /// <summary>
        /// Expiration date of this assignment as a full ISO date
        /// </summary>
        public readonly string? ExpiresOn;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The standard assignment metadata.
        /// </summary>
        public readonly Outputs.StandardAssignmentMetadataResponse? Metadata;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetStandardAssignmentResult(
            Outputs.AssignedStandardItemResponse? assignedStandard,

            Outputs.StandardAssignmentPropertiesResponseAttestationData? attestationData,

            string? description,

            string? displayName,

            string? effect,

            ImmutableArray<string> excludedScopes,

            Outputs.StandardAssignmentPropertiesResponseExemptionData? exemptionData,

            string? expiresOn,

            string id,

            Outputs.StandardAssignmentMetadataResponse? metadata,

            string name,

            string type)
        {
            AssignedStandard = assignedStandard;
            AttestationData = attestationData;
            Description = description;
            DisplayName = displayName;
            Effect = effect;
            ExcludedScopes = excludedScopes;
            ExemptionData = exemptionData;
            ExpiresOn = expiresOn;
            Id = id;
            Metadata = metadata;
            Name = name;
            Type = type;
        }
    }
}
