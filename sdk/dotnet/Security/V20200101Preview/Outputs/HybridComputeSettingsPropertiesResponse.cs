// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Security.V20200101Preview.Outputs
{

    [OutputType]
    public sealed class HybridComputeSettingsPropertiesResponse
    {
        /// <summary>
        /// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
        /// </summary>
        public readonly string AutoProvision;
        /// <summary>
        /// State of the service principal and its secret
        /// </summary>
        public readonly string HybridComputeProvisioningState;
        /// <summary>
        /// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
        /// </summary>
        public readonly Outputs.ProxyServerPropertiesResponse? ProxyServer;
        /// <summary>
        /// The location where the metadata of machines will be stored
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
        /// </summary>
        public readonly string? ResourceGroupName;
        /// <summary>
        /// An object to access resources that are secured by an Azure AD tenant.
        /// </summary>
        public readonly Outputs.ServicePrincipalPropertiesResponse? ServicePrincipal;

        [OutputConstructor]
        private HybridComputeSettingsPropertiesResponse(
            string autoProvision,

            string hybridComputeProvisioningState,

            Outputs.ProxyServerPropertiesResponse? proxyServer,

            string? region,

            string? resourceGroupName,

            Outputs.ServicePrincipalPropertiesResponse? servicePrincipal)
        {
            AutoProvision = autoProvision;
            HybridComputeProvisioningState = hybridComputeProvisioningState;
            ProxyServer = proxyServer;
            Region = region;
            ResourceGroupName = resourceGroupName;
            ServicePrincipal = servicePrincipal;
        }
    }
}
