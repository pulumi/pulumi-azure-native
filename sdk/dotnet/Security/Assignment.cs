// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security
{
    /// <summary>
    /// Security Assignment on a resource group over a given scope
    /// API Version: 2021-08-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:security:Assignment")]
    public partial class Assignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional data about the assignment
        /// </summary>
        [Output("additionalData")]
        public Output<Outputs.AssignmentPropertiesResponseAdditionalData?> AdditionalData { get; private set; } = null!;

        /// <summary>
        /// Component item with key as applied to this standard assignment over the given scope
        /// </summary>
        [Output("assignedComponent")]
        public Output<Outputs.AssignedComponentItemResponse?> AssignedComponent { get; private set; } = null!;

        /// <summary>
        /// Standard item with key as applied to this standard assignment over the given scope
        /// </summary>
        [Output("assignedStandard")]
        public Output<Outputs.AssignedStandardItemResponse?> AssignedStandard { get; private set; } = null!;

        /// <summary>
        /// description of the standardAssignment
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// display name of the standardAssignment
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// expected effect of this assignment (Disable/Exempt/etc)
        /// </summary>
        [Output("effect")]
        public Output<string?> Effect { get; private set; } = null!;

        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Expiration date of this assignment as a full ISO date
        /// </summary>
        [Output("expiresOn")]
        public Output<string?> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Output("metadata")]
        public Output<object?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Assignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Assignment(string name, AssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security:Assignment", name, args ?? new AssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Assignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security:Assignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:security/v20210801preview:Assignment"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Assignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Assignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Assignment(name, id, options);
        }
    }

    public sealed class AssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional data about the assignment
        /// </summary>
        [Input("additionalData")]
        public Input<Inputs.AssignmentPropertiesAdditionalDataArgs>? AdditionalData { get; set; }

        /// <summary>
        /// Component item with key as applied to this standard assignment over the given scope
        /// </summary>
        [Input("assignedComponent")]
        public Input<Inputs.AssignedComponentItemArgs>? AssignedComponent { get; set; }

        /// <summary>
        /// Standard item with key as applied to this standard assignment over the given scope
        /// </summary>
        [Input("assignedStandard")]
        public Input<Inputs.AssignedStandardItemArgs>? AssignedStandard { get; set; }

        /// <summary>
        /// The security assignment key - unique key for the standard assignment
        /// </summary>
        [Input("assignmentId")]
        public Input<string>? AssignmentId { get; set; }

        /// <summary>
        /// description of the standardAssignment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// display name of the standardAssignment
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// expected effect of this assignment (Disable/Exempt/etc)
        /// </summary>
        [Input("effect")]
        public Input<string>? Effect { get; set; }

        /// <summary>
        /// Expiration date of this assignment as a full ISO date
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        [Input("metadata")]
        public Input<object>? Metadata { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AssignmentArgs()
        {
        }
        public static new AssignmentArgs Empty => new AssignmentArgs();
    }
}
