// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.Outputs
{

    /// <summary>
    /// AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role Amazon Resource Name (ARN) and external ID. For more details, refer to &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html"&gt;Creating a Role to Delegate Permissions to an IAM User (write only)&lt;/a&gt;
    /// </summary>
    [OutputType]
    public sealed class AwAssumeRoleAuthenticationDetailsPropertiesResponse
    {
        /// <summary>
        /// The ID of the cloud account
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// State of the multi-cloud connector
        /// </summary>
        public readonly string AuthenticationProvisioningState;
        /// <summary>
        /// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
        /// Expected value is 'awsAssumeRole'.
        /// </summary>
        public readonly string AuthenticationType;
        /// <summary>
        /// Assumed role ID is an identifier that you can use to create temporary security credentials.
        /// </summary>
        public readonly string AwsAssumeRoleArn;
        /// <summary>
        /// A unique identifier that is required when you assume a role in another account.
        /// </summary>
        public readonly string AwsExternalId;
        /// <summary>
        /// The permissions detected in the cloud account.
        /// </summary>
        public readonly ImmutableArray<string> GrantedPermissions;

        [OutputConstructor]
        private AwAssumeRoleAuthenticationDetailsPropertiesResponse(
            string accountId,

            string authenticationProvisioningState,

            string authenticationType,

            string awsAssumeRoleArn,

            string awsExternalId,

            ImmutableArray<string> grantedPermissions)
        {
            AccountId = accountId;
            AuthenticationProvisioningState = authenticationProvisioningState;
            AuthenticationType = authenticationType;
            AwsAssumeRoleArn = awsAssumeRoleArn;
            AwsExternalId = awsExternalId;
            GrantedPermissions = grantedPermissions;
        }
    }
}
