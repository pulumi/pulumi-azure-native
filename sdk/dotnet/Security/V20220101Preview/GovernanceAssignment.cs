// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20220101Preview
{
    /// <summary>
    /// Governance assignment over a given scope
    /// </summary>
    [AzureNativeResourceType("azure-native:security/v20220101preview:GovernanceAssignment")]
    public partial class GovernanceAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The additional data for the governance assignment - e.g. links to ticket (optional), see example
        /// </summary>
        [Output("additionalData")]
        public Output<Outputs.GovernanceAssignmentAdditionalDataResponse?> AdditionalData { get; private set; } = null!;

        /// <summary>
        /// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
        /// </summary>
        [Output("governanceEmailNotification")]
        public Output<Outputs.GovernanceEmailNotificationResponse?> GovernanceEmailNotification { get; private set; } = null!;

        /// <summary>
        /// Defines whether there is a grace period on the governance assignment
        /// </summary>
        [Output("isGracePeriod")]
        public Output<bool?> IsGracePeriod { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Owner for the governance assignment - e.g. user@contoso.com - see example
        /// </summary>
        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        /// <summary>
        /// The remediation due-date - after this date Secure Score will be affected (in case of  active grace-period)
        /// </summary>
        [Output("remediationDueDate")]
        public Output<string> RemediationDueDate { get; private set; } = null!;

        /// <summary>
        /// The ETA (estimated time of arrival) for remediation (optional), see example
        /// </summary>
        [Output("remediationEta")]
        public Output<Outputs.RemediationEtaResponse?> RemediationEta { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GovernanceAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GovernanceAssignment(string name, GovernanceAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security/v20220101preview:GovernanceAssignment", name, args ?? new GovernanceAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GovernanceAssignment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security/v20220101preview:GovernanceAssignment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GovernanceAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GovernanceAssignment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GovernanceAssignment(name, id, options);
        }
    }

    public sealed class GovernanceAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The additional data for the governance assignment - e.g. links to ticket (optional), see example
        /// </summary>
        [Input("additionalData")]
        public Input<Inputs.GovernanceAssignmentAdditionalDataArgs>? AdditionalData { get; set; }

        /// <summary>
        /// The Assessment Key - A unique key for the assessment type
        /// </summary>
        [Input("assessmentName", required: true)]
        public Input<string> AssessmentName { get; set; } = null!;

        /// <summary>
        /// The governance assignment key - the assessment key of the required governance assignment
        /// </summary>
        [Input("assignmentKey")]
        public Input<string>? AssignmentKey { get; set; }

        /// <summary>
        /// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
        /// </summary>
        [Input("governanceEmailNotification")]
        public Input<Inputs.GovernanceEmailNotificationArgs>? GovernanceEmailNotification { get; set; }

        /// <summary>
        /// Defines whether there is a grace period on the governance assignment
        /// </summary>
        [Input("isGracePeriod")]
        public Input<bool>? IsGracePeriod { get; set; }

        /// <summary>
        /// The Owner for the governance assignment - e.g. user@contoso.com - see example
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The remediation due-date - after this date Secure Score will be affected (in case of  active grace-period)
        /// </summary>
        [Input("remediationDueDate", required: true)]
        public Input<string> RemediationDueDate { get; set; } = null!;

        /// <summary>
        /// The ETA (estimated time of arrival) for remediation (optional), see example
        /// </summary>
        [Input("remediationEta")]
        public Input<Inputs.RemediationEtaArgs>? RemediationEta { get; set; }

        /// <summary>
        /// The scope of the Governance assignments. Valid scopes are: subscription (format: 'subscriptions/{subscriptionId}'), or security connector (format: 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GovernanceAssignmentArgs()
        {
        }
        public static new GovernanceAssignmentArgs Empty => new GovernanceAssignmentArgs();
    }
}
