// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20220101Preview
{
    public static class GetGovernanceAssignment
    {
        /// <summary>
        /// Security GovernanceAssignment over a given scope
        /// </summary>
        public static Task<GetGovernanceAssignmentResult> InvokeAsync(GetGovernanceAssignmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGovernanceAssignmentResult>("azure-native:security/v20220101preview:getGovernanceAssignment", args ?? new GetGovernanceAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Security GovernanceAssignment over a given scope
        /// </summary>
        public static Output<GetGovernanceAssignmentResult> Invoke(GetGovernanceAssignmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGovernanceAssignmentResult>("azure-native:security/v20220101preview:getGovernanceAssignment", args ?? new GetGovernanceAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGovernanceAssignmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Assessment Key - Unique key for the assessment type
        /// </summary>
        [Input("assessmentName", required: true)]
        public string AssessmentName { get; set; } = null!;

        /// <summary>
        /// The security governance assignment key - the assessment key of the required governance assignment
        /// </summary>
        [Input("assignmentKey", required: true)]
        public string AssignmentKey { get; set; } = null!;

        /// <summary>
        /// Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetGovernanceAssignmentArgs()
        {
        }
        public static new GetGovernanceAssignmentArgs Empty => new GetGovernanceAssignmentArgs();
    }

    public sealed class GetGovernanceAssignmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Assessment Key - Unique key for the assessment type
        /// </summary>
        [Input("assessmentName", required: true)]
        public Input<string> AssessmentName { get; set; } = null!;

        /// <summary>
        /// The security governance assignment key - the assessment key of the required governance assignment
        /// </summary>
        [Input("assignmentKey", required: true)]
        public Input<string> AssignmentKey { get; set; } = null!;

        /// <summary>
        /// Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public GetGovernanceAssignmentInvokeArgs()
        {
        }
        public static new GetGovernanceAssignmentInvokeArgs Empty => new GetGovernanceAssignmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetGovernanceAssignmentResult
    {
        /// <summary>
        /// The additional data for the governance assignment - e.g. links to ticket (optional), see example
        /// </summary>
        public readonly Outputs.GovernanceAssignmentAdditionalDataResponse? AdditionalData;
        /// <summary>
        /// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
        /// </summary>
        public readonly Outputs.GovernanceEmailNotificationResponse? GovernanceEmailNotification;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Defines whether there is a grace period on the governance assignment
        /// </summary>
        public readonly bool? IsGracePeriod;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Owner for the governance assignment - e.g. user@contoso.com - see example
        /// </summary>
        public readonly string? Owner;
        /// <summary>
        /// The remediation due-date - after this date Secure Score will be affected (in case of  active grace-period)
        /// </summary>
        public readonly string RemediationDueDate;
        /// <summary>
        /// The ETA (estimated time of arrival) for remediation (optional), see example
        /// </summary>
        public readonly Outputs.RemediationEtaResponse? RemediationEta;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetGovernanceAssignmentResult(
            Outputs.GovernanceAssignmentAdditionalDataResponse? additionalData,

            Outputs.GovernanceEmailNotificationResponse? governanceEmailNotification,

            string id,

            bool? isGracePeriod,

            string name,

            string? owner,

            string remediationDueDate,

            Outputs.RemediationEtaResponse? remediationEta,

            string type)
        {
            AdditionalData = additionalData;
            GovernanceEmailNotification = governanceEmailNotification;
            Id = id;
            IsGracePeriod = isGracePeriod;
            Name = name;
            Owner = owner;
            RemediationDueDate = remediationDueDate;
            RemediationEta = remediationEta;
            Type = type;
        }
    }
}
