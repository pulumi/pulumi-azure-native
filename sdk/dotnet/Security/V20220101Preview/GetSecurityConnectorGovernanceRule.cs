// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20220101Preview
{
    public static class GetSecurityConnectorGovernanceRule
    {
        /// <summary>
        /// Governance rule over a given scope
        /// </summary>
        public static Task<GetSecurityConnectorGovernanceRuleResult> InvokeAsync(GetSecurityConnectorGovernanceRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityConnectorGovernanceRuleResult>("azure-native:security/v20220101preview:getSecurityConnectorGovernanceRule", args ?? new GetSecurityConnectorGovernanceRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Governance rule over a given scope
        /// </summary>
        public static Output<GetSecurityConnectorGovernanceRuleResult> Invoke(GetSecurityConnectorGovernanceRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityConnectorGovernanceRuleResult>("azure-native:security/v20220101preview:getSecurityConnectorGovernanceRule", args ?? new GetSecurityConnectorGovernanceRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityConnectorGovernanceRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </summary>
        [Input("ruleId", required: true)]
        public string RuleId { get; set; } = null!;

        /// <summary>
        /// The security connector name.
        /// </summary>
        [Input("securityConnectorName", required: true)]
        public string SecurityConnectorName { get; set; } = null!;

        public GetSecurityConnectorGovernanceRuleArgs()
        {
        }
        public static new GetSecurityConnectorGovernanceRuleArgs Empty => new GetSecurityConnectorGovernanceRuleArgs();
    }

    public sealed class GetSecurityConnectorGovernanceRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The governance rule key - unique key for the standard governance rule (GUID)
        /// </summary>
        [Input("ruleId", required: true)]
        public Input<string> RuleId { get; set; } = null!;

        /// <summary>
        /// The security connector name.
        /// </summary>
        [Input("securityConnectorName", required: true)]
        public Input<string> SecurityConnectorName { get; set; } = null!;

        public GetSecurityConnectorGovernanceRuleInvokeArgs()
        {
        }
        public static new GetSecurityConnectorGovernanceRuleInvokeArgs Empty => new GetSecurityConnectorGovernanceRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityConnectorGovernanceRuleResult
    {
        /// <summary>
        /// Description of the governance rule
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of the governance rule
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Excluded scopes, filter out the descendants of the scope (on management scopes)
        /// </summary>
        public readonly ImmutableArray<string> ExcludedScopes;
        /// <summary>
        /// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
        /// </summary>
        public readonly Outputs.GovernanceRuleEmailNotificationResponse? GovernanceEmailNotification;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
        /// </summary>
        public readonly bool? IncludeMemberScopes;
        /// <summary>
        /// Defines whether the rule is active/inactive
        /// </summary>
        public readonly bool? IsDisabled;
        /// <summary>
        /// Defines whether there is a grace period on the governance rule
        /// </summary>
        public readonly bool? IsGracePeriod;
        /// <summary>
        /// The governance rule metadata
        /// </summary>
        public readonly Outputs.GovernanceRuleMetadataResponse? Metadata;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
        /// </summary>
        public readonly Outputs.GovernanceRuleOwnerSourceResponse OwnerSource;
        /// <summary>
        /// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
        /// </summary>
        public readonly string? RemediationTimeframe;
        /// <summary>
        /// The governance rule priority, priority to the lower number. Rules with the same priority on the same subscription will not be allowed
        /// </summary>
        public readonly int RulePriority;
        /// <summary>
        /// The rule type of the governance rule, defines the source of the rule e.g. Integrated
        /// </summary>
        public readonly string RuleType;
        /// <summary>
        /// The governance rule source, what the rule affects, e.g. Assessments
        /// </summary>
        public readonly string SourceResourceType;
        /// <summary>
        /// The tenantId (GUID)
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSecurityConnectorGovernanceRuleResult(
            string? description,

            string displayName,

            ImmutableArray<string> excludedScopes,

            Outputs.GovernanceRuleEmailNotificationResponse? governanceEmailNotification,

            string id,

            bool? includeMemberScopes,

            bool? isDisabled,

            bool? isGracePeriod,

            Outputs.GovernanceRuleMetadataResponse? metadata,

            string name,

            Outputs.GovernanceRuleOwnerSourceResponse ownerSource,

            string? remediationTimeframe,

            int rulePriority,

            string ruleType,

            string sourceResourceType,

            string tenantId,

            string type)
        {
            Description = description;
            DisplayName = displayName;
            ExcludedScopes = excludedScopes;
            GovernanceEmailNotification = governanceEmailNotification;
            Id = id;
            IncludeMemberScopes = includeMemberScopes;
            IsDisabled = isDisabled;
            IsGracePeriod = isGracePeriod;
            Metadata = metadata;
            Name = name;
            OwnerSource = ownerSource;
            RemediationTimeframe = remediationTimeframe;
            RulePriority = rulePriority;
            RuleType = ruleType;
            SourceResourceType = sourceResourceType;
            TenantId = tenantId;
            Type = type;
        }
    }
}
