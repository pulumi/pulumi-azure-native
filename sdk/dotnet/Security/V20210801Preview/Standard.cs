// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20210801Preview
{
    /// <summary>
    /// Security Standard on a resource
    /// </summary>
    [AzureNativeResourceType("azure-native:security/v20210801preview:Standard")]
    public partial class Standard : global::Pulumi.CustomResource
    {
        /// <summary>
        /// category of the standard provided
        /// </summary>
        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        /// <summary>
        /// List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
        /// </summary>
        [Output("components")]
        public Output<ImmutableArray<Outputs.StandardComponentPropertiesResponse>> Components { get; private set; } = null!;

        /// <summary>
        /// description of the standard
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// display name of the standard, equivalent to the standardId
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        [Output("etag")]
        public Output<string?> Etag { get; private set; } = null!;

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// standard type (Custom or BuiltIn only currently)
        /// </summary>
        [Output("standardType")]
        public Output<string> StandardType { get; private set; } = null!;

        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        [Output("supportedClouds")]
        public Output<ImmutableArray<string>> SupportedClouds { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Standard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Standard(string name, StandardArgs args, CustomResourceOptions? options = null)
            : base("azure-native:security/v20210801preview:Standard", name, args ?? new StandardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Standard(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:security/v20210801preview:Standard", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:security:Standard" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Standard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Standard Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Standard(name, id, options);
        }
    }

    public sealed class StandardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// category of the standard provided
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("components")]
        private InputList<Inputs.StandardComponentPropertiesArgs>? _components;

        /// <summary>
        /// List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
        /// </summary>
        public InputList<Inputs.StandardComponentPropertiesArgs> Components
        {
            get => _components ?? (_components = new InputList<Inputs.StandardComponentPropertiesArgs>());
            set => _components = value;
        }

        /// <summary>
        /// description of the standard
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// display name of the standard, equivalent to the standardId
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Kind of the resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Security Standard key - unique key for the standard type
        /// </summary>
        [Input("standardId")]
        public Input<string>? StandardId { get; set; }

        [Input("supportedClouds")]
        private InputList<Pulumi.AzureNative.Security.V20210801Preview.StandardSupportedClouds>? _supportedClouds;

        /// <summary>
        /// List of all standard supported clouds.
        /// </summary>
        public InputList<Pulumi.AzureNative.Security.V20210801Preview.StandardSupportedClouds> SupportedClouds
        {
            get => _supportedClouds ?? (_supportedClouds = new InputList<Pulumi.AzureNative.Security.V20210801Preview.StandardSupportedClouds>());
            set => _supportedClouds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public StandardArgs()
        {
        }
        public static new StandardArgs Empty => new StandardArgs();
    }
}
