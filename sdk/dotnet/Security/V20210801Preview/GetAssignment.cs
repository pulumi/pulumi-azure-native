// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Security.V20210801Preview
{
    public static class GetAssignment
    {
        /// <summary>
        /// Security Assignment on a resource group over a given scope
        /// </summary>
        public static Task<GetAssignmentResult> InvokeAsync(GetAssignmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAssignmentResult>("azure-native:security/v20210801preview:getAssignment", args ?? new GetAssignmentArgs(), options.WithDefaults());

        /// <summary>
        /// Security Assignment on a resource group over a given scope
        /// </summary>
        public static Output<GetAssignmentResult> Invoke(GetAssignmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAssignmentResult>("azure-native:security/v20210801preview:getAssignment", args ?? new GetAssignmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssignmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The security assignment key - unique key for the standard assignment
        /// </summary>
        [Input("assignmentId", required: true)]
        public string AssignmentId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAssignmentArgs()
        {
        }
    }

    public sealed class GetAssignmentInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The security assignment key - unique key for the standard assignment
        /// </summary>
        [Input("assignmentId", required: true)]
        public Input<string> AssignmentId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the user's subscription. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAssignmentInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAssignmentResult
    {
        /// <summary>
        /// Additional data about the assignment
        /// </summary>
        public readonly Outputs.AssignmentPropertiesResponseAdditionalData? AdditionalData;
        /// <summary>
        /// Component item with key as applied to this standard assignment over the given scope
        /// </summary>
        public readonly Outputs.AssignedComponentItemResponse? AssignedComponent;
        /// <summary>
        /// Standard item with key as applied to this standard assignment over the given scope
        /// </summary>
        public readonly Outputs.AssignedStandardItemResponse? AssignedStandard;
        /// <summary>
        /// description of the standardAssignment
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// display name of the standardAssignment
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// expected effect of this assignment (Disable/Exempt/etc)
        /// </summary>
        public readonly string? Effect;
        /// <summary>
        /// Entity tag is used for comparing two or more entities from the same requested resource.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Expiration date of this assignment as a full ISO date
        /// </summary>
        public readonly string? ExpiresOn;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of the resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Location where the resource is stored
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
        /// </summary>
        public readonly object? Metadata;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// A list of key value pairs that describe the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAssignmentResult(
            Outputs.AssignmentPropertiesResponseAdditionalData? additionalData,

            Outputs.AssignedComponentItemResponse? assignedComponent,

            Outputs.AssignedStandardItemResponse? assignedStandard,

            string? description,

            string? displayName,

            string? effect,

            string? etag,

            string? expiresOn,

            string id,

            string? kind,

            string? location,

            object? metadata,

            string name,

            string? scope,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdditionalData = additionalData;
            AssignedComponent = assignedComponent;
            AssignedStandard = assignedStandard;
            Description = description;
            DisplayName = displayName;
            Effect = effect;
            Etag = etag;
            ExpiresOn = expiresOn;
            Id = id;
            Kind = kind;
            Location = location;
            Metadata = metadata;
            Name = name;
            Scope = scope;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
