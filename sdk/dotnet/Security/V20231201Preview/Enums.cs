// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Security.V20231201Preview
{
    /// <summary>
    /// The type of the action that will be triggered by the Automation
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType LogicApp { get; } = new ActionType("LogicApp");
        public static ActionType EventHub { get; } = new ActionType("EventHub");
        public static ActionType Workspace { get; } = new ActionType("Workspace");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A valid event source type.
    /// </summary>
    [EnumType]
    public readonly struct EventSource : IEquatable<EventSource>
    {
        private readonly string _value;

        private EventSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventSource Assessments { get; } = new EventSource("Assessments");
        public static EventSource AssessmentsSnapshot { get; } = new EventSource("AssessmentsSnapshot");
        public static EventSource SubAssessments { get; } = new EventSource("SubAssessments");
        public static EventSource SubAssessmentsSnapshot { get; } = new EventSource("SubAssessmentsSnapshot");
        public static EventSource Alerts { get; } = new EventSource("Alerts");
        public static EventSource SecureScores { get; } = new EventSource("SecureScores");
        public static EventSource SecureScoresSnapshot { get; } = new EventSource("SecureScoresSnapshot");
        public static EventSource SecureScoreControls { get; } = new EventSource("SecureScoreControls");
        public static EventSource SecureScoreControlsSnapshot { get; } = new EventSource("SecureScoreControlsSnapshot");
        public static EventSource RegulatoryComplianceAssessment { get; } = new EventSource("RegulatoryComplianceAssessment");
        public static EventSource RegulatoryComplianceAssessmentSnapshot { get; } = new EventSource("RegulatoryComplianceAssessmentSnapshot");
        public static EventSource AttackPaths { get; } = new EventSource("AttackPaths");
        public static EventSource AttackPathsSnapshot { get; } = new EventSource("AttackPathsSnapshot");

        public static bool operator ==(EventSource left, EventSource right) => left.Equals(right);
        public static bool operator !=(EventSource left, EventSource right) => !left.Equals(right);

        public static explicit operator string(EventSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventSource other && Equals(other);
        public bool Equals(EventSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the minimal attach path risk level which will be sent as email notifications
    /// </summary>
    [EnumType]
    public readonly struct MinimalRiskLevel : IEquatable<MinimalRiskLevel>
    {
        private readonly string _value;

        private MinimalRiskLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Get notifications on new attack paths with Critical risk level
        /// </summary>
        public static MinimalRiskLevel Critical { get; } = new MinimalRiskLevel("Critical");
        /// <summary>
        /// Get notifications on new attack paths with High or Critical risk level
        /// </summary>
        public static MinimalRiskLevel High { get; } = new MinimalRiskLevel("High");
        /// <summary>
        /// Get notifications on new attach paths with Medium, High or Critical risk level
        /// </summary>
        public static MinimalRiskLevel Medium { get; } = new MinimalRiskLevel("Medium");
        /// <summary>
        /// Get notifications on new attach paths with Low, Medium, High or Critical risk level
        /// </summary>
        public static MinimalRiskLevel Low { get; } = new MinimalRiskLevel("Low");

        public static bool operator ==(MinimalRiskLevel left, MinimalRiskLevel right) => left.Equals(right);
        public static bool operator !=(MinimalRiskLevel left, MinimalRiskLevel right) => !left.Equals(right);

        public static explicit operator string(MinimalRiskLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalRiskLevel other && Equals(other);
        public bool Equals(MinimalRiskLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the minimal alert severity which will be sent as email notifications
    /// </summary>
    [EnumType]
    public readonly struct MinimalSeverity : IEquatable<MinimalSeverity>
    {
        private readonly string _value;

        private MinimalSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Get notifications on new alerts with High severity
        /// </summary>
        public static MinimalSeverity High { get; } = new MinimalSeverity("High");
        /// <summary>
        /// Get notifications on new alerts with Medium or High severity
        /// </summary>
        public static MinimalSeverity Medium { get; } = new MinimalSeverity("Medium");
        /// <summary>
        /// Get notifications on new alerts with Low, Medium or High severity
        /// </summary>
        public static MinimalSeverity Low { get; } = new MinimalSeverity("Low");

        public static bool operator ==(MinimalSeverity left, MinimalSeverity right) => left.Equals(right);
        public static bool operator !=(MinimalSeverity left, MinimalSeverity right) => !left.Equals(right);

        public static explicit operator string(MinimalSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MinimalSeverity other && Equals(other);
        public bool Equals(MinimalSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Applies for decimal and non-decimal operands
        /// </summary>
        public static Operator EqualsValue { get; } = new Operator("Equals");
        /// <summary>
        /// Applies only for decimal operands
        /// </summary>
        public static Operator GreaterThan { get; } = new Operator("GreaterThan");
        /// <summary>
        /// Applies only for decimal operands
        /// </summary>
        public static Operator GreaterThanOrEqualTo { get; } = new Operator("GreaterThanOrEqualTo");
        /// <summary>
        /// Applies only for decimal operands
        /// </summary>
        public static Operator LesserThan { get; } = new Operator("LesserThan");
        /// <summary>
        /// Applies only for decimal operands
        /// </summary>
        public static Operator LesserThanOrEqualTo { get; } = new Operator("LesserThanOrEqualTo");
        /// <summary>
        /// Applies  for decimal and non-decimal operands
        /// </summary>
        public static Operator NotEquals { get; } = new Operator("NotEquals");
        /// <summary>
        /// Applies only for non-decimal operands
        /// </summary>
        public static Operator Contains { get; } = new Operator("Contains");
        /// <summary>
        /// Applies only for non-decimal operands
        /// </summary>
        public static Operator StartsWith { get; } = new Operator("StartsWith");
        /// <summary>
        /// Applies only for non-decimal operands
        /// </summary>
        public static Operator EndsWith { get; } = new Operator("EndsWith");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
    /// </summary>
    [EnumType]
    public readonly struct PropertyType : IEquatable<PropertyType>
    {
        private readonly string _value;

        private PropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PropertyType String { get; } = new PropertyType("String");
        public static PropertyType Integer { get; } = new PropertyType("Integer");
        public static PropertyType Number { get; } = new PropertyType("Number");
        public static PropertyType Boolean { get; } = new PropertyType("Boolean");

        public static bool operator ==(PropertyType left, PropertyType right) => left.Equals(right);
        public static bool operator !=(PropertyType left, PropertyType right) => !left.Equals(right);

        public static explicit operator string(PropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PropertyType other && Equals(other);
        public bool Equals(PropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A possible role to configure sending security notification alerts to
    /// </summary>
    [EnumType]
    public readonly struct SecurityContactRole : IEquatable<SecurityContactRole>
    {
        private readonly string _value;

        private SecurityContactRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If enabled, send notification on new alerts to the account admins
        /// </summary>
        public static SecurityContactRole AccountAdmin { get; } = new SecurityContactRole("AccountAdmin");
        /// <summary>
        /// If enabled, send notification on new alerts to the service admins
        /// </summary>
        public static SecurityContactRole ServiceAdmin { get; } = new SecurityContactRole("ServiceAdmin");
        /// <summary>
        /// If enabled, send notification on new alerts to the subscription owners
        /// </summary>
        public static SecurityContactRole Owner { get; } = new SecurityContactRole("Owner");
        /// <summary>
        /// If enabled, send notification on new alerts to the subscription contributors
        /// </summary>
        public static SecurityContactRole Contributor { get; } = new SecurityContactRole("Contributor");

        public static bool operator ==(SecurityContactRole left, SecurityContactRole right) => left.Equals(right);
        public static bool operator !=(SecurityContactRole left, SecurityContactRole right) => !left.Equals(right);

        public static explicit operator string(SecurityContactRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityContactRole other && Equals(other);
        public bool Equals(SecurityContactRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source type that will trigger the notification
    /// </summary>
    [EnumType]
    public readonly struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        private SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceType Alert { get; } = new SourceType("Alert");
        public static SourceType AttackPath { get; } = new SourceType("AttackPath");

        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);

        public static explicit operator string(SourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceType other && Equals(other);
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines whether to send email notifications from AMicrosoft Defender for Cloud to persons with specific RBAC roles on the subscription.
    /// </summary>
    [EnumType]
    public readonly struct State : IEquatable<State>
    {
        private readonly string _value;

        private State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Send notification on new alerts to the subscription's admins
        /// </summary>
        public static State On { get; } = new State("On");
        /// <summary>
        /// Don't send notification on new alerts to the subscription's admins
        /// </summary>
        public static State Off { get; } = new State("Off");

        public static bool operator ==(State left, State right) => left.Equals(right);
        public static bool operator !=(State left, State right) => !left.Equals(right);

        public static explicit operator string(State value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
