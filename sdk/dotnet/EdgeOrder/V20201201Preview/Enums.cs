// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.EdgeOrder.V20201201Preview
{
    /// <summary>
    /// Type of address.
    /// </summary>
    [EnumType]
    public readonly struct AddressType : IEquatable<AddressType>
    {
        private readonly string _value;

        private AddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Address type not known.
        /// </summary>
        public static AddressType None { get; } = new AddressType("None");
        /// <summary>
        /// Residential Address.
        /// </summary>
        public static AddressType Residential { get; } = new AddressType("Residential");
        /// <summary>
        /// Commercial Address.
        /// </summary>
        public static AddressType Commercial { get; } = new AddressType("Commercial");

        public static bool operator ==(AddressType left, AddressType right) => left.Equals(right);
        public static bool operator !=(AddressType left, AddressType right) => !left.Equals(right);

        public static explicit operator string(AddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressType other && Equals(other);
        public bool Equals(AddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines secondary layer of software-based encryption enablement.
    /// </summary>
    [EnumType]
    public readonly struct DoubleEncryptionStatus : IEquatable<DoubleEncryptionStatus>
    {
        private readonly string _value;

        private DoubleEncryptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Double encryption is disabled
        /// </summary>
        public static DoubleEncryptionStatus Disabled { get; } = new DoubleEncryptionStatus("Disabled");
        /// <summary>
        /// Double encryption is enabled
        /// </summary>
        public static DoubleEncryptionStatus Enabled { get; } = new DoubleEncryptionStatus("Enabled");

        public static bool operator ==(DoubleEncryptionStatus left, DoubleEncryptionStatus right) => left.Equals(right);
        public static bool operator !=(DoubleEncryptionStatus left, DoubleEncryptionStatus right) => !left.Equals(right);

        public static explicit operator string(DoubleEncryptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DoubleEncryptionStatus other && Equals(other);
        public bool Equals(DoubleEncryptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the stage.
    /// </summary>
    [EnumType]
    public readonly struct NotificationStageName : IEquatable<NotificationStageName>
    {
        private readonly string _value;

        private NotificationStageName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notification at device prepared stage.
        /// </summary>
        public static NotificationStageName DevicePrepared { get; } = new NotificationStageName("DevicePrepared");
        /// <summary>
        /// Notification at device dispatched stage.
        /// </summary>
        public static NotificationStageName Shipped { get; } = new NotificationStageName("Shipped");
        /// <summary>
        /// Notification at device delivered stage.
        /// </summary>
        public static NotificationStageName Delivered { get; } = new NotificationStageName("Delivered");
        /// <summary>
        /// Notification at device picked up from user stage.
        /// </summary>
        public static NotificationStageName PickedUp { get; } = new NotificationStageName("PickedUp");
        /// <summary>
        /// Notification at device received at Azure datacenter stage.
        /// </summary>
        public static NotificationStageName AtAzureDC { get; } = new NotificationStageName("AtAzureDC");
        /// <summary>
        /// Notification at data copy started stage.
        /// </summary>
        public static NotificationStageName DataCopy { get; } = new NotificationStageName("DataCopy");

        public static bool operator ==(NotificationStageName left, NotificationStageName right) => left.Equals(right);
        public static bool operator !=(NotificationStageName left, NotificationStageName right) => !left.Equals(right);

        public static explicit operator string(NotificationStageName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationStageName other && Equals(other);
        public bool Equals(NotificationStageName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Order item type.
    /// </summary>
    [EnumType]
    public readonly struct OrderItemType : IEquatable<OrderItemType>
    {
        private readonly string _value;

        private OrderItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Purchase OrderItem.
        /// </summary>
        public static OrderItemType Purchase { get; } = new OrderItemType("Purchase");
        /// <summary>
        /// Rental OrderItem.
        /// </summary>
        public static OrderItemType Rental { get; } = new OrderItemType("Rental");

        public static bool operator ==(OrderItemType left, OrderItemType right) => left.Equals(right);
        public static bool operator !=(OrderItemType left, OrderItemType right) => !left.Equals(right);

        public static explicit operator string(OrderItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrderItemType other && Equals(other);
        public bool Equals(OrderItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of product filter.
    /// </summary>
    [EnumType]
    public readonly struct SupportedFilterTypes : IEquatable<SupportedFilterTypes>
    {
        private readonly string _value;

        private SupportedFilterTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Ship to country
        /// </summary>
        public static SupportedFilterTypes ShipToCountries { get; } = new SupportedFilterTypes("ShipToCountries");
        /// <summary>
        /// Double encryption status
        /// </summary>
        public static SupportedFilterTypes DoubleEncryptionStatus { get; } = new SupportedFilterTypes("DoubleEncryptionStatus");

        public static bool operator ==(SupportedFilterTypes left, SupportedFilterTypes right) => left.Equals(right);
        public static bool operator !=(SupportedFilterTypes left, SupportedFilterTypes right) => !left.Equals(right);

        public static explicit operator string(SupportedFilterTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportedFilterTypes other && Equals(other);
        public bool Equals(SupportedFilterTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates Shipment Logistics type that the customer preferred.
    /// </summary>
    [EnumType]
    public readonly struct TransportShipmentTypes : IEquatable<TransportShipmentTypes>
    {
        private readonly string _value;

        private TransportShipmentTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Shipment Logistics is handled by the customer.
        /// </summary>
        public static TransportShipmentTypes CustomerManaged { get; } = new TransportShipmentTypes("CustomerManaged");
        /// <summary>
        /// Shipment Logistics is handled by Microsoft.
        /// </summary>
        public static TransportShipmentTypes MicrosoftManaged { get; } = new TransportShipmentTypes("MicrosoftManaged");

        public static bool operator ==(TransportShipmentTypes left, TransportShipmentTypes right) => left.Equals(right);
        public static bool operator !=(TransportShipmentTypes left, TransportShipmentTypes right) => !left.Equals(right);

        public static explicit operator string(TransportShipmentTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransportShipmentTypes other && Equals(other);
        public bool Equals(TransportShipmentTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
