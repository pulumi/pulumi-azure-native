// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Purview.V20230501Preview
{
    /// <summary>
    /// Identity Type.
    /// </summary>
    [EnumType]
    public readonly struct CredentialsType : IEquatable<CredentialsType>
    {
        private readonly string _value;

        private CredentialsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CredentialsType None { get; } = new CredentialsType("None");
        public static CredentialsType SystemAssigned { get; } = new CredentialsType("SystemAssigned");
        public static CredentialsType UserAssigned { get; } = new CredentialsType("UserAssigned");

        public static bool operator ==(CredentialsType left, CredentialsType right) => left.Equals(right);
        public static bool operator !=(CredentialsType left, CredentialsType right) => !left.Equals(right);

        public static explicit operator string(CredentialsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CredentialsType other && Equals(other);
        public bool Equals(CredentialsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The event hub type.
    /// </summary>
    [EnumType]
    public readonly struct EventHubType : IEquatable<EventHubType>
    {
        private readonly string _value;

        private EventHubType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventHubType Notification { get; } = new EventHubType("Notification");
        public static EventHubType Hook { get; } = new EventHubType("Hook");

        public static bool operator ==(EventHubType left, EventHubType right) => left.Equals(right);
        public static bool operator !=(EventHubType left, EventHubType right) => !left.Equals(right);

        public static explicit operator string(EventHubType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventHubType other && Equals(other);
        public bool Equals(EventHubType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the event streaming service
    /// </summary>
    [EnumType]
    public readonly struct EventStreamingState : IEquatable<EventStreamingState>
    {
        private readonly string _value;

        private EventStreamingState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventStreamingState Disabled { get; } = new EventStreamingState("Disabled");
        public static EventStreamingState Enabled { get; } = new EventStreamingState("Enabled");

        public static bool operator ==(EventStreamingState left, EventStreamingState right) => left.Equals(right);
        public static bool operator !=(EventStreamingState left, EventStreamingState right) => !left.Equals(right);

        public static explicit operator string(EventStreamingState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventStreamingState other && Equals(other);
        public bool Equals(EventStreamingState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The event streaming service type
    /// </summary>
    [EnumType]
    public readonly struct EventStreamingType : IEquatable<EventStreamingType>
    {
        private readonly string _value;

        private EventStreamingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventStreamingType None { get; } = new EventStreamingType("None");
        public static EventStreamingType Managed { get; } = new EventStreamingType("Managed");
        public static EventStreamingType Azure { get; } = new EventStreamingType("Azure");

        public static bool operator ==(EventStreamingType left, EventStreamingType right) => left.Equals(right);
        public static bool operator !=(EventStreamingType left, EventStreamingType right) => !left.Equals(right);

        public static explicit operator string(EventStreamingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventStreamingType other && Equals(other);
        public bool Equals(EventStreamingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the state of managed eventhub. If enabled managed eventhub will be created, if disabled the managed eventhub will be removed.
    /// </summary>
    [EnumType]
    public readonly struct ManagedEventHubState : IEquatable<ManagedEventHubState>
    {
        private readonly string _value;

        private ManagedEventHubState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedEventHubState NotSpecified { get; } = new ManagedEventHubState("NotSpecified");
        public static ManagedEventHubState Disabled { get; } = new ManagedEventHubState("Disabled");
        public static ManagedEventHubState Enabled { get; } = new ManagedEventHubState("Enabled");

        public static bool operator ==(ManagedEventHubState left, ManagedEventHubState right) => left.Equals(right);
        public static bool operator !=(ManagedEventHubState left, ManagedEventHubState right) => !left.Equals(right);

        public static explicit operator string(ManagedEventHubState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedEventHubState other && Equals(other);
        public bool Equals(ManagedEventHubState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the public network access for managed resources.
    /// </summary>
    [EnumType]
    public readonly struct ManagedResourcesPublicNetworkAccess : IEquatable<ManagedResourcesPublicNetworkAccess>
    {
        private readonly string _value;

        private ManagedResourcesPublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedResourcesPublicNetworkAccess NotSpecified { get; } = new ManagedResourcesPublicNetworkAccess("NotSpecified");
        public static ManagedResourcesPublicNetworkAccess Enabled { get; } = new ManagedResourcesPublicNetworkAccess("Enabled");
        public static ManagedResourcesPublicNetworkAccess Disabled { get; } = new ManagedResourcesPublicNetworkAccess("Disabled");

        public static bool operator ==(ManagedResourcesPublicNetworkAccess left, ManagedResourcesPublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(ManagedResourcesPublicNetworkAccess left, ManagedResourcesPublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(ManagedResourcesPublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedResourcesPublicNetworkAccess other && Equals(other);
        public bool Equals(ManagedResourcesPublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the public network access.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess NotSpecified { get; } = new PublicNetworkAccess("NotSpecified");
        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Unknown { get; } = new Status("Unknown");
        public static Status Pending { get; } = new Status("Pending");
        public static Status Approved { get; } = new Status("Approved");
        public static Status Rejected { get; } = new Status("Rejected");
        public static Status Disconnected { get; } = new Status("Disconnected");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identity Type
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type None { get; } = new Type("None");
        public static Type SystemAssigned { get; } = new Type("SystemAssigned");
        public static Type UserAssigned { get; } = new Type("UserAssigned");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
