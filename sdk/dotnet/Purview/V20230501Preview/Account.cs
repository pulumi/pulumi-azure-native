// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Purview.V20230501Preview
{
    /// <summary>
    /// Account resource
    /// </summary>
    [AzureNativeResourceType("azure-native:purview/v20230501preview:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets the status of the account.
        /// </summary>
        [Output("accountStatus")]
        public Output<Outputs.AccountPropertiesResponseAccountStatus> AccountStatus { get; private set; } = null!;

        /// <summary>
        /// External Cloud Service connectors
        /// </summary>
        [Output("cloudConnectors")]
        public Output<Outputs.CloudConnectorsResponse?> CloudConnectors { get; private set; } = null!;

        /// <summary>
        /// Gets the time at which the entity was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Gets the creator of the entity.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Gets the creators of the entity's object id.
        /// </summary>
        [Output("createdByObjectId")]
        public Output<string> CreatedByObjectId { get; private set; } = null!;

        /// <summary>
        /// The URIs that are the public endpoints of the account.
        /// </summary>
        [Output("endpoints")]
        public Output<Outputs.AccountPropertiesResponseEndpoints> Endpoints { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the friendly name.
        /// </summary>
        [Output("friendlyName")]
        public Output<string> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// The Managed Identity of the resource
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Ingestion Storage Account Info
        /// </summary>
        [Output("ingestionStorage")]
        public Output<Outputs.IngestionStorageResponse?> IngestionStorage { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the state of managed eventhub. If enabled managed eventhub will be created, if disabled the managed eventhub will be removed.
        /// </summary>
        [Output("managedEventHubState")]
        public Output<string?> ManagedEventHubState { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the managed resource group name
        /// </summary>
        [Output("managedResourceGroupName")]
        public Output<string?> ManagedResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Gets the resource identifiers of the managed resources.
        /// </summary>
        [Output("managedResources")]
        public Output<Outputs.AccountPropertiesResponseManagedResources> ManagedResources { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the public network access for managed resources.
        /// </summary>
        [Output("managedResourcesPublicNetworkAccess")]
        public Output<string?> ManagedResourcesPublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets the private endpoint connections information.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the state of the provisioning.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the public network access.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the Sku.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.AccountResponseSku> Sku { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.TrackedResourceResponseSystemData> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tags on the azure resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs args, CustomResourceOptions? options = null)
            : base("azure-native:purview/v20230501preview:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:purview/v20230501preview:Account", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:purview:Account" },
                    new global::Pulumi.Alias { Type = "azure-native:purview/v20201201preview:Account" },
                    new global::Pulumi.Alias { Type = "azure-native:purview/v20210701:Account" },
                    new global::Pulumi.Alias { Type = "azure-native:purview/v20211201:Account" },
                    new global::Pulumi.Alias { Type = "azure-native:purview/v20240401preview:Account" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Account(name, id, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the account.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The Managed Identity of the resource
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Ingestion Storage Account Info
        /// </summary>
        [Input("ingestionStorage")]
        public Input<Inputs.IngestionStorageArgs>? IngestionStorage { get; set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Gets or sets the state of managed eventhub. If enabled managed eventhub will be created, if disabled the managed eventhub will be removed.
        /// </summary>
        [Input("managedEventHubState")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20230501Preview.ManagedEventHubState>? ManagedEventHubState { get; set; }

        /// <summary>
        /// Gets or sets the managed resource group name
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the public network access for managed resources.
        /// </summary>
        [Input("managedResourcesPublicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20230501Preview.ManagedResourcesPublicNetworkAccess>? ManagedResourcesPublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets the public network access.
        /// </summary>
        [Input("publicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20230501Preview.PublicNetworkAccess>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags on the azure resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AccountArgs()
        {
            ManagedEventHubState = "NotSpecified";
            ManagedResourcesPublicNetworkAccess = "NotSpecified";
            PublicNetworkAccess = "Enabled";
        }
        public static new AccountArgs Empty => new AccountArgs();
    }
}
