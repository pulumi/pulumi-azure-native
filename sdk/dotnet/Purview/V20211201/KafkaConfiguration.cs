// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Purview.V20211201
{
    /// <summary>
    /// The configuration of the event streaming service resource attached to the Purview account for kafka notifications.
    /// </summary>
    [AzureNativeResourceType("azure-native:purview/v20211201:KafkaConfiguration")]
    public partial class KafkaConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Consumer group for hook event hub.
        /// </summary>
        [Output("consumerGroup")]
        public Output<string?> ConsumerGroup { get; private set; } = null!;

        /// <summary>
        /// Credentials to access event hub.
        /// </summary>
        [Output("credentials")]
        public Output<Outputs.CredentialsResponse?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
        /// </summary>
        [Output("eventHubPartitionId")]
        public Output<string?> EventHubPartitionId { get; private set; } = null!;

        [Output("eventHubResourceId")]
        public Output<string?> EventHubResourceId { get; private set; } = null!;

        /// <summary>
        /// The event hub type.
        /// </summary>
        [Output("eventHubType")]
        public Output<string?> EventHubType { get; private set; } = null!;

        /// <summary>
        /// The state of the event streaming service
        /// </summary>
        [Output("eventStreamingState")]
        public Output<string?> EventStreamingState { get; private set; } = null!;

        /// <summary>
        /// The event streaming service type
        /// </summary>
        [Output("eventStreamingType")]
        public Output<string?> EventStreamingType { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.ProxyResourceResponseSystemData> SystemData { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a KafkaConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KafkaConfiguration(string name, KafkaConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:purview/v20211201:KafkaConfiguration", name, args ?? new KafkaConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KafkaConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:purview/v20211201:KafkaConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:purview:KafkaConfiguration"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KafkaConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KafkaConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KafkaConfiguration(name, id, options);
        }
    }

    public sealed class KafkaConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Consumer group for hook event hub.
        /// </summary>
        [Input("consumerGroup")]
        public Input<string>? ConsumerGroup { get; set; }

        /// <summary>
        /// Credentials to access event hub.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.CredentialsArgs>? Credentials { get; set; }

        /// <summary>
        /// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
        /// </summary>
        [Input("eventHubPartitionId")]
        public Input<string>? EventHubPartitionId { get; set; }

        [Input("eventHubResourceId")]
        public Input<string>? EventHubResourceId { get; set; }

        /// <summary>
        /// The event hub type.
        /// </summary>
        [Input("eventHubType")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20211201.EventHubType>? EventHubType { get; set; }

        /// <summary>
        /// The state of the event streaming service
        /// </summary>
        [Input("eventStreamingState")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20211201.EventStreamingState>? EventStreamingState { get; set; }

        /// <summary>
        /// The event streaming service type
        /// </summary>
        [Input("eventStreamingType")]
        public InputUnion<string, Pulumi.AzureNative.Purview.V20211201.EventStreamingType>? EventStreamingType { get; set; }

        /// <summary>
        /// The kafka configuration name.
        /// </summary>
        [Input("kafkaConfigurationName")]
        public Input<string>? KafkaConfigurationName { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public KafkaConfigurationArgs()
        {
            EventStreamingState = "Enabled";
            EventStreamingType = "None";
        }
        public static new KafkaConfigurationArgs Empty => new KafkaConfigurationArgs();
    }
}
