// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.AVS
{
    public static class GetGlobalReachConnection
    {
        /// <summary>
        /// A global reach connection resource
        /// API Version: 2020-07-17-preview.
        /// </summary>
        public static Task<GetGlobalReachConnectionResult> InvokeAsync(GetGlobalReachConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGlobalReachConnectionResult>("azure-nextgen:avs:getGlobalReachConnection", args ?? new GetGlobalReachConnectionArgs(), options.WithVersion());
    }


    public sealed class GetGlobalReachConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the global reach connection in the private cloud
        /// </summary>
        [Input("globalReachConnectionName", required: true)]
        public string GlobalReachConnectionName { get; set; } = null!;

        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public string PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGlobalReachConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGlobalReachConnectionResult
    {
        /// <summary>
        /// The network used for global reach carved out from the original network block provided for the private cloud
        /// </summary>
        public readonly string AddressPrefix;
        /// <summary>
        /// Authorization key from the peer express route used for the global reach connection
        /// </summary>
        public readonly string? AuthorizationKey;
        /// <summary>
        /// The connection status of the global reach connection
        /// </summary>
        public readonly string CircuitConnectionStatus;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
        /// </summary>
        public readonly string? PeerExpressRouteCircuit;
        /// <summary>
        /// The state of the  ExpressRoute Circuit Authorization provisioning
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetGlobalReachConnectionResult(
            string addressPrefix,

            string? authorizationKey,

            string circuitConnectionStatus,

            string id,

            string name,

            string? peerExpressRouteCircuit,

            string provisioningState,

            string type)
        {
            AddressPrefix = addressPrefix;
            AuthorizationKey = authorizationKey;
            CircuitConnectionStatus = circuitConnectionStatus;
            Id = id;
            Name = name;
            PeerExpressRouteCircuit = peerExpressRouteCircuit;
            ProvisioningState = provisioningState;
            Type = type;
        }
    }
}
