// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AVS
{
    public static class GetPrivateCloud
    {
        /// <summary>
        /// A private cloud resource
        /// Azure REST API version: 2022-05-01.
        /// 
        /// Other available API versions: 2023-03-01, 2023-09-01.
        /// </summary>
        public static Task<GetPrivateCloudResult> InvokeAsync(GetPrivateCloudArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrivateCloudResult>("azure-native:avs:getPrivateCloud", args ?? new GetPrivateCloudArgs(), options.WithDefaults());

        /// <summary>
        /// A private cloud resource
        /// Azure REST API version: 2022-05-01.
        /// 
        /// Other available API versions: 2023-03-01, 2023-09-01.
        /// </summary>
        public static Output<GetPrivateCloudResult> Invoke(GetPrivateCloudInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateCloudResult>("azure-native:avs:getPrivateCloud", args ?? new GetPrivateCloudInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateCloudArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public string PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPrivateCloudArgs()
        {
        }
        public static new GetPrivateCloudArgs Empty => new GetPrivateCloudArgs();
    }

    public sealed class GetPrivateCloudInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public Input<string> PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPrivateCloudInvokeArgs()
        {
        }
        public static new GetPrivateCloudInvokeArgs Empty => new GetPrivateCloudInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateCloudResult
    {
        /// <summary>
        /// Properties describing how the cloud is distributed across availability zones
        /// </summary>
        public readonly Outputs.AvailabilityPropertiesResponse? Availability;
        /// <summary>
        /// An ExpressRoute Circuit
        /// </summary>
        public readonly Outputs.CircuitResponse? Circuit;
        /// <summary>
        /// Customer managed key encryption, can be enabled or disabled
        /// </summary>
        public readonly Outputs.EncryptionResponse? Encryption;
        /// <summary>
        /// The endpoints
        /// </summary>
        public readonly Outputs.EndpointsResponse Endpoints;
        /// <summary>
        /// Array of cloud link IDs from other clouds that connect to this one
        /// </summary>
        public readonly ImmutableArray<string> ExternalCloudLinks;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the private cloud, if configured.
        /// </summary>
        public readonly Outputs.PrivateCloudIdentityResponse? Identity;
        /// <summary>
        /// vCenter Single Sign On Identity Sources
        /// </summary>
        public readonly ImmutableArray<Outputs.IdentitySourceResponse> IdentitySources;
        /// <summary>
        /// Connectivity to internet is enabled or disabled
        /// </summary>
        public readonly string? Internet;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The default cluster used for management
        /// </summary>
        public readonly Outputs.ManagementClusterResponse ManagementCluster;
        /// <summary>
        /// Network used to access vCenter Server and NSX-T Manager
        /// </summary>
        public readonly string ManagementNetwork;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </summary>
        public readonly string NetworkBlock;
        /// <summary>
        /// Flag to indicate whether the private cloud has the quota for provisioned NSX Public IP count raised from 64 to 1024
        /// </summary>
        public readonly string NsxPublicIpQuotaRaised;
        /// <summary>
        /// Thumbprint of the NSX-T Manager SSL certificate
        /// </summary>
        public readonly string NsxtCertificateThumbprint;
        /// <summary>
        /// Optionally, set the NSX-T Manager password when the private cloud is created
        /// </summary>
        public readonly string? NsxtPassword;
        /// <summary>
        /// Used for virtual machine cold migration, cloning, and snapshot migration
        /// </summary>
        public readonly string ProvisioningNetwork;
        /// <summary>
        /// The provisioning state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// A secondary expressRoute circuit from a separate AZ. Only present in a stretched private cloud
        /// </summary>
        public readonly Outputs.CircuitResponse? SecondaryCircuit;
        /// <summary>
        /// The private cloud SKU
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Thumbprint of the vCenter Server SSL certificate
        /// </summary>
        public readonly string VcenterCertificateThumbprint;
        /// <summary>
        /// Optionally, set the vCenter admin password when the private cloud is created
        /// </summary>
        public readonly string? VcenterPassword;
        /// <summary>
        /// Used for live migration of virtual machines
        /// </summary>
        public readonly string VmotionNetwork;

        [OutputConstructor]
        private GetPrivateCloudResult(
            Outputs.AvailabilityPropertiesResponse? availability,

            Outputs.CircuitResponse? circuit,

            Outputs.EncryptionResponse? encryption,

            Outputs.EndpointsResponse endpoints,

            ImmutableArray<string> externalCloudLinks,

            string id,

            Outputs.PrivateCloudIdentityResponse? identity,

            ImmutableArray<Outputs.IdentitySourceResponse> identitySources,

            string? internet,

            string location,

            Outputs.ManagementClusterResponse managementCluster,

            string managementNetwork,

            string name,

            string networkBlock,

            string nsxPublicIpQuotaRaised,

            string nsxtCertificateThumbprint,

            string? nsxtPassword,

            string provisioningNetwork,

            string provisioningState,

            Outputs.CircuitResponse? secondaryCircuit,

            Outputs.SkuResponse sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            string vcenterCertificateThumbprint,

            string? vcenterPassword,

            string vmotionNetwork)
        {
            Availability = availability;
            Circuit = circuit;
            Encryption = encryption;
            Endpoints = endpoints;
            ExternalCloudLinks = externalCloudLinks;
            Id = id;
            Identity = identity;
            IdentitySources = identitySources;
            Internet = internet;
            Location = location;
            ManagementCluster = managementCluster;
            ManagementNetwork = managementNetwork;
            Name = name;
            NetworkBlock = networkBlock;
            NsxPublicIpQuotaRaised = nsxPublicIpQuotaRaised;
            NsxtCertificateThumbprint = nsxtCertificateThumbprint;
            NsxtPassword = nsxtPassword;
            ProvisioningNetwork = provisioningNetwork;
            ProvisioningState = provisioningState;
            SecondaryCircuit = secondaryCircuit;
            Sku = sku;
            Tags = tags;
            Type = type;
            VcenterCertificateThumbprint = vcenterCertificateThumbprint;
            VcenterPassword = vcenterPassword;
            VmotionNetwork = vmotionNetwork;
        }
    }
}
