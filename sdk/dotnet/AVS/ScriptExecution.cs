// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AVS
{
    /// <summary>
    /// An instance of a script executed by a user - custom or AVS
    /// API Version: 2022-05-01.
    /// Previous API Version: 2021-06-01. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:avs:ScriptExecution")]
    public partial class ScriptExecution : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Standard error output stream from the powershell execution
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<string>> Errors { get; private set; } = null!;

        /// <summary>
        /// Error message if the script was able to run, but if the script itself had errors or powershell threw an exception
        /// </summary>
        [Output("failureReason")]
        public Output<string?> FailureReason { get; private set; } = null!;

        /// <summary>
        /// Time the script execution was finished
        /// </summary>
        [Output("finishedAt")]
        public Output<string> FinishedAt { get; private set; } = null!;

        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and credentials
        /// </summary>
        [Output("hiddenParameters")]
        public Output<ImmutableArray<object>> HiddenParameters { get; private set; } = null!;

        /// <summary>
        /// Standard information out stream from the powershell execution
        /// </summary>
        [Output("information")]
        public Output<ImmutableArray<string>> Information { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// User-defined dictionary.
        /// </summary>
        [Output("namedOutputs")]
        public Output<ImmutableDictionary<string, object>?> NamedOutputs { get; private set; } = null!;

        /// <summary>
        /// Standard output stream from the powershell execution
        /// </summary>
        [Output("output")]
        public Output<ImmutableArray<string>> Output { get; private set; } = null!;

        /// <summary>
        /// Parameters the script will accept
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<object>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The state of the script execution resource
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Time to live for the resource. If not provided, will be available for 60 days
        /// </summary>
        [Output("retention")]
        public Output<string?> Retention { get; private set; } = null!;

        /// <summary>
        /// A reference to the script cmdlet resource if user is running a AVS script
        /// </summary>
        [Output("scriptCmdletId")]
        public Output<string?> ScriptCmdletId { get; private set; } = null!;

        /// <summary>
        /// Time the script execution was started
        /// </summary>
        [Output("startedAt")]
        public Output<string> StartedAt { get; private set; } = null!;

        /// <summary>
        /// Time the script execution was submitted
        /// </summary>
        [Output("submittedAt")]
        public Output<string> SubmittedAt { get; private set; } = null!;

        /// <summary>
        /// Time limit for execution
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Standard warning out stream from the powershell execution
        /// </summary>
        [Output("warnings")]
        public Output<ImmutableArray<string>> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a ScriptExecution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScriptExecution(string name, ScriptExecutionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:avs:ScriptExecution", name, args ?? new ScriptExecutionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScriptExecution(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:avs:ScriptExecution", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20210601:ScriptExecution"},
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20211201:ScriptExecution"},
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20220501:ScriptExecution"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScriptExecution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScriptExecution Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ScriptExecution(name, id, options);
        }
    }

    public sealed class ScriptExecutionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Error message if the script was able to run, but if the script itself had errors or powershell threw an exception
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        [Input("hiddenParameters")]
        private InputList<object>? _hiddenParameters;

        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and credentials
        /// </summary>
        public InputList<object> HiddenParameters
        {
            get => _hiddenParameters ?? (_hiddenParameters = new InputList<object>());
            set => _hiddenParameters = value;
        }

        [Input("namedOutputs")]
        private InputMap<object>? _namedOutputs;

        /// <summary>
        /// User-defined dictionary.
        /// </summary>
        public InputMap<object> NamedOutputs
        {
            get => _namedOutputs ?? (_namedOutputs = new InputMap<object>());
            set => _namedOutputs = value;
        }

        [Input("output")]
        private InputList<string>? _output;

        /// <summary>
        /// Standard output stream from the powershell execution
        /// </summary>
        public InputList<string> Output
        {
            get => _output ?? (_output = new InputList<string>());
            set => _output = value;
        }

        [Input("parameters")]
        private InputList<object>? _parameters;

        /// <summary>
        /// Parameters the script will accept
        /// </summary>
        public InputList<object> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<object>());
            set => _parameters = value;
        }

        /// <summary>
        /// The name of the private cloud.
        /// </summary>
        [Input("privateCloudName", required: true)]
        public Input<string> PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Time to live for the resource. If not provided, will be available for 60 days
        /// </summary>
        [Input("retention")]
        public Input<string>? Retention { get; set; }

        /// <summary>
        /// A reference to the script cmdlet resource if user is running a AVS script
        /// </summary>
        [Input("scriptCmdletId")]
        public Input<string>? ScriptCmdletId { get; set; }

        /// <summary>
        /// Name of the user-invoked script execution resource
        /// </summary>
        [Input("scriptExecutionName")]
        public Input<string>? ScriptExecutionName { get; set; }

        /// <summary>
        /// Time limit for execution
        /// </summary>
        [Input("timeout", required: true)]
        public Input<string> Timeout { get; set; } = null!;

        public ScriptExecutionArgs()
        {
        }
        public static new ScriptExecutionArgs Empty => new ScriptExecutionArgs();
    }
}
