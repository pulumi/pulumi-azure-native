// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AVS.V20230901
{
    /// <summary>
    /// A global reach connection resource
    /// </summary>
    [AzureNativeResourceType("azure-native:avs/v20230901:GlobalReachConnection")]
    public partial class GlobalReachConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The network used for global reach carved out from the original network block
        /// provided for the private cloud
        /// </summary>
        [Output("addressPrefix")]
        public Output<string> AddressPrefix { get; private set; } = null!;

        /// <summary>
        /// Authorization key from the peer express route used for the global reach
        /// connection
        /// </summary>
        [Output("authorizationKey")]
        public Output<string?> AuthorizationKey { get; private set; } = null!;

        /// <summary>
        /// The connection status of the global reach connection
        /// </summary>
        [Output("circuitConnectionStatus")]
        public Output<string> CircuitConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
        /// global reach connection
        /// </summary>
        [Output("expressRouteId")]
        public Output<string?> ExpressRouteId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Identifier of the ExpressRoute Circuit to peer with in the global reach
        /// connection
        /// </summary>
        [Output("peerExpressRouteCircuit")]
        public Output<string?> PeerExpressRouteCircuit { get; private set; } = null!;

        /// <summary>
        /// The state of the  ExpressRoute Circuit Authorization provisioning
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalReachConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalReachConnection(string name, GlobalReachConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure-native:avs/v20230901:GlobalReachConnection", name, args ?? new GlobalReachConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalReachConnection(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:avs/v20230901:GlobalReachConnection", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:avs:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20200717preview:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20210101preview:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20210601:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20211201:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20220501:GlobalReachConnection" },
                    new global::Pulumi.Alias { Type = "azure-native:avs/v20230301:GlobalReachConnection" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalReachConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalReachConnection Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GlobalReachConnection(name, id, options);
        }
    }

    public sealed class GlobalReachConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization key from the peer express route used for the global reach
        /// connection
        /// </summary>
        [Input("authorizationKey")]
        public Input<string>? AuthorizationKey { get; set; }

        /// <summary>
        /// The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
        /// global reach connection
        /// </summary>
        [Input("expressRouteId")]
        public Input<string>? ExpressRouteId { get; set; }

        /// <summary>
        /// Name of the global reach connection
        /// </summary>
        [Input("globalReachConnectionName")]
        public Input<string>? GlobalReachConnectionName { get; set; }

        /// <summary>
        /// Identifier of the ExpressRoute Circuit to peer with in the global reach
        /// connection
        /// </summary>
        [Input("peerExpressRouteCircuit")]
        public Input<string>? PeerExpressRouteCircuit { get; set; }

        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public Input<string> PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GlobalReachConnectionArgs()
        {
        }
        public static new GlobalReachConnectionArgs Empty => new GlobalReachConnectionArgs();
    }
}
