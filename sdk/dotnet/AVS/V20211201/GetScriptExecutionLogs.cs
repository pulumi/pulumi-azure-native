// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AVS.V20211201
{
    public static class GetScriptExecutionLogs
    {
        /// <summary>
        /// An instance of a script executed by a user - custom or AVS
        /// </summary>
        public static Task<GetScriptExecutionLogsResult> InvokeAsync(GetScriptExecutionLogsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScriptExecutionLogsResult>("azure-native:avs/v20211201:getScriptExecutionLogs", args ?? new GetScriptExecutionLogsArgs(), options.WithDefaults());

        /// <summary>
        /// An instance of a script executed by a user - custom or AVS
        /// </summary>
        public static Output<GetScriptExecutionLogsResult> Invoke(GetScriptExecutionLogsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScriptExecutionLogsResult>("azure-native:avs/v20211201:getScriptExecutionLogs", args ?? new GetScriptExecutionLogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScriptExecutionLogsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public string PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the user-invoked script execution resource
        /// </summary>
        [Input("scriptExecutionName", required: true)]
        public string ScriptExecutionName { get; set; } = null!;

        public GetScriptExecutionLogsArgs()
        {
        }
    }

    public sealed class GetScriptExecutionLogsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the private cloud
        /// </summary>
        [Input("privateCloudName", required: true)]
        public Input<string> PrivateCloudName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the user-invoked script execution resource
        /// </summary>
        [Input("scriptExecutionName", required: true)]
        public Input<string> ScriptExecutionName { get; set; } = null!;

        public GetScriptExecutionLogsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetScriptExecutionLogsResult
    {
        /// <summary>
        /// Standard error output stream from the powershell execution
        /// </summary>
        public readonly ImmutableArray<string> Errors;
        /// <summary>
        /// Error message if the script was able to run, but if the script itself had errors or powershell threw an exception
        /// </summary>
        public readonly string? FailureReason;
        /// <summary>
        /// Time the script execution was finished
        /// </summary>
        public readonly string FinishedAt;
        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and credentials
        /// </summary>
        public readonly ImmutableArray<object> HiddenParameters;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Standard information out stream from the powershell execution
        /// </summary>
        public readonly ImmutableArray<string> Information;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// User-defined dictionary.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? NamedOutputs;
        /// <summary>
        /// Standard output stream from the powershell execution
        /// </summary>
        public readonly ImmutableArray<string> Output;
        /// <summary>
        /// Parameters the script will accept
        /// </summary>
        public readonly ImmutableArray<object> Parameters;
        /// <summary>
        /// The state of the script execution resource
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Time to live for the resource. If not provided, will be available for 60 days
        /// </summary>
        public readonly string? Retention;
        /// <summary>
        /// A reference to the script cmdlet resource if user is running a AVS script
        /// </summary>
        public readonly string? ScriptCmdletId;
        /// <summary>
        /// Time the script execution was started
        /// </summary>
        public readonly string StartedAt;
        /// <summary>
        /// Time the script execution was submitted
        /// </summary>
        public readonly string SubmittedAt;
        /// <summary>
        /// Time limit for execution
        /// </summary>
        public readonly string Timeout;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Standard warning out stream from the powershell execution
        /// </summary>
        public readonly ImmutableArray<string> Warnings;

        [OutputConstructor]
        private GetScriptExecutionLogsResult(
            ImmutableArray<string> errors,

            string? failureReason,

            string finishedAt,

            ImmutableArray<object> hiddenParameters,

            string id,

            ImmutableArray<string> information,

            string name,

            ImmutableDictionary<string, object>? namedOutputs,

            ImmutableArray<string> output,

            ImmutableArray<object> parameters,

            string provisioningState,

            string? retention,

            string? scriptCmdletId,

            string startedAt,

            string submittedAt,

            string timeout,

            string type,

            ImmutableArray<string> warnings)
        {
            Errors = errors;
            FailureReason = failureReason;
            FinishedAt = finishedAt;
            HiddenParameters = hiddenParameters;
            Id = id;
            Information = information;
            Name = name;
            NamedOutputs = namedOutputs;
            Output = output;
            Parameters = parameters;
            ProvisioningState = provisioningState;
            Retention = retention;
            ScriptCmdletId = scriptCmdletId;
            StartedAt = startedAt;
            SubmittedAt = submittedAt;
            Timeout = timeout;
            Type = type;
            Warnings = warnings;
        }
    }
}
