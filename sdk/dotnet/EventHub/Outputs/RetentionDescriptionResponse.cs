// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.Outputs
{

    /// <summary>
    /// Properties to configure retention settings for the  eventhub
    /// </summary>
    [OutputType]
    public sealed class RetentionDescriptionResponse
    {
        /// <summary>
        /// Enumerates the possible values for cleanup policy
        /// </summary>
        public readonly string? CleanupPolicy;
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy is Compact the returned value of this property is Long.MaxValue 
        /// </summary>
        public readonly double? RetentionTimeInHours;
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is Compact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub
        /// </summary>
        public readonly int? TombstoneRetentionTimeInHours;

        [OutputConstructor]
        private RetentionDescriptionResponse(
            string? cleanupPolicy,

            double? retentionTimeInHours,

            int? tombstoneRetentionTimeInHours)
        {
            CleanupPolicy = cleanupPolicy;
            RetentionTimeInHours = retentionTimeInHours;
            TombstoneRetentionTimeInHours = tombstoneRetentionTimeInHours;
        }
    }
}
