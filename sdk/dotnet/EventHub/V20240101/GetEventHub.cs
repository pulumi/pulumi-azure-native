// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20240101
{
    public static class GetEventHub
    {
        /// <summary>
        /// Gets an Event Hubs description for the specified Event Hub.
        /// </summary>
        public static Task<GetEventHubResult> InvokeAsync(GetEventHubArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventHubResult>("azure-native:eventhub/v20240101:getEventHub", args ?? new GetEventHubArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an Event Hubs description for the specified Event Hub.
        /// </summary>
        public static Output<GetEventHubResult> Invoke(GetEventHubInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventHubResult>("azure-native:eventhub/v20240101:getEventHub", args ?? new GetEventHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Event Hub name
        /// </summary>
        [Input("eventHubName", required: true)]
        public string EventHubName { get; set; } = null!;

        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEventHubArgs()
        {
        }
        public static new GetEventHubArgs Empty => new GetEventHubArgs();
    }

    public sealed class GetEventHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Event Hub name
        /// </summary>
        [Input("eventHubName", required: true)]
        public Input<string> EventHubName { get; set; } = null!;

        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEventHubInvokeArgs()
        {
        }
        public static new GetEventHubInvokeArgs Empty => new GetEventHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventHubResult
    {
        /// <summary>
        /// Properties of capture description
        /// </summary>
        public readonly Outputs.CaptureDescriptionResponse? CaptureDescription;
        /// <summary>
        /// Exact time the Event Hub was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        /// </summary>
        public readonly double? MessageRetentionInDays;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
        /// </summary>
        public readonly double? PartitionCount;
        /// <summary>
        /// Current number of shards on the Event Hub.
        /// </summary>
        public readonly ImmutableArray<string> PartitionIds;
        /// <summary>
        /// Event Hub retention settings
        /// </summary>
        public readonly Outputs.RetentionDescriptionResponse? RetentionDescription;
        /// <summary>
        /// Enumerates the possible values for the status of the Event Hub.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The exact time the message was updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Gets and Sets Metadata of User.
        /// </summary>
        public readonly string? UserMetadata;

        [OutputConstructor]
        private GetEventHubResult(
            Outputs.CaptureDescriptionResponse? captureDescription,

            string createdAt,

            string id,

            string location,

            double? messageRetentionInDays,

            string name,

            double? partitionCount,

            ImmutableArray<string> partitionIds,

            Outputs.RetentionDescriptionResponse? retentionDescription,

            string? status,

            Outputs.SystemDataResponse systemData,

            string type,

            string updatedAt,

            string? userMetadata)
        {
            CaptureDescription = captureDescription;
            CreatedAt = createdAt;
            Id = id;
            Location = location;
            MessageRetentionInDays = messageRetentionInDays;
            Name = name;
            PartitionCount = partitionCount;
            PartitionIds = partitionIds;
            RetentionDescription = retentionDescription;
            Status = status;
            SystemData = systemData;
            Type = type;
            UpdatedAt = updatedAt;
            UserMetadata = userMetadata;
        }
    }
}
