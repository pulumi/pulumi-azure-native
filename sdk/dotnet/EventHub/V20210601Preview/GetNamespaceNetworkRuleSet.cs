// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20210601Preview
{
    public static class GetNamespaceNetworkRuleSet
    {
        /// <summary>
        /// Gets NetworkRuleSet for a Namespace.
        /// </summary>
        public static Task<GetNamespaceNetworkRuleSetResult> InvokeAsync(GetNamespaceNetworkRuleSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceNetworkRuleSetResult>("azure-native:eventhub/v20210601preview:getNamespaceNetworkRuleSet", args ?? new GetNamespaceNetworkRuleSetArgs(), options.WithDefaults());

        /// <summary>
        /// Gets NetworkRuleSet for a Namespace.
        /// </summary>
        public static Output<GetNamespaceNetworkRuleSetResult> Invoke(GetNamespaceNetworkRuleSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceNetworkRuleSetResult>("azure-native:eventhub/v20210601preview:getNamespaceNetworkRuleSet", args ?? new GetNamespaceNetworkRuleSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceNetworkRuleSetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNamespaceNetworkRuleSetArgs()
        {
        }
        public static new GetNamespaceNetworkRuleSetArgs Empty => new GetNamespaceNetworkRuleSetArgs();
    }

    public sealed class GetNamespaceNetworkRuleSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNamespaceNetworkRuleSetInvokeArgs()
        {
        }
        public static new GetNamespaceNetworkRuleSetInvokeArgs Empty => new GetNamespaceNetworkRuleSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceNetworkRuleSetResult
    {
        /// <summary>
        /// Default Action for Network Rule Set
        /// </summary>
        public readonly string? DefaultAction;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IpRules
        /// </summary>
        public readonly ImmutableArray<Outputs.NWRuleSetIpRulesResponse> IpRules;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Value that indicates whether Trusted Service Access is Enabled or not.
        /// </summary>
        public readonly bool? TrustedServiceAccessEnabled;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List VirtualNetwork Rules
        /// </summary>
        public readonly ImmutableArray<Outputs.NWRuleSetVirtualNetworkRulesResponse> VirtualNetworkRules;

        [OutputConstructor]
        private GetNamespaceNetworkRuleSetResult(
            string? defaultAction,

            string id,

            ImmutableArray<Outputs.NWRuleSetIpRulesResponse> ipRules,

            string name,

            string? publicNetworkAccess,

            Outputs.SystemDataResponse systemData,

            bool? trustedServiceAccessEnabled,

            string type,

            ImmutableArray<Outputs.NWRuleSetVirtualNetworkRulesResponse> virtualNetworkRules)
        {
            DefaultAction = defaultAction;
            Id = id;
            IpRules = ipRules;
            Name = name;
            PublicNetworkAccess = publicNetworkAccess;
            SystemData = systemData;
            TrustedServiceAccessEnabled = trustedServiceAccessEnabled;
            Type = type;
            VirtualNetworkRules = virtualNetworkRules;
        }
    }
}
