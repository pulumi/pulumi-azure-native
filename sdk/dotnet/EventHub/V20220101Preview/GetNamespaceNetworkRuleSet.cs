// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20220101Preview
{
    public static class GetNamespaceNetworkRuleSet
    {
        /// <summary>
        /// Description of topic resource.
        /// </summary>
        public static Task<GetNamespaceNetworkRuleSetResult> InvokeAsync(GetNamespaceNetworkRuleSetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceNetworkRuleSetResult>("azure-native:eventhub/v20220101preview:getNamespaceNetworkRuleSet", args ?? new GetNamespaceNetworkRuleSetArgs(), options.WithDefaults());

        /// <summary>
        /// Description of topic resource.
        /// </summary>
        public static Output<GetNamespaceNetworkRuleSetResult> Invoke(GetNamespaceNetworkRuleSetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNamespaceNetworkRuleSetResult>("azure-native:eventhub/v20220101preview:getNamespaceNetworkRuleSet", args ?? new GetNamespaceNetworkRuleSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceNetworkRuleSetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNamespaceNetworkRuleSetArgs()
        {
        }
    }

    public sealed class GetNamespaceNetworkRuleSetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNamespaceNetworkRuleSetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNamespaceNetworkRuleSetResult
    {
        /// <summary>
        /// Default Action for Network Rule Set
        /// </summary>
        public readonly string? DefaultAction;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IpRules
        /// </summary>
        public readonly ImmutableArray<Outputs.NWRuleSetIpRulesResponse> IpRules;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled. If value is SecuredByPerimeter then Inbound and Outbound communication is controlled by the network security perimeter and profile's access rules. 
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Value that indicates whether Trusted Service Access is Enabled or not.
        /// </summary>
        public readonly bool? TrustedServiceAccessEnabled;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List VirtualNetwork Rules
        /// </summary>
        public readonly ImmutableArray<Outputs.NWRuleSetVirtualNetworkRulesResponse> VirtualNetworkRules;

        [OutputConstructor]
        private GetNamespaceNetworkRuleSetResult(
            string? defaultAction,

            string id,

            ImmutableArray<Outputs.NWRuleSetIpRulesResponse> ipRules,

            string location,

            string name,

            string? publicNetworkAccess,

            Outputs.SystemDataResponse systemData,

            bool? trustedServiceAccessEnabled,

            string type,

            ImmutableArray<Outputs.NWRuleSetVirtualNetworkRulesResponse> virtualNetworkRules)
        {
            DefaultAction = defaultAction;
            Id = id;
            IpRules = ipRules;
            Location = location;
            Name = name;
            PublicNetworkAccess = publicNetworkAccess;
            SystemData = systemData;
            TrustedServiceAccessEnabled = trustedServiceAccessEnabled;
            Type = type;
            VirtualNetworkRules = virtualNetworkRules;
        }
    }
}
