// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.EventHub.V20220101Preview
{
    /// <summary>
    /// Application Group Policy types
    /// </summary>
    [EnumType]
    public readonly struct ApplicationGroupPolicyType : IEquatable<ApplicationGroupPolicyType>
    {
        private readonly string _value;

        private ApplicationGroupPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationGroupPolicyType ThrottlingPolicy { get; } = new ApplicationGroupPolicyType("ThrottlingPolicy");

        public static bool operator ==(ApplicationGroupPolicyType left, ApplicationGroupPolicyType right) => left.Equals(right);
        public static bool operator !=(ApplicationGroupPolicyType left, ApplicationGroupPolicyType right) => !left.Equals(right);

        public static explicit operator string(ApplicationGroupPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationGroupPolicyType other && Equals(other);
        public bool Equals(ApplicationGroupPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Metric Id on which the throttle limit should be set, MetricId can be discovered by hovering over Metric in the Metrics section of Event Hub Namespace inside Azure Portal
    /// </summary>
    [EnumType]
    public readonly struct MetricId : IEquatable<MetricId>
    {
        private readonly string _value;

        private MetricId(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MetricId IncomingBytes { get; } = new MetricId("IncomingBytes");
        public static MetricId OutgoingBytes { get; } = new MetricId("OutgoingBytes");
        public static MetricId IncomingMessages { get; } = new MetricId("IncomingMessages");
        public static MetricId OutgoingMessages { get; } = new MetricId("OutgoingMessages");

        public static bool operator ==(MetricId left, MetricId right) => left.Equals(right);
        public static bool operator !=(MetricId left, MetricId right) => !left.Equals(right);

        public static explicit operator string(MetricId value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetricId other && Equals(other);
        public bool Equals(MetricId other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SchemaCompatibility : IEquatable<SchemaCompatibility>
    {
        private readonly string _value;

        private SchemaCompatibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaCompatibility None { get; } = new SchemaCompatibility("None");
        public static SchemaCompatibility Backward { get; } = new SchemaCompatibility("Backward");
        public static SchemaCompatibility Forward { get; } = new SchemaCompatibility("Forward");

        public static bool operator ==(SchemaCompatibility left, SchemaCompatibility right) => left.Equals(right);
        public static bool operator !=(SchemaCompatibility left, SchemaCompatibility right) => !left.Equals(right);

        public static explicit operator string(SchemaCompatibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaCompatibility other && Equals(other);
        public bool Equals(SchemaCompatibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaType Unknown { get; } = new SchemaType("Unknown");
        public static SchemaType Avro { get; } = new SchemaType("Avro");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
