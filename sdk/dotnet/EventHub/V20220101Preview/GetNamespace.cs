// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20220101Preview
{
    public static class GetNamespace
    {
        /// <summary>
        /// Single Namespace item in List or Get Operation
        /// </summary>
        public static Task<GetNamespaceResult> InvokeAsync(GetNamespaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceResult>("azure-native:eventhub/v20220101preview:getNamespace", args ?? new GetNamespaceArgs(), options.WithDefaults());

        /// <summary>
        /// Single Namespace item in List or Get Operation
        /// </summary>
        public static Output<GetNamespaceResult> Invoke(GetNamespaceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNamespaceResult>("azure-native:eventhub/v20220101preview:getNamespace", args ?? new GetNamespaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNamespaceArgs()
        {
        }
    }

    public sealed class GetNamespaceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNamespaceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNamespaceResult
    {
        /// <summary>
        /// Alternate name specified when alias and namespace names are same.
        /// </summary>
        public readonly string? AlternateName;
        /// <summary>
        /// Cluster ARM ID of the Namespace.
        /// </summary>
        public readonly string? ClusterArmId;
        /// <summary>
        /// The time the Namespace was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// This property disables SAS authentication for the Event Hubs namespace.
        /// </summary>
        public readonly bool? DisableLocalAuth;
        /// <summary>
        /// Properties of BYOK Encryption description
        /// </summary>
        public readonly Outputs.EncryptionResponse? Encryption;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Properties of BYOK Identity description
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// Value that indicates whether AutoInflate is enabled for eventhub namespace.
        /// </summary>
        public readonly bool? IsAutoInflateEnabled;
        /// <summary>
        /// Value that indicates whether Kafka is enabled for eventhub namespace.
        /// </summary>
        public readonly bool? KafkaEnabled;
        /// <summary>
        /// Resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)
        /// </summary>
        public readonly int? MaximumThroughputUnits;
        /// <summary>
        /// Identifier for Azure Insights metrics.
        /// </summary>
        public readonly string MetricId;
        /// <summary>
        /// The minimum TLS version for the cluster to support, e.g. '1.2'
        /// </summary>
        public readonly string? MinimumTlsVersion;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the Namespace.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// Endpoint you can use to perform Service Bus operations.
        /// </summary>
        public readonly string ServiceBusEndpoint;
        /// <summary>
        /// Properties of sku resource
        /// </summary>
        public readonly Outputs.SkuResponse? Sku;
        /// <summary>
        /// Status of the Namespace.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The time the Namespace was updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetNamespaceResult(
            string? alternateName,

            string? clusterArmId,

            string createdAt,

            bool? disableLocalAuth,

            Outputs.EncryptionResponse? encryption,

            string id,

            Outputs.IdentityResponse? identity,

            bool? isAutoInflateEnabled,

            bool? kafkaEnabled,

            string? location,

            int? maximumThroughputUnits,

            string metricId,

            string? minimumTlsVersion,

            string name,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            string serviceBusEndpoint,

            Outputs.SkuResponse? sku,

            string status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string updatedAt,

            bool? zoneRedundant)
        {
            AlternateName = alternateName;
            ClusterArmId = clusterArmId;
            CreatedAt = createdAt;
            DisableLocalAuth = disableLocalAuth;
            Encryption = encryption;
            Id = id;
            Identity = identity;
            IsAutoInflateEnabled = isAutoInflateEnabled;
            KafkaEnabled = kafkaEnabled;
            Location = location;
            MaximumThroughputUnits = maximumThroughputUnits;
            MetricId = metricId;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            ServiceBusEndpoint = serviceBusEndpoint;
            Sku = sku;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UpdatedAt = updatedAt;
            ZoneRedundant = zoneRedundant;
        }
    }
}
