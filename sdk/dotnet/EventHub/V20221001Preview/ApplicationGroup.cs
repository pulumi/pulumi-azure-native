// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20221001Preview
{
    /// <summary>
    /// The Application Group object
    /// </summary>
    [AzureNativeResourceType("azure-native:eventhub/v20221001preview:ApplicationGroup")]
    public partial class ApplicationGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
        /// </summary>
        [Output("clientAppGroupIdentifier")]
        public Output<string> ClientAppGroupIdentifier { get; private set; } = null!;

        /// <summary>
        /// Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.ThrottlingPolicyResponse>> Policies { get; private set; } = null!;

        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationGroup(string name, ApplicationGroupArgs args, CustomResourceOptions? options = null)
            : base("azure-native:eventhub/v20221001preview:ApplicationGroup", name, args ?? new ApplicationGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:eventhub/v20221001preview:ApplicationGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:eventhub:ApplicationGroup" },
                    new global::Pulumi.Alias { Type = "azure-native:eventhub/v20220101preview:ApplicationGroup" },
                    new global::Pulumi.Alias { Type = "azure-native:eventhub/v20230101preview:ApplicationGroup" },
                    new global::Pulumi.Alias { Type = "azure-native:eventhub/v20240101:ApplicationGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ApplicationGroup(name, id, options);
        }
    }

    public sealed class ApplicationGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Application Group name 
        /// </summary>
        [Input("applicationGroupName")]
        public Input<string>? ApplicationGroupName { get; set; }

        /// <summary>
        /// The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
        /// </summary>
        [Input("clientAppGroupIdentifier", required: true)]
        public Input<string> ClientAppGroupIdentifier { get; set; } = null!;

        /// <summary>
        /// Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        [Input("policies")]
        private InputList<Inputs.ThrottlingPolicyArgs>? _policies;

        /// <summary>
        /// List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
        /// </summary>
        public InputList<Inputs.ThrottlingPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.ThrottlingPolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ApplicationGroupArgs()
        {
        }
        public static new ApplicationGroupArgs Empty => new ApplicationGroupArgs();
    }
}
