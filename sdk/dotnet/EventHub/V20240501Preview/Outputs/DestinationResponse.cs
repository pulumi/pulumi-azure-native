// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20240501Preview.Outputs
{

    /// <summary>
    /// Capture storage details for capture description
    /// </summary>
    [OutputType]
    public sealed class DestinationResponse
    {
        /// <summary>
        /// Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        public readonly string? ArchiveNameFormat;
        /// <summary>
        /// Blob container Name
        /// </summary>
        public readonly string? BlobContainer;
        /// <summary>
        /// The Azure Data Lake Store name for the captured events
        /// </summary>
        public readonly string? DataLakeAccountName;
        /// <summary>
        /// The destination folder path for the captured events
        /// </summary>
        public readonly string? DataLakeFolderPath;
        /// <summary>
        /// Subscription Id of Azure Data Lake Store
        /// </summary>
        public readonly string? DataLakeSubscriptionId;
        /// <summary>
        /// A value that indicates whether capture description is enabled.
        /// </summary>
        public readonly Outputs.CaptureIdentityResponse? Identity;
        /// <summary>
        /// Name for capture destination
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Resource id of the storage account to be used to create the blobs
        /// </summary>
        public readonly string? StorageAccountResourceId;

        [OutputConstructor]
        private DestinationResponse(
            string? archiveNameFormat,

            string? blobContainer,

            string? dataLakeAccountName,

            string? dataLakeFolderPath,

            string? dataLakeSubscriptionId,

            Outputs.CaptureIdentityResponse? identity,

            string? name,

            string? storageAccountResourceId)
        {
            ArchiveNameFormat = archiveNameFormat;
            BlobContainer = blobContainer;
            DataLakeAccountName = dataLakeAccountName;
            DataLakeFolderPath = dataLakeFolderPath;
            DataLakeSubscriptionId = dataLakeSubscriptionId;
            Identity = identity;
            Name = name;
            StorageAccountResourceId = storageAccountResourceId;
        }
    }
}
