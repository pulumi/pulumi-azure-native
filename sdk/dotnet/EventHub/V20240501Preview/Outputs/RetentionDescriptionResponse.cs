// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub.V20240501Preview.Outputs
{

    /// <summary>
    /// Properties to configure retention settings for the  eventhub
    /// </summary>
    [OutputType]
    public sealed class RetentionDescriptionResponse
    {
        /// <summary>
        /// Enumerates the possible values for cleanup policy
        /// </summary>
        public readonly string? CleanupPolicy;
        /// <summary>
        /// The minimum time a message will remain ineligible for compaction in the log. This value is used when cleanupPolicy is Compact or DeleteOrCompact.
        /// </summary>
        public readonly double? MinCompactionLagInMins;
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This should be positive value upto namespace SKU max. -1 is a special case where retention time is infinite, but the size of an entity is restricted and its size depends on namespace SKU type.
        /// </summary>
        public readonly double? RetentionTimeInHours;
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is used when cleanupPolicy is Compact or DeleteOrCompact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub
        /// </summary>
        public readonly int? TombstoneRetentionTimeInHours;

        [OutputConstructor]
        private RetentionDescriptionResponse(
            string? cleanupPolicy,

            double? minCompactionLagInMins,

            double? retentionTimeInHours,

            int? tombstoneRetentionTimeInHours)
        {
            CleanupPolicy = cleanupPolicy;
            MinCompactionLagInMins = minCompactionLagInMins;
            RetentionTimeInHours = retentionTimeInHours;
            TombstoneRetentionTimeInHours = tombstoneRetentionTimeInHours;
        }
    }
}
