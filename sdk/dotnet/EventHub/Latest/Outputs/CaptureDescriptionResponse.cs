// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.EventHub.Latest.Outputs
{

    [OutputType]
    public sealed class CaptureDescriptionResponse
    {
        /// <summary>
        /// Properties of Destination where capture will be stored. (Storage Account, Blob Names)
        /// </summary>
        public readonly Outputs.DestinationResponse? Destination;
        /// <summary>
        /// A value that indicates whether capture description is enabled. 
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version
        /// </summary>
        public readonly string? Encoding;
        /// <summary>
        /// The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
        /// </summary>
        public readonly int? IntervalInSeconds;
        /// <summary>
        /// The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
        /// </summary>
        public readonly int? SizeLimitInBytes;
        /// <summary>
        /// A value that indicates whether to Skip Empty Archives
        /// </summary>
        public readonly bool? SkipEmptyArchives;

        [OutputConstructor]
        private CaptureDescriptionResponse(
            Outputs.DestinationResponse? destination,

            bool? enabled,

            string? encoding,

            int? intervalInSeconds,

            int? sizeLimitInBytes,

            bool? skipEmptyArchives)
        {
            Destination = destination;
            Enabled = enabled;
            Encoding = encoding;
            IntervalInSeconds = intervalInSeconds;
            SizeLimitInBytes = sizeLimitInBytes;
            SkipEmptyArchives = skipEmptyArchives;
        }
    }
}
