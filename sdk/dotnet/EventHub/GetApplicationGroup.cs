// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.EventHub
{
    public static class GetApplicationGroup
    {
        /// <summary>
        /// Gets an ApplicationGroup for a Namespace.
        /// Azure REST API version: 2022-10-01-preview.
        /// 
        /// Other available API versions: 2023-01-01-preview, 2024-01-01, 2024-05-01-preview.
        /// </summary>
        public static Task<GetApplicationGroupResult> InvokeAsync(GetApplicationGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationGroupResult>("azure-native:eventhub:getApplicationGroup", args ?? new GetApplicationGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an ApplicationGroup for a Namespace.
        /// Azure REST API version: 2022-10-01-preview.
        /// 
        /// Other available API versions: 2023-01-01-preview, 2024-01-01, 2024-05-01-preview.
        /// </summary>
        public static Output<GetApplicationGroupResult> Invoke(GetApplicationGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationGroupResult>("azure-native:eventhub:getApplicationGroup", args ?? new GetApplicationGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Application Group name 
        /// </summary>
        [Input("applicationGroupName", required: true)]
        public string ApplicationGroupName { get; set; } = null!;

        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApplicationGroupArgs()
        {
        }
        public static new GetApplicationGroupArgs Empty => new GetApplicationGroupArgs();
    }

    public sealed class GetApplicationGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Application Group name 
        /// </summary>
        [Input("applicationGroupName", required: true)]
        public Input<string> ApplicationGroupName { get; set; } = null!;

        /// <summary>
        /// The Namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group within the azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetApplicationGroupInvokeArgs()
        {
        }
        public static new GetApplicationGroupInvokeArgs Empty => new GetApplicationGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationGroupResult
    {
        /// <summary>
        /// The Unique identifier for application group.Supports SAS(SASKeyName=KeyName) or AAD(AADAppID=Guid)
        /// </summary>
        public readonly string ClientAppGroupIdentifier;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines if Application Group is allowed to create connection with namespace or not. Once the isEnabled is set to false, all the existing connections of application group gets dropped and no new connections will be allowed
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of group policies that define the behavior of application group. The policies can support resource governance scenarios such as limiting ingress or egress traffic.
        /// </summary>
        public readonly ImmutableArray<Outputs.ThrottlingPolicyResponse> Policies;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetApplicationGroupResult(
            string clientAppGroupIdentifier,

            string id,

            bool? isEnabled,

            string location,

            string name,

            ImmutableArray<Outputs.ThrottlingPolicyResponse> policies,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            ClientAppGroupIdentifier = clientAppGroupIdentifier;
            Id = id;
            IsEnabled = isEnabled;
            Location = location;
            Name = name;
            Policies = policies;
            SystemData = systemData;
            Type = type;
        }
    }
}
