// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DeploymentManager.V20191101Preview
{
    public static class GetRollout
    {
        public static Task<GetRolloutResult> InvokeAsync(GetRolloutArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRolloutResult>("azure-nextgen:deploymentmanager/v20191101preview:getRollout", args ?? new GetRolloutArgs(), options.WithVersion());
    }


    public sealed class GetRolloutArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.
        /// </summary>
        [Input("retryAttempt")]
        public int? RetryAttempt { get; set; }

        /// <summary>
        /// The rollout name.
        /// </summary>
        [Input("rolloutName", required: true)]
        public string RolloutName { get; set; } = null!;

        public GetRolloutArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRolloutResult
    {
        /// <summary>
        /// The reference to the artifact source resource Id where the payload is located.
        /// </summary>
        public readonly string? ArtifactSourceId;
        /// <summary>
        /// The version of the build being deployed.
        /// </summary>
        public readonly string BuildVersion;
        /// <summary>
        /// Identity for the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operational information of the rollout.
        /// </summary>
        public readonly Outputs.RolloutOperationInfoResponseResult OperationInfo;
        /// <summary>
        /// The detailed information on the services being deployed.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceResponseResult> Services;
        /// <summary>
        /// The current status of the rollout.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The list of step groups that define the orchestration.
        /// </summary>
        public readonly ImmutableArray<Outputs.StepGroupResponse> StepGroups;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
        /// </summary>
        public readonly string TargetServiceTopologyId;
        /// <summary>
        /// The cardinal count of total number of retries performed on the rollout at a given time.
        /// </summary>
        public readonly int TotalRetryAttempts;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRolloutResult(
            string? artifactSourceId,

            string buildVersion,

            Outputs.IdentityResponse? identity,

            string location,

            string name,

            Outputs.RolloutOperationInfoResponseResult operationInfo,

            ImmutableArray<Outputs.ServiceResponseResult> services,

            string status,

            ImmutableArray<Outputs.StepGroupResponse> stepGroups,

            ImmutableDictionary<string, string>? tags,

            string targetServiceTopologyId,

            int totalRetryAttempts,

            string type)
        {
            ArtifactSourceId = artifactSourceId;
            BuildVersion = buildVersion;
            Identity = identity;
            Location = location;
            Name = name;
            OperationInfo = operationInfo;
            Services = services;
            Status = status;
            StepGroups = stepGroups;
            Tags = tags;
            TargetServiceTopologyId = targetServiceTopologyId;
            TotalRetryAttempts = totalRetryAttempts;
            Type = type;
        }
    }
}
