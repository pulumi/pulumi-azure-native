// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DeploymentManager.V20191101Preview.Inputs
{

    /// <summary>
    /// Defines the REST health check step properties.
    /// </summary>
    public sealed class RestHealthCheckStepAttributesArgs : Pulumi.ResourceArgs
    {
        [Input("healthChecks", required: true)]
        private InputList<Inputs.RestHealthCheckArgs>? _healthChecks;

        /// <summary>
        /// The list of checks that form the health check step.
        /// </summary>
        public InputList<Inputs.RestHealthCheckArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.RestHealthCheckArgs>());
            set => _healthChecks = value;
        }

        /// <summary>
        /// The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
        /// </summary>
        [Input("healthyStateDuration", required: true)]
        public Input<string> HealthyStateDuration { get; set; } = null!;

        /// <summary>
        /// The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
        /// </summary>
        [Input("maxElasticDuration")]
        public Input<string>? MaxElasticDuration { get; set; }

        /// <summary>
        /// The type of health check.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The duration in ISO 8601 format for which health check waits idly without any checks.
        /// </summary>
        [Input("waitDuration")]
        public Input<string>? WaitDuration { get; set; }

        public RestHealthCheckStepAttributesArgs()
        {
        }
    }
}
