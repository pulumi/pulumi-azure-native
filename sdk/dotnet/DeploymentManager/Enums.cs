// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DeploymentManager
{
    /// <summary>
    /// Describes the type of ARM deployment to be performed on the resource.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentMode : IEquatable<DeploymentMode>
    {
        private readonly string _value;

        private DeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentMode Incremental { get; } = new DeploymentMode("Incremental");
        public static DeploymentMode Complete { get; } = new DeploymentMode("Complete");

        public static bool operator ==(DeploymentMode left, DeploymentMode right) => left.Equals(right);
        public static bool operator !=(DeploymentMode left, DeploymentMode right) => !left.Equals(right);

        public static explicit operator string(DeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentMode other && Equals(other);
        public bool Equals(DeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The location of the authentication key/value pair in the request.
    /// </summary>
    [EnumType]
    public readonly struct RestAuthLocation : IEquatable<RestAuthLocation>
    {
        private readonly string _value;

        private RestAuthLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestAuthLocation Query { get; } = new RestAuthLocation("Query");
        public static RestAuthLocation Header { get; } = new RestAuthLocation("Header");

        public static bool operator ==(RestAuthLocation left, RestAuthLocation right) => left.Equals(right);
        public static bool operator !=(RestAuthLocation left, RestAuthLocation right) => !left.Equals(right);

        public static explicit operator string(RestAuthLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestAuthLocation other && Equals(other);
        public bool Equals(RestAuthLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type.
    /// </summary>
    [EnumType]
    public readonly struct RestAuthType : IEquatable<RestAuthType>
    {
        private readonly string _value;

        private RestAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestAuthType ApiKey { get; } = new RestAuthType("ApiKey");
        public static RestAuthType RolloutIdentity { get; } = new RestAuthType("RolloutIdentity");

        public static bool operator ==(RestAuthType left, RestAuthType right) => left.Equals(right);
        public static bool operator !=(RestAuthType left, RestAuthType right) => !left.Equals(right);

        public static explicit operator string(RestAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestAuthType other && Equals(other);
        public bool Equals(RestAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether any or all of the expressions should match with the response content.
    /// </summary>
    [EnumType]
    public readonly struct RestMatchQuantifier : IEquatable<RestMatchQuantifier>
    {
        private readonly string _value;

        private RestMatchQuantifier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestMatchQuantifier All { get; } = new RestMatchQuantifier("All");
        public static RestMatchQuantifier Any { get; } = new RestMatchQuantifier("Any");

        public static bool operator ==(RestMatchQuantifier left, RestMatchQuantifier right) => left.Equals(right);
        public static bool operator !=(RestMatchQuantifier left, RestMatchQuantifier right) => !left.Equals(right);

        public static explicit operator string(RestMatchQuantifier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestMatchQuantifier other && Equals(other);
        public bool Equals(RestMatchQuantifier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The HTTP method to use for the request.
    /// </summary>
    [EnumType]
    public readonly struct RestRequestMethod : IEquatable<RestRequestMethod>
    {
        private readonly string _value;

        private RestRequestMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestRequestMethod GET { get; } = new RestRequestMethod("GET");
        public static RestRequestMethod POST { get; } = new RestRequestMethod("POST");

        public static bool operator ==(RestRequestMethod left, RestRequestMethod right) => left.Equals(right);
        public static bool operator !=(RestRequestMethod left, RestRequestMethod right) => !left.Equals(right);

        public static explicit operator string(RestRequestMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestRequestMethod other && Equals(other);
        public bool Equals(RestRequestMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of step.
    /// </summary>
    [EnumType]
    public readonly struct StepType : IEquatable<StepType>
    {
        private readonly string _value;

        private StepType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StepType Wait { get; } = new StepType("Wait");
        public static StepType HealthCheck { get; } = new StepType("HealthCheck");

        public static bool operator ==(StepType left, StepType right) => left.Equals(right);
        public static bool operator !=(StepType left, StepType right) => !left.Equals(right);

        public static explicit operator string(StepType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StepType other && Equals(other);
        public bool Equals(StepType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
