// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.V20230801Preview
{
    /// <summary>
    /// An object that represents a cache rule for a container registry.
    /// </summary>
    [AzureNativeResourceType("azure-native:containerregistry/v20230801preview:CacheRule")]
    public partial class CacheRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation date of the cache rule.
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// The ARM resource ID of the credential store which is associated with the cache rule.
        /// </summary>
        [Output("credentialSetResourceId")]
        public Output<string?> CredentialSetResourceId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Source repository pulled from upstream.
        /// </summary>
        [Output("sourceRepository")]
        public Output<string?> SourceRepository { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Target repository specified in docker pull command.
        /// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
        /// </summary>
        [Output("targetRepository")]
        public Output<string?> TargetRepository { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CacheRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CacheRule(string name, CacheRuleArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerregistry/v20230801preview:CacheRule", name, args ?? new CacheRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CacheRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerregistry/v20230801preview:CacheRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry:CacheRule" },
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20230101preview:CacheRule" },
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20230601preview:CacheRule" },
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20230701:CacheRule" },
                    new global::Pulumi.Alias { Type = "azure-native:containerregistry/v20231101preview:CacheRule" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CacheRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CacheRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CacheRule(name, id, options);
        }
    }

    public sealed class CacheRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the cache rule.
        /// </summary>
        [Input("cacheRuleName")]
        public Input<string>? CacheRuleName { get; set; }

        /// <summary>
        /// The ARM resource ID of the credential store which is associated with the cache rule.
        /// </summary>
        [Input("credentialSetResourceId")]
        public Input<string>? CredentialSetResourceId { get; set; }

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Source repository pulled from upstream.
        /// </summary>
        [Input("sourceRepository")]
        public Input<string>? SourceRepository { get; set; }

        /// <summary>
        /// Target repository specified in docker pull command.
        /// Eg: docker pull myregistry.azurecr.io/{targetRepository}:{tag}
        /// </summary>
        [Input("targetRepository")]
        public Input<string>? TargetRepository { get; set; }

        public CacheRuleArgs()
        {
        }
        public static new CacheRuleArgs Empty => new CacheRuleArgs();
    }
}
