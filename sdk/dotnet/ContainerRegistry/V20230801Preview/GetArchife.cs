// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.V20230801Preview
{
    public static class GetArchife
    {
        /// <summary>
        /// Gets the properties of the archive.
        /// </summary>
        public static Task<GetArchifeResult> InvokeAsync(GetArchifeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetArchifeResult>("azure-native:containerregistry/v20230801preview:getArchife", args ?? new GetArchifeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the archive.
        /// </summary>
        public static Output<GetArchifeResult> Invoke(GetArchifeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetArchifeResult>("azure-native:containerregistry/v20230801preview:getArchife", args ?? new GetArchifeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArchifeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the archive resource.
        /// </summary>
        [Input("archiveName", required: true)]
        public string ArchiveName { get; set; } = null!;

        /// <summary>
        /// The type of the package resource.
        /// </summary>
        [Input("packageType", required: true)]
        public string PackageType { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetArchifeArgs()
        {
        }
        public static new GetArchifeArgs Empty => new GetArchifeArgs();
    }

    public sealed class GetArchifeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the archive resource.
        /// </summary>
        [Input("archiveName", required: true)]
        public Input<string> ArchiveName { get; set; } = null!;

        /// <summary>
        /// The type of the package resource.
        /// </summary>
        [Input("packageType", required: true)]
        public Input<string> PackageType { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetArchifeInvokeArgs()
        {
        }
        public static new GetArchifeInvokeArgs Empty => new GetArchifeInvokeArgs();
    }


    [OutputType]
    public sealed class GetArchifeResult
    {
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The package source of the archive.
        /// </summary>
        public readonly Outputs.ArchivePackageSourcePropertiesResponse? PackageSource;
        /// <summary>
        /// The provisioning state of the archive at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The published version of the archive.
        /// </summary>
        public readonly string? PublishedVersion;
        public readonly string RepositoryEndpoint;
        public readonly string? RepositoryEndpointPrefix;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetArchifeResult(
            string id,

            string name,

            Outputs.ArchivePackageSourcePropertiesResponse? packageSource,

            string provisioningState,

            string? publishedVersion,

            string repositoryEndpoint,

            string? repositoryEndpointPrefix,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Id = id;
            Name = name;
            PackageSource = packageSource;
            ProvisioningState = provisioningState;
            PublishedVersion = publishedVersion;
            RepositoryEndpoint = repositoryEndpoint;
            RepositoryEndpointPrefix = repositoryEndpointPrefix;
            SystemData = systemData;
            Type = type;
        }
    }
}
