// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20190601Preview.Inputs
{

    /// <summary>
    /// The parameters for a docker quick build.
    /// </summary>
    public sealed class DockerBuildRequestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        [Input("agentConfiguration")]
        public Input<Inputs.AgentPropertiesArgs>? AgentConfiguration { get; set; }

        /// <summary>
        /// The dedicated agent pool for the run.
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        [Input("arguments")]
        private InputList<Inputs.ArgumentArgs>? _arguments;

        /// <summary>
        /// The collection of override arguments to be used when executing the run.
        /// </summary>
        public InputList<Inputs.ArgumentArgs> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<Inputs.ArgumentArgs>());
            set => _arguments = value;
        }

        /// <summary>
        /// The properties that describes a set of credentials that will be used when this run is invoked.
        /// </summary>
        [Input("credentials")]
        public Input<Inputs.CredentialsArgs>? Credentials { get; set; }

        /// <summary>
        /// The Docker file path relative to the source location.
        /// </summary>
        [Input("dockerFilePath", required: true)]
        public Input<string> DockerFilePath { get; set; } = null!;

        [Input("imageNames")]
        private InputList<string>? _imageNames;

        /// <summary>
        /// The fully qualified image names including the repository and tag.
        /// </summary>
        public InputList<string> ImageNames
        {
            get => _imageNames ?? (_imageNames = new InputList<string>());
            set => _imageNames = value;
        }

        /// <summary>
        /// The value that indicates whether archiving is enabled for the run or not.
        /// </summary>
        [Input("isArchiveEnabled")]
        public Input<bool>? IsArchiveEnabled { get; set; }

        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        [Input("isPushEnabled")]
        public Input<bool>? IsPushEnabled { get; set; }

        /// <summary>
        /// The template that describes the repository and tag information for run log artifact.
        /// </summary>
        [Input("logTemplate")]
        public Input<string>? LogTemplate { get; set; }

        /// <summary>
        /// The value of this property indicates whether the image cache is enabled or not.
        /// </summary>
        [Input("noCache")]
        public Input<bool>? NoCache { get; set; }

        /// <summary>
        /// The platform properties against which the run has to happen.
        /// </summary>
        [Input("platform", required: true)]
        public Input<Inputs.PlatformPropertiesArgs> Platform { get; set; } = null!;

        /// <summary>
        /// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
        /// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// The name of the target build stage for the docker build.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// Run timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The type of the run request.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DockerBuildRequestArgs()
        {
        }
    }
}
