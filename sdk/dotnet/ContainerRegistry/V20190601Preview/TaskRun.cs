// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20190601Preview
{
    /// <summary>
    /// The task run that has the ARM resource and properties.
    /// The task run will have the information of request and result of a run.
    /// </summary>
    public partial class TaskRun : Pulumi.CustomResource
    {
        /// <summary>
        /// How the run should be forced to rerun even if the run request configuration has not changed
        /// </summary>
        [Output("forceUpdateTag")]
        public Output<string?> ForceUpdateTag { get; private set; } = null!;

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityPropertiesResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The location of the resource
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of this task run
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The request (parameters) for the run
        /// </summary>
        [Output("runRequest")]
        public Output<Union<Outputs.DockerBuildRequestResponse, Union<Outputs.EncodedTaskRunRequestResponse, Union<Outputs.FileTaskRunRequestResponse, Outputs.TaskRunRequestResponse>>>?> RunRequest { get; private set; } = null!;

        /// <summary>
        /// The result of this task run
        /// </summary>
        [Output("runResult")]
        public Output<Outputs.RunResponse> RunResult { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a TaskRun resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaskRun(string name, TaskRunArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:containerregistry/v20190601preview:TaskRun", name, args ?? new TaskRunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaskRun(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:containerregistry/v20190601preview:TaskRun", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaskRun resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaskRun Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TaskRun(name, id, options);
        }
    }

    public sealed class TaskRunArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// How the run should be forced to rerun even if the run request configuration has not changed
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// Identity for the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityPropertiesArgs>? Identity { get; set; }

        /// <summary>
        /// The location of the resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The request (parameters) for the run
        /// </summary>
        [Input("runRequest")]
        public InputUnion<Inputs.DockerBuildRequestArgs, InputUnion<Inputs.EncodedTaskRunRequestArgs, InputUnion<Inputs.FileTaskRunRequestArgs, Inputs.TaskRunRequestArgs>>>? RunRequest { get; set; }

        /// <summary>
        /// The name of the task run.
        /// </summary>
        [Input("taskRunName", required: true)]
        public Input<string> TaskRunName { get; set; } = null!;

        public TaskRunArgs()
        {
        }
    }
}
