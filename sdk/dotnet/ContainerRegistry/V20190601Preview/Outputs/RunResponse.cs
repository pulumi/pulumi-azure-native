// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20190601Preview.Outputs
{

    [OutputType]
    public sealed class RunResponse
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        public readonly Outputs.AgentPropertiesResponse? AgentConfiguration;
        /// <summary>
        /// The dedicated agent pool for the run.
        /// </summary>
        public readonly string? AgentPoolName;
        /// <summary>
        /// The time the run was scheduled.
        /// </summary>
        public readonly string? CreateTime;
        /// <summary>
        /// The list of custom registries that were logged in during this run.
        /// </summary>
        public readonly ImmutableArray<string> CustomRegistries;
        /// <summary>
        /// The time the run finished.
        /// </summary>
        public readonly string? FinishTime;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
        /// </summary>
        public readonly Outputs.ImageUpdateTriggerResponse? ImageUpdateTrigger;
        /// <summary>
        /// The value that indicates whether archiving is enabled or not.
        /// </summary>
        public readonly bool? IsArchiveEnabled;
        /// <summary>
        /// The last updated time for the run.
        /// </summary>
        public readonly string? LastUpdatedTime;
        /// <summary>
        /// The image description for the log artifact.
        /// </summary>
        public readonly Outputs.ImageDescriptorResponse LogArtifact;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageDescriptorResponse> OutputImages;
        /// <summary>
        /// The platform properties against which the run will happen.
        /// </summary>
        public readonly Outputs.PlatformPropertiesResponse? Platform;
        /// <summary>
        /// The provisioning state of a run.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The error message received from backend systems after the run is scheduled.
        /// </summary>
        public readonly string RunErrorMessage;
        /// <summary>
        /// The unique identifier for the run.
        /// </summary>
        public readonly string? RunId;
        /// <summary>
        /// The type of run.
        /// </summary>
        public readonly string? RunType;
        /// <summary>
        /// The scope of the credentials that were used to login to the source registry during this run.
        /// </summary>
        public readonly string? SourceRegistryAuth;
        /// <summary>
        /// The source trigger that caused the run.
        /// </summary>
        public readonly Outputs.SourceTriggerDescriptorResponse? SourceTrigger;
        /// <summary>
        /// The time the run started.
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// The current status of the run.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The task against which run was scheduled.
        /// </summary>
        public readonly string? Task;
        /// <summary>
        /// The timer trigger that caused the run.
        /// </summary>
        public readonly Outputs.TimerTriggerDescriptorResponse? TimerTrigger;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The update trigger token passed for the Run.
        /// </summary>
        public readonly string? UpdateTriggerToken;

        [OutputConstructor]
        private RunResponse(
            Outputs.AgentPropertiesResponse? agentConfiguration,

            string? agentPoolName,

            string? createTime,

            ImmutableArray<string> customRegistries,

            string? finishTime,

            string id,

            Outputs.ImageUpdateTriggerResponse? imageUpdateTrigger,

            bool? isArchiveEnabled,

            string? lastUpdatedTime,

            Outputs.ImageDescriptorResponse logArtifact,

            string name,

            ImmutableArray<Outputs.ImageDescriptorResponse> outputImages,

            Outputs.PlatformPropertiesResponse? platform,

            string? provisioningState,

            string runErrorMessage,

            string? runId,

            string? runType,

            string? sourceRegistryAuth,

            Outputs.SourceTriggerDescriptorResponse? sourceTrigger,

            string? startTime,

            string? status,

            string? task,

            Outputs.TimerTriggerDescriptorResponse? timerTrigger,

            string type,

            string? updateTriggerToken)
        {
            AgentConfiguration = agentConfiguration;
            AgentPoolName = agentPoolName;
            CreateTime = createTime;
            CustomRegistries = customRegistries;
            FinishTime = finishTime;
            Id = id;
            ImageUpdateTrigger = imageUpdateTrigger;
            IsArchiveEnabled = isArchiveEnabled;
            LastUpdatedTime = lastUpdatedTime;
            LogArtifact = logArtifact;
            Name = name;
            OutputImages = outputImages;
            Platform = platform;
            ProvisioningState = provisioningState;
            RunErrorMessage = runErrorMessage;
            RunId = runId;
            RunType = runType;
            SourceRegistryAuth = sourceRegistryAuth;
            SourceTrigger = sourceTrigger;
            StartTime = startTime;
            Status = status;
            Task = task;
            TimerTrigger = timerTrigger;
            Type = type;
            UpdateTriggerToken = updateTriggerToken;
        }
    }
}
