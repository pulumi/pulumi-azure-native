// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ContainerRegistry.V20190601Preview.Outputs
{

    [OutputType]
    public sealed class OverrideTaskStepPropertiesResponseResult
    {
        /// <summary>
        /// Gets or sets the collection of override arguments to be used when
        /// executing a build step.
        /// </summary>
        public readonly ImmutableArray<Outputs.ArgumentResponseResult> Arguments;
        /// <summary>
        /// The source context against which run has to be queued.
        /// </summary>
        public readonly string? ContextPath;
        /// <summary>
        /// The file against which run has to be queued.
        /// </summary>
        public readonly string? File;
        /// <summary>
        /// The name of the target build stage for the docker build.
        /// </summary>
        public readonly string? Target;
        /// <summary>
        /// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
        /// </summary>
        public readonly string? UpdateTriggerToken;
        /// <summary>
        /// The collection of overridable values that can be passed when running a Task.
        /// </summary>
        public readonly ImmutableArray<Outputs.SetValueResponseResult> Values;

        [OutputConstructor]
        private OverrideTaskStepPropertiesResponseResult(
            ImmutableArray<Outputs.ArgumentResponseResult> arguments,

            string? contextPath,

            string? file,

            string? target,

            string? updateTriggerToken,

            ImmutableArray<Outputs.SetValueResponseResult> values)
        {
            Arguments = arguments;
            ContextPath = contextPath;
            File = file;
            Target = target;
            UpdateTriggerToken = updateTriggerToken;
            Values = values;
        }
    }
}
