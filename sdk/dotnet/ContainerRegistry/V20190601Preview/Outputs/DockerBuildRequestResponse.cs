// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20190601Preview.Outputs
{

    [OutputType]
    public sealed class DockerBuildRequestResponse
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        public readonly Outputs.AgentPropertiesResponse? AgentConfiguration;
        /// <summary>
        /// The dedicated agent pool for the run.
        /// </summary>
        public readonly string? AgentPoolName;
        /// <summary>
        /// The collection of override arguments to be used when executing the run.
        /// </summary>
        public readonly ImmutableArray<Outputs.ArgumentResponse> Arguments;
        /// <summary>
        /// The properties that describes a set of credentials that will be used when this run is invoked.
        /// </summary>
        public readonly Outputs.CredentialsResponse? Credentials;
        /// <summary>
        /// The Docker file path relative to the source location.
        /// </summary>
        public readonly string DockerFilePath;
        /// <summary>
        /// The fully qualified image names including the repository and tag.
        /// </summary>
        public readonly ImmutableArray<string> ImageNames;
        /// <summary>
        /// The value that indicates whether archiving is enabled for the run or not.
        /// </summary>
        public readonly bool? IsArchiveEnabled;
        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        public readonly bool? IsPushEnabled;
        /// <summary>
        /// The template that describes the repository and tag information for run log artifact.
        /// </summary>
        public readonly string? LogTemplate;
        /// <summary>
        /// The value of this property indicates whether the image cache is enabled or not.
        /// </summary>
        public readonly bool? NoCache;
        /// <summary>
        /// The platform properties against which the run has to happen.
        /// </summary>
        public readonly Outputs.PlatformPropertiesResponse Platform;
        /// <summary>
        /// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
        /// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
        /// </summary>
        public readonly string? SourceLocation;
        /// <summary>
        /// The name of the target build stage for the docker build.
        /// </summary>
        public readonly string? Target;
        /// <summary>
        /// Run timeout in seconds.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// The type of the run request.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private DockerBuildRequestResponse(
            Outputs.AgentPropertiesResponse? agentConfiguration,

            string? agentPoolName,

            ImmutableArray<Outputs.ArgumentResponse> arguments,

            Outputs.CredentialsResponse? credentials,

            string dockerFilePath,

            ImmutableArray<string> imageNames,

            bool? isArchiveEnabled,

            bool? isPushEnabled,

            string? logTemplate,

            bool? noCache,

            Outputs.PlatformPropertiesResponse platform,

            string? sourceLocation,

            string? target,

            int? timeout,

            string type)
        {
            AgentConfiguration = agentConfiguration;
            AgentPoolName = agentPoolName;
            Arguments = arguments;
            Credentials = credentials;
            DockerFilePath = dockerFilePath;
            ImageNames = imageNames;
            IsArchiveEnabled = isArchiveEnabled;
            IsPushEnabled = isPushEnabled;
            LogTemplate = logTemplate;
            NoCache = noCache;
            Platform = platform;
            SourceLocation = sourceLocation;
            Target = target;
            Timeout = timeout;
            Type = type;
        }
    }
}
