// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ContainerRegistry.V20230101Preview
{
    /// <summary>
    /// Indicates whether audit logs are enabled on the connected registry.
    /// </summary>
    [EnumType]
    public readonly struct AuditLogStatus : IEquatable<AuditLogStatus>
    {
        private readonly string _value;

        private AuditLogStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuditLogStatus Enabled { get; } = new AuditLogStatus("Enabled");
        public static AuditLogStatus Disabled { get; } = new AuditLogStatus("Disabled");

        public static bool operator ==(AuditLogStatus left, AuditLogStatus right) => left.Equals(right);
        public static bool operator !=(AuditLogStatus left, AuditLogStatus right) => !left.Equals(right);

        public static explicit operator string(AuditLogStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuditLogStatus other && Equals(other);
        public bool Equals(AuditLogStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of the connected registry resource that indicates the permissions of the registry.
    /// </summary>
    [EnumType]
    public readonly struct ConnectedRegistryMode : IEquatable<ConnectedRegistryMode>
    {
        private readonly string _value;

        private ConnectedRegistryMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectedRegistryMode ReadWrite { get; } = new ConnectedRegistryMode("ReadWrite");
        public static ConnectedRegistryMode ReadOnly { get; } = new ConnectedRegistryMode("ReadOnly");
        public static ConnectedRegistryMode Registry { get; } = new ConnectedRegistryMode("Registry");
        public static ConnectedRegistryMode Mirror { get; } = new ConnectedRegistryMode("Mirror");

        public static bool operator ==(ConnectedRegistryMode left, ConnectedRegistryMode right) => left.Equals(right);
        public static bool operator !=(ConnectedRegistryMode left, ConnectedRegistryMode right) => !left.Equals(right);

        public static explicit operator string(ConnectedRegistryMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectedRegistryMode other && Equals(other);
        public bool Equals(ConnectedRegistryMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the credential.
    /// </summary>
    [EnumType]
    public readonly struct CredentialName : IEquatable<CredentialName>
    {
        private readonly string _value;

        private CredentialName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CredentialName Credential1 { get; } = new CredentialName("Credential1");

        public static bool operator ==(CredentialName left, CredentialName right) => left.Equals(right);
        public static bool operator !=(CredentialName left, CredentialName right) => !left.Equals(right);

        public static explicit operator string(CredentialName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CredentialName other && Equals(other);
        public bool Equals(CredentialName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The verbosity of logs persisted on the connected registry.
    /// </summary>
    [EnumType]
    public readonly struct LogLevel : IEquatable<LogLevel>
    {
        private readonly string _value;

        private LogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LogLevel Debug { get; } = new LogLevel("Debug");
        public static LogLevel Information { get; } = new LogLevel("Information");
        public static LogLevel Warning { get; } = new LogLevel("Warning");
        public static LogLevel Error { get; } = new LogLevel("Error");
        public static LogLevel None { get; } = new LogLevel("None");

        public static bool operator ==(LogLevel left, LogLevel right) => left.Equals(right);
        public static bool operator !=(LogLevel left, LogLevel right) => !left.Equals(right);

        public static explicit operator string(LogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogLevel other && Equals(other);
        public bool Equals(LogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipelineOptions : IEquatable<PipelineOptions>
    {
        private readonly string _value;

        private PipelineOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineOptions OverwriteTags { get; } = new PipelineOptions("OverwriteTags");
        public static PipelineOptions OverwriteBlobs { get; } = new PipelineOptions("OverwriteBlobs");
        public static PipelineOptions DeleteSourceBlobOnSuccess { get; } = new PipelineOptions("DeleteSourceBlobOnSuccess");
        public static PipelineOptions ContinueOnErrors { get; } = new PipelineOptions("ContinueOnErrors");

        public static bool operator ==(PipelineOptions left, PipelineOptions right) => left.Equals(right);
        public static bool operator !=(PipelineOptions left, PipelineOptions right) => !left.Equals(right);

        public static explicit operator string(PipelineOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineOptions other && Equals(other);
        public bool Equals(PipelineOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the source.
    /// </summary>
    [EnumType]
    public readonly struct PipelineRunSourceType : IEquatable<PipelineRunSourceType>
    {
        private readonly string _value;

        private PipelineRunSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineRunSourceType AzureStorageBlob { get; } = new PipelineRunSourceType("AzureStorageBlob");

        public static bool operator ==(PipelineRunSourceType left, PipelineRunSourceType right) => left.Equals(right);
        public static bool operator !=(PipelineRunSourceType left, PipelineRunSourceType right) => !left.Equals(right);

        public static explicit operator string(PipelineRunSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineRunSourceType other && Equals(other);
        public bool Equals(PipelineRunSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the target.
    /// </summary>
    [EnumType]
    public readonly struct PipelineRunTargetType : IEquatable<PipelineRunTargetType>
    {
        private readonly string _value;

        private PipelineRunTargetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineRunTargetType AzureStorageBlob { get; } = new PipelineRunTargetType("AzureStorageBlob");

        public static bool operator ==(PipelineRunTargetType left, PipelineRunTargetType right) => left.Equals(right);
        public static bool operator !=(PipelineRunTargetType left, PipelineRunTargetType right) => !left.Equals(right);

        public static explicit operator string(PipelineRunTargetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineRunTargetType other && Equals(other);
        public bool Equals(PipelineRunTargetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of source for the import pipeline.
    /// </summary>
    [EnumType]
    public readonly struct PipelineSourceType : IEquatable<PipelineSourceType>
    {
        private readonly string _value;

        private PipelineSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineSourceType AzureStorageBlobContainer { get; } = new PipelineSourceType("AzureStorageBlobContainer");

        public static bool operator ==(PipelineSourceType left, PipelineSourceType right) => left.Equals(right);
        public static bool operator !=(PipelineSourceType left, PipelineSourceType right) => !left.Equals(right);

        public static explicit operator string(PipelineSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineSourceType other && Equals(other);
        public bool Equals(PipelineSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the source trigger.
    /// </summary>
    [EnumType]
    public readonly struct TriggerStatus : IEquatable<TriggerStatus>
    {
        private readonly string _value;

        private TriggerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerStatus Enabled { get; } = new TriggerStatus("Enabled");
        public static TriggerStatus Disabled { get; } = new TriggerStatus("Disabled");

        public static bool operator ==(TriggerStatus left, TriggerStatus right) => left.Equals(right);
        public static bool operator !=(TriggerStatus left, TriggerStatus right) => !left.Equals(right);

        public static explicit operator string(TriggerStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerStatus other && Equals(other);
        public bool Equals(TriggerStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
