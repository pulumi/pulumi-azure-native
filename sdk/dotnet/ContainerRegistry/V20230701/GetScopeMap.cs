// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.V20230701
{
    public static class GetScopeMap
    {
        /// <summary>
        /// Gets the properties of the specified scope map.
        /// </summary>
        public static Task<GetScopeMapResult> InvokeAsync(GetScopeMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScopeMapResult>("azure-native:containerregistry/v20230701:getScopeMap", args ?? new GetScopeMapArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified scope map.
        /// </summary>
        public static Output<GetScopeMapResult> Invoke(GetScopeMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScopeMapResult>("azure-native:containerregistry/v20230701:getScopeMap", args ?? new GetScopeMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScopeMapArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scope map.
        /// </summary>
        [Input("scopeMapName", required: true)]
        public string ScopeMapName { get; set; } = null!;

        public GetScopeMapArgs()
        {
        }
        public static new GetScopeMapArgs Empty => new GetScopeMapArgs();
    }

    public sealed class GetScopeMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the scope map.
        /// </summary>
        [Input("scopeMapName", required: true)]
        public Input<string> ScopeMapName { get; set; } = null!;

        public GetScopeMapInvokeArgs()
        {
        }
        public static new GetScopeMapInvokeArgs Empty => new GetScopeMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetScopeMapResult
    {
        /// <summary>
        /// The list of scoped permissions for registry artifacts.
        /// E.g. repositories/repository-name/content/read,
        /// repositories/repository-name/metadata/write
        /// </summary>
        public readonly ImmutableArray<string> Actions;
        /// <summary>
        /// The creation date of scope map.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The user friendly description of the scope map.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScopeMapResult(
            ImmutableArray<string> actions,

            string creationDate,

            string? description,

            string id,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Actions = actions;
            CreationDate = creationDate;
            Description = description;
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
