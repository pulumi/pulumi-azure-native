// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ContainerRegistry.Latest.Outputs
{

    [OutputType]
    public sealed class FileTaskStepResponseResult
    {
        /// <summary>
        /// List of base image dependencies for a step.
        /// </summary>
        public readonly ImmutableArray<Outputs.BaseImageDependencyResponseResult> BaseImageDependencies;
        /// <summary>
        /// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
        /// </summary>
        public readonly string? ContextAccessToken;
        /// <summary>
        /// The URL(absolute or relative) of the source context for the task step.
        /// </summary>
        public readonly string? ContextPath;
        /// <summary>
        /// The task template/definition file path relative to the source context.
        /// </summary>
        public readonly string TaskFilePath;
        /// <summary>
        /// The type of the step.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The collection of overridable values that can be passed when running a task.
        /// </summary>
        public readonly ImmutableArray<Outputs.SetValueResponseResult> Values;
        /// <summary>
        /// The task values/parameters file path relative to the source context.
        /// </summary>
        public readonly string? ValuesFilePath;

        [OutputConstructor]
        private FileTaskStepResponseResult(
            ImmutableArray<Outputs.BaseImageDependencyResponseResult> baseImageDependencies,

            string? contextAccessToken,

            string? contextPath,

            string taskFilePath,

            string type,

            ImmutableArray<Outputs.SetValueResponseResult> values,

            string? valuesFilePath)
        {
            BaseImageDependencies = baseImageDependencies;
            ContextAccessToken = contextAccessToken;
            ContextPath = contextPath;
            TaskFilePath = taskFilePath;
            Type = type;
            Values = values;
            ValuesFilePath = valuesFilePath;
        }
    }
}
