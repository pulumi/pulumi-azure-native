// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry
{
    public static class GetImportPipeline
    {
        /// <summary>
        /// An object that represents an import pipeline for a container registry.
        /// API Version: 2020-11-01-preview.
        /// </summary>
        public static Task<GetImportPipelineResult> InvokeAsync(GetImportPipelineArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImportPipelineResult>("azure-nextgen:containerregistry:getImportPipeline", args ?? new GetImportPipelineArgs(), options.WithVersion());
    }


    public sealed class GetImportPipelineArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the import pipeline.
        /// </summary>
        [Input("importPipelineName", required: true)]
        public string ImportPipelineName { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetImportPipelineArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImportPipelineResult
    {
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the import pipeline.
        /// </summary>
        public readonly Outputs.IdentityPropertiesResponse? Identity;
        /// <summary>
        /// The location of the import pipeline.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of all options configured for the pipeline.
        /// </summary>
        public readonly ImmutableArray<string> Options;
        /// <summary>
        /// The provisioning state of the pipeline at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The source properties of the import pipeline.
        /// </summary>
        public readonly Outputs.ImportPipelineSourcePropertiesResponse Source;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The properties that describe the trigger of the import pipeline.
        /// </summary>
        public readonly Outputs.PipelineTriggerPropertiesResponse? Trigger;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetImportPipelineResult(
            string id,

            Outputs.IdentityPropertiesResponse? identity,

            string? location,

            string name,

            ImmutableArray<string> options,

            string provisioningState,

            Outputs.ImportPipelineSourcePropertiesResponse source,

            Outputs.SystemDataResponse systemData,

            Outputs.PipelineTriggerPropertiesResponse? trigger,

            string type)
        {
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Options = options;
            ProvisioningState = provisioningState;
            Source = source;
            SystemData = systemData;
            Trigger = trigger;
            Type = type;
        }
    }
}
