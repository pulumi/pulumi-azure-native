// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.Outputs
{

    /// <summary>
    /// The Docker build step.
    /// </summary>
    [OutputType]
    public sealed class DockerBuildStepResponse
    {
        /// <summary>
        /// The collection of override arguments to be used when executing this build step.
        /// </summary>
        public readonly ImmutableArray<Outputs.ArgumentResponse> Arguments;
        /// <summary>
        /// List of base image dependencies for a step.
        /// </summary>
        public readonly ImmutableArray<Outputs.BaseImageDependencyResponse> BaseImageDependencies;
        /// <summary>
        /// The type of the auto trigger for base image dependency updates.
        /// </summary>
        public readonly string? BaseImageTrigger;
        /// <summary>
        /// The repository branch name.
        /// </summary>
        public readonly string? Branch;
        /// <summary>
        /// The custom arguments for building this build step.
        /// </summary>
        public readonly ImmutableArray<Outputs.BuildArgumentResponse> BuildArguments;
        /// <summary>
        /// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
        /// </summary>
        public readonly string? ContextAccessToken;
        /// <summary>
        /// The URL(absolute or relative) of the source context for the task step.
        /// </summary>
        public readonly string? ContextPath;
        /// <summary>
        /// The Docker file path relative to the source context.
        /// </summary>
        public readonly string DockerFilePath;
        /// <summary>
        /// The fully qualified image names including the repository and tag.
        /// </summary>
        public readonly ImmutableArray<string> ImageNames;
        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        public readonly bool? IsPushEnabled;
        /// <summary>
        /// The value of this property indicates whether the image cache is enabled or not.
        /// </summary>
        public readonly bool? NoCache;
        /// <summary>
        /// The provisioning state of the build step.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The name of the target build stage for the docker build.
        /// </summary>
        public readonly string? Target;
        /// <summary>
        /// The type of the step.
        /// Expected value is 'Docker'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private DockerBuildStepResponse(
            ImmutableArray<Outputs.ArgumentResponse> arguments,

            ImmutableArray<Outputs.BaseImageDependencyResponse> baseImageDependencies,

            string? baseImageTrigger,

            string? branch,

            ImmutableArray<Outputs.BuildArgumentResponse> buildArguments,

            string? contextAccessToken,

            string? contextPath,

            string dockerFilePath,

            ImmutableArray<string> imageNames,

            bool? isPushEnabled,

            bool? noCache,

            string? provisioningState,

            string? target,

            string type)
        {
            Arguments = arguments;
            BaseImageDependencies = baseImageDependencies;
            BaseImageTrigger = baseImageTrigger;
            Branch = branch;
            BuildArguments = buildArguments;
            ContextAccessToken = contextAccessToken;
            ContextPath = contextPath;
            DockerFilePath = dockerFilePath;
            ImageNames = imageNames;
            IsPushEnabled = isPushEnabled;
            NoCache = noCache;
            ProvisioningState = provisioningState;
            Target = target;
            Type = type;
        }
    }
}
