// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry
{
    public static class GetReplication
    {
        /// <summary>
        /// Gets the properties of the specified replication.
        /// Azure REST API version: 2022-12-01.
        /// 
        /// Other available API versions: 2023-01-01-preview, 2023-06-01-preview, 2023-07-01, 2023-08-01-preview, 2023-11-01-preview.
        /// </summary>
        public static Task<GetReplicationResult> InvokeAsync(GetReplicationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationResult>("azure-native:containerregistry:getReplication", args ?? new GetReplicationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified replication.
        /// Azure REST API version: 2022-12-01.
        /// 
        /// Other available API versions: 2023-01-01-preview, 2023-06-01-preview, 2023-07-01, 2023-08-01-preview, 2023-11-01-preview.
        /// </summary>
        public static Output<GetReplicationResult> Invoke(GetReplicationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationResult>("azure-native:containerregistry:getReplication", args ?? new GetReplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the replication.
        /// </summary>
        [Input("replicationName", required: true)]
        public string ReplicationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetReplicationArgs()
        {
        }
        public static new GetReplicationArgs Empty => new GetReplicationArgs();
    }

    public sealed class GetReplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the replication.
        /// </summary>
        [Input("replicationName", required: true)]
        public Input<string> ReplicationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetReplicationInvokeArgs()
        {
        }
        public static new GetReplicationInvokeArgs Empty => new GetReplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationResult
    {
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the replication at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.
        /// </summary>
        public readonly bool? RegionEndpointEnabled;
        /// <summary>
        /// The status of the replication at the time the operation was called.
        /// </summary>
        public readonly Outputs.StatusResponse Status;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Whether or not zone redundancy is enabled for this container registry replication
        /// </summary>
        public readonly string? ZoneRedundancy;

        [OutputConstructor]
        private GetReplicationResult(
            string id,

            string location,

            string name,

            string provisioningState,

            bool? regionEndpointEnabled,

            Outputs.StatusResponse status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? zoneRedundancy)
        {
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            RegionEndpointEnabled = regionEndpointEnabled;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            ZoneRedundancy = zoneRedundancy;
        }
    }
}
