// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ContainerRegistry.Preview
{
    public static class GetRegistry
    {
        public static Task<GetRegistryResult> InvokeAsync(GetRegistryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryResult>("azurerm:containerregistry/preview:getRegistry", args ?? new GetRegistryArgs(), options.WithVersion());
    }


    public sealed class GetRegistryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRegistryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegistryResult
    {
        /// <summary>
        /// The value that indicates whether the admin user is enabled.
        /// </summary>
        public readonly bool? AdminUserEnabled;
        /// <summary>
        /// The creation date of the container registry in ISO8601 format.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// Enable a single data endpoint per region for serving data.
        /// </summary>
        public readonly bool? DataEndpointEnabled;
        /// <summary>
        /// List of host names that will serve data when dataEndpointEnabled is true.
        /// </summary>
        public readonly ImmutableArray<string> DataEndpointHostNames;
        /// <summary>
        /// The encryption settings of container registry.
        /// </summary>
        public readonly Outputs.EncryptionPropertyResponseResult? Encryption;
        /// <summary>
        /// The identity of the container registry.
        /// </summary>
        public readonly Outputs.IdentityPropertiesResponseResult? Identity;
        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The URL that can be used to log into the container registry.
        /// </summary>
        public readonly string LoginServer;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network rule set for a container registry.
        /// </summary>
        public readonly Outputs.NetworkRuleSetResponseResult? NetworkRuleSet;
        /// <summary>
        /// The policies for a container registry.
        /// </summary>
        public readonly Outputs.PoliciesResponseResult? Policies;
        /// <summary>
        /// List of private endpoint connections for a container registry.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponseResult> PrivateEndpointConnections;
        /// <summary>
        /// The provisioning state of the container registry at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Whether or not public network access is allowed for the container registry.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The SKU of the container registry.
        /// </summary>
        public readonly Outputs.SkuResponseResult Sku;
        /// <summary>
        /// The status of the container registry at the time the operation was called.
        /// </summary>
        public readonly Outputs.StatusResponseResult Status;
        /// <summary>
        /// The properties of the storage account for the container registry. Only applicable to Classic SKU.
        /// </summary>
        public readonly Outputs.StorageAccountPropertiesResponseResult? StorageAccount;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegistryResult(
            bool? adminUserEnabled,

            string creationDate,

            bool? dataEndpointEnabled,

            ImmutableArray<string> dataEndpointHostNames,

            Outputs.EncryptionPropertyResponseResult? encryption,

            Outputs.IdentityPropertiesResponseResult? identity,

            string location,

            string loginServer,

            string name,

            Outputs.NetworkRuleSetResponseResult? networkRuleSet,

            Outputs.PoliciesResponseResult? policies,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponseResult> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            Outputs.SkuResponseResult sku,

            Outputs.StatusResponseResult status,

            Outputs.StorageAccountPropertiesResponseResult? storageAccount,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AdminUserEnabled = adminUserEnabled;
            CreationDate = creationDate;
            DataEndpointEnabled = dataEndpointEnabled;
            DataEndpointHostNames = dataEndpointHostNames;
            Encryption = encryption;
            Identity = identity;
            Location = location;
            LoginServer = loginServer;
            Name = name;
            NetworkRuleSet = networkRuleSet;
            Policies = policies;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sku = sku;
            Status = status;
            StorageAccount = storageAccount;
            Tags = tags;
            Type = type;
        }
    }
}
