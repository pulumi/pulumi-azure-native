// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20201101Preview
{
    public static class GetWebhook
    {
        /// <summary>
        /// An object that represents a webhook for a container registry.
        /// </summary>
        public static Task<GetWebhookResult> InvokeAsync(GetWebhookArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWebhookResult>("azure-nextgen:containerregistry/v20201101preview:getWebhook", args ?? new GetWebhookArgs(), options.WithVersion());
    }


    public sealed class GetWebhookArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the webhook.
        /// </summary>
        [Input("webhookName", required: true)]
        public string WebhookName { get; set; } = null!;

        public GetWebhookArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetWebhookResult
    {
        /// <summary>
        /// The list of actions that trigger the webhook to post notifications.
        /// </summary>
        public readonly ImmutableArray<string> Actions;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the webhook at the time the operation was called.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The status of the webhook at the time the operation was called.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetWebhookResult(
            ImmutableArray<string> actions,

            string id,

            string location,

            string name,

            string provisioningState,

            string? scope,

            string? status,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Actions = actions;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Scope = scope;
            Status = status;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
