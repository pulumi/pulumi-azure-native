// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry
{
    public static class GetCredentialSet
    {
        /// <summary>
        /// Gets the properties of the specified credential set resource.
        /// Azure REST API version: 2023-01-01-preview.
        /// 
        /// Other available API versions: 2023-06-01-preview, 2023-07-01, 2023-08-01-preview, 2023-11-01-preview.
        /// </summary>
        public static Task<GetCredentialSetResult> InvokeAsync(GetCredentialSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCredentialSetResult>("azure-native:containerregistry:getCredentialSet", args ?? new GetCredentialSetArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the properties of the specified credential set resource.
        /// Azure REST API version: 2023-01-01-preview.
        /// 
        /// Other available API versions: 2023-06-01-preview, 2023-07-01, 2023-08-01-preview, 2023-11-01-preview.
        /// </summary>
        public static Output<GetCredentialSetResult> Invoke(GetCredentialSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCredentialSetResult>("azure-native:containerregistry:getCredentialSet", args ?? new GetCredentialSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCredentialSetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the credential set.
        /// </summary>
        [Input("credentialSetName", required: true)]
        public string CredentialSetName { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCredentialSetArgs()
        {
        }
        public static new GetCredentialSetArgs Empty => new GetCredentialSetArgs();
    }

    public sealed class GetCredentialSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the credential set.
        /// </summary>
        [Input("credentialSetName", required: true)]
        public Input<string> CredentialSetName { get; set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCredentialSetInvokeArgs()
        {
        }
        public static new GetCredentialSetInvokeArgs Empty => new GetCredentialSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetCredentialSetResult
    {
        /// <summary>
        /// List of authentication credentials stored for an upstream.
        /// Usually consists of a primary and an optional secondary credential.
        /// </summary>
        public readonly ImmutableArray<Outputs.AuthCredentialResponse> AuthCredentials;
        /// <summary>
        /// The creation date of credential store resource.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identities associated with the resource. This is used to access the KeyVault secrets.
        /// </summary>
        public readonly Outputs.IdentityPropertiesResponse? Identity;
        /// <summary>
        /// The credentials are stored for this upstream or login server.
        /// </summary>
        public readonly string? LoginServer;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCredentialSetResult(
            ImmutableArray<Outputs.AuthCredentialResponse> authCredentials,

            string creationDate,

            string id,

            Outputs.IdentityPropertiesResponse? identity,

            string? loginServer,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AuthCredentials = authCredentials;
            CreationDate = creationDate;
            Id = id;
            Identity = identity;
            LoginServer = loginServer;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
