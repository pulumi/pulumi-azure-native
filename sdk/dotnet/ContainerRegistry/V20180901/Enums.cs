// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20180901
{
    /// <summary>
    /// The OS architecture.
    /// </summary>
    [EnumType]
    public readonly struct Architecture : IEquatable<Architecture>
    {
        private readonly string _value;

        private Architecture(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Architecture Amd64 { get; } = new Architecture("amd64");
        public static Architecture X86 { get; } = new Architecture("x86");
        public static Architecture Arm { get; } = new Architecture("arm");

        public static bool operator ==(Architecture left, Architecture right) => left.Equals(right);
        public static bool operator !=(Architecture left, Architecture right) => !left.Equals(right);

        public static explicit operator string(Architecture value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Architecture other && Equals(other);
        public bool Equals(Architecture other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the auto trigger for base image dependency updates.
    /// </summary>
    [EnumType]
    public readonly struct BaseImageTriggerType : IEquatable<BaseImageTriggerType>
    {
        private readonly string _value;

        private BaseImageTriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BaseImageTriggerType All { get; } = new BaseImageTriggerType("All");
        public static BaseImageTriggerType Runtime { get; } = new BaseImageTriggerType("Runtime");

        public static bool operator ==(BaseImageTriggerType left, BaseImageTriggerType right) => left.Equals(right);
        public static bool operator !=(BaseImageTriggerType left, BaseImageTriggerType right) => !left.Equals(right);

        public static explicit operator string(BaseImageTriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BaseImageTriggerType other && Equals(other);
        public bool Equals(BaseImageTriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operating system type required for the run.
    /// </summary>
    [EnumType]
    public readonly struct OS : IEquatable<OS>
    {
        private readonly string _value;

        private OS(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OS Windows { get; } = new OS("Windows");
        public static OS Linux { get; } = new OS("Linux");

        public static bool operator ==(OS left, OS right) => left.Equals(right);
        public static bool operator !=(OS left, OS right) => !left.Equals(right);

        public static explicit operator string(OS value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OS other && Equals(other);
        public bool Equals(OS other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the secret object which determines how the value of the secret object has to be
    /// interpreted.
    /// </summary>
    [EnumType]
    public readonly struct SecretObjectType : IEquatable<SecretObjectType>
    {
        private readonly string _value;

        private SecretObjectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecretObjectType Opaque { get; } = new SecretObjectType("Opaque");

        public static bool operator ==(SecretObjectType left, SecretObjectType right) => left.Equals(right);
        public static bool operator !=(SecretObjectType left, SecretObjectType right) => !left.Equals(right);

        public static explicit operator string(SecretObjectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecretObjectType other && Equals(other);
        public bool Equals(SecretObjectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of source control service.
    /// </summary>
    [EnumType]
    public readonly struct SourceControlType : IEquatable<SourceControlType>
    {
        private readonly string _value;

        private SourceControlType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceControlType Github { get; } = new SourceControlType("Github");
        public static SourceControlType VisualStudioTeamService { get; } = new SourceControlType("VisualStudioTeamService");

        public static bool operator ==(SourceControlType left, SourceControlType right) => left.Equals(right);
        public static bool operator !=(SourceControlType left, SourceControlType right) => !left.Equals(right);

        public static explicit operator string(SourceControlType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceControlType other && Equals(other);
        public bool Equals(SourceControlType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mode which determines the source registry login scope. The credentials for the source registry
    /// will be generated using the given scope. These credentials will be used to login to
    /// the source registry during the run.
    /// </summary>
    [EnumType]
    public readonly struct SourceRegistryLoginMode : IEquatable<SourceRegistryLoginMode>
    {
        private readonly string _value;

        private SourceRegistryLoginMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceRegistryLoginMode None { get; } = new SourceRegistryLoginMode("None");
        public static SourceRegistryLoginMode Default { get; } = new SourceRegistryLoginMode("Default");

        public static bool operator ==(SourceRegistryLoginMode left, SourceRegistryLoginMode right) => left.Equals(right);
        public static bool operator !=(SourceRegistryLoginMode left, SourceRegistryLoginMode right) => !left.Equals(right);

        public static explicit operator string(SourceRegistryLoginMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceRegistryLoginMode other && Equals(other);
        public bool Equals(SourceRegistryLoginMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SourceTriggerEvent : IEquatable<SourceTriggerEvent>
    {
        private readonly string _value;

        private SourceTriggerEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceTriggerEvent Commit { get; } = new SourceTriggerEvent("commit");
        public static SourceTriggerEvent Pullrequest { get; } = new SourceTriggerEvent("pullrequest");

        public static bool operator ==(SourceTriggerEvent left, SourceTriggerEvent right) => left.Equals(right);
        public static bool operator !=(SourceTriggerEvent left, SourceTriggerEvent right) => !left.Equals(right);

        public static explicit operator string(SourceTriggerEvent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceTriggerEvent other && Equals(other);
        public bool Equals(SourceTriggerEvent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of task.
    /// </summary>
    [EnumType]
    public readonly struct TaskStatus : IEquatable<TaskStatus>
    {
        private readonly string _value;

        private TaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TaskStatus Disabled { get; } = new TaskStatus("Disabled");
        public static TaskStatus Enabled { get; } = new TaskStatus("Enabled");

        public static bool operator ==(TaskStatus left, TaskStatus right) => left.Equals(right);
        public static bool operator !=(TaskStatus left, TaskStatus right) => !left.Equals(right);

        public static explicit operator string(TaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskStatus other && Equals(other);
        public bool Equals(TaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Auth token.
    /// </summary>
    [EnumType]
    public readonly struct TokenType : IEquatable<TokenType>
    {
        private readonly string _value;

        private TokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TokenType PAT { get; } = new TokenType("PAT");
        public static TokenType OAuth { get; } = new TokenType("OAuth");

        public static bool operator ==(TokenType left, TokenType right) => left.Equals(right);
        public static bool operator !=(TokenType left, TokenType right) => !left.Equals(right);

        public static explicit operator string(TokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TokenType other && Equals(other);
        public bool Equals(TokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of trigger.
    /// </summary>
    [EnumType]
    public readonly struct TriggerStatus : IEquatable<TriggerStatus>
    {
        private readonly string _value;

        private TriggerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerStatus Disabled { get; } = new TriggerStatus("Disabled");
        public static TriggerStatus Enabled { get; } = new TriggerStatus("Enabled");

        public static bool operator ==(TriggerStatus left, TriggerStatus right) => left.Equals(right);
        public static bool operator !=(TriggerStatus left, TriggerStatus right) => !left.Equals(right);

        public static explicit operator string(TriggerStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerStatus other && Equals(other);
        public bool Equals(TriggerStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Variant of the CPU.
    /// </summary>
    [EnumType]
    public readonly struct Variant : IEquatable<Variant>
    {
        private readonly string _value;

        private Variant(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Variant V6 { get; } = new Variant("v6");
        public static Variant V7 { get; } = new Variant("v7");
        public static Variant V8 { get; } = new Variant("v8");

        public static bool operator ==(Variant left, Variant right) => left.Equals(right);
        public static bool operator !=(Variant left, Variant right) => !left.Equals(right);

        public static explicit operator string(Variant value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Variant other && Equals(other);
        public bool Equals(Variant other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
