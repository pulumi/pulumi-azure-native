// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerRegistry.V20190401
{
    public static class GetTask
    {
        /// <summary>
        /// Get the properties of a specified task.
        /// </summary>
        public static Task<GetTaskResult> InvokeAsync(GetTaskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskResult>("azure-native:containerregistry/v20190401:getTask", args ?? new GetTaskArgs(), options.WithDefaults());

        /// <summary>
        /// Get the properties of a specified task.
        /// </summary>
        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("azure-native:containerregistry/v20190401:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the container registry task.
        /// </summary>
        [Input("taskName", required: true)]
        public string TaskName { get; set; } = null!;

        public GetTaskArgs()
        {
        }
        public static new GetTaskArgs Empty => new GetTaskArgs();
    }

    public sealed class GetTaskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to which the container registry belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the container registry task.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        public GetTaskInvokeArgs()
        {
        }
        public static new GetTaskInvokeArgs Empty => new GetTaskInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskResult
    {
        /// <summary>
        /// The machine configuration of the run agent.
        /// </summary>
        public readonly Outputs.AgentPropertiesResponse? AgentConfiguration;
        /// <summary>
        /// The creation date of task.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The properties that describes a set of credentials that will be used when this run is invoked.
        /// </summary>
        public readonly Outputs.CredentialsResponse? Credentials;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity for the resource.
        /// </summary>
        public readonly Outputs.IdentityPropertiesResponse? Identity;
        /// <summary>
        /// The location of the resource. This cannot be changed after the resource is created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The platform properties against which the run has to happen.
        /// </summary>
        public readonly Outputs.PlatformPropertiesResponse Platform;
        /// <summary>
        /// The provisioning state of the task.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The current status of task.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The properties of a task step.
        /// </summary>
        public readonly object Step;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Run timeout in seconds.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// The properties that describe all triggers for the task.
        /// </summary>
        public readonly Outputs.TriggerPropertiesResponse? Trigger;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTaskResult(
            Outputs.AgentPropertiesResponse? agentConfiguration,

            string creationDate,

            Outputs.CredentialsResponse? credentials,

            string id,

            Outputs.IdentityPropertiesResponse? identity,

            string location,

            string name,

            Outputs.PlatformPropertiesResponse platform,

            string provisioningState,

            string? status,

            object step,

            ImmutableDictionary<string, string>? tags,

            int? timeout,

            Outputs.TriggerPropertiesResponse? trigger,

            string type)
        {
            AgentConfiguration = agentConfiguration;
            CreationDate = creationDate;
            Credentials = credentials;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            Platform = platform;
            ProvisioningState = provisioningState;
            Status = status;
            Step = step;
            Tags = tags;
            Timeout = timeout;
            Trigger = trigger;
            Type = type;
        }
    }
}
