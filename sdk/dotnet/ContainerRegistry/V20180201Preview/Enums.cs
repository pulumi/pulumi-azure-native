// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ContainerRegistry.V20180201Preview
{
    /// <summary>
    /// The current status of build task.
    /// </summary>
    [EnumType]
    public readonly struct BuildTaskStatus : IEquatable<BuildTaskStatus>
    {
        private readonly string _value;

        private BuildTaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BuildTaskStatus Disabled { get; } = new BuildTaskStatus("Disabled");
        public static BuildTaskStatus Enabled { get; } = new BuildTaskStatus("Enabled");

        public static bool operator ==(BuildTaskStatus left, BuildTaskStatus right) => left.Equals(right);
        public static bool operator !=(BuildTaskStatus left, BuildTaskStatus right) => !left.Equals(right);

        public static explicit operator string(BuildTaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BuildTaskStatus other && Equals(other);
        public bool Equals(BuildTaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operating system type required for the build.
    /// </summary>
    [EnumType]
    public readonly struct OsType : IEquatable<OsType>
    {
        private readonly string _value;

        private OsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OsType Windows { get; } = new OsType("Windows");
        public static OsType Linux { get; } = new OsType("Linux");

        public static bool operator ==(OsType left, OsType right) => left.Equals(right);
        public static bool operator !=(OsType left, OsType right) => !left.Equals(right);

        public static explicit operator string(OsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OsType other && Equals(other);
        public bool Equals(OsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of source control service.
    /// </summary>
    [EnumType]
    public readonly struct SourceControlType : IEquatable<SourceControlType>
    {
        private readonly string _value;

        private SourceControlType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceControlType Github { get; } = new SourceControlType("Github");
        public static SourceControlType VisualStudioTeamService { get; } = new SourceControlType("VisualStudioTeamService");

        public static bool operator ==(SourceControlType left, SourceControlType right) => left.Equals(right);
        public static bool operator !=(SourceControlType left, SourceControlType right) => !left.Equals(right);

        public static explicit operator string(SourceControlType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceControlType other && Equals(other);
        public bool Equals(SourceControlType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Auth token.
    /// </summary>
    [EnumType]
    public readonly struct TokenType : IEquatable<TokenType>
    {
        private readonly string _value;

        private TokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TokenType PAT { get; } = new TokenType("PAT");
        public static TokenType OAuth { get; } = new TokenType("OAuth");

        public static bool operator ==(TokenType left, TokenType right) => left.Equals(right);
        public static bool operator !=(TokenType left, TokenType right) => !left.Equals(right);

        public static explicit operator string(TokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TokenType other && Equals(other);
        public bool Equals(TokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
