// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OffAzureSpringBoot.V20230101Preview.Outputs
{

    /// <summary>
    /// The springbootservers resource definition.
    /// </summary>
    [OutputType]
    public sealed class SpringbootserversPropertiesResponse
    {
        /// <summary>
        /// The list of errors.
        /// </summary>
        public readonly ImmutableArray<Outputs.ErrorResponse> Errors;
        /// <summary>
        /// The alternative FQDN or IP addresses to discover for this server
        /// </summary>
        public readonly ImmutableArray<string> FqdnAndIpAddressList;
        /// <summary>
        /// The machine Id from ARM
        /// </summary>
        public readonly string? MachineArmId;
        /// <summary>
        /// Target server port for remote login
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The resource provisioning state.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Server is the target server name or ip address to discover of SpringBootServer.
        /// </summary>
        public readonly string Server;
        /// <summary>
        /// The total number of spring boot apps been discovered
        /// </summary>
        public readonly int? SpringBootApps;
        /// <summary>
        /// The total number of apps been discovered
        /// </summary>
        public readonly int? TotalApps;

        [OutputConstructor]
        private SpringbootserversPropertiesResponse(
            ImmutableArray<Outputs.ErrorResponse> errors,

            ImmutableArray<string> fqdnAndIpAddressList,

            string? machineArmId,

            int? port,

            string? provisioningState,

            string server,

            int? springBootApps,

            int? totalApps)
        {
            Errors = errors;
            FqdnAndIpAddressList = fqdnAndIpAddressList;
            MachineArmId = machineArmId;
            Port = port;
            ProvisioningState = provisioningState;
            Server = server;
            SpringBootApps = springBootApps;
            TotalApps = totalApps;
        }
    }
}
