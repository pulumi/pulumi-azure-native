// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureDataTransfer
{
    /// <summary>
    /// The list of Antivirus solutions currently provided.
    /// </summary>
    [EnumType]
    public readonly struct AntivirusSolutions : IEquatable<AntivirusSolutions>
    {
        private readonly string _value;

        private AntivirusSolutions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Option to use Microsoft Defender antivirus scanning software as the scanning solution.
        /// </summary>
        public static AntivirusSolutions Defender { get; } = new AntivirusSolutions("Defender");
        /// <summary>
        /// Option to use the external ClamAV open-source software as an antivirus scanning solution.
        /// </summary>
        public static AntivirusSolutions ClamAv { get; } = new AntivirusSolutions("ClamAv");

        public static bool operator ==(AntivirusSolutions left, AntivirusSolutions right) => left.Equals(right);
        public static bool operator !=(AntivirusSolutions left, AntivirusSolutions right) => !left.Equals(right);

        public static explicit operator string(AntivirusSolutions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AntivirusSolutions other && Equals(other);
        public bool Equals(AntivirusSolutions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
    /// </summary>
    [EnumType]
    public readonly struct Casing : IEquatable<Casing>
    {
        private readonly string _value;

        private Casing(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Ignores casing when performing pattern matching. For example, "Hello World" would be found in "hello world".
        /// </summary>
        public static Casing Insensitive { get; } = new Casing("Insensitive");
        /// <summary>
        /// Requires exact casing for the pattern match. For example, "Hello World" would NOT not be found in "hello world".
        /// </summary>
        public static Casing Sensitive { get; } = new Casing("Sensitive");

        public static bool operator ==(Casing left, Casing right) => left.Equals(right);
        public static bool operator !=(Casing left, Casing right) => !left.Equals(right);

        public static explicit operator string(Casing value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Casing other && Equals(other);
        public bool Equals(Casing other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data replication scenario handled by this FlowProfile. Please not, that this value cannot be updated after creation.
    /// </summary>
    [EnumType]
    public readonly struct DataClassType : IEquatable<DataClassType>
    {
        private readonly string _value;

        private DataClassType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents standard message-based data, including Azure Service and Event Hub, used in message replication.
        /// </summary>
        public static DataClassType Messaging { get; } = new DataClassType("Messaging");
        /// <summary>
        /// Represents transactional request/response data types from API endpoints.
        /// </summary>
        public static DataClassType API { get; } = new DataClassType("API");
        /// <summary>
        /// Represents data types that require continuous, real-time streaming replication (e.g., video).
        /// </summary>
        public static DataClassType Stream { get; } = new DataClassType("Stream");
        /// <summary>
        /// Represents standard file-based data, including Azure Blob and Table Storage, used in general-purpose replication.
        /// </summary>
        public static DataClassType Files { get; } = new DataClassType("Files");
        /// <summary>
        /// Represents data related to development, security, and operations workflows such as build artifacts subject to an NCDSMO policy.
        /// </summary>
        public static DataClassType SoftwareArtifacts { get; } = new DataClassType("SoftwareArtifacts");
        /// <summary>
        /// Represents rich content types such as documents (e.g., Word, PDF) and images that require specialized replication handling.
        /// </summary>
        public static DataClassType Complex { get; } = new DataClassType("Complex");

        public static bool operator ==(DataClassType left, DataClassType right) => left.Equals(right);
        public static bool operator !=(DataClassType left, DataClassType right) => !left.Equals(right);

        public static explicit operator string(DataClassType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataClassType other && Equals(other);
        public bool Equals(DataClassType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Transfer Storage Blobs or Tables
    /// </summary>
    [EnumType]
    public readonly struct DataType : IEquatable<DataType>
    {
        private readonly string _value;

        private DataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataType Blob { get; } = new DataType("Blob");
        public static DataType Table { get; } = new DataType("Table");

        public static bool operator ==(DataType left, DataType right) => left.Equals(right);
        public static bool operator !=(DataType left, DataType right) => !left.Equals(right);

        public static explicit operator string(DataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataType other && Equals(other);
        public bool Equals(DataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Direction of data movement
    /// </summary>
    [EnumType]
    public readonly struct Direction : IEquatable<Direction>
    {
        private readonly string _value;

        private Direction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Direction Send { get; } = new Direction("Send");
        public static Direction Receive { get; } = new Direction("Receive");

        public static bool operator ==(Direction left, Direction right) => left.Equals(right);
        public static bool operator !=(Direction left, Direction right) => !left.Equals(right);

        public static explicit operator string(Direction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Direction other && Equals(other);
        public bool Equals(Direction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
    /// </summary>
    [EnumType]
    public readonly struct FilterType : IEquatable<FilterType>
    {
        private readonly string _value;

        private FilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Defines an allow filter used for allowlist.
        /// </summary>
        public static FilterType Allow { get; } = new FilterType("Allow");
        /// <summary>
        /// Defines a denying filter used for blocklisting.
        /// </summary>
        public static FilterType Deny { get; } = new FilterType("Deny");

        public static bool operator ==(FilterType left, FilterType right) => left.Equals(right);
        public static bool operator !=(FilterType left, FilterType right) => !left.Equals(right);

        public static explicit operator string(FilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterType other && Equals(other);
        public bool Equals(FilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Billing tier for this messaging flow
    /// </summary>
    [EnumType]
    public readonly struct FlowBillingTier : IEquatable<FlowBillingTier>
    {
        private readonly string _value;

        private FlowBillingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowBillingTier BlobTransport { get; } = new FlowBillingTier("BlobTransport");
        public static FlowBillingTier Standard { get; } = new FlowBillingTier("Standard");
        public static FlowBillingTier Premium { get; } = new FlowBillingTier("Premium");

        public static bool operator ==(FlowBillingTier left, FlowBillingTier right) => left.Equals(right);
        public static bool operator !=(FlowBillingTier left, FlowBillingTier right) => !left.Equals(right);

        public static explicit operator string(FlowBillingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowBillingTier other && Equals(other);
        public bool Equals(FlowBillingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operational status of the FlowProfile.
    /// </summary>
    [EnumType]
    public readonly struct FlowProfileStatus : IEquatable<FlowProfileStatus>
    {
        private readonly string _value;

        private FlowProfileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Defines a FlowProfile that can no longer be selected.
        /// </summary>
        public static FlowProfileStatus Obsolete { get; } = new FlowProfileStatus("Obsolete");
        /// <summary>
        /// Defines a FlowProfile that is enabled.
        /// </summary>
        public static FlowProfileStatus Enabled { get; } = new FlowProfileStatus("Enabled");

        public static bool operator ==(FlowProfileStatus left, FlowProfileStatus right) => left.Equals(right);
        public static bool operator !=(FlowProfileStatus left, FlowProfileStatus right) => !left.Equals(right);

        public static explicit operator string(FlowProfileStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowProfileStatus other && Equals(other);
        public bool Equals(FlowProfileStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the current flow
    /// </summary>
    [EnumType]
    public readonly struct FlowStatus : IEquatable<FlowStatus>
    {
        private readonly string _value;

        private FlowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowStatus Enabled { get; } = new FlowStatus("Enabled");
        public static FlowStatus Disabled { get; } = new FlowStatus("Disabled");

        public static bool operator ==(FlowStatus left, FlowStatus right) => left.Equals(right);
        public static bool operator !=(FlowStatus left, FlowStatus right) => !left.Equals(right);

        public static explicit operator string(FlowStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowStatus other && Equals(other);
        public bool Equals(FlowStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flow type for the specified resource
    /// </summary>
    [EnumType]
    public readonly struct FlowType : IEquatable<FlowType>
    {
        private readonly string _value;

        private FlowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowType Unknown { get; } = new FlowType("Unknown");
        public static FlowType Complex { get; } = new FlowType("Complex");
        public static FlowType DevSecOps { get; } = new FlowType("DevSecOps");
        public static FlowType Messaging { get; } = new FlowType("Messaging");
        public static FlowType Mission { get; } = new FlowType("Mission");
        public static FlowType MicrosoftInternal { get; } = new FlowType("MicrosoftInternal");
        public static FlowType BasicFiles { get; } = new FlowType("BasicFiles");
        public static FlowType Data { get; } = new FlowType("Data");
        public static FlowType Standard { get; } = new FlowType("Standard");
        public static FlowType StreamingVideo { get; } = new FlowType("StreamingVideo");
        public static FlowType Opaque { get; } = new FlowType("Opaque");
        public static FlowType MissionOpaqueXML { get; } = new FlowType("MissionOpaqueXML");

        public static bool operator ==(FlowType left, FlowType right) => left.Equals(right);
        public static bool operator !=(FlowType left, FlowType right) => !left.Equals(right);

        public static explicit operator string(FlowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowType other && Equals(other);
        public bool Equals(FlowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction pipeline to filter approved schemas.
    /// </summary>
    [EnumType]
    public readonly struct ListApprovedSchemasDirection : IEquatable<ListApprovedSchemasDirection>
    {
        private readonly string _value;

        private ListApprovedSchemasDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ListApprovedSchemasDirection Send { get; } = new ListApprovedSchemasDirection("Send");
        public static ListApprovedSchemasDirection Receive { get; } = new ListApprovedSchemasDirection("Receive");

        public static bool operator ==(ListApprovedSchemasDirection left, ListApprovedSchemasDirection right) => left.Equals(right);
        public static bool operator !=(ListApprovedSchemasDirection left, ListApprovedSchemasDirection right) => !left.Equals(right);

        public static explicit operator string(ListApprovedSchemasDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ListApprovedSchemasDirection other && Equals(other);
        public bool Equals(ListApprovedSchemasDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
    /// </summary>
    [EnumType]
    public readonly struct MatchType : IEquatable<MatchType>
    {
        private readonly string _value;

        private MatchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The option to pattern match substrings within all text content. For example, "hello world" would be found in "chello worlds".
        /// </summary>
        public static MatchType Partial { get; } = new MatchType("Partial");
        /// <summary>
        /// The option to pattern match the entire string explicitly. For example, "hello world" would NOT be found in "chello worlds".
        /// </summary>
        public static MatchType Complete { get; } = new MatchType("Complete");

        public static bool operator ==(MatchType left, MatchType right) => left.Equals(right);
        public static bool operator !=(MatchType left, MatchType right) => !left.Equals(right);

        public static explicit operator string(MatchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchType other && Equals(other);
        public bool Equals(MatchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of the schema.
    /// </summary>
    [EnumType]
    public readonly struct SchemaDirection : IEquatable<SchemaDirection>
    {
        private readonly string _value;

        private SchemaDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaDirection Send { get; } = new SchemaDirection("Send");
        public static SchemaDirection Receive { get; } = new SchemaDirection("Receive");

        public static bool operator ==(SchemaDirection left, SchemaDirection right) => left.Equals(right);
        public static bool operator !=(SchemaDirection left, SchemaDirection right) => !left.Equals(right);

        public static explicit operator string(SchemaDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaDirection other && Equals(other);
        public bool Equals(SchemaDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the schema
    /// </summary>
    [EnumType]
    public readonly struct SchemaStatus : IEquatable<SchemaStatus>
    {
        private readonly string _value;

        private SchemaStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaStatus New { get; } = new SchemaStatus("New");
        public static SchemaStatus Approved { get; } = new SchemaStatus("Approved");

        public static bool operator ==(SchemaStatus left, SchemaStatus right) => left.Equals(right);
        public static bool operator !=(SchemaStatus left, SchemaStatus right) => !left.Equals(right);

        public static explicit operator string(SchemaStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaStatus other && Equals(other);
        public bool Equals(SchemaStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Schema Type
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaType Xsd { get; } = new SchemaType("Xsd");
        public static SchemaType Zip { get; } = new SchemaType("Zip");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of the stream
    /// </summary>
    [EnumType]
    public readonly struct StreamProtocol : IEquatable<StreamProtocol>
    {
        private readonly string _value;

        private StreamProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StreamProtocol UDP { get; } = new StreamProtocol("UDP");
        public static StreamProtocol SRT { get; } = new StreamProtocol("SRT");
        public static StreamProtocol RTP { get; } = new StreamProtocol("RTP");

        public static bool operator ==(StreamProtocol left, StreamProtocol right) => left.Equals(right);
        public static bool operator !=(StreamProtocol left, StreamProtocol right) => !left.Equals(right);

        public static explicit operator string(StreamProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamProtocol other && Equals(other);
        public bool Equals(StreamProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the method for referencing the xml schema.
    /// </summary>
    [EnumType]
    public readonly struct XmlReferenceType : IEquatable<XmlReferenceType>
    {
        private readonly string _value;

        private XmlReferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Defines a referencing procedure where the xml schema will be provided inline.
        /// </summary>
        public static XmlReferenceType Inline { get; } = new XmlReferenceType("Inline");

        public static bool operator ==(XmlReferenceType left, XmlReferenceType right) => left.Equals(right);
        public static bool operator !=(XmlReferenceType left, XmlReferenceType right) => !left.Equals(right);

        public static explicit operator string(XmlReferenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is XmlReferenceType other && Equals(other);
        public bool Equals(XmlReferenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
