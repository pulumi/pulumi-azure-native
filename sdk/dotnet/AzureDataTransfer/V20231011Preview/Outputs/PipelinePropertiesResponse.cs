// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureDataTransfer.V20231011Preview.Outputs
{

    /// <summary>
    /// Properties of pipeline
    /// </summary>
    [OutputType]
    public sealed class PipelinePropertiesResponse
    {
        /// <summary>
        /// Connections associated with pipeline
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineConnectionResponse> Connections;
        /// <summary>
        /// Display name of this pipeline
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The flow types allowed for this pipeline
        /// </summary>
        public readonly ImmutableArray<string> FlowTypes;
        /// <summary>
        /// The policies for this pipeline
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// Provisioning state of the pipeline
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Remote cloud of the data to be transferred or received
        /// </summary>
        public readonly string RemoteCloud;
        /// <summary>
        /// Subscribers of this resource
        /// </summary>
        public readonly ImmutableArray<Outputs.SubscriberResponse> Subscribers;

        [OutputConstructor]
        private PipelinePropertiesResponse(
            ImmutableArray<Outputs.PipelineConnectionResponse> connections,

            string? displayName,

            ImmutableArray<string> flowTypes,

            ImmutableArray<string> policies,

            string provisioningState,

            string remoteCloud,

            ImmutableArray<Outputs.SubscriberResponse> subscribers)
        {
            Connections = connections;
            DisplayName = displayName;
            FlowTypes = flowTypes;
            Policies = policies;
            ProvisioningState = provisioningState;
            RemoteCloud = remoteCloud;
            Subscribers = subscribers;
        }
    }
}
