// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureDataTransfer.V20240927
{
    /// <summary>
    /// Transfer Storage Blobs or Tables
    /// </summary>
    [EnumType]
    public readonly struct DataType : IEquatable<DataType>
    {
        private readonly string _value;

        private DataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataType Blob { get; } = new DataType("Blob");
        public static DataType Table { get; } = new DataType("Table");

        public static bool operator ==(DataType left, DataType right) => left.Equals(right);
        public static bool operator !=(DataType left, DataType right) => !left.Equals(right);

        public static explicit operator string(DataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataType other && Equals(other);
        public bool Equals(DataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Direction of data movement
    /// </summary>
    [EnumType]
    public readonly struct Direction : IEquatable<Direction>
    {
        private readonly string _value;

        private Direction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Direction Send { get; } = new Direction("Send");
        public static Direction Receive { get; } = new Direction("Receive");

        public static bool operator ==(Direction left, Direction right) => left.Equals(right);
        public static bool operator !=(Direction left, Direction right) => !left.Equals(right);

        public static explicit operator string(Direction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Direction other && Equals(other);
        public bool Equals(Direction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Billing tier for this messaging flow
    /// </summary>
    [EnumType]
    public readonly struct FlowBillingTier : IEquatable<FlowBillingTier>
    {
        private readonly string _value;

        private FlowBillingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowBillingTier BlobTransport { get; } = new FlowBillingTier("BlobTransport");
        public static FlowBillingTier Standard { get; } = new FlowBillingTier("Standard");
        public static FlowBillingTier Premium { get; } = new FlowBillingTier("Premium");

        public static bool operator ==(FlowBillingTier left, FlowBillingTier right) => left.Equals(right);
        public static bool operator !=(FlowBillingTier left, FlowBillingTier right) => !left.Equals(right);

        public static explicit operator string(FlowBillingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowBillingTier other && Equals(other);
        public bool Equals(FlowBillingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the current flow
    /// </summary>
    [EnumType]
    public readonly struct FlowStatus : IEquatable<FlowStatus>
    {
        private readonly string _value;

        private FlowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowStatus Enabled { get; } = new FlowStatus("Enabled");
        public static FlowStatus Disabled { get; } = new FlowStatus("Disabled");

        public static bool operator ==(FlowStatus left, FlowStatus right) => left.Equals(right);
        public static bool operator !=(FlowStatus left, FlowStatus right) => !left.Equals(right);

        public static explicit operator string(FlowStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowStatus other && Equals(other);
        public bool Equals(FlowStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flow type for the specified resource
    /// </summary>
    [EnumType]
    public readonly struct FlowType : IEquatable<FlowType>
    {
        private readonly string _value;

        private FlowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowType Unknown { get; } = new FlowType("Unknown");
        public static FlowType Complex { get; } = new FlowType("Complex");
        public static FlowType DevSecOps { get; } = new FlowType("DevSecOps");
        public static FlowType Messaging { get; } = new FlowType("Messaging");
        public static FlowType Mission { get; } = new FlowType("Mission");
        public static FlowType MicrosoftInternal { get; } = new FlowType("MicrosoftInternal");
        public static FlowType BasicFiles { get; } = new FlowType("BasicFiles");
        public static FlowType Data { get; } = new FlowType("Data");
        public static FlowType Standard { get; } = new FlowType("Standard");
        public static FlowType StreamingVideo { get; } = new FlowType("StreamingVideo");
        public static FlowType Opaque { get; } = new FlowType("Opaque");
        public static FlowType MissionOpaqueXML { get; } = new FlowType("MissionOpaqueXML");

        public static bool operator ==(FlowType left, FlowType right) => left.Equals(right);
        public static bool operator !=(FlowType left, FlowType right) => !left.Equals(right);

        public static explicit operator string(FlowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowType other && Equals(other);
        public bool Equals(FlowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction pipeline to filter approved schemas.
    /// </summary>
    [EnumType]
    public readonly struct ListApprovedSchemasDirection : IEquatable<ListApprovedSchemasDirection>
    {
        private readonly string _value;

        private ListApprovedSchemasDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ListApprovedSchemasDirection Send { get; } = new ListApprovedSchemasDirection("Send");
        public static ListApprovedSchemasDirection Receive { get; } = new ListApprovedSchemasDirection("Receive");

        public static bool operator ==(ListApprovedSchemasDirection left, ListApprovedSchemasDirection right) => left.Equals(right);
        public static bool operator !=(ListApprovedSchemasDirection left, ListApprovedSchemasDirection right) => !left.Equals(right);

        public static explicit operator string(ListApprovedSchemasDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ListApprovedSchemasDirection other && Equals(other);
        public bool Equals(ListApprovedSchemasDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of the schema.
    /// </summary>
    [EnumType]
    public readonly struct SchemaDirection : IEquatable<SchemaDirection>
    {
        private readonly string _value;

        private SchemaDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaDirection Send { get; } = new SchemaDirection("Send");
        public static SchemaDirection Receive { get; } = new SchemaDirection("Receive");

        public static bool operator ==(SchemaDirection left, SchemaDirection right) => left.Equals(right);
        public static bool operator !=(SchemaDirection left, SchemaDirection right) => !left.Equals(right);

        public static explicit operator string(SchemaDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaDirection other && Equals(other);
        public bool Equals(SchemaDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the schema
    /// </summary>
    [EnumType]
    public readonly struct SchemaStatus : IEquatable<SchemaStatus>
    {
        private readonly string _value;

        private SchemaStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaStatus New { get; } = new SchemaStatus("New");
        public static SchemaStatus Approved { get; } = new SchemaStatus("Approved");

        public static bool operator ==(SchemaStatus left, SchemaStatus right) => left.Equals(right);
        public static bool operator !=(SchemaStatus left, SchemaStatus right) => !left.Equals(right);

        public static explicit operator string(SchemaStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaStatus other && Equals(other);
        public bool Equals(SchemaStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Schema Type
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SchemaType Xsd { get; } = new SchemaType("Xsd");
        public static SchemaType Zip { get; } = new SchemaType("Zip");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol of the stream
    /// </summary>
    [EnumType]
    public readonly struct StreamProtocol : IEquatable<StreamProtocol>
    {
        private readonly string _value;

        private StreamProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StreamProtocol UDP { get; } = new StreamProtocol("UDP");
        public static StreamProtocol SRT { get; } = new StreamProtocol("SRT");
        public static StreamProtocol RTP { get; } = new StreamProtocol("RTP");

        public static bool operator ==(StreamProtocol left, StreamProtocol right) => left.Equals(right);
        public static bool operator !=(StreamProtocol left, StreamProtocol right) => !left.Equals(right);

        public static explicit operator string(StreamProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamProtocol other && Equals(other);
        public bool Equals(StreamProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
