// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureDataTransfer.V20240927.Outputs
{

    /// <summary>
    /// Properties of flow
    /// </summary>
    [OutputType]
    public sealed class FlowPropertiesResponse
    {
        /// <summary>
        /// The connection associated with this flow
        /// </summary>
        public readonly Outputs.SelectedResourceResponse? Connection;
        /// <summary>
        /// The URI to the customer managed key for this flow
        /// </summary>
        public readonly string? CustomerManagedKeyVaultUri;
        /// <summary>
        /// Transfer Storage Blobs or Tables
        /// </summary>
        public readonly string? DataType;
        /// <summary>
        /// The destination endpoint ports of the stream
        /// </summary>
        public readonly ImmutableArray<double> DestinationEndpointPorts;
        /// <summary>
        /// The destination endpoints of the stream
        /// </summary>
        public readonly ImmutableArray<string> DestinationEndpoints;
        /// <summary>
        /// Dataflow GUID associated with this flow
        /// </summary>
        public readonly string FlowId;
        /// <summary>
        /// The flow type for this flow
        /// </summary>
        public readonly string? FlowType;
        /// <summary>
        /// AME, PME, or TORUS only! AKV Chain Containing SAS Token
        /// </summary>
        public readonly string? KeyVaultUri;
        /// <summary>
        /// Link status of the current flow
        /// </summary>
        public readonly string LinkStatus;
        /// <summary>
        /// Resource ID of the linked flow
        /// </summary>
        public readonly string LinkedFlowId;
        /// <summary>
        /// The messaging options for this flow
        /// </summary>
        public readonly Outputs.MessagingOptionsResponse? MessagingOptions;
        /// <summary>
        /// The passphrase used for SRT streams
        /// </summary>
        public readonly string? Passphrase;
        /// <summary>
        /// The policies for this flow
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// Provisioning state of the flow
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The selected schema for this flow
        /// </summary>
        public readonly Outputs.SchemaResponse? Schema;
        /// <summary>
        /// Service Bus Queue ID
        /// </summary>
        public readonly string? ServiceBusQueueId;
        /// <summary>
        /// The source IP address and CIDR ranges of the stream
        /// </summary>
        public readonly Outputs.StreamSourceAddressesResponse? SourceAddresses;
        /// <summary>
        /// Status of the current flow
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Storage Account ID
        /// </summary>
        public readonly string? StorageAccountId;
        /// <summary>
        /// Storage Account
        /// </summary>
        public readonly string? StorageAccountName;
        /// <summary>
        /// Storage Container Name
        /// </summary>
        public readonly string? StorageContainerName;
        /// <summary>
        /// The flow stream identifier
        /// </summary>
        public readonly string? StreamId;
        /// <summary>
        /// The latency of the stream in milliseconds
        /// </summary>
        public readonly double? StreamLatency;
        /// <summary>
        /// The protocol of the stream
        /// </summary>
        public readonly string? StreamProtocol;

        [OutputConstructor]
        private FlowPropertiesResponse(
            Outputs.SelectedResourceResponse? connection,

            string? customerManagedKeyVaultUri,

            string? dataType,

            ImmutableArray<double> destinationEndpointPorts,

            ImmutableArray<string> destinationEndpoints,

            string flowId,

            string? flowType,

            string? keyVaultUri,

            string linkStatus,

            string linkedFlowId,

            Outputs.MessagingOptionsResponse? messagingOptions,

            string? passphrase,

            ImmutableArray<string> policies,

            string provisioningState,

            Outputs.SchemaResponse? schema,

            string? serviceBusQueueId,

            Outputs.StreamSourceAddressesResponse? sourceAddresses,

            string? status,

            string? storageAccountId,

            string? storageAccountName,

            string? storageContainerName,

            string? streamId,

            double? streamLatency,

            string? streamProtocol)
        {
            Connection = connection;
            CustomerManagedKeyVaultUri = customerManagedKeyVaultUri;
            DataType = dataType;
            DestinationEndpointPorts = destinationEndpointPorts;
            DestinationEndpoints = destinationEndpoints;
            FlowId = flowId;
            FlowType = flowType;
            KeyVaultUri = keyVaultUri;
            LinkStatus = linkStatus;
            LinkedFlowId = linkedFlowId;
            MessagingOptions = messagingOptions;
            Passphrase = passphrase;
            Policies = policies;
            ProvisioningState = provisioningState;
            Schema = schema;
            ServiceBusQueueId = serviceBusQueueId;
            SourceAddresses = sourceAddresses;
            Status = status;
            StorageAccountId = storageAccountId;
            StorageAccountName = storageAccountName;
            StorageContainerName = storageContainerName;
            StreamId = streamId;
            StreamLatency = streamLatency;
            StreamProtocol = streamProtocol;
        }
    }
}
