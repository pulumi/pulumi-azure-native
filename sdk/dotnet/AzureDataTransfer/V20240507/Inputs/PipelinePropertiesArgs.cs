// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureDataTransfer.V20240507.Inputs
{

    /// <summary>
    /// Properties of pipeline
    /// </summary>
    public sealed class PipelinePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Display name of this pipeline
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("flowTypes")]
        private InputList<Union<string, Pulumi.AzureNative.AzureDataTransfer.V20240507.FlowType>>? _flowTypes;

        /// <summary>
        /// The flow types allowed for this pipeline
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.AzureDataTransfer.V20240507.FlowType>> FlowTypes
        {
            get => _flowTypes ?? (_flowTypes = new InputList<Union<string, Pulumi.AzureNative.AzureDataTransfer.V20240507.FlowType>>());
            set => _flowTypes = value;
        }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// The policies for this pipeline
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        /// <summary>
        /// Remote cloud of the data to be transferred or received
        /// </summary>
        [Input("remoteCloud", required: true)]
        public Input<string> RemoteCloud { get; set; } = null!;

        [Input("subscribers")]
        private InputList<Inputs.SubscriberArgs>? _subscribers;

        /// <summary>
        /// Subscribers of this resource
        /// </summary>
        public InputList<Inputs.SubscriberArgs> Subscribers
        {
            get => _subscribers ?? (_subscribers = new InputList<Inputs.SubscriberArgs>());
            set => _subscribers = value;
        }

        public PipelinePropertiesArgs()
        {
        }
        public static new PipelinePropertiesArgs Empty => new PipelinePropertiesArgs();
    }
}
