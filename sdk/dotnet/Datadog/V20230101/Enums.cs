// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Datadog.V20230101
{
    /// <summary>
    /// The operation for the patch on the resource.
    /// </summary>
    [EnumType]
    public readonly struct Operation : IEquatable<Operation>
    {
        private readonly string _value;

        private Operation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operation AddBegin { get; } = new Operation("AddBegin");
        public static Operation AddComplete { get; } = new Operation("AddComplete");
        public static Operation DeleteBegin { get; } = new Operation("DeleteBegin");
        public static Operation DeleteComplete { get; } = new Operation("DeleteComplete");
        public static Operation Active { get; } = new Operation("Active");

        public static bool operator ==(Operation left, Operation right) => left.Equals(right);
        public static bool operator !=(Operation left, Operation right) => !left.Equals(right);

        public static explicit operator string(Operation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operation other && Equals(other);
        public bool Equals(Operation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of monitoring.
    /// </summary>
    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status InProgress { get; } = new Status("InProgress");
        public static Status Active { get; } = new Status("Active");
        public static Status Failed { get; } = new Status("Failed");
        public static Status Deleting { get; } = new Status("Deleting");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
    /// </summary>
    [EnumType]
    public readonly struct TagAction : IEquatable<TagAction>
    {
        private readonly string _value;

        private TagAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TagAction Include { get; } = new TagAction("Include");
        public static TagAction Exclude { get; } = new TagAction("Exclude");

        public static bool operator ==(TagAction left, TagAction right) => left.Equals(right);
        public static bool operator !=(TagAction left, TagAction right) => !left.Equals(right);

        public static explicit operator string(TagAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TagAction other && Equals(other);
        public bool Equals(TagAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
