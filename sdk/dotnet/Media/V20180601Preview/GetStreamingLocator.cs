// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Media.V20180601Preview
{
    public static class GetStreamingLocator
    {
        public static Task<GetStreamingLocatorResult> InvokeAsync(GetStreamingLocatorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStreamingLocatorResult>("azure-nextgen:media/v20180601preview:getStreamingLocator", args ?? new GetStreamingLocatorArgs(), options.WithVersion());
    }


    public sealed class GetStreamingLocatorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Streaming Locator name.
        /// </summary>
        [Input("streamingLocatorName", required: true)]
        public string StreamingLocatorName { get; set; } = null!;

        public GetStreamingLocatorArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStreamingLocatorResult
    {
        /// <summary>
        /// An Alternative Media Identifier associated with the StreamingLocator.  This identifier can be used to distinguish different StreamingLocators for the same Asset for authorization purposes in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
        /// </summary>
        public readonly string? AlternativeMediaId;
        /// <summary>
        /// Asset Name
        /// </summary>
        public readonly string AssetName;
        /// <summary>
        /// ContentKeys used by this Streaming Locator
        /// </summary>
        public readonly ImmutableArray<Outputs.StreamingLocatorContentKeyResponse> ContentKeys;
        /// <summary>
        /// Creation time of Streaming Locator
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Default ContentKeyPolicy used by this Streaming Locator
        /// </summary>
        public readonly string? DefaultContentKeyPolicyName;
        /// <summary>
        /// EndTime of Streaming Locator
        /// </summary>
        public readonly string? EndTime;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// StartTime of Streaming Locator
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// StreamingLocatorId of Streaming Locator
        /// </summary>
        public readonly string? StreamingLocatorId;
        /// <summary>
        /// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
        /// </summary>
        public readonly string StreamingPolicyName;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetStreamingLocatorResult(
            string? alternativeMediaId,

            string assetName,

            ImmutableArray<Outputs.StreamingLocatorContentKeyResponse> contentKeys,

            string created,

            string? defaultContentKeyPolicyName,

            string? endTime,

            string name,

            string? startTime,

            string? streamingLocatorId,

            string streamingPolicyName,

            string type)
        {
            AlternativeMediaId = alternativeMediaId;
            AssetName = assetName;
            ContentKeys = contentKeys;
            Created = created;
            DefaultContentKeyPolicyName = defaultContentKeyPolicyName;
            EndTime = endTime;
            Name = name;
            StartTime = startTime;
            StreamingLocatorId = streamingLocatorId;
            StreamingPolicyName = streamingPolicyName;
            Type = type;
        }
    }
}
