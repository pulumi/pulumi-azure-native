// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Media.V20200201Preview.Outputs
{

    [OutputType]
    public sealed class MediaGraphTlsEndpointInvokeResponseResult
    {
        /// <summary>
        /// Polymorphic credentials to present to the endpoint.
        /// </summary>
        public readonly Outputs.MediaGraphUsernamePasswordCredentialsInvokeResponseResult? Credentials;
        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.Media.MediaGraphTlsEndpoint'.
        /// </summary>
        public readonly string OdataType;
        /// <summary>
        /// What certificates should be trusted when authenticating a TLS connection. Null designates that Azure Media's source of trust should be used.
        /// </summary>
        public readonly Outputs.MediaGraphPemCertificateListInvokeResponseResult? TrustedCertificates;
        /// <summary>
        /// Url for the endpoint.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Validation options to use when authenticating a TLS connection. By default, strict validation is used.
        /// </summary>
        public readonly Outputs.MediaGraphTlsValidationOptionsInvokeResponseResult? ValidationOptions;

        [OutputConstructor]
        private MediaGraphTlsEndpointInvokeResponseResult(
            Outputs.MediaGraphUsernamePasswordCredentialsInvokeResponseResult? credentials,

            string odataType,

            Outputs.MediaGraphPemCertificateListInvokeResponseResult? trustedCertificates,

            string url,

            Outputs.MediaGraphTlsValidationOptionsInvokeResponseResult? validationOptions)
        {
            Credentials = credentials;
            OdataType = odataType;
            TrustedCertificates = trustedCertificates;
            Url = url;
            ValidationOptions = validationOptions;
        }
    }
}
