// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Media.V20200501.Outputs
{

    [OutputType]
    public sealed class EnvelopeEncryptionResponse
    {
        /// <summary>
        /// Representing which tracks should not be encrypted
        /// </summary>
        public readonly ImmutableArray<Outputs.TrackSelectionResponse> ClearTracks;
        /// <summary>
        /// Representing default content key for each encryption scheme and separate content keys for specific tracks
        /// </summary>
        public readonly Outputs.StreamingPolicyContentKeysResponse? ContentKeys;
        /// <summary>
        /// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
        /// </summary>
        public readonly string? CustomKeyAcquisitionUrlTemplate;
        /// <summary>
        /// Representing supported protocols
        /// </summary>
        public readonly Outputs.EnabledProtocolsResponse? EnabledProtocols;

        [OutputConstructor]
        private EnvelopeEncryptionResponse(
            ImmutableArray<Outputs.TrackSelectionResponse> clearTracks,

            Outputs.StreamingPolicyContentKeysResponse? contentKeys,

            string? customKeyAcquisitionUrlTemplate,

            Outputs.EnabledProtocolsResponse? enabledProtocols)
        {
            ClearTracks = clearTracks;
            ContentKeys = contentKeys;
            CustomKeyAcquisitionUrlTemplate = customKeyAcquisitionUrlTemplate;
            EnabledProtocols = enabledProtocols;
        }
    }
}
