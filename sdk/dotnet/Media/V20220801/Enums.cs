// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Media.V20220801
{
    /// <summary>
    /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventEncodingType : IEquatable<LiveEventEncodingType>
    {
        private readonly string _value;

        private LiveEventEncodingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated.
        /// </summary>
        public static LiveEventEncodingType None { get; } = new LiveEventEncodingType("None");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution.
        /// </summary>
        public static LiveEventEncodingType Standard { get; } = new LiveEventEncodingType("Standard");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
        /// </summary>
        public static LiveEventEncodingType Premium1080p { get; } = new LiveEventEncodingType("Premium1080p");
        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available.
        /// </summary>
        public static LiveEventEncodingType PassthroughBasic { get; } = new LiveEventEncodingType("PassthroughBasic");
        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed.
        /// </summary>
        public static LiveEventEncodingType PassthroughStandard { get; } = new LiveEventEncodingType("PassthroughStandard");

        public static bool operator ==(LiveEventEncodingType left, LiveEventEncodingType right) => left.Equals(right);
        public static bool operator !=(LiveEventEncodingType left, LiveEventEncodingType right) => !left.Equals(right);

        public static explicit operator string(LiveEventEncodingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventEncodingType other && Equals(other);
        public bool Equals(LiveEventEncodingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The input protocol for the live event. This is specified at creation time and cannot be updated.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventInputProtocol : IEquatable<LiveEventInputProtocol>
    {
        private readonly string _value;

        private LiveEventInputProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Smooth Streaming input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol FragmentedMP4 { get; } = new LiveEventInputProtocol("FragmentedMP4");
        /// <summary>
        /// RTMP input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol RTMP { get; } = new LiveEventInputProtocol("RTMP");

        public static bool operator ==(LiveEventInputProtocol left, LiveEventInputProtocol right) => left.Equals(right);
        public static bool operator !=(LiveEventInputProtocol left, LiveEventInputProtocol right) => !left.Equals(right);

        public static explicit operator string(LiveEventInputProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventInputProtocol other && Equals(other);
        public bool Equals(LiveEventInputProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StreamOptionsFlag : IEquatable<StreamOptionsFlag>
    {
        private readonly string _value;

        private StreamOptionsFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Live streaming with no special latency optimizations.
        /// </summary>
        public static StreamOptionsFlag Default { get; } = new StreamOptionsFlag("Default");
        /// <summary>
        /// The live event provides lower end to end latency by reducing its internal buffers.
        /// </summary>
        public static StreamOptionsFlag LowLatency { get; } = new StreamOptionsFlag("LowLatency");
        /// <summary>
        /// The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios.
        /// </summary>
        public static StreamOptionsFlag LowLatencyV2 { get; } = new StreamOptionsFlag("LowLatencyV2");

        public static bool operator ==(StreamOptionsFlag left, StreamOptionsFlag right) => left.Equals(right);
        public static bool operator !=(StreamOptionsFlag left, StreamOptionsFlag right) => !left.Equals(right);

        public static explicit operator string(StreamOptionsFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamOptionsFlag other && Equals(other);
        public bool Equals(StreamOptionsFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
    /// </summary>
    [EnumType]
    public readonly struct StretchMode : IEquatable<StretchMode>
    {
        private readonly string _value;

        private StretchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Strictly respects the output resolution specified in the encoding preset without considering the pixel aspect ratio or display aspect ratio of the input video.
        /// </summary>
        public static StretchMode None { get; } = new StretchMode("None");
        /// <summary>
        /// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
        /// </summary>
        public static StretchMode AutoSize { get; } = new StretchMode("AutoSize");
        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
        /// </summary>
        public static StretchMode AutoFit { get; } = new StretchMode("AutoFit");

        public static bool operator ==(StretchMode left, StretchMode right) => left.Equals(right);
        public static bool operator !=(StretchMode left, StretchMode right) => !left.Equals(right);

        public static explicit operator string(StretchMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StretchMode other && Equals(other);
        public bool Equals(StretchMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
