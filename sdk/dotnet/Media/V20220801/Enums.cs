// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Media.V20220801
{
    /// <summary>
    /// The permissions to set on the SAS URL.
    /// </summary>
    [EnumType]
    public readonly struct AssetContainerPermission : IEquatable<AssetContainerPermission>
    {
        private readonly string _value;

        private AssetContainerPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The SAS URL will allow read access to the container.
        /// </summary>
        public static AssetContainerPermission Read { get; } = new AssetContainerPermission("Read");
        /// <summary>
        /// The SAS URL will allow read and write access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWrite { get; } = new AssetContainerPermission("ReadWrite");
        /// <summary>
        /// The SAS URL will allow read, write and delete access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWriteDelete { get; } = new AssetContainerPermission("ReadWriteDelete");

        public static bool operator ==(AssetContainerPermission left, AssetContainerPermission right) => left.Equals(right);
        public static bool operator !=(AssetContainerPermission left, AssetContainerPermission right) => !left.Equals(right);

        public static explicit operator string(AssetContainerPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetContainerPermission other && Equals(other);
        public bool Equals(AssetContainerPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rental and lease key type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyFairPlayRentalAndLeaseKeyType : IEquatable<ContentKeyPolicyFairPlayRentalAndLeaseKeyType>
    {
        private readonly string _value;

        private ContentKeyPolicyFairPlayRentalAndLeaseKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Unknown { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Unknown");
        /// <summary>
        /// Key duration is not specified.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Undefined { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Undefined");
        /// <summary>
        /// Dual expiry for offline rental.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType DualExpiry { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("DualExpiry");
        /// <summary>
        /// Content key can be persisted with an unlimited duration
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentUnlimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentUnlimited");
        /// <summary>
        /// Content key can be persisted and the valid duration is limited by the Rental Duration value
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentLimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentLimited");

        public static bool operator ==(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyFairPlayRentalAndLeaseKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyFairPlayRentalAndLeaseKeyType other && Equals(other);
        public bool Equals(ContentKeyPolicyFairPlayRentalAndLeaseKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PlayReady content type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyContentType : IEquatable<ContentKeyPolicyPlayReadyContentType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unknown { get; } = new ContentKeyPolicyPlayReadyContentType("Unknown");
        /// <summary>
        /// Unspecified content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unspecified { get; } = new ContentKeyPolicyPlayReadyContentType("Unspecified");
        /// <summary>
        /// Ultraviolet download content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletDownload { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletDownload");
        /// <summary>
        /// Ultraviolet streaming content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletStreaming { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletStreaming");

        public static bool operator ==(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyContentType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyLicenseType : IEquatable<ContentKeyPolicyPlayReadyLicenseType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Unknown { get; } = new ContentKeyPolicyPlayReadyLicenseType("Unknown");
        /// <summary>
        /// Non persistent license.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType NonPersistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("NonPersistent");
        /// <summary>
        /// Persistent license. Allows offline playback.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Persistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("Persistent");

        public static bool operator ==(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyLicenseType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures Unknown output handling settings of the license.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyUnknownOutputPassingOption : IEquatable<ContentKeyPolicyPlayReadyUnknownOutputPassingOption>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyUnknownOutputPassingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Unknown { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Unknown");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is not allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption NotAllowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("NotAllowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Allowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Allowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowedWithVideoConstriction { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("AllowedWithVideoConstriction");

        public static bool operator ==(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyUnknownOutputPassingOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyUnknownOutputPassingOption other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyUnknownOutputPassingOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of token.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyRestrictionTokenType : IEquatable<ContentKeyPolicyRestrictionTokenType>
    {
        private readonly string _value;

        private ContentKeyPolicyRestrictionTokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Unknown { get; } = new ContentKeyPolicyRestrictionTokenType("Unknown");
        /// <summary>
        /// Simple Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Swt { get; } = new ContentKeyPolicyRestrictionTokenType("Swt");
        /// <summary>
        /// JSON Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Jwt { get; } = new ContentKeyPolicyRestrictionTokenType("Jwt");

        public static bool operator ==(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyRestrictionTokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyRestrictionTokenType other && Equals(other);
        public bool Equals(ContentKeyPolicyRestrictionTokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property condition operation.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyCompareOperation : IEquatable<FilterTrackPropertyCompareOperation>
    {
        private readonly string _value;

        private FilterTrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation Equal { get; } = new FilterTrackPropertyCompareOperation("Equal");
        /// <summary>
        /// The not equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation NotEqual { get; } = new FilterTrackPropertyCompareOperation("NotEqual");

        public static bool operator ==(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyCompareOperation other && Equals(other);
        public bool Equals(FilterTrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property type.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyType : IEquatable<FilterTrackPropertyType>
    {
        private readonly string _value;

        private FilterTrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unknown track property type.
        /// </summary>
        public static FilterTrackPropertyType Unknown { get; } = new FilterTrackPropertyType("Unknown");
        /// <summary>
        /// The type.
        /// </summary>
        public static FilterTrackPropertyType Type { get; } = new FilterTrackPropertyType("Type");
        /// <summary>
        /// The name.
        /// </summary>
        public static FilterTrackPropertyType Name { get; } = new FilterTrackPropertyType("Name");
        /// <summary>
        /// The language.
        /// </summary>
        public static FilterTrackPropertyType Language { get; } = new FilterTrackPropertyType("Language");
        /// <summary>
        /// The fourCC.
        /// </summary>
        public static FilterTrackPropertyType FourCC { get; } = new FilterTrackPropertyType("FourCC");
        /// <summary>
        /// The bitrate.
        /// </summary>
        public static FilterTrackPropertyType Bitrate { get; } = new FilterTrackPropertyType("Bitrate");

        public static bool operator ==(FilterTrackPropertyType left, FilterTrackPropertyType right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyType left, FilterTrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyType other && Equals(other);
        public bool Equals(FilterTrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventEncodingType : IEquatable<LiveEventEncodingType>
    {
        private readonly string _value;

        private LiveEventEncodingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated.
        /// </summary>
        public static LiveEventEncodingType None { get; } = new LiveEventEncodingType("None");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution.
        /// </summary>
        public static LiveEventEncodingType Standard { get; } = new LiveEventEncodingType("Standard");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
        /// </summary>
        public static LiveEventEncodingType Premium1080p { get; } = new LiveEventEncodingType("Premium1080p");
        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available.
        /// </summary>
        public static LiveEventEncodingType PassthroughBasic { get; } = new LiveEventEncodingType("PassthroughBasic");
        /// <summary>
        /// The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed.
        /// </summary>
        public static LiveEventEncodingType PassthroughStandard { get; } = new LiveEventEncodingType("PassthroughStandard");

        public static bool operator ==(LiveEventEncodingType left, LiveEventEncodingType right) => left.Equals(right);
        public static bool operator !=(LiveEventEncodingType left, LiveEventEncodingType right) => !left.Equals(right);

        public static explicit operator string(LiveEventEncodingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventEncodingType other && Equals(other);
        public bool Equals(LiveEventEncodingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The input protocol for the live event. This is specified at creation time and cannot be updated.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventInputProtocol : IEquatable<LiveEventInputProtocol>
    {
        private readonly string _value;

        private LiveEventInputProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Smooth Streaming input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol FragmentedMP4 { get; } = new LiveEventInputProtocol("FragmentedMP4");
        /// <summary>
        /// RTMP input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol RTMP { get; } = new LiveEventInputProtocol("RTMP");

        public static bool operator ==(LiveEventInputProtocol left, LiveEventInputProtocol right) => left.Equals(right);
        public static bool operator !=(LiveEventInputProtocol left, LiveEventInputProtocol right) => !left.Equals(right);

        public static explicit operator string(LiveEventInputProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventInputProtocol other && Equals(other);
        public bool Equals(LiveEventInputProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The security level.
    /// </summary>
    [EnumType]
    public readonly struct SecurityLevel : IEquatable<SecurityLevel>
    {
        private readonly string _value;

        private SecurityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a SecurityLevel that is unavailable in current API version.
        /// </summary>
        public static SecurityLevel Unknown { get; } = new SecurityLevel("Unknown");
        /// <summary>
        /// For clients under development or test. No protection against unauthorized use.
        /// </summary>
        public static SecurityLevel SL150 { get; } = new SecurityLevel("SL150");
        /// <summary>
        /// For hardened devices and applications consuming commercial content. Software or hardware protection.
        /// </summary>
        public static SecurityLevel SL2000 { get; } = new SecurityLevel("SL2000");
        /// <summary>
        /// For hardened devices only. Hardware protection.
        /// </summary>
        public static SecurityLevel SL3000 { get; } = new SecurityLevel("SL3000");

        public static bool operator ==(SecurityLevel left, SecurityLevel right) => left.Equals(right);
        public static bool operator !=(SecurityLevel left, SecurityLevel right) => !left.Equals(right);

        public static explicit operator string(SecurityLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityLevel other && Equals(other);
        public bool Equals(SecurityLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StreamOptionsFlag : IEquatable<StreamOptionsFlag>
    {
        private readonly string _value;

        private StreamOptionsFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Live streaming with no special latency optimizations.
        /// </summary>
        public static StreamOptionsFlag Default { get; } = new StreamOptionsFlag("Default");
        /// <summary>
        /// The live event provides lower end to end latency by reducing its internal buffers.
        /// </summary>
        public static StreamOptionsFlag LowLatency { get; } = new StreamOptionsFlag("LowLatency");
        /// <summary>
        /// The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios.
        /// </summary>
        public static StreamOptionsFlag LowLatencyV2 { get; } = new StreamOptionsFlag("LowLatencyV2");

        public static bool operator ==(StreamOptionsFlag left, StreamOptionsFlag right) => left.Equals(right);
        public static bool operator !=(StreamOptionsFlag left, StreamOptionsFlag right) => !left.Equals(right);

        public static explicit operator string(StreamOptionsFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamOptionsFlag other && Equals(other);
        public bool Equals(StreamOptionsFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
    /// </summary>
    [EnumType]
    public readonly struct StretchMode : IEquatable<StretchMode>
    {
        private readonly string _value;

        private StretchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Strictly respects the output resolution specified in the encoding preset without considering the pixel aspect ratio or display aspect ratio of the input video.
        /// </summary>
        public static StretchMode None { get; } = new StretchMode("None");
        /// <summary>
        /// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
        /// </summary>
        public static StretchMode AutoSize { get; } = new StretchMode("AutoSize");
        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
        /// </summary>
        public static StretchMode AutoFit { get; } = new StretchMode("AutoFit");

        public static bool operator ==(StretchMode left, StretchMode right) => left.Equals(right);
        public static bool operator !=(StretchMode left, StretchMode right) => !left.Equals(right);

        public static explicit operator string(StretchMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StretchMode other && Equals(other);
        public bool Equals(StretchMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property condition operation
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyCompareOperation : IEquatable<TrackPropertyCompareOperation>
    {
        private readonly string _value;

        private TrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property compare operation
        /// </summary>
        public static TrackPropertyCompareOperation Unknown { get; } = new TrackPropertyCompareOperation("Unknown");
        /// <summary>
        /// Equal operation
        /// </summary>
        public static TrackPropertyCompareOperation Equal { get; } = new TrackPropertyCompareOperation("Equal");

        public static bool operator ==(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyCompareOperation other && Equals(other);
        public bool Equals(TrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property type
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyType : IEquatable<TrackPropertyType>
    {
        private readonly string _value;

        private TrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property
        /// </summary>
        public static TrackPropertyType Unknown { get; } = new TrackPropertyType("Unknown");
        /// <summary>
        /// Track FourCC
        /// </summary>
        public static TrackPropertyType FourCC { get; } = new TrackPropertyType("FourCC");

        public static bool operator ==(TrackPropertyType left, TrackPropertyType right) => left.Equals(right);
        public static bool operator !=(TrackPropertyType left, TrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyType other && Equals(other);
        public bool Equals(TrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible".
    /// </summary>
    [EnumType]
    public readonly struct Visibility : IEquatable<Visibility>
    {
        private readonly string _value;

        private Visibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The track is hidden to video player.
        /// </summary>
        public static Visibility Hidden { get; } = new Visibility("Hidden");
        /// <summary>
        /// The track is visible to video player.
        /// </summary>
        public static Visibility Visible { get; } = new Visibility("Visible");

        public static bool operator ==(Visibility left, Visibility right) => left.Equals(right);
        public static bool operator !=(Visibility left, Visibility right) => !left.Equals(right);

        public static explicit operator string(Visibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Visibility other && Equals(other);
        public bool Equals(Visibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
