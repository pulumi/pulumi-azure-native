// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Media.V20220501Preview
{
    /// <summary>
    /// The encoding profile to be used when encoding audio with AAC.
    /// </summary>
    [EnumType]
    public readonly struct AacAudioProfile : IEquatable<AacAudioProfile>
    {
        private readonly string _value;

        private AacAudioProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC).
        /// </summary>
        public static AacAudioProfile AacLc { get; } = new AacAudioProfile("AacLc");
        /// <summary>
        /// Specifies that the output audio is to be encoded into HE-AAC v1 profile.
        /// </summary>
        public static AacAudioProfile HeAacV1 { get; } = new AacAudioProfile("HeAacV1");
        /// <summary>
        /// Specifies that the output audio is to be encoded into HE-AAC v2 profile.
        /// </summary>
        public static AacAudioProfile HeAacV2 { get; } = new AacAudioProfile("HeAacV2");

        public static bool operator ==(AacAudioProfile left, AacAudioProfile right) => left.Equals(right);
        public static bool operator !=(AacAudioProfile left, AacAudioProfile right) => !left.Equals(right);

        public static explicit operator string(AacAudioProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AacAudioProfile other && Equals(other);
        public bool Equals(AacAudioProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
    /// </summary>
    [EnumType]
    public readonly struct AnalysisResolution : IEquatable<AnalysisResolution>
    {
        private readonly string _value;

        private AnalysisResolution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResolution SourceResolution { get; } = new AnalysisResolution("SourceResolution");
        public static AnalysisResolution StandardDefinition { get; } = new AnalysisResolution("StandardDefinition");

        public static bool operator ==(AnalysisResolution left, AnalysisResolution right) => left.Equals(right);
        public static bool operator !=(AnalysisResolution left, AnalysisResolution right) => !left.Equals(right);

        public static explicit operator string(AnalysisResolution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResolution other && Equals(other);
        public bool Equals(AnalysisResolution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks.
    /// </summary>
    [EnumType]
    public readonly struct AttributeFilter : IEquatable<AttributeFilter>
    {
        private readonly string _value;

        private AttributeFilter(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// All tracks will be included.
        /// </summary>
        public static AttributeFilter All { get; } = new AttributeFilter("All");
        /// <summary>
        /// The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate.
        /// </summary>
        public static AttributeFilter Top { get; } = new AttributeFilter("Top");
        /// <summary>
        /// The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate.
        /// </summary>
        public static AttributeFilter Bottom { get; } = new AttributeFilter("Bottom");
        /// <summary>
        /// Any tracks that have an attribute equal to the value given will be included.
        /// </summary>
        public static AttributeFilter ValueEquals { get; } = new AttributeFilter("ValueEquals");

        public static bool operator ==(AttributeFilter left, AttributeFilter right) => left.Equals(right);
        public static bool operator !=(AttributeFilter left, AttributeFilter right) => !left.Equals(right);

        public static explicit operator string(AttributeFilter value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AttributeFilter other && Equals(other);
        public bool Equals(AttributeFilter other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
    /// </summary>
    [EnumType]
    public readonly struct AudioAnalysisMode : IEquatable<AudioAnalysisMode>
    {
        private readonly string _value;

        private AudioAnalysisMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization.
        /// </summary>
        public static AudioAnalysisMode Standard { get; } = new AudioAnalysisMode("Standard");
        /// <summary>
        /// This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode.
        /// </summary>
        public static AudioAnalysisMode Basic { get; } = new AudioAnalysisMode("Basic");

        public static bool operator ==(AudioAnalysisMode left, AudioAnalysisMode right) => left.Equals(right);
        public static bool operator !=(AudioAnalysisMode left, AudioAnalysisMode right) => !left.Equals(right);

        public static explicit operator string(AudioAnalysisMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AudioAnalysisMode other && Equals(other);
        public bool Equals(AudioAnalysisMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Blur type
    /// </summary>
    [EnumType]
    public readonly struct BlurType : IEquatable<BlurType>
    {
        private readonly string _value;

        private BlurType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Box: debug filter, bounding box only
        /// </summary>
        public static BlurType Box { get; } = new BlurType("Box");
        /// <summary>
        /// Low: box-car blur filter
        /// </summary>
        public static BlurType Low { get; } = new BlurType("Low");
        /// <summary>
        /// Med: Gaussian blur filter
        /// </summary>
        public static BlurType Med { get; } = new BlurType("Med");
        /// <summary>
        /// High: Confuse blur filter
        /// </summary>
        public static BlurType High { get; } = new BlurType("High");
        /// <summary>
        /// Black: Black out filter
        /// </summary>
        public static BlurType Black { get; } = new BlurType("Black");

        public static bool operator ==(BlurType left, BlurType right) => left.Equals(right);
        public static bool operator !=(BlurType left, BlurType right) => !left.Equals(right);

        public static explicit operator string(BlurType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlurType other && Equals(other);
        public bool Equals(BlurType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks.
    /// </summary>
    [EnumType]
    public readonly struct ChannelMapping : IEquatable<ChannelMapping>
    {
        private readonly string _value;

        private ChannelMapping(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Front Left Channel.
        /// </summary>
        public static ChannelMapping FrontLeft { get; } = new ChannelMapping("FrontLeft");
        /// <summary>
        /// The Front Right Channel.
        /// </summary>
        public static ChannelMapping FrontRight { get; } = new ChannelMapping("FrontRight");
        /// <summary>
        /// The Center Channel.
        /// </summary>
        public static ChannelMapping Center { get; } = new ChannelMapping("Center");
        /// <summary>
        /// Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer.
        /// </summary>
        public static ChannelMapping LowFrequencyEffects { get; } = new ChannelMapping("LowFrequencyEffects");
        /// <summary>
        /// The Back Left Channel.  Sometimes referred to as the Left Surround Channel.
        /// </summary>
        public static ChannelMapping BackLeft { get; } = new ChannelMapping("BackLeft");
        /// <summary>
        /// The Back Right Channel.  Sometimes referred to as the Right Surround Channel.
        /// </summary>
        public static ChannelMapping BackRight { get; } = new ChannelMapping("BackRight");
        /// <summary>
        /// The Left Stereo channel.  Sometimes referred to as Down Mix Left.
        /// </summary>
        public static ChannelMapping StereoLeft { get; } = new ChannelMapping("StereoLeft");
        /// <summary>
        /// The Right Stereo channel.  Sometimes referred to as Down Mix Right.
        /// </summary>
        public static ChannelMapping StereoRight { get; } = new ChannelMapping("StereoRight");

        public static bool operator ==(ChannelMapping left, ChannelMapping right) => left.Equals(right);
        public static bool operator !=(ChannelMapping left, ChannelMapping right) => !left.Equals(right);

        public static explicit operator string(ChannelMapping value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChannelMapping other && Equals(other);
        public bool Equals(ChannelMapping other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity as Speed for faster encoding but less compression efficiency.
    /// </summary>
    [EnumType]
    public readonly struct Complexity : IEquatable<Complexity>
    {
        private readonly string _value;

        private Complexity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time.
        /// </summary>
        public static Complexity Speed { get; } = new Complexity("Speed");
        /// <summary>
        /// Configures the encoder to use settings that achieve a balance between speed and quality.
        /// </summary>
        public static Complexity Balanced { get; } = new Complexity("Balanced");
        /// <summary>
        /// Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time.
        /// </summary>
        public static Complexity Quality { get; } = new Complexity("Quality");

        public static bool operator ==(Complexity left, Complexity right) => left.Equals(right);
        public static bool operator !=(Complexity left, Complexity right) => !left.Equals(right);

        public static explicit operator string(Complexity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Complexity other && Equals(other);
        public bool Equals(Complexity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deinterlacing mode. Defaults to AutoPixelAdaptive.
    /// </summary>
    [EnumType]
    public readonly struct DeinterlaceMode : IEquatable<DeinterlaceMode>
    {
        private readonly string _value;

        private DeinterlaceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disables de-interlacing of the source video.
        /// </summary>
        public static DeinterlaceMode Off { get; } = new DeinterlaceMode("Off");
        /// <summary>
        /// Apply automatic pixel adaptive de-interlacing on each frame in the input video.
        /// </summary>
        public static DeinterlaceMode AutoPixelAdaptive { get; } = new DeinterlaceMode("AutoPixelAdaptive");

        public static bool operator ==(DeinterlaceMode left, DeinterlaceMode right) => left.Equals(right);
        public static bool operator !=(DeinterlaceMode left, DeinterlaceMode right) => !left.Equals(right);

        public static explicit operator string(DeinterlaceMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeinterlaceMode other && Equals(other);
        public bool Equals(DeinterlaceMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The field parity for de-interlacing, defaults to Auto.
    /// </summary>
    [EnumType]
    public readonly struct DeinterlaceParity : IEquatable<DeinterlaceParity>
    {
        private readonly string _value;

        private DeinterlaceParity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatically detect the order of fields
        /// </summary>
        public static DeinterlaceParity Auto { get; } = new DeinterlaceParity("Auto");
        /// <summary>
        /// Apply top field first processing of input video.
        /// </summary>
        public static DeinterlaceParity TopFieldFirst { get; } = new DeinterlaceParity("TopFieldFirst");
        /// <summary>
        /// Apply bottom field first processing of input video.
        /// </summary>
        public static DeinterlaceParity BottomFieldFirst { get; } = new DeinterlaceParity("BottomFieldFirst");

        public static bool operator ==(DeinterlaceParity left, DeinterlaceParity right) => left.Equals(right);
        public static bool operator !=(DeinterlaceParity left, DeinterlaceParity right) => !left.Equals(right);

        public static explicit operator string(DeinterlaceParity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeinterlaceParity other && Equals(other);
        public bool Equals(DeinterlaceParity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The built-in preset to be used for encoding videos.
    /// </summary>
    [EnumType]
    public readonly struct EncoderNamedPreset : IEquatable<EncoderNamedPreset>
    {
        private readonly string _value;

        private EncoderNamedPreset(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrateSD { get; } = new EncoderNamedPreset("H264SingleBitrateSD");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrate720p { get; } = new EncoderNamedPreset("H264SingleBitrate720p");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrate1080p { get; } = new EncoderNamedPreset("H264SingleBitrate1080p");
        /// <summary>
        /// Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
        /// </summary>
        public static EncoderNamedPreset AdaptiveStreaming { get; } = new EncoderNamedPreset("AdaptiveStreaming");
        /// <summary>
        /// Produces a single MP4 file containing only AAC stereo audio encoded at 192 kbps.
        /// </summary>
        public static EncoderNamedPreset AACGoodQualityAudio { get; } = new EncoderNamedPreset("AACGoodQualityAudio");
        /// <summary>
        /// Produces a single MP4 file containing only DD(Digital Dolby) stereo audio encoded at 192 kbps.
        /// </summary>
        public static EncoderNamedPreset DDGoodQualityAudio { get; } = new EncoderNamedPreset("DDGoodQualityAudio");
        /// <summary>
        /// Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static EncoderNamedPreset ContentAwareEncodingExperimental { get; } = new EncoderNamedPreset("ContentAwareEncodingExperimental");
        /// <summary>
        /// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static EncoderNamedPreset ContentAwareEncoding { get; } = new EncoderNamedPreset("ContentAwareEncoding");
        /// <summary>
        /// Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed.
        /// </summary>
        public static EncoderNamedPreset CopyAllBitrateNonInterleaved { get; } = new EncoderNamedPreset("CopyAllBitrateNonInterleaved");
        /// <summary>
        /// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrate1080p { get; } = new EncoderNamedPreset("H264MultipleBitrate1080p");
        /// <summary>
        /// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrate720p { get; } = new EncoderNamedPreset("H264MultipleBitrate720p");
        /// <summary>
        /// Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrateSD { get; } = new EncoderNamedPreset("H264MultipleBitrateSD");
        /// <summary>
        /// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static EncoderNamedPreset H265ContentAwareEncoding { get; } = new EncoderNamedPreset("H265ContentAwareEncoding");
        /// <summary>
        /// Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
        /// </summary>
        public static EncoderNamedPreset H265AdaptiveStreaming { get; } = new EncoderNamedPreset("H265AdaptiveStreaming");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H265SingleBitrate720p { get; } = new EncoderNamedPreset("H265SingleBitrate720p");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H265SingleBitrate1080p { get; } = new EncoderNamedPreset("H265SingleBitrate1080p");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H265SingleBitrate4K { get; } = new EncoderNamedPreset("H265SingleBitrate4K");

        public static bool operator ==(EncoderNamedPreset left, EncoderNamedPreset right) => left.Equals(right);
        public static bool operator !=(EncoderNamedPreset left, EncoderNamedPreset right) => !left.Equals(right);

        public static explicit operator string(EncoderNamedPreset value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncoderNamedPreset other && Equals(other);
        public bool Equals(EncoderNamedPreset other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
    /// </summary>
    [EnumType]
    public readonly struct EntropyMode : IEquatable<EntropyMode>
    {
        private readonly string _value;

        private EntropyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding.
        /// </summary>
        public static EntropyMode Cabac { get; } = new EntropyMode("Cabac");
        /// <summary>
        /// Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
        /// </summary>
        public static EntropyMode Cavlc { get; } = new EntropyMode("Cavlc");

        public static bool operator ==(EntropyMode left, EntropyMode right) => left.Equals(right);
        public static bool operator !=(EntropyMode left, EntropyMode right) => !left.Equals(right);

        public static explicit operator string(EntropyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntropyMode other && Equals(other);
        public bool Equals(EntropyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction.
    /// </summary>
    [EnumType]
    public readonly struct FaceRedactorMode : IEquatable<FaceRedactorMode>
    {
        private readonly string _value;

        private FaceRedactorMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode.
        /// </summary>
        public static FaceRedactorMode Analyze { get; } = new FaceRedactorMode("Analyze");
        /// <summary>
        /// Redact mode consumes the metadata file from Analyze mode and redacts the faces found.
        /// </summary>
        public static FaceRedactorMode Redact { get; } = new FaceRedactorMode("Redact");
        /// <summary>
        /// Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired.
        /// </summary>
        public static FaceRedactorMode Combined { get; } = new FaceRedactorMode("Combined");

        public static bool operator ==(FaceRedactorMode left, FaceRedactorMode right) => left.Equals(right);
        public static bool operator !=(FaceRedactorMode left, FaceRedactorMode right) => !left.Equals(right);

        public static explicit operator string(FaceRedactorMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FaceRedactorMode other && Equals(other);
        public bool Equals(FaceRedactorMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells the encoder how to choose its encoding settings. The default value is Balanced.
    /// </summary>
    [EnumType]
    public readonly struct H264Complexity : IEquatable<H264Complexity>
    {
        private readonly string _value;

        private H264Complexity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
        /// </summary>
        public static H264Complexity Speed { get; } = new H264Complexity("Speed");
        /// <summary>
        /// Tells the encoder to use settings that achieve a balance between speed and quality.
        /// </summary>
        public static H264Complexity Balanced { get; } = new H264Complexity("Balanced");
        /// <summary>
        /// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
        /// </summary>
        public static H264Complexity Quality { get; } = new H264Complexity("Quality");

        public static bool operator ==(H264Complexity left, H264Complexity right) => left.Equals(right);
        public static bool operator !=(H264Complexity left, H264Complexity right) => !left.Equals(right);

        public static explicit operator string(H264Complexity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is H264Complexity other && Equals(other);
        public bool Equals(H264Complexity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The video rate control mode
    /// </summary>
    [EnumType]
    public readonly struct H264RateControlMode : IEquatable<H264RateControlMode>
    {
        private readonly string _value;

        private H264RateControlMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Average Bitrate (ABR) mode that hits the target bitrate: Default mode.
        /// </summary>
        public static H264RateControlMode ABR { get; } = new H264RateControlMode("ABR");
        /// <summary>
        /// Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate.
        /// </summary>
        public static H264RateControlMode CBR { get; } = new H264RateControlMode("CBR");
        /// <summary>
        /// Constant Rate Factor (CRF) mode that targets at constant subjective quality.
        /// </summary>
        public static H264RateControlMode CRF { get; } = new H264RateControlMode("CRF");

        public static bool operator ==(H264RateControlMode left, H264RateControlMode right) => left.Equals(right);
        public static bool operator !=(H264RateControlMode left, H264RateControlMode right) => !left.Equals(right);

        public static explicit operator string(H264RateControlMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is H264RateControlMode other && Equals(other);
        public bool Equals(H264RateControlMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// We currently support Baseline, Main, High, High422, High444. Default is Auto.
    /// </summary>
    [EnumType]
    public readonly struct H264VideoProfile : IEquatable<H264VideoProfile>
    {
        private readonly string _value;

        private H264VideoProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the encoder to automatically determine the appropriate H.264 profile.
        /// </summary>
        public static H264VideoProfile Auto { get; } = new H264VideoProfile("Auto");
        /// <summary>
        /// Baseline profile
        /// </summary>
        public static H264VideoProfile Baseline { get; } = new H264VideoProfile("Baseline");
        /// <summary>
        /// Main profile
        /// </summary>
        public static H264VideoProfile Main { get; } = new H264VideoProfile("Main");
        /// <summary>
        /// High profile.
        /// </summary>
        public static H264VideoProfile High { get; } = new H264VideoProfile("High");
        /// <summary>
        /// High 4:2:2 profile.
        /// </summary>
        public static H264VideoProfile High422 { get; } = new H264VideoProfile("High422");
        /// <summary>
        /// High 4:4:4 predictive profile.
        /// </summary>
        public static H264VideoProfile High444 { get; } = new H264VideoProfile("High444");

        public static bool operator ==(H264VideoProfile left, H264VideoProfile right) => left.Equals(right);
        public static bool operator !=(H264VideoProfile left, H264VideoProfile right) => !left.Equals(right);

        public static explicit operator string(H264VideoProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is H264VideoProfile other && Equals(other);
        public bool Equals(H264VideoProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.
    /// </summary>
    [EnumType]
    public readonly struct H265Complexity : IEquatable<H265Complexity>
    {
        private readonly string _value;

        private H265Complexity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time.
        /// </summary>
        public static H265Complexity Speed { get; } = new H265Complexity("Speed");
        /// <summary>
        /// Tells the encoder to use settings that achieve a balance between speed and quality.
        /// </summary>
        public static H265Complexity Balanced { get; } = new H265Complexity("Balanced");
        /// <summary>
        /// Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
        /// </summary>
        public static H265Complexity Quality { get; } = new H265Complexity("Quality");

        public static bool operator ==(H265Complexity left, H265Complexity right) => left.Equals(right);
        public static bool operator !=(H265Complexity left, H265Complexity right) => !left.Equals(right);

        public static explicit operator string(H265Complexity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is H265Complexity other && Equals(other);
        public bool Equals(H265Complexity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// We currently support Main. Default is Auto.
    /// </summary>
    [EnumType]
    public readonly struct H265VideoProfile : IEquatable<H265VideoProfile>
    {
        private readonly string _value;

        private H265VideoProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the encoder to automatically determine the appropriate H.265 profile.
        /// </summary>
        public static H265VideoProfile Auto { get; } = new H265VideoProfile("Auto");
        /// <summary>
        /// Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier)
        /// </summary>
        public static H265VideoProfile Main { get; } = new H265VideoProfile("Main");
        /// <summary>
        /// Main 10 profile (https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Main_10)
        /// </summary>
        public static H265VideoProfile Main10 { get; } = new H265VideoProfile("Main10");

        public static bool operator ==(H265VideoProfile left, H265VideoProfile right) => left.Equals(right);
        public static bool operator !=(H265VideoProfile left, H265VideoProfile right) => !left.Equals(right);

        public static explicit operator string(H265VideoProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is H265VideoProfile other && Equals(other);
        public bool Equals(H265VideoProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
    /// </summary>
    [EnumType]
    public readonly struct InsightsType : IEquatable<InsightsType>
    {
        private readonly string _value;

        private InsightsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Generate audio only insights. Ignore video even if present. Fails if no audio is present.
        /// </summary>
        public static InsightsType AudioInsightsOnly { get; } = new InsightsType("AudioInsightsOnly");
        /// <summary>
        /// Generate video only insights. Ignore audio if present. Fails if no video is present.
        /// </summary>
        public static InsightsType VideoInsightsOnly { get; } = new InsightsType("VideoInsightsOnly");
        /// <summary>
        /// Generate both audio and video insights. Fails if either audio or video Insights fail.
        /// </summary>
        public static InsightsType AllInsights { get; } = new InsightsType("AllInsights");

        public static bool operator ==(InsightsType left, InsightsType right) => left.Equals(right);
        public static bool operator !=(InsightsType left, InsightsType right) => !left.Equals(right);

        public static explicit operator string(InsightsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InsightsType other && Equals(other);
        public bool Equals(InsightsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files.
    /// </summary>
    [EnumType]
    public readonly struct InterleaveOutput : IEquatable<InterleaveOutput>
    {
        private readonly string _value;

        private InterleaveOutput(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The output is video-only or audio-only.
        /// </summary>
        public static InterleaveOutput NonInterleavedOutput { get; } = new InterleaveOutput("NonInterleavedOutput");
        /// <summary>
        /// The output includes both audio and video.
        /// </summary>
        public static InterleaveOutput InterleavedOutput { get; } = new InterleaveOutput("InterleavedOutput");

        public static bool operator ==(InterleaveOutput left, InterleaveOutput right) => left.Equals(right);
        public static bool operator !=(InterleaveOutput left, InterleaveOutput right) => !left.Equals(right);

        public static explicit operator string(InterleaveOutput value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InterleaveOutput other && Equals(other);
        public bool Equals(InterleaveOutput other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
    /// </summary>
    [EnumType]
    public readonly struct OnErrorType : IEquatable<OnErrorType>
    {
        private readonly string _value;

        private OnErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped.
        /// </summary>
        public static OnErrorType StopProcessingJob { get; } = new OnErrorType("StopProcessingJob");
        /// <summary>
        /// Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
        /// </summary>
        public static OnErrorType ContinueJob { get; } = new OnErrorType("ContinueJob");

        public static bool operator ==(OnErrorType left, OnErrorType right) => left.Equals(right);
        public static bool operator !=(OnErrorType left, OnErrorType right) => !left.Equals(right);

        public static explicit operator string(OnErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OnErrorType other && Equals(other);
        public bool Equals(OnErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
    /// </summary>
    [EnumType]
    public readonly struct Priority : IEquatable<Priority>
    {
        private readonly string _value;

        private Priority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs.
        /// </summary>
        public static Priority Low { get; } = new Priority("Low");
        /// <summary>
        /// Used for TransformOutputs that can be generated at Normal priority.
        /// </summary>
        public static Priority Normal { get; } = new Priority("Normal");
        /// <summary>
        /// Used for TransformOutputs that should take precedence over others.
        /// </summary>
        public static Priority High { get; } = new Priority("High");

        public static bool operator ==(Priority left, Priority right) => left.Equals(right);
        public static bool operator !=(Priority left, Priority right) => !left.Equals(right);

        public static explicit operator string(Priority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Priority other && Equals(other);
        public bool Equals(Priority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
    /// </summary>
    [EnumType]
    public readonly struct Rotation : IEquatable<Rotation>
    {
        private readonly string _value;

        private Rotation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatically detect and rotate as needed.
        /// </summary>
        public static Rotation Auto { get; } = new Rotation("Auto");
        /// <summary>
        /// Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact.
        /// </summary>
        public static Rotation None { get; } = new Rotation("None");
        /// <summary>
        /// Do not rotate the video but remove any metadata about the rotation.
        /// </summary>
        public static Rotation Rotate0 { get; } = new Rotation("Rotate0");
        /// <summary>
        /// Rotate 90 degrees clockwise.
        /// </summary>
        public static Rotation Rotate90 { get; } = new Rotation("Rotate90");
        /// <summary>
        /// Rotate 180 degrees clockwise.
        /// </summary>
        public static Rotation Rotate180 { get; } = new Rotation("Rotate180");
        /// <summary>
        /// Rotate 270 degrees clockwise.
        /// </summary>
        public static Rotation Rotate270 { get; } = new Rotation("Rotate270");

        public static bool operator ==(Rotation left, Rotation right) => left.Equals(right);
        public static bool operator !=(Rotation left, Rotation right) => !left.Equals(right);

        public static explicit operator string(Rotation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Rotation other && Equals(other);
        public bool Equals(Rotation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StreamingFormatType : IEquatable<StreamingFormatType>
    {
        private readonly string _value;

        private StreamingFormatType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// HLS and DASH streaming are both supported in this format. HLS manifest files(master and variants manifest files) and DASH media presentation description file are included in the output. This is the default streaming format.
        /// </summary>
        public static StreamingFormatType HlsAndDash { get; } = new StreamingFormatType("HlsAndDash");
        /// <summary>
        /// HLS streaming is supported in this format. HLS manifest files(master and variants manifest files) are included in the output.
        /// </summary>
        public static StreamingFormatType Hls { get; } = new StreamingFormatType("Hls");
        /// <summary>
        /// DASH streaming is supported in this format. DASH media presentation description file is included in the output.
        /// </summary>
        public static StreamingFormatType Dash { get; } = new StreamingFormatType("Dash");

        public static bool operator ==(StreamingFormatType left, StreamingFormatType right) => left.Equals(right);
        public static bool operator !=(StreamingFormatType left, StreamingFormatType right) => !left.Equals(right);

        public static explicit operator string(StreamingFormatType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamingFormatType other && Equals(other);
        public bool Equals(StreamingFormatType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
    /// </summary>
    [EnumType]
    public readonly struct StretchMode : IEquatable<StretchMode>
    {
        private readonly string _value;

        private StretchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video.
        /// </summary>
        public static StretchMode None { get; } = new StretchMode("None");
        /// <summary>
        /// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
        /// </summary>
        public static StretchMode AutoSize { get; } = new StretchMode("AutoSize");
        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
        /// </summary>
        public static StretchMode AutoFit { get; } = new StretchMode("AutoFit");

        public static bool operator ==(StretchMode left, StretchMode right) => left.Equals(right);
        public static bool operator !=(StretchMode left, StretchMode right) => !left.Equals(right);

        public static explicit operator string(StretchMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StretchMode other && Equals(other);
        public bool Equals(StretchMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The TrackAttribute to filter the tracks by.
    /// </summary>
    [EnumType]
    public readonly struct TrackAttribute : IEquatable<TrackAttribute>
    {
        private readonly string _value;

        private TrackAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The bitrate of the track.
        /// </summary>
        public static TrackAttribute Bitrate { get; } = new TrackAttribute("Bitrate");
        /// <summary>
        /// The language of the track.
        /// </summary>
        public static TrackAttribute Language { get; } = new TrackAttribute("Language");

        public static bool operator ==(TrackAttribute left, TrackAttribute right) => left.Equals(right);
        public static bool operator !=(TrackAttribute left, TrackAttribute right) => !left.Equals(right);

        public static explicit operator string(TrackAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackAttribute other && Equals(other);
        public bool Equals(TrackAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Video Sync Mode
    /// </summary>
    [EnumType]
    public readonly struct VideoSyncMode : IEquatable<VideoSyncMode>
    {
        private readonly string _value;

        private VideoSyncMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr.
        /// </summary>
        public static VideoSyncMode Auto { get; } = new VideoSyncMode("Auto");
        /// <summary>
        /// The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior
        /// </summary>
        public static VideoSyncMode Passthrough { get; } = new VideoSyncMode("Passthrough");
        /// <summary>
        /// Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value
        /// </summary>
        public static VideoSyncMode Cfr { get; } = new VideoSyncMode("Cfr");
        /// <summary>
        /// Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input
        /// </summary>
        public static VideoSyncMode Vfr { get; } = new VideoSyncMode("Vfr");

        public static bool operator ==(VideoSyncMode left, VideoSyncMode right) => left.Equals(right);
        public static bool operator !=(VideoSyncMode left, VideoSyncMode right) => !left.Equals(right);

        public static explicit operator string(VideoSyncMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VideoSyncMode other && Equals(other);
        public bool Equals(VideoSyncMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
