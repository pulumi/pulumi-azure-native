// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media.V20221101.Outputs
{

    /// <summary>
    /// The live event status.
    /// </summary>
    [OutputType]
    public sealed class LiveEventStatusResponse
    {
        /// <summary>
        /// List of strings justifying the health status.
        /// </summary>
        public readonly ImmutableArray<string> HealthDescriptions;
        /// <summary>
        /// Health status of last 20 seconds.
        /// </summary>
        public readonly string? HealthStatus;
        /// <summary>
        /// Live event ingestion entry.
        /// </summary>
        public readonly Outputs.LiveEventIngestionResponse? Ingestion;
        /// <summary>
        /// Last updated UTC time of this status.
        /// </summary>
        public readonly string? LastUpdatedTime;
        /// <summary>
        /// Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Track entry list.
        /// </summary>
        public readonly ImmutableArray<Outputs.LiveEventTrackStatusResponse> TrackStatus;

        [OutputConstructor]
        private LiveEventStatusResponse(
            ImmutableArray<string> healthDescriptions,

            string? healthStatus,

            Outputs.LiveEventIngestionResponse? ingestion,

            string? lastUpdatedTime,

            string? state,

            ImmutableArray<Outputs.LiveEventTrackStatusResponse> trackStatus)
        {
            HealthDescriptions = healthDescriptions;
            HealthStatus = healthStatus;
            Ingestion = ingestion;
            LastUpdatedTime = lastUpdatedTime;
            State = state;
            TrackStatus = trackStatus;
        }
    }
}
