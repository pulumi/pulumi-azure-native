// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media.Inputs
{

    /// <summary>
    /// Represents a text track in an asset. A text track is usually used for sparse data related to the audio or video tracks.
    /// </summary>
    public sealed class TextTrackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The file name to the source file. This file is located in the storage container of the asset.
        /// </summary>
        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        /// <summary>
        /// The HLS specific setting for the text track.
        /// </summary>
        [Input("hlsSettings")]
        public Input<Inputs.HlsSettingsArgs>? HlsSettings { get; set; }

        /// <summary>
        /// The discriminator for derived types.
        /// Expected value is '#Microsoft.Media.TextTrack'.
        /// </summary>
        [Input("odataType", required: true)]
        public Input<string> OdataType { get; set; } = null!;

        /// <summary>
        /// When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible".
        /// </summary>
        [Input("playerVisibility")]
        public InputUnion<string, Pulumi.AzureNative.Media.Visibility>? PlayerVisibility { get; set; }

        public TextTrackArgs()
        {
        }
        public static new TextTrackArgs Empty => new TextTrackArgs();
    }
}
