// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media.V20180701
{
    public static class GetAccountFilter
    {
        /// <summary>
        /// Get the details of an Account Filter in the Media Services account.
        /// </summary>
        public static Task<GetAccountFilterResult> InvokeAsync(GetAccountFilterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountFilterResult>("azure-native:media/v20180701:getAccountFilter", args ?? new GetAccountFilterArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of an Account Filter in the Media Services account.
        /// </summary>
        public static Output<GetAccountFilterResult> Invoke(GetAccountFilterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountFilterResult>("azure-native:media/v20180701:getAccountFilter", args ?? new GetAccountFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountFilterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The Account Filter name
        /// </summary>
        [Input("filterName", required: true)]
        public string FilterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAccountFilterArgs()
        {
        }
        public static new GetAccountFilterArgs Empty => new GetAccountFilterArgs();
    }

    public sealed class GetAccountFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The Account Filter name
        /// </summary>
        [Input("filterName", required: true)]
        public Input<string> FilterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAccountFilterInvokeArgs()
        {
        }
        public static new GetAccountFilterInvokeArgs Empty => new GetAccountFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountFilterResult
    {
        /// <summary>
        /// The first quality.
        /// </summary>
        public readonly Outputs.FirstQualityResponse? FirstQuality;
        /// <summary>
        /// Fully qualified resource ID for the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The presentation time range.
        /// </summary>
        public readonly Outputs.PresentationTimeRangeResponse? PresentationTimeRange;
        /// <summary>
        /// The tracks selection conditions.
        /// </summary>
        public readonly ImmutableArray<Outputs.FilterTrackSelectionResponse> Tracks;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAccountFilterResult(
            Outputs.FirstQualityResponse? firstQuality,

            string id,

            string name,

            Outputs.PresentationTimeRangeResponse? presentationTimeRange,

            ImmutableArray<Outputs.FilterTrackSelectionResponse> tracks,

            string type)
        {
            FirstQuality = firstQuality;
            Id = id;
            Name = name;
            PresentationTimeRange = presentationTimeRange;
            Tracks = tracks;
            Type = type;
        }
    }
}
