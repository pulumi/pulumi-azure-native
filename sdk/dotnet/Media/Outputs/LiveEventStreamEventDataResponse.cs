// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media.Outputs
{

    /// <summary>
    /// The live event stream event data.
    /// </summary>
    [OutputType]
    public sealed class LiveEventStreamEventDataResponse
    {
        /// <summary>
        /// Bitrate of the track.
        /// </summary>
        public readonly double? Bitrate;
        /// <summary>
        /// Current fragment timestamp in timescale.
        /// </summary>
        public readonly string? CurrentFragmentTimestamp;
        /// <summary>
        /// Length of the discontinuity gap in timescale.
        /// </summary>
        public readonly double? DiscontinuityGap;
        /// <summary>
        /// Fragment duration.
        /// </summary>
        public readonly string? Duration;
        /// <summary>
        /// Reason the fragment was dropped.
        /// </summary>
        public readonly string? FragmentDropReason;
        /// <summary>
        /// Duration of first fragment used to make a comparison, in timescale.
        /// </summary>
        public readonly string? FragmentOneDuration;
        /// <summary>
        /// Timestamp of first fragment used to make a comparison, in timescale.
        /// </summary>
        public readonly string? FragmentOneTimestamp;
        /// <summary>
        /// Duration of second fragment used to make a comparison, in timescale.
        /// </summary>
        public readonly string? FragmentTwoDuration;
        /// <summary>
        /// Timestamp of second fragment used to make a comparison, in timescale.
        /// </summary>
        public readonly string? FragmentTwoTimestamp;
        /// <summary>
        /// The larger timestamp of the two fragments compared.
        /// </summary>
        public readonly string? MaxTime;
        /// <summary>
        /// The media type of the larger timestamp of two fragments compared.
        /// </summary>
        public readonly string? MaxTimeMediaType;
        /// <summary>
        /// Fragment timestamp in timescale.
        /// </summary>
        public readonly string? MediaTimestamp;
        /// <summary>
        /// Type of the track.
        /// </summary>
        public readonly string? MediaType;
        /// <summary>
        /// The smaller timestamp of the two fragments compared.
        /// </summary>
        public readonly string? MinTime;
        /// <summary>
        /// The media type of the smaller timestamp of two fragments compared.
        /// </summary>
        public readonly string? MinTimeMediaType;
        /// <summary>
        /// Previous fragment duration in timescale.
        /// </summary>
        public readonly string? PreviousFragmentDuration;
        /// <summary>
        /// Previous fragment timestamp in timescale.
        /// </summary>
        public readonly string? PreviousFragmentTimestamp;
        /// <summary>
        /// Truncated IP of the encoder.
        /// </summary>
        public readonly string? RemoteIp;
        /// <summary>
        /// Port of the encoder.
        /// </summary>
        public readonly string? RemotePort;
        /// <summary>
        /// Width x Height for video, null otherwise.
        /// </summary>
        public readonly string? Resolution;
        /// <summary>
        /// Result code.
        /// </summary>
        public readonly string? ResultCode;
        /// <summary>
        /// Result message.
        /// </summary>
        public readonly string? ResultMessage;
        /// <summary>
        /// Stream ID in the format "trackName_bitrate"
        /// </summary>
        public readonly string? StreamId;
        /// <summary>
        /// Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL.
        /// </summary>
        public readonly string? StreamName;
        /// <summary>
        /// Timescale in which timestamps are expressed.
        /// </summary>
        public readonly string? Timescale;
        /// <summary>
        /// Timescale of the fragment with the larger timestamp.
        /// </summary>
        public readonly string? TimescaleOfMaxTime;
        /// <summary>
        /// Timescale of the fragment with the smaller timestamp.
        /// </summary>
        public readonly string? TimescaleOfMinTime;
        /// <summary>
        /// Track index.
        /// </summary>
        public readonly int? TrackId;
        /// <summary>
        /// Name of the track. 
        /// </summary>
        public readonly string? TrackName;

        [OutputConstructor]
        private LiveEventStreamEventDataResponse(
            double? bitrate,

            string? currentFragmentTimestamp,

            double? discontinuityGap,

            string? duration,

            string? fragmentDropReason,

            string? fragmentOneDuration,

            string? fragmentOneTimestamp,

            string? fragmentTwoDuration,

            string? fragmentTwoTimestamp,

            string? maxTime,

            string? maxTimeMediaType,

            string? mediaTimestamp,

            string? mediaType,

            string? minTime,

            string? minTimeMediaType,

            string? previousFragmentDuration,

            string? previousFragmentTimestamp,

            string? remoteIp,

            string? remotePort,

            string? resolution,

            string? resultCode,

            string? resultMessage,

            string? streamId,

            string? streamName,

            string? timescale,

            string? timescaleOfMaxTime,

            string? timescaleOfMinTime,

            int? trackId,

            string? trackName)
        {
            Bitrate = bitrate;
            CurrentFragmentTimestamp = currentFragmentTimestamp;
            DiscontinuityGap = discontinuityGap;
            Duration = duration;
            FragmentDropReason = fragmentDropReason;
            FragmentOneDuration = fragmentOneDuration;
            FragmentOneTimestamp = fragmentOneTimestamp;
            FragmentTwoDuration = fragmentTwoDuration;
            FragmentTwoTimestamp = fragmentTwoTimestamp;
            MaxTime = maxTime;
            MaxTimeMediaType = maxTimeMediaType;
            MediaTimestamp = mediaTimestamp;
            MediaType = mediaType;
            MinTime = minTime;
            MinTimeMediaType = minTimeMediaType;
            PreviousFragmentDuration = previousFragmentDuration;
            PreviousFragmentTimestamp = previousFragmentTimestamp;
            RemoteIp = remoteIp;
            RemotePort = remotePort;
            Resolution = resolution;
            ResultCode = resultCode;
            ResultMessage = resultMessage;
            StreamId = streamId;
            StreamName = streamName;
            Timescale = timescale;
            TimescaleOfMaxTime = timescaleOfMaxTime;
            TimescaleOfMinTime = timescaleOfMinTime;
            TrackId = trackId;
            TrackName = trackName;
        }
    }
}
