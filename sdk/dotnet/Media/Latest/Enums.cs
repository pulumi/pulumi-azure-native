// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Media.Latest
{
    /// <summary>
    /// The type of key used to encrypt the Account Key.
    /// </summary>
    [EnumType]
    public readonly struct AccountEncryptionKeyType : IEquatable<AccountEncryptionKeyType>
    {
        private readonly string _value;

        private AccountEncryptionKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Account Key is encrypted with a System Key.
        /// </summary>
        public static AccountEncryptionKeyType SystemKey { get; } = new AccountEncryptionKeyType("SystemKey");
        /// <summary>
        /// The Account Key is encrypted with a Customer Key.
        /// </summary>
        public static AccountEncryptionKeyType CustomerKey { get; } = new AccountEncryptionKeyType("CustomerKey");

        public static bool operator ==(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => left.Equals(right);
        public static bool operator !=(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => !left.Equals(right);

        public static explicit operator string(AccountEncryptionKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccountEncryptionKeyType other && Equals(other);
        public bool Equals(AccountEncryptionKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
    /// </summary>
    [EnumType]
    public readonly struct AnalysisResolution : IEquatable<AnalysisResolution>
    {
        private readonly string _value;

        private AnalysisResolution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResolution SourceResolution { get; } = new AnalysisResolution("SourceResolution");
        public static AnalysisResolution StandardDefinition { get; } = new AnalysisResolution("StandardDefinition");

        public static bool operator ==(AnalysisResolution left, AnalysisResolution right) => left.Equals(right);
        public static bool operator !=(AnalysisResolution left, AnalysisResolution right) => !left.Equals(right);

        public static explicit operator string(AnalysisResolution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResolution other && Equals(other);
        public bool Equals(AnalysisResolution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The permissions to set on the SAS URL.
    /// </summary>
    [EnumType]
    public readonly struct AssetContainerPermission : IEquatable<AssetContainerPermission>
    {
        private readonly string _value;

        private AssetContainerPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The SAS URL will allow read access to the container.
        /// </summary>
        public static AssetContainerPermission Read { get; } = new AssetContainerPermission("Read");
        /// <summary>
        /// The SAS URL will allow read and write access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWrite { get; } = new AssetContainerPermission("ReadWrite");
        /// <summary>
        /// The SAS URL will allow read, write and delete access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWriteDelete { get; } = new AssetContainerPermission("ReadWriteDelete");

        public static bool operator ==(AssetContainerPermission left, AssetContainerPermission right) => left.Equals(right);
        public static bool operator !=(AssetContainerPermission left, AssetContainerPermission right) => !left.Equals(right);

        public static explicit operator string(AssetContainerPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetContainerPermission other && Equals(other);
        public bool Equals(AssetContainerPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
    /// </summary>
    [EnumType]
    public readonly struct AudioAnalysisMode : IEquatable<AudioAnalysisMode>
    {
        private readonly string _value;

        private AudioAnalysisMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization.
        /// </summary>
        public static AudioAnalysisMode Standard { get; } = new AudioAnalysisMode("Standard");
        /// <summary>
        /// This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode.
        /// </summary>
        public static AudioAnalysisMode Basic { get; } = new AudioAnalysisMode("Basic");

        public static bool operator ==(AudioAnalysisMode left, AudioAnalysisMode right) => left.Equals(right);
        public static bool operator !=(AudioAnalysisMode left, AudioAnalysisMode right) => !left.Equals(right);

        public static explicit operator string(AudioAnalysisMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AudioAnalysisMode other && Equals(other);
        public bool Equals(AudioAnalysisMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rental and lease key type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyFairPlayRentalAndLeaseKeyType : IEquatable<ContentKeyPolicyFairPlayRentalAndLeaseKeyType>
    {
        private readonly string _value;

        private ContentKeyPolicyFairPlayRentalAndLeaseKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Unknown { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Unknown");
        /// <summary>
        /// Key duration is not specified.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Undefined { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Undefined");
        /// <summary>
        /// Dual expiry for offline rental.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType DualExpiry { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("DualExpiry");
        /// <summary>
        /// Content key can be persisted with an unlimited duration
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentUnlimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentUnlimited");
        /// <summary>
        /// Content key can be persisted and the valid duration is limited by the Rental Duration value
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentLimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentLimited");

        public static bool operator ==(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyFairPlayRentalAndLeaseKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyFairPlayRentalAndLeaseKeyType other && Equals(other);
        public bool Equals(ContentKeyPolicyFairPlayRentalAndLeaseKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PlayReady content type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyContentType : IEquatable<ContentKeyPolicyPlayReadyContentType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unknown { get; } = new ContentKeyPolicyPlayReadyContentType("Unknown");
        /// <summary>
        /// Unspecified content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unspecified { get; } = new ContentKeyPolicyPlayReadyContentType("Unspecified");
        /// <summary>
        /// Ultraviolet download content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletDownload { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletDownload");
        /// <summary>
        /// Ultraviolet streaming content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletStreaming { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletStreaming");

        public static bool operator ==(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyContentType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyLicenseType : IEquatable<ContentKeyPolicyPlayReadyLicenseType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Unknown { get; } = new ContentKeyPolicyPlayReadyLicenseType("Unknown");
        /// <summary>
        /// Non persistent license.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType NonPersistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("NonPersistent");
        /// <summary>
        /// Persistent license. Allows offline playback.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Persistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("Persistent");

        public static bool operator ==(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyLicenseType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures Unknown output handling settings of the license.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyUnknownOutputPassingOption : IEquatable<ContentKeyPolicyPlayReadyUnknownOutputPassingOption>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyUnknownOutputPassingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Unknown { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Unknown");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is not allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption NotAllowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("NotAllowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Allowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Allowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowedWithVideoConstriction { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("AllowedWithVideoConstriction");

        public static bool operator ==(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyUnknownOutputPassingOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyUnknownOutputPassingOption other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyUnknownOutputPassingOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of token.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyRestrictionTokenType : IEquatable<ContentKeyPolicyRestrictionTokenType>
    {
        private readonly string _value;

        private ContentKeyPolicyRestrictionTokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Unknown { get; } = new ContentKeyPolicyRestrictionTokenType("Unknown");
        /// <summary>
        /// Simple Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Swt { get; } = new ContentKeyPolicyRestrictionTokenType("Swt");
        /// <summary>
        /// JSON Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Jwt { get; } = new ContentKeyPolicyRestrictionTokenType("Jwt");

        public static bool operator ==(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyRestrictionTokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyRestrictionTokenType other && Equals(other);
        public bool Equals(ContentKeyPolicyRestrictionTokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deinterlacing mode. Defaults to AutoPixelAdaptive.
    /// </summary>
    [EnumType]
    public readonly struct DeinterlaceMode : IEquatable<DeinterlaceMode>
    {
        private readonly string _value;

        private DeinterlaceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Disables de-interlacing of the source video.
        /// </summary>
        public static DeinterlaceMode Off { get; } = new DeinterlaceMode("Off");
        /// <summary>
        /// Apply automatic pixel adaptive de-interlacing on each frame in the input video.
        /// </summary>
        public static DeinterlaceMode AutoPixelAdaptive { get; } = new DeinterlaceMode("AutoPixelAdaptive");

        public static bool operator ==(DeinterlaceMode left, DeinterlaceMode right) => left.Equals(right);
        public static bool operator !=(DeinterlaceMode left, DeinterlaceMode right) => !left.Equals(right);

        public static explicit operator string(DeinterlaceMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeinterlaceMode other && Equals(other);
        public bool Equals(DeinterlaceMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The field parity for de-interlacing, defaults to Auto.
    /// </summary>
    [EnumType]
    public readonly struct DeinterlaceParity : IEquatable<DeinterlaceParity>
    {
        private readonly string _value;

        private DeinterlaceParity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatically detect the order of fields
        /// </summary>
        public static DeinterlaceParity Auto { get; } = new DeinterlaceParity("Auto");
        /// <summary>
        /// Apply top field first processing of input video.
        /// </summary>
        public static DeinterlaceParity TopFieldFirst { get; } = new DeinterlaceParity("TopFieldFirst");
        /// <summary>
        /// Apply bottom field first processing of input video.
        /// </summary>
        public static DeinterlaceParity BottomFieldFirst { get; } = new DeinterlaceParity("BottomFieldFirst");

        public static bool operator ==(DeinterlaceParity left, DeinterlaceParity right) => left.Equals(right);
        public static bool operator !=(DeinterlaceParity left, DeinterlaceParity right) => !left.Equals(right);

        public static explicit operator string(DeinterlaceParity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeinterlaceParity other && Equals(other);
        public bool Equals(DeinterlaceParity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The built-in preset to be used for encoding videos.
    /// </summary>
    [EnumType]
    public readonly struct EncoderNamedPreset : IEquatable<EncoderNamedPreset>
    {
        private readonly string _value;

        private EncoderNamedPreset(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrateSD { get; } = new EncoderNamedPreset("H264SingleBitrateSD");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrate720p { get; } = new EncoderNamedPreset("H264SingleBitrate720p");
        /// <summary>
        /// Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
        /// </summary>
        public static EncoderNamedPreset H264SingleBitrate1080p { get; } = new EncoderNamedPreset("H264SingleBitrate1080p");
        /// <summary>
        /// Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best.
        /// </summary>
        public static EncoderNamedPreset AdaptiveStreaming { get; } = new EncoderNamedPreset("AdaptiveStreaming");
        /// <summary>
        /// Produces a single MP4 file containing only stereo audio encoded at 192 kbps.
        /// </summary>
        public static EncoderNamedPreset AACGoodQualityAudio { get; } = new EncoderNamedPreset("AACGoodQualityAudio");
        /// <summary>
        /// Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static EncoderNamedPreset ContentAwareEncodingExperimental { get; } = new EncoderNamedPreset("ContentAwareEncodingExperimental");
        /// <summary>
        /// Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved.
        /// </summary>
        public static EncoderNamedPreset ContentAwareEncoding { get; } = new EncoderNamedPreset("ContentAwareEncoding");
        /// <summary>
        /// Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed.
        /// </summary>
        public static EncoderNamedPreset CopyAllBitrateNonInterleaved { get; } = new EncoderNamedPreset("CopyAllBitrateNonInterleaved");
        /// <summary>
        /// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrate1080p { get; } = new EncoderNamedPreset("H264MultipleBitrate1080p");
        /// <summary>
        /// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrate720p { get; } = new EncoderNamedPreset("H264MultipleBitrate720p");
        /// <summary>
        /// Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p.
        /// </summary>
        public static EncoderNamedPreset H264MultipleBitrateSD { get; } = new EncoderNamedPreset("H264MultipleBitrateSD");

        public static bool operator ==(EncoderNamedPreset left, EncoderNamedPreset right) => left.Equals(right);
        public static bool operator !=(EncoderNamedPreset left, EncoderNamedPreset right) => !left.Equals(right);

        public static explicit operator string(EncoderNamedPreset value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncoderNamedPreset other && Equals(other);
        public bool Equals(EncoderNamedPreset other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property condition operation.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyCompareOperation : IEquatable<FilterTrackPropertyCompareOperation>
    {
        private readonly string _value;

        private FilterTrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation Equal { get; } = new FilterTrackPropertyCompareOperation("Equal");
        /// <summary>
        /// The not equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation NotEqual { get; } = new FilterTrackPropertyCompareOperation("NotEqual");

        public static bool operator ==(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyCompareOperation other && Equals(other);
        public bool Equals(FilterTrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property type.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyType : IEquatable<FilterTrackPropertyType>
    {
        private readonly string _value;

        private FilterTrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unknown track property type.
        /// </summary>
        public static FilterTrackPropertyType Unknown { get; } = new FilterTrackPropertyType("Unknown");
        /// <summary>
        /// The type.
        /// </summary>
        public static FilterTrackPropertyType Type { get; } = new FilterTrackPropertyType("Type");
        /// <summary>
        /// The name.
        /// </summary>
        public static FilterTrackPropertyType Name { get; } = new FilterTrackPropertyType("Name");
        /// <summary>
        /// The language.
        /// </summary>
        public static FilterTrackPropertyType Language { get; } = new FilterTrackPropertyType("Language");
        /// <summary>
        /// The fourCC.
        /// </summary>
        public static FilterTrackPropertyType FourCC { get; } = new FilterTrackPropertyType("FourCC");
        /// <summary>
        /// The bitrate.
        /// </summary>
        public static FilterTrackPropertyType Bitrate { get; } = new FilterTrackPropertyType("Bitrate");

        public static bool operator ==(FilterTrackPropertyType left, FilterTrackPropertyType right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyType left, FilterTrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyType other && Equals(other);
        public bool Equals(FilterTrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventEncodingType : IEquatable<LiveEventEncodingType>
    {
        private readonly string _value;

        private LiveEventEncodingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A contribution live encoder sends a multiple bitrate stream. The ingested stream passes through the live event without any further processing. It is also called the pass-through mode.
        /// </summary>
        public static LiveEventEncodingType None { get; } = new LiveEventEncodingType("None");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution.
        /// </summary>
        public static LiveEventEncodingType Standard { get; } = new LiveEventEncodingType("Standard");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
        /// </summary>
        public static LiveEventEncodingType Premium1080p { get; } = new LiveEventEncodingType("Premium1080p");

        public static bool operator ==(LiveEventEncodingType left, LiveEventEncodingType right) => left.Equals(right);
        public static bool operator !=(LiveEventEncodingType left, LiveEventEncodingType right) => !left.Equals(right);

        public static explicit operator string(LiveEventEncodingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventEncodingType other && Equals(other);
        public bool Equals(LiveEventEncodingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The input protocol for the live event. This is specified at creation time and cannot be updated.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventInputProtocol : IEquatable<LiveEventInputProtocol>
    {
        private readonly string _value;

        private LiveEventInputProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Smooth Streaming input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol FragmentedMP4 { get; } = new LiveEventInputProtocol("FragmentedMP4");
        /// <summary>
        /// RTMP input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol RTMP { get; } = new LiveEventInputProtocol("RTMP");

        public static bool operator ==(LiveEventInputProtocol left, LiveEventInputProtocol right) => left.Equals(right);
        public static bool operator !=(LiveEventInputProtocol left, LiveEventInputProtocol right) => !left.Equals(right);

        public static explicit operator string(LiveEventInputProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventInputProtocol other && Equals(other);
        public bool Equals(LiveEventInputProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A system-assigned managed identity.
        /// </summary>
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        /// <summary>
        /// No managed identity.
        /// </summary>
        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
    /// </summary>
    [EnumType]
    public readonly struct OnErrorType : IEquatable<OnErrorType>
    {
        private readonly string _value;

        private OnErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped.
        /// </summary>
        public static OnErrorType StopProcessingJob { get; } = new OnErrorType("StopProcessingJob");
        /// <summary>
        /// Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
        /// </summary>
        public static OnErrorType ContinueJob { get; } = new OnErrorType("ContinueJob");

        public static bool operator ==(OnErrorType left, OnErrorType right) => left.Equals(right);
        public static bool operator !=(OnErrorType left, OnErrorType right) => !left.Equals(right);

        public static explicit operator string(OnErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OnErrorType other && Equals(other);
        public bool Equals(OnErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
    /// </summary>
    [EnumType]
    public readonly struct Priority : IEquatable<Priority>
    {
        private readonly string _value;

        private Priority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs.
        /// </summary>
        public static Priority Low { get; } = new Priority("Low");
        /// <summary>
        /// Used for TransformOutputs that can be generated at Normal priority.
        /// </summary>
        public static Priority Normal { get; } = new Priority("Normal");
        /// <summary>
        /// Used for TransformOutputs that should take precedence over others.
        /// </summary>
        public static Priority High { get; } = new Priority("High");

        public static bool operator ==(Priority left, Priority right) => left.Equals(right);
        public static bool operator !=(Priority left, Priority right) => !left.Equals(right);

        public static explicit operator string(Priority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Priority other && Equals(other);
        public bool Equals(Priority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
    /// </summary>
    [EnumType]
    public readonly struct Rotation : IEquatable<Rotation>
    {
        private readonly string _value;

        private Rotation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatically detect and rotate as needed.
        /// </summary>
        public static Rotation Auto { get; } = new Rotation("Auto");
        /// <summary>
        /// Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact.
        /// </summary>
        public static Rotation None { get; } = new Rotation("None");
        /// <summary>
        /// Do not rotate the video but remove any metadata about the rotation.
        /// </summary>
        public static Rotation Rotate0 { get; } = new Rotation("Rotate0");
        /// <summary>
        /// Rotate 90 degrees clockwise.
        /// </summary>
        public static Rotation Rotate90 { get; } = new Rotation("Rotate90");
        /// <summary>
        /// Rotate 180 degrees clockwise.
        /// </summary>
        public static Rotation Rotate180 { get; } = new Rotation("Rotate180");
        /// <summary>
        /// Rotate 270 degrees clockwise.
        /// </summary>
        public static Rotation Rotate270 { get; } = new Rotation("Rotate270");

        public static bool operator ==(Rotation left, Rotation right) => left.Equals(right);
        public static bool operator !=(Rotation left, Rotation right) => !left.Equals(right);

        public static explicit operator string(Rotation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Rotation other && Equals(other);
        public bool Equals(Rotation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the storage account.
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The primary storage account for the Media Services account.
        /// </summary>
        public static StorageAccountType Primary { get; } = new StorageAccountType("Primary");
        /// <summary>
        /// A secondary storage account for the Media Services account.
        /// </summary>
        public static StorageAccountType Secondary { get; } = new StorageAccountType("Secondary");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageAuthentication : IEquatable<StorageAuthentication>
    {
        private readonly string _value;

        private StorageAuthentication(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// System authentication.
        /// </summary>
        public static StorageAuthentication System { get; } = new StorageAuthentication("System");
        /// <summary>
        /// Managed Identity authentication.
        /// </summary>
        public static StorageAuthentication ManagedIdentity { get; } = new StorageAuthentication("ManagedIdentity");

        public static bool operator ==(StorageAuthentication left, StorageAuthentication right) => left.Equals(right);
        public static bool operator !=(StorageAuthentication left, StorageAuthentication right) => !left.Equals(right);

        public static explicit operator string(StorageAuthentication value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAuthentication other && Equals(other);
        public bool Equals(StorageAuthentication other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StreamOptionsFlag : IEquatable<StreamOptionsFlag>
    {
        private readonly string _value;

        private StreamOptionsFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Live streaming with no special latency optimizations.
        /// </summary>
        public static StreamOptionsFlag Default { get; } = new StreamOptionsFlag("Default");
        /// <summary>
        /// The live event provides lower end to end latency by reducing its internal buffers. This could result in more client buffering during playback if network bandwidth is low.
        /// </summary>
        public static StreamOptionsFlag LowLatency { get; } = new StreamOptionsFlag("LowLatency");

        public static bool operator ==(StreamOptionsFlag left, StreamOptionsFlag right) => left.Equals(right);
        public static bool operator !=(StreamOptionsFlag left, StreamOptionsFlag right) => !left.Equals(right);

        public static explicit operator string(StreamOptionsFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamOptionsFlag other && Equals(other);
        public bool Equals(StreamOptionsFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
    /// </summary>
    [EnumType]
    public readonly struct StretchMode : IEquatable<StretchMode>
    {
        private readonly string _value;

        private StretchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video.
        /// </summary>
        public static StretchMode None { get; } = new StretchMode("None");
        /// <summary>
        /// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
        /// </summary>
        public static StretchMode AutoSize { get; } = new StretchMode("AutoSize");
        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
        /// </summary>
        public static StretchMode AutoFit { get; } = new StretchMode("AutoFit");

        public static bool operator ==(StretchMode left, StretchMode right) => left.Equals(right);
        public static bool operator !=(StretchMode left, StretchMode right) => !left.Equals(right);

        public static explicit operator string(StretchMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StretchMode other && Equals(other);
        public bool Equals(StretchMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property condition operation
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyCompareOperation : IEquatable<TrackPropertyCompareOperation>
    {
        private readonly string _value;

        private TrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property compare operation
        /// </summary>
        public static TrackPropertyCompareOperation Unknown { get; } = new TrackPropertyCompareOperation("Unknown");
        /// <summary>
        /// Equal operation
        /// </summary>
        public static TrackPropertyCompareOperation Equal { get; } = new TrackPropertyCompareOperation("Equal");

        public static bool operator ==(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyCompareOperation other && Equals(other);
        public bool Equals(TrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property type
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyType : IEquatable<TrackPropertyType>
    {
        private readonly string _value;

        private TrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property
        /// </summary>
        public static TrackPropertyType Unknown { get; } = new TrackPropertyType("Unknown");
        /// <summary>
        /// Track FourCC
        /// </summary>
        public static TrackPropertyType FourCC { get; } = new TrackPropertyType("FourCC");

        public static bool operator ==(TrackPropertyType left, TrackPropertyType right) => left.Equals(right);
        public static bool operator !=(TrackPropertyType left, TrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyType other && Equals(other);
        public bool Equals(TrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Video Sync Mode
    /// </summary>
    [EnumType]
    public readonly struct VideoSyncMode : IEquatable<VideoSyncMode>
    {
        private readonly string _value;

        private VideoSyncMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr.
        /// </summary>
        public static VideoSyncMode Auto { get; } = new VideoSyncMode("Auto");
        /// <summary>
        /// The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior
        /// </summary>
        public static VideoSyncMode Passthrough { get; } = new VideoSyncMode("Passthrough");
        /// <summary>
        /// Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value
        /// </summary>
        public static VideoSyncMode Cfr { get; } = new VideoSyncMode("Cfr");
        /// <summary>
        /// Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input
        /// </summary>
        public static VideoSyncMode Vfr { get; } = new VideoSyncMode("Vfr");

        public static bool operator ==(VideoSyncMode left, VideoSyncMode right) => left.Equals(right);
        public static bool operator !=(VideoSyncMode left, VideoSyncMode right) => !left.Equals(right);

        public static explicit operator string(VideoSyncMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VideoSyncMode other && Equals(other);
        public bool Equals(VideoSyncMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
