// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Media.Latest
{
    /// <summary>
    /// The live event.
    /// </summary>
    public partial class LiveEvent : Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time for the live event
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Live event cross site access policies.
        /// </summary>
        [Output("crossSiteAccessPolicies")]
        public Output<Outputs.CrossSiteAccessPoliciesResponse?> CrossSiteAccessPolicies { get; private set; } = null!;

        /// <summary>
        /// A description for the live event.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used.
        /// </summary>
        [Output("encoding")]
        public Output<Outputs.LiveEventEncodingResponse?> Encoding { get; private set; } = null!;

        /// <summary>
        /// When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
        /// </summary>
        [Output("hostnamePrefix")]
        public Output<string?> HostnamePrefix { get; private set; } = null!;

        /// <summary>
        /// Live event input settings. It defines how the live event receives input from a contribution encoder.
        /// </summary>
        [Output("input")]
        public Output<Outputs.LiveEventInputResponse> Input { get; private set; } = null!;

        /// <summary>
        /// The last modified time of the live event.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output.
        /// </summary>
        [Output("preview")]
        public Output<Outputs.LiveEventPreviewResponse?> Preview { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the live event.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
        /// </summary>
        [Output("resourceState")]
        public Output<string> ResourceState { get; private set; } = null!;

        /// <summary>
        /// The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        [Output("streamOptions")]
        public Output<ImmutableArray<string>> StreamOptions { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.
        /// </summary>
        [Output("transcriptions")]
        public Output<ImmutableArray<Outputs.LiveEventTranscriptionResponse>> Transcriptions { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state
        /// </summary>
        [Output("useStaticHostname")]
        public Output<bool?> UseStaticHostname { get; private set; } = null!;


        /// <summary>
        /// Create a LiveEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LiveEvent(string name, LiveEventArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:media/latest:LiveEvent", name, args ?? new LiveEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LiveEvent(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:media/latest:LiveEvent", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:media/v20180330preview:LiveEvent"},
                    new Pulumi.Alias { Type = "azure-nextgen:media/v20180601preview:LiveEvent"},
                    new Pulumi.Alias { Type = "azure-nextgen:media/v20180701:LiveEvent"},
                    new Pulumi.Alias { Type = "azure-nextgen:media/v20190501preview:LiveEvent"},
                    new Pulumi.Alias { Type = "azure-nextgen:media/v20200501:LiveEvent"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LiveEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LiveEvent Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new LiveEvent(name, id, options);
        }
    }

    public sealed class LiveEventArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The flag indicates if the resource should be automatically started on creation.
        /// </summary>
        [Input("autoStart")]
        public Input<bool>? AutoStart { get; set; }

        /// <summary>
        /// Live event cross site access policies.
        /// </summary>
        [Input("crossSiteAccessPolicies")]
        public Input<Inputs.CrossSiteAccessPoliciesArgs>? CrossSiteAccessPolicies { get; set; }

        /// <summary>
        /// A description for the live event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used.
        /// </summary>
        [Input("encoding")]
        public Input<Inputs.LiveEventEncodingArgs>? Encoding { get; set; }

        /// <summary>
        /// When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
        /// </summary>
        [Input("hostnamePrefix")]
        public Input<string>? HostnamePrefix { get; set; }

        /// <summary>
        /// Live event input settings. It defines how the live event receives input from a contribution encoder.
        /// </summary>
        [Input("input", required: true)]
        public Input<Inputs.LiveEventInputArgs> Input { get; set; } = null!;

        /// <summary>
        /// The name of the live event, maximum length is 32.
        /// </summary>
        [Input("liveEventName", required: true)]
        public Input<string> LiveEventName { get; set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output.
        /// </summary>
        [Input("preview")]
        public Input<Inputs.LiveEventPreviewArgs>? Preview { get; set; }

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("streamOptions")]
        private InputList<string>? _streamOptions;

        /// <summary>
        /// The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        public InputList<string> StreamOptions
        {
            get => _streamOptions ?? (_streamOptions = new InputList<string>());
            set => _streamOptions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transcriptions")]
        private InputList<Inputs.LiveEventTranscriptionArgs>? _transcriptions;

        /// <summary>
        /// Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature.
        /// </summary>
        public InputList<Inputs.LiveEventTranscriptionArgs> Transcriptions
        {
            get => _transcriptions ?? (_transcriptions = new InputList<Inputs.LiveEventTranscriptionArgs>());
            set => _transcriptions = value;
        }

        /// <summary>
        /// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state
        /// </summary>
        [Input("useStaticHostname")]
        public Input<bool>? UseStaticHostname { get; set; }

        public LiveEventArgs()
        {
        }
    }
}
