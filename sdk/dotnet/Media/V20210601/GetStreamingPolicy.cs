// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Media.V20210601
{
    public static class GetStreamingPolicy
    {
        /// <summary>
        /// Get the details of a Streaming Policy in the Media Services account
        /// </summary>
        public static Task<GetStreamingPolicyResult> InvokeAsync(GetStreamingPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamingPolicyResult>("azure-native:media/v20210601:getStreamingPolicy", args ?? new GetStreamingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of a Streaming Policy in the Media Services account
        /// </summary>
        public static Output<GetStreamingPolicyResult> Invoke(GetStreamingPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamingPolicyResult>("azure-native:media/v20210601:getStreamingPolicy", args ?? new GetStreamingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamingPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Streaming Policy name.
        /// </summary>
        [Input("streamingPolicyName", required: true)]
        public string StreamingPolicyName { get; set; } = null!;

        public GetStreamingPolicyArgs()
        {
        }
        public static new GetStreamingPolicyArgs Empty => new GetStreamingPolicyArgs();
    }

    public sealed class GetStreamingPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Streaming Policy name.
        /// </summary>
        [Input("streamingPolicyName", required: true)]
        public Input<string> StreamingPolicyName { get; set; } = null!;

        public GetStreamingPolicyInvokeArgs()
        {
        }
        public static new GetStreamingPolicyInvokeArgs Empty => new GetStreamingPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamingPolicyResult
    {
        /// <summary>
        /// Configuration of CommonEncryptionCbcs
        /// </summary>
        public readonly Outputs.CommonEncryptionCbcsResponse? CommonEncryptionCbcs;
        /// <summary>
        /// Configuration of CommonEncryptionCenc
        /// </summary>
        public readonly Outputs.CommonEncryptionCencResponse? CommonEncryptionCenc;
        /// <summary>
        /// Creation time of Streaming Policy
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Default ContentKey used by current Streaming Policy
        /// </summary>
        public readonly string? DefaultContentKeyPolicyName;
        /// <summary>
        /// Configuration of EnvelopeEncryption
        /// </summary>
        public readonly Outputs.EnvelopeEncryptionResponse? EnvelopeEncryption;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configurations of NoEncryption
        /// </summary>
        public readonly Outputs.NoEncryptionResponse? NoEncryption;
        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetStreamingPolicyResult(
            Outputs.CommonEncryptionCbcsResponse? commonEncryptionCbcs,

            Outputs.CommonEncryptionCencResponse? commonEncryptionCenc,

            string created,

            string? defaultContentKeyPolicyName,

            Outputs.EnvelopeEncryptionResponse? envelopeEncryption,

            string id,

            string name,

            Outputs.NoEncryptionResponse? noEncryption,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            CommonEncryptionCbcs = commonEncryptionCbcs;
            CommonEncryptionCenc = commonEncryptionCenc;
            Created = created;
            DefaultContentKeyPolicyName = defaultContentKeyPolicyName;
            EnvelopeEncryption = envelopeEncryption;
            Id = id;
            Name = name;
            NoEncryption = noEncryption;
            SystemData = systemData;
            Type = type;
        }
    }
}
