// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Media.V20210601
{
    /// <summary>
    /// The type of key used to encrypt the Account Key.
    /// </summary>
    [EnumType]
    public readonly struct AccountEncryptionKeyType : IEquatable<AccountEncryptionKeyType>
    {
        private readonly string _value;

        private AccountEncryptionKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The Account Key is encrypted with a System Key.
        /// </summary>
        public static AccountEncryptionKeyType SystemKey { get; } = new AccountEncryptionKeyType("SystemKey");
        /// <summary>
        /// The Account Key is encrypted with a Customer Key.
        /// </summary>
        public static AccountEncryptionKeyType CustomerKey { get; } = new AccountEncryptionKeyType("CustomerKey");

        public static bool operator ==(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => left.Equals(right);
        public static bool operator !=(AccountEncryptionKeyType left, AccountEncryptionKeyType right) => !left.Equals(right);

        public static explicit operator string(AccountEncryptionKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccountEncryptionKeyType other && Equals(other);
        public bool Equals(AccountEncryptionKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The permissions to set on the SAS URL.
    /// </summary>
    [EnumType]
    public readonly struct AssetContainerPermission : IEquatable<AssetContainerPermission>
    {
        private readonly string _value;

        private AssetContainerPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The SAS URL will allow read access to the container.
        /// </summary>
        public static AssetContainerPermission Read { get; } = new AssetContainerPermission("Read");
        /// <summary>
        /// The SAS URL will allow read and write access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWrite { get; } = new AssetContainerPermission("ReadWrite");
        /// <summary>
        /// The SAS URL will allow read, write and delete access to the container.
        /// </summary>
        public static AssetContainerPermission ReadWriteDelete { get; } = new AssetContainerPermission("ReadWriteDelete");

        public static bool operator ==(AssetContainerPermission left, AssetContainerPermission right) => left.Equals(right);
        public static bool operator !=(AssetContainerPermission left, AssetContainerPermission right) => !left.Equals(right);

        public static explicit operator string(AssetContainerPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetContainerPermission other && Equals(other);
        public bool Equals(AssetContainerPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rental and lease key type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyFairPlayRentalAndLeaseKeyType : IEquatable<ContentKeyPolicyFairPlayRentalAndLeaseKeyType>
    {
        private readonly string _value;

        private ContentKeyPolicyFairPlayRentalAndLeaseKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Unknown { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Unknown");
        /// <summary>
        /// Key duration is not specified.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType Undefined { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("Undefined");
        /// <summary>
        /// Dual expiry for offline rental.
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType DualExpiry { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("DualExpiry");
        /// <summary>
        /// Content key can be persisted with an unlimited duration
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentUnlimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentUnlimited");
        /// <summary>
        /// Content key can be persisted and the valid duration is limited by the Rental Duration value
        /// </summary>
        public static ContentKeyPolicyFairPlayRentalAndLeaseKeyType PersistentLimited { get; } = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType("PersistentLimited");

        public static bool operator ==(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyFairPlayRentalAndLeaseKeyType left, ContentKeyPolicyFairPlayRentalAndLeaseKeyType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyFairPlayRentalAndLeaseKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyFairPlayRentalAndLeaseKeyType other && Equals(other);
        public bool Equals(ContentKeyPolicyFairPlayRentalAndLeaseKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PlayReady content type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyContentType : IEquatable<ContentKeyPolicyPlayReadyContentType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unknown { get; } = new ContentKeyPolicyPlayReadyContentType("Unknown");
        /// <summary>
        /// Unspecified content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType Unspecified { get; } = new ContentKeyPolicyPlayReadyContentType("Unspecified");
        /// <summary>
        /// Ultraviolet download content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletDownload { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletDownload");
        /// <summary>
        /// Ultraviolet streaming content type.
        /// </summary>
        public static ContentKeyPolicyPlayReadyContentType UltraVioletStreaming { get; } = new ContentKeyPolicyPlayReadyContentType("UltraVioletStreaming");

        public static bool operator ==(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyContentType left, ContentKeyPolicyPlayReadyContentType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyContentType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyLicenseType : IEquatable<ContentKeyPolicyPlayReadyLicenseType>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Unknown { get; } = new ContentKeyPolicyPlayReadyLicenseType("Unknown");
        /// <summary>
        /// Non persistent license.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType NonPersistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("NonPersistent");
        /// <summary>
        /// Persistent license. Allows offline playback.
        /// </summary>
        public static ContentKeyPolicyPlayReadyLicenseType Persistent { get; } = new ContentKeyPolicyPlayReadyLicenseType("Persistent");

        public static bool operator ==(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyLicenseType left, ContentKeyPolicyPlayReadyLicenseType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyLicenseType other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures Unknown output handling settings of the license.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyPlayReadyUnknownOutputPassingOption : IEquatable<ContentKeyPolicyPlayReadyUnknownOutputPassingOption>
    {
        private readonly string _value;

        private ContentKeyPolicyPlayReadyUnknownOutputPassingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Unknown { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Unknown");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is not allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption NotAllowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("NotAllowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption Allowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("Allowed");
        /// <summary>
        /// Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
        /// </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowedWithVideoConstriction { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingOption("AllowedWithVideoConstriction");

        public static bool operator ==(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyPlayReadyUnknownOutputPassingOption left, ContentKeyPolicyPlayReadyUnknownOutputPassingOption right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyPlayReadyUnknownOutputPassingOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyPlayReadyUnknownOutputPassingOption other && Equals(other);
        public bool Equals(ContentKeyPolicyPlayReadyUnknownOutputPassingOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of token.
    /// </summary>
    [EnumType]
    public readonly struct ContentKeyPolicyRestrictionTokenType : IEquatable<ContentKeyPolicyRestrictionTokenType>
    {
        private readonly string _value;

        private ContentKeyPolicyRestrictionTokenType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Unknown { get; } = new ContentKeyPolicyRestrictionTokenType("Unknown");
        /// <summary>
        /// Simple Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Swt { get; } = new ContentKeyPolicyRestrictionTokenType("Swt");
        /// <summary>
        /// JSON Web Token.
        /// </summary>
        public static ContentKeyPolicyRestrictionTokenType Jwt { get; } = new ContentKeyPolicyRestrictionTokenType("Jwt");

        public static bool operator ==(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => left.Equals(right);
        public static bool operator !=(ContentKeyPolicyRestrictionTokenType left, ContentKeyPolicyRestrictionTokenType right) => !left.Equals(right);

        public static explicit operator string(ContentKeyPolicyRestrictionTokenType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContentKeyPolicyRestrictionTokenType other && Equals(other);
        public bool Equals(ContentKeyPolicyRestrictionTokenType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The behavior for IP access control in Key Delivery.
    /// </summary>
    [EnumType]
    public readonly struct DefaultAction : IEquatable<DefaultAction>
    {
        private readonly string _value;

        private DefaultAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// All public IP addresses are allowed.
        /// </summary>
        public static DefaultAction Allow { get; } = new DefaultAction("Allow");
        /// <summary>
        /// Public IP addresses are blocked.
        /// </summary>
        public static DefaultAction Deny { get; } = new DefaultAction("Deny");

        public static bool operator ==(DefaultAction left, DefaultAction right) => left.Equals(right);
        public static bool operator !=(DefaultAction left, DefaultAction right) => !left.Equals(right);

        public static explicit operator string(DefaultAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultAction other && Equals(other);
        public bool Equals(DefaultAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property condition operation.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyCompareOperation : IEquatable<FilterTrackPropertyCompareOperation>
    {
        private readonly string _value;

        private FilterTrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation Equal { get; } = new FilterTrackPropertyCompareOperation("Equal");
        /// <summary>
        /// The not equal operation.
        /// </summary>
        public static FilterTrackPropertyCompareOperation NotEqual { get; } = new FilterTrackPropertyCompareOperation("NotEqual");

        public static bool operator ==(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyCompareOperation left, FilterTrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyCompareOperation other && Equals(other);
        public bool Equals(FilterTrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The track property type.
    /// </summary>
    [EnumType]
    public readonly struct FilterTrackPropertyType : IEquatable<FilterTrackPropertyType>
    {
        private readonly string _value;

        private FilterTrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The unknown track property type.
        /// </summary>
        public static FilterTrackPropertyType Unknown { get; } = new FilterTrackPropertyType("Unknown");
        /// <summary>
        /// The type.
        /// </summary>
        public static FilterTrackPropertyType Type { get; } = new FilterTrackPropertyType("Type");
        /// <summary>
        /// The name.
        /// </summary>
        public static FilterTrackPropertyType Name { get; } = new FilterTrackPropertyType("Name");
        /// <summary>
        /// The language.
        /// </summary>
        public static FilterTrackPropertyType Language { get; } = new FilterTrackPropertyType("Language");
        /// <summary>
        /// The fourCC.
        /// </summary>
        public static FilterTrackPropertyType FourCC { get; } = new FilterTrackPropertyType("FourCC");
        /// <summary>
        /// The bitrate.
        /// </summary>
        public static FilterTrackPropertyType Bitrate { get; } = new FilterTrackPropertyType("Bitrate");

        public static bool operator ==(FilterTrackPropertyType left, FilterTrackPropertyType right) => left.Equals(right);
        public static bool operator !=(FilterTrackPropertyType left, FilterTrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(FilterTrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterTrackPropertyType other && Equals(other);
        public bool Equals(FilterTrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventEncodingType : IEquatable<LiveEventEncodingType>
    {
        private readonly string _value;

        private LiveEventEncodingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A contribution live encoder sends a multiple bitrate stream. The ingested stream passes through the live event without any further processing. It is also called the pass-through mode.
        /// </summary>
        public static LiveEventEncodingType None { get; } = new LiveEventEncodingType("None");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution.
        /// </summary>
        public static LiveEventEncodingType Standard { get; } = new LiveEventEncodingType("Standard");
        /// <summary>
        /// A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
        /// </summary>
        public static LiveEventEncodingType Premium1080p { get; } = new LiveEventEncodingType("Premium1080p");
        /// <summary>
        /// Pending update...
        /// </summary>
        public static LiveEventEncodingType PassthroughBasic { get; } = new LiveEventEncodingType("PassthroughBasic");
        /// <summary>
        /// Pending update...
        /// </summary>
        public static LiveEventEncodingType PassthroughStandard { get; } = new LiveEventEncodingType("PassthroughStandard");

        public static bool operator ==(LiveEventEncodingType left, LiveEventEncodingType right) => left.Equals(right);
        public static bool operator !=(LiveEventEncodingType left, LiveEventEncodingType right) => !left.Equals(right);

        public static explicit operator string(LiveEventEncodingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventEncodingType other && Equals(other);
        public bool Equals(LiveEventEncodingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The input protocol for the live event. This is specified at creation time and cannot be updated.
    /// </summary>
    [EnumType]
    public readonly struct LiveEventInputProtocol : IEquatable<LiveEventInputProtocol>
    {
        private readonly string _value;

        private LiveEventInputProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Smooth Streaming input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol FragmentedMP4 { get; } = new LiveEventInputProtocol("FragmentedMP4");
        /// <summary>
        /// RTMP input will be sent by the contribution encoder to the live event.
        /// </summary>
        public static LiveEventInputProtocol RTMP { get; } = new LiveEventInputProtocol("RTMP");

        public static bool operator ==(LiveEventInputProtocol left, LiveEventInputProtocol right) => left.Equals(right);
        public static bool operator !=(LiveEventInputProtocol left, LiveEventInputProtocol right) => !left.Equals(right);

        public static explicit operator string(LiveEventInputProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LiveEventInputProtocol other && Equals(other);
        public bool Equals(LiveEventInputProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public network access is allowed for resources under the Media Services account.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Public network access is enabled.
        /// </summary>
        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        /// <summary>
        /// Public network access is disabled.
        /// </summary>
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the storage account.
    /// </summary>
    [EnumType]
    public readonly struct StorageAccountType : IEquatable<StorageAccountType>
    {
        private readonly string _value;

        private StorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The primary storage account for the Media Services account.
        /// </summary>
        public static StorageAccountType Primary { get; } = new StorageAccountType("Primary");
        /// <summary>
        /// A secondary storage account for the Media Services account.
        /// </summary>
        public static StorageAccountType Secondary { get; } = new StorageAccountType("Secondary");

        public static bool operator ==(StorageAccountType left, StorageAccountType right) => left.Equals(right);
        public static bool operator !=(StorageAccountType left, StorageAccountType right) => !left.Equals(right);

        public static explicit operator string(StorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAccountType other && Equals(other);
        public bool Equals(StorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageAuthentication : IEquatable<StorageAuthentication>
    {
        private readonly string _value;

        private StorageAuthentication(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// System authentication.
        /// </summary>
        public static StorageAuthentication System { get; } = new StorageAuthentication("System");
        /// <summary>
        /// Managed Identity authentication.
        /// </summary>
        public static StorageAuthentication ManagedIdentity { get; } = new StorageAuthentication("ManagedIdentity");

        public static bool operator ==(StorageAuthentication left, StorageAuthentication right) => left.Equals(right);
        public static bool operator !=(StorageAuthentication left, StorageAuthentication right) => !left.Equals(right);

        public static explicit operator string(StorageAuthentication value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageAuthentication other && Equals(other);
        public bool Equals(StorageAuthentication other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StreamOptionsFlag : IEquatable<StreamOptionsFlag>
    {
        private readonly string _value;

        private StreamOptionsFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Live streaming with no special latency optimizations.
        /// </summary>
        public static StreamOptionsFlag Default { get; } = new StreamOptionsFlag("Default");
        /// <summary>
        /// The live event provides lower end to end latency by reducing its internal buffers. This could result in more client buffering during playback if network bandwidth is low.
        /// </summary>
        public static StreamOptionsFlag LowLatency { get; } = new StreamOptionsFlag("LowLatency");

        public static bool operator ==(StreamOptionsFlag left, StreamOptionsFlag right) => left.Equals(right);
        public static bool operator !=(StreamOptionsFlag left, StreamOptionsFlag right) => !left.Equals(right);

        public static explicit operator string(StreamOptionsFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamOptionsFlag other && Equals(other);
        public bool Equals(StreamOptionsFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
    /// </summary>
    [EnumType]
    public readonly struct StretchMode : IEquatable<StretchMode>
    {
        private readonly string _value;

        private StretchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Strictly respects the output resolution specified in the encoding preset without considering the pixel aspect ratio or display aspect ratio of the input video.
        /// </summary>
        public static StretchMode None { get; } = new StretchMode("None");
        /// <summary>
        /// Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9.
        /// </summary>
        public static StretchMode AutoSize { get; } = new StretchMode("AutoSize");
        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
        /// </summary>
        public static StretchMode AutoFit { get; } = new StretchMode("AutoFit");

        public static bool operator ==(StretchMode left, StretchMode right) => left.Equals(right);
        public static bool operator !=(StretchMode left, StretchMode right) => !left.Equals(right);

        public static explicit operator string(StretchMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StretchMode other && Equals(other);
        public bool Equals(StretchMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property condition operation
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyCompareOperation : IEquatable<TrackPropertyCompareOperation>
    {
        private readonly string _value;

        private TrackPropertyCompareOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property compare operation
        /// </summary>
        public static TrackPropertyCompareOperation Unknown { get; } = new TrackPropertyCompareOperation("Unknown");
        /// <summary>
        /// Equal operation
        /// </summary>
        public static TrackPropertyCompareOperation Equal { get; } = new TrackPropertyCompareOperation("Equal");

        public static bool operator ==(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => left.Equals(right);
        public static bool operator !=(TrackPropertyCompareOperation left, TrackPropertyCompareOperation right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyCompareOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyCompareOperation other && Equals(other);
        public bool Equals(TrackPropertyCompareOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Track property type
    /// </summary>
    [EnumType]
    public readonly struct TrackPropertyType : IEquatable<TrackPropertyType>
    {
        private readonly string _value;

        private TrackPropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Unknown track property
        /// </summary>
        public static TrackPropertyType Unknown { get; } = new TrackPropertyType("Unknown");
        /// <summary>
        /// Track FourCC
        /// </summary>
        public static TrackPropertyType FourCC { get; } = new TrackPropertyType("FourCC");

        public static bool operator ==(TrackPropertyType left, TrackPropertyType right) => left.Equals(right);
        public static bool operator !=(TrackPropertyType left, TrackPropertyType right) => !left.Equals(right);

        public static explicit operator string(TrackPropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackPropertyType other && Equals(other);
        public bool Equals(TrackPropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
