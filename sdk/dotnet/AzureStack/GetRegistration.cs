// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.AzureStack
{
    public static class GetRegistration
    {
        public static Task<GetRegistrationResult> InvokeAsync(GetRegistrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistrationResult>("azurerm:azurestack:getRegistration", args ?? new GetRegistrationArgs(), options.WithVersion());
    }


    public sealed class GetRegistrationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Azure Stack registration.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public string ResourceGroup { get; set; } = null!;

        public GetRegistrationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegistrationResult
    {
        /// <summary>
        /// The entity tag used for optimistic concurrency when modifying the resource.
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Registration resource.
        /// </summary>
        public readonly Outputs.RegistrationPropertiesResponseResult Properties;
        /// <summary>
        /// Custom tags for the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of Resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegistrationResult(
            string? etag,

            string location,

            string name,

            Outputs.RegistrationPropertiesResponseResult properties,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Etag = etag;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
