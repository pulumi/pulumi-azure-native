// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.HanaOnAzure
{
    public static class GetProviderInstance
    {
        /// <summary>
        /// Gets properties of a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
        /// Azure REST API version: 2020-02-07-preview.
        /// </summary>
        public static Task<GetProviderInstanceResult> InvokeAsync(GetProviderInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProviderInstanceResult>("azure-native:hanaonazure:getProviderInstance", args ?? new GetProviderInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets properties of a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
        /// Azure REST API version: 2020-02-07-preview.
        /// </summary>
        public static Output<GetProviderInstanceResult> Invoke(GetProviderInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderInstanceResult>("azure-native:hanaonazure:getProviderInstance", args ?? new GetProviderInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the provider instance.
        /// </summary>
        [Input("providerInstanceName", required: true)]
        public string ProviderInstanceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("sapMonitorName", required: true)]
        public string SapMonitorName { get; set; } = null!;

        public GetProviderInstanceArgs()
        {
        }
        public static new GetProviderInstanceArgs Empty => new GetProviderInstanceArgs();
    }

    public sealed class GetProviderInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the provider instance.
        /// </summary>
        [Input("providerInstanceName", required: true)]
        public Input<string> ProviderInstanceName { get; set; } = null!;

        /// <summary>
        /// Name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("sapMonitorName", required: true)]
        public Input<string> SapMonitorName { get; set; } = null!;

        public GetProviderInstanceInvokeArgs()
        {
        }
        public static new GetProviderInstanceInvokeArgs Empty => new GetProviderInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetProviderInstanceResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A JSON string containing metadata of the provider instance.
        /// </summary>
        public readonly string? Metadata;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A JSON string containing the properties of the provider instance.
        /// </summary>
        public readonly string Properties;
        /// <summary>
        /// State of provisioning of the provider instance
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetProviderInstanceResult(
            string id,

            string? metadata,

            string name,

            string properties,

            string provisioningState,

            string type)
        {
            Id = id;
            Metadata = metadata;
            Name = name;
            Properties = properties;
            ProvisioningState = provisioningState;
            Type = type;
        }
    }
}
