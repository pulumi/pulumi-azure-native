// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.HanaOnAzure
{
    public static class GetSapMonitor
    {
        /// <summary>
        /// SAP monitor info on Azure (ARM properties and SAP monitor properties)
        /// API Version: 2020-02-07-preview.
        /// </summary>
        public static Task<GetSapMonitorResult> InvokeAsync(GetSapMonitorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSapMonitorResult>("azure-nextgen:hanaonazure:getSapMonitor", args ?? new GetSapMonitorArgs(), options.WithVersion());
    }


    public sealed class GetSapMonitorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the SAP monitor resource.
        /// </summary>
        [Input("sapMonitorName", required: true)]
        public string SapMonitorName { get; set; } = null!;

        public GetSapMonitorArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSapMonitorResult
    {
        /// <summary>
        /// The value indicating whether to send analytics to Microsoft
        /// </summary>
        public readonly bool? EnableCustomerAnalytics;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The ARM ID of the Log Analytics Workspace that is used for monitoring
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceArmId;
        /// <summary>
        /// The workspace ID of the log analytics workspace to be used for monitoring
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceId;
        /// <summary>
        /// The shared key of the log analytics workspace that is used for monitoring
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceSharedKey;
        /// <summary>
        /// The name of the resource group the SAP Monitor resources get deployed into.
        /// </summary>
        public readonly string ManagedResourceGroupName;
        /// <summary>
        /// The subnet which the SAP monitor will be deployed in
        /// </summary>
        public readonly string? MonitorSubnet;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of provisioning of the HanaInstance
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The version of the payload running in the Collector VM
        /// </summary>
        public readonly string SapMonitorCollectorVersion;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSapMonitorResult(
            bool? enableCustomerAnalytics,

            string id,

            string location,

            string? logAnalyticsWorkspaceArmId,

            string? logAnalyticsWorkspaceId,

            string? logAnalyticsWorkspaceSharedKey,

            string managedResourceGroupName,

            string? monitorSubnet,

            string name,

            string provisioningState,

            string sapMonitorCollectorVersion,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            EnableCustomerAnalytics = enableCustomerAnalytics;
            Id = id;
            Location = location;
            LogAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            LogAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            LogAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            ManagedResourceGroupName = managedResourceGroupName;
            MonitorSubnet = monitorSubnet;
            Name = name;
            ProvisioningState = provisioningState;
            SapMonitorCollectorVersion = sapMonitorCollectorVersion;
            Tags = tags;
            Type = type;
        }
    }
}
