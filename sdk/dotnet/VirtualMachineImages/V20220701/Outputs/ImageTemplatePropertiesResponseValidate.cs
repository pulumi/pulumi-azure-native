// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.VirtualMachineImages.V20220701.Outputs
{

    /// <summary>
    /// Configuration options and list of validations to be performed on the resulting image.
    /// </summary>
    [OutputType]
    public sealed class ImageTemplatePropertiesResponseValidate
    {
        /// <summary>
        /// If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        /// </summary>
        public readonly bool? ContinueDistributeOnFailure;
        /// <summary>
        /// List of validations to be performed.
        /// </summary>
        public readonly ImmutableArray<object> InVMValidations;
        /// <summary>
        /// If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image.
        /// </summary>
        public readonly bool? SourceValidationOnly;

        [OutputConstructor]
        private ImageTemplatePropertiesResponseValidate(
            bool? continueDistributeOnFailure,

            ImmutableArray<object> inVMValidations,

            bool? sourceValidationOnly)
        {
            ContinueDistributeOnFailure = continueDistributeOnFailure;
            InVMValidations = inVMValidations;
            SourceValidationOnly = sourceValidationOnly;
        }
    }
}
