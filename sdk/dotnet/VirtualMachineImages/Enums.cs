// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.VirtualMachineImages
{
    /// <summary>
    /// The type of identity used for the image template. The type 'None' will remove any identities from the image template.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS).
    /// </summary>
    [EnumType]
    public readonly struct SharedImageStorageAccountType : IEquatable<SharedImageStorageAccountType>
    {
        private readonly string _value;

        private SharedImageStorageAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SharedImageStorageAccountType Standard_LRS { get; } = new SharedImageStorageAccountType("Standard_LRS");
        public static SharedImageStorageAccountType Standard_ZRS { get; } = new SharedImageStorageAccountType("Standard_ZRS");

        public static bool operator ==(SharedImageStorageAccountType left, SharedImageStorageAccountType right) => left.Equals(right);
        public static bool operator !=(SharedImageStorageAccountType left, SharedImageStorageAccountType right) => !left.Equals(right);

        public static explicit operator string(SharedImageStorageAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SharedImageStorageAccountType other && Equals(other);
        public bool Equals(SharedImageStorageAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
