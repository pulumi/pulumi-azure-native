// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MobilePacketCore.V20230515Preview
{
    /// <summary>
    /// Administrative state of the network function
    /// </summary>
    [EnumType]
    public readonly struct NetworkFunctionAdministrativeState : IEquatable<NetworkFunctionAdministrativeState>
    {
        private readonly string _value;

        private NetworkFunctionAdministrativeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resource has been commissioned
        /// </summary>
        public static NetworkFunctionAdministrativeState Commissioned { get; } = new NetworkFunctionAdministrativeState("Commissioned");
        /// <summary>
        /// Resource has been decommissioned
        /// </summary>
        public static NetworkFunctionAdministrativeState Decommissioned { get; } = new NetworkFunctionAdministrativeState("Decommissioned");

        public static bool operator ==(NetworkFunctionAdministrativeState left, NetworkFunctionAdministrativeState right) => left.Equals(right);
        public static bool operator !=(NetworkFunctionAdministrativeState left, NetworkFunctionAdministrativeState right) => !left.Equals(right);

        public static explicit operator string(NetworkFunctionAdministrativeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkFunctionAdministrativeState other && Equals(other);
        public bool Equals(NetworkFunctionAdministrativeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of network function
    /// </summary>
    [EnumType]
    public readonly struct NetworkFunctionType : IEquatable<NetworkFunctionType>
    {
        private readonly string _value;

        private NetworkFunctionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Access and Mobility Function
        /// </summary>
        public static NetworkFunctionType AMF { get; } = new NetworkFunctionType("AMF");
        /// <summary>
        /// Session Management Function
        /// </summary>
        public static NetworkFunctionType SMF { get; } = new NetworkFunctionType("SMF");
        /// <summary>
        /// User Plane Function
        /// </summary>
        public static NetworkFunctionType UPF { get; } = new NetworkFunctionType("UPF");
        /// <summary>
        /// Network Repository Function
        /// </summary>
        public static NetworkFunctionType NRF { get; } = new NetworkFunctionType("NRF");
        /// <summary>
        /// Network Slice Selection Function
        /// </summary>
        public static NetworkFunctionType NSSF { get; } = new NetworkFunctionType("NSSF");
        /// <summary>
        /// Mobility Management Entity
        /// </summary>
        public static NetworkFunctionType MME { get; } = new NetworkFunctionType("MME");
        /// <summary>
        /// System Architecture Evolution Gateway Control Plane, control and user plane separation (CUPS) architecture
        /// </summary>
        public static NetworkFunctionType SaegwControlPlane { get; } = new NetworkFunctionType("SaegwControlPlane");
        /// <summary>
        /// System Architecture Evolution Gateway User Plane, control and user plane separation (CUPS) architecture
        /// </summary>
        public static NetworkFunctionType SaegwUserPlane { get; } = new NetworkFunctionType("SaegwUserPlane");
        /// <summary>
        /// System Architecture Evolution Gateway.  This combines the Serving Gateway (SGW) and the Packet Data Network Gateway (PGW) functionality
        /// </summary>
        public static NetworkFunctionType Saegw { get; } = new NetworkFunctionType("Saegw");
        /// <summary>
        /// Evolved Packet Data Gateway
        /// </summary>
        public static NetworkFunctionType EPDG { get; } = new NetworkFunctionType("ePDG");
        /// <summary>
        /// Non-3GPP Interworking Function
        /// </summary>
        public static NetworkFunctionType N3IWF { get; } = new NetworkFunctionType("N3IWF");
        /// <summary>
        /// Remote Platform As A Service Components
        /// </summary>
        public static NetworkFunctionType RemotePaaS { get; } = new NetworkFunctionType("RemotePaaS");
        /// <summary>
        /// Element Management System
        /// </summary>
        public static NetworkFunctionType EMS { get; } = new NetworkFunctionType("EMS");
        /// <summary>
        /// Operations and Policy Manager
        /// </summary>
        public static NetworkFunctionType OperationsPolicyManager { get; } = new NetworkFunctionType("OperationsPolicyManager");

        public static bool operator ==(NetworkFunctionType left, NetworkFunctionType right) => left.Equals(right);
        public static bool operator !=(NetworkFunctionType left, NetworkFunctionType right) => !left.Equals(right);

        public static explicit operator string(NetworkFunctionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkFunctionType other && Equals(other);
        public bool Equals(NetworkFunctionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Provisioned SKU Value.
    /// </summary>
    [EnumType]
    public readonly struct SkuDefinitions : IEquatable<SkuDefinitions>
    {
        private readonly string _value;

        private SkuDefinitions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Lab SKU
        /// </summary>
        public static SkuDefinitions AzureLab { get; } = new SkuDefinitions("AzureLab");
        /// <summary>
        /// Azure Production SKU
        /// </summary>
        public static SkuDefinitions AzureProduction { get; } = new SkuDefinitions("AzureProduction");
        /// <summary>
        /// Nexus Lab SKU
        /// </summary>
        public static SkuDefinitions NexusLab { get; } = new SkuDefinitions("NexusLab");
        /// <summary>
        /// Nexus Production SKU
        /// </summary>
        public static SkuDefinitions NexusProduction { get; } = new SkuDefinitions("NexusProduction");

        public static bool operator ==(SkuDefinitions left, SkuDefinitions right) => left.Equals(right);
        public static bool operator !=(SkuDefinitions left, SkuDefinitions right) => !left.Equals(right);

        public static explicit operator string(SkuDefinitions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuDefinitions other && Equals(other);
        public bool Equals(SkuDefinitions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
