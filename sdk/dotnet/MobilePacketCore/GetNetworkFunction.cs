// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobilePacketCore
{
    public static class GetNetworkFunction
    {
        /// <summary>
        /// Get a NetworkFunctionResource
        /// Azure REST API version: 2023-05-15-preview.
        /// </summary>
        public static Task<GetNetworkFunctionResult> InvokeAsync(GetNetworkFunctionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkFunctionResult>("azure-native:mobilepacketcore:getNetworkFunction", args ?? new GetNetworkFunctionArgs(), options.WithDefaults());

        /// <summary>
        /// Get a NetworkFunctionResource
        /// Azure REST API version: 2023-05-15-preview.
        /// </summary>
        public static Output<GetNetworkFunctionResult> Invoke(GetNetworkFunctionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkFunctionResult>("azure-native:mobilepacketcore:getNetworkFunction", args ?? new GetNetworkFunctionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkFunctionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network function
        /// </summary>
        [Input("networkFunctionName", required: true)]
        public string NetworkFunctionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkFunctionArgs()
        {
        }
        public static new GetNetworkFunctionArgs Empty => new GetNetworkFunctionArgs();
    }

    public sealed class GetNetworkFunctionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the network function
        /// </summary>
        [Input("networkFunctionName", required: true)]
        public Input<string> NetworkFunctionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkFunctionInvokeArgs()
        {
        }
        public static new GetNetworkFunctionInvokeArgs Empty => new GetNetworkFunctionInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkFunctionResult
    {
        /// <summary>
        /// Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously Attached Users (SAU) count as applicable
        /// </summary>
        public readonly int? Capacity;
        /// <summary>
        /// User provided deployment notes.  This is used to optionally provide details about the NF deployment
        /// </summary>
        public readonly string? DeploymentNotes;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Count of infrastructure elements used by this network function (vCPUs, in units of 8)
        /// </summary>
        public readonly int InfrastructureElementCount;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Administrative state of the network function
        /// </summary>
        public readonly string NetworkFunctionAdministrativeState;
        /// <summary>
        /// Operational state of the network function
        /// </summary>
        public readonly string NetworkFunctionOperationalStatus;
        /// <summary>
        /// Type of network function
        /// </summary>
        public readonly string NetworkFunctionType;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Provisioned SKU Value.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// User provided description
        /// </summary>
        public readonly string? UserDescription;

        [OutputConstructor]
        private GetNetworkFunctionResult(
            int? capacity,

            string? deploymentNotes,

            string id,

            int infrastructureElementCount,

            string location,

            string name,

            string networkFunctionAdministrativeState,

            string networkFunctionOperationalStatus,

            string networkFunctionType,

            string provisioningState,

            string sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? userDescription)
        {
            Capacity = capacity;
            DeploymentNotes = deploymentNotes;
            Id = id;
            InfrastructureElementCount = infrastructureElementCount;
            Location = location;
            Name = name;
            NetworkFunctionAdministrativeState = networkFunctionAdministrativeState;
            NetworkFunctionOperationalStatus = networkFunctionOperationalStatus;
            NetworkFunctionType = networkFunctionType;
            ProvisioningState = provisioningState;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UserDescription = userDescription;
        }
    }
}
