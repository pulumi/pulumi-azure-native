// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OperationalInsights.V20211201Preview
{
    public static class GetWorkspace
    {
        /// <summary>
        /// Gets a workspace instance.
        /// </summary>
        public static Task<GetWorkspaceResult> InvokeAsync(GetWorkspaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceResult>("azure-native:operationalinsights/v20211201preview:getWorkspace", args ?? new GetWorkspaceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a workspace instance.
        /// </summary>
        public static Output<GetWorkspaceResult> Invoke(GetWorkspaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspaceResult>("azure-native:operationalinsights/v20211201preview:getWorkspace", args ?? new GetWorkspaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetWorkspaceArgs()
        {
        }
        public static new GetWorkspaceArgs Empty => new GetWorkspaceArgs();
    }

    public sealed class GetWorkspaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetWorkspaceInvokeArgs()
        {
        }
        public static new GetWorkspaceInvokeArgs Empty => new GetWorkspaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceResult
    {
        /// <summary>
        /// Workspace creation date.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// This is a read-only property. Represents the ID associated with the workspace.
        /// </summary>
        public readonly string CustomerId;
        /// <summary>
        /// The resource ID of the default Data Collection Rule to use for this workspace. Expected format is - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dcrName}.
        /// </summary>
        public readonly string? DefaultDataCollectionRuleResourceId;
        /// <summary>
        /// The ETag of the workspace.
        /// </summary>
        public readonly string? ETag;
        /// <summary>
        /// Workspace features.
        /// </summary>
        public readonly Outputs.WorkspaceFeaturesResponse? Features;
        /// <summary>
        /// Indicates whether customer managed storage is mandatory for query management.
        /// </summary>
        public readonly bool? ForceCmkForQuery;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Workspace modification date.
        /// </summary>
        public readonly string ModifiedDate;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of linked private link scope resources.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateLinkScopedResourceResponse> PrivateLinkScopedResources;
        /// <summary>
        /// The provisioning state of the workspace.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The network access type for accessing Log Analytics ingestion.
        /// </summary>
        public readonly string? PublicNetworkAccessForIngestion;
        /// <summary>
        /// The network access type for accessing Log Analytics query.
        /// </summary>
        public readonly string? PublicNetworkAccessForQuery;
        /// <summary>
        /// The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details.
        /// </summary>
        public readonly int? RetentionInDays;
        /// <summary>
        /// The SKU of the workspace.
        /// </summary>
        public readonly Outputs.WorkspaceSkuResponse? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The daily volume cap for ingestion.
        /// </summary>
        public readonly Outputs.WorkspaceCappingResponse? WorkspaceCapping;

        [OutputConstructor]
        private GetWorkspaceResult(
            string createdDate,

            string customerId,

            string? defaultDataCollectionRuleResourceId,

            string? eTag,

            Outputs.WorkspaceFeaturesResponse? features,

            bool? forceCmkForQuery,

            string id,

            string location,

            string modifiedDate,

            string name,

            ImmutableArray<Outputs.PrivateLinkScopedResourceResponse> privateLinkScopedResources,

            string provisioningState,

            string? publicNetworkAccessForIngestion,

            string? publicNetworkAccessForQuery,

            int? retentionInDays,

            Outputs.WorkspaceSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.WorkspaceCappingResponse? workspaceCapping)
        {
            CreatedDate = createdDate;
            CustomerId = customerId;
            DefaultDataCollectionRuleResourceId = defaultDataCollectionRuleResourceId;
            ETag = eTag;
            Features = features;
            ForceCmkForQuery = forceCmkForQuery;
            Id = id;
            Location = location;
            ModifiedDate = modifiedDate;
            Name = name;
            PrivateLinkScopedResources = privateLinkScopedResources;
            ProvisioningState = provisioningState;
            PublicNetworkAccessForIngestion = publicNetworkAccessForIngestion;
            PublicNetworkAccessForQuery = publicNetworkAccessForQuery;
            RetentionInDays = retentionInDays;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            WorkspaceCapping = workspaceCapping;
        }
    }
}
