// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.OperationalInsights.V20151101Preview
{
    /// <summary>
    /// The kind of the DataSource.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceKind : IEquatable<DataSourceKind>
    {
        private readonly string _value;

        private DataSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceKind AzureActivityLog { get; } = new DataSourceKind("AzureActivityLog");
        public static DataSourceKind ChangeTrackingPath { get; } = new DataSourceKind("ChangeTrackingPath");
        public static DataSourceKind ChangeTrackingDefaultPath { get; } = new DataSourceKind("ChangeTrackingDefaultPath");
        public static DataSourceKind ChangeTrackingDefaultRegistry { get; } = new DataSourceKind("ChangeTrackingDefaultRegistry");
        public static DataSourceKind ChangeTrackingCustomRegistry { get; } = new DataSourceKind("ChangeTrackingCustomRegistry");
        public static DataSourceKind CustomLog { get; } = new DataSourceKind("CustomLog");
        public static DataSourceKind CustomLogCollection { get; } = new DataSourceKind("CustomLogCollection");
        public static DataSourceKind GenericDataSource { get; } = new DataSourceKind("GenericDataSource");
        public static DataSourceKind IISLogs { get; } = new DataSourceKind("IISLogs");
        public static DataSourceKind LinuxPerformanceObject { get; } = new DataSourceKind("LinuxPerformanceObject");
        public static DataSourceKind LinuxPerformanceCollection { get; } = new DataSourceKind("LinuxPerformanceCollection");
        public static DataSourceKind LinuxSyslog { get; } = new DataSourceKind("LinuxSyslog");
        public static DataSourceKind LinuxSyslogCollection { get; } = new DataSourceKind("LinuxSyslogCollection");
        public static DataSourceKind WindowsEvent { get; } = new DataSourceKind("WindowsEvent");
        public static DataSourceKind WindowsPerformanceCounter { get; } = new DataSourceKind("WindowsPerformanceCounter");

        public static bool operator ==(DataSourceKind left, DataSourceKind right) => left.Equals(right);
        public static bool operator !=(DataSourceKind left, DataSourceKind right) => !left.Equals(right);

        public static explicit operator string(DataSourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceKind other && Equals(other);
        public bool Equals(DataSourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The provisioning state of the workspace.
    /// </summary>
    [EnumType]
    public readonly struct EntityStatus : IEquatable<EntityStatus>
    {
        private readonly string _value;

        private EntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EntityStatus Creating { get; } = new EntityStatus("Creating");
        public static EntityStatus Succeeded { get; } = new EntityStatus("Succeeded");
        public static EntityStatus Failed { get; } = new EntityStatus("Failed");
        public static EntityStatus Canceled { get; } = new EntityStatus("Canceled");
        public static EntityStatus Deleting { get; } = new EntityStatus("Deleting");
        public static EntityStatus ProvisioningAccount { get; } = new EntityStatus("ProvisioningAccount");

        public static bool operator ==(EntityStatus left, EntityStatus right) => left.Equals(right);
        public static bool operator !=(EntityStatus left, EntityStatus right) => !left.Equals(right);

        public static explicit operator string(EntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EntityStatus other && Equals(other);
        public bool Equals(EntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the machine group
    /// </summary>
    [EnumType]
    public readonly struct MachineGroupType : IEquatable<MachineGroupType>
    {
        private readonly string _value;

        private MachineGroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MachineGroupType Unknown { get; } = new MachineGroupType("unknown");
        public static MachineGroupType Azure_cs { get; } = new MachineGroupType("azure-cs");
        public static MachineGroupType Azure_sf { get; } = new MachineGroupType("azure-sf");
        public static MachineGroupType Azure_vmss { get; } = new MachineGroupType("azure-vmss");
        public static MachineGroupType User_static { get; } = new MachineGroupType("user-static");

        public static bool operator ==(MachineGroupType left, MachineGroupType right) => left.Equals(right);
        public static bool operator !=(MachineGroupType left, MachineGroupType right) => !left.Equals(right);

        public static explicit operator string(MachineGroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MachineGroupType other && Equals(other);
        public bool Equals(MachineGroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct SkuNameEnum : IEquatable<SkuNameEnum>
    {
        private readonly string _value;

        private SkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuNameEnum Free { get; } = new SkuNameEnum("Free");
        public static SkuNameEnum Standard { get; } = new SkuNameEnum("Standard");
        public static SkuNameEnum Premium { get; } = new SkuNameEnum("Premium");
        public static SkuNameEnum PerNode { get; } = new SkuNameEnum("PerNode");
        public static SkuNameEnum PerGB2018 { get; } = new SkuNameEnum("PerGB2018");
        public static SkuNameEnum Standalone { get; } = new SkuNameEnum("Standalone");
        public static SkuNameEnum CapacityReservation { get; } = new SkuNameEnum("CapacityReservation");

        public static bool operator ==(SkuNameEnum left, SkuNameEnum right) => left.Equals(right);
        public static bool operator !=(SkuNameEnum left, SkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(SkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuNameEnum other && Equals(other);
        public bool Equals(SkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
