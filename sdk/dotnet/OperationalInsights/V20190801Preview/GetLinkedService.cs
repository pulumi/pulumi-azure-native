// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.OperationalInsights.V20190801Preview
{
    public static class GetLinkedService
    {
        public static Task<GetLinkedServiceResult> InvokeAsync(GetLinkedServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLinkedServiceResult>("azure-nextgen:operationalinsights/v20190801preview:getLinkedService", args ?? new GetLinkedServiceArgs(), options.WithVersion());
    }


    public sealed class GetLinkedServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the linked service.
        /// </summary>
        [Input("linkedServiceName", required: true)]
        public string LinkedServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group to get. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the Log Analytics Workspace that contains the linkedServices resource
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetLinkedServiceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLinkedServiceResult
    {
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
        /// </summary>
        public readonly string? WriteAccessResourceId;

        [OutputConstructor]
        private GetLinkedServiceResult(
            string name,

            string? resourceId,

            string type,

            string? writeAccessResourceId)
        {
            Name = name;
            ResourceId = resourceId;
            Type = type;
            WriteAccessResourceId = writeAccessResourceId;
        }
    }
}
