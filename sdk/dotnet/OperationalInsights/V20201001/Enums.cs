// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.OperationalInsights.V20201001
{
    /// <summary>
    /// Configures whether billing will be only on the cluster or each workspace will be billed by its proportional use. This does not change the overall billing, only how it will be distributed. Default value is 'Cluster'
    /// </summary>
    [EnumType]
    public readonly struct BillingType : IEquatable<BillingType>
    {
        private readonly string _value;

        private BillingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingType Cluster { get; } = new BillingType("Cluster");
        public static BillingType Workspaces { get; } = new BillingType("Workspaces");

        public static bool operator ==(BillingType left, BillingType right) => left.Equals(right);
        public static bool operator !=(BillingType left, BillingType right) => !left.Equals(right);

        public static explicit operator string(BillingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingType other && Equals(other);
        public bool Equals(BillingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct ClusterSkuNameEnum : IEquatable<ClusterSkuNameEnum>
    {
        private readonly string _value;

        private ClusterSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterSkuNameEnum CapacityReservation { get; } = new ClusterSkuNameEnum("CapacityReservation");

        public static bool operator ==(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(ClusterSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterSkuNameEnum other && Equals(other);
        public bool Equals(ClusterSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType None { get; } = new IdentityType("None");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network access type for accessing Log Analytics query.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enables connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        /// <summary>
        /// Disables public connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The provisioning state of the workspace.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceEntityStatus : IEquatable<WorkspaceEntityStatus>
    {
        private readonly string _value;

        private WorkspaceEntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceEntityStatus Creating { get; } = new WorkspaceEntityStatus("Creating");
        public static WorkspaceEntityStatus Succeeded { get; } = new WorkspaceEntityStatus("Succeeded");
        public static WorkspaceEntityStatus Failed { get; } = new WorkspaceEntityStatus("Failed");
        public static WorkspaceEntityStatus Canceled { get; } = new WorkspaceEntityStatus("Canceled");
        public static WorkspaceEntityStatus Deleting { get; } = new WorkspaceEntityStatus("Deleting");
        public static WorkspaceEntityStatus ProvisioningAccount { get; } = new WorkspaceEntityStatus("ProvisioningAccount");
        public static WorkspaceEntityStatus Updating { get; } = new WorkspaceEntityStatus("Updating");

        public static bool operator ==(WorkspaceEntityStatus left, WorkspaceEntityStatus right) => left.Equals(right);
        public static bool operator !=(WorkspaceEntityStatus left, WorkspaceEntityStatus right) => !left.Equals(right);

        public static explicit operator string(WorkspaceEntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceEntityStatus other && Equals(other);
        public bool Equals(WorkspaceEntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceSkuNameEnum : IEquatable<WorkspaceSkuNameEnum>
    {
        private readonly string _value;

        private WorkspaceSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceSkuNameEnum Free { get; } = new WorkspaceSkuNameEnum("Free");
        public static WorkspaceSkuNameEnum Standard { get; } = new WorkspaceSkuNameEnum("Standard");
        public static WorkspaceSkuNameEnum Premium { get; } = new WorkspaceSkuNameEnum("Premium");
        public static WorkspaceSkuNameEnum PerNode { get; } = new WorkspaceSkuNameEnum("PerNode");
        public static WorkspaceSkuNameEnum PerGB2018 { get; } = new WorkspaceSkuNameEnum("PerGB2018");
        public static WorkspaceSkuNameEnum Standalone { get; } = new WorkspaceSkuNameEnum("Standalone");
        public static WorkspaceSkuNameEnum CapacityReservation { get; } = new WorkspaceSkuNameEnum("CapacityReservation");
        public static WorkspaceSkuNameEnum LACluster { get; } = new WorkspaceSkuNameEnum("LACluster");

        public static bool operator ==(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(WorkspaceSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceSkuNameEnum other && Equals(other);
        public bool Equals(WorkspaceSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
