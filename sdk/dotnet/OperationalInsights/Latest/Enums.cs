// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.OperationalInsights.Latest
{
    /// <summary>
    /// The alert rule kind
    /// </summary>
    [EnumType]
    public readonly struct AlertRuleKind : IEquatable<AlertRuleKind>
    {
        private readonly string _value;

        private AlertRuleKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertRuleKind Scheduled { get; } = new AlertRuleKind("Scheduled");
        public static AlertRuleKind MicrosoftSecurityIncidentCreation { get; } = new AlertRuleKind("MicrosoftSecurityIncidentCreation");
        public static AlertRuleKind Fusion { get; } = new AlertRuleKind("Fusion");

        public static bool operator ==(AlertRuleKind left, AlertRuleKind right) => left.Equals(right);
        public static bool operator !=(AlertRuleKind left, AlertRuleKind right) => !left.Equals(right);

        public static explicit operator string(AlertRuleKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertRuleKind other && Equals(other);
        public bool Equals(AlertRuleKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures whether billing will be only on the cluster or each workspace will be billed by its proportional use. This does not change the overall billing, only how it will be distributed. Default value is 'Cluster'
    /// </summary>
    [EnumType]
    public readonly struct BillingType : IEquatable<BillingType>
    {
        private readonly string _value;

        private BillingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingType Cluster { get; } = new BillingType("Cluster");
        public static BillingType Workspaces { get; } = new BillingType("Workspaces");

        public static bool operator ==(BillingType left, BillingType right) => left.Equals(right);
        public static bool operator !=(BillingType left, BillingType right) => !left.Equals(right);

        public static explicit operator string(BillingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingType other && Equals(other);
        public bool Equals(BillingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity of the incident
    /// </summary>
    [EnumType]
    public readonly struct CaseSeverity : IEquatable<CaseSeverity>
    {
        private readonly string _value;

        private CaseSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Critical severity
        /// </summary>
        public static CaseSeverity Critical { get; } = new CaseSeverity("Critical");
        /// <summary>
        /// High severity
        /// </summary>
        public static CaseSeverity High { get; } = new CaseSeverity("High");
        /// <summary>
        /// Medium severity
        /// </summary>
        public static CaseSeverity Medium { get; } = new CaseSeverity("Medium");
        /// <summary>
        /// Low severity
        /// </summary>
        public static CaseSeverity Low { get; } = new CaseSeverity("Low");
        /// <summary>
        /// Informational severity
        /// </summary>
        public static CaseSeverity Informational { get; } = new CaseSeverity("Informational");

        public static bool operator ==(CaseSeverity left, CaseSeverity right) => left.Equals(right);
        public static bool operator !=(CaseSeverity left, CaseSeverity right) => !left.Equals(right);

        public static explicit operator string(CaseSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CaseSeverity other && Equals(other);
        public bool Equals(CaseSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct ClusterSkuNameEnum : IEquatable<ClusterSkuNameEnum>
    {
        private readonly string _value;

        private ClusterSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterSkuNameEnum CapacityReservation { get; } = new ClusterSkuNameEnum("CapacityReservation");

        public static bool operator ==(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(ClusterSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterSkuNameEnum other && Equals(other);
        public bool Equals(ClusterSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data connector kind
    /// </summary>
    [EnumType]
    public readonly struct DataConnectorKind : IEquatable<DataConnectorKind>
    {
        private readonly string _value;

        private DataConnectorKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataConnectorKind AzureActiveDirectory { get; } = new DataConnectorKind("AzureActiveDirectory");
        public static DataConnectorKind AzureSecurityCenter { get; } = new DataConnectorKind("AzureSecurityCenter");
        public static DataConnectorKind MicrosoftCloudAppSecurity { get; } = new DataConnectorKind("MicrosoftCloudAppSecurity");
        public static DataConnectorKind ThreatIntelligence { get; } = new DataConnectorKind("ThreatIntelligence");
        public static DataConnectorKind Office365 { get; } = new DataConnectorKind("Office365");
        public static DataConnectorKind AmazonWebServicesCloudTrail { get; } = new DataConnectorKind("AmazonWebServicesCloudTrail");
        public static DataConnectorKind AzureAdvancedThreatProtection { get; } = new DataConnectorKind("AzureAdvancedThreatProtection");
        public static DataConnectorKind MicrosoftDefenderAdvancedThreatProtection { get; } = new DataConnectorKind("MicrosoftDefenderAdvancedThreatProtection");

        public static bool operator ==(DataConnectorKind left, DataConnectorKind right) => left.Equals(right);
        public static bool operator !=(DataConnectorKind left, DataConnectorKind right) => !left.Equals(right);

        public static explicit operator string(DataConnectorKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataConnectorKind other && Equals(other);
        public bool Equals(DataConnectorKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the DataSource.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceKind : IEquatable<DataSourceKind>
    {
        private readonly string _value;

        private DataSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceKind WindowsEvent { get; } = new DataSourceKind("WindowsEvent");
        public static DataSourceKind WindowsPerformanceCounter { get; } = new DataSourceKind("WindowsPerformanceCounter");
        public static DataSourceKind IISLogs { get; } = new DataSourceKind("IISLogs");
        public static DataSourceKind LinuxSyslog { get; } = new DataSourceKind("LinuxSyslog");
        public static DataSourceKind LinuxSyslogCollection { get; } = new DataSourceKind("LinuxSyslogCollection");
        public static DataSourceKind LinuxPerformanceObject { get; } = new DataSourceKind("LinuxPerformanceObject");
        public static DataSourceKind LinuxPerformanceCollection { get; } = new DataSourceKind("LinuxPerformanceCollection");
        public static DataSourceKind CustomLog { get; } = new DataSourceKind("CustomLog");
        public static DataSourceKind CustomLogCollection { get; } = new DataSourceKind("CustomLogCollection");
        public static DataSourceKind AzureAuditLog { get; } = new DataSourceKind("AzureAuditLog");
        public static DataSourceKind AzureActivityLog { get; } = new DataSourceKind("AzureActivityLog");
        public static DataSourceKind GenericDataSource { get; } = new DataSourceKind("GenericDataSource");
        public static DataSourceKind ChangeTrackingCustomPath { get; } = new DataSourceKind("ChangeTrackingCustomPath");
        public static DataSourceKind ChangeTrackingPath { get; } = new DataSourceKind("ChangeTrackingPath");
        public static DataSourceKind ChangeTrackingServices { get; } = new DataSourceKind("ChangeTrackingServices");
        public static DataSourceKind ChangeTrackingDataTypeConfiguration { get; } = new DataSourceKind("ChangeTrackingDataTypeConfiguration");
        public static DataSourceKind ChangeTrackingDefaultRegistry { get; } = new DataSourceKind("ChangeTrackingDefaultRegistry");
        public static DataSourceKind ChangeTrackingRegistry { get; } = new DataSourceKind("ChangeTrackingRegistry");
        public static DataSourceKind ChangeTrackingLinuxPath { get; } = new DataSourceKind("ChangeTrackingLinuxPath");
        public static DataSourceKind LinuxChangeTrackingPath { get; } = new DataSourceKind("LinuxChangeTrackingPath");
        public static DataSourceKind ChangeTrackingContentLocation { get; } = new DataSourceKind("ChangeTrackingContentLocation");
        public static DataSourceKind WindowsTelemetry { get; } = new DataSourceKind("WindowsTelemetry");
        public static DataSourceKind Office365 { get; } = new DataSourceKind("Office365");
        public static DataSourceKind SecurityWindowsBaselineConfiguration { get; } = new DataSourceKind("SecurityWindowsBaselineConfiguration");
        public static DataSourceKind SecurityCenterSecurityWindowsBaselineConfiguration { get; } = new DataSourceKind("SecurityCenterSecurityWindowsBaselineConfiguration");
        public static DataSourceKind SecurityEventCollectionConfiguration { get; } = new DataSourceKind("SecurityEventCollectionConfiguration");
        public static DataSourceKind SecurityInsightsSecurityEventCollectionConfiguration { get; } = new DataSourceKind("SecurityInsightsSecurityEventCollectionConfiguration");
        public static DataSourceKind ImportComputerGroup { get; } = new DataSourceKind("ImportComputerGroup");
        public static DataSourceKind NetworkMonitoring { get; } = new DataSourceKind("NetworkMonitoring");
        public static DataSourceKind Itsm { get; } = new DataSourceKind("Itsm");
        public static DataSourceKind DnsAnalytics { get; } = new DataSourceKind("DnsAnalytics");
        public static DataSourceKind ApplicationInsights { get; } = new DataSourceKind("ApplicationInsights");
        public static DataSourceKind SqlDataClassification { get; } = new DataSourceKind("SqlDataClassification");

        public static bool operator ==(DataSourceKind left, DataSourceKind right) => left.Equals(right);
        public static bool operator !=(DataSourceKind left, DataSourceKind right) => !left.Equals(right);

        public static explicit operator string(DataSourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceKind other && Equals(other);
        public bool Equals(DataSourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType None { get; } = new IdentityType("None");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The reason the incident was closed
    /// </summary>
    [EnumType]
    public readonly struct IncidentClassification : IEquatable<IncidentClassification>
    {
        private readonly string _value;

        private IncidentClassification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Incident classification was undetermined
        /// </summary>
        public static IncidentClassification Undetermined { get; } = new IncidentClassification("Undetermined");
        /// <summary>
        /// Incident was true positive
        /// </summary>
        public static IncidentClassification TruePositive { get; } = new IncidentClassification("TruePositive");
        /// <summary>
        /// Incident was benign positive
        /// </summary>
        public static IncidentClassification BenignPositive { get; } = new IncidentClassification("BenignPositive");
        /// <summary>
        /// Incident was false positive
        /// </summary>
        public static IncidentClassification FalsePositive { get; } = new IncidentClassification("FalsePositive");

        public static bool operator ==(IncidentClassification left, IncidentClassification right) => left.Equals(right);
        public static bool operator !=(IncidentClassification left, IncidentClassification right) => !left.Equals(right);

        public static explicit operator string(IncidentClassification value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentClassification other && Equals(other);
        public bool Equals(IncidentClassification other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The classification reason the incident was closed with
    /// </summary>
    [EnumType]
    public readonly struct IncidentClassificationReason : IEquatable<IncidentClassificationReason>
    {
        private readonly string _value;

        private IncidentClassificationReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Classification reason was suspicious activity
        /// </summary>
        public static IncidentClassificationReason SuspiciousActivity { get; } = new IncidentClassificationReason("SuspiciousActivity");
        /// <summary>
        /// Classification reason was suspicious but expected
        /// </summary>
        public static IncidentClassificationReason SuspiciousButExpected { get; } = new IncidentClassificationReason("SuspiciousButExpected");
        /// <summary>
        /// Classification reason was incorrect alert logic
        /// </summary>
        public static IncidentClassificationReason IncorrectAlertLogic { get; } = new IncidentClassificationReason("IncorrectAlertLogic");
        /// <summary>
        /// Classification reason was inaccurate data
        /// </summary>
        public static IncidentClassificationReason InaccurateData { get; } = new IncidentClassificationReason("InaccurateData");

        public static bool operator ==(IncidentClassificationReason left, IncidentClassificationReason right) => left.Equals(right);
        public static bool operator !=(IncidentClassificationReason left, IncidentClassificationReason right) => !left.Equals(right);

        public static explicit operator string(IncidentClassificationReason value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentClassificationReason other && Equals(other);
        public bool Equals(IncidentClassificationReason other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity of the incident
    /// </summary>
    [EnumType]
    public readonly struct IncidentSeverity : IEquatable<IncidentSeverity>
    {
        private readonly string _value;

        private IncidentSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// High severity
        /// </summary>
        public static IncidentSeverity High { get; } = new IncidentSeverity("High");
        /// <summary>
        /// Medium severity
        /// </summary>
        public static IncidentSeverity Medium { get; } = new IncidentSeverity("Medium");
        /// <summary>
        /// Low severity
        /// </summary>
        public static IncidentSeverity Low { get; } = new IncidentSeverity("Low");
        /// <summary>
        /// Informational severity
        /// </summary>
        public static IncidentSeverity Informational { get; } = new IncidentSeverity("Informational");

        public static bool operator ==(IncidentSeverity left, IncidentSeverity right) => left.Equals(right);
        public static bool operator !=(IncidentSeverity left, IncidentSeverity right) => !left.Equals(right);

        public static explicit operator string(IncidentSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentSeverity other && Equals(other);
        public bool Equals(IncidentSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the incident
    /// </summary>
    [EnumType]
    public readonly struct IncidentStatus : IEquatable<IncidentStatus>
    {
        private readonly string _value;

        private IncidentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// An active incident which isn't being handled currently
        /// </summary>
        public static IncidentStatus New { get; } = new IncidentStatus("New");
        /// <summary>
        /// An active incident which is being handled
        /// </summary>
        public static IncidentStatus Active { get; } = new IncidentStatus("Active");
        /// <summary>
        /// A non-active incident
        /// </summary>
        public static IncidentStatus Closed { get; } = new IncidentStatus("Closed");

        public static bool operator ==(IncidentStatus left, IncidentStatus right) => left.Equals(right);
        public static bool operator !=(IncidentStatus left, IncidentStatus right) => !left.Equals(right);

        public static explicit operator string(IncidentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IncidentStatus other && Equals(other);
        public bool Equals(IncidentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The provisioning state of the linked service.
    /// </summary>
    [EnumType]
    public readonly struct LinkedServiceEntityStatus : IEquatable<LinkedServiceEntityStatus>
    {
        private readonly string _value;

        private LinkedServiceEntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkedServiceEntityStatus Succeeded { get; } = new LinkedServiceEntityStatus("Succeeded");
        public static LinkedServiceEntityStatus Deleting { get; } = new LinkedServiceEntityStatus("Deleting");
        public static LinkedServiceEntityStatus ProvisioningAccount { get; } = new LinkedServiceEntityStatus("ProvisioningAccount");
        public static LinkedServiceEntityStatus Updating { get; } = new LinkedServiceEntityStatus("Updating");

        public static bool operator ==(LinkedServiceEntityStatus left, LinkedServiceEntityStatus right) => left.Equals(right);
        public static bool operator !=(LinkedServiceEntityStatus left, LinkedServiceEntityStatus right) => !left.Equals(right);

        public static explicit operator string(LinkedServiceEntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkedServiceEntityStatus other && Equals(other);
        public bool Equals(LinkedServiceEntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network access type for accessing Log Analytics query.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enables connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        /// <summary>
        /// Disables public connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The provisioning state of the workspace.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceEntityStatus : IEquatable<WorkspaceEntityStatus>
    {
        private readonly string _value;

        private WorkspaceEntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceEntityStatus Creating { get; } = new WorkspaceEntityStatus("Creating");
        public static WorkspaceEntityStatus Succeeded { get; } = new WorkspaceEntityStatus("Succeeded");
        public static WorkspaceEntityStatus Failed { get; } = new WorkspaceEntityStatus("Failed");
        public static WorkspaceEntityStatus Canceled { get; } = new WorkspaceEntityStatus("Canceled");
        public static WorkspaceEntityStatus Deleting { get; } = new WorkspaceEntityStatus("Deleting");
        public static WorkspaceEntityStatus ProvisioningAccount { get; } = new WorkspaceEntityStatus("ProvisioningAccount");
        public static WorkspaceEntityStatus Updating { get; } = new WorkspaceEntityStatus("Updating");

        public static bool operator ==(WorkspaceEntityStatus left, WorkspaceEntityStatus right) => left.Equals(right);
        public static bool operator !=(WorkspaceEntityStatus left, WorkspaceEntityStatus right) => !left.Equals(right);

        public static explicit operator string(WorkspaceEntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceEntityStatus other && Equals(other);
        public bool Equals(WorkspaceEntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceSkuNameEnum : IEquatable<WorkspaceSkuNameEnum>
    {
        private readonly string _value;

        private WorkspaceSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceSkuNameEnum Free { get; } = new WorkspaceSkuNameEnum("Free");
        public static WorkspaceSkuNameEnum Standard { get; } = new WorkspaceSkuNameEnum("Standard");
        public static WorkspaceSkuNameEnum Premium { get; } = new WorkspaceSkuNameEnum("Premium");
        public static WorkspaceSkuNameEnum PerNode { get; } = new WorkspaceSkuNameEnum("PerNode");
        public static WorkspaceSkuNameEnum PerGB2018 { get; } = new WorkspaceSkuNameEnum("PerGB2018");
        public static WorkspaceSkuNameEnum Standalone { get; } = new WorkspaceSkuNameEnum("Standalone");
        public static WorkspaceSkuNameEnum CapacityReservation { get; } = new WorkspaceSkuNameEnum("CapacityReservation");
        public static WorkspaceSkuNameEnum LACluster { get; } = new WorkspaceSkuNameEnum("LACluster");

        public static bool operator ==(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(WorkspaceSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceSkuNameEnum other && Equals(other);
        public bool Equals(WorkspaceSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
