// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.OperationalInsights
{
    /// <summary>
    /// The cluster's billing type.
    /// </summary>
    [EnumType]
    public readonly struct BillingType : IEquatable<BillingType>
    {
        private readonly string _value;

        private BillingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingType Cluster { get; } = new BillingType("Cluster");
        public static BillingType Workspaces { get; } = new BillingType("Workspaces");

        public static bool operator ==(BillingType left, BillingType right) => left.Equals(right);
        public static bool operator !=(BillingType left, BillingType right) => !left.Equals(right);

        public static explicit operator string(BillingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingType other && Equals(other);
        public bool Equals(BillingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct ClusterSkuNameEnum : IEquatable<ClusterSkuNameEnum>
    {
        private readonly string _value;

        private ClusterSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterSkuNameEnum CapacityReservation { get; } = new ClusterSkuNameEnum("CapacityReservation");

        public static bool operator ==(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(ClusterSkuNameEnum left, ClusterSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(ClusterSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterSkuNameEnum other && Equals(other);
        public bool Equals(ClusterSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Column data type logical hint.
    /// </summary>
    [EnumType]
    public readonly struct ColumnDataTypeHintEnum : IEquatable<ColumnDataTypeHintEnum>
    {
        private readonly string _value;

        private ColumnDataTypeHintEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&amp;k2=v2#fragment
        /// </summary>
        public static ColumnDataTypeHintEnum Uri { get; } = new ColumnDataTypeHintEnum("uri");
        /// <summary>
        /// A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        /// </summary>
        public static ColumnDataTypeHintEnum Guid { get; } = new ColumnDataTypeHintEnum("guid");
        /// <summary>
        /// An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}...
        /// </summary>
        public static ColumnDataTypeHintEnum ArmPath { get; } = new ColumnDataTypeHintEnum("armPath");
        /// <summary>
        /// A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y
        /// </summary>
        public static ColumnDataTypeHintEnum Ip { get; } = new ColumnDataTypeHintEnum("ip");

        public static bool operator ==(ColumnDataTypeHintEnum left, ColumnDataTypeHintEnum right) => left.Equals(right);
        public static bool operator !=(ColumnDataTypeHintEnum left, ColumnDataTypeHintEnum right) => !left.Equals(right);

        public static explicit operator string(ColumnDataTypeHintEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ColumnDataTypeHintEnum other && Equals(other);
        public bool Equals(ColumnDataTypeHintEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Column data type.
    /// </summary>
    [EnumType]
    public readonly struct ColumnTypeEnum : IEquatable<ColumnTypeEnum>
    {
        private readonly string _value;

        private ColumnTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ColumnTypeEnum @String { get; } = new ColumnTypeEnum("string");
        public static ColumnTypeEnum @Int { get; } = new ColumnTypeEnum("int");
        public static ColumnTypeEnum @Long { get; } = new ColumnTypeEnum("long");
        public static ColumnTypeEnum Real { get; } = new ColumnTypeEnum("real");
        public static ColumnTypeEnum Boolean { get; } = new ColumnTypeEnum("boolean");
        public static ColumnTypeEnum DateTime { get; } = new ColumnTypeEnum("dateTime");
        public static ColumnTypeEnum Guid { get; } = new ColumnTypeEnum("guid");
        public static ColumnTypeEnum @Dynamic { get; } = new ColumnTypeEnum("dynamic");

        public static bool operator ==(ColumnTypeEnum left, ColumnTypeEnum right) => left.Equals(right);
        public static bool operator !=(ColumnTypeEnum left, ColumnTypeEnum right) => !left.Equals(right);

        public static explicit operator string(ColumnTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ColumnTypeEnum other && Equals(other);
        public bool Equals(ColumnTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the DataSource.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceKind : IEquatable<DataSourceKind>
    {
        private readonly string _value;

        private DataSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceKind WindowsEvent { get; } = new DataSourceKind("WindowsEvent");
        public static DataSourceKind WindowsPerformanceCounter { get; } = new DataSourceKind("WindowsPerformanceCounter");
        public static DataSourceKind IISLogs { get; } = new DataSourceKind("IISLogs");
        public static DataSourceKind LinuxSyslog { get; } = new DataSourceKind("LinuxSyslog");
        public static DataSourceKind LinuxSyslogCollection { get; } = new DataSourceKind("LinuxSyslogCollection");
        public static DataSourceKind LinuxPerformanceObject { get; } = new DataSourceKind("LinuxPerformanceObject");
        public static DataSourceKind LinuxPerformanceCollection { get; } = new DataSourceKind("LinuxPerformanceCollection");
        public static DataSourceKind CustomLog { get; } = new DataSourceKind("CustomLog");
        public static DataSourceKind CustomLogCollection { get; } = new DataSourceKind("CustomLogCollection");
        public static DataSourceKind AzureAuditLog { get; } = new DataSourceKind("AzureAuditLog");
        public static DataSourceKind AzureActivityLog { get; } = new DataSourceKind("AzureActivityLog");
        public static DataSourceKind GenericDataSource { get; } = new DataSourceKind("GenericDataSource");
        public static DataSourceKind ChangeTrackingCustomPath { get; } = new DataSourceKind("ChangeTrackingCustomPath");
        public static DataSourceKind ChangeTrackingPath { get; } = new DataSourceKind("ChangeTrackingPath");
        public static DataSourceKind ChangeTrackingServices { get; } = new DataSourceKind("ChangeTrackingServices");
        public static DataSourceKind ChangeTrackingDataTypeConfiguration { get; } = new DataSourceKind("ChangeTrackingDataTypeConfiguration");
        public static DataSourceKind ChangeTrackingDefaultRegistry { get; } = new DataSourceKind("ChangeTrackingDefaultRegistry");
        public static DataSourceKind ChangeTrackingRegistry { get; } = new DataSourceKind("ChangeTrackingRegistry");
        public static DataSourceKind ChangeTrackingLinuxPath { get; } = new DataSourceKind("ChangeTrackingLinuxPath");
        public static DataSourceKind LinuxChangeTrackingPath { get; } = new DataSourceKind("LinuxChangeTrackingPath");
        public static DataSourceKind ChangeTrackingContentLocation { get; } = new DataSourceKind("ChangeTrackingContentLocation");
        public static DataSourceKind WindowsTelemetry { get; } = new DataSourceKind("WindowsTelemetry");
        public static DataSourceKind Office365 { get; } = new DataSourceKind("Office365");
        public static DataSourceKind SecurityWindowsBaselineConfiguration { get; } = new DataSourceKind("SecurityWindowsBaselineConfiguration");
        public static DataSourceKind SecurityCenterSecurityWindowsBaselineConfiguration { get; } = new DataSourceKind("SecurityCenterSecurityWindowsBaselineConfiguration");
        public static DataSourceKind SecurityEventCollectionConfiguration { get; } = new DataSourceKind("SecurityEventCollectionConfiguration");
        public static DataSourceKind SecurityInsightsSecurityEventCollectionConfiguration { get; } = new DataSourceKind("SecurityInsightsSecurityEventCollectionConfiguration");
        public static DataSourceKind ImportComputerGroup { get; } = new DataSourceKind("ImportComputerGroup");
        public static DataSourceKind NetworkMonitoring { get; } = new DataSourceKind("NetworkMonitoring");
        public static DataSourceKind Itsm { get; } = new DataSourceKind("Itsm");
        public static DataSourceKind DnsAnalytics { get; } = new DataSourceKind("DnsAnalytics");
        public static DataSourceKind ApplicationInsights { get; } = new DataSourceKind("ApplicationInsights");
        public static DataSourceKind SqlDataClassification { get; } = new DataSourceKind("SqlDataClassification");

        public static bool operator ==(DataSourceKind left, DataSourceKind right) => left.Equals(right);
        public static bool operator !=(DataSourceKind left, DataSourceKind right) => !left.Equals(right);

        public static explicit operator string(DataSourceKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceKind other && Equals(other);
        public bool Equals(DataSourceKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");
        public static IdentityType None { get; } = new IdentityType("None");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The provisioning state of the linked service.
    /// </summary>
    [EnumType]
    public readonly struct LinkedServiceEntityStatus : IEquatable<LinkedServiceEntityStatus>
    {
        private readonly string _value;

        private LinkedServiceEntityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkedServiceEntityStatus Succeeded { get; } = new LinkedServiceEntityStatus("Succeeded");
        public static LinkedServiceEntityStatus Deleting { get; } = new LinkedServiceEntityStatus("Deleting");
        public static LinkedServiceEntityStatus ProvisioningAccount { get; } = new LinkedServiceEntityStatus("ProvisioningAccount");
        public static LinkedServiceEntityStatus Updating { get; } = new LinkedServiceEntityStatus("Updating");

        public static bool operator ==(LinkedServiceEntityStatus left, LinkedServiceEntityStatus right) => left.Equals(right);
        public static bool operator !=(LinkedServiceEntityStatus left, LinkedServiceEntityStatus right) => !left.Equals(right);

        public static explicit operator string(LinkedServiceEntityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkedServiceEntityStatus other && Equals(other);
        public bool Equals(LinkedServiceEntityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The network access type for accessing Log Analytics query.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccessType : IEquatable<PublicNetworkAccessType>
    {
        private readonly string _value;

        private PublicNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Enables connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Enabled { get; } = new PublicNetworkAccessType("Enabled");
        /// <summary>
        /// Disables public connectivity to Log Analytics through public DNS.
        /// </summary>
        public static PublicNetworkAccessType Disabled { get; } = new PublicNetworkAccessType("Disabled");

        public static bool operator ==(PublicNetworkAccessType left, PublicNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccessType left, PublicNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccessType other && Equals(other);
        public bool Equals(PublicNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Instruct the system how to handle and charge the logs ingested to this table.
    /// </summary>
    [EnumType]
    public readonly struct TablePlanEnum : IEquatable<TablePlanEnum>
    {
        private readonly string _value;

        private TablePlanEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Logs  that are adjusted to support high volume low value verbose logs.
        /// </summary>
        public static TablePlanEnum Basic { get; } = new TablePlanEnum("Basic");
        /// <summary>
        /// Logs  that allow monitoring and analytics.
        /// </summary>
        public static TablePlanEnum Analytics { get; } = new TablePlanEnum("Analytics");

        public static bool operator ==(TablePlanEnum left, TablePlanEnum right) => left.Equals(right);
        public static bool operator !=(TablePlanEnum left, TablePlanEnum right) => !left.Equals(right);

        public static explicit operator string(TablePlanEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TablePlanEnum other && Equals(other);
        public bool Equals(TablePlanEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the SKU.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceSkuNameEnum : IEquatable<WorkspaceSkuNameEnum>
    {
        private readonly string _value;

        private WorkspaceSkuNameEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceSkuNameEnum Free { get; } = new WorkspaceSkuNameEnum("Free");
        public static WorkspaceSkuNameEnum Standard { get; } = new WorkspaceSkuNameEnum("Standard");
        public static WorkspaceSkuNameEnum Premium { get; } = new WorkspaceSkuNameEnum("Premium");
        public static WorkspaceSkuNameEnum PerNode { get; } = new WorkspaceSkuNameEnum("PerNode");
        public static WorkspaceSkuNameEnum PerGB2018 { get; } = new WorkspaceSkuNameEnum("PerGB2018");
        public static WorkspaceSkuNameEnum Standalone { get; } = new WorkspaceSkuNameEnum("Standalone");
        public static WorkspaceSkuNameEnum CapacityReservation { get; } = new WorkspaceSkuNameEnum("CapacityReservation");
        public static WorkspaceSkuNameEnum LACluster { get; } = new WorkspaceSkuNameEnum("LACluster");

        public static bool operator ==(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => left.Equals(right);
        public static bool operator !=(WorkspaceSkuNameEnum left, WorkspaceSkuNameEnum right) => !left.Equals(right);

        public static explicit operator string(WorkspaceSkuNameEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceSkuNameEnum other && Equals(other);
        public bool Equals(WorkspaceSkuNameEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
