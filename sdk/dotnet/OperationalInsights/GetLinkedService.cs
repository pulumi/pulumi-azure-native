// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OperationalInsights
{
    public static class GetLinkedService
    {
        /// <summary>
        /// Gets a linked service instance.
        /// Azure REST API version: 2020-08-01.
        /// 
        /// Other available API versions: 2015-11-01-preview, 2023-09-01.
        /// </summary>
        public static Task<GetLinkedServiceResult> InvokeAsync(GetLinkedServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLinkedServiceResult>("azure-native:operationalinsights:getLinkedService", args ?? new GetLinkedServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a linked service instance.
        /// Azure REST API version: 2020-08-01.
        /// 
        /// Other available API versions: 2015-11-01-preview, 2023-09-01.
        /// </summary>
        public static Output<GetLinkedServiceResult> Invoke(GetLinkedServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLinkedServiceResult>("azure-native:operationalinsights:getLinkedService", args ?? new GetLinkedServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLinkedServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the linked service.
        /// </summary>
        [Input("linkedServiceName", required: true)]
        public string LinkedServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetLinkedServiceArgs()
        {
        }
        public static new GetLinkedServiceArgs Empty => new GetLinkedServiceArgs();
    }

    public sealed class GetLinkedServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the linked service.
        /// </summary>
        [Input("linkedServiceName", required: true)]
        public Input<string> LinkedServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetLinkedServiceInvokeArgs()
        {
        }
        public static new GetLinkedServiceInvokeArgs Empty => new GetLinkedServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetLinkedServiceResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the linked service.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
        /// </summary>
        public readonly string? WriteAccessResourceId;

        [OutputConstructor]
        private GetLinkedServiceResult(
            string id,

            string name,

            string? provisioningState,

            string? resourceId,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? writeAccessResourceId)
        {
            Id = id;
            Name = name;
            ProvisioningState = provisioningState;
            ResourceId = resourceId;
            Tags = tags;
            Type = type;
            WriteAccessResourceId = writeAccessResourceId;
        }
    }
}
