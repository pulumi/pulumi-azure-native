// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Edge
{
    /// <summary>
    /// State of instance
    /// </summary>
    [EnumType]
    public readonly struct ActiveState : IEquatable<ActiveState>
    {
        private readonly string _value;

        private ActiveState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Instance is active
        /// </summary>
        public static ActiveState Active { get; } = new ActiveState("active");
        /// <summary>
        /// Instance is inactive
        /// </summary>
        public static ActiveState Inactive { get; } = new ActiveState("inactive");

        public static bool operator ==(ActiveState left, ActiveState right) => left.Equals(right);
        public static bool operator !=(ActiveState left, ActiveState right) => !left.Equals(right);

        public static explicit operator string(ActiveState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveState other && Equals(other);
        public bool Equals(ActiveState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Error action mode
    /// </summary>
    [EnumType]
    public readonly struct ErrorActionMode : IEquatable<ErrorActionMode>
    {
        private readonly string _value;

        private ErrorActionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Stop on any failure
        /// </summary>
        public static ErrorActionMode StopOnAnyFailure { get; } = new ErrorActionMode("stopOnAnyFailure");
        /// <summary>
        /// Stop after N cumulative failures
        /// </summary>
        public static ErrorActionMode StopOnNFailures { get; } = new ErrorActionMode("stopOnNFailures");
        /// <summary>
        /// Continue silently despite errors
        /// </summary>
        public static ErrorActionMode SilentlyContinue { get; } = new ErrorActionMode("silentlyContinue");

        public static bool operator ==(ErrorActionMode left, ErrorActionMode right) => left.Equals(right);
        public static bool operator !=(ErrorActionMode left, ErrorActionMode right) => !left.Equals(right);

        public static explicit operator string(ErrorActionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ErrorActionMode other && Equals(other);
        public bool Equals(ErrorActionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationType : IEquatable<ExtendedLocationType>
    {
        private readonly string _value;

        private ExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure Edge Zones location type
        /// </summary>
        public static ExtendedLocationType EdgeZone { get; } = new ExtendedLocationType("EdgeZone");
        /// <summary>
        /// Azure Custom Locations type
        /// </summary>
        public static ExtendedLocationType CustomLocation { get; } = new ExtendedLocationType("CustomLocation");

        public static bool operator ==(ExtendedLocationType left, ExtendedLocationType right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationType left, ExtendedLocationType right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationType other && Equals(other);
        public bool Equals(ExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the ReconciliationPolicy
    /// </summary>
    [EnumType]
    public readonly struct ReconciliationState : IEquatable<ReconciliationState>
    {
        private readonly string _value;

        private ReconciliationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Reconciliation is inactive
        /// </summary>
        public static ReconciliationState Inactive { get; } = new ReconciliationState("inactive");
        /// <summary>
        /// Reconciliation is active
        /// </summary>
        public static ReconciliationState Active { get; } = new ReconciliationState("active");

        public static bool operator ==(ReconciliationState left, ReconciliationState right) => left.Equals(right);
        public static bool operator !=(ReconciliationState left, ReconciliationState right) => !left.Equals(right);

        public static explicit operator string(ReconciliationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReconciliationState other && Equals(other);
        public bool Equals(ReconciliationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of resource
    /// </summary>
    [EnumType]
    public readonly struct ResourceState : IEquatable<ResourceState>
    {
        private readonly string _value;

        private ResourceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Resource is active
        /// </summary>
        public static ResourceState Active { get; } = new ResourceState("active");
        /// <summary>
        /// Resource is inactive
        /// </summary>
        public static ResourceState Inactive { get; } = new ResourceState("inactive");

        public static bool operator ==(ResourceState left, ResourceState right) => left.Equals(right);
        public static bool operator !=(ResourceState left, ResourceState right) => !left.Equals(right);

        public static explicit operator string(ResourceState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceState other && Equals(other);
        public bool Equals(ResourceState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
