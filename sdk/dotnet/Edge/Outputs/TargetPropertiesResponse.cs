// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Edge.Outputs
{

    /// <summary>
    /// Target Properties
    /// </summary>
    [OutputType]
    public sealed class TargetPropertiesResponse
    {
        /// <summary>
        /// List of capabilities
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// ArmId of Context
        /// </summary>
        public readonly string ContextId;
        /// <summary>
        /// Description of target
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name of target
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Hierarchy Level
        /// </summary>
        public readonly string HierarchyLevel;
        /// <summary>
        /// Provisioning state of resource
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Scope of the target resource
        /// </summary>
        public readonly string? SolutionScope;
        /// <summary>
        /// State of resource
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Status of target
        /// </summary>
        public readonly Outputs.DeploymentStatusResponse Status;
        /// <summary>
        /// target spec
        /// </summary>
        public readonly object TargetSpecification;

        [OutputConstructor]
        private TargetPropertiesResponse(
            ImmutableArray<string> capabilities,

            string contextId,

            string description,

            string displayName,

            string hierarchyLevel,

            string provisioningState,

            string? solutionScope,

            string? state,

            Outputs.DeploymentStatusResponse status,

            object targetSpecification)
        {
            Capabilities = capabilities;
            ContextId = contextId;
            Description = description;
            DisplayName = displayName;
            HierarchyLevel = hierarchyLevel;
            ProvisioningState = provisioningState;
            SolutionScope = solutionScope;
            State = state;
            Status = status;
            TargetSpecification = targetSpecification;
        }
    }
}
