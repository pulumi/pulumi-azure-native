// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Edge
{
    public static class GetSolution
    {
        /// <summary>
        /// Get a Solution resource
        /// 
        /// Uses Azure REST API version 2025-06-01.
        /// </summary>
        public static Task<GetSolutionResult> InvokeAsync(GetSolutionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSolutionResult>("azure-native:edge:getSolution", args ?? new GetSolutionArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Solution resource
        /// 
        /// Uses Azure REST API version 2025-06-01.
        /// </summary>
        public static Output<GetSolutionResult> Invoke(GetSolutionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSolutionResult>("azure-native:edge:getSolution", args ?? new GetSolutionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Solution resource
        /// 
        /// Uses Azure REST API version 2025-06-01.
        /// </summary>
        public static Output<GetSolutionResult> Invoke(GetSolutionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSolutionResult>("azure-native:edge:getSolution", args ?? new GetSolutionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSolutionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the solution
        /// </summary>
        [Input("solutionName", required: true)]
        public string SolutionName { get; set; } = null!;

        /// <summary>
        /// Name of the target
        /// </summary>
        [Input("targetName", required: true)]
        public string TargetName { get; set; } = null!;

        public GetSolutionArgs()
        {
        }
        public static new GetSolutionArgs Empty => new GetSolutionArgs();
    }

    public sealed class GetSolutionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the solution
        /// </summary>
        [Input("solutionName", required: true)]
        public Input<string> SolutionName { get; set; } = null!;

        /// <summary>
        /// Name of the target
        /// </summary>
        [Input("targetName", required: true)]
        public Input<string> TargetName { get; set; } = null!;

        public GetSolutionInvokeArgs()
        {
        }
        public static new GetSolutionInvokeArgs Empty => new GetSolutionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSolutionResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        public readonly string ETag;
        /// <summary>
        /// The complex type of the extended location.
        /// </summary>
        public readonly Outputs.AzureResourceManagerCommonTypesExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource-specific properties for this resource.
        /// </summary>
        public readonly Outputs.SolutionPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSolutionResult(
            string azureApiVersion,

            string eTag,

            Outputs.AzureResourceManagerCommonTypesExtendedLocationResponse? extendedLocation,

            string id,

            string name,

            Outputs.SolutionPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            ETag = eTag;
            ExtendedLocation = extendedLocation;
            Id = id;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Type = type;
        }
    }
}
