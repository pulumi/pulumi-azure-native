// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20230701Preview.Outputs
{

    /// <summary>
    /// Represents a scaling policy related to an average load of a metric/resource of a service.
    /// </summary>
    [OutputType]
    public sealed class AverageServiceLoadScalingTriggerResponse
    {
        /// <summary>
        /// Enumerates the ways that a service can be partitioned.
        /// Expected value is 'AverageServiceLoadTrigger'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The lower limit of the load below which a scale in operation should be performed.
        /// </summary>
        public readonly double LowerLoadThreshold;
        /// <summary>
        /// The name of the metric for which usage should be tracked.
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss".
        /// </summary>
        public readonly string ScaleInterval;
        /// <summary>
        /// The upper limit of the load beyond which a scale out operation should be performed.
        /// </summary>
        public readonly double UpperLoadThreshold;
        /// <summary>
        /// Flag determines whether only the load of primary replica should be considered for scaling. If set to true, then trigger will only consider the load of primary replicas of stateful service. If set to false, trigger will consider load of all replicas. This parameter cannot be set to true for stateless service.
        /// </summary>
        public readonly bool UseOnlyPrimaryLoad;

        [OutputConstructor]
        private AverageServiceLoadScalingTriggerResponse(
            string kind,

            double lowerLoadThreshold,

            string metricName,

            string scaleInterval,

            double upperLoadThreshold,

            bool useOnlyPrimaryLoad)
        {
            Kind = kind;
            LowerLoadThreshold = lowerLoadThreshold;
            MetricName = metricName;
            ScaleInterval = scaleInterval;
            UpperLoadThreshold = upperLoadThreshold;
            UseOnlyPrimaryLoad = useOnlyPrimaryLoad;
        }
    }
}
