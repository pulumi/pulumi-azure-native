// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20220601Preview.Inputs
{

    /// <summary>
    /// The properties of a stateless service resource.
    /// </summary>
    public sealed class StatelessServicePropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("correlationScheme")]
        private InputList<Inputs.ServiceCorrelationArgs>? _correlationScheme;

        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public InputList<Inputs.ServiceCorrelationArgs> CorrelationScheme
        {
            get => _correlationScheme ?? (_correlationScheme = new InputList<Inputs.ServiceCorrelationArgs>());
            set => _correlationScheme = value;
        }

        /// <summary>
        /// Specifies the move cost for the service.
        /// </summary>
        [Input("defaultMoveCost")]
        public InputUnion<string, Pulumi.AzureNative.ServiceFabric.V20220601Preview.MoveCost>? DefaultMoveCost { get; set; }

        /// <summary>
        /// The instance count.
        /// </summary>
        [Input("instanceCount", required: true)]
        public Input<int> InstanceCount { get; set; } = null!;

        /// <summary>
        /// MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
        /// </summary>
        [Input("minInstanceCount")]
        public Input<int>? MinInstanceCount { get; set; }

        /// <summary>
        /// MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
        /// </summary>
        [Input("minInstancePercentage")]
        public Input<int>? MinInstancePercentage { get; set; }

        /// <summary>
        /// Describes how the service is partitioned.
        /// </summary>
        [Input("partitionDescription", required: true)]
        public object PartitionDescription { get; set; } = null!;

        /// <summary>
        /// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
        /// </summary>
        [Input("placementConstraints")]
        public Input<string>? PlacementConstraints { get; set; }

        [Input("scalingPolicies")]
        private InputList<Inputs.ScalingPolicyArgs>? _scalingPolicies;

        /// <summary>
        /// Scaling policies for this service.
        /// </summary>
        public InputList<Inputs.ScalingPolicyArgs> ScalingPolicies
        {
            get => _scalingPolicies ?? (_scalingPolicies = new InputList<Inputs.ScalingPolicyArgs>());
            set => _scalingPolicies = value;
        }

        /// <summary>
        /// The kind of service (Stateless or Stateful).
        /// Expected value is 'Stateless'.
        /// </summary>
        [Input("serviceKind", required: true)]
        public Input<string> ServiceKind { get; set; } = null!;

        [Input("serviceLoadMetrics")]
        private InputList<Inputs.ServiceLoadMetricArgs>? _serviceLoadMetrics;

        /// <summary>
        /// The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </summary>
        public InputList<Inputs.ServiceLoadMetricArgs> ServiceLoadMetrics
        {
            get => _serviceLoadMetrics ?? (_serviceLoadMetrics = new InputList<Inputs.ServiceLoadMetricArgs>());
            set => _serviceLoadMetrics = value;
        }

        /// <summary>
        /// The activation Mode of the service package
        /// </summary>
        [Input("servicePackageActivationMode")]
        public InputUnion<string, Pulumi.AzureNative.ServiceFabric.V20220601Preview.ServicePackageActivationMode>? ServicePackageActivationMode { get; set; }

        [Input("servicePlacementPolicies")]
        private InputList<object>? _servicePlacementPolicies;

        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public InputList<object> ServicePlacementPolicies
        {
            get => _servicePlacementPolicies ?? (_servicePlacementPolicies = new InputList<object>());
            set => _servicePlacementPolicies = value;
        }

        /// <summary>
        /// The name of the service type
        /// </summary>
        [Input("serviceTypeName", required: true)]
        public Input<string> ServiceTypeName { get; set; } = null!;

        public StatelessServicePropertiesArgs()
        {
        }
        public static new StatelessServicePropertiesArgs Empty => new StatelessServicePropertiesArgs();
    }
}
