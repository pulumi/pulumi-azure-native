// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabric.V20160901.Outputs
{

    [OutputType]
    public sealed class NodeTypeDescriptionResponse
    {
        /// <summary>
        /// Ports used by applications
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? ApplicationPorts;
        /// <summary>
        /// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much of a resource a node has
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Capacities;
        /// <summary>
        /// The TCP cluster management endpoint port
        /// </summary>
        public readonly int ClientConnectionEndpointPort;
        /// <summary>
        /// Node type durability Level
        /// </summary>
        public readonly string? DurabilityLevel;
        /// <summary>
        /// System assigned application ports
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? EphemeralPorts;
        /// <summary>
        /// The HTTP cluster management endpoint port
        /// </summary>
        public readonly int HttpGatewayEndpointPort;
        /// <summary>
        /// Mark this as the primary node type
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// Name of the node type
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run
        /// </summary>
        public readonly ImmutableDictionary<string, string>? PlacementProperties;
        /// <summary>
        /// Endpoint used by reverse proxy
        /// </summary>
        public readonly int? ReverseProxyEndpointPort;
        /// <summary>
        /// The number of node instances in the node type
        /// </summary>
        public readonly int VmInstanceCount;

        [OutputConstructor]
        private NodeTypeDescriptionResponse(
            Outputs.EndpointRangeDescriptionResponse? applicationPorts,

            ImmutableDictionary<string, string>? capacities,

            int clientConnectionEndpointPort,

            string? durabilityLevel,

            Outputs.EndpointRangeDescriptionResponse? ephemeralPorts,

            int httpGatewayEndpointPort,

            bool isPrimary,

            string name,

            ImmutableDictionary<string, string>? placementProperties,

            int? reverseProxyEndpointPort,

            int vmInstanceCount)
        {
            ApplicationPorts = applicationPorts;
            Capacities = capacities;
            ClientConnectionEndpointPort = clientConnectionEndpointPort;
            DurabilityLevel = durabilityLevel;
            EphemeralPorts = ephemeralPorts;
            HttpGatewayEndpointPort = httpGatewayEndpointPort;
            IsPrimary = isPrimary;
            Name = name;
            PlacementProperties = placementProperties;
            ReverseProxyEndpointPort = reverseProxyEndpointPort;
            VmInstanceCount = vmInstanceCount;
        }
    }
}
