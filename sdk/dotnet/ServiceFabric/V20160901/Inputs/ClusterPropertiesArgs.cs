// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ServiceFabric.V20160901.Inputs
{

    /// <summary>
    /// The cluster resource properties
    /// </summary>
    public sealed class ClusterPropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The settings to enable AAD authentication on the cluster
        /// </summary>
        [Input("azureActiveDirectory")]
        public Input<Inputs.AzureActiveDirectoryArgs>? AzureActiveDirectory { get; set; }

        /// <summary>
        /// This primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.CertificateDescriptionArgs>? Certificate { get; set; }

        [Input("clientCertificateCommonNames")]
        private InputList<Inputs.ClientCertificateCommonNameArgs>? _clientCertificateCommonNames;

        /// <summary>
        ///  List of client certificates to whitelist based on common names
        /// </summary>
        public InputList<Inputs.ClientCertificateCommonNameArgs> ClientCertificateCommonNames
        {
            get => _clientCertificateCommonNames ?? (_clientCertificateCommonNames = new InputList<Inputs.ClientCertificateCommonNameArgs>());
            set => _clientCertificateCommonNames = value;
        }

        [Input("clientCertificateThumbprints")]
        private InputList<Inputs.ClientCertificateThumbprintArgs>? _clientCertificateThumbprints;

        /// <summary>
        /// The client thumbprint details ,it is used for client access for cluster operation
        /// </summary>
        public InputList<Inputs.ClientCertificateThumbprintArgs> ClientCertificateThumbprints
        {
            get => _clientCertificateThumbprints ?? (_clientCertificateThumbprints = new InputList<Inputs.ClientCertificateThumbprintArgs>());
            set => _clientCertificateThumbprints = value;
        }

        /// <summary>
        /// The ServiceFabric code version running in your cluster
        /// </summary>
        [Input("clusterCodeVersion")]
        public Input<string>? ClusterCodeVersion { get; set; }

        /// <summary>
        /// The storage diagnostics account configuration details
        /// </summary>
        [Input("diagnosticsStorageAccountConfig")]
        public Input<Inputs.DiagnosticsStorageAccountConfigArgs>? DiagnosticsStorageAccountConfig { get; set; }

        [Input("fabricSettings")]
        private InputList<Inputs.SettingsSectionDescriptionArgs>? _fabricSettings;

        /// <summary>
        /// List of custom fabric settings to configure the cluster.
        /// </summary>
        public InputList<Inputs.SettingsSectionDescriptionArgs> FabricSettings
        {
            get => _fabricSettings ?? (_fabricSettings = new InputList<Inputs.SettingsSectionDescriptionArgs>());
            set => _fabricSettings = value;
        }

        /// <summary>
        /// The http management endpoint of the cluster
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public Input<string> ManagementEndpoint { get; set; } = null!;

        [Input("nodeTypes", required: true)]
        private InputList<Inputs.NodeTypeDescriptionArgs>? _nodeTypes;

        /// <summary>
        /// The list of node types that make up the cluster
        /// </summary>
        public InputList<Inputs.NodeTypeDescriptionArgs> NodeTypes
        {
            get => _nodeTypes ?? (_nodeTypes = new InputList<Inputs.NodeTypeDescriptionArgs>());
            set => _nodeTypes = value;
        }

        /// <summary>
        /// Cluster reliability level indicates replica set size of system service
        /// </summary>
        [Input("reliabilityLevel")]
        public Input<string>? ReliabilityLevel { get; set; }

        /// <summary>
        /// The server certificate used by reverse proxy
        /// </summary>
        [Input("reverseProxyCertificate")]
        public Input<Inputs.CertificateDescriptionArgs>? ReverseProxyCertificate { get; set; }

        /// <summary>
        /// The policy to use when upgrading the cluster.
        /// </summary>
        [Input("upgradeDescription")]
        public Input<Inputs.ClusterUpgradePolicyArgs>? UpgradeDescription { get; set; }

        /// <summary>
        /// Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        /// <summary>
        /// The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
        /// </summary>
        [Input("vmImage")]
        public Input<string>? VmImage { get; set; }

        public ClusterPropertiesArgs()
        {
        }
    }
}
