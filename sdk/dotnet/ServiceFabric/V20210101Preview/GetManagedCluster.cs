// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20210101Preview
{
    public static class GetManagedCluster
    {
        /// <summary>
        /// The manged cluster resource
        /// </summary>
        public static Task<GetManagedClusterResult> InvokeAsync(GetManagedClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedClusterResult>("azure-native:servicefabric/v20210101preview:getManagedCluster", args ?? new GetManagedClusterArgs(), options.WithDefaults());

        /// <summary>
        /// The manged cluster resource
        /// </summary>
        public static Output<GetManagedClusterResult> Invoke(GetManagedClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetManagedClusterResult>("azure-native:servicefabric/v20210101preview:getManagedCluster", args ?? new GetManagedClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedClusterArgs()
        {
        }
    }

    public sealed class GetManagedClusterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagedClusterResult
    {
        /// <summary>
        /// List of add-on features to enable on the cluster.
        /// </summary>
        public readonly ImmutableArray<string> AddonFeatures;
        /// <summary>
        /// VM admin user password.
        /// </summary>
        public readonly string? AdminPassword;
        /// <summary>
        /// VM admin user name.
        /// </summary>
        public readonly string AdminUserName;
        /// <summary>
        /// Setting this to true enables RDP access to the VM. The default NSG rule opens RDP port to internet which can be overridden with custom Network Security Rules. The default value for this setting is false.
        /// </summary>
        public readonly bool? AllowRdpAccess;
        /// <summary>
        /// The policy used to clean up unused versions.
        /// </summary>
        public readonly Outputs.ApplicationTypeVersionsCleanupPolicyResponse? ApplicationTypeVersionsCleanupPolicy;
        /// <summary>
        /// The AAD authentication settings of the cluster.
        /// </summary>
        public readonly Outputs.AzureActiveDirectoryResponse? AzureActiveDirectory;
        /// <summary>
        /// The port used for client connections to the cluster.
        /// </summary>
        public readonly int? ClientConnectionPort;
        /// <summary>
        /// Client certificates that are allowed to manage the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClientCertificateResponse> Clients;
        /// <summary>
        /// List of thumbprints of the cluster certificates.
        /// </summary>
        public readonly ImmutableArray<string> ClusterCertificateThumbprints;
        /// <summary>
        /// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
        /// </summary>
        public readonly string? ClusterCodeVersion;
        /// <summary>
        /// A service generated unique identifier for the cluster resource.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The current state of the cluster.
        /// </summary>
        public readonly string ClusterState;
        /// <summary>
        /// Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0.
        /// </summary>
        public readonly string? ClusterUpgradeCadence;
        /// <summary>
        /// The cluster dns name.
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// Setting this to true enables automatic OS upgrade for the node types that are created using any platform OS image with version 'latest'. The default value for this setting is false.
        /// </summary>
        public readonly bool? EnableAutoOSUpgrade;
        /// <summary>
        /// Azure resource etag.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The list of custom fabric settings to configure the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.SettingsSectionDescriptionResponse> FabricSettings;
        /// <summary>
        /// The fully qualified domain name associated with the public load balancer of the cluster.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The port used for HTTP connections to the cluster.
        /// </summary>
        public readonly int? HttpGatewayConnectionPort;
        /// <summary>
        /// Azure resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The IPv4 address associated with the public load balancer of the cluster.
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Load balancing rules that are applied to the public load balancer of the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.LoadBalancingRuleResponse> LoadBalancingRules;
        /// <summary>
        /// Azure resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Azure resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Custom Network Security Rules that are applied to the virtual network of the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkSecurityRuleResponse> NetworkSecurityRules;
        /// <summary>
        /// The provisioning state of the managed cluster resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The sku of the managed cluster
        /// </summary>
        public readonly Outputs.SkuResponse? Sku;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Azure resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Azure resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagedClusterResult(
            ImmutableArray<string> addonFeatures,

            string? adminPassword,

            string adminUserName,

            bool? allowRdpAccess,

            Outputs.ApplicationTypeVersionsCleanupPolicyResponse? applicationTypeVersionsCleanupPolicy,

            Outputs.AzureActiveDirectoryResponse? azureActiveDirectory,

            int? clientConnectionPort,

            ImmutableArray<Outputs.ClientCertificateResponse> clients,

            ImmutableArray<string> clusterCertificateThumbprints,

            string? clusterCodeVersion,

            string clusterId,

            string clusterState,

            string? clusterUpgradeCadence,

            string dnsName,

            bool? enableAutoOSUpgrade,

            string etag,

            ImmutableArray<Outputs.SettingsSectionDescriptionResponse> fabricSettings,

            string fqdn,

            int? httpGatewayConnectionPort,

            string id,

            string ipv4Address,

            ImmutableArray<Outputs.LoadBalancingRuleResponse> loadBalancingRules,

            string location,

            string name,

            ImmutableArray<Outputs.NetworkSecurityRuleResponse> networkSecurityRules,

            string provisioningState,

            Outputs.SkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AddonFeatures = addonFeatures;
            AdminPassword = adminPassword;
            AdminUserName = adminUserName;
            AllowRdpAccess = allowRdpAccess;
            ApplicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            AzureActiveDirectory = azureActiveDirectory;
            ClientConnectionPort = clientConnectionPort;
            Clients = clients;
            ClusterCertificateThumbprints = clusterCertificateThumbprints;
            ClusterCodeVersion = clusterCodeVersion;
            ClusterId = clusterId;
            ClusterState = clusterState;
            ClusterUpgradeCadence = clusterUpgradeCadence;
            DnsName = dnsName;
            EnableAutoOSUpgrade = enableAutoOSUpgrade;
            Etag = etag;
            FabricSettings = fabricSettings;
            Fqdn = fqdn;
            HttpGatewayConnectionPort = httpGatewayConnectionPort;
            Id = id;
            Ipv4Address = ipv4Address;
            LoadBalancingRules = loadBalancingRules;
            Location = location;
            Name = name;
            NetworkSecurityRules = networkSecurityRules;
            ProvisioningState = provisioningState;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
