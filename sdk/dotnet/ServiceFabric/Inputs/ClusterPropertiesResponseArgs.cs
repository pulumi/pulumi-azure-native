// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ServiceFabric.Inputs
{

    /// <summary>
    /// Describes the cluster resource properties.
    /// </summary>
    public sealed class ClusterPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        [Input("addOnFeatures")]
        private InputList<string>? _addOnFeatures;

        /// <summary>
        /// The list of add-on features to enable in the cluster.
        /// </summary>
        public InputList<string> AddOnFeatures
        {
            get => _addOnFeatures ?? (_addOnFeatures = new InputList<string>());
            set => _addOnFeatures = value;
        }

        /// <summary>
        /// The policy used to clean up unused versions.
        /// </summary>
        [Input("applicationTypeVersionsCleanupPolicy")]
        public Input<Inputs.ApplicationTypeVersionsCleanupPolicyResponseArgs>? ApplicationTypeVersionsCleanupPolicy { get; set; }

        [Input("availableClusterVersions", required: true)]
        private InputList<Inputs.ClusterVersionDetailsResponseArgs>? _availableClusterVersions;

        /// <summary>
        /// The Service Fabric runtime versions available for this cluster.
        /// </summary>
        public InputList<Inputs.ClusterVersionDetailsResponseArgs> AvailableClusterVersions
        {
            get => _availableClusterVersions ?? (_availableClusterVersions = new InputList<Inputs.ClusterVersionDetailsResponseArgs>());
            set => _availableClusterVersions = value;
        }

        /// <summary>
        /// The AAD authentication settings of the cluster.
        /// </summary>
        [Input("azureActiveDirectory")]
        public Input<Inputs.AzureActiveDirectoryResponseArgs>? AzureActiveDirectory { get; set; }

        /// <summary>
        /// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.CertificateDescriptionResponseArgs>? Certificate { get; set; }

        /// <summary>
        /// Describes a list of server certificates referenced by common name that are used to secure the cluster.
        /// </summary>
        [Input("certificateCommonNames")]
        public Input<Inputs.ServerCertificateCommonNamesResponseArgs>? CertificateCommonNames { get; set; }

        [Input("clientCertificateCommonNames")]
        private InputList<Inputs.ClientCertificateCommonNameResponseArgs>? _clientCertificateCommonNames;

        /// <summary>
        /// The list of client certificates referenced by common name that are allowed to manage the cluster.
        /// </summary>
        public InputList<Inputs.ClientCertificateCommonNameResponseArgs> ClientCertificateCommonNames
        {
            get => _clientCertificateCommonNames ?? (_clientCertificateCommonNames = new InputList<Inputs.ClientCertificateCommonNameResponseArgs>());
            set => _clientCertificateCommonNames = value;
        }

        [Input("clientCertificateThumbprints")]
        private InputList<Inputs.ClientCertificateThumbprintResponseArgs>? _clientCertificateThumbprints;

        /// <summary>
        /// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
        /// </summary>
        public InputList<Inputs.ClientCertificateThumbprintResponseArgs> ClientCertificateThumbprints
        {
            get => _clientCertificateThumbprints ?? (_clientCertificateThumbprints = new InputList<Inputs.ClientCertificateThumbprintResponseArgs>());
            set => _clientCertificateThumbprints = value;
        }

        /// <summary>
        /// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
        /// </summary>
        [Input("clusterCodeVersion")]
        public Input<string>? ClusterCodeVersion { get; set; }

        /// <summary>
        /// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
        /// </summary>
        [Input("clusterEndpoint", required: true)]
        public Input<string> ClusterEndpoint { get; set; } = null!;

        /// <summary>
        /// A service generated unique identifier for the cluster resource.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The current state of the cluster.
        /// 
        ///   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
        ///   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
        ///   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
        ///   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
        ///   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
        ///   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
        ///   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
        ///   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
        ///   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
        ///   - Ready - Indicates that the cluster is in a stable state.
        /// </summary>
        [Input("clusterState", required: true)]
        public Input<string> ClusterState { get; set; } = null!;

        /// <summary>
        /// The storage account information for storing Service Fabric diagnostic logs.
        /// </summary>
        [Input("diagnosticsStorageAccountConfig")]
        public Input<Inputs.DiagnosticsStorageAccountConfigResponseArgs>? DiagnosticsStorageAccountConfig { get; set; }

        /// <summary>
        /// Indicates if the event store service is enabled.
        /// </summary>
        [Input("eventStoreServiceEnabled")]
        public Input<bool>? EventStoreServiceEnabled { get; set; }

        [Input("fabricSettings")]
        private InputList<Inputs.SettingsSectionDescriptionResponseArgs>? _fabricSettings;

        /// <summary>
        /// The list of custom fabric settings to configure the cluster.
        /// </summary>
        public InputList<Inputs.SettingsSectionDescriptionResponseArgs> FabricSettings
        {
            get => _fabricSettings ?? (_fabricSettings = new InputList<Inputs.SettingsSectionDescriptionResponseArgs>());
            set => _fabricSettings = value;
        }

        /// <summary>
        /// The http management endpoint of the cluster.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public Input<string> ManagementEndpoint { get; set; } = null!;

        [Input("nodeTypes", required: true)]
        private InputList<Inputs.NodeTypeDescriptionResponseArgs>? _nodeTypes;

        /// <summary>
        /// The list of node types in the cluster.
        /// </summary>
        public InputList<Inputs.NodeTypeDescriptionResponseArgs> NodeTypes
        {
            get => _nodeTypes ?? (_nodeTypes = new InputList<Inputs.NodeTypeDescriptionResponseArgs>());
            set => _nodeTypes = value;
        }

        /// <summary>
        /// The provisioning state of the cluster resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// 
        ///   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
        ///   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
        ///   - Silver - Run the System services with a target replica set count of 5.
        ///   - Gold - Run the System services with a target replica set count of 7.
        ///   - Platinum - Run the System services with a target replica set count of 9.
        /// </summary>
        [Input("reliabilityLevel")]
        public Input<string>? ReliabilityLevel { get; set; }

        /// <summary>
        /// The server certificate used by reverse proxy.
        /// </summary>
        [Input("reverseProxyCertificate")]
        public Input<Inputs.CertificateDescriptionResponseArgs>? ReverseProxyCertificate { get; set; }

        /// <summary>
        /// Describes a list of server certificates referenced by common name that are used to secure the cluster.
        /// </summary>
        [Input("reverseProxyCertificateCommonNames")]
        public Input<Inputs.ServerCertificateCommonNamesResponseArgs>? ReverseProxyCertificateCommonNames { get; set; }

        /// <summary>
        /// The policy to use when upgrading the cluster.
        /// </summary>
        [Input("upgradeDescription")]
        public Input<Inputs.ClusterUpgradePolicyResponseArgs>? UpgradeDescription { get; set; }

        /// <summary>
        /// The upgrade mode of the cluster when new Service Fabric runtime version is available.
        /// 
        ///   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
        ///   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
        /// </summary>
        [Input("upgradeMode")]
        public Input<string>? UpgradeMode { get; set; }

        /// <summary>
        /// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
        /// </summary>
        [Input("vmImage")]
        public Input<string>? VmImage { get; set; }

        public ClusterPropertiesResponseArgs()
        {
        }
    }
}
