// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.ServiceFabric.Inputs
{

    /// <summary>
    /// The service resource properties.
    /// </summary>
    public sealed class ServiceResourcePropertiesResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        [Input("correlationScheme")]
        public Input<Inputs.CorrelationSchemeListResponseGetArgs>? CorrelationScheme { get; set; }

        /// <summary>
        /// Specifies the move cost for the service.
        /// </summary>
        [Input("defaultMoveCost")]
        public Input<string>? DefaultMoveCost { get; set; }

        /// <summary>
        /// Describes how the service is partitioned.
        /// </summary>
        [Input("partitionDescription")]
        public Input<Inputs.PartitionSchemeDescriptionResponseGetArgs>? PartitionDescription { get; set; }

        /// <summary>
        /// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
        /// </summary>
        [Input("placementConstraints")]
        public Input<string>? PlacementConstraints { get; set; }

        /// <summary>
        /// The current deployment or provisioning state, which only appears in the response
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
        /// </summary>
        [Input("serviceDnsName")]
        public Input<string>? ServiceDnsName { get; set; }

        /// <summary>
        /// The kind of service (Stateless or Stateful).
        /// </summary>
        [Input("serviceKind", required: true)]
        public Input<string> ServiceKind { get; set; } = null!;

        /// <summary>
        /// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
        /// </summary>
        [Input("serviceLoadMetrics")]
        public Input<Inputs.ServiceLoadMetricsListResponseGetArgs>? ServiceLoadMetrics { get; set; }

        /// <summary>
        /// The activation Mode of the service package
        /// </summary>
        [Input("servicePackageActivationMode")]
        public Input<string>? ServicePackageActivationMode { get; set; }

        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        [Input("servicePlacementPolicies")]
        public Input<Inputs.ServicePlacementPoliciesListResponseGetArgs>? ServicePlacementPolicies { get; set; }

        /// <summary>
        /// The name of the service type
        /// </summary>
        [Input("serviceTypeName")]
        public Input<string>? ServiceTypeName { get; set; }

        public ServiceResourcePropertiesResponseGetArgs()
        {
        }
    }
}
