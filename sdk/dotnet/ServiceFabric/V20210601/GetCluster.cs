// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20210601
{
    public static class GetCluster
    {
        /// <summary>
        /// The cluster resource
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("azure-native:servicefabric/v20210601:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// The cluster resource
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClusterResult>("azure-native:servicefabric/v20210601:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClusterArgs()
        {
        }
    }

    public sealed class GetClusterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// The list of add-on features to enable in the cluster.
        /// </summary>
        public readonly ImmutableArray<string> AddOnFeatures;
        /// <summary>
        /// The policy used to clean up unused versions.
        /// </summary>
        public readonly Outputs.ApplicationTypeVersionsCleanupPolicyResponse? ApplicationTypeVersionsCleanupPolicy;
        /// <summary>
        /// The Service Fabric runtime versions available for this cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterVersionDetailsResponse> AvailableClusterVersions;
        /// <summary>
        /// The AAD authentication settings of the cluster.
        /// </summary>
        public readonly Outputs.AzureActiveDirectoryResponse? AzureActiveDirectory;
        /// <summary>
        /// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
        /// </summary>
        public readonly Outputs.CertificateDescriptionResponse? Certificate;
        /// <summary>
        /// Describes a list of server certificates referenced by common name that are used to secure the cluster.
        /// </summary>
        public readonly Outputs.ServerCertificateCommonNamesResponse? CertificateCommonNames;
        /// <summary>
        /// The list of client certificates referenced by common name that are allowed to manage the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClientCertificateCommonNameResponse> ClientCertificateCommonNames;
        /// <summary>
        /// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.ClientCertificateThumbprintResponse> ClientCertificateThumbprints;
        /// <summary>
        /// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
        /// </summary>
        public readonly string? ClusterCodeVersion;
        /// <summary>
        /// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
        /// </summary>
        public readonly string ClusterEndpoint;
        /// <summary>
        /// A service generated unique identifier for the cluster resource.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The current state of the cluster.
        /// 
        ///   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
        ///   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
        ///   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
        ///   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
        ///   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
        ///   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
        ///   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
        ///   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
        ///   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
        ///   - Ready - Indicates that the cluster is in a stable state.
        /// </summary>
        public readonly string ClusterState;
        /// <summary>
        /// The storage account information for storing Service Fabric diagnostic logs.
        /// </summary>
        public readonly Outputs.DiagnosticsStorageAccountConfigResponse? DiagnosticsStorageAccountConfig;
        /// <summary>
        /// Azure resource etag.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Indicates if the event store service is enabled.
        /// </summary>
        public readonly bool? EventStoreServiceEnabled;
        /// <summary>
        /// The list of custom fabric settings to configure the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.SettingsSectionDescriptionResponse> FabricSettings;
        /// <summary>
        /// Azure resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if infrastructure service manager is enabled.
        /// </summary>
        public readonly bool? InfrastructureServiceManager;
        /// <summary>
        /// Azure resource location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The http management endpoint of the cluster.
        /// </summary>
        public readonly string ManagementEndpoint;
        /// <summary>
        /// Azure resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of node types in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeTypeDescriptionResponse> NodeTypes;
        /// <summary>
        /// Indicates a list of notification channels for cluster events.
        /// </summary>
        public readonly ImmutableArray<Outputs.NotificationResponse> Notifications;
        /// <summary>
        /// The provisioning state of the cluster resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// 
        ///   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
        ///   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
        ///   - Silver - Run the System services with a target replica set count of 5.
        ///   - Gold - Run the System services with a target replica set count of 7.
        ///   - Platinum - Run the System services with a target replica set count of 9.
        /// </summary>
        public readonly string? ReliabilityLevel;
        /// <summary>
        /// The server certificate used by reverse proxy.
        /// </summary>
        public readonly Outputs.CertificateDescriptionResponse? ReverseProxyCertificate;
        /// <summary>
        /// Describes a list of server certificates referenced by common name that are used to secure the cluster.
        /// </summary>
        public readonly Outputs.ServerCertificateCommonNamesResponse? ReverseProxyCertificateCommonNames;
        /// <summary>
        /// This property controls the logical grouping of VMs in upgrade domains (UDs). This property can't be modified if a node type with multiple Availability Zones is already present in the cluster.
        /// </summary>
        public readonly string? SfZonalUpgradeMode;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Azure resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Azure resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The policy to use when upgrading the cluster.
        /// </summary>
        public readonly Outputs.ClusterUpgradePolicyResponse? UpgradeDescription;
        /// <summary>
        /// The upgrade mode of the cluster when new Service Fabric runtime version is available.
        /// </summary>
        public readonly string? UpgradeMode;
        /// <summary>
        /// Indicates the end date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC).
        /// </summary>
        public readonly string? UpgradePauseEndTimestampUtc;
        /// <summary>
        /// Indicates the start date and time to pause automatic runtime version upgrades on the cluster for an specific period of time on the cluster (UTC).
        /// </summary>
        public readonly string? UpgradePauseStartTimestampUtc;
        /// <summary>
        /// Indicates when new cluster runtime version upgrades will be applied after they are released. By default is Wave0. Only applies when **upgradeMode** is set to 'Automatic'.
        /// </summary>
        public readonly string? UpgradeWave;
        /// <summary>
        /// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
        /// </summary>
        public readonly string? VmImage;
        /// <summary>
        /// This property defines the upgrade mode for the virtual machine scale set, it is mandatory if a node type with multiple Availability Zones is added.
        /// </summary>
        public readonly string? VmssZonalUpgradeMode;
        /// <summary>
        /// Boolean to pause automatic runtime version upgrades to the cluster.
        /// </summary>
        public readonly bool? WaveUpgradePaused;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableArray<string> addOnFeatures,

            Outputs.ApplicationTypeVersionsCleanupPolicyResponse? applicationTypeVersionsCleanupPolicy,

            ImmutableArray<Outputs.ClusterVersionDetailsResponse> availableClusterVersions,

            Outputs.AzureActiveDirectoryResponse? azureActiveDirectory,

            Outputs.CertificateDescriptionResponse? certificate,

            Outputs.ServerCertificateCommonNamesResponse? certificateCommonNames,

            ImmutableArray<Outputs.ClientCertificateCommonNameResponse> clientCertificateCommonNames,

            ImmutableArray<Outputs.ClientCertificateThumbprintResponse> clientCertificateThumbprints,

            string? clusterCodeVersion,

            string clusterEndpoint,

            string clusterId,

            string clusterState,

            Outputs.DiagnosticsStorageAccountConfigResponse? diagnosticsStorageAccountConfig,

            string etag,

            bool? eventStoreServiceEnabled,

            ImmutableArray<Outputs.SettingsSectionDescriptionResponse> fabricSettings,

            string id,

            bool? infrastructureServiceManager,

            string location,

            string managementEndpoint,

            string name,

            ImmutableArray<Outputs.NodeTypeDescriptionResponse> nodeTypes,

            ImmutableArray<Outputs.NotificationResponse> notifications,

            string provisioningState,

            string? reliabilityLevel,

            Outputs.CertificateDescriptionResponse? reverseProxyCertificate,

            Outputs.ServerCertificateCommonNamesResponse? reverseProxyCertificateCommonNames,

            string? sfZonalUpgradeMode,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.ClusterUpgradePolicyResponse? upgradeDescription,

            string? upgradeMode,

            string? upgradePauseEndTimestampUtc,

            string? upgradePauseStartTimestampUtc,

            string? upgradeWave,

            string? vmImage,

            string? vmssZonalUpgradeMode,

            bool? waveUpgradePaused)
        {
            AddOnFeatures = addOnFeatures;
            ApplicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            AvailableClusterVersions = availableClusterVersions;
            AzureActiveDirectory = azureActiveDirectory;
            Certificate = certificate;
            CertificateCommonNames = certificateCommonNames;
            ClientCertificateCommonNames = clientCertificateCommonNames;
            ClientCertificateThumbprints = clientCertificateThumbprints;
            ClusterCodeVersion = clusterCodeVersion;
            ClusterEndpoint = clusterEndpoint;
            ClusterId = clusterId;
            ClusterState = clusterState;
            DiagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            Etag = etag;
            EventStoreServiceEnabled = eventStoreServiceEnabled;
            FabricSettings = fabricSettings;
            Id = id;
            InfrastructureServiceManager = infrastructureServiceManager;
            Location = location;
            ManagementEndpoint = managementEndpoint;
            Name = name;
            NodeTypes = nodeTypes;
            Notifications = notifications;
            ProvisioningState = provisioningState;
            ReliabilityLevel = reliabilityLevel;
            ReverseProxyCertificate = reverseProxyCertificate;
            ReverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            SfZonalUpgradeMode = sfZonalUpgradeMode;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UpgradeDescription = upgradeDescription;
            UpgradeMode = upgradeMode;
            UpgradePauseEndTimestampUtc = upgradePauseEndTimestampUtc;
            UpgradePauseStartTimestampUtc = upgradePauseStartTimestampUtc;
            UpgradeWave = upgradeWave;
            VmImage = vmImage;
            VmssZonalUpgradeMode = vmssZonalUpgradeMode;
            WaveUpgradePaused = waveUpgradePaused;
        }
    }
}
