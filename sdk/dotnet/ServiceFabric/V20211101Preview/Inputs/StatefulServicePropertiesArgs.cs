// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20211101Preview.Inputs
{

    /// <summary>
    /// The properties of a stateful service resource.
    /// </summary>
    public sealed class StatefulServicePropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("correlationScheme")]
        private InputList<Inputs.ServiceCorrelationArgs>? _correlationScheme;

        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public InputList<Inputs.ServiceCorrelationArgs> CorrelationScheme
        {
            get => _correlationScheme ?? (_correlationScheme = new InputList<Inputs.ServiceCorrelationArgs>());
            set => _correlationScheme = value;
        }

        /// <summary>
        /// Specifies the move cost for the service.
        /// </summary>
        [Input("defaultMoveCost")]
        public InputUnion<string, Pulumi.AzureNative.ServiceFabric.V20211101Preview.MoveCost>? DefaultMoveCost { get; set; }

        /// <summary>
        /// A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
        /// </summary>
        [Input("hasPersistedState")]
        public Input<bool>? HasPersistedState { get; set; }

        /// <summary>
        /// The minimum replica set size as a number.
        /// </summary>
        [Input("minReplicaSetSize")]
        public Input<int>? MinReplicaSetSize { get; set; }

        /// <summary>
        /// Describes how the service is partitioned.
        /// </summary>
        [Input("partitionDescription", required: true)]
        public object PartitionDescription { get; set; } = null!;

        /// <summary>
        /// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
        /// </summary>
        [Input("placementConstraints")]
        public Input<string>? PlacementConstraints { get; set; }

        /// <summary>
        /// The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format "hh:mm:ss".
        /// </summary>
        [Input("quorumLossWaitDuration")]
        public Input<string>? QuorumLossWaitDuration { get; set; }

        /// <summary>
        /// The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format "hh:mm:ss".
        /// </summary>
        [Input("replicaRestartWaitDuration")]
        public Input<string>? ReplicaRestartWaitDuration { get; set; }

        [Input("scalingPolicies")]
        private InputList<Inputs.ScalingPolicyArgs>? _scalingPolicies;

        /// <summary>
        /// Scaling policies for this service.
        /// </summary>
        public InputList<Inputs.ScalingPolicyArgs> ScalingPolicies
        {
            get => _scalingPolicies ?? (_scalingPolicies = new InputList<Inputs.ScalingPolicyArgs>());
            set => _scalingPolicies = value;
        }

        /// <summary>
        /// The kind of service (Stateless or Stateful).
        /// Expected value is 'Stateful'.
        /// </summary>
        [Input("serviceKind", required: true)]
        public Input<string> ServiceKind { get; set; } = null!;

        [Input("serviceLoadMetrics")]
        private InputList<Inputs.ServiceLoadMetricArgs>? _serviceLoadMetrics;

        /// <summary>
        /// The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </summary>
        public InputList<Inputs.ServiceLoadMetricArgs> ServiceLoadMetrics
        {
            get => _serviceLoadMetrics ?? (_serviceLoadMetrics = new InputList<Inputs.ServiceLoadMetricArgs>());
            set => _serviceLoadMetrics = value;
        }

        /// <summary>
        /// The activation Mode of the service package
        /// </summary>
        [Input("servicePackageActivationMode")]
        public InputUnion<string, Pulumi.AzureNative.ServiceFabric.V20211101Preview.ServicePackageActivationMode>? ServicePackageActivationMode { get; set; }

        [Input("servicePlacementPolicies")]
        private InputList<object>? _servicePlacementPolicies;

        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public InputList<object> ServicePlacementPolicies
        {
            get => _servicePlacementPolicies ?? (_servicePlacementPolicies = new InputList<object>());
            set => _servicePlacementPolicies = value;
        }

        /// <summary>
        /// The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601 format "hh:mm:ss".
        /// </summary>
        [Input("servicePlacementTimeLimit")]
        public Input<string>? ServicePlacementTimeLimit { get; set; }

        /// <summary>
        /// The name of the service type
        /// </summary>
        [Input("serviceTypeName", required: true)]
        public Input<string> ServiceTypeName { get; set; } = null!;

        /// <summary>
        /// The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format "hh:mm:ss".
        /// </summary>
        [Input("standByReplicaKeepDuration")]
        public Input<string>? StandByReplicaKeepDuration { get; set; }

        /// <summary>
        /// The target replica set size as a number.
        /// </summary>
        [Input("targetReplicaSetSize")]
        public Input<int>? TargetReplicaSetSize { get; set; }

        public StatefulServicePropertiesArgs()
        {
        }
    }
}
