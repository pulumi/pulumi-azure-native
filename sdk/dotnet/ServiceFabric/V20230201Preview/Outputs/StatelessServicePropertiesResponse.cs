// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20230201Preview.Outputs
{

    /// <summary>
    /// The properties of a stateless service resource.
    /// </summary>
    [OutputType]
    public sealed class StatelessServicePropertiesResponse
    {
        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceCorrelationResponse> CorrelationScheme;
        /// <summary>
        /// Specifies the move cost for the service.
        /// </summary>
        public readonly string? DefaultMoveCost;
        /// <summary>
        /// The instance count.
        /// </summary>
        public readonly int InstanceCount;
        /// <summary>
        /// MinInstanceCount is the minimum number of instances that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstanceCount computation -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
        /// </summary>
        public readonly int? MinInstanceCount;
        /// <summary>
        /// MinInstancePercentage is the minimum percentage of InstanceCount that must be up to meet the EnsureAvailability safety check during operations like upgrade or deactivate node. The actual number that is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if InstanceCount is set to -1, during MinInstancePercentage computation, -1 is first converted into the number of nodes on which the instances are allowed to be placed according to the placement constraints on the service.
        /// </summary>
        public readonly int? MinInstancePercentage;
        /// <summary>
        /// Describes how the service is partitioned.
        /// </summary>
        public readonly object PartitionDescription;
        /// <summary>
        /// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
        /// </summary>
        public readonly string? PlacementConstraints;
        /// <summary>
        /// The current deployment or provisioning state, which only appears in the response
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Scaling policies for this service.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingPolicyResponse> ScalingPolicies;
        /// <summary>
        /// Dns name used for the service. If this is specified, then the DNS name can be used to return the IP addresses of service endpoints for application layer protocols (e.g., HTTP).
        /// When updating serviceDnsName, old name may be temporarily resolvable. However, rely on new name.
        /// When removing serviceDnsName, removed name may temporarily be resolvable. Do not rely on the name being unresolvable.
        /// </summary>
        public readonly string? ServiceDnsName;
        /// <summary>
        /// The kind of service (Stateless or Stateful).
        /// Expected value is 'Stateless'.
        /// </summary>
        public readonly string ServiceKind;
        /// <summary>
        /// The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceLoadMetricResponse> ServiceLoadMetrics;
        /// <summary>
        /// The activation Mode of the service package
        /// </summary>
        public readonly string? ServicePackageActivationMode;
        /// <summary>
        /// A list that describes the correlation of the service with other services.
        /// </summary>
        public readonly ImmutableArray<object> ServicePlacementPolicies;
        /// <summary>
        /// The name of the service type
        /// </summary>
        public readonly string ServiceTypeName;

        [OutputConstructor]
        private StatelessServicePropertiesResponse(
            ImmutableArray<Outputs.ServiceCorrelationResponse> correlationScheme,

            string? defaultMoveCost,

            int instanceCount,

            int? minInstanceCount,

            int? minInstancePercentage,

            object partitionDescription,

            string? placementConstraints,

            string provisioningState,

            ImmutableArray<Outputs.ScalingPolicyResponse> scalingPolicies,

            string? serviceDnsName,

            string serviceKind,

            ImmutableArray<Outputs.ServiceLoadMetricResponse> serviceLoadMetrics,

            string? servicePackageActivationMode,

            ImmutableArray<object> servicePlacementPolicies,

            string serviceTypeName)
        {
            CorrelationScheme = correlationScheme;
            DefaultMoveCost = defaultMoveCost;
            InstanceCount = instanceCount;
            MinInstanceCount = minInstanceCount;
            MinInstancePercentage = minInstancePercentage;
            PartitionDescription = partitionDescription;
            PlacementConstraints = placementConstraints;
            ProvisioningState = provisioningState;
            ScalingPolicies = scalingPolicies;
            ServiceDnsName = serviceDnsName;
            ServiceKind = serviceKind;
            ServiceLoadMetrics = serviceLoadMetrics;
            ServicePackageActivationMode = servicePackageActivationMode;
            ServicePlacementPolicies = servicePlacementPolicies;
            ServiceTypeName = serviceTypeName;
        }
    }
}
