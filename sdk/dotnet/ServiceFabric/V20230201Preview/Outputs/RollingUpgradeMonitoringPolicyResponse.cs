// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20230201Preview.Outputs
{

    /// <summary>
    /// The policy used for monitoring the application upgrade
    /// </summary>
    [OutputType]
    public sealed class RollingUpgradeMonitoringPolicyResponse
    {
        /// <summary>
        /// The compensating action to perform when a Monitored upgrade encounters monitoring policy or health policy violations. Invalid indicates the failure action is invalid. Rollback specifies that the upgrade will start rolling back automatically. Manual indicates that the upgrade will switch to UnmonitoredManual upgrade mode.
        /// </summary>
        public readonly string FailureAction;
        /// <summary>
        /// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
        /// </summary>
        public readonly string HealthCheckRetryTimeout;
        /// <summary>
        /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
        /// </summary>
        public readonly string HealthCheckStableDuration;
        /// <summary>
        /// The amount of time to wait after completing an upgrade domain before applying health policies. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
        /// </summary>
        public readonly string HealthCheckWaitDuration;
        /// <summary>
        /// The amount of time each upgrade domain has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
        /// </summary>
        public readonly string UpgradeDomainTimeout;
        /// <summary>
        /// The amount of time the overall upgrade has to complete before FailureAction is executed. Cannot be larger than 12 hours. It is interpreted as a string representing an ISO 8601 duration with following format "hh:mm:ss.fff".
        /// </summary>
        public readonly string UpgradeTimeout;

        [OutputConstructor]
        private RollingUpgradeMonitoringPolicyResponse(
            string failureAction,

            string healthCheckRetryTimeout,

            string healthCheckStableDuration,

            string healthCheckWaitDuration,

            string upgradeDomainTimeout,

            string upgradeTimeout)
        {
            FailureAction = failureAction;
            HealthCheckRetryTimeout = healthCheckRetryTimeout;
            HealthCheckStableDuration = healthCheckStableDuration;
            HealthCheckWaitDuration = healthCheckWaitDuration;
            UpgradeDomainTimeout = upgradeDomainTimeout;
            UpgradeTimeout = upgradeTimeout;
        }
    }
}
