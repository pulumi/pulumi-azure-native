// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20240201Preview.Inputs
{

    /// <summary>
    /// Describes the policy used when upgrading the cluster.
    /// </summary>
    public sealed class ClusterUpgradePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster delta health policy defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
        /// </summary>
        [Input("deltaHealthPolicy")]
        public Input<Inputs.ClusterUpgradeDeltaHealthPolicyArgs>? DeltaHealthPolicy { get; set; }

        /// <summary>
        /// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
        /// </summary>
        [Input("forceRestart")]
        public Input<bool>? ForceRestart { get; set; }

        /// <summary>
        /// The cluster health policy defines a health policy used to evaluate the health of the cluster during a cluster upgrade.
        /// </summary>
        [Input("healthPolicy")]
        public Input<Inputs.ClusterHealthPolicyArgs>? HealthPolicy { get; set; }

        /// <summary>
        /// The cluster monitoring policy describes the parameters for monitoring an upgrade in Monitored mode.
        /// </summary>
        [Input("monitoringPolicy")]
        public Input<Inputs.ClusterMonitoringPolicyArgs>? MonitoringPolicy { get; set; }

        /// <summary>
        /// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues.
        /// When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues.
        /// The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// This value must be between 00:00:00 and 49710.06:28:15 (unsigned 32 bit integer for seconds)
        /// </summary>
        [Input("upgradeReplicaSetCheckTimeout")]
        public Input<string>? UpgradeReplicaSetCheckTimeout { get; set; }

        public ClusterUpgradePolicyArgs()
        {
        }
        public static new ClusterUpgradePolicyArgs Empty => new ClusterUpgradePolicyArgs();
    }
}
