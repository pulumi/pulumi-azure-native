// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20240201Preview
{
    public static class GetNodeType
    {
        /// <summary>
        /// Get a Service Fabric node type of a given managed cluster.
        /// </summary>
        public static Task<GetNodeTypeResult> InvokeAsync(GetNodeTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeTypeResult>("azure-native:servicefabric/v20240201preview:getNodeType", args ?? new GetNodeTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Service Fabric node type of a given managed cluster.
        /// </summary>
        public static Output<GetNodeTypeResult> Invoke(GetNodeTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeTypeResult>("azure-native:servicefabric/v20240201preview:getNodeType", args ?? new GetNodeTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the node type.
        /// </summary>
        [Input("nodeTypeName", required: true)]
        public string NodeTypeName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNodeTypeArgs()
        {
        }
        public static new GetNodeTypeArgs Empty => new GetNodeTypeArgs();
    }

    public sealed class GetNodeTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster resource.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the node type.
        /// </summary>
        [Input("nodeTypeName", required: true)]
        public Input<string> NodeTypeName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNodeTypeInvokeArgs()
        {
        }
        public static new GetNodeTypeInvokeArgs Empty => new GetNodeTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeTypeResult
    {
        /// <summary>
        /// Additional managed data disks.
        /// </summary>
        public readonly ImmutableArray<Outputs.VmssDataDiskResponse> AdditionalDataDisks;
        /// <summary>
        /// Specifies the settings for any additional secondary network interfaces to attach to the node type.
        /// </summary>
        public readonly ImmutableArray<Outputs.AdditionalNetworkInterfaceConfigurationResponse> AdditionalNetworkInterfaceConfigurations;
        /// <summary>
        /// The range of ports from which cluster assigned port to Service Fabric applications.
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? ApplicationPorts;
        /// <summary>
        /// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Capacities;
        /// <summary>
        /// Managed data disk letter. It can not use the reserved letter C or D and it can not change after created.
        /// </summary>
        public readonly string? DataDiskLetter;
        /// <summary>
        /// Disk size for the managed disk attached to the vms on the node type in GBs.
        /// </summary>
        public readonly int? DataDiskSizeGB;
        /// <summary>
        /// Managed data disk type. Specifies the storage account type for the managed disk
        /// </summary>
        public readonly string? DataDiskType;
        /// <summary>
        /// Specifies the resource id of the DSCP configuration to apply to the node type network interface.
        /// </summary>
        public readonly string? DscpConfigurationId;
        /// <summary>
        /// Specifies whether the network interface is accelerated networking-enabled.
        /// </summary>
        public readonly bool? EnableAcceleratedNetworking;
        /// <summary>
        /// Enable or disable the Host Encryption for the virtual machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself. Default: The Encryption at host will be disabled unless this property is set to true for the resource.
        /// </summary>
        public readonly bool? EnableEncryptionAtHost;
        /// <summary>
        /// Specifies whether each node is allocated its own public IPv4 address. This is only supported on secondary node types with custom Load Balancers.
        /// </summary>
        public readonly bool? EnableNodePublicIP;
        /// <summary>
        /// Specifies whether each node is allocated its own public IPv6 address. This is only supported on secondary node types with custom Load Balancers.
        /// </summary>
        public readonly bool? EnableNodePublicIPv6;
        /// <summary>
        /// Specifies whether the node type should be overprovisioned. It is only allowed for stateless node types.
        /// </summary>
        public readonly bool? EnableOverProvisioning;
        /// <summary>
        /// The range of ephemeral ports that nodes in this node type should be configured with.
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? EphemeralPorts;
        /// <summary>
        /// Specifies the eviction policy for virtual machines in a SPOT node type. Default is Delete.
        /// </summary>
        public readonly string? EvictionPolicy;
        /// <summary>
        /// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
        /// </summary>
        public readonly ImmutableArray<Outputs.FrontendConfigurationResponse> FrontendConfigurations;
        /// <summary>
        /// Specifies the full host group resource Id. This property is used for deploying on azure dedicated hosts.
        /// </summary>
        public readonly string? HostGroupId;
        /// <summary>
        /// Azure resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the VMs if there is capacity available and the VMs can be evicted at any time.
        /// </summary>
        public readonly bool? IsSpotVM;
        /// <summary>
        /// Indicates if the node type can only host Stateless workloads.
        /// </summary>
        public readonly bool? IsStateless;
        /// <summary>
        /// Indicates if scale set associated with the node type can be composed of multiple placement groups.
        /// </summary>
        public readonly bool? MultiplePlacementGroups;
        /// <summary>
        /// Azure resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies the NAT configuration on default public Load Balancer for the node type. This is only supported for node types use the default public Load Balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeTypeNatConfigResponse> NatConfigurations;
        /// <summary>
        /// Specifies the resource id of a NAT Gateway to attach to the subnet of this node type. Node type must use custom load balancer.
        /// </summary>
        public readonly string? NatGatewayId;
        /// <summary>
        /// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkSecurityRuleResponse> NetworkSecurityRules;
        /// <summary>
        /// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? PlacementProperties;
        /// <summary>
        /// The provisioning state of the node type resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Specifies whether secure boot should be enabled on the nodeType. Can only be used with TrustedLaunch SecurityType
        /// </summary>
        public readonly bool? SecureBootEnabled;
        /// <summary>
        /// Specifies the security type of the nodeType. Only Standard and TrustedLaunch are currently supported
        /// </summary>
        public readonly string? SecurityType;
        /// <summary>
        /// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version.
        /// </summary>
        public readonly string? ServiceArtifactReferenceId;
        /// <summary>
        /// The node type sku.
        /// </summary>
        public readonly Outputs.NodeTypeSkuResponse? Sku;
        /// <summary>
        /// Indicates the time duration after which the platform will not try to restore the VMSS SPOT instances specified as ISO 8601.
        /// </summary>
        public readonly string? SpotRestoreTimeout;
        /// <summary>
        /// Indicates the resource id of the subnet for the node type.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Azure resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Azure resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies whether the use public load balancer. If not specified and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity.
        /// </summary>
        public readonly bool? UseDefaultPublicLoadBalancer;
        /// <summary>
        /// Indicates whether to use ephemeral os disk. The sku selected on the vmSize property needs to support this feature.
        /// </summary>
        public readonly bool? UseEphemeralOSDisk;
        /// <summary>
        /// Specifies whether to use the temporary disk for the service fabric data root, in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for stateless node types.
        /// </summary>
        public readonly bool? UseTempDataDisk;
        /// <summary>
        /// Set of extensions that should be installed onto the virtual machines.
        /// </summary>
        public readonly ImmutableArray<Outputs.VMSSExtensionResponse> VmExtensions;
        /// <summary>
        /// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
        /// </summary>
        public readonly string? VmImageOffer;
        /// <summary>
        /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically, Get Started -&gt;. Enter any required information and then click Save.
        /// </summary>
        public readonly Outputs.VmImagePlanResponse? VmImagePlan;
        /// <summary>
        /// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
        /// </summary>
        public readonly string? VmImagePublisher;
        /// <summary>
        /// Indicates the resource id of the vm image. This parameter is used for custom vm image.
        /// </summary>
        public readonly string? VmImageResourceId;
        /// <summary>
        /// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
        /// </summary>
        public readonly string? VmImageSku;
        /// <summary>
        /// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
        /// </summary>
        public readonly string? VmImageVersion;
        /// <summary>
        /// The number of nodes in the node type. &lt;br /&gt;&lt;br /&gt;**Values:** &lt;br /&gt;-1 - Use when auto scale rules are configured or sku.capacity is defined &lt;br /&gt; 0 - Not supported &lt;br /&gt; &gt;0 - Use for manual scale.
        /// </summary>
        public readonly int VmInstanceCount;
        /// <summary>
        /// Identities to assign to the virtual machine scale set under the node type.
        /// </summary>
        public readonly Outputs.VmManagedIdentityResponse? VmManagedIdentity;
        /// <summary>
        /// The secrets to install in the virtual machines.
        /// </summary>
        public readonly ImmutableArray<Outputs.VaultSecretGroupResponse> VmSecrets;
        /// <summary>
        /// Specifies the actions to be performed on the vms before bootstrapping the service fabric runtime.
        /// </summary>
        public readonly ImmutableArray<string> VmSetupActions;
        /// <summary>
        /// Indicates the resource id of the vm shared galleries image. This parameter is used for custom vm image.
        /// </summary>
        public readonly string? VmSharedGalleryImageId;
        /// <summary>
        /// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
        /// </summary>
        public readonly string? VmSize;
        /// <summary>
        /// Specifies the availability zones where the node type would span across. If the cluster is not spanning across availability zones, initiates az migration for the cluster.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetNodeTypeResult(
            ImmutableArray<Outputs.VmssDataDiskResponse> additionalDataDisks,

            ImmutableArray<Outputs.AdditionalNetworkInterfaceConfigurationResponse> additionalNetworkInterfaceConfigurations,

            Outputs.EndpointRangeDescriptionResponse? applicationPorts,

            ImmutableDictionary<string, string>? capacities,

            string? dataDiskLetter,

            int? dataDiskSizeGB,

            string? dataDiskType,

            string? dscpConfigurationId,

            bool? enableAcceleratedNetworking,

            bool? enableEncryptionAtHost,

            bool? enableNodePublicIP,

            bool? enableNodePublicIPv6,

            bool? enableOverProvisioning,

            Outputs.EndpointRangeDescriptionResponse? ephemeralPorts,

            string? evictionPolicy,

            ImmutableArray<Outputs.FrontendConfigurationResponse> frontendConfigurations,

            string? hostGroupId,

            string id,

            bool isPrimary,

            bool? isSpotVM,

            bool? isStateless,

            bool? multiplePlacementGroups,

            string name,

            ImmutableArray<Outputs.NodeTypeNatConfigResponse> natConfigurations,

            string? natGatewayId,

            ImmutableArray<Outputs.NetworkSecurityRuleResponse> networkSecurityRules,

            ImmutableDictionary<string, string>? placementProperties,

            string provisioningState,

            bool? secureBootEnabled,

            string? securityType,

            string? serviceArtifactReferenceId,

            Outputs.NodeTypeSkuResponse? sku,

            string? spotRestoreTimeout,

            string? subnetId,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            bool? useDefaultPublicLoadBalancer,

            bool? useEphemeralOSDisk,

            bool? useTempDataDisk,

            ImmutableArray<Outputs.VMSSExtensionResponse> vmExtensions,

            string? vmImageOffer,

            Outputs.VmImagePlanResponse? vmImagePlan,

            string? vmImagePublisher,

            string? vmImageResourceId,

            string? vmImageSku,

            string? vmImageVersion,

            int vmInstanceCount,

            Outputs.VmManagedIdentityResponse? vmManagedIdentity,

            ImmutableArray<Outputs.VaultSecretGroupResponse> vmSecrets,

            ImmutableArray<string> vmSetupActions,

            string? vmSharedGalleryImageId,

            string? vmSize,

            ImmutableArray<string> zones)
        {
            AdditionalDataDisks = additionalDataDisks;
            AdditionalNetworkInterfaceConfigurations = additionalNetworkInterfaceConfigurations;
            ApplicationPorts = applicationPorts;
            Capacities = capacities;
            DataDiskLetter = dataDiskLetter;
            DataDiskSizeGB = dataDiskSizeGB;
            DataDiskType = dataDiskType;
            DscpConfigurationId = dscpConfigurationId;
            EnableAcceleratedNetworking = enableAcceleratedNetworking;
            EnableEncryptionAtHost = enableEncryptionAtHost;
            EnableNodePublicIP = enableNodePublicIP;
            EnableNodePublicIPv6 = enableNodePublicIPv6;
            EnableOverProvisioning = enableOverProvisioning;
            EphemeralPorts = ephemeralPorts;
            EvictionPolicy = evictionPolicy;
            FrontendConfigurations = frontendConfigurations;
            HostGroupId = hostGroupId;
            Id = id;
            IsPrimary = isPrimary;
            IsSpotVM = isSpotVM;
            IsStateless = isStateless;
            MultiplePlacementGroups = multiplePlacementGroups;
            Name = name;
            NatConfigurations = natConfigurations;
            NatGatewayId = natGatewayId;
            NetworkSecurityRules = networkSecurityRules;
            PlacementProperties = placementProperties;
            ProvisioningState = provisioningState;
            SecureBootEnabled = secureBootEnabled;
            SecurityType = securityType;
            ServiceArtifactReferenceId = serviceArtifactReferenceId;
            Sku = sku;
            SpotRestoreTimeout = spotRestoreTimeout;
            SubnetId = subnetId;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UseDefaultPublicLoadBalancer = useDefaultPublicLoadBalancer;
            UseEphemeralOSDisk = useEphemeralOSDisk;
            UseTempDataDisk = useTempDataDisk;
            VmExtensions = vmExtensions;
            VmImageOffer = vmImageOffer;
            VmImagePlan = vmImagePlan;
            VmImagePublisher = vmImagePublisher;
            VmImageResourceId = vmImageResourceId;
            VmImageSku = vmImageSku;
            VmImageVersion = vmImageVersion;
            VmInstanceCount = vmInstanceCount;
            VmManagedIdentity = vmManagedIdentity;
            VmSecrets = vmSecrets;
            VmSetupActions = vmSetupActions;
            VmSharedGalleryImageId = vmSharedGalleryImageId;
            VmSize = vmSize;
            Zones = zones;
        }
    }
}
