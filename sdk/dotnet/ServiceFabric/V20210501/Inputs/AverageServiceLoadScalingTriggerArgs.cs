// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20210501.Inputs
{

    /// <summary>
    /// Represents a scaling policy related to an average load of a metric/resource of a service.
    /// </summary>
    public sealed class AverageServiceLoadScalingTriggerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enumerates the ways that a service can be partitioned.
        /// Expected value is 'AverageServiceLoadTrigger'.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The lower limit of the load below which a scale in operation should be performed.
        /// </summary>
        [Input("lowerLoadThreshold", required: true)]
        public Input<double> LowerLoadThreshold { get; set; } = null!;

        /// <summary>
        /// The name of the metric for which usage should be tracked.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601 format "hh:mm:ss".
        /// </summary>
        [Input("scaleInterval", required: true)]
        public Input<string> ScaleInterval { get; set; } = null!;

        /// <summary>
        /// The upper limit of the load beyond which a scale out operation should be performed.
        /// </summary>
        [Input("upperLoadThreshold", required: true)]
        public Input<double> UpperLoadThreshold { get; set; } = null!;

        /// <summary>
        /// Flag determines whether only the load of primary replica should be considered for scaling. If set to true, then trigger will only consider the load of primary replicas of stateful service. If set to false, trigger will consider load of all replicas. This parameter cannot be set to true for stateless service.
        /// </summary>
        [Input("useOnlyPrimaryLoad", required: true)]
        public Input<bool> UseOnlyPrimaryLoad { get; set; } = null!;

        public AverageServiceLoadScalingTriggerArgs()
        {
        }
        public static new AverageServiceLoadScalingTriggerArgs Empty => new AverageServiceLoadScalingTriggerArgs();
    }
}
