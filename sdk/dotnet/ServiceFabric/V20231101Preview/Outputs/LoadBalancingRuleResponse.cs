// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20231101Preview.Outputs
{

    /// <summary>
    /// Describes a load balancing rule.
    /// </summary>
    [OutputType]
    public sealed class LoadBalancingRuleResponse
    {
        /// <summary>
        /// The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
        /// </summary>
        public readonly int BackendPort;
        /// <summary>
        /// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.
        /// </summary>
        public readonly int FrontendPort;
        /// <summary>
        /// The load distribution policy for this rule.
        /// </summary>
        public readonly string? LoadDistribution;
        /// <summary>
        /// The prob port used by the load balancing rule. Acceptable values are between 1 and 65535.
        /// </summary>
        public readonly int? ProbePort;
        /// <summary>
        /// the reference to the load balancer probe used by the load balancing rule.
        /// </summary>
        public readonly string ProbeProtocol;
        /// <summary>
        /// The probe request path. Only supported for HTTP/HTTPS probes.
        /// </summary>
        public readonly string? ProbeRequestPath;
        /// <summary>
        /// The reference to the transport protocol used by the load balancing rule.
        /// </summary>
        public readonly string Protocol;

        [OutputConstructor]
        private LoadBalancingRuleResponse(
            int backendPort,

            int frontendPort,

            string? loadDistribution,

            int? probePort,

            string probeProtocol,

            string? probeRequestPath,

            string protocol)
        {
            BackendPort = backendPort;
            FrontendPort = frontendPort;
            LoadDistribution = loadDistribution;
            ProbePort = probePort;
            ProbeProtocol = probeProtocol;
            ProbeRequestPath = probeRequestPath;
            Protocol = protocol;
        }
    }
}
