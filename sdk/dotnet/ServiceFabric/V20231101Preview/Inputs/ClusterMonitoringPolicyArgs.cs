// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ServiceFabric.V20231101Preview.Inputs
{

    /// <summary>
    /// Describes the monitoring policies for the cluster upgrade.
    /// </summary>
    public sealed class ClusterMonitoringPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Input("healthCheckRetryTimeout", required: true)]
        public Input<string> HealthCheckRetryTimeout { get; set; } = null!;

        /// <summary>
        /// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Input("healthCheckStableDuration", required: true)]
        public Input<string> HealthCheckStableDuration { get; set; } = null!;

        /// <summary>
        /// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Input("healthCheckWaitDuration", required: true)]
        public Input<string> HealthCheckWaitDuration { get; set; } = null!;

        /// <summary>
        /// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Input("upgradeDomainTimeout", required: true)]
        public Input<string> UpgradeDomainTimeout { get; set; } = null!;

        /// <summary>
        /// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Input("upgradeTimeout", required: true)]
        public Input<string> UpgradeTimeout { get; set; } = null!;

        public ClusterMonitoringPolicyArgs()
        {
        }
        public static new ClusterMonitoringPolicyArgs Empty => new ClusterMonitoringPolicyArgs();
    }
}
