// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.ServiceFabric.V20200301.Outputs
{

    [OutputType]
    public sealed class NodeTypeDescriptionResponse
    {
        /// <summary>
        /// The range of ports from which cluster assigned port to Service Fabric applications.
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? ApplicationPorts;
        /// <summary>
        /// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Capacities;
        /// <summary>
        /// The TCP cluster management endpoint port.
        /// </summary>
        public readonly int ClientConnectionEndpointPort;
        /// <summary>
        /// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// 
        ///   - Bronze - No privileges. This is the default.
        ///   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
        ///   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
        /// </summary>
        public readonly string? DurabilityLevel;
        /// <summary>
        /// The range of ephemeral ports that nodes in this node type should be configured with.
        /// </summary>
        public readonly Outputs.EndpointRangeDescriptionResponse? EphemeralPorts;
        /// <summary>
        /// The HTTP cluster management endpoint port.
        /// </summary>
        public readonly int HttpGatewayEndpointPort;
        /// <summary>
        /// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// The name of the node type.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? PlacementProperties;
        /// <summary>
        /// The endpoint used by reverse proxy.
        /// </summary>
        public readonly int? ReverseProxyEndpointPort;
        /// <summary>
        /// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
        /// </summary>
        public readonly int VmInstanceCount;

        [OutputConstructor]
        private NodeTypeDescriptionResponse(
            Outputs.EndpointRangeDescriptionResponse? applicationPorts,

            ImmutableDictionary<string, string>? capacities,

            int clientConnectionEndpointPort,

            string? durabilityLevel,

            Outputs.EndpointRangeDescriptionResponse? ephemeralPorts,

            int httpGatewayEndpointPort,

            bool isPrimary,

            string name,

            ImmutableDictionary<string, string>? placementProperties,

            int? reverseProxyEndpointPort,

            int vmInstanceCount)
        {
            ApplicationPorts = applicationPorts;
            Capacities = capacities;
            ClientConnectionEndpointPort = clientConnectionEndpointPort;
            DurabilityLevel = durabilityLevel;
            EphemeralPorts = ephemeralPorts;
            HttpGatewayEndpointPort = httpGatewayEndpointPort;
            IsPrimary = isPrimary;
            Name = name;
            PlacementProperties = placementProperties;
            ReverseProxyEndpointPort = reverseProxyEndpointPort;
            VmInstanceCount = vmInstanceCount;
        }
    }
}
