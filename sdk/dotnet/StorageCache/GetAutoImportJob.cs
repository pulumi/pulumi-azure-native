// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache
{
    public static class GetAutoImportJob
    {
        /// <summary>
        /// Returns an auto import job.
        /// 
        /// Uses Azure REST API version 2025-07-01.
        /// </summary>
        public static Task<GetAutoImportJobResult> InvokeAsync(GetAutoImportJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAutoImportJobResult>("azure-native:storagecache:getAutoImportJob", args ?? new GetAutoImportJobArgs(), options.WithDefaults());

        /// <summary>
        /// Returns an auto import job.
        /// 
        /// Uses Azure REST API version 2025-07-01.
        /// </summary>
        public static Output<GetAutoImportJobResult> Invoke(GetAutoImportJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutoImportJobResult>("azure-native:storagecache:getAutoImportJob", args ?? new GetAutoImportJobInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns an auto import job.
        /// 
        /// Uses Azure REST API version 2025-07-01.
        /// </summary>
        public static Output<GetAutoImportJobResult> Invoke(GetAutoImportJobInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutoImportJobResult>("azure-native:storagecache:getAutoImportJob", args ?? new GetAutoImportJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAutoImportJobArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName", required: true)]
        public string AmlFilesystemName { get; set; } = null!;

        /// <summary>
        /// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("autoImportJobName", required: true)]
        public string AutoImportJobName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAutoImportJobArgs()
        {
        }
        public static new GetAutoImportJobArgs Empty => new GetAutoImportJobArgs();
    }

    public sealed class GetAutoImportJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName", required: true)]
        public Input<string> AmlFilesystemName { get; set; } = null!;

        /// <summary>
        /// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("autoImportJobName", required: true)]
        public Input<string> AutoImportJobName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAutoImportJobInvokeArgs()
        {
        }
        public static new GetAutoImportJobInvokeArgs Empty => new GetAutoImportJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetAutoImportJobResult
    {
        /// <summary>
        /// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        /// </summary>
        public readonly string? AdminStatus;
        /// <summary>
        /// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        /// </summary>
        public readonly ImmutableArray<string> AutoImportPrefixes;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// The storage account blob change feed status of the auto import job.
        /// </summary>
        public readonly Outputs.AutoImportJobResponseBlobSyncEvents BlobSyncEvents;
        /// <summary>
        /// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        /// </summary>
        public readonly string? ConflictResolutionMode;
        /// <summary>
        /// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        /// </summary>
        public readonly bool? EnableDeletions;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of directories imported during full scan.
        /// </summary>
        public readonly double ImportedDirectories;
        /// <summary>
        /// Number of files imported during full scan.
        /// </summary>
        public readonly double ImportedFiles;
        /// <summary>
        /// Number of symlinks imported during full scan.
        /// </summary>
        public readonly double ImportedSymlinks;
        /// <summary>
        /// The time (in UTC) of the last completed auto import job.
        /// </summary>
        public readonly string LastCompletionTimeUTC;
        /// <summary>
        /// The time (in UTC) the latest auto import job started.
        /// </summary>
        public readonly string LastStartedTimeUTC;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        /// </summary>
        public readonly double? MaximumErrors;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of preexisting directories during full scan.
        /// </summary>
        public readonly double PreexistingDirectories;
        /// <summary>
        /// Number of preexisting files during full scan.
        /// </summary>
        public readonly double PreexistingFiles;
        /// <summary>
        /// Number of preexisting symlinks during full scan.
        /// </summary>
        public readonly double PreexistingSymlinks;
        /// <summary>
        /// ARM provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Rate of blob import during full scan.
        /// </summary>
        public readonly double RateOfBlobImport;
        /// <summary>
        /// Rate of blobs walked during full scan.
        /// </summary>
        public readonly double RateOfBlobWalk;
        /// <summary>
        /// Date and time of when the full scan ended.
        /// </summary>
        public readonly string ScanEndTime;
        /// <summary>
        /// Date and time of when the currently running full scan began.
        /// </summary>
        public readonly string ScanStartTime;
        /// <summary>
        /// The state of the auto import operation.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Server-defined status code for auto import job.
        /// </summary>
        public readonly string StatusCode;
        /// <summary>
        /// Server-defined status message for auto import job.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Total number of blobs imported during full scan.
        /// </summary>
        public readonly double TotalBlobsImported;
        /// <summary>
        /// Total number of blobs walked during full scan.
        /// </summary>
        public readonly double TotalBlobsWalked;
        /// <summary>
        /// Total conflicts encountered during full scan.
        /// </summary>
        public readonly double TotalConflicts;
        /// <summary>
        /// Total errors encountered during full scan.
        /// </summary>
        public readonly double TotalErrors;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAutoImportJobResult(
            string? adminStatus,

            ImmutableArray<string> autoImportPrefixes,

            string azureApiVersion,

            Outputs.AutoImportJobResponseBlobSyncEvents blobSyncEvents,

            string? conflictResolutionMode,

            bool? enableDeletions,

            string id,

            double importedDirectories,

            double importedFiles,

            double importedSymlinks,

            string lastCompletionTimeUTC,

            string lastStartedTimeUTC,

            string location,

            double? maximumErrors,

            string name,

            double preexistingDirectories,

            double preexistingFiles,

            double preexistingSymlinks,

            string provisioningState,

            double rateOfBlobImport,

            double rateOfBlobWalk,

            string scanEndTime,

            string scanStartTime,

            string state,

            string statusCode,

            string statusMessage,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            double totalBlobsImported,

            double totalBlobsWalked,

            double totalConflicts,

            double totalErrors,

            string type)
        {
            AdminStatus = adminStatus;
            AutoImportPrefixes = autoImportPrefixes;
            AzureApiVersion = azureApiVersion;
            BlobSyncEvents = blobSyncEvents;
            ConflictResolutionMode = conflictResolutionMode;
            EnableDeletions = enableDeletions;
            Id = id;
            ImportedDirectories = importedDirectories;
            ImportedFiles = importedFiles;
            ImportedSymlinks = importedSymlinks;
            LastCompletionTimeUTC = lastCompletionTimeUTC;
            LastStartedTimeUTC = lastStartedTimeUTC;
            Location = location;
            MaximumErrors = maximumErrors;
            Name = name;
            PreexistingDirectories = preexistingDirectories;
            PreexistingFiles = preexistingFiles;
            PreexistingSymlinks = preexistingSymlinks;
            ProvisioningState = provisioningState;
            RateOfBlobImport = rateOfBlobImport;
            RateOfBlobWalk = rateOfBlobWalk;
            ScanEndTime = scanEndTime;
            ScanStartTime = scanStartTime;
            State = state;
            StatusCode = statusCode;
            StatusMessage = statusMessage;
            SystemData = systemData;
            Tags = tags;
            TotalBlobsImported = totalBlobsImported;
            TotalBlobsWalked = totalBlobsWalked;
            TotalConflicts = totalConflicts;
            TotalErrors = totalErrors;
            Type = type;
        }
    }
}
