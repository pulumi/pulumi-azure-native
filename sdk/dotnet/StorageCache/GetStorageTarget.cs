// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache
{
    public static class GetStorageTarget
    {
        /// <summary>
        /// Returns a Storage Target from a cache.
        /// Azure REST API version: 2023-05-01.
        /// </summary>
        public static Task<GetStorageTargetResult> InvokeAsync(GetStorageTargetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageTargetResult>("azure-native:storagecache:getStorageTarget", args ?? new GetStorageTargetArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a Storage Target from a cache.
        /// Azure REST API version: 2023-05-01.
        /// </summary>
        public static Output<GetStorageTargetResult> Invoke(GetStorageTargetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageTargetResult>("azure-native:storagecache:getStorageTarget", args ?? new GetStorageTargetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageTargetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("cacheName", required: true)]
        public string CacheName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of Storage Target.
        /// </summary>
        [Input("storageTargetName", required: true)]
        public string StorageTargetName { get; set; } = null!;

        public GetStorageTargetArgs()
        {
        }
        public static new GetStorageTargetArgs Empty => new GetStorageTargetArgs();
    }

    public sealed class GetStorageTargetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of Storage Target.
        /// </summary>
        [Input("storageTargetName", required: true)]
        public Input<string> StorageTargetName { get; set; } = null!;

        public GetStorageTargetInvokeArgs()
        {
        }
        public static new GetStorageTargetInvokeArgs Empty => new GetStorageTargetInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageTargetResult
    {
        /// <summary>
        /// The percentage of cache space allocated for this storage target
        /// </summary>
        public readonly int AllocationPercentage;
        /// <summary>
        /// Properties when targetType is blobNfs.
        /// </summary>
        public readonly Outputs.BlobNfsTargetResponse? BlobNfs;
        /// <summary>
        /// Properties when targetType is clfs.
        /// </summary>
        public readonly Outputs.ClfsTargetResponse? Clfs;
        /// <summary>
        /// Resource ID of the Storage Target.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of cache namespace junctions to target for namespace associations.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceJunctionResponse> Junctions;
        /// <summary>
        /// Region name string.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of the Storage Target.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties when targetType is nfs3.
        /// </summary>
        public readonly Outputs.Nfs3TargetResponse? Nfs3;
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Storage target operational state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Type of the Storage Target.
        /// </summary>
        public readonly string TargetType;
        /// <summary>
        /// Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Properties when targetType is unknown.
        /// </summary>
        public readonly Outputs.UnknownTargetResponse? Unknown;

        [OutputConstructor]
        private GetStorageTargetResult(
            int allocationPercentage,

            Outputs.BlobNfsTargetResponse? blobNfs,

            Outputs.ClfsTargetResponse? clfs,

            string id,

            ImmutableArray<Outputs.NamespaceJunctionResponse> junctions,

            string location,

            string name,

            Outputs.Nfs3TargetResponse? nfs3,

            string provisioningState,

            string? state,

            Outputs.SystemDataResponse systemData,

            string targetType,

            string type,

            Outputs.UnknownTargetResponse? unknown)
        {
            AllocationPercentage = allocationPercentage;
            BlobNfs = blobNfs;
            Clfs = clfs;
            Id = id;
            Junctions = junctions;
            Location = location;
            Name = name;
            Nfs3 = nfs3;
            ProvisioningState = provisioningState;
            State = state;
            SystemData = systemData;
            TargetType = targetType;
            Type = type;
            Unknown = unknown;
        }
    }
}
