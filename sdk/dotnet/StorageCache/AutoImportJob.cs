// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache
{
    /// <summary>
    /// An auto import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    /// 
    /// Uses Azure REST API version 2025-07-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:storagecache:AutoImportJob")]
    public partial class AutoImportJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        /// </summary>
        [Output("adminStatus")]
        public Output<string?> AdminStatus { get; private set; } = null!;

        /// <summary>
        /// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        /// </summary>
        [Output("autoImportPrefixes")]
        public Output<ImmutableArray<string>> AutoImportPrefixes { get; private set; } = null!;

        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// The storage account blob change feed status of the auto import job.
        /// </summary>
        [Output("blobSyncEvents")]
        public Output<Outputs.AutoImportJobResponseBlobSyncEvents> BlobSyncEvents { get; private set; } = null!;

        /// <summary>
        /// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        /// </summary>
        [Output("conflictResolutionMode")]
        public Output<string?> ConflictResolutionMode { get; private set; } = null!;

        /// <summary>
        /// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        /// </summary>
        [Output("enableDeletions")]
        public Output<bool?> EnableDeletions { get; private set; } = null!;

        /// <summary>
        /// Number of directories imported during full scan.
        /// </summary>
        [Output("importedDirectories")]
        public Output<double> ImportedDirectories { get; private set; } = null!;

        /// <summary>
        /// Number of files imported during full scan.
        /// </summary>
        [Output("importedFiles")]
        public Output<double> ImportedFiles { get; private set; } = null!;

        /// <summary>
        /// Number of symlinks imported during full scan.
        /// </summary>
        [Output("importedSymlinks")]
        public Output<double> ImportedSymlinks { get; private set; } = null!;

        /// <summary>
        /// The time (in UTC) of the last completed auto import job.
        /// </summary>
        [Output("lastCompletionTimeUTC")]
        public Output<string> LastCompletionTimeUTC { get; private set; } = null!;

        /// <summary>
        /// The time (in UTC) the latest auto import job started.
        /// </summary>
        [Output("lastStartedTimeUTC")]
        public Output<string> LastStartedTimeUTC { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        /// </summary>
        [Output("maximumErrors")]
        public Output<double?> MaximumErrors { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of preexisting directories during full scan.
        /// </summary>
        [Output("preexistingDirectories")]
        public Output<double> PreexistingDirectories { get; private set; } = null!;

        /// <summary>
        /// Number of preexisting files during full scan.
        /// </summary>
        [Output("preexistingFiles")]
        public Output<double> PreexistingFiles { get; private set; } = null!;

        /// <summary>
        /// Number of preexisting symlinks during full scan.
        /// </summary>
        [Output("preexistingSymlinks")]
        public Output<double> PreexistingSymlinks { get; private set; } = null!;

        /// <summary>
        /// ARM provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Rate of blob import during full scan.
        /// </summary>
        [Output("rateOfBlobImport")]
        public Output<double> RateOfBlobImport { get; private set; } = null!;

        /// <summary>
        /// Rate of blobs walked during full scan.
        /// </summary>
        [Output("rateOfBlobWalk")]
        public Output<double> RateOfBlobWalk { get; private set; } = null!;

        /// <summary>
        /// Date and time of when the full scan ended.
        /// </summary>
        [Output("scanEndTime")]
        public Output<string> ScanEndTime { get; private set; } = null!;

        /// <summary>
        /// Date and time of when the currently running full scan began.
        /// </summary>
        [Output("scanStartTime")]
        public Output<string> ScanStartTime { get; private set; } = null!;

        /// <summary>
        /// The state of the auto import operation.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Server-defined status code for auto import job.
        /// </summary>
        [Output("statusCode")]
        public Output<string> StatusCode { get; private set; } = null!;

        /// <summary>
        /// Server-defined status message for auto import job.
        /// </summary>
        [Output("statusMessage")]
        public Output<string> StatusMessage { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Total number of blobs imported during full scan.
        /// </summary>
        [Output("totalBlobsImported")]
        public Output<double> TotalBlobsImported { get; private set; } = null!;

        /// <summary>
        /// Total number of blobs walked during full scan.
        /// </summary>
        [Output("totalBlobsWalked")]
        public Output<double> TotalBlobsWalked { get; private set; } = null!;

        /// <summary>
        /// Total conflicts encountered during full scan.
        /// </summary>
        [Output("totalConflicts")]
        public Output<double> TotalConflicts { get; private set; } = null!;

        /// <summary>
        /// Total errors encountered during full scan.
        /// </summary>
        [Output("totalErrors")]
        public Output<double> TotalErrors { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AutoImportJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoImportJob(string name, AutoImportJobArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storagecache:AutoImportJob", name, args ?? new AutoImportJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoImportJob(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storagecache:AutoImportJob", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:storagecache/v20250701:AutoImportJob" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoImportJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoImportJob Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AutoImportJob(name, id, options);
        }
    }

    public sealed class AutoImportJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
        /// </summary>
        [Input("adminStatus")]
        public InputUnion<string, Pulumi.AzureNative.StorageCache.AdminStatus>? AdminStatus { get; set; }

        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName", required: true)]
        public Input<string> AmlFilesystemName { get; set; } = null!;

        /// <summary>
        /// Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("autoImportJobName")]
        public Input<string>? AutoImportJobName { get; set; }

        [Input("autoImportPrefixes")]
        private InputList<string>? _autoImportPrefixes;

        /// <summary>
        /// An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
        /// </summary>
        public InputList<string> AutoImportPrefixes
        {
            get => _autoImportPrefixes ?? (_autoImportPrefixes = new InputList<string>());
            set => _autoImportPrefixes = value;
        }

        /// <summary>
        /// How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.
        /// </summary>
        [Input("conflictResolutionMode")]
        public InputUnion<string, Pulumi.AzureNative.StorageCache.ConflictResolutionMode>? ConflictResolutionMode { get; set; }

        /// <summary>
        /// Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
        /// </summary>
        [Input("enableDeletions")]
        public Input<bool>? EnableDeletions { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.
        /// </summary>
        [Input("maximumErrors")]
        public Input<double>? MaximumErrors { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AutoImportJobArgs()
        {
            AdminStatus = "Enable";
            ConflictResolutionMode = "Skip";
            EnableDeletions = false;
        }
        public static new AutoImportJobArgs Empty => new AutoImportJobArgs();
    }
}
