// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.StorageCache.V20191101
{
    public static class GetCache
    {
        public static Task<GetCacheResult> InvokeAsync(GetCacheArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azurerm:storagecache/v20191101:getCache", args ?? new GetCacheArgs(), options.WithVersion());
    }


    public sealed class GetCacheArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of Cache.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCacheArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// Region name string.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Name of Cache.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties of the Cache.
        /// </summary>
        public readonly Outputs.CacheResponsePropertiesResult Properties;
        /// <summary>
        /// SKU for the Cache.
        /// </summary>
        public readonly Outputs.CacheResponsePropertiesResult? Sku;
        /// <summary>
        /// ARM tags as name/value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the Cache; Microsoft.StorageCache/Cache
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCacheResult(
            string? location,

            string name,

            Outputs.CacheResponsePropertiesResult properties,

            Outputs.CacheResponsePropertiesResult? sku,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Location = location;
            Name = name;
            Properties = properties;
            Sku = sku;
            Tags = tags;
            Type = type;
        }
    }
}
