// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20230301Preview
{
    /// <summary>
    /// An AML file system instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    /// </summary>
    [AzureNativeResourceType("azure-native:storagecache/v20230301preview:amlFilesystem")]
    public partial class AmlFilesystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies encryption settings of the AML file system.
        /// </summary>
        [Output("encryptionSettings")]
        public Output<Outputs.AmlFilesystemEncryptionSettingsResponse?> EncryptionSettings { get; private set; } = null!;

        /// <summary>
        /// Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space.
        /// </summary>
        [Output("filesystemSubnet")]
        public Output<string> FilesystemSubnet { get; private set; } = null!;

        /// <summary>
        /// Health of the AML file system.
        /// </summary>
        [Output("health")]
        public Output<Outputs.AmlFilesystemHealthResponse> Health { get; private set; } = null!;

        /// <summary>
        /// Hydration and archive settings and status
        /// </summary>
        [Output("hsm")]
        public Output<Outputs.AmlFilesystemResponseHsm?> Hsm { get; private set; } = null!;

        /// <summary>
        /// The managed identity used by the AML file system, if configured.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.AmlFilesystemIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The version of Lustre running in the AML file system
        /// </summary>
        [Output("lustreVersion")]
        public Output<string> LustreVersion { get; private set; } = null!;

        /// <summary>
        /// Start time of a 30-minute weekly maintenance window.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.AmlFilesystemResponseMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).
        /// </summary>
        [Output("mgsAddress")]
        public Output<string> MgsAddress { get; private set; } = null!;

        /// <summary>
        /// Recommended command to mount the AML file system
        /// </summary>
        [Output("mountCommand")]
        public Output<string> MountCommand { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ARM provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// SKU for the resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuNameResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// The size of the AML file system, in TiB. This might be rounded up.
        /// </summary>
        [Output("storageCapacityTiB")]
        public Output<double> StorageCapacityTiB { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput
        /// </summary>
        [Output("throughputProvisionedMBps")]
        public Output<int> ThroughputProvisionedMBps { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a AmlFilesystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AmlFilesystem(string name, AmlFilesystemArgs args, CustomResourceOptions? options = null)
            : base("azure-native:storagecache/v20230301preview:amlFilesystem", name, args ?? new AmlFilesystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AmlFilesystem(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:storagecache/v20230301preview:amlFilesystem", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AmlFilesystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AmlFilesystem Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AmlFilesystem(name, id, options);
        }
    }

    public sealed class AmlFilesystemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName")]
        public Input<string>? AmlFilesystemName { get; set; }

        /// <summary>
        /// Specifies encryption settings of the AML file system.
        /// </summary>
        [Input("encryptionSettings")]
        public Input<Inputs.AmlFilesystemEncryptionSettingsArgs>? EncryptionSettings { get; set; }

        /// <summary>
        /// Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space.
        /// </summary>
        [Input("filesystemSubnet", required: true)]
        public Input<string> FilesystemSubnet { get; set; } = null!;

        /// <summary>
        /// Hydration and archive settings and status
        /// </summary>
        [Input("hsm")]
        public Input<Inputs.AmlFilesystemHsmArgs>? Hsm { get; set; }

        /// <summary>
        /// The managed identity used by the AML file system, if configured.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.AmlFilesystemIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Start time of a 30-minute weekly maintenance window.
        /// </summary>
        [Input("maintenanceWindow", required: true)]
        public Input<Inputs.AmlFilesystemMaintenanceWindowArgs> MaintenanceWindow { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SKU for the resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuNameArgs>? Sku { get; set; }

        /// <summary>
        /// The size of the AML file system, in TiB. This might be rounded up.
        /// </summary>
        [Input("storageCapacityTiB", required: true)]
        public Input<double> StorageCapacityTiB { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public AmlFilesystemArgs()
        {
        }
        public static new AmlFilesystemArgs Empty => new AmlFilesystemArgs();
    }
}
