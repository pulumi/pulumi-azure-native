// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20190801Preview
{
    [Obsolete(@"Version 2019-08-01-preview will be removed in v2 of the provider.")]
    public static class GetCache
    {
        /// <summary>
        /// Returns a Cache.
        /// </summary>
        public static Task<GetCacheResult> InvokeAsync(GetCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azure-native:storagecache/v20190801preview:getCache", args ?? new GetCacheArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a Cache.
        /// </summary>
        public static Output<GetCacheResult> Invoke(GetCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCacheResult>("azure-native:storagecache/v20190801preview:getCache", args ?? new GetCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCacheArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache.
        /// </summary>
        [Input("cacheName", required: true)]
        public string CacheName { get; set; } = null!;

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCacheArgs()
        {
        }
        public static new GetCacheArgs Empty => new GetCacheArgs();
    }

    public sealed class GetCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCacheInvokeArgs()
        {
        }
        public static new GetCacheInvokeArgs Empty => new GetCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// The size of this cache's cache, in GB.
        /// </summary>
        public readonly int? CacheSizeGB;
        /// <summary>
        /// Health of the cache.
        /// </summary>
        public readonly Outputs.CacheHealthResponse Health;
        /// <summary>
        /// Fully qualified URL of the cache.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Region name string.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Array of IP addresses that can be used by clients mounting this Cache.
        /// </summary>
        public readonly ImmutableArray<string> MountAddresses;
        /// <summary>
        /// Name of cache.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Sku for the cache.
        /// </summary>
        public readonly Outputs.CacheResponseSku? Sku;
        /// <summary>
        /// Subnet used for the cache.
        /// </summary>
        public readonly string? Subnet;
        /// <summary>
        /// ARM tags as name/value pairs.
        /// </summary>
        public readonly object? Tags;
        /// <summary>
        /// Type for the cache; Microsoft.StorageCache/Cache
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Upgrade status of the cache.
        /// </summary>
        public readonly Outputs.CacheUpgradeStatusResponse? UpgradeStatus;

        [OutputConstructor]
        private GetCacheResult(
            int? cacheSizeGB,

            Outputs.CacheHealthResponse health,

            string id,

            string? location,

            ImmutableArray<string> mountAddresses,

            string name,

            string? provisioningState,

            Outputs.CacheResponseSku? sku,

            string? subnet,

            object? tags,

            string type,

            Outputs.CacheUpgradeStatusResponse? upgradeStatus)
        {
            CacheSizeGB = cacheSizeGB;
            Health = health;
            Id = id;
            Location = location;
            MountAddresses = mountAddresses;
            Name = name;
            ProvisioningState = provisioningState;
            Sku = sku;
            Subnet = subnet;
            Tags = tags;
            Type = type;
            UpgradeStatus = upgradeStatus;
        }
    }
}
