// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20190801Preview
{
    [Obsolete(@"Version 2019-08-01-preview will be removed in v2 of the provider.")]
    public static class GetStorageTarget
    {
        /// <summary>
        /// A storage system being cached by a Cache.
        /// </summary>
        public static Task<GetStorageTargetResult> InvokeAsync(GetStorageTargetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStorageTargetResult>("azure-native:storagecache/v20190801preview:getStorageTarget", args ?? new GetStorageTargetArgs(), options.WithDefaults());

        /// <summary>
        /// A storage system being cached by a Cache.
        /// </summary>
        public static Output<GetStorageTargetResult> Invoke(GetStorageTargetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStorageTargetResult>("azure-native:storagecache/v20190801preview:getStorageTarget", args ?? new GetStorageTargetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageTargetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache.
        /// </summary>
        [Input("cacheName", required: true)]
        public string CacheName { get; set; } = null!;

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of storage target.
        /// </summary>
        [Input("storageTargetName", required: true)]
        public string StorageTargetName { get; set; } = null!;

        public GetStorageTargetArgs()
        {
        }
    }

    public sealed class GetStorageTargetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of storage target.
        /// </summary>
        [Input("storageTargetName", required: true)]
        public Input<string> StorageTargetName { get; set; } = null!;

        public GetStorageTargetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStorageTargetResult
    {
        /// <summary>
        /// Properties when clfs target.
        /// </summary>
        public readonly Outputs.ClfsTargetResponse? Clfs;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of cache namespace to target namespace associations.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceJunctionResponse> Junctions;
        /// <summary>
        /// A fully qualified URL.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Properties when nfs3 target.
        /// </summary>
        public readonly Outputs.Nfs3TargetResponse? Nfs3;
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Type for storage target.
        /// </summary>
        public readonly string? TargetType;
        /// <summary>
        /// Type for the storage target; Microsoft.StorageCache/Cache/StorageTarget
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Properties when unknown target.
        /// </summary>
        public readonly Outputs.UnknownTargetResponse? Unknown;

        [OutputConstructor]
        private GetStorageTargetResult(
            Outputs.ClfsTargetResponse? clfs,

            string id,

            ImmutableArray<Outputs.NamespaceJunctionResponse> junctions,

            string name,

            Outputs.Nfs3TargetResponse? nfs3,

            string? provisioningState,

            string? targetType,

            string type,

            Outputs.UnknownTargetResponse? unknown)
        {
            Clfs = clfs;
            Id = id;
            Junctions = junctions;
            Name = name;
            Nfs3 = nfs3;
            ProvisioningState = provisioningState;
            TargetType = targetType;
            Type = type;
            Unknown = unknown;
        }
    }
}
