// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.StorageCache
{
    /// <summary>
    /// Type of the Storage Target.
    /// </summary>
    public partial class CachStorageTarget : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the Storage Target.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// StorageTarget properties
        /// </summary>
        [Output("properties")]
        public Output<Outputs.StorageTargetPropertiesResponseResult> Properties { get; private set; } = null!;

        /// <summary>
        /// Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CachStorageTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CachStorageTarget(string name, CachStorageTargetArgs args, CustomResourceOptions? options = null)
            : base("azurerm:storagecache:CachStorageTarget", name, args ?? new CachStorageTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CachStorageTarget(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:storagecache:CachStorageTarget", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CachStorageTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CachStorageTarget Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CachStorageTarget(name, id, options);
        }
    }

    public sealed class CachStorageTargetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// Name of the Storage Target. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// StorageTarget properties
        /// </summary>
        [Input("properties")]
        public Input<Inputs.StorageTargetPropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// Target resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public CachStorageTargetArgs()
        {
        }
    }
}
