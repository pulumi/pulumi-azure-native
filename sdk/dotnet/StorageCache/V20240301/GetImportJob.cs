// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20240301
{
    public static class GetImportJob
    {
        /// <summary>
        /// Returns an import job.
        /// </summary>
        public static Task<GetImportJobResult> InvokeAsync(GetImportJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImportJobResult>("azure-native:storagecache/v20240301:getImportJob", args ?? new GetImportJobArgs(), options.WithDefaults());

        /// <summary>
        /// Returns an import job.
        /// </summary>
        public static Output<GetImportJobResult> Invoke(GetImportJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImportJobResult>("azure-native:storagecache/v20240301:getImportJob", args ?? new GetImportJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImportJobArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName", required: true)]
        public string AmlFilesystemName { get; set; } = null!;

        /// <summary>
        /// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("importJobName", required: true)]
        public string ImportJobName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetImportJobArgs()
        {
        }
        public static new GetImportJobArgs Empty => new GetImportJobArgs();
    }

    public sealed class GetImportJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("amlFilesystemName", required: true)]
        public Input<string> AmlFilesystemName { get; set; } = null!;

        /// <summary>
        /// Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
        /// </summary>
        [Input("importJobName", required: true)]
        public Input<string> ImportJobName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetImportJobInvokeArgs()
        {
        }
        public static new GetImportJobInvokeArgs Empty => new GetImportJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetImportJobResult
    {
        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        public readonly double BlobsImportedPerSecond;
        /// <summary>
        /// A recent and frequently updated rate of blobs walked per second.
        /// </summary>
        public readonly double BlobsWalkedPerSecond;
        /// <summary>
        /// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.
        /// </summary>
        public readonly string? ConflictResolutionMode;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
        /// </summary>
        public readonly ImmutableArray<string> ImportPrefixes;
        /// <summary>
        /// The time of the last completed archive operation
        /// </summary>
        public readonly string LastCompletionTime;
        /// <summary>
        /// The time the latest archive operation started
        /// </summary>
        public readonly string LastStartedTime;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.
        /// </summary>
        public readonly int? MaximumErrors;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ARM provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The status message of the import job.
        /// </summary>
        public readonly string StatusMessage;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The total blobs that have been imported since import began.
        /// </summary>
        public readonly double TotalBlobsImported;
        /// <summary>
        /// The total blob objects walked.
        /// </summary>
        public readonly double TotalBlobsWalked;
        /// <summary>
        /// Number of conflicts in the import job.
        /// </summary>
        public readonly int TotalConflicts;
        /// <summary>
        /// Number of errors in the import job.
        /// </summary>
        public readonly int TotalErrors;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetImportJobResult(
            double blobsImportedPerSecond,

            double blobsWalkedPerSecond,

            string? conflictResolutionMode,

            string id,

            ImmutableArray<string> importPrefixes,

            string lastCompletionTime,

            string lastStartedTime,

            string location,

            int? maximumErrors,

            string name,

            string provisioningState,

            string state,

            string statusMessage,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            double totalBlobsImported,

            double totalBlobsWalked,

            int totalConflicts,

            int totalErrors,

            string type)
        {
            BlobsImportedPerSecond = blobsImportedPerSecond;
            BlobsWalkedPerSecond = blobsWalkedPerSecond;
            ConflictResolutionMode = conflictResolutionMode;
            Id = id;
            ImportPrefixes = importPrefixes;
            LastCompletionTime = lastCompletionTime;
            LastStartedTime = lastStartedTime;
            Location = location;
            MaximumErrors = maximumErrors;
            Name = name;
            ProvisioningState = provisioningState;
            State = state;
            StatusMessage = statusMessage;
            SystemData = systemData;
            Tags = tags;
            TotalBlobsImported = totalBlobsImported;
            TotalBlobsWalked = totalBlobsWalked;
            TotalConflicts = totalConflicts;
            TotalErrors = totalErrors;
            Type = type;
        }
    }
}
