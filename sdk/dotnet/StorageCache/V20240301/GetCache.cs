// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20240301
{
    public static class GetCache
    {
        /// <summary>
        /// Returns a cache.
        /// </summary>
        public static Task<GetCacheResult> InvokeAsync(GetCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCacheResult>("azure-native:storagecache/v20240301:getCache", args ?? new GetCacheArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a cache.
        /// </summary>
        public static Output<GetCacheResult> Invoke(GetCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCacheResult>("azure-native:storagecache/v20240301:getCache", args ?? new GetCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCacheArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("cacheName", required: true)]
        public string CacheName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCacheArgs()
        {
        }
        public static new GetCacheArgs Empty => new GetCacheArgs();
    }

    public sealed class GetCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCacheInvokeArgs()
        {
        }
        public static new GetCacheInvokeArgs Empty => new GetCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetCacheResult
    {
        /// <summary>
        /// The size of this Cache, in GB.
        /// </summary>
        public readonly int? CacheSizeGB;
        /// <summary>
        /// Specifies Directory Services settings of the cache.
        /// </summary>
        public readonly Outputs.CacheDirectorySettingsResponse? DirectoryServicesSettings;
        /// <summary>
        /// Specifies encryption settings of the cache.
        /// </summary>
        public readonly Outputs.CacheEncryptionSettingsResponse? EncryptionSettings;
        /// <summary>
        /// Health of the cache.
        /// </summary>
        public readonly Outputs.CacheHealthResponse Health;
        /// <summary>
        /// Resource ID of the cache.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the cache, if configured.
        /// </summary>
        public readonly Outputs.CacheIdentityResponse? Identity;
        /// <summary>
        /// Region name string.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Array of IPv4 addresses that can be used by clients mounting this cache.
        /// </summary>
        public readonly ImmutableArray<string> MountAddresses;
        /// <summary>
        /// Name of cache.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies network settings of the cache.
        /// </summary>
        public readonly Outputs.CacheNetworkSettingsResponse? NetworkSettings;
        /// <summary>
        /// Specifies the priming jobs defined in the cache.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrimingJobResponse> PrimingJobs;
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Specifies security settings of the cache.
        /// </summary>
        public readonly Outputs.CacheSecuritySettingsResponse? SecuritySettings;
        /// <summary>
        /// SKU for the cache.
        /// </summary>
        public readonly Outputs.CacheResponseSku? Sku;
        /// <summary>
        /// Specifies the space allocation percentage for each storage target in the cache.
        /// </summary>
        public readonly ImmutableArray<Outputs.StorageTargetSpaceAllocationResponse> SpaceAllocation;
        /// <summary>
        /// Subnet used for the cache.
        /// </summary>
        public readonly string? Subnet;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of the cache; Microsoft.StorageCache/Cache
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Upgrade settings of the cache.
        /// </summary>
        public readonly Outputs.CacheUpgradeSettingsResponse? UpgradeSettings;
        /// <summary>
        /// Upgrade status of the cache.
        /// </summary>
        public readonly Outputs.CacheUpgradeStatusResponse UpgradeStatus;
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetCacheResult(
            int? cacheSizeGB,

            Outputs.CacheDirectorySettingsResponse? directoryServicesSettings,

            Outputs.CacheEncryptionSettingsResponse? encryptionSettings,

            Outputs.CacheHealthResponse health,

            string id,

            Outputs.CacheIdentityResponse? identity,

            string? location,

            ImmutableArray<string> mountAddresses,

            string name,

            Outputs.CacheNetworkSettingsResponse? networkSettings,

            ImmutableArray<Outputs.PrimingJobResponse> primingJobs,

            string provisioningState,

            Outputs.CacheSecuritySettingsResponse? securitySettings,

            Outputs.CacheResponseSku? sku,

            ImmutableArray<Outputs.StorageTargetSpaceAllocationResponse> spaceAllocation,

            string? subnet,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.CacheUpgradeSettingsResponse? upgradeSettings,

            Outputs.CacheUpgradeStatusResponse upgradeStatus,

            ImmutableArray<string> zones)
        {
            CacheSizeGB = cacheSizeGB;
            DirectoryServicesSettings = directoryServicesSettings;
            EncryptionSettings = encryptionSettings;
            Health = health;
            Id = id;
            Identity = identity;
            Location = location;
            MountAddresses = mountAddresses;
            Name = name;
            NetworkSettings = networkSettings;
            PrimingJobs = primingJobs;
            ProvisioningState = provisioningState;
            SecuritySettings = securitySettings;
            Sku = sku;
            SpaceAllocation = spaceAllocation;
            Subnet = subnet;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UpgradeSettings = upgradeSettings;
            UpgradeStatus = upgradeStatus;
            Zones = zones;
        }
    }
}
