// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.StorageCache.V20240301.Outputs
{

    /// <summary>
    /// AML file system HSM settings.
    /// </summary>
    [OutputType]
    public sealed class AmlFilesystemHsmSettingsResponse
    {
        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider must have permission to create SAS tokens on the storage account.
        /// </summary>
        public readonly string Container;
        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get imported into the cluster namespace. This is only used during initial creation of the AML file system. It automatically creates an import job resource that can be deleted.
        /// </summary>
        public readonly string? ImportPrefix;
        /// <summary>
        /// Only blobs in the non-logging container that start with one of the paths/prefixes in this array get imported into the cluster namespace. This is only used during initial creation of the AML file system and has '/' as the default value. It automatically creates an import job resource that can be deleted.
        /// </summary>
        public readonly ImmutableArray<string> ImportPrefixesInitial;
        /// <summary>
        /// Resource ID of storage container used for logging events and errors.  Must be a separate container in the same storage account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the storage account.
        /// </summary>
        public readonly string LoggingContainer;

        [OutputConstructor]
        private AmlFilesystemHsmSettingsResponse(
            string container,

            string? importPrefix,

            ImmutableArray<string> importPrefixesInitial,

            string loggingContainer)
        {
            Container = container;
            ImportPrefix = importPrefix;
            ImportPrefixesInitial = importPrefixesInitial;
            LoggingContainer = loggingContainer;
        }
    }
}
