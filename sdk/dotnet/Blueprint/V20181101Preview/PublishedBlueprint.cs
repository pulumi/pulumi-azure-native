// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Blueprint.V20181101Preview
{
    /// <summary>
    /// Represents a published blueprint.
    /// </summary>
    public partial class PublishedBlueprint : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the published blueprint definition.
        /// </summary>
        [Output("blueprintName")]
        public Output<string?> BlueprintName { get; private set; } = null!;

        /// <summary>
        /// Version-specific change notes.
        /// </summary>
        [Output("changeNotes")]
        public Output<string?> ChangeNotes { get; private set; } = null!;

        /// <summary>
        /// Multi-line explain this resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// One-liner string explain this resource.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Name of this resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parameters required by this blueprint definition.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, Outputs.ParameterDefinitionResponse>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// Resource group placeholders defined by this blueprint definition.
        /// </summary>
        [Output("resourceGroups")]
        public Output<ImmutableDictionary<string, Outputs.ResourceGroupDefinitionResponse>?> ResourceGroups { get; private set; } = null!;

        /// <summary>
        /// Status of the blueprint. This field is readonly.
        /// </summary>
        [Output("status")]
        public Output<Outputs.BlueprintStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// The scope where this blueprint definition can be assigned.
        /// </summary>
        [Output("targetScope")]
        public Output<string?> TargetScope { get; private set; } = null!;

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PublishedBlueprint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PublishedBlueprint(string name, PublishedBlueprintArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:blueprint/v20181101preview:PublishedBlueprint", name, args ?? new PublishedBlueprintArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PublishedBlueprint(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:blueprint/v20181101preview:PublishedBlueprint", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PublishedBlueprint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PublishedBlueprint Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PublishedBlueprint(name, id, options);
        }
    }

    public sealed class PublishedBlueprintArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the published blueprint definition.
        /// </summary>
        [Input("blueprintName", required: true)]
        public Input<string> BlueprintName { get; set; } = null!;

        /// <summary>
        /// Version-specific change notes.
        /// </summary>
        [Input("changeNotes")]
        public Input<string>? ChangeNotes { get; set; }

        /// <summary>
        /// Multi-line explain this resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// One-liner string explain this resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.ParameterDefinitionArgs>? _parameters;

        /// <summary>
        /// Parameters required by this blueprint definition.
        /// </summary>
        public InputMap<Inputs.ParameterDefinitionArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.ParameterDefinitionArgs>());
            set => _parameters = value;
        }

        [Input("resourceGroups")]
        private InputMap<Inputs.ResourceGroupDefinitionArgs>? _resourceGroups;

        /// <summary>
        /// Resource group placeholders defined by this blueprint definition.
        /// </summary>
        public InputMap<Inputs.ResourceGroupDefinitionArgs> ResourceGroups
        {
            get => _resourceGroups ?? (_resourceGroups = new InputMap<Inputs.ResourceGroupDefinitionArgs>());
            set => _resourceGroups = value;
        }

        /// <summary>
        /// The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
        /// </summary>
        [Input("resourceScope", required: true)]
        public Input<string> ResourceScope { get; set; } = null!;

        /// <summary>
        /// The scope where this blueprint definition can be assigned.
        /// </summary>
        [Input("targetScope")]
        public Input<string>? TargetScope { get; set; }

        /// <summary>
        /// Version of the published blueprint definition.
        /// </summary>
        [Input("versionId", required: true)]
        public Input<string> VersionId { get; set; } = null!;

        public PublishedBlueprintArgs()
        {
        }
    }
}
