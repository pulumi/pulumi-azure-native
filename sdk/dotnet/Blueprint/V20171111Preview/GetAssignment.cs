// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Blueprint.V20171111Preview
{
    public static class GetAssignment
    {
        public static Task<GetAssignmentResult> InvokeAsync(GetAssignmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAssignmentResult>("azurerm:blueprint/v20171111preview:getAssignment", args ?? new GetAssignmentArgs(), options.WithVersion());
    }


    public sealed class GetAssignmentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// name of the assignment.
        /// </summary>
        [Input("assignmentName", required: true)]
        public string AssignmentName { get; set; } = null!;

        public GetAssignmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAssignmentResult
    {
        /// <summary>
        /// ID of the Blueprint definition resource.
        /// </summary>
        public readonly string? BlueprintId;
        /// <summary>
        /// Multi-line explain this resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// One-liner string explain this resource.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Managed Service Identity for this Blueprint assignment
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponseResult Identity;
        /// <summary>
        /// The location of this Blueprint assignment.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Defines how Blueprint-managed resources will be locked.
        /// </summary>
        public readonly Outputs.AssignmentLockSettingsResponseResult? Locks;
        /// <summary>
        /// Name of this resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Blueprint parameter values.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterValueBaseResponseResult> Parameters;
        /// <summary>
        /// State of the assignment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Names and locations of resource group placeholders.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ResourceGroupValueResponseResult> ResourceGroups;
        /// <summary>
        /// Status of Blueprint assignment. This field is readonly.
        /// </summary>
        public readonly Outputs.AssignmentStatusResponseResult Status;
        /// <summary>
        /// Type of this resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAssignmentResult(
            string? blueprintId,

            string? description,

            string? displayName,

            Outputs.ManagedServiceIdentityResponseResult identity,

            string location,

            Outputs.AssignmentLockSettingsResponseResult? locks,

            string name,

            ImmutableDictionary<string, Outputs.ParameterValueBaseResponseResult> parameters,

            string provisioningState,

            ImmutableDictionary<string, Outputs.ResourceGroupValueResponseResult> resourceGroups,

            Outputs.AssignmentStatusResponseResult status,

            string type)
        {
            BlueprintId = blueprintId;
            Description = description;
            DisplayName = displayName;
            Identity = identity;
            Location = location;
            Locks = locks;
            Name = name;
            Parameters = parameters;
            ProvisioningState = provisioningState;
            ResourceGroups = resourceGroups;
            Status = status;
            Type = type;
        }
    }
}
