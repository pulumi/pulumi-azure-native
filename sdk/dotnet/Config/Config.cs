// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.AzureNative
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("azure-native");

        private static readonly __Value<ImmutableArray<string>> _auxiliaryTenantIds = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("auxiliaryTenantIds"));
        public static ImmutableArray<string> AuxiliaryTenantIds
        {
            get => _auxiliaryTenantIds.Get();
            set => _auxiliaryTenantIds.Set(value);
        }

        private static readonly __Value<string?> _clientCertificatePassword = new __Value<string?>(() => __config.Get("clientCertificatePassword"));
        /// <summary>
        /// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client Certificate
        /// </summary>
        public static string? ClientCertificatePassword
        {
            get => _clientCertificatePassword.Get();
            set => _clientCertificatePassword.Set(value);
        }

        private static readonly __Value<string?> _clientCertificatePath = new __Value<string?>(() => __config.Get("clientCertificatePath"));
        /// <summary>
        /// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service Principal using a Client Certificate.
        /// </summary>
        public static string? ClientCertificatePath
        {
            get => _clientCertificatePath.Get();
            set => _clientCertificatePath.Set(value);
        }

        private static readonly __Value<string?> _clientId = new __Value<string?>(() => __config.Get("clientId"));
        /// <summary>
        /// The Client ID which should be used.
        /// </summary>
        public static string? ClientId
        {
            get => _clientId.Get();
            set => _clientId.Set(value);
        }

        private static readonly __Value<string?> _clientSecret = new __Value<string?>(() => __config.Get("clientSecret"));
        /// <summary>
        /// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
        /// </summary>
        public static string? ClientSecret
        {
            get => _clientSecret.Get();
            set => _clientSecret.Set(value);
        }

        private static readonly __Value<bool?> _disablePulumiPartnerId = new __Value<bool?>(() => __config.GetBoolean("disablePulumiPartnerId"));
        /// <summary>
        /// This will disable the Pulumi Partner ID which is used if a custom `partnerId` isn't specified.
        /// </summary>
        public static bool? DisablePulumiPartnerId
        {
            get => _disablePulumiPartnerId.Get();
            set => _disablePulumiPartnerId.Set(value);
        }

        private static readonly __Value<string?> _environment = new __Value<string?>(() => __config.Get("environment"));
        /// <summary>
        /// The Cloud Environment which should be used. Possible values are public, usgovernment, german, and china. Defaults to public.
        /// </summary>
        public static string? Environment
        {
            get => _environment.Get();
            set => _environment.Set(value);
        }

        private static readonly __Value<string?> _msiEndpoint = new __Value<string?>(() => __config.Get("msiEndpoint"));
        /// <summary>
        /// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected automatically. 
        /// </summary>
        public static string? MsiEndpoint
        {
            get => _msiEndpoint.Get();
            set => _msiEndpoint.Set(value);
        }

        private static readonly __Value<string?> _partnerId = new __Value<string?>(() => __config.Get("partnerId"));
        /// <summary>
        /// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
        /// </summary>
        public static string? PartnerId
        {
            get => _partnerId.Get();
            set => _partnerId.Set(value);
        }

        private static readonly __Value<string?> _subscriptionId = new __Value<string?>(() => __config.Get("subscriptionId"));
        /// <summary>
        /// The Subscription ID which should be used.
        /// </summary>
        public static string? SubscriptionId
        {
            get => _subscriptionId.Get();
            set => _subscriptionId.Set(value);
        }

        private static readonly __Value<string?> _tenantId = new __Value<string?>(() => __config.Get("tenantId"));
        /// <summary>
        /// The Tenant ID which should be used.
        /// </summary>
        public static string? TenantId
        {
            get => _tenantId.Get();
            set => _tenantId.Set(value);
        }

        private static readonly __Value<bool?> _useMsi = new __Value<bool?>(() => __config.GetBoolean("useMsi") ?? false);
        /// <summary>
        /// Allowed Managed Service Identity be used for Authentication.
        /// </summary>
        public static bool? UseMsi
        {
            get => _useMsi.Get();
            set => _useMsi.Set(value);
        }

    }
}
