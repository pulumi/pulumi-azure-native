// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources.V20201001.Inputs
{

    /// <summary>
    /// Properties of the Azure PowerShell script object.
    /// </summary>
    public sealed class AzurePowerShellScriptPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
        /// </summary>
        [Input("arguments")]
        public Input<string>? Arguments { get; set; }

        /// <summary>
        /// Azure PowerShell module version to be used.
        /// </summary>
        [Input("azPowerShellVersion", required: true)]
        public Input<string> AzPowerShellVersion { get; set; } = null!;

        /// <summary>
        /// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
        /// </summary>
        [Input("cleanupPreference")]
        public InputUnion<string, Pulumi.AzureNative.Resources.V20201001.CleanupOptions>? CleanupPreference { get; set; }

        /// <summary>
        /// Container settings.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerConfigurationArgs>? ContainerSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// The environment variables to pass over to the script.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// Uri for the script. This is the entry point for the external script.
        /// </summary>
        [Input("primaryScriptUri")]
        public Input<string>? PrimaryScriptUri { get; set; }

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
        /// </summary>
        [Input("retentionInterval", required: true)]
        public Input<string> RetentionInterval { get; set; } = null!;

        /// <summary>
        /// Script body.
        /// </summary>
        [Input("scriptContent")]
        public Input<string>? ScriptContent { get; set; }

        /// <summary>
        /// Storage Account settings.
        /// </summary>
        [Input("storageAccountSettings")]
        public Input<Inputs.StorageAccountConfigurationArgs>? StorageAccountSettings { get; set; }

        [Input("supportingScriptUris")]
        private InputList<string>? _supportingScriptUris;

        /// <summary>
        /// Supporting files for the external script.
        /// </summary>
        public InputList<string> SupportingScriptUris
        {
            get => _supportingScriptUris ?? (_supportingScriptUris = new InputList<string>());
            set => _supportingScriptUris = value;
        }

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public AzurePowerShellScriptPropertiesArgs()
        {
            CleanupPreference = "Always";
            Timeout = "P1D";
        }
        public static new AzurePowerShellScriptPropertiesArgs Empty => new AzurePowerShellScriptPropertiesArgs();
    }
}
