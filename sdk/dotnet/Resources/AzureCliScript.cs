// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources
{
    /// <summary>
    /// Object model for the Azure CLI script.
    /// API Version: 2020-10-01.
    /// Previous API Version: 2020-10-01. See https://github.com/pulumi/pulumi-azure-native/discussions/1834 for information on migrating from v1 to v2 of the provider.
    /// </summary>
    [AzureNativeResourceType("azure-native:resources:AzureCliScript")]
    public partial class AzureCliScript : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
        /// </summary>
        [Output("arguments")]
        public Output<string?> Arguments { get; private set; } = null!;

        /// <summary>
        /// Azure CLI module version to be used.
        /// </summary>
        [Output("azCliVersion")]
        public Output<string> AzCliVersion { get; private set; } = null!;

        /// <summary>
        /// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
        /// </summary>
        [Output("cleanupPreference")]
        public Output<string?> CleanupPreference { get; private set; } = null!;

        /// <summary>
        /// Container settings.
        /// </summary>
        [Output("containerSettings")]
        public Output<Outputs.ContainerConfigurationResponse?> ContainerSettings { get; private set; } = null!;

        /// <summary>
        /// The environment variables to pass over to the script.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.EnvironmentVariableResponse>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
        /// </summary>
        [Output("forceUpdateTag")]
        public Output<string?> ForceUpdateTag { get; private set; } = null!;

        /// <summary>
        /// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedServiceIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Type of the script.
        /// Expected value is 'AzureCLI'.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The location of the ACI and the storage account for the deployment script.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of this resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of script outputs.
        /// </summary>
        [Output("outputs")]
        public Output<ImmutableDictionary<string, object>> Outputs { get; private set; } = null!;

        /// <summary>
        /// Uri for the script. This is the entry point for the external script.
        /// </summary>
        [Output("primaryScriptUri")]
        public Output<string?> PrimaryScriptUri { get; private set; } = null!;

        /// <summary>
        /// State of the script execution. This only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
        /// </summary>
        [Output("retentionInterval")]
        public Output<string> RetentionInterval { get; private set; } = null!;

        /// <summary>
        /// Script body.
        /// </summary>
        [Output("scriptContent")]
        public Output<string?> ScriptContent { get; private set; } = null!;

        /// <summary>
        /// Contains the results of script execution.
        /// </summary>
        [Output("status")]
        public Output<Outputs.ScriptStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Storage Account settings.
        /// </summary>
        [Output("storageAccountSettings")]
        public Output<Outputs.StorageAccountConfigurationResponse?> StorageAccountSettings { get; private set; } = null!;

        /// <summary>
        /// Supporting files for the external script.
        /// </summary>
        [Output("supportingScriptUris")]
        public Output<ImmutableArray<string>> SupportingScriptUris { get; private set; } = null!;

        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
        /// </summary>
        [Output("timeout")]
        public Output<string?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AzureCliScript resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureCliScript(string name, AzureCliScriptArgs args, CustomResourceOptions? options = null)
            : base("azure-native:resources:AzureCliScript", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }

        private AzureCliScript(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:resources:AzureCliScript", name, null, MakeResourceOptions(options, id))
        {
        }

        private static AzureCliScriptArgs MakeArgs(AzureCliScriptArgs args)
        {
            args ??= new AzureCliScriptArgs();
            args.Kind = "AzureCLI";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20191001preview:AzureCliScript"},
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20201001:AzureCliScript"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureCliScript resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureCliScript Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AzureCliScript(name, id, options);
        }
    }

    public sealed class AzureCliScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
        /// </summary>
        [Input("arguments")]
        public Input<string>? Arguments { get; set; }

        /// <summary>
        /// Azure CLI module version to be used.
        /// </summary>
        [Input("azCliVersion", required: true)]
        public Input<string> AzCliVersion { get; set; } = null!;

        /// <summary>
        /// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
        /// </summary>
        [Input("cleanupPreference")]
        public InputUnion<string, Pulumi.AzureNative.Resources.CleanupOptions>? CleanupPreference { get; set; }

        /// <summary>
        /// Container settings.
        /// </summary>
        [Input("containerSettings")]
        public Input<Inputs.ContainerConfigurationArgs>? ContainerSettings { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.EnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// The environment variables to pass over to the script.
        /// </summary>
        public InputList<Inputs.EnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.EnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
        /// </summary>
        [Input("forceUpdateTag")]
        public Input<string>? ForceUpdateTag { get; set; }

        /// <summary>
        /// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Type of the script.
        /// Expected value is 'AzureCLI'.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The location of the ACI and the storage account for the deployment script.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Uri for the script. This is the entry point for the external script.
        /// </summary>
        [Input("primaryScriptUri")]
        public Input<string>? PrimaryScriptUri { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
        /// </summary>
        [Input("retentionInterval", required: true)]
        public Input<string> RetentionInterval { get; set; } = null!;

        /// <summary>
        /// Script body.
        /// </summary>
        [Input("scriptContent")]
        public Input<string>? ScriptContent { get; set; }

        /// <summary>
        /// Name of the deployment script.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        /// <summary>
        /// Storage Account settings.
        /// </summary>
        [Input("storageAccountSettings")]
        public Input<Inputs.StorageAccountConfigurationArgs>? StorageAccountSettings { get; set; }

        [Input("supportingScriptUris")]
        private InputList<string>? _supportingScriptUris;

        /// <summary>
        /// Supporting files for the external script.
        /// </summary>
        public InputList<string> SupportingScriptUris
        {
            get => _supportingScriptUris ?? (_supportingScriptUris = new InputList<string>());
            set => _supportingScriptUris = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public AzureCliScriptArgs()
        {
            CleanupPreference = "Always";
            Timeout = "P1D";
        }
        public static new AzureCliScriptArgs Empty => new AzureCliScriptArgs();
    }
}
