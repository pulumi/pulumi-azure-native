// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Resources.V20220801Preview
{
    /// <summary>
    /// denySettings Mode.
    /// </summary>
    [EnumType]
    public readonly struct DenySettingsMode : IEquatable<DenySettingsMode>
    {
        private readonly string _value;

        private DenySettingsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Authorized users are able to read and modify the resources, but cannot delete.
        /// </summary>
        public static DenySettingsMode DenyDelete { get; } = new DenySettingsMode("denyDelete");
        /// <summary>
        /// Authorized users can only read from a resource, but cannot modify or delete it.
        /// </summary>
        public static DenySettingsMode DenyWriteAndDelete { get; } = new DenySettingsMode("denyWriteAndDelete");
        /// <summary>
        /// No denyAssignments have been applied.
        /// </summary>
        public static DenySettingsMode None { get; } = new DenySettingsMode("none");

        public static bool operator ==(DenySettingsMode left, DenySettingsMode right) => left.Equals(right);
        public static bool operator !=(DenySettingsMode left, DenySettingsMode right) => !left.Equals(right);

        public static explicit operator string(DenySettingsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DenySettingsMode other && Equals(other);
        public bool Equals(DenySettingsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentStacksDeleteDetachEnum : IEquatable<DeploymentStacksDeleteDetachEnum>
    {
        private readonly string _value;

        private DeploymentStacksDeleteDetachEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentStacksDeleteDetachEnum Delete { get; } = new DeploymentStacksDeleteDetachEnum("delete");
        public static DeploymentStacksDeleteDetachEnum Detach { get; } = new DeploymentStacksDeleteDetachEnum("detach");

        public static bool operator ==(DeploymentStacksDeleteDetachEnum left, DeploymentStacksDeleteDetachEnum right) => left.Equals(right);
        public static bool operator !=(DeploymentStacksDeleteDetachEnum left, DeploymentStacksDeleteDetachEnum right) => !left.Equals(right);

        public static explicit operator string(DeploymentStacksDeleteDetachEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentStacksDeleteDetachEnum other && Equals(other);
        public bool Equals(DeploymentStacksDeleteDetachEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
