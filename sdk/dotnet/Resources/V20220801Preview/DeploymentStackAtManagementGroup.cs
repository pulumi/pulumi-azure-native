// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources.V20220801Preview
{
    /// <summary>
    /// Deployment stack object.
    /// </summary>
    [AzureNativeResourceType("azure-native:resources/v20220801preview:DeploymentStackAtManagementGroup")]
    public partial class DeploymentStackAtManagementGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines the behavior of resources that are not managed immediately after the stack is updated.
        /// </summary>
        [Output("actionOnUnmanage")]
        public Output<Outputs.DeploymentStackPropertiesResponseActionOnUnmanage> ActionOnUnmanage { get; private set; } = null!;

        /// <summary>
        /// The debug setting of the deployment.
        /// </summary>
        [Output("debugSetting")]
        public Output<Outputs.DeploymentStacksDebugSettingResponse?> DebugSetting { get; private set; } = null!;

        /// <summary>
        /// An array of resources that were deleted during the most recent update.
        /// </summary>
        [Output("deletedResources")]
        public Output<ImmutableArray<Outputs.ResourceReferenceResponse>> DeletedResources { get; private set; } = null!;

        /// <summary>
        /// Defines how resources deployed by the stack are locked.
        /// </summary>
        [Output("denySettings")]
        public Output<Outputs.DenySettingsResponse> DenySettings { get; private set; } = null!;

        /// <summary>
        /// The resourceId of the deployment resource created by the deployment stack.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
        /// </summary>
        [Output("deploymentScope")]
        public Output<string?> DeploymentScope { get; private set; } = null!;

        /// <summary>
        /// Deployment stack description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An array of resources that were detached during the most recent update.
        /// </summary>
        [Output("detachedResources")]
        public Output<ImmutableArray<Outputs.ResourceReferenceResponse>> DetachedResources { get; private set; } = null!;

        /// <summary>
        /// The duration of the deployment stack update.
        /// </summary>
        [Output("duration")]
        public Output<string> Duration { get; private set; } = null!;

        /// <summary>
        /// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
        /// </summary>
        [Output("error")]
        public Output<Outputs.ErrorResponseResponse?> Error { get; private set; } = null!;

        /// <summary>
        /// An array of resources that failed to reach goal state during the most recent update.
        /// </summary>
        [Output("failedResources")]
        public Output<ImmutableArray<Outputs.ResourceReferenceExtendedResponse>> FailedResources { get; private set; } = null!;

        /// <summary>
        /// The location of the deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Name of this resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The outputs of the underlying deployment.
        /// </summary>
        [Output("outputs")]
        public Output<object> Outputs { get; private set; } = null!;

        /// <summary>
        /// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
        /// </summary>
        [Output("parameters")]
        public Output<object?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
        /// </summary>
        [Output("parametersLink")]
        public Output<Outputs.DeploymentStacksParametersLinkResponse?> ParametersLink { get; private set; } = null!;

        /// <summary>
        /// State of the deployment stack.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// An array of resources currently managed by the deployment stack.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.ManagedResourceReferenceResponse>> Resources { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Deployment stack resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DeploymentStackAtManagementGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeploymentStackAtManagementGroup(string name, DeploymentStackAtManagementGroupArgs args, CustomResourceOptions? options = null)
            : base("azure-native:resources/v20220801preview:DeploymentStackAtManagementGroup", name, args ?? new DeploymentStackAtManagementGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeploymentStackAtManagementGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:resources/v20220801preview:DeploymentStackAtManagementGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:resources:DeploymentStackAtManagementGroup" },
                    new global::Pulumi.Alias { Type = "azure-native:resources/v20240301:DeploymentStackAtManagementGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeploymentStackAtManagementGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeploymentStackAtManagementGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DeploymentStackAtManagementGroup(name, id, options);
        }
    }

    public sealed class DeploymentStackAtManagementGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the behavior of resources that are not managed immediately after the stack is updated.
        /// </summary>
        [Input("actionOnUnmanage", required: true)]
        public Input<Inputs.DeploymentStackPropertiesActionOnUnmanageArgs> ActionOnUnmanage { get; set; } = null!;

        /// <summary>
        /// The debug setting of the deployment.
        /// </summary>
        [Input("debugSetting")]
        public Input<Inputs.DeploymentStacksDebugSettingArgs>? DebugSetting { get; set; }

        /// <summary>
        /// Defines how resources deployed by the stack are locked.
        /// </summary>
        [Input("denySettings", required: true)]
        public Input<Inputs.DenySettingsArgs> DenySettings { get; set; } = null!;

        /// <summary>
        /// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
        /// </summary>
        [Input("deploymentScope")]
        public Input<string>? DeploymentScope { get; set; }

        /// <summary>
        /// Name of the deployment stack.
        /// </summary>
        [Input("deploymentStackName")]
        public Input<string>? DeploymentStackName { get; set; }

        /// <summary>
        /// Deployment stack description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The location of the deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Management Group.
        /// </summary>
        [Input("managementGroupId", required: true)]
        public Input<string> ManagementGroupId { get; set; } = null!;

        /// <summary>
        /// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
        /// </summary>
        [Input("parameters")]
        public Input<object>? Parameters { get; set; }

        /// <summary>
        /// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
        /// </summary>
        [Input("parametersLink")]
        public Input<Inputs.DeploymentStacksParametersLinkArgs>? ParametersLink { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Deployment stack resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
        /// </summary>
        [Input("template")]
        public Input<object>? Template { get; set; }

        /// <summary>
        /// The URI of the template. Use either the templateLink property or the template property, but not both.
        /// </summary>
        [Input("templateLink")]
        public Input<Inputs.DeploymentStacksTemplateLinkArgs>? TemplateLink { get; set; }

        public DeploymentStackAtManagementGroupArgs()
        {
        }
        public static new DeploymentStackAtManagementGroupArgs Empty => new DeploymentStackAtManagementGroupArgs();
    }
}
