// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources.V20230801
{
    public static class GetAzurePowerShellScript
    {
        /// <summary>
        /// Gets a deployment script with a given name.
        /// </summary>
        public static Task<GetAzurePowerShellScriptResult> InvokeAsync(GetAzurePowerShellScriptArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzurePowerShellScriptResult>("azure-native:resources/v20230801:getAzurePowerShellScript", args ?? new GetAzurePowerShellScriptArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a deployment script with a given name.
        /// </summary>
        public static Output<GetAzurePowerShellScriptResult> Invoke(GetAzurePowerShellScriptInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzurePowerShellScriptResult>("azure-native:resources/v20230801:getAzurePowerShellScript", args ?? new GetAzurePowerShellScriptInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzurePowerShellScriptArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment script.
        /// </summary>
        [Input("scriptName", required: true)]
        public string ScriptName { get; set; } = null!;

        public GetAzurePowerShellScriptArgs()
        {
        }
        public static new GetAzurePowerShellScriptArgs Empty => new GetAzurePowerShellScriptArgs();
    }

    public sealed class GetAzurePowerShellScriptInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the deployment script.
        /// </summary>
        [Input("scriptName", required: true)]
        public Input<string> ScriptName { get; set; } = null!;

        public GetAzurePowerShellScriptInvokeArgs()
        {
        }
        public static new GetAzurePowerShellScriptInvokeArgs Empty => new GetAzurePowerShellScriptInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzurePowerShellScriptResult
    {
        /// <summary>
        /// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
        /// </summary>
        public readonly string? Arguments;
        /// <summary>
        /// Azure PowerShell module version to be used.
        /// </summary>
        public readonly string AzPowerShellVersion;
        /// <summary>
        /// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
        /// </summary>
        public readonly string? CleanupPreference;
        /// <summary>
        /// Container settings.
        /// </summary>
        public readonly Outputs.ContainerConfigurationResponse? ContainerSettings;
        /// <summary>
        /// The environment variables to pass over to the script.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentVariableResponse> EnvironmentVariables;
        /// <summary>
        /// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
        /// </summary>
        public readonly string? ForceUpdateTag;
        /// <summary>
        /// String Id used to locate any resource on Azure.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// Type of the script.
        /// Expected value is 'AzurePowerShell'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The location of the ACI and the storage account for the deployment script.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name of this resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of script outputs.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Outputs;
        /// <summary>
        /// Uri for the script. This is the entry point for the external script.
        /// </summary>
        public readonly string? PrimaryScriptUri;
        /// <summary>
        /// State of the script execution. This only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
        /// </summary>
        public readonly string RetentionInterval;
        /// <summary>
        /// Script body.
        /// </summary>
        public readonly string? ScriptContent;
        /// <summary>
        /// Contains the results of script execution.
        /// </summary>
        public readonly Outputs.ScriptStatusResponse Status;
        /// <summary>
        /// Storage Account settings.
        /// </summary>
        public readonly Outputs.StorageAccountConfigurationResponse? StorageAccountSettings;
        /// <summary>
        /// Supporting files for the external script.
        /// </summary>
        public readonly ImmutableArray<string> SupportingScriptUris;
        /// <summary>
        /// The system metadata related to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
        /// </summary>
        public readonly string? Timeout;
        /// <summary>
        /// Type of this resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAzurePowerShellScriptResult(
            string? arguments,

            string azPowerShellVersion,

            string? cleanupPreference,

            Outputs.ContainerConfigurationResponse? containerSettings,

            ImmutableArray<Outputs.EnvironmentVariableResponse> environmentVariables,

            string? forceUpdateTag,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string kind,

            string location,

            string name,

            ImmutableDictionary<string, object> outputs,

            string? primaryScriptUri,

            string provisioningState,

            string retentionInterval,

            string? scriptContent,

            Outputs.ScriptStatusResponse status,

            Outputs.StorageAccountConfigurationResponse? storageAccountSettings,

            ImmutableArray<string> supportingScriptUris,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string? timeout,

            string type)
        {
            Arguments = arguments;
            AzPowerShellVersion = azPowerShellVersion;
            CleanupPreference = cleanupPreference;
            ContainerSettings = containerSettings;
            EnvironmentVariables = environmentVariables;
            ForceUpdateTag = forceUpdateTag;
            Id = id;
            Identity = identity;
            Kind = kind;
            Location = location;
            Name = name;
            Outputs = outputs;
            PrimaryScriptUri = primaryScriptUri;
            ProvisioningState = provisioningState;
            RetentionInterval = retentionInterval;
            ScriptContent = scriptContent;
            Status = status;
            StorageAccountSettings = storageAccountSettings;
            SupportingScriptUris = supportingScriptUris;
            SystemData = systemData;
            Tags = tags;
            Timeout = timeout;
            Type = type;
        }
    }
}
