// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Resources.V20240301
{
    public static class GetDeploymentStackAtSubscription
    {
        /// <summary>
        /// Gets a Deployment stack with a given name at Subscription scope.
        /// </summary>
        public static Task<GetDeploymentStackAtSubscriptionResult> InvokeAsync(GetDeploymentStackAtSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentStackAtSubscriptionResult>("azure-native:resources/v20240301:getDeploymentStackAtSubscription", args ?? new GetDeploymentStackAtSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a Deployment stack with a given name at Subscription scope.
        /// </summary>
        public static Output<GetDeploymentStackAtSubscriptionResult> Invoke(GetDeploymentStackAtSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentStackAtSubscriptionResult>("azure-native:resources/v20240301:getDeploymentStackAtSubscription", args ?? new GetDeploymentStackAtSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentStackAtSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the deployment stack.
        /// </summary>
        [Input("deploymentStackName", required: true)]
        public string DeploymentStackName { get; set; } = null!;

        public GetDeploymentStackAtSubscriptionArgs()
        {
        }
        public static new GetDeploymentStackAtSubscriptionArgs Empty => new GetDeploymentStackAtSubscriptionArgs();
    }

    public sealed class GetDeploymentStackAtSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the deployment stack.
        /// </summary>
        [Input("deploymentStackName", required: true)]
        public Input<string> DeploymentStackName { get; set; } = null!;

        public GetDeploymentStackAtSubscriptionInvokeArgs()
        {
        }
        public static new GetDeploymentStackAtSubscriptionInvokeArgs Empty => new GetDeploymentStackAtSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentStackAtSubscriptionResult
    {
        /// <summary>
        /// Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
        /// </summary>
        public readonly Outputs.ActionOnUnmanageResponse ActionOnUnmanage;
        /// <summary>
        /// The correlation id of the last Deployment stack upsert or delete operation. It is in GUID format and is used for tracing.
        /// </summary>
        public readonly string CorrelationId;
        /// <summary>
        /// The debug setting of the deployment.
        /// </summary>
        public readonly Outputs.DeploymentStacksDebugSettingResponse? DebugSetting;
        /// <summary>
        /// An array of resources that were deleted during the most recent Deployment stack update. Deleted means that the resource was removed from the template and relevant deletion operations were specified.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceResponse> DeletedResources;
        /// <summary>
        /// Defines how resources deployed by the stack are locked.
        /// </summary>
        public readonly Outputs.DenySettingsResponse DenySettings;
        /// <summary>
        /// The resourceId of the deployment resource created by the deployment stack.
        /// </summary>
        public readonly string DeploymentId;
        /// <summary>
        /// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
        /// </summary>
        public readonly string? DeploymentScope;
        /// <summary>
        /// Deployment stack description. Max length of 4096 characters.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// An array of resources that were detached during the most recent Deployment stack update. Detached means that the resource was removed from the template, but no relevant deletion operations were specified. So, the resource still exists while no longer being associated with the stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceResponse> DetachedResources;
        /// <summary>
        /// The duration of the last successful Deployment stack update.
        /// </summary>
        public readonly string Duration;
        /// <summary>
        /// The error detail.
        /// </summary>
        public readonly Outputs.ErrorDetailResponse? Error;
        /// <summary>
        /// An array of resources that failed to reach goal state during the most recent update. Each resourceId is accompanied by an error message.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceExtendedResponse> FailedResources;
        /// <summary>
        /// String Id used to locate any resource on Azure.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Name of this resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The outputs of the deployment resource created by the deployment stack.
        /// </summary>
        public readonly object Outputs;
        /// <summary>
        /// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.DeploymentParameterResponse>? Parameters;
        /// <summary>
        /// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
        /// </summary>
        public readonly Outputs.DeploymentStacksParametersLinkResponse? ParametersLink;
        /// <summary>
        /// State of the deployment stack.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// An array of resources currently managed by the deployment stack.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedResourceReferenceResponse> Resources;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Deployment stack resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Type of this resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDeploymentStackAtSubscriptionResult(
            Outputs.ActionOnUnmanageResponse actionOnUnmanage,

            string correlationId,

            Outputs.DeploymentStacksDebugSettingResponse? debugSetting,

            ImmutableArray<Outputs.ResourceReferenceResponse> deletedResources,

            Outputs.DenySettingsResponse denySettings,

            string deploymentId,

            string? deploymentScope,

            string? description,

            ImmutableArray<Outputs.ResourceReferenceResponse> detachedResources,

            string duration,

            Outputs.ErrorDetailResponse? error,

            ImmutableArray<Outputs.ResourceReferenceExtendedResponse> failedResources,

            string id,

            string? location,

            string name,

            object outputs,

            ImmutableDictionary<string, Outputs.DeploymentParameterResponse>? parameters,

            Outputs.DeploymentStacksParametersLinkResponse? parametersLink,

            string provisioningState,

            ImmutableArray<Outputs.ManagedResourceReferenceResponse> resources,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ActionOnUnmanage = actionOnUnmanage;
            CorrelationId = correlationId;
            DebugSetting = debugSetting;
            DeletedResources = deletedResources;
            DenySettings = denySettings;
            DeploymentId = deploymentId;
            DeploymentScope = deploymentScope;
            Description = description;
            DetachedResources = detachedResources;
            Duration = duration;
            Error = error;
            FailedResources = failedResources;
            Id = id;
            Location = location;
            Name = name;
            Outputs = outputs;
            Parameters = parameters;
            ParametersLink = parametersLink;
            ProvisioningState = provisioningState;
            Resources = resources;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
