// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Consumption
{
    /// <summary>
    /// The operator to use for comparison.
    /// </summary>
    [EnumType]
    public readonly struct BudgetOperatorType : IEquatable<BudgetOperatorType>
    {
        private readonly string _value;

        private BudgetOperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetOperatorType In { get; } = new BudgetOperatorType("In");

        public static bool operator ==(BudgetOperatorType left, BudgetOperatorType right) => left.Equals(right);
        public static bool operator !=(BudgetOperatorType left, BudgetOperatorType right) => !left.Equals(right);

        public static explicit operator string(BudgetOperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetOperatorType other && Equals(other);
        public bool Equals(BudgetOperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The category of the budget, whether the budget tracks cost or usage.
    /// </summary>
    [EnumType]
    public readonly struct CategoryType : IEquatable<CategoryType>
    {
        private readonly string _value;

        private CategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CategoryType Cost { get; } = new CategoryType("Cost");

        public static bool operator ==(CategoryType left, CategoryType right) => left.Equals(right);
        public static bool operator !=(CategoryType left, CategoryType right) => !left.Equals(right);

        public static explicit operator string(CategoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CategoryType other && Equals(other);
        public bool Equals(CategoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Language in which the recipient will receive the notification
    /// </summary>
    [EnumType]
    public readonly struct CultureCode : IEquatable<CultureCode>
    {
        private readonly string _value;

        private CultureCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CultureCode En_us { get; } = new CultureCode("en-us");
        public static CultureCode Ja_jp { get; } = new CultureCode("ja-jp");
        public static CultureCode Zh_cn { get; } = new CultureCode("zh-cn");
        public static CultureCode De_de { get; } = new CultureCode("de-de");
        public static CultureCode Es_es { get; } = new CultureCode("es-es");
        public static CultureCode Fr_fr { get; } = new CultureCode("fr-fr");
        public static CultureCode It_it { get; } = new CultureCode("it-it");
        public static CultureCode Ko_kr { get; } = new CultureCode("ko-kr");
        public static CultureCode Pt_br { get; } = new CultureCode("pt-br");
        public static CultureCode Ru_ru { get; } = new CultureCode("ru-ru");
        public static CultureCode Zh_tw { get; } = new CultureCode("zh-tw");
        public static CultureCode Cs_cz { get; } = new CultureCode("cs-cz");
        public static CultureCode Pl_pl { get; } = new CultureCode("pl-pl");
        public static CultureCode Tr_tr { get; } = new CultureCode("tr-tr");
        public static CultureCode Da_dk { get; } = new CultureCode("da-dk");
        public static CultureCode En_gb { get; } = new CultureCode("en-gb");
        public static CultureCode Hu_hu { get; } = new CultureCode("hu-hu");
        public static CultureCode Nb_no { get; } = new CultureCode("nb-no");
        public static CultureCode Nl_nl { get; } = new CultureCode("nl-nl");
        public static CultureCode Pt_pt { get; } = new CultureCode("pt-pt");
        public static CultureCode Sv_se { get; } = new CultureCode("sv-se");

        public static bool operator ==(CultureCode left, CultureCode right) => left.Equals(right);
        public static bool operator !=(CultureCode left, CultureCode right) => !left.Equals(right);

        public static explicit operator string(CultureCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CultureCode other && Equals(other);
        public bool Equals(CultureCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The comparison operator.
    /// </summary>
    [EnumType]
    public readonly struct OperatorType : IEquatable<OperatorType>
    {
        private readonly string _value;

        private OperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Alert will be triggered if the evaluated cost is the same as threshold value. Note: It’s not recommended to use this OperatorType as there’s low chance of cost being exactly the same as threshold value, leading to missing of your alert. This OperatorType will be deprecated in future. 
        /// </summary>
        public static OperatorType EqualTo { get; } = new OperatorType("EqualTo");
        /// <summary>
        /// Alert will be triggered if the evaluated cost is greater than the threshold value. Note: This is the recommended OperatorType while configuring Budget Alert.
        /// </summary>
        public static OperatorType GreaterThan { get; } = new OperatorType("GreaterThan");
        /// <summary>
        /// Alert will be triggered if the evaluated cost is greater than or equal to the threshold value.
        /// </summary>
        public static OperatorType GreaterThanOrEqualTo { get; } = new OperatorType("GreaterThanOrEqualTo");

        public static bool operator ==(OperatorType left, OperatorType right) => left.Equals(right);
        public static bool operator !=(OperatorType left, OperatorType right) => !left.Equals(right);

        public static explicit operator string(OperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatorType other && Equals(other);
        public bool Equals(OperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of threshold
    /// </summary>
    [EnumType]
    public readonly struct ThresholdType : IEquatable<ThresholdType>
    {
        private readonly string _value;

        private ThresholdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Actual costs budget alerts notify when the actual accrued cost exceeds the allocated budget .
        /// </summary>
        public static ThresholdType Actual { get; } = new ThresholdType("Actual");
        /// <summary>
        /// Forecasted costs budget alerts provide advanced notification that your spending trends are likely to exceed your allocated budget, as it relies on forecasted cost predictions.
        /// </summary>
        public static ThresholdType Forecasted { get; } = new ThresholdType("Forecasted");

        public static bool operator ==(ThresholdType left, ThresholdType right) => left.Equals(right);
        public static bool operator !=(ThresholdType left, ThresholdType right) => !left.Equals(right);

        public static explicit operator string(ThresholdType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThresholdType other && Equals(other);
        public bool Equals(ThresholdType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
    /// </summary>
    [EnumType]
    public readonly struct TimeGrainType : IEquatable<TimeGrainType>
    {
        private readonly string _value;

        private TimeGrainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TimeGrainType Monthly { get; } = new TimeGrainType("Monthly");
        public static TimeGrainType Quarterly { get; } = new TimeGrainType("Quarterly");
        public static TimeGrainType Annually { get; } = new TimeGrainType("Annually");
        public static TimeGrainType BillingMonth { get; } = new TimeGrainType("BillingMonth");
        public static TimeGrainType BillingQuarter { get; } = new TimeGrainType("BillingQuarter");
        public static TimeGrainType BillingAnnual { get; } = new TimeGrainType("BillingAnnual");

        public static bool operator ==(TimeGrainType left, TimeGrainType right) => left.Equals(right);
        public static bool operator !=(TimeGrainType left, TimeGrainType right) => !left.Equals(right);

        public static explicit operator string(TimeGrainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeGrainType other && Equals(other);
        public bool Equals(TimeGrainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
