// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Consumption.Latest
{
    /// <summary>
    /// The operator to use for comparison.
    /// </summary>
    [EnumType]
    public readonly struct BudgetOperatorType : IEquatable<BudgetOperatorType>
    {
        private readonly string _value;

        private BudgetOperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetOperatorType In { get; } = new BudgetOperatorType("In");

        public static bool operator ==(BudgetOperatorType left, BudgetOperatorType right) => left.Equals(right);
        public static bool operator !=(BudgetOperatorType left, BudgetOperatorType right) => !left.Equals(right);

        public static explicit operator string(BudgetOperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetOperatorType other && Equals(other);
        public bool Equals(BudgetOperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The category of the budget, whether the budget tracks cost or usage.
    /// </summary>
    [EnumType]
    public readonly struct CategoryType : IEquatable<CategoryType>
    {
        private readonly string _value;

        private CategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CategoryType Cost { get; } = new CategoryType("Cost");
        public static CategoryType Usage { get; } = new CategoryType("Usage");

        public static bool operator ==(CategoryType left, CategoryType right) => left.Equals(right);
        public static bool operator !=(CategoryType left, CategoryType right) => !left.Equals(right);

        public static explicit operator string(CategoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CategoryType other && Equals(other);
        public bool Equals(CategoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The comparison operator.
    /// </summary>
    [EnumType]
    public readonly struct OperatorType : IEquatable<OperatorType>
    {
        private readonly string _value;

        private OperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperatorType EqualTo { get; } = new OperatorType("EqualTo");
        public static OperatorType GreaterThan { get; } = new OperatorType("GreaterThan");
        public static OperatorType GreaterThanOrEqualTo { get; } = new OperatorType("GreaterThanOrEqualTo");

        public static bool operator ==(OperatorType left, OperatorType right) => left.Equals(right);
        public static bool operator !=(OperatorType left, OperatorType right) => !left.Equals(right);

        public static explicit operator string(OperatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperatorType other && Equals(other);
        public bool Equals(OperatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of threshold
    /// </summary>
    [EnumType]
    public readonly struct ThresholdType : IEquatable<ThresholdType>
    {
        private readonly string _value;

        private ThresholdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThresholdType Actual { get; } = new ThresholdType("Actual");

        public static bool operator ==(ThresholdType left, ThresholdType right) => left.Equals(right);
        public static bool operator !=(ThresholdType left, ThresholdType right) => !left.Equals(right);

        public static explicit operator string(ThresholdType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThresholdType other && Equals(other);
        public bool Equals(ThresholdType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
    /// </summary>
    [EnumType]
    public readonly struct TimeGrainType : IEquatable<TimeGrainType>
    {
        private readonly string _value;

        private TimeGrainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TimeGrainType Monthly { get; } = new TimeGrainType("Monthly");
        public static TimeGrainType Quarterly { get; } = new TimeGrainType("Quarterly");
        public static TimeGrainType Annually { get; } = new TimeGrainType("Annually");

        public static bool operator ==(TimeGrainType left, TimeGrainType right) => left.Equals(right);
        public static bool operator !=(TimeGrainType left, TimeGrainType right) => !left.Equals(right);

        public static explicit operator string(TimeGrainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TimeGrainType other && Equals(other);
        public bool Equals(TimeGrainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
