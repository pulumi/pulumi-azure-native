// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector
{
    public static class GetS3BucketPolicy
    {
        /// <summary>
        /// Get a S3BucketPolicy
        /// Azure REST API version: 2024-12-01.
        /// </summary>
        public static Task<GetS3BucketPolicyResult> InvokeAsync(GetS3BucketPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetS3BucketPolicyResult>("azure-native:awsconnector:getS3BucketPolicy", args ?? new GetS3BucketPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get a S3BucketPolicy
        /// Azure REST API version: 2024-12-01.
        /// </summary>
        public static Output<GetS3BucketPolicyResult> Invoke(GetS3BucketPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetS3BucketPolicyResult>("azure-native:awsconnector:getS3BucketPolicy", args ?? new GetS3BucketPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetS3BucketPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of S3BucketPolicy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetS3BucketPolicyArgs()
        {
        }
        public static new GetS3BucketPolicyArgs Empty => new GetS3BucketPolicyArgs();
    }

    public sealed class GetS3BucketPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of S3BucketPolicy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetS3BucketPolicyInvokeArgs()
        {
        }
        public static new GetS3BucketPolicyInvokeArgs Empty => new GetS3BucketPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetS3BucketPolicyResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource-specific properties for this resource.
        /// </summary>
        public readonly Outputs.S3BucketPolicyPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetS3BucketPolicyResult(
            string id,

            string location,

            string name,

            Outputs.S3BucketPolicyPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
