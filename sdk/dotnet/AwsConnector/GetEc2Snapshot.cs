// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector
{
    public static class GetEc2Snapshot
    {
        /// <summary>
        /// Get a Ec2Snapshot
        /// Azure REST API version: 2024-12-01.
        /// </summary>
        public static Task<GetEc2SnapshotResult> InvokeAsync(GetEc2SnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEc2SnapshotResult>("azure-native:awsconnector:getEc2Snapshot", args ?? new GetEc2SnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Ec2Snapshot
        /// Azure REST API version: 2024-12-01.
        /// </summary>
        public static Output<GetEc2SnapshotResult> Invoke(GetEc2SnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEc2SnapshotResult>("azure-native:awsconnector:getEc2Snapshot", args ?? new GetEc2SnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEc2SnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of Ec2Snapshot
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetEc2SnapshotArgs()
        {
        }
        public static new GetEc2SnapshotArgs Empty => new GetEc2SnapshotArgs();
    }

    public sealed class GetEc2SnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of Ec2Snapshot
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetEc2SnapshotInvokeArgs()
        {
        }
        public static new GetEc2SnapshotInvokeArgs Empty => new GetEc2SnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetEc2SnapshotResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The resource-specific properties for this resource.
        /// </summary>
        public readonly Outputs.Ec2SnapshotPropertiesResponse Properties;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetEc2SnapshotResult(
            string id,

            string location,

            string name,

            Outputs.Ec2SnapshotPropertiesResponse properties,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
