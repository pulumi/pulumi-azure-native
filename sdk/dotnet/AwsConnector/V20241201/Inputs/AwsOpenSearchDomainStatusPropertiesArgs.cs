// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Inputs
{

    /// <summary>
    /// Definition of awsOpenSearchDomainStatus
    /// </summary>
    public sealed class AwsOpenSearchDomainStatusPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;Identity and Access Management (IAM) policy document specifying the access policies for the domain.&lt;/p&gt;
        /// </summary>
        [Input("accessPolicies")]
        public Input<string>? AccessPolicies { get; set; }

        [Input("advancedOptions")]
        private InputMap<string>? _advancedOptions;

        /// <summary>
        /// &lt;p&gt;Key-value pairs that specify advanced configuration options.&lt;/p&gt;
        /// </summary>
        public InputMap<string> AdvancedOptions
        {
            get => _advancedOptions ?? (_advancedOptions = new InputMap<string>());
            set => _advancedOptions = value;
        }

        /// <summary>
        /// &lt;p&gt;Settings for fine-grained access control.&lt;/p&gt;
        /// </summary>
        [Input("advancedSecurityOptions")]
        public Input<Inputs.AdvancedSecurityOptionsArgs>? AdvancedSecurityOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) of the domain. For more information, see &lt;a href='https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html'&gt;IAM identifiers &lt;/a&gt; in the &lt;i&gt;AWS Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt;
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// &lt;p&gt;Auto-Tune settings for the domain.&lt;/p&gt;
        /// </summary>
        [Input("autoTuneOptions")]
        public Input<Inputs.AutoTuneOptionsOutputArgs>? AutoTuneOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Information about a configuration change happening on the domain.&lt;/p&gt;
        /// </summary>
        [Input("changeProgressDetails")]
        public Input<Inputs.ChangeProgressDetailsArgs>? ChangeProgressDetails { get; set; }

        /// <summary>
        /// &lt;p&gt;Container for the cluster configuration of the domain.&lt;/p&gt;
        /// </summary>
        [Input("clusterConfig")]
        public Input<Inputs.ClusterConfigArgs>? ClusterConfig { get; set; }

        /// <summary>
        /// &lt;p&gt;Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.&lt;/p&gt;
        /// </summary>
        [Input("cognitoOptions")]
        public Input<Inputs.CognitoOptionsArgs>? CognitoOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Creation status of an OpenSearch Service domain. True if domain creation is complete. False if domain creation is still in progress.&lt;/p&gt;
        /// </summary>
        [Input("created")]
        public Input<bool>? Created { get; set; }

        /// <summary>
        /// &lt;p&gt;Deletion status of an OpenSearch Service domain. True if domain deletion is complete. False if domain deletion is still in progress. Once deletion is complete, the status of the domain is no longer returned.&lt;/p&gt;
        /// </summary>
        [Input("deleted")]
        public Input<bool>? Deleted { get; set; }

        /// <summary>
        /// &lt;p&gt;Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.&lt;/p&gt;
        /// </summary>
        [Input("domainEndpointOptions")]
        public Input<Inputs.DomainEndpointOptionsArgs>? DomainEndpointOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Unique identifier for the domain.&lt;/p&gt;
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// &lt;p&gt;Name of the domain. Domain names are unique across all domains owned by the same account within an Amazon Web Services Region.&lt;/p&gt;
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// &lt;p&gt;The status of any changes that are currently in progress for the domain.&lt;/p&gt;
        /// </summary>
        [Input("domainProcessingStatus")]
        public Input<Inputs.DomainProcessingStatusTypeEnumValueArgs>? DomainProcessingStatus { get; set; }

        /// <summary>
        /// &lt;p&gt;Container for EBS-based storage settings for the domain.&lt;/p&gt;
        /// </summary>
        [Input("ebsOptions")]
        public Input<Inputs.EBSOptionsArgs>? EbsOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Encryption at rest settings for the domain.&lt;/p&gt;
        /// </summary>
        [Input("encryptionAtRestOptions")]
        public Input<Inputs.EncryptionAtRestOptionsArgs>? EncryptionAtRestOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Domain-specific endpoint used to submit index, search, and data upload requests to the domain.&lt;/p&gt;
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// &lt;p&gt;If &lt;code&gt;IPAddressType&lt;/code&gt; to set to &lt;code&gt;dualstack&lt;/code&gt;, a version 2 domain endpoint is provisioned. This endpoint functions like a normal endpoint, except that it works with both IPv4 and IPv6 IP addresses. Normal endpoints work only with IPv4 IP addresses. &lt;/p&gt;
        /// </summary>
        [Input("endpointV2")]
        public Input<string>? EndpointV2 { get; set; }

        [Input("endpoints")]
        private InputMap<string>? _endpoints;

        /// <summary>
        /// &lt;p&gt;The key-value pair that exists if the OpenSearch Service domain uses VPC endpoints. Example &lt;code&gt;key, value&lt;/code&gt;: &lt;code&gt;'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        public InputMap<string> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputMap<string>());
            set => _endpoints = value;
        }

        /// <summary>
        /// &lt;p&gt;Version of OpenSearch or Elasticsearch that the domain is running, in the format &lt;code&gt;Elasticsearch_X.Y&lt;/code&gt; or &lt;code&gt;OpenSearch_X.Y&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// &lt;p&gt;The type of IP addresses supported by the endpoint for the domain.&lt;/p&gt;
        /// </summary>
        [Input("ipAddressType")]
        public Input<Inputs.IPAddressTypeEnumValueArgs>? IpAddressType { get; set; }

        [Input("logPublishingOptions")]
        private InputMap<Inputs.LogPublishingOptionArgs>? _logPublishingOptions;

        /// <summary>
        /// &lt;p&gt;Log publishing options for the domain.&lt;/p&gt;
        /// </summary>
        public InputMap<Inputs.LogPublishingOptionArgs> LogPublishingOptions
        {
            get => _logPublishingOptions ?? (_logPublishingOptions = new InputMap<Inputs.LogPublishingOptionArgs>());
            set => _logPublishingOptions = value;
        }

        [Input("modifyingProperties")]
        private InputList<Inputs.ModifyingPropertiesArgs>? _modifyingProperties;

        /// <summary>
        /// &lt;p&gt;Information about the domain properties that are currently being modified.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.ModifyingPropertiesArgs> ModifyingProperties
        {
            get => _modifyingProperties ?? (_modifyingProperties = new InputList<Inputs.ModifyingPropertiesArgs>());
            set => _modifyingProperties = value;
        }

        /// <summary>
        /// &lt;p&gt;Whether node-to-node encryption is enabled or disabled.&lt;/p&gt;
        /// </summary>
        [Input("nodeToNodeEncryptionOptions")]
        public Input<Inputs.NodeToNodeEncryptionOptionsArgs>? NodeToNodeEncryptionOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Options that specify a custom 10-hour window during which OpenSearch Service can perform configuration changes on the domain.&lt;/p&gt;
        /// </summary>
        [Input("offPeakWindowOptions")]
        public Input<Inputs.OffPeakWindowOptionsArgs>? OffPeakWindowOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;The status of the domain configuration. True if OpenSearch Service is processing configuration changes. False if the configuration is active.&lt;/p&gt;
        /// </summary>
        [Input("processing")]
        public Input<bool>? Processing { get; set; }

        /// <summary>
        /// &lt;p&gt;The current status of the domain's service software.&lt;/p&gt;
        /// </summary>
        [Input("serviceSoftwareOptions")]
        public Input<Inputs.ServiceSoftwareOptionsArgs>? ServiceSoftwareOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.&lt;/p&gt;
        /// </summary>
        [Input("snapshotOptions")]
        public Input<Inputs.SnapshotOptionsArgs>? SnapshotOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;Service software update options for the domain.&lt;/p&gt;
        /// </summary>
        [Input("softwareUpdateOptions")]
        public Input<Inputs.SoftwareUpdateOptionsArgs>? SoftwareUpdateOptions { get; set; }

        /// <summary>
        /// &lt;p&gt;The status of a domain version upgrade to a new version of OpenSearch or Elasticsearch. True if OpenSearch Service is in the process of a version upgrade. False if the configuration is active.&lt;/p&gt;
        /// </summary>
        [Input("upgradeProcessing")]
        public Input<bool>? UpgradeProcessing { get; set; }

        /// <summary>
        /// &lt;p&gt;The VPC configuration for the domain.&lt;/p&gt;
        /// </summary>
        [Input("vpcOptions")]
        public Input<Inputs.VPCDerivedInfoArgs>? VpcOptions { get; set; }

        public AwsOpenSearchDomainStatusPropertiesArgs()
        {
        }
        public static new AwsOpenSearchDomainStatusPropertiesArgs Empty => new AwsOpenSearchDomainStatusPropertiesArgs();
    }
}
