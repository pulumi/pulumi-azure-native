// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Inputs
{

    /// <summary>
    /// Definition of awsEcrImageDetail
    /// </summary>
    public sealed class AwsEcrImageDetailPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The artifact media type of the image.&lt;/p&gt;
        /// </summary>
        [Input("artifactMediaType")]
        public Input<string>? ArtifactMediaType { get; set; }

        /// <summary>
        /// &lt;p&gt;The &lt;code&gt;sha256&lt;/code&gt; digest of the image manifest.&lt;/p&gt;
        /// </summary>
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        /// <summary>
        /// &lt;p&gt;The media type of the image manifest.&lt;/p&gt;
        /// </summary>
        [Input("imageManifestMediaType")]
        public Input<string>? ImageManifestMediaType { get; set; }

        /// <summary>
        /// &lt;p&gt;The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. &lt;/p&gt;
        /// </summary>
        [Input("imagePushedAt")]
        public Input<string>? ImagePushedAt { get; set; }

        /// <summary>
        /// &lt;p&gt;A summary of the last completed image scan.&lt;/p&gt;
        /// </summary>
        [Input("imageScanFindingsSummary")]
        public Input<Inputs.ImageScanFindingsSummaryArgs>? ImageScanFindingsSummary { get; set; }

        /// <summary>
        /// &lt;p&gt;The current state of the scan.&lt;/p&gt;
        /// </summary>
        [Input("imageScanStatus")]
        public Input<Inputs.ImageScanStatusArgs>? ImageScanStatus { get; set; }

        /// <summary>
        /// &lt;p&gt;The size, in bytes, of the image in the repository.&lt;/p&gt; &lt;p&gt;If the image is a manifest list, this will be the max size of all manifests in the list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
        /// </summary>
        [Input("imageSizeInBytes")]
        public Input<double>? ImageSizeInBytes { get; set; }

        [Input("imageTags")]
        private InputList<string>? _imageTags;

        /// <summary>
        /// &lt;p&gt;The list of tags associated with this image.&lt;/p&gt;
        /// </summary>
        public InputList<string> ImageTags
        {
            get => _imageTags ?? (_imageTags = new InputList<string>());
            set => _imageTags = value;
        }

        /// <summary>
        /// &lt;p&gt;The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image pull.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp will indicate the exact time that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp at least once every 24 hours, the result may not be the exact time that the image was last pulled.&lt;/p&gt; &lt;/note&gt;
        /// </summary>
        [Input("lastRecordedPullTime")]
        public Input<string>? LastRecordedPullTime { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Web Services account ID associated with the registry to which this image belongs.&lt;/p&gt;
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        /// <summary>
        /// &lt;p&gt;The name of the repository to which this image belongs.&lt;/p&gt;
        /// </summary>
        [Input("repositoryName")]
        public Input<string>? RepositoryName { get; set; }

        public AwsEcrImageDetailPropertiesArgs()
        {
        }
        public static new AwsEcrImageDetailPropertiesArgs Empty => new AwsEcrImageDetailPropertiesArgs();
    }
}
