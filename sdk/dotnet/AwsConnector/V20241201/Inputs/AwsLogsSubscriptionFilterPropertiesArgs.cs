// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Inputs
{

    /// <summary>
    /// Definition of awsLogsSubscriptionFilter
    /// </summary>
    public sealed class AwsLogsSubscriptionFilterPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the destination.
        /// </summary>
        [Input("destinationArn")]
        public Input<string>? DestinationArn { get; set; }

        /// <summary>
        /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        /// </summary>
        [Input("distribution")]
        public InputUnion<string, Pulumi.AzureNative.AwsConnector.V20241201.Distribution>? Distribution { get; set; }

        /// <summary>
        /// The name of the subscription filter.
        /// </summary>
        [Input("filterName")]
        public Input<string>? FilterName { get; set; }

        /// <summary>
        /// The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Input("filterPattern")]
        public Input<string>? FilterPattern { get; set; }

        /// <summary>
        /// The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
        /// </summary>
        [Input("logGroupName")]
        public Input<string>? LogGroupName { get; set; }

        /// <summary>
        /// The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        public AwsLogsSubscriptionFilterPropertiesArgs()
        {
        }
        public static new AwsLogsSubscriptionFilterPropertiesArgs Empty => new AwsLogsSubscriptionFilterPropertiesArgs();
    }
}
