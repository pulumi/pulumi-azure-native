// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Outputs
{

    /// <summary>
    /// Definition of awsElasticLoadBalancingV2TargetGroup
    /// </summary>
    [OutputType]
    public sealed class AwsElasticLoadBalancingV2TargetGroupPropertiesResponse
    {
        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        public readonly bool? HealthCheckEnabled;
        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        public readonly int? HealthCheckIntervalSeconds;
        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.
        /// </summary>
        public readonly string? HealthCheckPath;
        /// <summary>
        /// The port the load balancer uses when performing health checks on targets.
        /// </summary>
        public readonly string? HealthCheckPort;
        /// <summary>
        /// The protocol the load balancer uses when performing health checks on targets.
        /// </summary>
        public readonly string? HealthCheckProtocol;
        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        public readonly int? HealthCheckTimeoutSeconds;
        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        /// </summary>
        public readonly int? HealthyThresholdCount;
        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6.
        /// </summary>
        public readonly string? IpAddressType;
        /// <summary>
        /// The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
        /// </summary>
        public readonly ImmutableArray<string> LoadBalancerArns;
        /// <summary>
        /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
        /// </summary>
        public readonly Outputs.MatcherResponse? Matcher;
        /// <summary>
        /// The name of the target group.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The protocol to use for routing traffic to the targets.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        public readonly string? ProtocolVersion;
        /// <summary>
        /// The tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagResponse> Tags;
        /// <summary>
        /// The ARN of the Target Group
        /// </summary>
        public readonly string? TargetGroupArn;
        /// <summary>
        /// The attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetGroupAttributeResponse> TargetGroupAttributes;
        /// <summary>
        /// The full name of the target group.
        /// </summary>
        public readonly string? TargetGroupFullName;
        /// <summary>
        /// The name of the target group.
        /// </summary>
        public readonly string? TargetGroupName;
        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        /// </summary>
        public readonly string? TargetType;
        /// <summary>
        /// The targets.
        /// </summary>
        public readonly ImmutableArray<Outputs.TargetDescriptionResponse> Targets;
        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        public readonly int? UnhealthyThresholdCount;
        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private AwsElasticLoadBalancingV2TargetGroupPropertiesResponse(
            bool? healthCheckEnabled,

            int? healthCheckIntervalSeconds,

            string? healthCheckPath,

            string? healthCheckPort,

            string? healthCheckProtocol,

            int? healthCheckTimeoutSeconds,

            int? healthyThresholdCount,

            string? ipAddressType,

            ImmutableArray<string> loadBalancerArns,

            Outputs.MatcherResponse? matcher,

            string? name,

            int? port,

            string? protocol,

            string? protocolVersion,

            ImmutableArray<Outputs.TagResponse> tags,

            string? targetGroupArn,

            ImmutableArray<Outputs.TargetGroupAttributeResponse> targetGroupAttributes,

            string? targetGroupFullName,

            string? targetGroupName,

            string? targetType,

            ImmutableArray<Outputs.TargetDescriptionResponse> targets,

            int? unhealthyThresholdCount,

            string? vpcId)
        {
            HealthCheckEnabled = healthCheckEnabled;
            HealthCheckIntervalSeconds = healthCheckIntervalSeconds;
            HealthCheckPath = healthCheckPath;
            HealthCheckPort = healthCheckPort;
            HealthCheckProtocol = healthCheckProtocol;
            HealthCheckTimeoutSeconds = healthCheckTimeoutSeconds;
            HealthyThresholdCount = healthyThresholdCount;
            IpAddressType = ipAddressType;
            LoadBalancerArns = loadBalancerArns;
            Matcher = matcher;
            Name = name;
            Port = port;
            Protocol = protocol;
            ProtocolVersion = protocolVersion;
            Tags = tags;
            TargetGroupArn = targetGroupArn;
            TargetGroupAttributes = targetGroupAttributes;
            TargetGroupFullName = targetGroupFullName;
            TargetGroupName = targetGroupName;
            TargetType = targetType;
            Targets = targets;
            UnhealthyThresholdCount = unhealthyThresholdCount;
            VpcId = vpcId;
        }
    }
}
