// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Outputs
{

    /// <summary>
    /// Definition of IntelligentTieringConfiguration
    /// </summary>
    [OutputType]
    public sealed class IntelligentTieringConfigurationResponse
    {
        /// <summary>
        /// The ID used to identify the S3 Intelligent-Tiering configuration.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// An object key name prefix that identifies the subset of objects to which the rule applies.
        /// </summary>
        public readonly string? Prefix;
        /// <summary>
        /// Specifies the status of the configuration.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// A container for a key-value pair.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagFilterResponse> TagFilters;
        /// <summary>
        /// Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.  You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.
        /// </summary>
        public readonly ImmutableArray<Outputs.TieringResponse> Tierings;

        [OutputConstructor]
        private IntelligentTieringConfigurationResponse(
            string? id,

            string? prefix,

            string? status,

            ImmutableArray<Outputs.TagFilterResponse> tagFilters,

            ImmutableArray<Outputs.TieringResponse> tierings)
        {
            Id = id;
            Prefix = prefix;
            Status = status;
            TagFilters = tagFilters;
            Tierings = tierings;
        }
    }
}
