// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Outputs
{

    /// <summary>
    /// Definition of awsElasticBeanstalkConfigurationTemplate
    /// </summary>
    [OutputType]
    public sealed class AwsElasticBeanstalkConfigurationTemplatePropertiesResponse
    {
        /// <summary>
        /// The name of the Elastic Beanstalk application to associate with this configuration template.
        /// </summary>
        public readonly string? ApplicationName;
        /// <summary>
        /// An optional description for this configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or SourceConfiguration.
        /// </summary>
        public readonly string? EnvironmentId;
        /// <summary>
        /// Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigurationOptionSettingResponse> OptionSettings;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide.
        /// </summary>
        public readonly string? PlatformArn;
        /// <summary>
        /// The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration. Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks.
        /// </summary>
        public readonly string? SolutionStackName;
        /// <summary>
        /// An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.Values specified in OptionSettings override any values obtained from the SourceConfiguration.You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName.Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.
        /// </summary>
        public readonly Outputs.SourceConfigurationResponse? SourceConfiguration;
        /// <summary>
        /// The name of the configuration template
        /// </summary>
        public readonly string? TemplateName;

        [OutputConstructor]
        private AwsElasticBeanstalkConfigurationTemplatePropertiesResponse(
            string? applicationName,

            string? description,

            string? environmentId,

            ImmutableArray<Outputs.ConfigurationOptionSettingResponse> optionSettings,

            string? platformArn,

            string? solutionStackName,

            Outputs.SourceConfigurationResponse? sourceConfiguration,

            string? templateName)
        {
            ApplicationName = applicationName;
            Description = description;
            EnvironmentId = environmentId;
            OptionSettings = optionSettings;
            PlatformArn = platformArn;
            SolutionStackName = solutionStackName;
            SourceConfiguration = sourceConfiguration;
            TemplateName = templateName;
        }
    }
}
