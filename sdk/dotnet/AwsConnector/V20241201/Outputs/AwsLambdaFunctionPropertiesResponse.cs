// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Outputs
{

    /// <summary>
    /// Definition of awsLambdaFunction
    /// </summary>
    [OutputType]
    public sealed class AwsLambdaFunctionPropertiesResponse
    {
        /// <summary>
        /// The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
        /// </summary>
        public readonly ImmutableArray<string> Architectures;
        /// <summary>
        /// Property arn
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The code for the function. The [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js and Python functions, you can specify the function code inline in the template. Changes to a deployment package in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the function code, change the object key or version in the template.
        /// </summary>
        public readonly Outputs.CodeResponse? Code;
        /// <summary>
        /// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
        /// </summary>
        public readonly string? CodeSigningConfigArn;
        /// <summary>
        /// A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq). The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous invocations.
        /// </summary>
        public readonly Outputs.DeadLetterConfigResponse? DeadLetterConfig;
        /// <summary>
        /// A description of the function.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Environment variables that are accessible from function code during execution. A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
        /// </summary>
        public readonly Outputs.EnvironmentResponse? Environment;
        /// <summary>
        /// The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB. The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
        /// </summary>
        public readonly Outputs.EphemeralStorageResponse? EphemeralStorage;
        /// <summary>
        /// Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function. For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
        /// </summary>
        public readonly ImmutableArray<Outputs.FileSystemConfigResponse> FileSystemConfigs;
        /// <summary>
        /// The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one. If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        public readonly string? FunctionName;
        /// <summary>
        /// The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
        /// </summary>
        public readonly string? Handler;
        /// <summary>
        /// Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms). Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
        /// </summary>
        public readonly Outputs.ImageConfigResponse? ImageConfig;
        /// <summary>
        /// The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, Lambda also uses this key to encrypt your function when it's deployed. Note that this is not the same key that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If you don't provide a customer managed key, Lambda uses a default service key.
        /// </summary>
        public readonly string? KmsKeyArn;
        /// <summary>
        /// A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
        /// </summary>
        public readonly ImmutableArray<string> Layers;
        /// <summary>
        /// The function's Amazon CloudWatch Logs configuration settings. The function's Amazon CloudWatch Logs configuration settings.
        /// </summary>
        public readonly Outputs.LoggingConfigResponse? LoggingConfig;
        /// <summary>
        /// The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
        /// </summary>
        public readonly int? MemorySize;
        /// <summary>
        /// The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
        /// </summary>
        public readonly string? PackageType;
        /// <summary>
        /// The number of simultaneous executions to reserve for the function.
        /// </summary>
        public readonly int? ReservedConcurrentExecutions;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the function's execution role.
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive. The following list includes deprecated runtimes. For more information, see [Runtime deprecation policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).
        /// </summary>
        public readonly string? Runtime;
        /// <summary>
        /// Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html). Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
        /// </summary>
        public readonly Outputs.RuntimeManagementConfigResponse? RuntimeManagementConfig;
        /// <summary>
        /// The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting. The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
        /// </summary>
        public readonly Outputs.SnapStartResponse? SnapStart;
        /// <summary>
        /// The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
        /// </summary>
        public readonly Outputs.SnapStartResponseResponse? SnapStartResponse;
        /// <summary>
        /// A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagResponse> Tags;
        /// <summary>
        /// The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html). The function's [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record incoming requests, set ``Mode`` to ``Active``.
        /// </summary>
        public readonly Outputs.TracingConfigResponse? TracingConfig;
        /// <summary>
        /// For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC. For more information, see [VPC Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).  When you delete a function, CFN monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's resources. To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for network interfaces to be deleted.
        /// </summary>
        public readonly Outputs.VpcConfigResponse? VpcConfig;

        [OutputConstructor]
        private AwsLambdaFunctionPropertiesResponse(
            ImmutableArray<string> architectures,

            string? arn,

            Outputs.CodeResponse? code,

            string? codeSigningConfigArn,

            Outputs.DeadLetterConfigResponse? deadLetterConfig,

            string? description,

            Outputs.EnvironmentResponse? environment,

            Outputs.EphemeralStorageResponse? ephemeralStorage,

            ImmutableArray<Outputs.FileSystemConfigResponse> fileSystemConfigs,

            string? functionName,

            string? handler,

            Outputs.ImageConfigResponse? imageConfig,

            string? kmsKeyArn,

            ImmutableArray<string> layers,

            Outputs.LoggingConfigResponse? loggingConfig,

            int? memorySize,

            string? packageType,

            int? reservedConcurrentExecutions,

            string? role,

            string? runtime,

            Outputs.RuntimeManagementConfigResponse? runtimeManagementConfig,

            Outputs.SnapStartResponse? snapStart,

            Outputs.SnapStartResponseResponse? snapStartResponse,

            ImmutableArray<Outputs.TagResponse> tags,

            int? timeout,

            Outputs.TracingConfigResponse? tracingConfig,

            Outputs.VpcConfigResponse? vpcConfig)
        {
            Architectures = architectures;
            Arn = arn;
            Code = code;
            CodeSigningConfigArn = codeSigningConfigArn;
            DeadLetterConfig = deadLetterConfig;
            Description = description;
            Environment = environment;
            EphemeralStorage = ephemeralStorage;
            FileSystemConfigs = fileSystemConfigs;
            FunctionName = functionName;
            Handler = handler;
            ImageConfig = imageConfig;
            KmsKeyArn = kmsKeyArn;
            Layers = layers;
            LoggingConfig = loggingConfig;
            MemorySize = memorySize;
            PackageType = packageType;
            ReservedConcurrentExecutions = reservedConcurrentExecutions;
            Role = role;
            Runtime = runtime;
            RuntimeManagementConfig = runtimeManagementConfig;
            SnapStart = snapStart;
            SnapStartResponse = snapStartResponse;
            Tags = tags;
            Timeout = timeout;
            TracingConfig = tracingConfig;
            VpcConfig = vpcConfig;
        }
    }
}
