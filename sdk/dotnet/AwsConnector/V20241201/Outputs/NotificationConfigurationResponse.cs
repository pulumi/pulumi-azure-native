// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.V20241201.Outputs
{

    /// <summary>
    /// Definition of NotificationConfiguration
    /// </summary>
    [OutputType]
    public sealed class NotificationConfigurationResponse
    {
        /// <summary>
        /// Enables delivery of events to Amazon EventBridge. Amazon S3 can send events to Amazon EventBridge whenever certain events happen in your bucket, see [Using EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User Guide*. Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to additional targets. For more information, see [What Is Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge User Guide*
        /// </summary>
        public readonly Outputs.EventBridgeConfigurationResponse? EventBridgeConfiguration;
        /// <summary>
        /// Describes the LAMlong functions to invoke and the events for which to invoke them.
        /// </summary>
        public readonly ImmutableArray<Outputs.LambdaConfigurationResponse> LambdaConfigurations;
        /// <summary>
        /// A list of event types that send a notification. Event types can include any of the following types.  *Allowed values*:  +   ``autoscaling:EC2_INSTANCE_LAUNCH``   +   ``autoscaling:EC2_INSTANCE_LAUNCH_ERROR``   +   ``autoscaling:EC2_INSTANCE_TERMINATE``   +   ``autoscaling:EC2_INSTANCE_TERMINATE_ERROR``   +   ``autoscaling:TEST_NOTIFICATION``
        /// </summary>
        public readonly ImmutableArray<string> NotificationTypes;
        /// <summary>
        /// The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        /// </summary>
        public readonly ImmutableArray<Outputs.QueueConfigurationResponse> QueueConfigurations;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
        /// </summary>
        public readonly string? TopicARN;
        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) that identifies the topic. &lt;/p&gt;
        /// </summary>
        public readonly string? TopicArn;
        /// <summary>
        /// The topic to which notifications are sent and the events for which notifications are generated.
        /// </summary>
        public readonly ImmutableArray<Outputs.TopicConfigurationResponse> TopicConfigurations;
        /// <summary>
        /// &lt;p&gt;The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of “inactive” means that notifications will not be sent to the topic.&lt;/p&gt;
        /// </summary>
        public readonly string? TopicStatus;

        [OutputConstructor]
        private NotificationConfigurationResponse(
            Outputs.EventBridgeConfigurationResponse? eventBridgeConfiguration,

            ImmutableArray<Outputs.LambdaConfigurationResponse> lambdaConfigurations,

            ImmutableArray<string> notificationTypes,

            ImmutableArray<Outputs.QueueConfigurationResponse> queueConfigurations,

            string? topicARN,

            string? topicArn,

            ImmutableArray<Outputs.TopicConfigurationResponse> topicConfigurations,

            string? topicStatus)
        {
            EventBridgeConfiguration = eventBridgeConfiguration;
            LambdaConfigurations = lambdaConfigurations;
            NotificationTypes = notificationTypes;
            QueueConfigurations = queueConfigurations;
            TopicARN = topicARN;
            TopicArn = topicArn;
            TopicConfigurations = topicConfigurations;
            TopicStatus = topicStatus;
        }
    }
}
