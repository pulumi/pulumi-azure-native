// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of awsEc2KeyPair
    /// </summary>
    [OutputType]
    public sealed class AwsEc2KeyPairPropertiesResponse
    {
        /// <summary>
        /// Property keyFingerprint
        /// </summary>
        public readonly string? KeyFingerprint;
        /// <summary>
        /// The format of the key pair. Default: ``pem``
        /// </summary>
        public readonly string? KeyFormat;
        /// <summary>
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// Property keyPairId
        /// </summary>
        public readonly string? KeyPairId;
        /// <summary>
        /// The type of key pair. Note that ED25519 keys are not supported for Windows instances. If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value. Default: ``rsa``
        /// </summary>
        public readonly string? KeyType;
        /// <summary>
        /// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
        /// </summary>
        public readonly string? PublicKeyMaterial;
        /// <summary>
        /// The tags to apply to the key pair.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagResponse> Tags;

        [OutputConstructor]
        private AwsEc2KeyPairPropertiesResponse(
            string? keyFingerprint,

            string? keyFormat,

            string? keyName,

            string? keyPairId,

            string? keyType,

            string? publicKeyMaterial,

            ImmutableArray<Outputs.TagResponse> tags)
        {
            KeyFingerprint = keyFingerprint;
            KeyFormat = keyFormat;
            KeyName = keyName;
            KeyPairId = keyPairId;
            KeyType = keyType;
            PublicKeyMaterial = publicKeyMaterial;
            Tags = tags;
        }
    }
}
