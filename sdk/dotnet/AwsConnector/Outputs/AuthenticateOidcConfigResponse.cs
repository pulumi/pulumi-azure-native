// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of AuthenticateOidcConfig
    /// </summary>
    [OutputType]
    public sealed class AuthenticateOidcConfigResponse
    {
        /// <summary>
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AuthenticationRequestExtraParams;
        /// <summary>
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// </summary>
        public readonly string? AuthorizationEndpoint;
        /// <summary>
        /// The OAuth 2.0 client identifier.
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// </summary>
        public readonly string? Issuer;
        /// <summary>
        /// The behavior if the user is not authenticated. The following are possible values:  +  deny```` - Return an HTTP 401 Unauthorized error.  +  allow```` - Allow the request to be forwarded to the target.  +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
        /// </summary>
        public readonly string? OnUnauthenticatedRequest;
        /// <summary>
        /// The set of user claims to be requested from the IdP. The default is ``openid``. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        /// </summary>
        public readonly string? SessionCookieName;
        /// <summary>
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        /// </summary>
        public readonly string? SessionTimeout;
        /// <summary>
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// </summary>
        public readonly string? TokenEndpoint;
        /// <summary>
        /// Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
        /// </summary>
        public readonly bool? UseExistingClientSecret;
        /// <summary>
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// </summary>
        public readonly string? UserInfoEndpoint;

        [OutputConstructor]
        private AuthenticateOidcConfigResponse(
            ImmutableDictionary<string, string>? authenticationRequestExtraParams,

            string? authorizationEndpoint,

            string? clientId,

            string? clientSecret,

            string? issuer,

            string? onUnauthenticatedRequest,

            string? scope,

            string? sessionCookieName,

            string? sessionTimeout,

            string? tokenEndpoint,

            bool? useExistingClientSecret,

            string? userInfoEndpoint)
        {
            AuthenticationRequestExtraParams = authenticationRequestExtraParams;
            AuthorizationEndpoint = authorizationEndpoint;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Issuer = issuer;
            OnUnauthenticatedRequest = onUnauthenticatedRequest;
            Scope = scope;
            SessionCookieName = sessionCookieName;
            SessionTimeout = sessionTimeout;
            TokenEndpoint = tokenEndpoint;
            UseExistingClientSecret = useExistingClientSecret;
            UserInfoEndpoint = userInfoEndpoint;
        }
    }
}
