// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of Filter
    /// </summary>
    [OutputType]
    public sealed class FilterResponse
    {
        /// <summary>
        /// How to handle logs that satisfy the filter's conditions and requirement.
        /// </summary>
        public readonly string? Behavior;
        /// <summary>
        /// Match conditions for the filter.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConditionResponse> Conditions;
        /// <summary>
        /// Property contains
        /// </summary>
        public readonly ImmutableArray<string> Contains;
        /// <summary>
        /// Property eq
        /// </summary>
        public readonly ImmutableArray<string> Eq;
        /// <summary>
        /// Property exists
        /// </summary>
        public readonly bool? Exists;
        /// <summary>
        /// Property neq
        /// </summary>
        public readonly ImmutableArray<string> Neq;
        /// <summary>
        /// Property property
        /// </summary>
        public readonly string? Property;
        /// <summary>
        /// Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        /// </summary>
        public readonly string? Requirement;

        [OutputConstructor]
        private FilterResponse(
            string? behavior,

            ImmutableArray<Outputs.ConditionResponse> conditions,

            ImmutableArray<string> contains,

            ImmutableArray<string> eq,

            bool? exists,

            ImmutableArray<string> neq,

            string? property,

            string? requirement)
        {
            Behavior = behavior;
            Conditions = conditions;
            Contains = contains;
            Eq = eq;
            Exists = exists;
            Neq = neq;
            Property = property;
            Requirement = requirement;
        }
    }
}
