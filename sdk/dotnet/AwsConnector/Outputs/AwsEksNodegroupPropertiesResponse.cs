// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of awsEksNodegroup
    /// </summary>
    [OutputType]
    public sealed class AwsEksNodegroupPropertiesResponse
    {
        /// <summary>
        /// The AMI type for your node group.
        /// </summary>
        public readonly string? AmiType;
        /// <summary>
        /// Property arn
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The capacity type of your managed node group.
        /// </summary>
        public readonly string? CapacityType;
        /// <summary>
        /// Name of the cluster to create the node group in.
        /// </summary>
        public readonly string? ClusterName;
        /// <summary>
        /// The root device disk size (in GiB) for your node group instances.
        /// </summary>
        public readonly int? DiskSize;
        /// <summary>
        /// Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.
        /// </summary>
        public readonly bool? ForceUpdateEnabled;
        /// <summary>
        /// Property id
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Specify the instance types for a node group.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypes;
        /// <summary>
        /// The Kubernetes labels to be applied to the nodes in the node group when they are created.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// An object representing a node group's launch template specification. An object representing a launch template specification for AWS EKS Nodegroup.
        /// </summary>
        public readonly Outputs.LaunchTemplateSpecificationResponse? LaunchTemplate;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
        /// </summary>
        public readonly string? NodeRole;
        /// <summary>
        /// The unique name to give your node group.
        /// </summary>
        public readonly string? NodegroupName;
        /// <summary>
        /// The AMI version of the Amazon EKS-optimized AMI to use with your node group.
        /// </summary>
        public readonly string? ReleaseVersion;
        /// <summary>
        /// The remote access (SSH) configuration to use with your node group. An object representing a remote access configuration specification for AWS EKS Nodegroup.
        /// </summary>
        public readonly Outputs.RemoteAccessResponse? RemoteAccess;
        /// <summary>
        /// The scaling configuration details for the Auto Scaling group that is created for your node group. An object representing a auto scaling group specification for AWS EKS Nodegroup.
        /// </summary>
        public readonly Outputs.ScalingConfigResponse? ScalingConfig;
        /// <summary>
        /// The subnets to use for the Auto Scaling group that is created for your node group.
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The Kubernetes taints to be applied to the nodes in the node group when they are created.
        /// </summary>
        public readonly ImmutableArray<Outputs.TaintResponse> Taints;
        /// <summary>
        /// The node group update configuration. The node group update configuration.
        /// </summary>
        public readonly Outputs.UpdateConfigResponse? UpdateConfig;
        /// <summary>
        /// The Kubernetes version to use for your managed nodes.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private AwsEksNodegroupPropertiesResponse(
            string? amiType,

            string? arn,

            string? capacityType,

            string? clusterName,

            int? diskSize,

            bool? forceUpdateEnabled,

            string? id,

            ImmutableArray<string> instanceTypes,

            ImmutableDictionary<string, string>? labels,

            Outputs.LaunchTemplateSpecificationResponse? launchTemplate,

            string? nodeRole,

            string? nodegroupName,

            string? releaseVersion,

            Outputs.RemoteAccessResponse? remoteAccess,

            Outputs.ScalingConfigResponse? scalingConfig,

            ImmutableArray<string> subnets,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.TaintResponse> taints,

            Outputs.UpdateConfigResponse? updateConfig,

            string? version)
        {
            AmiType = amiType;
            Arn = arn;
            CapacityType = capacityType;
            ClusterName = clusterName;
            DiskSize = diskSize;
            ForceUpdateEnabled = forceUpdateEnabled;
            Id = id;
            InstanceTypes = instanceTypes;
            Labels = labels;
            LaunchTemplate = launchTemplate;
            NodeRole = nodeRole;
            NodegroupName = nodegroupName;
            ReleaseVersion = releaseVersion;
            RemoteAccess = remoteAccess;
            ScalingConfig = scalingConfig;
            Subnets = subnets;
            Tags = tags;
            Taints = taints;
            UpdateConfig = updateConfig;
            Version = version;
        }
    }
}
