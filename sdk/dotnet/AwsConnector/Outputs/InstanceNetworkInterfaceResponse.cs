// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of InstanceNetworkInterface
    /// </summary>
    [OutputType]
    public sealed class InstanceNetworkInterfaceResponse
    {
        /// <summary>
        /// &lt;p&gt;The association information for an Elastic IPv4 associated with the network interface.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.InstanceNetworkInterfaceAssociationResponse? Association;
        /// <summary>
        /// &lt;p&gt;The network interface attachment.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.InstanceNetworkInterfaceAttachmentResponse? Attachment;
        /// <summary>
        /// &lt;p&gt;A security group connection tracking configuration that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts'&gt;Connection tracking timeouts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.ConnectionTrackingSpecificationResponseResponse? ConnectionTrackingConfiguration;
        /// <summary>
        /// &lt;p&gt;The description.&lt;/p&gt;
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// &lt;p&gt;The security groups.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.GroupIdentifierResponse> Groups;
        /// <summary>
        /// &lt;p&gt;The type of network interface.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;interface&lt;/code&gt; | &lt;code&gt;efa&lt;/code&gt; | &lt;code&gt;trunk&lt;/code&gt; &lt;/p&gt;
        /// </summary>
        public readonly string? InterfaceType;
        /// <summary>
        /// &lt;p&gt;The IPv4 delegated prefixes that are assigned to the network interface.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceIpv4PrefixResponse> Ipv4Prefixes;
        /// <summary>
        /// &lt;p&gt;The IPv6 addresses associated with the network interface.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceIpv6AddressResponse> Ipv6Addresses;
        /// <summary>
        /// &lt;p&gt;The IPv6 delegated prefixes that are assigned to the network interface.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceIpv6PrefixResponse> Ipv6Prefixes;
        /// <summary>
        /// &lt;p&gt;The MAC address.&lt;/p&gt;
        /// </summary>
        public readonly string? MacAddress;
        /// <summary>
        /// &lt;p&gt;The ID of the network interface.&lt;/p&gt;
        /// </summary>
        public readonly string? NetworkInterfaceId;
        /// <summary>
        /// &lt;p&gt;The ID of the Amazon Web Services account that created the network interface.&lt;/p&gt;
        /// </summary>
        public readonly string? OwnerId;
        /// <summary>
        /// &lt;p&gt;The private DNS name.&lt;/p&gt;
        /// </summary>
        public readonly string? PrivateDnsName;
        /// <summary>
        /// &lt;p&gt;The IPv4 address of the network interface within the subnet.&lt;/p&gt;
        /// </summary>
        public readonly string? PrivateIpAddress;
        /// <summary>
        /// &lt;p&gt;The private IPv4 addresses associated with the network interface.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.InstancePrivateIpAddressResponse> PrivateIpAddresses;
        /// <summary>
        /// &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;
        /// </summary>
        public readonly bool? SourceDestCheck;
        /// <summary>
        /// &lt;p&gt;The status of the network interface.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.NetworkInterfaceStatusEnumValueResponse? Status;
        /// <summary>
        /// &lt;p&gt;The ID of the subnet.&lt;/p&gt;
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// &lt;p&gt;The ID of the VPC.&lt;/p&gt;
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private InstanceNetworkInterfaceResponse(
            Outputs.InstanceNetworkInterfaceAssociationResponse? association,

            Outputs.InstanceNetworkInterfaceAttachmentResponse? attachment,

            Outputs.ConnectionTrackingSpecificationResponseResponse? connectionTrackingConfiguration,

            string? description,

            ImmutableArray<Outputs.GroupIdentifierResponse> groups,

            string? interfaceType,

            ImmutableArray<Outputs.InstanceIpv4PrefixResponse> ipv4Prefixes,

            ImmutableArray<Outputs.InstanceIpv6AddressResponse> ipv6Addresses,

            ImmutableArray<Outputs.InstanceIpv6PrefixResponse> ipv6Prefixes,

            string? macAddress,

            string? networkInterfaceId,

            string? ownerId,

            string? privateDnsName,

            string? privateIpAddress,

            ImmutableArray<Outputs.InstancePrivateIpAddressResponse> privateIpAddresses,

            bool? sourceDestCheck,

            Outputs.NetworkInterfaceStatusEnumValueResponse? status,

            string? subnetId,

            string? vpcId)
        {
            Association = association;
            Attachment = attachment;
            ConnectionTrackingConfiguration = connectionTrackingConfiguration;
            Description = description;
            Groups = groups;
            InterfaceType = interfaceType;
            Ipv4Prefixes = ipv4Prefixes;
            Ipv6Addresses = ipv6Addresses;
            Ipv6Prefixes = ipv6Prefixes;
            MacAddress = macAddress;
            NetworkInterfaceId = networkInterfaceId;
            OwnerId = ownerId;
            PrivateDnsName = privateDnsName;
            PrivateIpAddress = privateIpAddress;
            PrivateIpAddresses = privateIpAddresses;
            SourceDestCheck = sourceDestCheck;
            Status = status;
            SubnetId = subnetId;
            VpcId = vpcId;
        }
    }
}
