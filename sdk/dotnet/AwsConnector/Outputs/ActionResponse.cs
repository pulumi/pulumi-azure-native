// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of Action
    /// </summary>
    [OutputType]
    public sealed class ActionResponse
    {
        /// <summary>
        /// [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito``. Specifies information required when integrating with Amazon Cognito to authenticate users.
        /// </summary>
        public readonly Outputs.AuthenticateCognitoConfigResponse? AuthenticateCognitoConfig;
        /// <summary>
        /// [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``. Specifies information required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
        /// </summary>
        public readonly Outputs.AuthenticateOidcConfigResponse? AuthenticateOidcConfig;
        /// <summary>
        /// [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response``. Specifies information required when returning a custom HTTP response.
        /// </summary>
        public readonly Outputs.FixedResponseConfigResponse? FixedResponseConfig;
        /// <summary>
        /// Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``. Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
        /// </summary>
        public readonly Outputs.ForwardConfigResponse? ForwardConfig;
        /// <summary>
        /// The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
        /// </summary>
        public readonly int? Order;
        /// <summary>
        /// [Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect``. Information about a redirect action. A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values. You can reuse URI components using the following reserved keywords:  +  #{protocol}  +  #{host}  +  #{port}  +  #{path} (the leading '/' is removed)  +  #{query}   For example, you can change the path to '/new/#{path}', the hostname to 'example.#{host}', or the query to '#{query}&amp;value=xyz'.
        /// </summary>
        public readonly Outputs.RedirectConfigResponse? RedirectConfig;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
        /// </summary>
        public readonly string? TargetGroupArn;
        /// <summary>
        /// The type of action.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ActionResponse(
            Outputs.AuthenticateCognitoConfigResponse? authenticateCognitoConfig,

            Outputs.AuthenticateOidcConfigResponse? authenticateOidcConfig,

            Outputs.FixedResponseConfigResponse? fixedResponseConfig,

            Outputs.ForwardConfigResponse? forwardConfig,

            int? order,

            Outputs.RedirectConfigResponse? redirectConfig,

            string? targetGroupArn,

            string? type)
        {
            AuthenticateCognitoConfig = authenticateCognitoConfig;
            AuthenticateOidcConfig = authenticateOidcConfig;
            FixedResponseConfig = fixedResponseConfig;
            ForwardConfig = forwardConfig;
            Order = order;
            RedirectConfig = redirectConfig;
            TargetGroupArn = targetGroupArn;
            Type = type;
        }
    }
}
