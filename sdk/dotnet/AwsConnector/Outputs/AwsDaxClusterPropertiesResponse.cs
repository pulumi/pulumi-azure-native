// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of awsDaxCluster
    /// </summary>
    [OutputType]
    public sealed class AwsDaxClusterPropertiesResponse
    {
        /// <summary>
        /// &lt;p&gt;The number of nodes in the cluster that are active (i.e., capable of serving requests).&lt;/p&gt;
        /// </summary>
        public readonly int? ActiveNodes;
        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) that uniquely identifies the cluster. &lt;/p&gt;
        /// </summary>
        public readonly string? ClusterArn;
        /// <summary>
        /// &lt;p&gt;The endpoint for this DAX cluster, consisting of a DNS name, a port number, and a URL. Applications should use the URL to configure the DAX client to find their cluster.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.DaxClusterEndpointResponse? ClusterDiscoveryEndpoint;
        /// <summary>
        /// &lt;p&gt;The type of encryption supported by the cluster's endpoint. Values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; for no encryption&lt;/p&gt; &lt;p&gt; &lt;code&gt;TLS&lt;/code&gt; for Transport Layer Security&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        public readonly Outputs.ClusterEndpointEncryptionTypeEnumValueResponse? ClusterEndpointEncryptionType;
        /// <summary>
        /// &lt;p&gt;The name of the DAX cluster.&lt;/p&gt;
        /// </summary>
        public readonly string? ClusterName;
        /// <summary>
        /// &lt;p&gt;The description of the cluster.&lt;/p&gt;
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// &lt;p&gt;A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.&lt;/p&gt;
        /// </summary>
        public readonly string? IamRoleArn;
        /// <summary>
        /// &lt;p&gt;A list of nodes to be removed from the cluster.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<string> NodeIdsToRemove;
        /// <summary>
        /// &lt;p&gt;The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)&lt;/p&gt;
        /// </summary>
        public readonly string? NodeType;
        /// <summary>
        /// &lt;p&gt;A list of nodes that are currently in the cluster.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.NodeResponse> Nodes;
        /// <summary>
        /// &lt;p&gt;Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS).&lt;/p&gt;
        /// </summary>
        public readonly Outputs.NotificationConfigurationResponse? NotificationConfiguration;
        /// <summary>
        /// &lt;p&gt;The parameter group being used by nodes in the cluster.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.ParameterGroupStatusResponse? ParameterGroup;
        /// <summary>
        /// &lt;p&gt;A range of time when maintenance of DAX cluster software will be performed. For example: &lt;code&gt;sun:01:00-sun:09:00&lt;/code&gt;. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.&lt;/p&gt;
        /// </summary>
        public readonly string? PreferredMaintenanceWindow;
        /// <summary>
        /// &lt;p&gt;A list of security groups, and the status of each, for the nodes in the cluster.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<Outputs.SecurityGroupMembershipResponse> SecurityGroups;
        /// <summary>
        /// &lt;p&gt;The description of the server-side encryption status on the specified DAX cluster.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.SSEDescriptionResponse? SseDescription;
        /// <summary>
        /// &lt;p&gt;The current status of the cluster.&lt;/p&gt;
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// &lt;p&gt;The subnet group where the DAX cluster is running.&lt;/p&gt;
        /// </summary>
        public readonly string? SubnetGroup;
        /// <summary>
        /// &lt;p&gt;The total number of nodes in the cluster.&lt;/p&gt;
        /// </summary>
        public readonly int? TotalNodes;

        [OutputConstructor]
        private AwsDaxClusterPropertiesResponse(
            int? activeNodes,

            string? clusterArn,

            Outputs.DaxClusterEndpointResponse? clusterDiscoveryEndpoint,

            Outputs.ClusterEndpointEncryptionTypeEnumValueResponse? clusterEndpointEncryptionType,

            string? clusterName,

            string? description,

            string? iamRoleArn,

            ImmutableArray<string> nodeIdsToRemove,

            string? nodeType,

            ImmutableArray<Outputs.NodeResponse> nodes,

            Outputs.NotificationConfigurationResponse? notificationConfiguration,

            Outputs.ParameterGroupStatusResponse? parameterGroup,

            string? preferredMaintenanceWindow,

            ImmutableArray<Outputs.SecurityGroupMembershipResponse> securityGroups,

            Outputs.SSEDescriptionResponse? sseDescription,

            string? status,

            string? subnetGroup,

            int? totalNodes)
        {
            ActiveNodes = activeNodes;
            ClusterArn = clusterArn;
            ClusterDiscoveryEndpoint = clusterDiscoveryEndpoint;
            ClusterEndpointEncryptionType = clusterEndpointEncryptionType;
            ClusterName = clusterName;
            Description = description;
            IamRoleArn = iamRoleArn;
            NodeIdsToRemove = nodeIdsToRemove;
            NodeType = nodeType;
            Nodes = nodes;
            NotificationConfiguration = notificationConfiguration;
            ParameterGroup = parameterGroup;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            SecurityGroups = securityGroups;
            SseDescription = sseDescription;
            Status = status;
            SubnetGroup = subnetGroup;
            TotalNodes = totalNodes;
        }
    }
}
