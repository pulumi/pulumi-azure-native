// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Outputs
{

    /// <summary>
    /// Definition of awsIamPasswordPolicy
    /// </summary>
    [OutputType]
    public sealed class AwsIamPasswordPolicyPropertiesResponse
    {
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to &lt;code&gt;iam:ChangePassword&lt;/code&gt; for only their user and to the &lt;code&gt;iam:GetAccountPasswordPolicy&lt;/code&gt; action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM.&lt;/p&gt;
        /// </summary>
        public readonly bool? AllowUsersToChangePassword;
        /// <summary>
        /// &lt;p&gt;Indicates whether passwords in the account expire. Returns true if &lt;code&gt;MaxPasswordAge&lt;/code&gt; contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.&lt;/p&gt;
        /// </summary>
        public readonly bool? ExpirePasswords;
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until an administrator resets the password. IAM users with &lt;code&gt;iam:ChangePassword&lt;/code&gt; permission and active access keys can reset their own expired console password using the CLI or API.&lt;/p&gt;
        /// </summary>
        public readonly bool? HardExpiry;
        /// <summary>
        /// &lt;p&gt;The number of days that an IAM user password is valid.&lt;/p&gt;
        /// </summary>
        public readonly int? MaxPasswordAge;
        /// <summary>
        /// &lt;p&gt;Minimum length to require for IAM user passwords.&lt;/p&gt;
        /// </summary>
        public readonly int? MinimumPasswordLength;
        /// <summary>
        /// &lt;p&gt;Specifies the number of previous passwords that IAM users are prevented from reusing.&lt;/p&gt;
        /// </summary>
        public readonly int? PasswordReusePrevention;
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM user passwords must contain at least one lowercase character (a to z).&lt;/p&gt;
        /// </summary>
        public readonly bool? RequireLowercaseCharacters;
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).&lt;/p&gt;
        /// </summary>
        public readonly bool? RequireNumbers;
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM user passwords must contain at least one of the following symbols:&lt;/p&gt; &lt;p&gt;! @ # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | '&lt;/p&gt;
        /// </summary>
        public readonly bool? RequireSymbols;
        /// <summary>
        /// &lt;p&gt;Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).&lt;/p&gt;
        /// </summary>
        public readonly bool? RequireUppercaseCharacters;

        [OutputConstructor]
        private AwsIamPasswordPolicyPropertiesResponse(
            bool? allowUsersToChangePassword,

            bool? expirePasswords,

            bool? hardExpiry,

            int? maxPasswordAge,

            int? minimumPasswordLength,

            int? passwordReusePrevention,

            bool? requireLowercaseCharacters,

            bool? requireNumbers,

            bool? requireSymbols,

            bool? requireUppercaseCharacters)
        {
            AllowUsersToChangePassword = allowUsersToChangePassword;
            ExpirePasswords = expirePasswords;
            HardExpiry = hardExpiry;
            MaxPasswordAge = maxPasswordAge;
            MinimumPasswordLength = minimumPasswordLength;
            PasswordReusePrevention = passwordReusePrevention;
            RequireLowercaseCharacters = requireLowercaseCharacters;
            RequireNumbers = requireNumbers;
            RequireSymbols = requireSymbols;
            RequireUppercaseCharacters = requireUppercaseCharacters;
        }
    }
}
