// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of InstanceNetworkInterface
    /// </summary>
    public sealed class InstanceNetworkInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The association information for an Elastic IPv4 associated with the network interface.&lt;/p&gt;
        /// </summary>
        [Input("association")]
        public Input<Inputs.InstanceNetworkInterfaceAssociationArgs>? Association { get; set; }

        /// <summary>
        /// &lt;p&gt;The network interface attachment.&lt;/p&gt;
        /// </summary>
        [Input("attachment")]
        public Input<Inputs.InstanceNetworkInterfaceAttachmentArgs>? Attachment { get; set; }

        /// <summary>
        /// &lt;p&gt;A security group connection tracking configuration that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts'&gt;Connection tracking timeouts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;
        /// </summary>
        [Input("connectionTrackingConfiguration")]
        public Input<Inputs.ConnectionTrackingSpecificationResponseArgs>? ConnectionTrackingConfiguration { get; set; }

        /// <summary>
        /// &lt;p&gt;The description.&lt;/p&gt;
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<Inputs.GroupIdentifierArgs>? _groups;

        /// <summary>
        /// &lt;p&gt;The security groups.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.GroupIdentifierArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.GroupIdentifierArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// &lt;p&gt;The type of network interface.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;interface&lt;/code&gt; | &lt;code&gt;efa&lt;/code&gt; | &lt;code&gt;trunk&lt;/code&gt; &lt;/p&gt;
        /// </summary>
        [Input("interfaceType")]
        public Input<string>? InterfaceType { get; set; }

        [Input("ipv4Prefixes")]
        private InputList<Inputs.InstanceIpv4PrefixArgs>? _ipv4Prefixes;

        /// <summary>
        /// &lt;p&gt;The IPv4 delegated prefixes that are assigned to the network interface.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.InstanceIpv4PrefixArgs> Ipv4Prefixes
        {
            get => _ipv4Prefixes ?? (_ipv4Prefixes = new InputList<Inputs.InstanceIpv4PrefixArgs>());
            set => _ipv4Prefixes = value;
        }

        [Input("ipv6Addresses")]
        private InputList<Inputs.InstanceIpv6AddressArgs>? _ipv6Addresses;

        /// <summary>
        /// &lt;p&gt;The IPv6 addresses associated with the network interface.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.InstanceIpv6AddressArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.InstanceIpv6AddressArgs>());
            set => _ipv6Addresses = value;
        }

        [Input("ipv6Prefixes")]
        private InputList<Inputs.InstanceIpv6PrefixArgs>? _ipv6Prefixes;

        /// <summary>
        /// &lt;p&gt;The IPv6 delegated prefixes that are assigned to the network interface.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.InstanceIpv6PrefixArgs> Ipv6Prefixes
        {
            get => _ipv6Prefixes ?? (_ipv6Prefixes = new InputList<Inputs.InstanceIpv6PrefixArgs>());
            set => _ipv6Prefixes = value;
        }

        /// <summary>
        /// &lt;p&gt;The MAC address.&lt;/p&gt;
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the network interface.&lt;/p&gt;
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the Amazon Web Services account that created the network interface.&lt;/p&gt;
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// &lt;p&gt;The private DNS name.&lt;/p&gt;
        /// </summary>
        [Input("privateDnsName")]
        public Input<string>? PrivateDnsName { get; set; }

        /// <summary>
        /// &lt;p&gt;The IPv4 address of the network interface within the subnet.&lt;/p&gt;
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddresses")]
        private InputList<Inputs.InstancePrivateIpAddressArgs>? _privateIpAddresses;

        /// <summary>
        /// &lt;p&gt;The private IPv4 addresses associated with the network interface.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.InstancePrivateIpAddressArgs> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<Inputs.InstancePrivateIpAddressArgs>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;
        /// </summary>
        [Input("sourceDestCheck")]
        public Input<bool>? SourceDestCheck { get; set; }

        /// <summary>
        /// &lt;p&gt;The status of the network interface.&lt;/p&gt;
        /// </summary>
        [Input("status")]
        public Input<Inputs.NetworkInterfaceStatusEnumValueArgs>? Status { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the subnet.&lt;/p&gt;
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the VPC.&lt;/p&gt;
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public InstanceNetworkInterfaceArgs()
        {
        }
        public static new InstanceNetworkInterfaceArgs Empty => new InstanceNetworkInterfaceArgs();
    }
}
