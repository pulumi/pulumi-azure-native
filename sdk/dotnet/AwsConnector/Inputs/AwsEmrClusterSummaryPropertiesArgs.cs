// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of awsEmrClusterSummary
    /// </summary>
    public sealed class AwsEmrClusterSummaryPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name of the cluster.&lt;/p&gt;
        /// </summary>
        [Input("clusterArn")]
        public Input<string>? ClusterArn { get; set; }

        /// <summary>
        /// &lt;p&gt;The unique identifier for the cluster.&lt;/p&gt;
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// &lt;p&gt;The name of the cluster.&lt;/p&gt;
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// &lt;p&gt;An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.&lt;/p&gt;
        /// </summary>
        [Input("normalizedInstanceHours")]
        public Input<int>? NormalizedInstanceHours { get; set; }

        /// <summary>
        /// &lt;p&gt; The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. &lt;/p&gt;
        /// </summary>
        [Input("outpostArn")]
        public Input<string>? OutpostArn { get; set; }

        /// <summary>
        /// &lt;p&gt;The details about the current status of the cluster.&lt;/p&gt;
        /// </summary>
        [Input("status")]
        public Input<Inputs.EmrClusterStatusArgs>? Status { get; set; }

        public AwsEmrClusterSummaryPropertiesArgs()
        {
        }
        public static new AwsEmrClusterSummaryPropertiesArgs Empty => new AwsEmrClusterSummaryPropertiesArgs();
    }
}
