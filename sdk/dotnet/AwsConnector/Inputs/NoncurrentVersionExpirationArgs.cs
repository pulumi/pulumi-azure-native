// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of NoncurrentVersionExpiration
    /// </summary>
    public sealed class NoncurrentVersionExpirationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
        /// </summary>
        [Input("newerNoncurrentVersions")]
        public Input<int>? NewerNoncurrentVersions { get; set; }

        /// <summary>
        /// Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
        /// </summary>
        [Input("noncurrentDays")]
        public Input<int>? NoncurrentDays { get; set; }

        public NoncurrentVersionExpirationArgs()
        {
        }
        public static new NoncurrentVersionExpirationArgs Empty => new NoncurrentVersionExpirationArgs();
    }
}
