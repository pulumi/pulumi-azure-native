// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of awsEc2Snapshot
    /// </summary>
    public sealed class AwsEc2SnapshotPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        [Input("dataEncryptionKeyId")]
        public Input<string>? DataEncryptionKeyId { get; set; }

        /// <summary>
        /// &lt;p&gt;The description for the snapshot.&lt;/p&gt;
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// &lt;p&gt;Indicates whether the snapshot is encrypted.&lt;/p&gt;
        /// </summary>
        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.&lt;/p&gt;
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// &lt;p&gt;The ARN of the Outpost on which the snapshot is stored. For more information, see &lt;a href='https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html'&gt;Amazon EBS local snapshots on Outposts&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt;
        /// </summary>
        [Input("outpostArn")]
        public Input<string>? OutpostArn { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Web Services owner alias, from an Amazon-maintained list (&lt;code&gt;amazon&lt;/code&gt;). This is not the user-configured Amazon Web Services account alias set using the IAM console.&lt;/p&gt;
        /// </summary>
        [Input("ownerAlias")]
        public Input<string>? OwnerAlias { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the Amazon Web Services account that owns the EBS snapshot.&lt;/p&gt;
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// &lt;p&gt;The progress of the snapshot, as a percentage.&lt;/p&gt;
        /// </summary>
        [Input("progress")]
        public Input<string>? Progress { get; set; }

        /// <summary>
        /// &lt;p&gt;Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.&lt;/p&gt;
        /// </summary>
        [Input("restoreExpiryTime")]
        public Input<string>? RestoreExpiryTime { get; set; }

        /// <summary>
        /// &lt;p&gt;The ID of the snapshot. Each snapshot receives a unique identifier when it is created.&lt;/p&gt;
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// &lt;p&gt;Reserved for future use.&lt;/p&gt;
        /// </summary>
        [Input("sseType")]
        public Input<Inputs.SSETypeEnumValueArgs>? SseType { get; set; }

        /// <summary>
        /// &lt;p&gt;The time stamp when the snapshot was initiated.&lt;/p&gt;
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// &lt;p&gt;The snapshot state.&lt;/p&gt;
        /// </summary>
        [Input("state")]
        public Input<Inputs.SnapshotStateEnumValueArgs>? State { get; set; }

        /// <summary>
        /// &lt;p&gt;Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        [Input("stateMessage")]
        public Input<string>? StateMessage { get; set; }

        /// <summary>
        /// &lt;p&gt;The storage tier in which the snapshot is stored. &lt;code&gt;standard&lt;/code&gt; indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. &lt;code&gt;archive&lt;/code&gt; indicates that the snapshot is currently archived and that it must be restored before it can be used.&lt;/p&gt;
        /// </summary>
        [Input("storageTier")]
        public Input<Inputs.StorageTierEnumValueArgs>? StorageTier { get; set; }

        [Input("tags")]
        private InputList<Inputs.TagArgs>? _tags;

        /// <summary>
        /// &lt;p&gt;Any tags assigned to the snapshot.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// &lt;p&gt;The ID of the volume that was used to create the snapshot. Snapshots created by the &lt;a&gt;CopySnapshot&lt;/a&gt; action have an arbitrary volume ID that should not be used for any purpose.&lt;/p&gt;
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// &lt;p&gt;The size of the volume, in GiB.&lt;/p&gt;
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        public AwsEc2SnapshotPropertiesArgs()
        {
        }
        public static new AwsEc2SnapshotPropertiesArgs Empty => new AwsEc2SnapshotPropertiesArgs();
    }
}
