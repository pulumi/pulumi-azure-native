// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of VpcConfig
    /// </summary>
    public sealed class VpcConfigResponseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.&lt;/p&gt;
        /// </summary>
        [Input("clusterSecurityGroupId")]
        public Input<string>? ClusterSecurityGroupId { get; set; }

        /// <summary>
        /// &lt;p&gt;This parameter indicates whether the Amazon EKS private API server endpoint is enabled. If the Amazon EKS private API server endpoint is enabled, Kubernetes API requests that originate from within your cluster's VPC use the private VPC endpoint instead of traversing the internet. If this value is disabled and you have nodes or Fargate pods in the cluster, then ensure that &lt;code&gt;publicAccessCidrs&lt;/code&gt; includes the necessary CIDR blocks for communication with the nodes or Fargate pods. For more information, see &lt;a href='https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html'&gt;Amazon EKS cluster endpoint access control&lt;/a&gt; in the &lt;i&gt; &lt;i&gt;Amazon EKS User Guide&lt;/i&gt; &lt;/i&gt;.&lt;/p&gt;
        /// </summary>
        [Input("endpointPrivateAccess")]
        public Input<bool>? EndpointPrivateAccess { get; set; }

        /// <summary>
        /// &lt;p&gt;Whether the public API server endpoint is enabled.&lt;/p&gt;
        /// </summary>
        [Input("endpointPublicAccess")]
        public Input<bool>? EndpointPublicAccess { get; set; }

        /// <summary>
        /// Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets.
        /// </summary>
        [Input("ipv6AllowedForDualStack")]
        public Input<bool>? Ipv6AllowedForDualStack { get; set; }

        [Input("publicAccessCidrs")]
        private InputList<string>? _publicAccessCidrs;

        /// <summary>
        /// &lt;p&gt;The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint.&lt;/p&gt;
        /// </summary>
        public InputList<string> PublicAccessCidrs
        {
            get => _publicAccessCidrs ?? (_publicAccessCidrs = new InputList<string>());
            set => _publicAccessCidrs = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A list of VPC security group IDs.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A list of VPC subnet IDs.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// &lt;p&gt;A list of one or more subnet IDs in your Amazon VPC.&lt;/p&gt;
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// &lt;p&gt;The VPC associated with your cluster.&lt;/p&gt;
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public VpcConfigResponseArgs()
        {
        }
        public static new VpcConfigResponseArgs Empty => new VpcConfigResponseArgs();
    }
}
