// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of awsDynamoDBTable
    /// </summary>
    public sealed class AwsDynamoDBTablePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Property arn
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("attributeDefinitions")]
        private InputList<Inputs.AttributeDefinitionArgs>? _attributeDefinitions;

        /// <summary>
        /// A list of attributes that describe the key schema for the table and indexes. This property is required to create a DDB table. Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
        /// </summary>
        public InputList<Inputs.AttributeDefinitionArgs> AttributeDefinitions
        {
            get => _attributeDefinitions ?? (_attributeDefinitions = new InputList<Inputs.AttributeDefinitionArgs>());
            set => _attributeDefinitions = value;
        }

        /// <summary>
        /// Specify how you are charged for read and write throughput and how you manage capacity. Valid values include:  +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).  +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).   If not specified, the default is ``PROVISIONED``.
        /// </summary>
        [Input("billingMode")]
        public Input<string>? BillingMode { get; set; }

        /// <summary>
        /// The settings used to enable or disable CloudWatch Contributor Insights for the specified table. The settings used to enable or disable CloudWatch Contributor Insights.
        /// </summary>
        [Input("contributorInsightsSpecification")]
        public Input<Inputs.ContributorInsightsSpecificationArgs>? ContributorInsightsSpecification { get; set; }

        /// <summary>
        /// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
        /// </summary>
        [Input("deletionProtectionEnabled")]
        public Input<bool>? DeletionProtectionEnabled { get; set; }

        [Input("globalSecondaryIndexes")]
        private InputList<Inputs.GlobalSecondaryIndexArgs>? _globalSecondaryIndexes;

        /// <summary>
        /// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.  If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command. If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index.  Updates are not supported. The following are exceptions:  +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.  +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
        /// </summary>
        public InputList<Inputs.GlobalSecondaryIndexArgs> GlobalSecondaryIndexes
        {
            get => _globalSecondaryIndexes ?? (_globalSecondaryIndexes = new InputList<Inputs.GlobalSecondaryIndexArgs>());
            set => _globalSecondaryIndexes = value;
        }

        /// <summary>
        /// Specifies the properties of data being imported from the S3 bucket source to the table.  If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission. Specifies the properties of data being imported from the S3 bucket source to the table.
        /// </summary>
        [Input("importSourceSpecification")]
        public Input<Inputs.ImportSourceSpecificationArgs>? ImportSourceSpecification { get; set; }

        [Input("keySchema")]
        private InputList<Inputs.KeySchemaArgs>? _keySchema;

        /// <summary>
        /// Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
        /// </summary>
        public InputList<Inputs.KeySchemaArgs> KeySchema
        {
            get => _keySchema ?? (_keySchema = new InputList<Inputs.KeySchemaArgs>());
            set => _keySchema = value;
        }

        /// <summary>
        /// The Kinesis Data Streams configuration for the specified table. The Kinesis Data Streams configuration for the specified table.
        /// </summary>
        [Input("kinesisStreamSpecification")]
        public Input<Inputs.KinesisStreamSpecificationArgs>? KinesisStreamSpecification { get; set; }

        [Input("localSecondaryIndexes")]
        private InputList<Inputs.LocalSecondaryIndexArgs>? _localSecondaryIndexes;

        /// <summary>
        /// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
        /// </summary>
        public InputList<Inputs.LocalSecondaryIndexArgs> LocalSecondaryIndexes
        {
            get => _localSecondaryIndexes ?? (_localSecondaryIndexes = new InputList<Inputs.LocalSecondaryIndexArgs>());
            set => _localSecondaryIndexes = value;
        }

        /// <summary>
        /// The settings used to enable point in time recovery. The settings used to enable point in time recovery.
        /// </summary>
        [Input("pointInTimeRecoverySpecification")]
        public Input<Inputs.PointInTimeRecoverySpecificationArgs>? PointInTimeRecoverySpecification { get; set; }

        /// <summary>
        /// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).  If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property. Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
        /// </summary>
        [Input("provisionedThroughput")]
        public Input<Inputs.ProvisionedThroughputArgs>? ProvisionedThroughput { get; set; }

        /// <summary>
        /// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html). Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). While defining resource-based policies in your CFNshort templates, the following considerations apply:  +  The maximum size supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating the size of a policy against this limit.   +  Resource-based policies don't support [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the changes.  +  Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within the template. For example, say that your template contains a resource-based policy, which you later update outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB won’t be synced with the policy in the template. Conversely, say that your template doesn’t contain a resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as long as you don’t add it to the template. When you add a policy to the template and update the stack, the existing policy in DDB will be updated to match the one defined in the template.   For a full list of all considerations, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
        /// </summary>
        [Input("resourcePolicy")]
        public Input<Inputs.ResourcePolicyArgs>? ResourcePolicy { get; set; }

        /// <summary>
        /// Specifies the settings to enable server-side encryption. Represents the settings used to enable server-side encryption.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.SSESpecificationArgs>? SseSpecification { get; set; }

        /// <summary>
        /// Property streamArn
        /// </summary>
        [Input("streamArn")]
        public Input<string>? StreamArn { get; set; }

        /// <summary>
        /// The settings for the DDB table stream, which capture changes to items stored in the table. Represents the DynamoDB Streams configuration for a table in DynamoDB.
        /// </summary>
        [Input("streamSpecification")]
        public Input<Inputs.StreamSpecificationArgs>? StreamSpecification { get; set; }

        /// <summary>
        /// The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
        /// </summary>
        [Input("tableClass")]
        public Input<string>? TableClass { get; set; }

        /// <summary>
        /// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        [Input("tags")]
        private InputList<Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource. For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
        /// </summary>
        public InputList<Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Time to Live (TTL) settings for the table.  For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide. Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
        /// </summary>
        [Input("timeToLiveSpecification")]
        public Input<Inputs.TimeToLiveSpecificationArgs>? TimeToLiveSpecification { get; set; }

        public AwsDynamoDBTablePropertiesArgs()
        {
        }
        public static new AwsDynamoDBTablePropertiesArgs Empty => new AwsDynamoDBTablePropertiesArgs();
    }
}
