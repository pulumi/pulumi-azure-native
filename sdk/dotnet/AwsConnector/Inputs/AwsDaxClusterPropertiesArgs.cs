// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AwsConnector.Inputs
{

    /// <summary>
    /// Definition of awsDaxCluster
    /// </summary>
    public sealed class AwsDaxClusterPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The number of nodes in the cluster that are active (i.e., capable of serving requests).&lt;/p&gt;
        /// </summary>
        [Input("activeNodes")]
        public Input<int>? ActiveNodes { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) that uniquely identifies the cluster. &lt;/p&gt;
        /// </summary>
        [Input("clusterArn")]
        public Input<string>? ClusterArn { get; set; }

        /// <summary>
        /// &lt;p&gt;The endpoint for this DAX cluster, consisting of a DNS name, a port number, and a URL. Applications should use the URL to configure the DAX client to find their cluster.&lt;/p&gt;
        /// </summary>
        [Input("clusterDiscoveryEndpoint")]
        public Input<Inputs.DaxClusterEndpointArgs>? ClusterDiscoveryEndpoint { get; set; }

        /// <summary>
        /// &lt;p&gt;The type of encryption supported by the cluster's endpoint. Values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; for no encryption&lt;/p&gt; &lt;p&gt; &lt;code&gt;TLS&lt;/code&gt; for Transport Layer Security&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        [Input("clusterEndpointEncryptionType")]
        public Input<Inputs.ClusterEndpointEncryptionTypeEnumValueArgs>? ClusterEndpointEncryptionType { get; set; }

        /// <summary>
        /// &lt;p&gt;The name of the DAX cluster.&lt;/p&gt;
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// &lt;p&gt;The description of the cluster.&lt;/p&gt;
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// &lt;p&gt;A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.&lt;/p&gt;
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        [Input("nodeIdsToRemove")]
        private InputList<string>? _nodeIdsToRemove;

        /// <summary>
        /// &lt;p&gt;A list of nodes to be removed from the cluster.&lt;/p&gt;
        /// </summary>
        public InputList<string> NodeIdsToRemove
        {
            get => _nodeIdsToRemove ?? (_nodeIdsToRemove = new InputList<string>());
            set => _nodeIdsToRemove = value;
        }

        /// <summary>
        /// &lt;p&gt;The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)&lt;/p&gt;
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("nodes")]
        private InputList<Inputs.NodeArgs>? _nodes;

        /// <summary>
        /// &lt;p&gt;A list of nodes that are currently in the cluster.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.NodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.NodeArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// &lt;p&gt;Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS).&lt;/p&gt;
        /// </summary>
        [Input("notificationConfiguration")]
        public Input<Inputs.DaxClusterNotificationConfigurationArgs>? NotificationConfiguration { get; set; }

        /// <summary>
        /// &lt;p&gt;The parameter group being used by nodes in the cluster.&lt;/p&gt;
        /// </summary>
        [Input("parameterGroup")]
        public Input<Inputs.ParameterGroupStatusArgs>? ParameterGroup { get; set; }

        /// <summary>
        /// &lt;p&gt;A range of time when maintenance of DAX cluster software will be performed. For example: &lt;code&gt;sun:01:00-sun:09:00&lt;/code&gt;. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.&lt;/p&gt;
        /// </summary>
        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("securityGroups")]
        private InputList<Inputs.SecurityGroupMembershipArgs>? _securityGroups;

        /// <summary>
        /// &lt;p&gt;A list of security groups, and the status of each, for the nodes in the cluster.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.SecurityGroupMembershipArgs> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<Inputs.SecurityGroupMembershipArgs>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// &lt;p&gt;The description of the server-side encryption status on the specified DAX cluster.&lt;/p&gt;
        /// </summary>
        [Input("sseDescription")]
        public Input<Inputs.SSEDescriptionArgs>? SseDescription { get; set; }

        /// <summary>
        /// &lt;p&gt;The current status of the cluster.&lt;/p&gt;
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// &lt;p&gt;The subnet group where the DAX cluster is running.&lt;/p&gt;
        /// </summary>
        [Input("subnetGroup")]
        public Input<string>? SubnetGroup { get; set; }

        /// <summary>
        /// &lt;p&gt;The total number of nodes in the cluster.&lt;/p&gt;
        /// </summary>
        [Input("totalNodes")]
        public Input<int>? TotalNodes { get; set; }

        public AwsDaxClusterPropertiesArgs()
        {
        }
        public static new AwsDaxClusterPropertiesArgs Empty => new AwsDaxClusterPropertiesArgs();
    }
}
