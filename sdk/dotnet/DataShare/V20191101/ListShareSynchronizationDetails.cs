// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataShare.V20191101
{
    public static class ListShareSynchronizationDetails
    {
        public static Task<ListShareSynchronizationDetailsResult> InvokeAsync(ListShareSynchronizationDetailsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ListShareSynchronizationDetailsResult>("azure-nextgen:datashare/v20191101:listShareSynchronizationDetails", args ?? new ListShareSynchronizationDetailsArgs(), options.WithVersion());
    }


    public sealed class ListShareSynchronizationDetailsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the share account.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// Email of the user who created the synchronization
        /// </summary>
        [Input("consumerEmail")]
        public string? ConsumerEmail { get; set; }

        /// <summary>
        /// Name of the user who created the synchronization
        /// </summary>
        [Input("consumerName")]
        public string? ConsumerName { get; set; }

        /// <summary>
        /// Tenant name of the consumer who created the synchronization
        /// </summary>
        [Input("consumerTenantName")]
        public string? ConsumerTenantName { get; set; }

        /// <summary>
        /// synchronization duration
        /// </summary>
        [Input("durationMs")]
        public int? DurationMs { get; set; }

        /// <summary>
        /// End time of synchronization
        /// </summary>
        [Input("endTime")]
        public string? EndTime { get; set; }

        /// <summary>
        /// Filters the results using OData syntax.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// message of synchronization
        /// </summary>
        [Input("message")]
        public string? Message { get; set; }

        /// <summary>
        /// Sorts the results using OData syntax.
        /// </summary>
        [Input("orderby")]
        public string? Orderby { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the share.
        /// </summary>
        [Input("shareName", required: true)]
        public string ShareName { get; set; } = null!;

        /// <summary>
        /// Continuation token
        /// </summary>
        [Input("skipToken")]
        public string? SkipToken { get; set; }

        /// <summary>
        /// start time of synchronization
        /// </summary>
        [Input("startTime")]
        public string? StartTime { get; set; }

        /// <summary>
        /// Raw Status
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Synchronization id
        /// </summary>
        [Input("synchronizationId")]
        public string? SynchronizationId { get; set; }

        public ListShareSynchronizationDetailsArgs()
        {
        }
    }


    [OutputType]
    public sealed class ListShareSynchronizationDetailsResult
    {
        /// <summary>
        /// The Url of next result page.
        /// </summary>
        public readonly string? NextLink;
        /// <summary>
        /// Collection of items of type DataTransferObjects.
        /// </summary>
        public readonly ImmutableArray<Outputs.SynchronizationDetailsResponseResult> Value;

        [OutputConstructor]
        private ListShareSynchronizationDetailsResult(
            string? nextLink,

            ImmutableArray<Outputs.SynchronizationDetailsResponseResult> value)
        {
            NextLink = nextLink;
            Value = value;
        }
    }
}
