// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataShare.V20200901
{
    public static class GetInvitation
    {
        /// <summary>
        /// A Invitation data transfer object.
        /// </summary>
        public static Task<GetInvitationResult> InvokeAsync(GetInvitationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInvitationResult>("azure-nextgen:datashare/v20200901:getInvitation", args ?? new GetInvitationArgs(), options.WithVersion());
    }


    public sealed class GetInvitationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the share account.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the invitation.
        /// </summary>
        [Input("invitationName", required: true)]
        public string InvitationName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the share.
        /// </summary>
        [Input("shareName", required: true)]
        public string ShareName { get; set; } = null!;

        public GetInvitationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInvitationResult
    {
        /// <summary>
        /// The expiration date for the invitation and share subscription.
        /// </summary>
        public readonly string? ExpirationDate;
        /// <summary>
        /// The resource id of the azure resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// unique invitation id
        /// </summary>
        public readonly string InvitationId;
        /// <summary>
        /// The status of the invitation.
        /// </summary>
        public readonly string InvitationStatus;
        /// <summary>
        /// Name of the azure resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The time the recipient responded to the invitation.
        /// </summary>
        public readonly string RespondedAt;
        /// <summary>
        /// Gets the time at which the invitation was sent.
        /// </summary>
        public readonly string SentAt;
        /// <summary>
        /// System Data of the Azure resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The target Azure AD Id. Can't be combined with email.
        /// </summary>
        public readonly string? TargetActiveDirectoryId;
        /// <summary>
        /// The email the invitation is directed to.
        /// </summary>
        public readonly string? TargetEmail;
        /// <summary>
        /// The target user or application Id that invitation is being sent to.
        /// Must be specified along TargetActiveDirectoryId. This enables sending
        /// invitations to specific users or applications in an AD tenant.
        /// </summary>
        public readonly string? TargetObjectId;
        /// <summary>
        /// Type of the azure resource
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Email of the user who created the resource
        /// </summary>
        public readonly string UserEmail;
        /// <summary>
        /// Name of the user who created the resource
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetInvitationResult(
            string? expirationDate,

            string id,

            string invitationId,

            string invitationStatus,

            string name,

            string respondedAt,

            string sentAt,

            Outputs.SystemDataResponse systemData,

            string? targetActiveDirectoryId,

            string? targetEmail,

            string? targetObjectId,

            string type,

            string userEmail,

            string userName)
        {
            ExpirationDate = expirationDate;
            Id = id;
            InvitationId = invitationId;
            InvitationStatus = invitationStatus;
            Name = name;
            RespondedAt = respondedAt;
            SentAt = sentAt;
            SystemData = systemData;
            TargetActiveDirectoryId = targetActiveDirectoryId;
            TargetEmail = targetEmail;
            TargetObjectId = targetObjectId;
            Type = type;
            UserEmail = userEmail;
            UserName = userName;
        }
    }
}
