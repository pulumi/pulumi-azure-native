// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.SignalRService.V20181001
{
    /// <summary>
    /// FeatureFlags is the supported features of Azure SignalR service.
    /// - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't have a backend server; "Classic": for backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
    /// - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
    /// </summary>
    [EnumType]
    public readonly struct FeatureFlags : IEquatable<FeatureFlags>
    {
        private readonly string _value;

        private FeatureFlags(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureFlags ServiceMode { get; } = new FeatureFlags("ServiceMode");
        public static FeatureFlags EnableConnectivityLogs { get; } = new FeatureFlags("EnableConnectivityLogs");

        public static bool operator ==(FeatureFlags left, FeatureFlags right) => left.Equals(right);
        public static bool operator !=(FeatureFlags left, FeatureFlags right) => !left.Equals(right);

        public static explicit operator string(FeatureFlags value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureFlags other && Equals(other);
        public bool Equals(FeatureFlags other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional tier of this particular SKU. 'Standard' or 'Free'. 
    /// 
    /// `Basic` is deprecated, use `Standard` instead.
    /// </summary>
    [EnumType]
    public readonly struct SignalRSkuTier : IEquatable<SignalRSkuTier>
    {
        private readonly string _value;

        private SignalRSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SignalRSkuTier Free { get; } = new SignalRSkuTier("Free");
        public static SignalRSkuTier Basic { get; } = new SignalRSkuTier("Basic");
        public static SignalRSkuTier Standard { get; } = new SignalRSkuTier("Standard");
        public static SignalRSkuTier Premium { get; } = new SignalRSkuTier("Premium");

        public static bool operator ==(SignalRSkuTier left, SignalRSkuTier right) => left.Equals(right);
        public static bool operator !=(SignalRSkuTier left, SignalRSkuTier right) => !left.Equals(right);

        public static explicit operator string(SignalRSkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SignalRSkuTier other && Equals(other);
        public bool Equals(SignalRSkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
