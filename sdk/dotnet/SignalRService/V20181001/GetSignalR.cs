// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.SignalRService.V20181001
{
    public static class GetSignalR
    {
        public static Task<GetSignalRResult> InvokeAsync(GetSignalRArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSignalRResult>("azure-nextgen:signalrservice/v20181001:getSignalR", args ?? new GetSignalRArgs(), options.WithVersion());
    }


    public sealed class GetSignalRArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SignalR resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetSignalRArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSignalRResult
    {
        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        public readonly Outputs.SignalRCorsSettingsResponse? Cors;
        /// <summary>
        /// The publicly accessible IP of the SignalR service.
        /// </summary>
        public readonly string ExternalIP;
        /// <summary>
        /// List of SignalR featureFlags. e.g. ServiceMode.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        public readonly ImmutableArray<Outputs.SignalRFeatureResponse> Features;
        /// <summary>
        /// FQDN of the SignalR service instance. Format: xxx.service.signalr.net
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// Prefix for the hostName of the SignalR service. Retained for future use.
        /// The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
        /// </summary>
        public readonly string? HostNamePrefix;
        /// <summary>
        /// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for browser/client side usage.
        /// </summary>
        public readonly int PublicPort;
        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for customer server side usage.
        /// </summary>
        public readonly int ServerPort;
        /// <summary>
        /// SKU of the service.
        /// </summary>
        public readonly Outputs.ResourceSkuResponse? Sku;
        /// <summary>
        /// Tags of the service which is a list of key value pairs that describe the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the service - e.g. "Microsoft.SignalRService/SignalR"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetSignalRResult(
            Outputs.SignalRCorsSettingsResponse? cors,

            string externalIP,

            ImmutableArray<Outputs.SignalRFeatureResponse> features,

            string hostName,

            string? hostNamePrefix,

            string? location,

            string name,

            string provisioningState,

            int publicPort,

            int serverPort,

            Outputs.ResourceSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? version)
        {
            Cors = cors;
            ExternalIP = externalIP;
            Features = features;
            HostName = hostName;
            HostNamePrefix = hostNamePrefix;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            PublicPort = publicPort;
            ServerPort = serverPort;
            Sku = sku;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
