// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.SignalRService.Inputs
{

    /// <summary>
    /// A class that describes the properties of the SignalR service that should contain more read-only properties than AzSignalR.Models.SignalRCreateOrUpdateProperties
    /// </summary>
    public sealed class SignalRPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.SignalRCorsSettingsResponseArgs>? Cors { get; set; }

        /// <summary>
        /// The publicly accessible IP of the SignalR service.
        /// </summary>
        [Input("externalIP", required: true)]
        public Input<string> ExternalIP { get; set; } = null!;

        [Input("features")]
        private InputList<Inputs.SignalRFeatureResponseArgs>? _features;

        /// <summary>
        /// List of SignalR featureFlags. e.g. ServiceMode.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        public InputList<Inputs.SignalRFeatureResponseArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.SignalRFeatureResponseArgs>());
            set => _features = value;
        }

        /// <summary>
        /// FQDN of the SignalR service instance. Format: xxx.service.signalr.net
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Prefix for the hostName of the SignalR service. Retained for future use.
        /// The hostname will be of format: &amp;lt;hostNamePrefix&amp;gt;.service.signalr.net.
        /// </summary>
        [Input("hostNamePrefix")]
        public Input<string>? HostNamePrefix { get; set; }

        /// <summary>
        /// Network ACLs
        /// </summary>
        [Input("networkACLs")]
        public Input<Inputs.SignalRNetworkACLsResponseArgs>? NetworkACLs { get; set; }

        [Input("privateEndpointConnections", required: true)]
        private InputList<Inputs.PrivateEndpointConnectionResponseArgs>? _privateEndpointConnections;

        /// <summary>
        /// Private endpoint connections to the SignalR resource.
        /// </summary>
        public InputList<Inputs.PrivateEndpointConnectionResponseArgs> PrivateEndpointConnections
        {
            get => _privateEndpointConnections ?? (_privateEndpointConnections = new InputList<Inputs.PrivateEndpointConnectionResponseArgs>());
            set => _privateEndpointConnections = value;
        }

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for browser/client side usage.
        /// </summary>
        [Input("publicPort", required: true)]
        public Input<int> PublicPort { get; set; } = null!;

        /// <summary>
        /// The publicly accessible port of the SignalR service which is designed for customer server side usage.
        /// </summary>
        [Input("serverPort", required: true)]
        public Input<int> ServerPort { get; set; } = null!;

        /// <summary>
        /// Upstream settings when the Azure SignalR is in server-less mode.
        /// </summary>
        [Input("upstream")]
        public Input<Inputs.ServerlessUpstreamSettingsResponseArgs>? Upstream { get; set; }

        /// <summary>
        /// Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public SignalRPropertiesResponseArgs()
        {
        }
    }
}
