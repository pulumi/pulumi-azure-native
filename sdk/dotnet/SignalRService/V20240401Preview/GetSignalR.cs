// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SignalRService.V20240401Preview
{
    public static class GetSignalR
    {
        /// <summary>
        /// Get the resource and its properties.
        /// </summary>
        public static Task<GetSignalRResult> InvokeAsync(GetSignalRArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSignalRResult>("azure-native:signalrservice/v20240401preview:getSignalR", args ?? new GetSignalRArgs(), options.WithDefaults());

        /// <summary>
        /// Get the resource and its properties.
        /// </summary>
        public static Output<GetSignalRResult> Invoke(GetSignalRInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSignalRResult>("azure-native:signalrservice/v20240401preview:getSignalR", args ?? new GetSignalRInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSignalRArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetSignalRArgs()
        {
        }
        public static new GetSignalRArgs Empty => new GetSignalRArgs();
    }

    public sealed class GetSignalRInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public GetSignalRInvokeArgs()
        {
        }
        public static new GetSignalRInvokeArgs Empty => new GetSignalRInvokeArgs();
    }


    [OutputType]
    public sealed class GetSignalRResult
    {
        /// <summary>
        /// Application firewall settings for the resource
        /// </summary>
        public readonly Outputs.ApplicationFirewallSettingsResponse? ApplicationFirewall;
        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        public readonly Outputs.SignalRCorsSettingsResponse? Cors;
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        public readonly bool? DisableAadAuth;
        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        public readonly bool? DisableLocalAuth;
        /// <summary>
        /// The publicly accessible IP of the resource.
        /// </summary>
        public readonly string ExternalIP;
        /// <summary>
        /// List of the featureFlags.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        public readonly ImmutableArray<Outputs.SignalRFeatureResponse> Features;
        /// <summary>
        /// FQDN of the service instance.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly string HostNamePrefix;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A class represent managed identities used for request and response
        /// </summary>
        public readonly Outputs.ManagedIdentityResponse? Identity;
        /// <summary>
        /// The kind of the service
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Live trace configuration of a Microsoft.SignalRService resource.
        /// </summary>
        public readonly Outputs.LiveTraceConfigurationResponse? LiveTraceConfiguration;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network ACLs for the resource
        /// </summary>
        public readonly Outputs.SignalRNetworkACLsResponse? NetworkACLs;
        /// <summary>
        /// Private endpoint connections to the resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        public readonly int PublicPort;
        /// <summary>
        /// Enable or disable the regional endpoint. Default to "Enabled".
        /// When it's Disabled, new connections will not be routed to this endpoint, however existing connections will not be affected.
        /// This property is replica specific. Disable the regional endpoint without replica is not allowed.
        /// </summary>
        public readonly string? RegionEndpointEnabled;
        /// <summary>
        /// Resource log configuration of a Microsoft.SignalRService resource.
        /// </summary>
        public readonly Outputs.ResourceLogConfigurationResponse? ResourceLogConfiguration;
        /// <summary>
        /// Stop or start the resource.  Default to "False".
        /// When it's true, the data plane of the resource is shutdown.
        /// When it's false, the data plane of the resource is started.
        /// </summary>
        public readonly string? ResourceStopped;
        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        public readonly int ServerPort;
        /// <summary>
        /// Serverless settings.
        /// </summary>
        public readonly Outputs.ServerlessSettingsResponse? Serverless;
        /// <summary>
        /// The list of shared private link resources.
        /// </summary>
        public readonly ImmutableArray<Outputs.SharedPrivateLinkResourceResponse> SharedPrivateLinkResources;
        /// <summary>
        /// The billing information of the resource.
        /// </summary>
        public readonly Outputs.ResourceSkuResponse? Sku;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// TLS settings for the resource
        /// </summary>
        public readonly Outputs.SignalRTlsSettingsResponse? Tls;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The settings for the Upstream when the service is in server-less mode.
        /// </summary>
        public readonly Outputs.ServerlessUpstreamSettingsResponse? Upstream;
        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetSignalRResult(
            Outputs.ApplicationFirewallSettingsResponse? applicationFirewall,

            Outputs.SignalRCorsSettingsResponse? cors,

            bool? disableAadAuth,

            bool? disableLocalAuth,

            string externalIP,

            ImmutableArray<Outputs.SignalRFeatureResponse> features,

            string hostName,

            string hostNamePrefix,

            string id,

            Outputs.ManagedIdentityResponse? identity,

            string? kind,

            Outputs.LiveTraceConfigurationResponse? liveTraceConfiguration,

            string location,

            string name,

            Outputs.SignalRNetworkACLsResponse? networkACLs,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            int publicPort,

            string? regionEndpointEnabled,

            Outputs.ResourceLogConfigurationResponse? resourceLogConfiguration,

            string? resourceStopped,

            int serverPort,

            Outputs.ServerlessSettingsResponse? serverless,

            ImmutableArray<Outputs.SharedPrivateLinkResourceResponse> sharedPrivateLinkResources,

            Outputs.ResourceSkuResponse? sku,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.SignalRTlsSettingsResponse? tls,

            string type,

            Outputs.ServerlessUpstreamSettingsResponse? upstream,

            string version)
        {
            ApplicationFirewall = applicationFirewall;
            Cors = cors;
            DisableAadAuth = disableAadAuth;
            DisableLocalAuth = disableLocalAuth;
            ExternalIP = externalIP;
            Features = features;
            HostName = hostName;
            HostNamePrefix = hostNamePrefix;
            Id = id;
            Identity = identity;
            Kind = kind;
            LiveTraceConfiguration = liveTraceConfiguration;
            Location = location;
            Name = name;
            NetworkACLs = networkACLs;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            PublicPort = publicPort;
            RegionEndpointEnabled = regionEndpointEnabled;
            ResourceLogConfiguration = resourceLogConfiguration;
            ResourceStopped = resourceStopped;
            ServerPort = serverPort;
            Serverless = serverless;
            SharedPrivateLinkResources = sharedPrivateLinkResources;
            Sku = sku;
            SystemData = systemData;
            Tags = tags;
            Tls = tls;
            Type = type;
            Upstream = upstream;
            Version = version;
        }
    }
}
