// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.SignalRService.V20240801Preview
{
    /// <summary>
    /// A class represent a resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:signalrservice/v20240801preview:SignalR")]
    public partial class SignalR : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Application firewall settings for the resource
        /// </summary>
        [Output("applicationFirewall")]
        public Output<Outputs.ApplicationFirewallSettingsResponse?> ApplicationFirewall { get; private set; } = null!;

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Output("cors")]
        public Output<Outputs.SignalRCorsSettingsResponse?> Cors { get; private set; } = null!;

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Output("disableAadAuth")]
        public Output<bool?> DisableAadAuth { get; private set; } = null!;

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Output("disableLocalAuth")]
        public Output<bool?> DisableLocalAuth { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible IP of the resource.
        /// </summary>
        [Output("externalIP")]
        public Output<string> ExternalIP { get; private set; } = null!;

        /// <summary>
        /// List of the featureFlags.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<Outputs.SignalRFeatureResponse>> Features { get; private set; } = null!;

        /// <summary>
        /// FQDN of the service instance.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// Deprecated.
        /// </summary>
        [Output("hostNamePrefix")]
        public Output<string> HostNamePrefix { get; private set; } = null!;

        /// <summary>
        /// A class represent managed identities used for request and response
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedIdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// The kind of the service
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Live trace configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Output("liveTraceConfiguration")]
        public Output<Outputs.LiveTraceConfigurationResponse?> LiveTraceConfiguration { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network ACLs for the resource
        /// </summary>
        [Output("networkACLs")]
        public Output<Outputs.SignalRNetworkACLsResponse?> NetworkACLs { get; private set; } = null!;

        /// <summary>
        /// Private endpoint connections to the resource.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for browser/client side usage.
        /// </summary>
        [Output("publicPort")]
        public Output<int> PublicPort { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the regional endpoint. Default to "Enabled".
        /// When it's Disabled, new connections will not be routed to this endpoint, however existing connections will not be affected.
        /// This property is replica specific. Disable the regional endpoint without replica is not allowed.
        /// </summary>
        [Output("regionEndpointEnabled")]
        public Output<string?> RegionEndpointEnabled { get; private set; } = null!;

        /// <summary>
        /// Resource log configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Output("resourceLogConfiguration")]
        public Output<Outputs.ResourceLogConfigurationResponse?> ResourceLogConfiguration { get; private set; } = null!;

        /// <summary>
        /// Stop or start the resource.  Default to "False".
        /// When it's true, the data plane of the resource is shutdown.
        /// When it's false, the data plane of the resource is started.
        /// </summary>
        [Output("resourceStopped")]
        public Output<string?> ResourceStopped { get; private set; } = null!;

        /// <summary>
        /// The publicly accessible port of the resource which is designed for customer server side usage.
        /// </summary>
        [Output("serverPort")]
        public Output<int> ServerPort { get; private set; } = null!;

        /// <summary>
        /// Serverless settings.
        /// </summary>
        [Output("serverless")]
        public Output<Outputs.ServerlessSettingsResponse?> Serverless { get; private set; } = null!;

        /// <summary>
        /// The list of shared private link resources.
        /// </summary>
        [Output("sharedPrivateLinkResources")]
        public Output<ImmutableArray<Outputs.SharedPrivateLinkResourceResponse>> SharedPrivateLinkResources { get; private set; } = null!;

        /// <summary>
        /// The billing information of the resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.ResourceSkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// TLS settings for the resource
        /// </summary>
        [Output("tls")]
        public Output<Outputs.SignalRTlsSettingsResponse?> Tls { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The settings for the Upstream when the service is in server-less mode.
        /// </summary>
        [Output("upstream")]
        public Output<Outputs.ServerlessUpstreamSettingsResponse?> Upstream { get; private set; } = null!;

        /// <summary>
        /// Version of the resource. Probably you need the same or higher version of client SDKs.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SignalR resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SignalR(string name, SignalRArgs args, CustomResourceOptions? options = null)
            : base("azure-native:signalrservice/v20240801preview:SignalR", name, args ?? new SignalRArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SignalR(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:signalrservice/v20240801preview:SignalR", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20180301preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20181001:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20200501:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20200701preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20210401preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20210601preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20210901preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20211001:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20220201:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20220801preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20230201:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20230301preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20230601preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20230801preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20240101preview:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20240301:SignalR" },
                    new global::Pulumi.Alias { Type = "azure-native:signalrservice/v20240401preview:SignalR" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SignalR resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SignalR Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SignalR(name, id, options);
        }
    }

    public sealed class SignalRArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Application firewall settings for the resource
        /// </summary>
        [Input("applicationFirewall")]
        public Input<Inputs.ApplicationFirewallSettingsArgs>? ApplicationFirewall { get; set; }

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.SignalRCorsSettingsArgs>? Cors { get; set; }

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won't work.
        /// </summary>
        [Input("disableAadAuth")]
        public Input<bool>? DisableAadAuth { get; set; }

        /// <summary>
        /// DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won't work.
        /// </summary>
        [Input("disableLocalAuth")]
        public Input<bool>? DisableLocalAuth { get; set; }

        [Input("features")]
        private InputList<Inputs.SignalRFeatureArgs>? _features;

        /// <summary>
        /// List of the featureFlags.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, its globally default value will be used
        /// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
        /// </summary>
        public InputList<Inputs.SignalRFeatureArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.SignalRFeatureArgs>());
            set => _features = value;
        }

        /// <summary>
        /// A class represent managed identities used for request and response
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The kind of the service
        /// </summary>
        [Input("kind")]
        public InputUnion<string, Pulumi.AzureNative.SignalRService.V20240801Preview.ServiceKind>? Kind { get; set; }

        /// <summary>
        /// Live trace configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Input("liveTraceConfiguration")]
        public Input<Inputs.LiveTraceConfigurationArgs>? LiveTraceConfiguration { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Network ACLs for the resource
        /// </summary>
        [Input("networkACLs")]
        public Input<Inputs.SignalRNetworkACLsArgs>? NetworkACLs { get; set; }

        /// <summary>
        /// Enable or disable public network access. Default to "Enabled".
        /// When it's Enabled, network ACLs still apply.
        /// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// Enable or disable the regional endpoint. Default to "Enabled".
        /// When it's Disabled, new connections will not be routed to this endpoint, however existing connections will not be affected.
        /// This property is replica specific. Disable the regional endpoint without replica is not allowed.
        /// </summary>
        [Input("regionEndpointEnabled")]
        public Input<string>? RegionEndpointEnabled { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Resource log configuration of a Microsoft.SignalRService resource.
        /// </summary>
        [Input("resourceLogConfiguration")]
        public Input<Inputs.ResourceLogConfigurationArgs>? ResourceLogConfiguration { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// Stop or start the resource.  Default to "False".
        /// When it's true, the data plane of the resource is shutdown.
        /// When it's false, the data plane of the resource is started.
        /// </summary>
        [Input("resourceStopped")]
        public Input<string>? ResourceStopped { get; set; }

        /// <summary>
        /// Serverless settings.
        /// </summary>
        [Input("serverless")]
        public Input<Inputs.ServerlessSettingsArgs>? Serverless { get; set; }

        /// <summary>
        /// The billing information of the resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.ResourceSkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// TLS settings for the resource
        /// </summary>
        [Input("tls")]
        public Input<Inputs.SignalRTlsSettingsArgs>? Tls { get; set; }

        /// <summary>
        /// The settings for the Upstream when the service is in server-less mode.
        /// </summary>
        [Input("upstream")]
        public Input<Inputs.ServerlessUpstreamSettingsArgs>? Upstream { get; set; }

        public SignalRArgs()
        {
            DisableAadAuth = false;
            DisableLocalAuth = false;
            PublicNetworkAccess = "Enabled";
            RegionEndpointEnabled = "Enabled";
            ResourceStopped = "false";
        }
        public static new SignalRArgs Empty => new SignalRArgs();
    }
}
