// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DataBox
{
    /// <summary>
    /// Type of address.
    /// </summary>
    [EnumType]
    public readonly struct AddressType : IEquatable<AddressType>
    {
        private readonly string _value;

        private AddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Address type not known.
        /// </summary>
        public static AddressType None { get; } = new AddressType("None");
        /// <summary>
        /// Residential Address.
        /// </summary>
        public static AddressType Residential { get; } = new AddressType("Residential");
        /// <summary>
        /// Commercial Address.
        /// </summary>
        public static AddressType Commercial { get; } = new AddressType("Commercial");

        public static bool operator ==(AddressType left, AddressType right) => left.Equals(right);
        public static bool operator !=(AddressType left, AddressType right) => !left.Equals(right);

        public static explicit operator string(AddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AddressType other && Equals(other);
        public bool Equals(AddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of job details.
    /// </summary>
    [EnumType]
    public readonly struct ClassDiscriminator : IEquatable<ClassDiscriminator>
    {
        private readonly string _value;

        private ClassDiscriminator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Data Box orders.
        /// </summary>
        public static ClassDiscriminator DataBox { get; } = new ClassDiscriminator("DataBox");
        /// <summary>
        /// Data Box Disk orders.
        /// </summary>
        public static ClassDiscriminator DataBoxDisk { get; } = new ClassDiscriminator("DataBoxDisk");
        /// <summary>
        /// Data Box Heavy orders.
        /// </summary>
        public static ClassDiscriminator DataBoxHeavy { get; } = new ClassDiscriminator("DataBoxHeavy");

        public static bool operator ==(ClassDiscriminator left, ClassDiscriminator right) => left.Equals(right);
        public static bool operator !=(ClassDiscriminator left, ClassDiscriminator right) => !left.Equals(right);

        public static explicit operator string(ClassDiscriminator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClassDiscriminator other && Equals(other);
        public bool Equals(ClassDiscriminator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the account of data.
    /// </summary>
    [EnumType]
    public readonly struct DataAccountType : IEquatable<DataAccountType>
    {
        private readonly string _value;

        private DataAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Storage Accounts .
        /// </summary>
        public static DataAccountType StorageAccount { get; } = new DataAccountType("StorageAccount");
        /// <summary>
        /// Azure Managed disk storage.
        /// </summary>
        public static DataAccountType ManagedDisk { get; } = new DataAccountType("ManagedDisk");

        public static bool operator ==(DataAccountType left, DataAccountType right) => left.Equals(right);
        public static bool operator !=(DataAccountType left, DataAccountType right) => !left.Equals(right);

        public static explicit operator string(DataAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataAccountType other && Equals(other);
        public bool Equals(DataAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines secondary layer of software-based encryption enablement.
    /// </summary>
    [EnumType]
    public readonly struct DoubleEncryption : IEquatable<DoubleEncryption>
    {
        private readonly string _value;

        private DoubleEncryption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Software-based encryption is enabled.
        /// </summary>
        public static DoubleEncryption Enabled { get; } = new DoubleEncryption("Enabled");
        /// <summary>
        /// Software-based encryption is disabled.
        /// </summary>
        public static DoubleEncryption Disabled { get; } = new DoubleEncryption("Disabled");

        public static bool operator ==(DoubleEncryption left, DoubleEncryption right) => left.Equals(right);
        public static bool operator !=(DoubleEncryption left, DoubleEncryption right) => !left.Equals(right);

        public static explicit operator string(DoubleEncryption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DoubleEncryption other && Equals(other);
        public bool Equals(DoubleEncryption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the filter file.
    /// </summary>
    [EnumType]
    public readonly struct FilterFileType : IEquatable<FilterFileType>
    {
        private readonly string _value;

        private FilterFileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Filter file is of the type AzureBlob.
        /// </summary>
        public static FilterFileType AzureBlob { get; } = new FilterFileType("AzureBlob");
        /// <summary>
        /// Filter file is of the type AzureFiles.
        /// </summary>
        public static FilterFileType AzureFile { get; } = new FilterFileType("AzureFile");

        public static bool operator ==(FilterFileType left, FilterFileType right) => left.Equals(right);
        public static bool operator !=(FilterFileType left, FilterFileType right) => !left.Equals(right);

        public static explicit operator string(FilterFileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FilterFileType other && Equals(other);
        public bool Equals(FilterFileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Delivery type of Job.
    /// </summary>
    [EnumType]
    public readonly struct JobDeliveryType : IEquatable<JobDeliveryType>
    {
        private readonly string _value;

        private JobDeliveryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Non Scheduled job.
        /// </summary>
        public static JobDeliveryType NonScheduled { get; } = new JobDeliveryType("NonScheduled");
        /// <summary>
        /// Scheduled job.
        /// </summary>
        public static JobDeliveryType Scheduled { get; } = new JobDeliveryType("Scheduled");

        public static bool operator ==(JobDeliveryType left, JobDeliveryType right) => left.Equals(right);
        public static bool operator !=(JobDeliveryType left, JobDeliveryType right) => !left.Equals(right);

        public static explicit operator string(JobDeliveryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobDeliveryType other && Equals(other);
        public bool Equals(JobDeliveryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of encryption key used for key encryption.
    /// </summary>
    [EnumType]
    public readonly struct KekType : IEquatable<KekType>
    {
        private readonly string _value;

        private KekType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Key encryption key is managed by Microsoft.
        /// </summary>
        public static KekType MicrosoftManaged { get; } = new KekType("MicrosoftManaged");
        /// <summary>
        /// Key encryption key is managed by the Customer.
        /// </summary>
        public static KekType CustomerManaged { get; } = new KekType("CustomerManaged");

        public static bool operator ==(KekType left, KekType right) => left.Equals(right);
        public static bool operator !=(KekType left, KekType right) => !left.Equals(right);

        public static explicit operator string(KekType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KekType other && Equals(other);
        public bool Equals(KekType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Level of the logs to be collected.
    /// </summary>
    [EnumType]
    public readonly struct LogCollectionLevel : IEquatable<LogCollectionLevel>
    {
        private readonly string _value;

        private LogCollectionLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Only Errors will be collected in the logs.
        /// </summary>
        public static LogCollectionLevel Error { get; } = new LogCollectionLevel("Error");
        /// <summary>
        /// Verbose logging (includes Errors, CRC, size information and others).
        /// </summary>
        public static LogCollectionLevel Verbose { get; } = new LogCollectionLevel("Verbose");

        public static bool operator ==(LogCollectionLevel left, LogCollectionLevel right) => left.Equals(right);
        public static bool operator !=(LogCollectionLevel left, LogCollectionLevel right) => !left.Equals(right);

        public static explicit operator string(LogCollectionLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogCollectionLevel other && Equals(other);
        public bool Equals(LogCollectionLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the stage.
    /// </summary>
    [EnumType]
    public readonly struct NotificationStageName : IEquatable<NotificationStageName>
    {
        private readonly string _value;

        private NotificationStageName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Notification at device prepared stage.
        /// </summary>
        public static NotificationStageName DevicePrepared { get; } = new NotificationStageName("DevicePrepared");
        /// <summary>
        /// Notification at device dispatched stage.
        /// </summary>
        public static NotificationStageName Dispatched { get; } = new NotificationStageName("Dispatched");
        /// <summary>
        /// Notification at device delivered stage.
        /// </summary>
        public static NotificationStageName Delivered { get; } = new NotificationStageName("Delivered");
        /// <summary>
        /// Notification at device picked up from user stage.
        /// </summary>
        public static NotificationStageName PickedUp { get; } = new NotificationStageName("PickedUp");
        /// <summary>
        /// Notification at device received at Azure datacenter stage.
        /// </summary>
        public static NotificationStageName AtAzureDC { get; } = new NotificationStageName("AtAzureDC");
        /// <summary>
        /// Notification at data copy started stage.
        /// </summary>
        public static NotificationStageName DataCopy { get; } = new NotificationStageName("DataCopy");

        public static bool operator ==(NotificationStageName left, NotificationStageName right) => left.Equals(right);
        public static bool operator !=(NotificationStageName left, NotificationStageName right) => !left.Equals(right);

        public static explicit operator string(NotificationStageName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NotificationStageName other && Equals(other);
        public bool Equals(NotificationStageName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sku name.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Data Box.
        /// </summary>
        public static SkuName DataBox { get; } = new SkuName("DataBox");
        /// <summary>
        /// Data Box Disk.
        /// </summary>
        public static SkuName DataBoxDisk { get; } = new SkuName("DataBoxDisk");
        /// <summary>
        /// Data Box Heavy.
        /// </summary>
        public static SkuName DataBoxHeavy { get; } = new SkuName("DataBoxHeavy");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the configuration for transfer.
    /// </summary>
    [EnumType]
    public readonly struct TransferConfigurationType : IEquatable<TransferConfigurationType>
    {
        private readonly string _value;

        private TransferConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Transfer all the data.
        /// </summary>
        public static TransferConfigurationType TransferAll { get; } = new TransferConfigurationType("TransferAll");
        /// <summary>
        /// Transfer using filter.
        /// </summary>
        public static TransferConfigurationType TransferUsingFilter { get; } = new TransferConfigurationType("TransferUsingFilter");

        public static bool operator ==(TransferConfigurationType left, TransferConfigurationType right) => left.Equals(right);
        public static bool operator !=(TransferConfigurationType left, TransferConfigurationType right) => !left.Equals(right);

        public static explicit operator string(TransferConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferConfigurationType other && Equals(other);
        public bool Equals(TransferConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the data transfer.
    /// </summary>
    [EnumType]
    public readonly struct TransferType : IEquatable<TransferType>
    {
        private readonly string _value;

        private TransferType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Import data to azure.
        /// </summary>
        public static TransferType ImportToAzure { get; } = new TransferType("ImportToAzure");
        /// <summary>
        /// Export data from azure.
        /// </summary>
        public static TransferType ExportFromAzure { get; } = new TransferType("ExportFromAzure");

        public static bool operator ==(TransferType left, TransferType right) => left.Equals(right);
        public static bool operator !=(TransferType left, TransferType right) => !left.Equals(right);

        public static explicit operator string(TransferType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransferType other && Equals(other);
        public bool Equals(TransferType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates Shipment Logistics type that the customer preferred.
    /// </summary>
    [EnumType]
    public readonly struct TransportShipmentTypes : IEquatable<TransportShipmentTypes>
    {
        private readonly string _value;

        private TransportShipmentTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Shipment Logistics is handled by the customer.
        /// </summary>
        public static TransportShipmentTypes CustomerManaged { get; } = new TransportShipmentTypes("CustomerManaged");
        /// <summary>
        /// Shipment Logistics is handled by Microsoft.
        /// </summary>
        public static TransportShipmentTypes MicrosoftManaged { get; } = new TransportShipmentTypes("MicrosoftManaged");

        public static bool operator ==(TransportShipmentTypes left, TransportShipmentTypes right) => left.Equals(right);
        public static bool operator !=(TransportShipmentTypes left, TransportShipmentTypes right) => !left.Equals(right);

        public static explicit operator string(TransportShipmentTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransportShipmentTypes other && Equals(other);
        public bool Equals(TransportShipmentTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
