// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.StandbyPool.V20240301
{
    /// <summary>
    /// Specifies refill policy of the pool.
    /// </summary>
    [EnumType]
    public readonly struct RefillPolicy : IEquatable<RefillPolicy>
    {
        private readonly string _value;

        private RefillPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A refill policy that standby pool is automatically refilled to maintain maxReadyCapacity.
        /// </summary>
        public static RefillPolicy Always { get; } = new RefillPolicy("always");

        public static bool operator ==(RefillPolicy left, RefillPolicy right) => left.Equals(right);
        public static bool operator !=(RefillPolicy left, RefillPolicy right) => !left.Equals(right);

        public static explicit operator string(RefillPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RefillPolicy other && Equals(other);
        public bool Equals(RefillPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the desired state of virtual machines in the pool.
    /// </summary>
    [EnumType]
    public readonly struct VirtualMachineState : IEquatable<VirtualMachineState>
    {
        private readonly string _value;

        private VirtualMachineState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The virtual machine is up and running.
        /// </summary>
        public static VirtualMachineState Running { get; } = new VirtualMachineState("Running");
        /// <summary>
        /// The virtual machine has released the lease on the underlying hardware and is powered off.
        /// </summary>
        public static VirtualMachineState Deallocated { get; } = new VirtualMachineState("Deallocated");

        public static bool operator ==(VirtualMachineState left, VirtualMachineState right) => left.Equals(right);
        public static bool operator !=(VirtualMachineState left, VirtualMachineState right) => !left.Equals(right);

        public static explicit operator string(VirtualMachineState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VirtualMachineState other && Equals(other);
        public bool Equals(VirtualMachineState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
