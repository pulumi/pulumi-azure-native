// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.FileShares.Outputs
{

    /// <summary>
    /// File share properties
    /// </summary>
    [OutputType]
    public sealed class FileSharePropertiesResponse
    {
        /// <summary>
        /// The host name of the file share.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// Burst IOPS are extra buffer IOPS enabling you to consume more than your provisioned IOPS for a short period of time, depending on the burst credits available for your share.
        /// </summary>
        public readonly int IncludedBurstIOPerSec;
        /// <summary>
        /// Max burst IOPS credits shows the maximum number of burst credits the share can have at the current IOPS provisioning level.
        /// </summary>
        public readonly double MaxBurstIOPerSecCredits;
        /// <summary>
        /// The storage media tier of the file share.
        /// </summary>
        public readonly string? MediaTier;
        /// <summary>
        /// The name of the file share as seen by the end user when mounting the share, such as in a URI or UNC format in their operating system.
        /// </summary>
        public readonly string? MountName;
        /// <summary>
        /// Protocol settings specific NFS.
        /// </summary>
        public readonly Outputs.NfsProtocolPropertiesResponse? NfsProtocolProperties;
        /// <summary>
        /// The list of associated private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// The file sharing protocol for this file share.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// The provisioned IO / sec of the share.
        /// </summary>
        public readonly int? ProvisionedIOPerSec;
        /// <summary>
        /// A date/time value that specifies when the provisioned IOPS for the file share is permitted to be reduced.
        /// </summary>
        public readonly string ProvisionedIOPerSecNextAllowedDowngrade;
        /// <summary>
        /// The provisioned storage size of the share in GiB (1 GiB is 1024^3 bytes or 1073741824 bytes). A component of the file share's bill is the provisioned storage, regardless of the amount of used storage.
        /// </summary>
        public readonly int? ProvisionedStorageGiB;
        /// <summary>
        /// A date/time value that specifies when the provisioned storage for the file share is permitted to be reduced.
        /// </summary>
        public readonly string ProvisionedStorageNextAllowedDowngrade;
        /// <summary>
        /// The provisioned throughput / sec of the share.
        /// </summary>
        public readonly int? ProvisionedThroughputMiBPerSec;
        /// <summary>
        /// A date/time value that specifies when the provisioned throughput for the file share is permitted to be reduced.
        /// </summary>
        public readonly string ProvisionedThroughputNextAllowedDowngrade;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The set of properties for control public access.
        /// </summary>
        public readonly Outputs.PublicAccessPropertiesResponse? PublicAccessProperties;
        /// <summary>
        /// Gets or sets allow or disallow public network access to azure managed file share
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// The chosen redundancy level of the file share.
        /// </summary>
        public readonly string? Redundancy;

        [OutputConstructor]
        private FileSharePropertiesResponse(
            string hostName,

            int includedBurstIOPerSec,

            double maxBurstIOPerSecCredits,

            string? mediaTier,

            string? mountName,

            Outputs.NfsProtocolPropertiesResponse? nfsProtocolProperties,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string? protocol,

            int? provisionedIOPerSec,

            string provisionedIOPerSecNextAllowedDowngrade,

            int? provisionedStorageGiB,

            string provisionedStorageNextAllowedDowngrade,

            int? provisionedThroughputMiBPerSec,

            string provisionedThroughputNextAllowedDowngrade,

            string provisioningState,

            Outputs.PublicAccessPropertiesResponse? publicAccessProperties,

            string? publicNetworkAccess,

            string? redundancy)
        {
            HostName = hostName;
            IncludedBurstIOPerSec = includedBurstIOPerSec;
            MaxBurstIOPerSecCredits = maxBurstIOPerSecCredits;
            MediaTier = mediaTier;
            MountName = mountName;
            NfsProtocolProperties = nfsProtocolProperties;
            PrivateEndpointConnections = privateEndpointConnections;
            Protocol = protocol;
            ProvisionedIOPerSec = provisionedIOPerSec;
            ProvisionedIOPerSecNextAllowedDowngrade = provisionedIOPerSecNextAllowedDowngrade;
            ProvisionedStorageGiB = provisionedStorageGiB;
            ProvisionedStorageNextAllowedDowngrade = provisionedStorageNextAllowedDowngrade;
            ProvisionedThroughputMiBPerSec = provisionedThroughputMiBPerSec;
            ProvisionedThroughputNextAllowedDowngrade = provisionedThroughputNextAllowedDowngrade;
            ProvisioningState = provisioningState;
            PublicAccessProperties = publicAccessProperties;
            PublicNetworkAccess = publicNetworkAccess;
            Redundancy = redundancy;
        }
    }
}
