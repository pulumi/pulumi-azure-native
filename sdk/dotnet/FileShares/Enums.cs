// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.FileShares
{
    /// <summary>
    /// The storage media tier of the file share.
    /// </summary>
    [EnumType]
    public readonly struct MediaTier : IEquatable<MediaTier>
    {
        private readonly string _value;

        private MediaTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// SSD media tier.
        /// </summary>
        public static MediaTier SSD { get; } = new MediaTier("SSD");

        public static bool operator ==(MediaTier left, MediaTier right) => left.Equals(right);
        public static bool operator !=(MediaTier left, MediaTier right) => !left.Equals(right);

        public static explicit operator string(MediaTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MediaTier other && Equals(other);
        public bool Equals(MediaTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The file sharing protocol for this file share.
    /// </summary>
    [EnumType]
    public readonly struct Protocol : IEquatable<Protocol>
    {
        private readonly string _value;

        private Protocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// NFS protocol.
        /// </summary>
        public static Protocol NFS { get; } = new Protocol("NFS");

        public static bool operator ==(Protocol left, Protocol right) => left.Equals(right);
        public static bool operator !=(Protocol left, Protocol right) => !left.Equals(right);

        public static explicit operator string(Protocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Protocol other && Equals(other);
        public bool Equals(Protocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets allow or disallow public network access to azure managed file share
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The public network access is enabled
        /// </summary>
        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        /// <summary>
        /// The public network access is disabled
        /// </summary>
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The chosen redundancy level of the file share.
    /// </summary>
    [EnumType]
    public readonly struct Redundancy : IEquatable<Redundancy>
    {
        private readonly string _value;

        private Redundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Local redundancy.
        /// </summary>
        public static Redundancy Local { get; } = new Redundancy("Local");
        /// <summary>
        /// Zone redundancy.
        /// </summary>
        public static Redundancy Zone { get; } = new Redundancy("Zone");

        public static bool operator ==(Redundancy left, Redundancy right) => left.Equals(right);
        public static bool operator !=(Redundancy left, Redundancy right) => !left.Equals(right);

        public static explicit operator string(Redundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Redundancy other && Equals(other);
        public bool Equals(Redundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Root squash defines how root users on clients are mapped to the NFS share.
    /// </summary>
    [EnumType]
    public readonly struct ShareRootSquash : IEquatable<ShareRootSquash>
    {
        private readonly string _value;

        private ShareRootSquash(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No root squash.
        /// </summary>
        public static ShareRootSquash NoRootSquash { get; } = new ShareRootSquash("NoRootSquash");
        /// <summary>
        /// Root squash.
        /// </summary>
        public static ShareRootSquash RootSquash { get; } = new ShareRootSquash("RootSquash");
        /// <summary>
        /// All squash.
        /// </summary>
        public static ShareRootSquash AllSquash { get; } = new ShareRootSquash("AllSquash");

        public static bool operator ==(ShareRootSquash left, ShareRootSquash right) => left.Equals(right);
        public static bool operator !=(ShareRootSquash left, ShareRootSquash right) => !left.Equals(right);

        public static explicit operator string(ShareRootSquash value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ShareRootSquash other && Equals(other);
        public bool Equals(ShareRootSquash other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
