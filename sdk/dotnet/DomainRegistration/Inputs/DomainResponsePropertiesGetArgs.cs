// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.DomainRegistration.Inputs
{

    /// <summary>
    /// Domain resource specific properties
    /// </summary>
    public sealed class DomainResponsePropertiesGetArgs : Pulumi.ResourceArgs
    {
        [Input("authCode")]
        public Input<string>? AuthCode { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Legal agreement consent.
        /// </summary>
        [Input("consent", required: true)]
        public Input<Inputs.DomainPurchaseConsentResponseGetArgs> Consent { get; set; } = null!;

        /// <summary>
        /// Administrative contact.
        /// </summary>
        [Input("contactAdmin", required: true)]
        public Input<Inputs.ContactResponseGetArgs> ContactAdmin { get; set; } = null!;

        /// <summary>
        /// Billing contact.
        /// </summary>
        [Input("contactBilling", required: true)]
        public Input<Inputs.ContactResponseGetArgs> ContactBilling { get; set; } = null!;

        /// <summary>
        /// Registrant contact.
        /// </summary>
        [Input("contactRegistrant", required: true)]
        public Input<Inputs.ContactResponseGetArgs> ContactRegistrant { get; set; } = null!;

        /// <summary>
        /// Technical contact.
        /// </summary>
        [Input("contactTech", required: true)]
        public Input<Inputs.ContactResponseGetArgs> ContactTech { get; set; } = null!;

        /// <summary>
        /// Domain creation timestamp.
        /// </summary>
        [Input("createdTime", required: true)]
        public Input<string> CreatedTime { get; set; } = null!;

        /// <summary>
        /// Current DNS type
        /// </summary>
        [Input("dnsType")]
        public Input<string>? DnsType { get; set; }

        /// <summary>
        /// Azure DNS Zone to use
        /// </summary>
        [Input("dnsZoneId")]
        public Input<string>? DnsZoneId { get; set; }

        [Input("domainNotRenewableReasons", required: true)]
        private InputList<string>? _domainNotRenewableReasons;

        /// <summary>
        /// Reasons why domain is not renewable.
        /// </summary>
        public InputList<string> DomainNotRenewableReasons
        {
            get => _domainNotRenewableReasons ?? (_domainNotRenewableReasons = new InputList<string>());
            set => _domainNotRenewableReasons = value;
        }

        /// <summary>
        /// Domain expiration timestamp.
        /// </summary>
        [Input("expirationTime", required: true)]
        public Input<string> ExpirationTime { get; set; } = null!;

        /// <summary>
        /// Timestamp when the domain was renewed last time.
        /// </summary>
        [Input("lastRenewedTime", required: true)]
        public Input<string> LastRenewedTime { get; set; } = null!;

        [Input("managedHostNames", required: true)]
        private InputList<Inputs.HostNameResponseGetArgs>? _managedHostNames;

        /// <summary>
        /// All hostnames derived from the domain and assigned to Azure resources.
        /// </summary>
        public InputList<Inputs.HostNameResponseGetArgs> ManagedHostNames
        {
            get => _managedHostNames ?? (_managedHostNames = new InputList<Inputs.HostNameResponseGetArgs>());
            set => _managedHostNames = value;
        }

        [Input("nameServers", required: true)]
        private InputList<string>? _nameServers;

        /// <summary>
        /// Name servers.
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("privacy")]
        public Input<bool>? Privacy { get; set; }

        /// <summary>
        /// Domain provisioning state.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if domain registration status is active and 
        ///  it is hosted on name servers Azure has programmatic access to.
        /// </summary>
        [Input("readyForDnsRecordManagement", required: true)]
        public Input<bool> ReadyForDnsRecordManagement { get; set; } = null!;

        /// <summary>
        /// Domain registration status.
        /// </summary>
        [Input("registrationStatus", required: true)]
        public Input<string> RegistrationStatus { get; set; } = null!;

        /// <summary>
        /// Target DNS type (would be used for migration)
        /// </summary>
        [Input("targetDnsType")]
        public Input<string>? TargetDnsType { get; set; }

        public DomainResponsePropertiesGetArgs()
        {
        }
    }
}
