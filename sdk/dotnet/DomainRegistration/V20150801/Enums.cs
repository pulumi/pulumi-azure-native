// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DomainRegistration.V20150801
{
    /// <summary>
    /// Type of the Azure resource the hostname is assigned to
    /// </summary>
    [EnumType]
    public readonly struct AzureResourceType : IEquatable<AzureResourceType>
    {
        private readonly string _value;

        private AzureResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureResourceType Website { get; } = new AzureResourceType("Website");
        public static AzureResourceType TrafficManager { get; } = new AzureResourceType("TrafficManager");

        public static bool operator ==(AzureResourceType left, AzureResourceType right) => left.Equals(right);
        public static bool operator !=(AzureResourceType left, AzureResourceType right) => !left.Equals(right);

        public static explicit operator string(AzureResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureResourceType other && Equals(other);
        public bool Equals(AzureResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the Dns record
    /// </summary>
    [EnumType]
    public readonly struct CustomHostNameDnsRecordType : IEquatable<CustomHostNameDnsRecordType>
    {
        private readonly string _value;

        private CustomHostNameDnsRecordType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomHostNameDnsRecordType CName { get; } = new CustomHostNameDnsRecordType("CName");
        public static CustomHostNameDnsRecordType A { get; } = new CustomHostNameDnsRecordType("A");

        public static bool operator ==(CustomHostNameDnsRecordType left, CustomHostNameDnsRecordType right) => left.Equals(right);
        public static bool operator !=(CustomHostNameDnsRecordType left, CustomHostNameDnsRecordType right) => !left.Equals(right);

        public static explicit operator string(CustomHostNameDnsRecordType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomHostNameDnsRecordType other && Equals(other);
        public bool Equals(CustomHostNameDnsRecordType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Domain registration status
    /// </summary>
    [EnumType]
    public readonly struct DomainStatus : IEquatable<DomainStatus>
    {
        private readonly string _value;

        private DomainStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainStatus Active { get; } = new DomainStatus("Active");
        public static DomainStatus Awaiting { get; } = new DomainStatus("Awaiting");
        public static DomainStatus Cancelled { get; } = new DomainStatus("Cancelled");
        public static DomainStatus Confiscated { get; } = new DomainStatus("Confiscated");
        public static DomainStatus Disabled { get; } = new DomainStatus("Disabled");
        public static DomainStatus Excluded { get; } = new DomainStatus("Excluded");
        public static DomainStatus Expired { get; } = new DomainStatus("Expired");
        public static DomainStatus Failed { get; } = new DomainStatus("Failed");
        public static DomainStatus Held { get; } = new DomainStatus("Held");
        public static DomainStatus Locked { get; } = new DomainStatus("Locked");
        public static DomainStatus Parked { get; } = new DomainStatus("Parked");
        public static DomainStatus Pending { get; } = new DomainStatus("Pending");
        public static DomainStatus Reserved { get; } = new DomainStatus("Reserved");
        public static DomainStatus Reverted { get; } = new DomainStatus("Reverted");
        public static DomainStatus Suspended { get; } = new DomainStatus("Suspended");
        public static DomainStatus Transferred { get; } = new DomainStatus("Transferred");
        public static DomainStatus Unknown { get; } = new DomainStatus("Unknown");
        public static DomainStatus Unlocked { get; } = new DomainStatus("Unlocked");
        public static DomainStatus Unparked { get; } = new DomainStatus("Unparked");
        public static DomainStatus Updated { get; } = new DomainStatus("Updated");
        public static DomainStatus JsonConverterFailed { get; } = new DomainStatus("JsonConverterFailed");

        public static bool operator ==(DomainStatus left, DomainStatus right) => left.Equals(right);
        public static bool operator !=(DomainStatus left, DomainStatus right) => !left.Equals(right);

        public static explicit operator string(DomainStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainStatus other && Equals(other);
        public bool Equals(DomainStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the hostname
    /// </summary>
    [EnumType]
    public readonly struct HostNameType : IEquatable<HostNameType>
    {
        private readonly string _value;

        private HostNameType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HostNameType Verified { get; } = new HostNameType("Verified");
        public static HostNameType Managed { get; } = new HostNameType("Managed");

        public static bool operator ==(HostNameType left, HostNameType right) => left.Equals(right);
        public static bool operator !=(HostNameType left, HostNameType right) => !left.Equals(right);

        public static explicit operator string(HostNameType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HostNameType other && Equals(other);
        public bool Equals(HostNameType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Domain provisioning state
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState InProgress { get; } = new ProvisioningState("InProgress");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
