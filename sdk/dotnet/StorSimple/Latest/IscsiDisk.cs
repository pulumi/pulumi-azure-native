// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.StorSimple.Latest
{
    /// <summary>
    /// The iSCSI disk.
    /// </summary>
    public partial class IscsiDisk : Pulumi.CustomResource
    {
        /// <summary>
        /// The access control records.
        /// </summary>
        [Output("accessControlRecords")]
        public Output<ImmutableArray<string>> AccessControlRecords { get; private set; } = null!;

        /// <summary>
        /// The data policy.
        /// </summary>
        [Output("dataPolicy")]
        public Output<string> DataPolicy { get; private set; } = null!;

        /// <summary>
        /// The description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The disk status.
        /// </summary>
        [Output("diskStatus")]
        public Output<string> DiskStatus { get; private set; } = null!;

        /// <summary>
        /// The local used capacity in bytes.
        /// </summary>
        [Output("localUsedCapacityInBytes")]
        public Output<int> LocalUsedCapacityInBytes { get; private set; } = null!;

        /// <summary>
        /// The monitoring.
        /// </summary>
        [Output("monitoringStatus")]
        public Output<string> MonitoringStatus { get; private set; } = null!;

        /// <summary>
        /// The name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioned capacity in bytes.
        /// </summary>
        [Output("provisionedCapacityInBytes")]
        public Output<int> ProvisionedCapacityInBytes { get; private set; } = null!;

        /// <summary>
        /// The type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The used capacity in bytes.
        /// </summary>
        [Output("usedCapacityInBytes")]
        public Output<int> UsedCapacityInBytes { get; private set; } = null!;


        /// <summary>
        /// Create a IscsiDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IscsiDisk(string name, IscsiDiskArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:storsimple/latest:IscsiDisk", name, args ?? new IscsiDiskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IscsiDisk(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:storsimple/latest:IscsiDisk", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:storsimple/v20161001:IscsiDisk"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IscsiDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IscsiDisk Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new IscsiDisk(name, id, options);
        }
    }

    public sealed class IscsiDiskArgs : Pulumi.ResourceArgs
    {
        [Input("accessControlRecords", required: true)]
        private InputList<string>? _accessControlRecords;

        /// <summary>
        /// The access control records.
        /// </summary>
        public InputList<string> AccessControlRecords
        {
            get => _accessControlRecords ?? (_accessControlRecords = new InputList<string>());
            set => _accessControlRecords = value;
        }

        /// <summary>
        /// The data policy.
        /// </summary>
        [Input("dataPolicy", required: true)]
        public Input<string> DataPolicy { get; set; } = null!;

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        /// <summary>
        /// The disk name.
        /// </summary>
        [Input("diskName", required: true)]
        public Input<string> DiskName { get; set; } = null!;

        /// <summary>
        /// The disk status.
        /// </summary>
        [Input("diskStatus", required: true)]
        public Input<string> DiskStatus { get; set; } = null!;

        /// <summary>
        /// The iSCSI server name.
        /// </summary>
        [Input("iscsiServerName", required: true)]
        public Input<string> IscsiServerName { get; set; } = null!;

        /// <summary>
        /// The manager name
        /// </summary>
        [Input("managerName", required: true)]
        public Input<string> ManagerName { get; set; } = null!;

        /// <summary>
        /// The monitoring.
        /// </summary>
        [Input("monitoringStatus", required: true)]
        public Input<string> MonitoringStatus { get; set; } = null!;

        /// <summary>
        /// The provisioned capacity in bytes.
        /// </summary>
        [Input("provisionedCapacityInBytes", required: true)]
        public Input<int> ProvisionedCapacityInBytes { get; set; } = null!;

        /// <summary>
        /// The resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public IscsiDiskArgs()
        {
        }
    }
}
