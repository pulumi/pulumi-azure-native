// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.StorSimple.V20170601
{
    /// <summary>
    /// The type of backup which needs to be taken.
    /// </summary>
    [EnumType]
    public readonly struct BackupType : IEquatable<BackupType>
    {
        private readonly string _value;

        private BackupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupType LocalSnapshot { get; } = new BackupType("LocalSnapshot");
        public static BackupType CloudSnapshot { get; } = new BackupType("CloudSnapshot");

        public static bool operator ==(BackupType left, BackupType right) => left.Equals(right);
        public static bool operator !=(BackupType left, BackupType right) => !left.Equals(right);

        public static explicit operator string(BackupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupType other && Equals(other);
        public bool Equals(BackupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The algorithm used to encrypt "Value".
    /// </summary>
    [EnumType]
    public readonly struct EncryptionAlgorithm : IEquatable<EncryptionAlgorithm>
    {
        private readonly string _value;

        private EncryptionAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionAlgorithm None { get; } = new EncryptionAlgorithm("None");
        public static EncryptionAlgorithm AES256 { get; } = new EncryptionAlgorithm("AES256");
        public static EncryptionAlgorithm RSAES_PKCS1_v_1_5 { get; } = new EncryptionAlgorithm("RSAES_PKCS1_v_1_5");

        public static bool operator ==(EncryptionAlgorithm left, EncryptionAlgorithm right) => left.Equals(right);
        public static bool operator !=(EncryptionAlgorithm left, EncryptionAlgorithm right) => !left.Equals(right);

        public static explicit operator string(EncryptionAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionAlgorithm other && Equals(other);
        public bool Equals(EncryptionAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Kind of the object. Currently only Series8000 is supported
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind Series8000 { get; } = new Kind("Series8000");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Refers to the sku name which should be "Standard"
    /// </summary>
    [EnumType]
    public readonly struct ManagerSkuType : IEquatable<ManagerSkuType>
    {
        private readonly string _value;

        private ManagerSkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagerSkuType Standard { get; } = new ManagerSkuType("Standard");

        public static bool operator ==(ManagerSkuType left, ManagerSkuType right) => left.Equals(right);
        public static bool operator !=(ManagerSkuType left, ManagerSkuType right) => !left.Equals(right);

        public static explicit operator string(ManagerSkuType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagerSkuType other && Equals(other);
        public bool Equals(ManagerSkuType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of StorSimple Manager.
    /// </summary>
    [EnumType]
    public readonly struct ManagerType : IEquatable<ManagerType>
    {
        private readonly string _value;

        private ManagerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagerType GardaV1 { get; } = new ManagerType("GardaV1");
        public static ManagerType HelsinkiV1 { get; } = new ManagerType("HelsinkiV1");

        public static bool operator ==(ManagerType left, ManagerType right) => left.Equals(right);
        public static bool operator !=(ManagerType left, ManagerType right) => !left.Equals(right);

        public static explicit operator string(ManagerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagerType other && Equals(other);
        public bool Equals(ManagerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The monitoring status of the volume.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringStatus : IEquatable<MonitoringStatus>
    {
        private readonly string _value;

        private MonitoringStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringStatus Enabled { get; } = new MonitoringStatus("Enabled");
        public static MonitoringStatus Disabled { get; } = new MonitoringStatus("Disabled");

        public static bool operator ==(MonitoringStatus left, MonitoringStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringStatus left, MonitoringStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringStatus other && Equals(other);
        public bool Equals(MonitoringStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The recurrence type.
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceType : IEquatable<RecurrenceType>
    {
        private readonly string _value;

        private RecurrenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecurrenceType Minutes { get; } = new RecurrenceType("Minutes");
        public static RecurrenceType Hourly { get; } = new RecurrenceType("Hourly");
        public static RecurrenceType Daily { get; } = new RecurrenceType("Daily");
        public static RecurrenceType Weekly { get; } = new RecurrenceType("Weekly");

        public static bool operator ==(RecurrenceType left, RecurrenceType right) => left.Equals(right);
        public static bool operator !=(RecurrenceType left, RecurrenceType right) => !left.Equals(right);

        public static explicit operator string(RecurrenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceType other && Equals(other);
        public bool Equals(RecurrenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The schedule status.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleStatus : IEquatable<ScheduleStatus>
    {
        private readonly string _value;

        private ScheduleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleStatus Enabled { get; } = new ScheduleStatus("Enabled");
        public static ScheduleStatus Disabled { get; } = new ScheduleStatus("Disabled");

        public static bool operator ==(ScheduleStatus left, ScheduleStatus right) => left.Equals(right);
        public static bool operator !=(ScheduleStatus left, ScheduleStatus right) => !left.Equals(right);

        public static explicit operator string(ScheduleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleStatus other && Equals(other);
        public bool Equals(ScheduleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Signifies whether SSL needs to be enabled or not.
    /// </summary>
    [EnumType]
    public readonly struct SslStatus : IEquatable<SslStatus>
    {
        private readonly string _value;

        private SslStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SslStatus Enabled { get; } = new SslStatus("Enabled");
        public static SslStatus Disabled { get; } = new SslStatus("Disabled");

        public static bool operator ==(SslStatus left, SslStatus right) => left.Equals(right);
        public static bool operator !=(SslStatus left, SslStatus right) => !left.Equals(right);

        public static explicit operator string(SslStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SslStatus other && Equals(other);
        public bool Equals(SslStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The volume status.
    /// </summary>
    [EnumType]
    public readonly struct VolumeStatus : IEquatable<VolumeStatus>
    {
        private readonly string _value;

        private VolumeStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeStatus Online { get; } = new VolumeStatus("Online");
        public static VolumeStatus Offline { get; } = new VolumeStatus("Offline");

        public static bool operator ==(VolumeStatus left, VolumeStatus right) => left.Equals(right);
        public static bool operator !=(VolumeStatus left, VolumeStatus right) => !left.Equals(right);

        public static explicit operator string(VolumeStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeStatus other && Equals(other);
        public bool Equals(VolumeStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the volume.
    /// </summary>
    [EnumType]
    public readonly struct VolumeType : IEquatable<VolumeType>
    {
        private readonly string _value;

        private VolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VolumeType Tiered { get; } = new VolumeType("Tiered");
        public static VolumeType Archival { get; } = new VolumeType("Archival");
        public static VolumeType LocallyPinned { get; } = new VolumeType("LocallyPinned");

        public static bool operator ==(VolumeType left, VolumeType right) => left.Equals(right);
        public static bool operator !=(VolumeType left, VolumeType right) => !left.Equals(right);

        public static explicit operator string(VolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VolumeType other && Equals(other);
        public bool Equals(VolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
