// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.StorSimple.Inputs
{

    /// <summary>
    /// The properties of volume container.
    /// </summary>
    public sealed class VolumeContainerPropertiesResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bandwidth-rate set on the volume container.
        /// </summary>
        [Input("bandWidthRateInMbps")]
        public Input<int>? BandWidthRateInMbps { get; set; }

        /// <summary>
        /// The ID of the bandwidth setting associated with the volume container.
        /// </summary>
        [Input("bandwidthSettingId")]
        public Input<string>? BandwidthSettingId { get; set; }

        /// <summary>
        /// The key used to encrypt data in the volume container. It is required when property 'EncryptionStatus' is "Enabled".
        /// </summary>
        [Input("encryptionKey")]
        public Input<Inputs.AsymmetricEncryptedSecretResponseArgs>? EncryptionKey { get; set; }

        /// <summary>
        /// The flag to denote whether encryption is enabled or not.
        /// </summary>
        [Input("encryptionStatus", required: true)]
        public Input<string> EncryptionStatus { get; set; } = null!;

        /// <summary>
        /// The owner ship status of the volume container. Only when the status is "NotOwned", the delete operation on the volume container is permitted.
        /// </summary>
        [Input("ownerShipStatus", required: true)]
        public Input<string> OwnerShipStatus { get; set; } = null!;

        /// <summary>
        /// The path ID of storage account associated with the volume container.
        /// </summary>
        [Input("storageAccountCredentialId", required: true)]
        public Input<string> StorageAccountCredentialId { get; set; } = null!;

        /// <summary>
        /// The total cloud storage for the volume container.
        /// </summary>
        [Input("totalCloudStorageUsageInBytes", required: true)]
        public Input<int> TotalCloudStorageUsageInBytes { get; set; } = null!;

        /// <summary>
        /// The number of volumes in the volume Container.
        /// </summary>
        [Input("volumeCount", required: true)]
        public Input<int> VolumeCount { get; set; } = null!;

        public VolumeContainerPropertiesResponseArgs()
        {
        }
    }
}
