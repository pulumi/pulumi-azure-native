// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.BotService.V20200602.Outputs
{

    [OutputType]
    public sealed class SlackChannelPropertiesResponse
    {
        /// <summary>
        /// The Slack client id
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// Whether this channel is enabled for the bot
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Whether this channel is validated for the bot
        /// </summary>
        public readonly bool IsValidated;
        /// <summary>
        /// The Slack landing page Url
        /// </summary>
        public readonly string? LandingPageUrl;
        /// <summary>
        /// The Sms auth token
        /// </summary>
        public readonly string LastSubmissionId;
        /// <summary>
        /// The Slack redirect action
        /// </summary>
        public readonly string RedirectAction;
        /// <summary>
        /// Whether to register the settings before OAuth validation is performed. Recommended to True.
        /// </summary>
        public readonly bool RegisterBeforeOAuthFlow;
        /// <summary>
        /// The Slack signing secret.
        /// </summary>
        public readonly string? SigningSecret;
        /// <summary>
        /// The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
        /// </summary>
        public readonly string VerificationToken;

        [OutputConstructor]
        private SlackChannelPropertiesResponse(
            string clientId,

            string clientSecret,

            bool isEnabled,

            bool isValidated,

            string? landingPageUrl,

            string lastSubmissionId,

            string redirectAction,

            bool registerBeforeOAuthFlow,

            string? signingSecret,

            string verificationToken)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            IsEnabled = isEnabled;
            IsValidated = isValidated;
            LandingPageUrl = landingPageUrl;
            LastSubmissionId = lastSubmissionId;
            RedirectAction = redirectAction;
            RegisterBeforeOAuthFlow = registerBeforeOAuthFlow;
            SigningSecret = signingSecret;
            VerificationToken = verificationToken;
        }
    }
}
