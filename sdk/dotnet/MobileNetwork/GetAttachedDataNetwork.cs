// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork
{
    public static class GetAttachedDataNetwork
    {
        /// <summary>
        /// Gets information about the specified attached data network.
        /// Azure REST API version: 2023-06-01.
        /// </summary>
        public static Task<GetAttachedDataNetworkResult> InvokeAsync(GetAttachedDataNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttachedDataNetworkResult>("azure-native:mobilenetwork:getAttachedDataNetwork", args ?? new GetAttachedDataNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about the specified attached data network.
        /// Azure REST API version: 2023-06-01.
        /// </summary>
        public static Output<GetAttachedDataNetworkResult> Invoke(GetAttachedDataNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttachedDataNetworkResult>("azure-native:mobilenetwork:getAttachedDataNetwork", args ?? new GetAttachedDataNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttachedDataNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached data network.
        /// </summary>
        [Input("attachedDataNetworkName", required: true)]
        public string AttachedDataNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public string PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core data plane.
        /// </summary>
        [Input("packetCoreDataPlaneName", required: true)]
        public string PacketCoreDataPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAttachedDataNetworkArgs()
        {
        }
        public static new GetAttachedDataNetworkArgs Empty => new GetAttachedDataNetworkArgs();
    }

    public sealed class GetAttachedDataNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the attached data network.
        /// </summary>
        [Input("attachedDataNetworkName", required: true)]
        public Input<string> AttachedDataNetworkName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public Input<string> PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core data plane.
        /// </summary>
        [Input("packetCoreDataPlaneName", required: true)]
        public Input<string> PacketCoreDataPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAttachedDataNetworkInvokeArgs()
        {
        }
        public static new GetAttachedDataNetworkInvokeArgs Empty => new GetAttachedDataNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttachedDataNetworkResult
    {
        /// <summary>
        /// The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't want DNS servers, you must provide an empty array.
        /// </summary>
        public readonly ImmutableArray<string> DnsAddresses;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network address and port translation (NAPT) configuration.
        /// If this is not specified, the attached data network will use a default NAPT configuration with NAPT enabled.
        /// </summary>
        public readonly Outputs.NaptConfigurationResponse? NaptConfiguration;
        /// <summary>
        /// The provisioning state of the attached data network resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        ///  You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define both, they must be of the same size.
        /// </summary>
        public readonly ImmutableArray<string> UserEquipmentAddressPoolPrefix;
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
        /// At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined, they must be of the same size.
        /// </summary>
        public readonly ImmutableArray<string> UserEquipmentStaticAddressPoolPrefix;
        /// <summary>
        /// The user plane interface on the data network. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        public readonly Outputs.InterfacePropertiesResponse UserPlaneDataInterface;

        [OutputConstructor]
        private GetAttachedDataNetworkResult(
            ImmutableArray<string> dnsAddresses,

            string id,

            string location,

            string name,

            Outputs.NaptConfigurationResponse? naptConfiguration,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<string> userEquipmentAddressPoolPrefix,

            ImmutableArray<string> userEquipmentStaticAddressPoolPrefix,

            Outputs.InterfacePropertiesResponse userPlaneDataInterface)
        {
            DnsAddresses = dnsAddresses;
            Id = id;
            Location = location;
            Name = name;
            NaptConfiguration = naptConfiguration;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UserEquipmentAddressPoolPrefix = userEquipmentAddressPoolPrefix;
            UserEquipmentStaticAddressPoolPrefix = userEquipmentStaticAddressPoolPrefix;
            UserPlaneDataInterface = userPlaneDataInterface;
        }
    }
}
