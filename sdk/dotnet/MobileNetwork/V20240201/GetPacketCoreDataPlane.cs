// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork.V20240201
{
    public static class GetPacketCoreDataPlane
    {
        /// <summary>
        /// Gets information about the specified packet core data plane.
        /// </summary>
        public static Task<GetPacketCoreDataPlaneResult> InvokeAsync(GetPacketCoreDataPlaneArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPacketCoreDataPlaneResult>("azure-native:mobilenetwork/v20240201:getPacketCoreDataPlane", args ?? new GetPacketCoreDataPlaneArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about the specified packet core data plane.
        /// </summary>
        public static Output<GetPacketCoreDataPlaneResult> Invoke(GetPacketCoreDataPlaneInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPacketCoreDataPlaneResult>("azure-native:mobilenetwork/v20240201:getPacketCoreDataPlane", args ?? new GetPacketCoreDataPlaneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPacketCoreDataPlaneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public string PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core data plane.
        /// </summary>
        [Input("packetCoreDataPlaneName", required: true)]
        public string PacketCoreDataPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPacketCoreDataPlaneArgs()
        {
        }
        public static new GetPacketCoreDataPlaneArgs Empty => new GetPacketCoreDataPlaneArgs();
    }

    public sealed class GetPacketCoreDataPlaneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public Input<string> PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core data plane.
        /// </summary>
        [Input("packetCoreDataPlaneName", required: true)]
        public Input<string> PacketCoreDataPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPacketCoreDataPlaneInvokeArgs()
        {
        }
        public static new GetPacketCoreDataPlaneInvokeArgs Empty => new GetPacketCoreDataPlaneInvokeArgs();
    }


    [OutputType]
    public sealed class GetPacketCoreDataPlaneResult
    {
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the packet core data plane resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user plane interface on the access network. For 5G networks, this is the N3 interface. For 4G networks, this is the S1-U interface.
        /// </summary>
        public readonly Outputs.InterfacePropertiesResponse UserPlaneAccessInterface;
        /// <summary>
        /// The virtual IP address(es) for the user plane on the access network in a High Availability (HA) system. In an HA deployment the access network router should be configured to forward traffic for this address to the control plane access interface on the active or standby node. In non-HA system this list should be omitted or empty.
        /// </summary>
        public readonly ImmutableArray<string> UserPlaneAccessVirtualIpv4Addresses;

        [OutputConstructor]
        private GetPacketCoreDataPlaneResult(
            string id,

            string location,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.InterfacePropertiesResponse userPlaneAccessInterface,

            ImmutableArray<string> userPlaneAccessVirtualIpv4Addresses)
        {
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            UserPlaneAccessInterface = userPlaneAccessInterface;
            UserPlaneAccessVirtualIpv4Addresses = userPlaneAccessVirtualIpv4Addresses;
        }
    }
}
