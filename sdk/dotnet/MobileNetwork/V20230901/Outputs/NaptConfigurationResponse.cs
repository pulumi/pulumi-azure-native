// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork.V20230901.Outputs
{

    /// <summary>
    /// The network address and port translation settings to use for the attached data network.
    /// </summary>
    [OutputType]
    public sealed class NaptConfigurationResponse
    {
        /// <summary>
        /// Whether NAPT is enabled for connections to this attached data network.
        /// </summary>
        public readonly string? Enabled;
        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        public readonly int? PinholeLimits;
        /// <summary>
        /// Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        /// </summary>
        public readonly Outputs.PinholeTimeoutsResponse? PinholeTimeouts;
        /// <summary>
        /// Range of port numbers to use as translated ports on each translated address.
        /// If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        /// (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
        /// </summary>
        public readonly Outputs.PortRangeResponse? PortRange;
        /// <summary>
        /// The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be at least 1 second.
        /// </summary>
        public readonly Outputs.PortReuseHoldTimesResponse? PortReuseHoldTime;

        [OutputConstructor]
        private NaptConfigurationResponse(
            string? enabled,

            int? pinholeLimits,

            Outputs.PinholeTimeoutsResponse? pinholeTimeouts,

            Outputs.PortRangeResponse? portRange,

            Outputs.PortReuseHoldTimesResponse? portReuseHoldTime)
        {
            Enabled = enabled;
            PinholeLimits = pinholeLimits;
            PinholeTimeouts = pinholeTimeouts;
            PortRange = portRange;
            PortReuseHoldTime = portReuseHoldTime;
        }
    }
}
