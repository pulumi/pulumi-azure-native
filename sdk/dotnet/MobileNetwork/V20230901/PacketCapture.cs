// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork.V20230901
{
    /// <summary>
    /// Packet capture session resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:mobilenetwork/v20230901:PacketCapture")]
    public partial class PacketCapture : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
        /// </summary>
        [Output("bytesToCapturePerPacket")]
        public Output<double?> BytesToCapturePerPacket { get; private set; } = null!;

        /// <summary>
        /// The start time of the packet capture session.
        /// </summary>
        [Output("captureStartTime")]
        public Output<string> CaptureStartTime { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of network interfaces to capture on.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<string>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The list of output files of a packet capture session.
        /// </summary>
        [Output("outputFiles")]
        public Output<ImmutableArray<string>> OutputFiles { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the packet capture session resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The reason the current packet capture session state.
        /// </summary>
        [Output("reason")]
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// The status of the packet capture session.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Maximum duration of the capture session in seconds.
        /// </summary>
        [Output("timeLimitInSeconds")]
        public Output<int?> TimeLimitInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum size of the capture output.
        /// </summary>
        [Output("totalBytesPerSession")]
        public Output<double?> TotalBytesPerSession { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PacketCapture resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PacketCapture(string name, PacketCaptureArgs args, CustomResourceOptions? options = null)
            : base("azure-native:mobilenetwork/v20230901:PacketCapture", name, args ?? new PacketCaptureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PacketCapture(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:mobilenetwork/v20230901:PacketCapture", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:mobilenetwork:PacketCapture" },
                    new global::Pulumi.Alias { Type = "azure-native:mobilenetwork/v20230601:PacketCapture" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PacketCapture resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PacketCapture Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PacketCapture(name, id, options);
        }
    }

    public sealed class PacketCaptureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
        /// </summary>
        [Input("bytesToCapturePerPacket")]
        public Input<double>? BytesToCapturePerPacket { get; set; }

        [Input("networkInterfaces")]
        private InputList<string>? _networkInterfaces;

        /// <summary>
        /// List of network interfaces to capture on.
        /// </summary>
        public InputList<string> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<string>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The name of the packet capture session.
        /// </summary>
        [Input("packetCaptureName")]
        public Input<string>? PacketCaptureName { get; set; }

        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public Input<string> PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Maximum duration of the capture session in seconds.
        /// </summary>
        [Input("timeLimitInSeconds")]
        public Input<int>? TimeLimitInSeconds { get; set; }

        /// <summary>
        /// Maximum size of the capture output.
        /// </summary>
        [Input("totalBytesPerSession")]
        public Input<double>? TotalBytesPerSession { get; set; }

        public PacketCaptureArgs()
        {
            BytesToCapturePerPacket = 0;
            TimeLimitInSeconds = 18000;
            TotalBytesPerSession = 67108864;
        }
        public static new PacketCaptureArgs Empty => new PacketCaptureArgs();
    }
}
