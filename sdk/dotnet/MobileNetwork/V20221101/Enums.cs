// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.MobileNetwork.V20221101
{
    /// <summary>
    /// How to authenticate users who access local diagnostics APIs.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationType : IEquatable<AuthenticationType>
    {
        private readonly string _value;

        private AuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use AAD SSO to authenticate the user (this requires internet access).
        /// </summary>
        public static AuthenticationType AAD { get; } = new AuthenticationType("AAD");
        /// <summary>
        /// Use locally stored passwords to authenticate the user.
        /// </summary>
        public static AuthenticationType Password { get; } = new AuthenticationType("Password");

        public static bool operator ==(AuthenticationType left, AuthenticationType right) => left.Equals(right);
        public static bool operator !=(AuthenticationType left, AuthenticationType right) => !left.Equals(right);

        public static explicit operator string(AuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationType other && Equals(other);
        public bool Equals(AuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
    /// </summary>
    [EnumType]
    public readonly struct BillingSku : IEquatable<BillingSku>
    {
        private readonly string _value;

        private BillingSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// 100 Mbps, 20 active SIMs plan, 2 RANs
        /// </summary>
        public static BillingSku G0 { get; } = new BillingSku("G0");
        /// <summary>
        /// 1 Gbps, 100 active SIMs plan, 5 RANs
        /// </summary>
        public static BillingSku G1 { get; } = new BillingSku("G1");
        /// <summary>
        /// 2 Gbps, 200 active SIMs plan, 10 RANs
        /// </summary>
        public static BillingSku G2 { get; } = new BillingSku("G2");
        /// <summary>
        /// 5 Gbps, 500 active SIMs plan
        /// </summary>
        public static BillingSku G5 { get; } = new BillingSku("G5");
        /// <summary>
        /// 10 Gbps, 1000 active SIMs plan
        /// </summary>
        public static BillingSku G10 { get; } = new BillingSku("G10");

        public static bool operator ==(BillingSku left, BillingSku right) => left.Equals(right);
        public static bool operator !=(BillingSku left, BillingSku right) => !left.Equals(right);

        public static explicit operator string(BillingSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingSku other && Equals(other);
        public bool Equals(BillingSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The core network technology generation (5G core or EPC / 4G core).
    /// </summary>
    [EnumType]
    public readonly struct CoreNetworkType : IEquatable<CoreNetworkType>
    {
        private readonly string _value;

        private CoreNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// 5G core
        /// </summary>
        public static CoreNetworkType CoreNetworkType_5GC { get; } = new CoreNetworkType("5GC");
        /// <summary>
        /// EPC / 4G core
        /// </summary>
        public static CoreNetworkType EPC { get; } = new CoreNetworkType("EPC");

        public static bool operator ==(CoreNetworkType left, CoreNetworkType right) => left.Equals(right);
        public static bool operator !=(CoreNetworkType left, CoreNetworkType right) => !left.Equals(right);

        public static explicit operator string(CoreNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CoreNetworkType other && Equals(other);
        public bool Equals(CoreNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The platform type where packet core is deployed.
    /// </summary>
    [EnumType]
    public readonly struct PlatformType : IEquatable<PlatformType>
    {
        private readonly string _value;

        private PlatformType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
        /// </summary>
        public static PlatformType AKS_HCI { get; } = new PlatformType("AKS-HCI");
        /// <summary>
        /// If this option is chosen, you must set one of "azureStackHciCluster", "connectedCluster" or "customLocation". If multiple are set, they must be consistent with each other.
        /// </summary>
        public static PlatformType PlatformType_3P_AZURE_STACK_HCI { get; } = new PlatformType("3P-AZURE-STACK-HCI");

        public static bool operator ==(PlatformType left, PlatformType right) => left.Equals(right);
        public static bool operator !=(PlatformType left, PlatformType right) => !left.Equals(right);

        public static explicit operator string(PlatformType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlatformType other && Equals(other);
        public bool Equals(PlatformType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
