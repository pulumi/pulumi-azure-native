// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork.V20220101Preview
{
    public static class GetSim
    {
        /// <summary>
        /// Sim resource.
        /// </summary>
        public static Task<GetSimResult> InvokeAsync(GetSimArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSimResult>("azure-native:mobilenetwork/v20220101preview:getSim", args ?? new GetSimArgs(), options.WithDefaults());

        /// <summary>
        /// Sim resource.
        /// </summary>
        public static Output<GetSimResult> Invoke(GetSimInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSimResult>("azure-native:mobilenetwork/v20220101preview:getSim", args ?? new GetSimInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSimArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SIM.
        /// </summary>
        [Input("simName", required: true)]
        public string SimName { get; set; } = null!;

        public GetSimArgs()
        {
        }
    }

    public sealed class GetSimInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SIM.
        /// </summary>
        [Input("simName", required: true)]
        public Input<string> SimName { get; set; } = null!;

        public GetSimInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSimResult
    {
        /// <summary>
        /// The configuration state of the sim resource - complete or incomplete.
        /// </summary>
        public readonly string ConfigurationState;
        /// <summary>
        /// The timestamp of resource creation (UTC).
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The identity that created the resource.
        /// </summary>
        public readonly string? CreatedBy;
        /// <summary>
        /// The type of identity that created the resource.
        /// </summary>
        public readonly string? CreatedByType;
        /// <summary>
        /// An optional free-form text field that can be used to record the device type this sim is associated with, for example 'Video camera'. The Azure portal allows Sims to be grouped and filtered based on this value.
        /// </summary>
        public readonly string? DeviceType;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Integrated Circuit Card ID (ICC Id) for the sim.
        /// </summary>
        public readonly string? IntegratedCircuitCardIdentifier;
        /// <summary>
        /// The International Mobile Subscriber Identity (IMSI) for the sim.
        /// </summary>
        public readonly string InternationalMobileSubscriberIdentity;
        /// <summary>
        /// The timestamp of resource last modification (UTC)
        /// </summary>
        public readonly string? LastModifiedAt;
        /// <summary>
        /// The identity that last modified the resource.
        /// </summary>
        public readonly string? LastModifiedBy;
        /// <summary>
        /// The type of identity that last modified the resource.
        /// </summary>
        public readonly string? LastModifiedByType;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Mobile network that this sim belongs to
        /// </summary>
        public readonly Outputs.MobileNetworkResourceIdResponse? MobileNetwork;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the sim resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The simPolicy used by this sim.
        /// </summary>
        public readonly Outputs.SimPolicyResourceIdResponse? SimPolicy;
        /// <summary>
        /// A list of static IP addresses assigned to this sim. Each address is assigned at a defined network scope, made up of {attached data network, slice}.
        /// </summary>
        public readonly ImmutableArray<Outputs.SimStaticIpPropertiesResponse> StaticIpConfiguration;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSimResult(
            string configurationState,

            string? createdAt,

            string? createdBy,

            string? createdByType,

            string? deviceType,

            string id,

            string? integratedCircuitCardIdentifier,

            string internationalMobileSubscriberIdentity,

            string? lastModifiedAt,

            string? lastModifiedBy,

            string? lastModifiedByType,

            string location,

            Outputs.MobileNetworkResourceIdResponse? mobileNetwork,

            string name,

            string provisioningState,

            Outputs.SimPolicyResourceIdResponse? simPolicy,

            ImmutableArray<Outputs.SimStaticIpPropertiesResponse> staticIpConfiguration,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ConfigurationState = configurationState;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            CreatedByType = createdByType;
            DeviceType = deviceType;
            Id = id;
            IntegratedCircuitCardIdentifier = integratedCircuitCardIdentifier;
            InternationalMobileSubscriberIdentity = internationalMobileSubscriberIdentity;
            LastModifiedAt = lastModifiedAt;
            LastModifiedBy = lastModifiedBy;
            LastModifiedByType = lastModifiedByType;
            Location = location;
            MobileNetwork = mobileNetwork;
            Name = name;
            ProvisioningState = provisioningState;
            SimPolicy = simPolicy;
            StaticIpConfiguration = staticIpConfiguration;
            Tags = tags;
            Type = type;
        }
    }
}
