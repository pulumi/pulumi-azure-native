// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.MobileNetwork.V20240401
{
    public static class GetPacketCapture
    {
        /// <summary>
        /// Gets information about the specified packet capture session.
        /// </summary>
        public static Task<GetPacketCaptureResult> InvokeAsync(GetPacketCaptureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPacketCaptureResult>("azure-native:mobilenetwork/v20240401:getPacketCapture", args ?? new GetPacketCaptureArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about the specified packet capture session.
        /// </summary>
        public static Output<GetPacketCaptureResult> Invoke(GetPacketCaptureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPacketCaptureResult>("azure-native:mobilenetwork/v20240401:getPacketCapture", args ?? new GetPacketCaptureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPacketCaptureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the packet capture session.
        /// </summary>
        [Input("packetCaptureName", required: true)]
        public string PacketCaptureName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public string PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPacketCaptureArgs()
        {
        }
        public static new GetPacketCaptureArgs Empty => new GetPacketCaptureArgs();
    }

    public sealed class GetPacketCaptureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the packet capture session.
        /// </summary>
        [Input("packetCaptureName", required: true)]
        public Input<string> PacketCaptureName { get; set; } = null!;

        /// <summary>
        /// The name of the packet core control plane.
        /// </summary>
        [Input("packetCoreControlPlaneName", required: true)]
        public Input<string> PacketCoreControlPlaneName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPacketCaptureInvokeArgs()
        {
        }
        public static new GetPacketCaptureInvokeArgs Empty => new GetPacketCaptureInvokeArgs();
    }


    [OutputType]
    public sealed class GetPacketCaptureResult
    {
        /// <summary>
        /// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
        /// </summary>
        public readonly double? BytesToCapturePerPacket;
        /// <summary>
        /// The start time of the packet capture session.
        /// </summary>
        public readonly string CaptureStartTime;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of network interfaces to capture on.
        /// </summary>
        public readonly ImmutableArray<string> NetworkInterfaces;
        /// <summary>
        /// The list of output files of a packet capture session.
        /// </summary>
        public readonly ImmutableArray<string> OutputFiles;
        /// <summary>
        /// The provisioning state of the packet capture session resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The reason the current packet capture session state.
        /// </summary>
        public readonly string Reason;
        /// <summary>
        /// The status of the packet capture session.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Maximum duration of the capture session in seconds.
        /// </summary>
        public readonly int? TimeLimitInSeconds;
        /// <summary>
        /// Maximum size of the capture output.
        /// </summary>
        public readonly double? TotalBytesPerSession;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPacketCaptureResult(
            double? bytesToCapturePerPacket,

            string captureStartTime,

            string id,

            string name,

            ImmutableArray<string> networkInterfaces,

            ImmutableArray<string> outputFiles,

            string provisioningState,

            string reason,

            string status,

            Outputs.SystemDataResponse systemData,

            int? timeLimitInSeconds,

            double? totalBytesPerSession,

            string type)
        {
            BytesToCapturePerPacket = bytesToCapturePerPacket;
            CaptureStartTime = captureStartTime;
            Id = id;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            OutputFiles = outputFiles;
            ProvisioningState = provisioningState;
            Reason = reason;
            Status = status;
            SystemData = systemData;
            TimeLimitInSeconds = timeLimitInSeconds;
            TotalBytesPerSession = totalBytesPerSession;
            Type = type;
        }
    }
}
