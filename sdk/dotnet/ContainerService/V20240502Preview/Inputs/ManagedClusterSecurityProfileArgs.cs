// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20240502Preview.Inputs
{

    /// <summary>
    /// Security profile for the container service cluster.
    /// </summary>
    public sealed class ManagedClusterSecurityProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
        /// </summary>
        [Input("azureKeyVaultKms")]
        public Input<Inputs.AzureKeyVaultKmsArgs>? AzureKeyVaultKms { get; set; }

        [Input("customCATrustCertificates")]
        private InputList<string>? _customCATrustCertificates;

        /// <summary>
        /// A list of up to 10 base64 encoded CAs that will be added to the trust store on nodes with the Custom CA Trust feature enabled. For more information see [Custom CA Trust Certificates](https://learn.microsoft.com/en-us/azure/aks/custom-certificate-authority)
        /// </summary>
        public InputList<string> CustomCATrustCertificates
        {
            get => _customCATrustCertificates ?? (_customCATrustCertificates = new InputList<string>());
            set => _customCATrustCertificates = value;
        }

        /// <summary>
        /// Microsoft Defender settings for the security profile.
        /// </summary>
        [Input("defender")]
        public Input<Inputs.ManagedClusterSecurityProfileDefenderArgs>? Defender { get; set; }

        /// <summary>
        /// Image Cleaner settings for the security profile.
        /// </summary>
        [Input("imageCleaner")]
        public Input<Inputs.ManagedClusterSecurityProfileImageCleanerArgs>? ImageCleaner { get; set; }

        /// <summary>
        /// Image integrity is a feature that works with Azure Policy to verify image integrity by signature. This will not have any effect unless Azure Policy is applied to enforce image signatures. See https://aka.ms/aks/image-integrity for how to use this feature via policy.
        /// </summary>
        [Input("imageIntegrity")]
        public Input<Inputs.ManagedClusterSecurityProfileImageIntegrityArgs>? ImageIntegrity { get; set; }

        /// <summary>
        /// [Node Restriction](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction) settings for the security profile.
        /// </summary>
        [Input("nodeRestriction")]
        public Input<Inputs.ManagedClusterSecurityProfileNodeRestrictionArgs>? NodeRestriction { get; set; }

        /// <summary>
        /// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
        /// </summary>
        [Input("workloadIdentity")]
        public Input<Inputs.ManagedClusterSecurityProfileWorkloadIdentityArgs>? WorkloadIdentity { get; set; }

        public ManagedClusterSecurityProfileArgs()
        {
        }
        public static new ManagedClusterSecurityProfileArgs Empty => new ManagedClusterSecurityProfileArgs();
    }
}
