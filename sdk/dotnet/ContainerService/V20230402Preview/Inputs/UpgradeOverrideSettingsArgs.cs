// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20230402Preview.Inputs
{

    /// <summary>
    /// Settings for overrides when upgrading a cluster.
    /// </summary>
    public sealed class UpgradeOverrideSettingsArgs : global::Pulumi.ResourceArgs
    {
        [Input("controlPlaneOverrides")]
        private InputList<Union<string, Pulumi.AzureNative.ContainerService.V20230402Preview.ControlPlaneUpgradeOverride>>? _controlPlaneOverrides;

        /// <summary>
        /// List of upgrade overrides when upgrading a cluster's control plane.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.ContainerService.V20230402Preview.ControlPlaneUpgradeOverride>> ControlPlaneOverrides
        {
            get => _controlPlaneOverrides ?? (_controlPlaneOverrides = new InputList<Union<string, Pulumi.AzureNative.ContainerService.V20230402Preview.ControlPlaneUpgradeOverride>>());
            set => _controlPlaneOverrides = value;
        }

        /// <summary>
        /// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
        /// </summary>
        [Input("until")]
        public Input<string>? Until { get; set; }

        public UpgradeOverrideSettingsArgs()
        {
        }
        public static new UpgradeOverrideSettingsArgs Empty => new UpgradeOverrideSettingsArgs();
    }
}
