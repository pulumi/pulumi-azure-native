// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20240202Preview.Inputs
{

    /// <summary>
    /// Profile of network configuration.
    /// </summary>
    public sealed class ContainerServiceNetworkProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
        /// </summary>
        [Input("dnsServiceIP")]
        public Input<string>? DnsServiceIP { get; set; }

        [Input("ipFamilies")]
        private InputList<Union<string, Pulumi.AzureNative.ContainerService.V20240202Preview.IpFamily>>? _ipFamilies;

        /// <summary>
        /// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.ContainerService.V20240202Preview.IpFamily>> IpFamilies
        {
            get => _ipFamilies ?? (_ipFamilies = new InputList<Union<string, Pulumi.AzureNative.ContainerService.V20240202Preview.IpFamily>>());
            set => _ipFamilies = value;
        }

        /// <summary>
        /// Holds configuration customizations for kube-proxy. Any values not defined will use the kube-proxy defaulting behavior. See https://v&lt;version&gt;.docs.kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/ where &lt;version&gt; is represented by a &lt;major version&gt;-&lt;minor version&gt; string. Kubernetes version 1.23 would be '1-23'.
        /// </summary>
        [Input("kubeProxyConfig")]
        public Input<Inputs.ContainerServiceNetworkProfileKubeProxyConfigArgs>? KubeProxyConfig { get; set; }

        /// <summary>
        /// Profile of the cluster load balancer.
        /// </summary>
        [Input("loadBalancerProfile")]
        public Input<Inputs.ManagedClusterLoadBalancerProfileArgs>? LoadBalancerProfile { get; set; }

        /// <summary>
        /// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
        /// </summary>
        [Input("loadBalancerSku")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.LoadBalancerSku>? LoadBalancerSku { get; set; }

        /// <summary>
        /// This addon can be used to configure network monitoring and generate network monitoring data in Prometheus format
        /// </summary>
        [Input("monitoring")]
        public Input<Inputs.NetworkMonitoringArgs>? Monitoring { get; set; }

        /// <summary>
        /// Profile of the cluster NAT gateway.
        /// </summary>
        [Input("natGatewayProfile")]
        public Input<Inputs.ManagedClusterNATGatewayProfileArgs>? NatGatewayProfile { get; set; }

        /// <summary>
        /// Network dataplane used in the Kubernetes cluster.
        /// </summary>
        [Input("networkDataplane")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.NetworkDataplane>? NetworkDataplane { get; set; }

        /// <summary>
        /// This cannot be specified if networkPlugin is anything other than 'azure'.
        /// </summary>
        [Input("networkMode")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.NetworkMode>? NetworkMode { get; set; }

        /// <summary>
        /// Network plugin used for building the Kubernetes network.
        /// </summary>
        [Input("networkPlugin")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.NetworkPlugin>? NetworkPlugin { get; set; }

        /// <summary>
        /// Network plugin mode used for building the Kubernetes network.
        /// </summary>
        [Input("networkPluginMode")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.NetworkPluginMode>? NetworkPluginMode { get; set; }

        /// <summary>
        /// Network policy used for building the Kubernetes network.
        /// </summary>
        [Input("networkPolicy")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.NetworkPolicy>? NetworkPolicy { get; set; }

        /// <summary>
        /// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
        /// </summary>
        [Input("outboundType")]
        public InputUnion<string, Pulumi.AzureNative.ContainerService.V20240202Preview.OutboundType>? OutboundType { get; set; }

        /// <summary>
        /// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        /// </summary>
        [Input("podCidr")]
        public Input<string>? PodCidr { get; set; }

        [Input("podCidrs")]
        private InputList<string>? _podCidrs;

        /// <summary>
        /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        public InputList<string> PodCidrs
        {
            get => _podCidrs ?? (_podCidrs = new InputList<string>());
            set => _podCidrs = value;
        }

        /// <summary>
        /// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        [Input("serviceCidr")]
        public Input<string>? ServiceCidr { get; set; }

        [Input("serviceCidrs")]
        private InputList<string>? _serviceCidrs;

        /// <summary>
        /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
        /// </summary>
        public InputList<string> ServiceCidrs
        {
            get => _serviceCidrs ?? (_serviceCidrs = new InputList<string>());
            set => _serviceCidrs = value;
        }

        /// <summary>
        /// The profile for Static Egress Gateway addon. For more details about Static Egress Gateway, see https://aka.ms/aks/static-egress-gateway.
        /// </summary>
        [Input("staticEgressGatewayProfile")]
        public Input<Inputs.ManagedClusterStaticEgressGatewayProfileArgs>? StaticEgressGatewayProfile { get; set; }

        public ContainerServiceNetworkProfileArgs()
        {
            DnsServiceIP = "10.0.0.10";
            OutboundType = "loadBalancer";
            PodCidr = "10.244.0.0/16";
            ServiceCidr = "10.0.0.0/16";
        }
        public static new ContainerServiceNetworkProfileArgs Empty => new ContainerServiceNetworkProfileArgs();
    }
}
