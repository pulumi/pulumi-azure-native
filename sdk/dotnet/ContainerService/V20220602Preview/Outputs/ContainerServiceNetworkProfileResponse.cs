// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20220602Preview.Outputs
{

    /// <summary>
    /// Profile of network configuration.
    /// </summary>
    [OutputType]
    public sealed class ContainerServiceNetworkProfileResponse
    {
        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
        /// </summary>
        public readonly string? DnsServiceIP;
        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
        /// </summary>
        public readonly string? DockerBridgeCidr;
        /// <summary>
        /// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
        /// </summary>
        public readonly ImmutableArray<string> IpFamilies;
        /// <summary>
        /// Profile of the cluster load balancer.
        /// </summary>
        public readonly Outputs.ManagedClusterLoadBalancerProfileResponse? LoadBalancerProfile;
        /// <summary>
        /// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
        /// </summary>
        public readonly string? LoadBalancerSku;
        /// <summary>
        /// Profile of the cluster NAT gateway.
        /// </summary>
        public readonly Outputs.ManagedClusterNATGatewayProfileResponse? NatGatewayProfile;
        /// <summary>
        /// This cannot be specified if networkPlugin is anything other than 'azure'.
        /// </summary>
        public readonly string? NetworkMode;
        /// <summary>
        /// Network plugin used for building the Kubernetes network.
        /// </summary>
        public readonly string? NetworkPlugin;
        /// <summary>
        /// Network plugin mode used for building the Kubernetes network.
        /// </summary>
        public readonly string? NetworkPluginMode;
        /// <summary>
        /// Network policy used for building the Kubernetes network.
        /// </summary>
        public readonly string? NetworkPolicy;
        /// <summary>
        /// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
        /// </summary>
        public readonly string? OutboundType;
        /// <summary>
        /// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        /// </summary>
        public readonly string? PodCidr;
        /// <summary>
        /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </summary>
        public readonly ImmutableArray<string> PodCidrs;
        /// <summary>
        /// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        public readonly string? ServiceCidr;
        /// <summary>
        /// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
        /// </summary>
        public readonly ImmutableArray<string> ServiceCidrs;

        [OutputConstructor]
        private ContainerServiceNetworkProfileResponse(
            string? dnsServiceIP,

            string? dockerBridgeCidr,

            ImmutableArray<string> ipFamilies,

            Outputs.ManagedClusterLoadBalancerProfileResponse? loadBalancerProfile,

            string? loadBalancerSku,

            Outputs.ManagedClusterNATGatewayProfileResponse? natGatewayProfile,

            string? networkMode,

            string? networkPlugin,

            string? networkPluginMode,

            string? networkPolicy,

            string? outboundType,

            string? podCidr,

            ImmutableArray<string> podCidrs,

            string? serviceCidr,

            ImmutableArray<string> serviceCidrs)
        {
            DnsServiceIP = dnsServiceIP;
            DockerBridgeCidr = dockerBridgeCidr;
            IpFamilies = ipFamilies;
            LoadBalancerProfile = loadBalancerProfile;
            LoadBalancerSku = loadBalancerSku;
            NatGatewayProfile = natGatewayProfile;
            NetworkMode = networkMode;
            NetworkPlugin = networkPlugin;
            NetworkPluginMode = networkPluginMode;
            NetworkPolicy = networkPolicy;
            OutboundType = outboundType;
            PodCidr = podCidr;
            PodCidrs = podCidrs;
            ServiceCidr = serviceCidr;
            ServiceCidrs = serviceCidrs;
        }
    }
}
