// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ContainerService.V20220602Preview
{
    /// <summary>
    /// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
    /// </summary>
    [EnumType]
    public readonly struct AgentPoolMode : IEquatable<AgentPoolMode>
    {
        private readonly string _value;

        private AgentPoolMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory.
        /// </summary>
        public static AgentPoolMode System { get; } = new AgentPoolMode("System");
        /// <summary>
        /// User agent pools are primarily for hosting your application pods.
        /// </summary>
        public static AgentPoolMode User { get; } = new AgentPoolMode("User");

        public static bool operator ==(AgentPoolMode left, AgentPoolMode right) => left.Equals(right);
        public static bool operator !=(AgentPoolMode left, AgentPoolMode right) => !left.Equals(right);

        public static explicit operator string(AgentPoolMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPoolMode other && Equals(other);
        public bool Equals(AgentPoolMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Agent Pool.
    /// </summary>
    [EnumType]
    public readonly struct AgentPoolType : IEquatable<AgentPoolType>
    {
        private readonly string _value;

        private AgentPoolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Create an Agent Pool backed by a Virtual Machine Scale Set.
        /// </summary>
        public static AgentPoolType VirtualMachineScaleSets { get; } = new AgentPoolType("VirtualMachineScaleSets");
        /// <summary>
        /// Use of this is strongly discouraged.
        /// </summary>
        public static AgentPoolType AvailabilitySet { get; } = new AgentPoolType("AvailabilitySet");

        public static bool operator ==(AgentPoolType left, AgentPoolType right) => left.Equals(right);
        public static bool operator !=(AgentPoolType left, AgentPoolType right) => !left.Equals(right);

        public static explicit operator string(AgentPoolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPoolType other && Equals(other);
        public bool Equals(AgentPoolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells whether the cluster is Running or Stopped
    /// </summary>
    [EnumType]
    public readonly struct Code : IEquatable<Code>
    {
        private readonly string _value;

        private Code(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The cluster is running.
        /// </summary>
        public static Code Running { get; } = new Code("Running");
        /// <summary>
        /// The cluster is stopped.
        /// </summary>
        public static Code Stopped { get; } = new Code("Stopped");

        public static bool operator ==(Code left, Code right) => left.Equals(right);
        public static bool operator !=(Code left, Code right) => !left.Equals(right);

        public static explicit operator string(Code value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Code other && Equals(other);
        public bool Equals(Code other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The private link service connection status.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionStatus : IEquatable<ConnectionStatus>
    {
        private readonly string _value;

        private ConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionStatus Pending { get; } = new ConnectionStatus("Pending");
        public static ConnectionStatus Approved { get; } = new ConnectionStatus("Approved");
        public static ConnectionStatus Rejected { get; } = new ConnectionStatus("Rejected");
        public static ConnectionStatus Disconnected { get; } = new ConnectionStatus("Disconnected");

        public static bool operator ==(ConnectionStatus left, ConnectionStatus right) => left.Equals(right);
        public static bool operator !=(ConnectionStatus left, ConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(ConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionStatus other && Equals(other);
        public bool Equals(ConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
    /// </summary>
    [EnumType]
    public readonly struct Expander : IEquatable<Expander>
    {
        private readonly string _value;

        private Expander(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
        /// </summary>
        public static Expander Least_waste { get; } = new Expander("least-waste");
        /// <summary>
        /// Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
        /// </summary>
        public static Expander Most_pods { get; } = new Expander("most-pods");
        /// <summary>
        /// Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
        /// </summary>
        public static Expander Priority { get; } = new Expander("priority");
        /// <summary>
        /// Used when you don't have a particular need for the node groups to scale differently.
        /// </summary>
        public static Expander Random { get; } = new Expander("random");

        public static bool operator ==(Expander left, Expander right) => left.Equals(right);
        public static bool operator !=(Expander left, Expander right) => !left.Equals(right);

        public static explicit operator string(Expander value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Expander other && Equals(other);
        public bool Equals(Expander other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes EdgeZone { get; } = new ExtendedLocationTypes("EdgeZone");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
    /// </summary>
    [EnumType]
    public readonly struct GPUInstanceProfile : IEquatable<GPUInstanceProfile>
    {
        private readonly string _value;

        private GPUInstanceProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GPUInstanceProfile MIG1g { get; } = new GPUInstanceProfile("MIG1g");
        public static GPUInstanceProfile MIG2g { get; } = new GPUInstanceProfile("MIG2g");
        public static GPUInstanceProfile MIG3g { get; } = new GPUInstanceProfile("MIG3g");
        public static GPUInstanceProfile MIG4g { get; } = new GPUInstanceProfile("MIG4g");
        public static GPUInstanceProfile MIG7g { get; } = new GPUInstanceProfile("MIG7g");

        public static bool operator ==(GPUInstanceProfile left, GPUInstanceProfile right) => left.Equals(right);
        public static bool operator !=(GPUInstanceProfile left, GPUInstanceProfile right) => !left.Equals(right);

        public static explicit operator string(GPUInstanceProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GPUInstanceProfile other && Equals(other);
        public bool Equals(GPUInstanceProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IP version to use for cluster networking and IP assignment.
    /// </summary>
    [EnumType]
    public readonly struct IpFamily : IEquatable<IpFamily>
    {
        private readonly string _value;

        private IpFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpFamily IPv4 { get; } = new IpFamily("IPv4");
        public static IpFamily IPv6 { get; } = new IpFamily("IPv6");

        public static bool operator ==(IpFamily left, IpFamily right) => left.Equals(right);
        public static bool operator !=(IpFamily left, IpFamily right) => !left.Equals(right);

        public static explicit operator string(IpFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpFamily other && Equals(other);
        public bool Equals(IpFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
    /// </summary>
    [EnumType]
    public readonly struct KeyVaultNetworkAccessTypes : IEquatable<KeyVaultNetworkAccessTypes>
    {
        private readonly string _value;

        private KeyVaultNetworkAccessTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyVaultNetworkAccessTypes Public { get; } = new KeyVaultNetworkAccessTypes("Public");
        public static KeyVaultNetworkAccessTypes Private { get; } = new KeyVaultNetworkAccessTypes("Private");

        public static bool operator ==(KeyVaultNetworkAccessTypes left, KeyVaultNetworkAccessTypes right) => left.Equals(right);
        public static bool operator !=(KeyVaultNetworkAccessTypes left, KeyVaultNetworkAccessTypes right) => !left.Equals(right);

        public static explicit operator string(KeyVaultNetworkAccessTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyVaultNetworkAccessTypes other && Equals(other);
        public bool Equals(KeyVaultNetworkAccessTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
    /// </summary>
    [EnumType]
    public readonly struct KubeletDiskType : IEquatable<KubeletDiskType>
    {
        private readonly string _value;

        private KubeletDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Kubelet will use the OS disk for its data.
        /// </summary>
        public static KubeletDiskType OS { get; } = new KubeletDiskType("OS");
        /// <summary>
        /// Kubelet will use the temporary disk for its data.
        /// </summary>
        public static KubeletDiskType Temporary { get; } = new KubeletDiskType("Temporary");

        public static bool operator ==(KubeletDiskType left, KubeletDiskType right) => left.Equals(right);
        public static bool operator !=(KubeletDiskType left, KubeletDiskType right) => !left.Equals(right);

        public static explicit operator string(KubeletDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KubeletDiskType other && Equals(other);
        public bool Equals(KubeletDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No additional licensing is applied.
        /// </summary>
        public static LicenseType None { get; } = new LicenseType("None");
        /// <summary>
        /// Enables Azure Hybrid User Benefits for Windows VMs.
        /// </summary>
        public static LicenseType Windows_Server { get; } = new LicenseType("Windows_Server");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerSku : IEquatable<LoadBalancerSku>
    {
        private readonly string _value;

        private LoadBalancerSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use a a standard Load Balancer. This is the recommended Load Balancer SKU. For more information about on working with the load balancer in the managed cluster, see the [standard Load Balancer](https://docs.microsoft.com/azure/aks/load-balancer-standard) article.
        /// </summary>
        public static LoadBalancerSku Standard { get; } = new LoadBalancerSku("standard");
        /// <summary>
        /// Use a basic Load Balancer with limited functionality.
        /// </summary>
        public static LoadBalancerSku Basic { get; } = new LoadBalancerSku("basic");

        public static bool operator ==(LoadBalancerSku left, LoadBalancerSku right) => left.Equals(right);
        public static bool operator !=(LoadBalancerSku left, LoadBalancerSku right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerSku other && Equals(other);
        public bool Equals(LoadBalancerSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of a managed cluster SKU.
    /// </summary>
    [EnumType]
    public readonly struct ManagedClusterSKUName : IEquatable<ManagedClusterSKUName>
    {
        private readonly string _value;

        private ManagedClusterSKUName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedClusterSKUName Basic { get; } = new ManagedClusterSKUName("Basic");

        public static bool operator ==(ManagedClusterSKUName left, ManagedClusterSKUName right) => left.Equals(right);
        public static bool operator !=(ManagedClusterSKUName left, ManagedClusterSKUName right) => !left.Equals(right);

        public static explicit operator string(ManagedClusterSKUName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedClusterSKUName other && Equals(other);
        public bool Equals(ManagedClusterSKUName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If not specified, the default is 'Free'. See [uptime SLA](https://docs.microsoft.com/azure/aks/uptime-sla) for more details.
    /// </summary>
    [EnumType]
    public readonly struct ManagedClusterSKUTier : IEquatable<ManagedClusterSKUTier>
    {
        private readonly string _value;

        private ManagedClusterSKUTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
        /// </summary>
        public static ManagedClusterSKUTier Paid { get; } = new ManagedClusterSKUTier("Paid");
        /// <summary>
        /// No guaranteed SLA, no additional charges. Free tier clusters have an SLO of 99.5%.
        /// </summary>
        public static ManagedClusterSKUTier Free { get; } = new ManagedClusterSKUTier("Free");

        public static bool operator ==(ManagedClusterSKUTier left, ManagedClusterSKUTier right) => left.Equals(right);
        public static bool operator !=(ManagedClusterSKUTier left, ManagedClusterSKUTier right) => !left.Equals(right);

        public static explicit operator string(ManagedClusterSKUTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedClusterSKUTier other && Equals(other);
        public bool Equals(ManagedClusterSKUTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This cannot be specified if networkPlugin is anything other than 'azure'.
    /// </summary>
    [EnumType]
    public readonly struct NetworkMode : IEquatable<NetworkMode>
    {
        private readonly string _value;

        private NetworkMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No bridge is created. Intra-VM Pod to Pod communication is through IP routes created by Azure CNI. See [Transparent Mode](https://docs.microsoft.com/azure/aks/faq#transparent-mode) for more information.
        /// </summary>
        public static NetworkMode Transparent { get; } = new NetworkMode("transparent");
        /// <summary>
        /// This is no longer supported
        /// </summary>
        public static NetworkMode Bridge { get; } = new NetworkMode("bridge");

        public static bool operator ==(NetworkMode left, NetworkMode right) => left.Equals(right);
        public static bool operator !=(NetworkMode left, NetworkMode right) => !left.Equals(right);

        public static explicit operator string(NetworkMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkMode other && Equals(other);
        public bool Equals(NetworkMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network plugin used for building the Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPlugin : IEquatable<NetworkPlugin>
    {
        private readonly string _value;

        private NetworkPlugin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use the Azure CNI network plugin. See [Azure CNI (advanced) networking](https://docs.microsoft.com/azure/aks/concepts-network#azure-cni-advanced-networking) for more information.
        /// </summary>
        public static NetworkPlugin Azure { get; } = new NetworkPlugin("azure");
        /// <summary>
        /// Use the Kubenet network plugin. See [Kubenet (basic) networking](https://docs.microsoft.com/azure/aks/concepts-network#kubenet-basic-networking) for more information.
        /// </summary>
        public static NetworkPlugin Kubenet { get; } = new NetworkPlugin("kubenet");
        /// <summary>
        /// Do not use a network plugin. A custom CNI will need to be installed after cluster creation for networking functionality.
        /// </summary>
        public static NetworkPlugin None { get; } = new NetworkPlugin("none");

        public static bool operator ==(NetworkPlugin left, NetworkPlugin right) => left.Equals(right);
        public static bool operator !=(NetworkPlugin left, NetworkPlugin right) => !left.Equals(right);

        public static explicit operator string(NetworkPlugin value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPlugin other && Equals(other);
        public bool Equals(NetworkPlugin other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network plugin mode used for building the Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPluginMode : IEquatable<NetworkPluginMode>
    {
        private readonly string _value;

        private NetworkPluginMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Pods are given IPs from the PodCIDR address space but use Azure Routing Domains rather than Kubenet reference plugins host-local and bridge.
        /// </summary>
        public static NetworkPluginMode Overlay { get; } = new NetworkPluginMode("Overlay");

        public static bool operator ==(NetworkPluginMode left, NetworkPluginMode right) => left.Equals(right);
        public static bool operator !=(NetworkPluginMode left, NetworkPluginMode right) => !left.Equals(right);

        public static explicit operator string(NetworkPluginMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPluginMode other && Equals(other);
        public bool Equals(NetworkPluginMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network policy used for building the Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPolicy : IEquatable<NetworkPolicy>
    {
        private readonly string _value;

        private NetworkPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use Calico network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
        /// </summary>
        public static NetworkPolicy Calico { get; } = new NetworkPolicy("calico");
        /// <summary>
        /// Use Azure network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
        /// </summary>
        public static NetworkPolicy Azure { get; } = new NetworkPolicy("azure");

        public static bool operator ==(NetworkPolicy left, NetworkPolicy right) => left.Equals(right);
        public static bool operator !=(NetworkPolicy left, NetworkPolicy right) => !left.Equals(right);

        public static explicit operator string(NetworkPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPolicy other && Equals(other);
        public bool Equals(NetworkPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
    /// </summary>
    [EnumType]
    public readonly struct OSDiskType : IEquatable<OSDiskType>
    {
        private readonly string _value;

        private OSDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read/write latency.
        /// </summary>
        public static OSDiskType Managed { get; } = new OSDiskType("Managed");
        /// <summary>
        /// Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
        /// </summary>
        public static OSDiskType Ephemeral { get; } = new OSDiskType("Ephemeral");

        public static bool operator ==(OSDiskType left, OSDiskType right) => left.Equals(right);
        public static bool operator !=(OSDiskType left, OSDiskType right) => !left.Equals(right);

        public static explicit operator string(OSDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSDiskType other && Equals(other);
        public bool Equals(OSDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is deprecated.
    /// </summary>
    [EnumType]
    public readonly struct OSSKU : IEquatable<OSSKU>
    {
        private readonly string _value;

        private OSSKU(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSSKU Ubuntu { get; } = new OSSKU("Ubuntu");
        public static OSSKU CBLMariner { get; } = new OSSKU("CBLMariner");
        public static OSSKU Windows2019 { get; } = new OSSKU("Windows2019");
        public static OSSKU Windows2022 { get; } = new OSSKU("Windows2022");

        public static bool operator ==(OSSKU left, OSSKU right) => left.Equals(right);
        public static bool operator !=(OSSKU left, OSSKU right) => !left.Equals(right);

        public static explicit operator string(OSSKU value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSSKU other && Equals(other);
        public bool Equals(OSSKU other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operating system type. The default is Linux.
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use Linux.
        /// </summary>
        public static OSType Linux { get; } = new OSType("Linux");
        /// <summary>
        /// Use Windows.
        /// </summary>
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
    /// </summary>
    [EnumType]
    public readonly struct OutboundType : IEquatable<OutboundType>
    {
        private readonly string _value;

        private OutboundType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The load balancer is used for egress through an AKS assigned public IP. This supports Kubernetes services of type 'loadBalancer'. For more information see [outbound type loadbalancer](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-loadbalancer).
        /// </summary>
        public static OutboundType LoadBalancer { get; } = new OutboundType("loadBalancer");
        /// <summary>
        /// Egress paths must be defined by the user. This is an advanced scenario and requires proper network configuration. For more information see [outbound type userDefinedRouting](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-userdefinedrouting).
        /// </summary>
        public static OutboundType UserDefinedRouting { get; } = new OutboundType("userDefinedRouting");
        /// <summary>
        /// The AKS-managed NAT gateway is used for egress.
        /// </summary>
        public static OutboundType ManagedNATGateway { get; } = new OutboundType("managedNATGateway");
        /// <summary>
        /// The user-assigned NAT gateway associated to the cluster subnet is used for egress. This is an advanced scenario and requires proper network configuration.
        /// </summary>
        public static OutboundType UserAssignedNATGateway { get; } = new OutboundType("userAssignedNATGateway");

        public static bool operator ==(OutboundType left, OutboundType right) => left.Equals(right);
        public static bool operator !=(OutboundType left, OutboundType right) => !left.Equals(right);

        public static explicit operator string(OutboundType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutboundType other && Equals(other);
        public bool Equals(OutboundType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Allow or deny public network access for AKS
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Use an implicitly created system assigned managed identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the system assigned managed identity to manipulate Azure resources.
        /// </summary>
        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        /// <summary>
        /// Use a user-specified identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the specified user assigned managed identity to manipulate Azure resources.
        /// </summary>
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        /// <summary>
        /// Do not use a managed identity for the Managed Cluster, service principal will be used instead.
        /// </summary>
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
    /// </summary>
    [EnumType]
    public readonly struct ScaleDownMode : IEquatable<ScaleDownMode>
    {
        private readonly string _value;

        private ScaleDownMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Create new instances during scale up and remove instances during scale down.
        /// </summary>
        public static ScaleDownMode Delete { get; } = new ScaleDownMode("Delete");
        /// <summary>
        /// Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down.
        /// </summary>
        public static ScaleDownMode Deallocate { get; } = new ScaleDownMode("Deallocate");

        public static bool operator ==(ScaleDownMode left, ScaleDownMode right) => left.Equals(right);
        public static bool operator !=(ScaleDownMode left, ScaleDownMode right) => !left.Equals(right);

        public static explicit operator string(ScaleDownMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleDownMode other && Equals(other);
        public bool Equals(ScaleDownMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
    /// </summary>
    [EnumType]
    public readonly struct ScaleSetEvictionPolicy : IEquatable<ScaleSetEvictionPolicy>
    {
        private readonly string _value;

        private ScaleSetEvictionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Nodes in the underlying Scale Set of the node pool are deleted when they're evicted.
        /// </summary>
        public static ScaleSetEvictionPolicy Delete { get; } = new ScaleSetEvictionPolicy("Delete");
        /// <summary>
        /// Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading.
        /// </summary>
        public static ScaleSetEvictionPolicy Deallocate { get; } = new ScaleSetEvictionPolicy("Deallocate");

        public static bool operator ==(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => left.Equals(right);
        public static bool operator !=(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => !left.Equals(right);

        public static explicit operator string(ScaleSetEvictionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleSetEvictionPolicy other && Equals(other);
        public bool Equals(ScaleSetEvictionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
    /// </summary>
    [EnumType]
    public readonly struct ScaleSetPriority : IEquatable<ScaleSetPriority>
    {
        private readonly string _value;

        private ScaleSetPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https://docs.microsoft.com/azure/aks/spot-node-pool) for more information.
        /// </summary>
        public static ScaleSetPriority Spot { get; } = new ScaleSetPriority("Spot");
        /// <summary>
        /// Regular VMs will be used.
        /// </summary>
        public static ScaleSetPriority Regular { get; } = new ScaleSetPriority("Regular");

        public static bool operator ==(ScaleSetPriority left, ScaleSetPriority right) => left.Equals(right);
        public static bool operator !=(ScaleSetPriority left, ScaleSetPriority right) => !left.Equals(right);

        public static explicit operator string(ScaleSetPriority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleSetPriority other && Equals(other);
        public bool Equals(ScaleSetPriority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of a snapshot. The default is NodePool.
    /// </summary>
    [EnumType]
    public readonly struct SnapshotType : IEquatable<SnapshotType>
    {
        private readonly string _value;

        private SnapshotType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The snapshot is a snapshot of a node pool.
        /// </summary>
        public static SnapshotType NodePool { get; } = new SnapshotType("NodePool");
        /// <summary>
        /// The snapshot is a snapshot of a managed cluster.
        /// </summary>
        public static SnapshotType ManagedCluster { get; } = new SnapshotType("ManagedCluster");

        public static bool operator ==(SnapshotType left, SnapshotType right) => left.Equals(right);
        public static bool operator !=(SnapshotType left, SnapshotType right) => !left.Equals(right);

        public static explicit operator string(SnapshotType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotType other && Equals(other);
        public bool Equals(SnapshotType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
    /// </summary>
    [EnumType]
    public readonly struct UpgradeChannel : IEquatable<UpgradeChannel>
    {
        private readonly string _value;

        private UpgradeChannel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Automatically upgrade the cluster to the latest supported patch release on the latest supported minor version. In cases where the cluster is at a version of Kubernetes that is at an N-2 minor version where N is the latest supported minor version, the cluster first upgrades to the latest supported patch version on N-1 minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster first is upgraded to 1.18.6, then is upgraded to 1.19.1.
        /// </summary>
        public static UpgradeChannel Rapid { get; } = new UpgradeChannel("rapid");
        /// <summary>
        /// Automatically upgrade the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.18.6.
        /// </summary>
        public static UpgradeChannel Stable { get; } = new UpgradeChannel("stable");
        /// <summary>
        /// Automatically upgrade the cluster to the latest supported patch version when it becomes available while keeping the minor version the same. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.17.9.
        /// </summary>
        public static UpgradeChannel Patch { get; } = new UpgradeChannel("patch");
        /// <summary>
        /// Automatically upgrade the node image to the latest version available. Microsoft provides patches and new images for image nodes frequently (usually weekly), but your running nodes won't get the new images unless you do a node image upgrade. Turning on the node-image channel will automatically update your node images whenever a new version is available.
        /// </summary>
        public static UpgradeChannel Node_image { get; } = new UpgradeChannel("node-image");
        /// <summary>
        /// Disables auto-upgrades and keeps the cluster at its current version of Kubernetes.
        /// </summary>
        public static UpgradeChannel None { get; } = new UpgradeChannel("none");

        public static bool operator ==(UpgradeChannel left, UpgradeChannel right) => left.Equals(right);
        public static bool operator !=(UpgradeChannel left, UpgradeChannel right) => !left.Equals(right);

        public static explicit operator string(UpgradeChannel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpgradeChannel other && Equals(other);
        public bool Equals(UpgradeChannel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day of the week.
    /// </summary>
    [EnumType]
    public readonly struct WeekDay : IEquatable<WeekDay>
    {
        private readonly string _value;

        private WeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekDay Sunday { get; } = new WeekDay("Sunday");
        public static WeekDay Monday { get; } = new WeekDay("Monday");
        public static WeekDay Tuesday { get; } = new WeekDay("Tuesday");
        public static WeekDay Wednesday { get; } = new WeekDay("Wednesday");
        public static WeekDay Thursday { get; } = new WeekDay("Thursday");
        public static WeekDay Friday { get; } = new WeekDay("Friday");
        public static WeekDay Saturday { get; } = new WeekDay("Saturday");

        public static bool operator ==(WeekDay left, WeekDay right) => left.Equals(right);
        public static bool operator !=(WeekDay left, WeekDay right) => !left.Equals(right);

        public static explicit operator string(WeekDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekDay other && Equals(other);
        public bool Equals(WeekDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of workload a node can run.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadRuntime : IEquatable<WorkloadRuntime>
    {
        private readonly string _value;

        private WorkloadRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Nodes will use Kubelet to run standard OCI container workloads.
        /// </summary>
        public static WorkloadRuntime OCIContainer { get; } = new WorkloadRuntime("OCIContainer");
        /// <summary>
        /// Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview).
        /// </summary>
        public static WorkloadRuntime WasmWasi { get; } = new WorkloadRuntime("WasmWasi");

        public static bool operator ==(WorkloadRuntime left, WorkloadRuntime right) => left.Equals(right);
        public static bool operator !=(WorkloadRuntime left, WorkloadRuntime right) => !left.Equals(right);

        public static explicit operator string(WorkloadRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadRuntime other && Equals(other);
        public bool Equals(WorkloadRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
