// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService
{
    /// <summary>
    /// Namespace managed by ARM.
    /// 
    /// Uses Azure REST API version 2025-04-02-preview.
    /// 
    /// Other available API versions: 2025-03-02-preview, 2025-05-02-preview, 2025-06-02-preview, 2025-07-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native containerservice [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:containerservice:ManagedNamespace")]
    public partial class ManagedNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable optimistic concurrency per the normal etag convention.
        /// </summary>
        [Output("eTag")]
        public Output<string> ETag { get; private set; } = null!;

        /// <summary>
        /// The location of the namespace.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Properties of a namespace.
        /// </summary>
        [Output("properties")]
        public Output<Outputs.NamespacePropertiesResponse> Properties { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The tags to be persisted on the managed cluster namespace.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedNamespace(string name, ManagedNamespaceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerservice:ManagedNamespace", name, args ?? new ManagedNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedNamespace(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerservice:ManagedNamespace", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20250302preview:ManagedNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20250402preview:ManagedNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20250502preview:ManagedNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20250602preview:ManagedNamespace" },
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20250702preview:ManagedNamespace" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedNamespace Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ManagedNamespace(name, id, options);
        }
    }

    public sealed class ManagedNamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the namespace.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the managed namespace.
        /// </summary>
        [Input("managedNamespaceName")]
        public Input<string>? ManagedNamespaceName { get; set; }

        /// <summary>
        /// Properties of a namespace.
        /// </summary>
        [Input("properties")]
        public Input<Inputs.NamespacePropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the managed cluster resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags to be persisted on the managed cluster namespace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ManagedNamespaceArgs()
        {
        }
        public static new ManagedNamespaceArgs Empty => new ManagedNamespaceArgs();
    }
}
