// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService
{
    public static class GetUpdateRun
    {
        /// <summary>
        /// Get a UpdateRun
        /// Azure REST API version: 2023-03-15-preview.
        /// 
        /// Other available API versions: 2023-06-15-preview, 2023-08-15-preview, 2023-10-15, 2024-02-02-preview, 2024-04-01, 2024-05-02-preview.
        /// </summary>
        public static Task<GetUpdateRunResult> InvokeAsync(GetUpdateRunArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUpdateRunResult>("azure-native:containerservice:getUpdateRun", args ?? new GetUpdateRunArgs(), options.WithDefaults());

        /// <summary>
        /// Get a UpdateRun
        /// Azure REST API version: 2023-03-15-preview.
        /// 
        /// Other available API versions: 2023-06-15-preview, 2023-08-15-preview, 2023-10-15, 2024-02-02-preview, 2024-04-01, 2024-05-02-preview.
        /// </summary>
        public static Output<GetUpdateRunResult> Invoke(GetUpdateRunInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUpdateRunResult>("azure-native:containerservice:getUpdateRun", args ?? new GetUpdateRunInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUpdateRunArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Fleet resource.
        /// </summary>
        [Input("fleetName", required: true)]
        public string FleetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the UpdateRun resource.
        /// </summary>
        [Input("updateRunName", required: true)]
        public string UpdateRunName { get; set; } = null!;

        public GetUpdateRunArgs()
        {
        }
        public static new GetUpdateRunArgs Empty => new GetUpdateRunArgs();
    }

    public sealed class GetUpdateRunInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Fleet resource.
        /// </summary>
        [Input("fleetName", required: true)]
        public Input<string> FleetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the UpdateRun resource.
        /// </summary>
        [Input("updateRunName", required: true)]
        public Input<string> UpdateRunName { get; set; } = null!;

        public GetUpdateRunInvokeArgs()
        {
        }
        public static new GetUpdateRunInvokeArgs Empty => new GetUpdateRunInvokeArgs();
    }


    [OutputType]
    public sealed class GetUpdateRunResult
    {
        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        public readonly string ETag;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started.
        /// </summary>
        public readonly Outputs.ManagedClusterUpdateResponse ManagedClusterUpdate;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning state of the UpdateRun resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The status of the UpdateRun.
        /// </summary>
        public readonly Outputs.UpdateRunStatusResponse Status;
        /// <summary>
        /// The strategy defines the order in which the clusters will be updated.
        /// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
        /// The strategy of the UpdateRun can be modified until the run is started.
        /// </summary>
        public readonly Outputs.UpdateRunStrategyResponse? Strategy;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetUpdateRunResult(
            string eTag,

            string id,

            Outputs.ManagedClusterUpdateResponse managedClusterUpdate,

            string name,

            string provisioningState,

            Outputs.UpdateRunStatusResponse status,

            Outputs.UpdateRunStrategyResponse? strategy,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            ETag = eTag;
            Id = id;
            ManagedClusterUpdate = managedClusterUpdate;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            Strategy = strategy;
            SystemData = systemData;
            Type = type;
        }
    }
}
