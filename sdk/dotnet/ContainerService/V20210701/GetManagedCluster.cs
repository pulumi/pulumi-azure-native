// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20210701
{
    public static class GetManagedCluster
    {
        /// <summary>
        /// Managed cluster.
        /// </summary>
        public static Task<GetManagedClusterResult> InvokeAsync(GetManagedClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedClusterResult>("azure-native:containerservice/v20210701:getManagedCluster", args ?? new GetManagedClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Managed cluster.
        /// </summary>
        public static Output<GetManagedClusterResult> Invoke(GetManagedClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedClusterResult>("azure-native:containerservice/v20210701:getManagedCluster", args ?? new GetManagedClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the managed cluster resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public string ResourceName { get; set; } = null!;

        public GetManagedClusterArgs()
        {
        }
        public static new GetManagedClusterArgs Empty => new GetManagedClusterArgs();
    }

    public sealed class GetManagedClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the managed cluster resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        public GetManagedClusterInvokeArgs()
        {
        }
        public static new GetManagedClusterInvokeArgs Empty => new GetManagedClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedClusterResult
    {
        /// <summary>
        /// The Azure Active Directory configuration.
        /// </summary>
        public readonly Outputs.ManagedClusterAADProfileResponse? AadProfile;
        /// <summary>
        /// The profile of managed cluster add-on.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ManagedClusterAddonProfileResponse>? AddonProfiles;
        /// <summary>
        /// The agent pool properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedClusterAgentPoolProfileResponse> AgentPoolProfiles;
        /// <summary>
        /// The access profile for managed cluster API server.
        /// </summary>
        public readonly Outputs.ManagedClusterAPIServerAccessProfileResponse? ApiServerAccessProfile;
        /// <summary>
        /// Parameters to be applied to the cluster-autoscaler when enabled
        /// </summary>
        public readonly Outputs.ManagedClusterPropertiesResponseAutoScalerProfile? AutoScalerProfile;
        /// <summary>
        /// The auto upgrade configuration.
        /// </summary>
        public readonly Outputs.ManagedClusterAutoUpgradeProfileResponse? AutoUpgradeProfile;
        /// <summary>
        /// The Azure Portal requires certain Cross-Origin Resource Sharing (CORS) headers to be sent in some responses, which Kubernetes APIServer doesn't handle by default. This special FQDN supports CORS, allowing the Azure Portal to function properly.
        /// </summary>
        public readonly string AzurePortalFQDN;
        /// <summary>
        /// If set to true, getting static credentials will be disabled for this cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
        /// </summary>
        public readonly bool? DisableLocalAccounts;
        /// <summary>
        /// This is of the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'
        /// </summary>
        public readonly string? DiskEncryptionSetID;
        /// <summary>
        /// This cannot be updated once the Managed Cluster has been created.
        /// </summary>
        public readonly string? DnsPrefix;
        /// <summary>
        /// (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
        /// </summary>
        public readonly bool? EnablePodSecurityPolicy;
        /// <summary>
        /// Whether to enable Kubernetes Role-Based Access Control.
        /// </summary>
        public readonly bool? EnableRBAC;
        /// <summary>
        /// The extended location of the Virtual Machine.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// The FQDN of the master pool.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// This cannot be updated once the Managed Cluster has been created.
        /// </summary>
        public readonly string? FqdnSubdomain;
        /// <summary>
        /// Configurations for provisioning the cluster with HTTP proxy servers.
        /// </summary>
        public readonly Outputs.ManagedClusterHTTPProxyConfigResponse? HttpProxyConfig;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity of the managed cluster, if configured.
        /// </summary>
        public readonly Outputs.ManagedClusterIdentityResponse? Identity;
        /// <summary>
        /// Identities associated with the cluster.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.UserAssignedIdentityResponse>? IdentityProfile;
        /// <summary>
        /// When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
        /// </summary>
        public readonly string? KubernetesVersion;
        /// <summary>
        /// The profile for Linux VMs in the Managed Cluster.
        /// </summary>
        public readonly Outputs.ContainerServiceLinuxProfileResponse? LinuxProfile;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The max number of agent pools for the managed cluster.
        /// </summary>
        public readonly int MaxAgentPools;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network configuration profile.
        /// </summary>
        public readonly Outputs.ContainerServiceNetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// The name of the resource group containing agent pool nodes.
        /// </summary>
        public readonly string? NodeResourceGroup;
        /// <summary>
        /// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity integration.
        /// </summary>
        public readonly Outputs.ManagedClusterPodIdentityProfileResponse? PodIdentityProfile;
        /// <summary>
        /// The Power State of the cluster.
        /// </summary>
        public readonly Outputs.PowerStateResponse PowerState;
        /// <summary>
        /// The FQDN of private cluster.
        /// </summary>
        public readonly string PrivateFQDN;
        /// <summary>
        /// Private link resources associated with the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateLinkResourceResponse> PrivateLinkResources;
        /// <summary>
        /// The current provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Security profile for the managed cluster.
        /// </summary>
        public readonly Outputs.ManagedClusterSecurityProfileResponse? SecurityProfile;
        /// <summary>
        /// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
        /// </summary>
        public readonly Outputs.ManagedClusterServicePrincipalProfileResponse? ServicePrincipalProfile;
        /// <summary>
        /// The managed cluster SKU.
        /// </summary>
        public readonly Outputs.ManagedClusterSKUResponse? Sku;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The profile for Windows VMs in the Managed Cluster.
        /// </summary>
        public readonly Outputs.ManagedClusterWindowsProfileResponse? WindowsProfile;

        [OutputConstructor]
        private GetManagedClusterResult(
            Outputs.ManagedClusterAADProfileResponse? aadProfile,

            ImmutableDictionary<string, Outputs.ManagedClusterAddonProfileResponse>? addonProfiles,

            ImmutableArray<Outputs.ManagedClusterAgentPoolProfileResponse> agentPoolProfiles,

            Outputs.ManagedClusterAPIServerAccessProfileResponse? apiServerAccessProfile,

            Outputs.ManagedClusterPropertiesResponseAutoScalerProfile? autoScalerProfile,

            Outputs.ManagedClusterAutoUpgradeProfileResponse? autoUpgradeProfile,

            string azurePortalFQDN,

            bool? disableLocalAccounts,

            string? diskEncryptionSetID,

            string? dnsPrefix,

            bool? enablePodSecurityPolicy,

            bool? enableRBAC,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string fqdn,

            string? fqdnSubdomain,

            Outputs.ManagedClusterHTTPProxyConfigResponse? httpProxyConfig,

            string id,

            Outputs.ManagedClusterIdentityResponse? identity,

            ImmutableDictionary<string, Outputs.UserAssignedIdentityResponse>? identityProfile,

            string? kubernetesVersion,

            Outputs.ContainerServiceLinuxProfileResponse? linuxProfile,

            string location,

            int maxAgentPools,

            string name,

            Outputs.ContainerServiceNetworkProfileResponse? networkProfile,

            string? nodeResourceGroup,

            Outputs.ManagedClusterPodIdentityProfileResponse? podIdentityProfile,

            Outputs.PowerStateResponse powerState,

            string privateFQDN,

            ImmutableArray<Outputs.PrivateLinkResourceResponse> privateLinkResources,

            string provisioningState,

            Outputs.ManagedClusterSecurityProfileResponse? securityProfile,

            Outputs.ManagedClusterServicePrincipalProfileResponse? servicePrincipalProfile,

            Outputs.ManagedClusterSKUResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.ManagedClusterWindowsProfileResponse? windowsProfile)
        {
            AadProfile = aadProfile;
            AddonProfiles = addonProfiles;
            AgentPoolProfiles = agentPoolProfiles;
            ApiServerAccessProfile = apiServerAccessProfile;
            AutoScalerProfile = autoScalerProfile;
            AutoUpgradeProfile = autoUpgradeProfile;
            AzurePortalFQDN = azurePortalFQDN;
            DisableLocalAccounts = disableLocalAccounts;
            DiskEncryptionSetID = diskEncryptionSetID;
            DnsPrefix = dnsPrefix;
            EnablePodSecurityPolicy = enablePodSecurityPolicy;
            EnableRBAC = enableRBAC;
            ExtendedLocation = extendedLocation;
            Fqdn = fqdn;
            FqdnSubdomain = fqdnSubdomain;
            HttpProxyConfig = httpProxyConfig;
            Id = id;
            Identity = identity;
            IdentityProfile = identityProfile;
            KubernetesVersion = kubernetesVersion;
            LinuxProfile = linuxProfile;
            Location = location;
            MaxAgentPools = maxAgentPools;
            Name = name;
            NetworkProfile = networkProfile;
            NodeResourceGroup = nodeResourceGroup;
            PodIdentityProfile = podIdentityProfile;
            PowerState = powerState;
            PrivateFQDN = privateFQDN;
            PrivateLinkResources = privateLinkResources;
            ProvisioningState = provisioningState;
            SecurityProfile = securityProfile;
            ServicePrincipalProfile = servicePrincipalProfile;
            Sku = sku;
            Tags = tags;
            Type = type;
            WindowsProfile = windowsProfile;
        }
    }
}
