// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20230315Preview
{
    /// <summary>
    /// An UpdateRun is a multi-stage process to perform update operations across members of a Fleet.
    /// </summary>
    [AzureNativeResourceType("azure-native:containerservice/v20230315preview:UpdateRun")]
    public partial class UpdateRun : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        [Output("eTag")]
        public Output<string> ETag { get; private set; } = null!;

        /// <summary>
        /// The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started.
        /// </summary>
        [Output("managedClusterUpdate")]
        public Output<Outputs.ManagedClusterUpdateResponse> ManagedClusterUpdate { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the UpdateRun resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The status of the UpdateRun.
        /// </summary>
        [Output("status")]
        public Output<Outputs.UpdateRunStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// The strategy defines the order in which the clusters will be updated. 
        /// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
        /// The strategy of the UpdateRun can be modified until the run is started.
        /// </summary>
        [Output("strategy")]
        public Output<Outputs.UpdateRunStrategyResponse?> Strategy { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a UpdateRun resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UpdateRun(string name, UpdateRunArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerservice/v20230315preview:UpdateRun", name, args ?? new UpdateRunArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UpdateRun(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerservice/v20230315preview:UpdateRun", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UpdateRun resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UpdateRun Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UpdateRun(name, id, options);
        }
    }

    public sealed class UpdateRunArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Fleet resource.
        /// </summary>
        [Input("fleetName", required: true)]
        public Input<string> FleetName { get; set; } = null!;

        /// <summary>
        /// The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started.
        /// </summary>
        [Input("managedClusterUpdate", required: true)]
        public Input<Inputs.ManagedClusterUpdateArgs> ManagedClusterUpdate { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The strategy defines the order in which the clusters will be updated. 
        /// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
        /// The strategy of the UpdateRun can be modified until the run is started.
        /// </summary>
        [Input("strategy")]
        public Input<Inputs.UpdateRunStrategyArgs>? Strategy { get; set; }

        /// <summary>
        /// The name of the UpdateRun resource.
        /// </summary>
        [Input("updateRunName")]
        public Input<string>? UpdateRunName { get; set; }

        public UpdateRunArgs()
        {
        }
        public static new UpdateRunArgs Empty => new UpdateRunArgs();
    }
}
