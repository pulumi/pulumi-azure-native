// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.Outputs
{

    /// <summary>
    /// Contains the groups to be updated by an UpdateRun.
    /// Update order:
    /// - Sequential between stages: Stages run sequentially. The previous stage must complete before the next one starts.
    /// - Parallel within a stage: Groups within a stage run in parallel.
    /// - Sequential within a group: Clusters within a group are updated sequentially.
    /// </summary>
    [OutputType]
    public sealed class UpdateStageResponse
    {
        /// <summary>
        /// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
        /// </summary>
        public readonly int? AfterStageWaitInSeconds;
        /// <summary>
        /// A list of group names that compose the stage.
        /// The groups will be updated in parallel. Each group name can only appear once in the UpdateRun.
        /// </summary>
        public readonly ImmutableArray<Outputs.UpdateGroupResponse> Groups;
        /// <summary>
        /// The name of the stage. Must be unique within the UpdateRun.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private UpdateStageResponse(
            int? afterStageWaitInSeconds,

            ImmutableArray<Outputs.UpdateGroupResponse> groups,

            string name)
        {
            AfterStageWaitInSeconds = afterStageWaitInSeconds;
            Groups = groups;
            Name = name;
        }
    }
}
