// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService.V20230615Preview.Outputs
{

    /// <summary>
    /// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
    /// </summary>
    [OutputType]
    public sealed class UpdateStageResponse
    {
        /// <summary>
        /// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
        /// </summary>
        public readonly int? AfterStageWaitInSeconds;
        /// <summary>
        /// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
        /// </summary>
        public readonly ImmutableArray<Outputs.UpdateGroupResponse> Groups;
        /// <summary>
        /// The name of the stage. Must be unique within the UpdateRun.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private UpdateStageResponse(
            int? afterStageWaitInSeconds,

            ImmutableArray<Outputs.UpdateGroupResponse> groups,

            string name)
        {
            AfterStageWaitInSeconds = afterStageWaitInSeconds;
            Groups = groups;
            Name = name;
        }
    }
}
