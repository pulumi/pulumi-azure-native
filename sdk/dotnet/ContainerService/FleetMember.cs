// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ContainerService
{
    /// <summary>
    /// A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.
    /// API Version: 2023-03-15-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:containerservice:FleetMember")]
    public partial class FleetMember : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
        /// </summary>
        [Output("clusterResourceId")]
        public Output<string> ClusterResourceId { get; private set; } = null!;

        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        [Output("eTag")]
        public Output<string> ETag { get; private set; } = null!;

        /// <summary>
        /// The group this member belongs to for multi-cluster update management.
        /// </summary>
        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the last operation.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a FleetMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FleetMember(string name, FleetMemberArgs args, CustomResourceOptions? options = null)
            : base("azure-native:containerservice:FleetMember", name, args ?? new FleetMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FleetMember(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:containerservice:FleetMember", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220602preview:FleetMember"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220702preview:FleetMember"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20220902preview:FleetMember"},
                    new global::Pulumi.Alias { Type = "azure-native:containerservice/v20230315preview:FleetMember"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FleetMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FleetMember Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FleetMember(name, id, options);
        }
    }

    public sealed class FleetMemberArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
        /// </summary>
        [Input("clusterResourceId", required: true)]
        public Input<string> ClusterResourceId { get; set; } = null!;

        /// <summary>
        /// The name of the Fleet member resource.
        /// </summary>
        [Input("fleetMemberName")]
        public Input<string>? FleetMemberName { get; set; }

        /// <summary>
        /// The name of the Fleet resource.
        /// </summary>
        [Input("fleetName", required: true)]
        public Input<string> FleetName { get; set; } = null!;

        /// <summary>
        /// The group this member belongs to for multi-cluster update management.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public FleetMemberArgs()
        {
        }
        public static new FleetMemberArgs Empty => new FleetMemberArgs();
    }
}
