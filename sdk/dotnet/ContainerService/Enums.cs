// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.ContainerService
{
    /// <summary>
    /// AgentPoolMode represents mode of an agent pool
    /// </summary>
    [EnumType]
    public readonly struct AgentPoolMode : IEquatable<AgentPoolMode>
    {
        private readonly string _value;

        private AgentPoolMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPoolMode System { get; } = new AgentPoolMode("System");
        public static AgentPoolMode User { get; } = new AgentPoolMode("User");

        public static bool operator ==(AgentPoolMode left, AgentPoolMode right) => left.Equals(right);
        public static bool operator !=(AgentPoolMode left, AgentPoolMode right) => !left.Equals(right);

        public static explicit operator string(AgentPoolMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPoolMode other && Equals(other);
        public bool Equals(AgentPoolMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AgentPoolType represents types of an agent pool
    /// </summary>
    [EnumType]
    public readonly struct AgentPoolType : IEquatable<AgentPoolType>
    {
        private readonly string _value;

        private AgentPoolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPoolType VirtualMachineScaleSets { get; } = new AgentPoolType("VirtualMachineScaleSets");
        public static AgentPoolType AvailabilitySet { get; } = new AgentPoolType("AvailabilitySet");

        public static bool operator ==(AgentPoolType left, AgentPoolType right) => left.Equals(right);
        public static bool operator !=(AgentPoolType left, AgentPoolType right) => !left.Equals(right);

        public static explicit operator string(AgentPoolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPoolType other && Equals(other);
        public bool Equals(AgentPoolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The private link service connection status.
    /// </summary>
    [EnumType]
    public readonly struct ConnectionStatus : IEquatable<ConnectionStatus>
    {
        private readonly string _value;

        private ConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionStatus Pending { get; } = new ConnectionStatus("Pending");
        public static ConnectionStatus Approved { get; } = new ConnectionStatus("Approved");
        public static ConnectionStatus Rejected { get; } = new ConnectionStatus("Rejected");
        public static ConnectionStatus Disconnected { get; } = new ConnectionStatus("Disconnected");

        public static bool operator ==(ConnectionStatus left, ConnectionStatus right) => left.Equals(right);
        public static bool operator !=(ConnectionStatus left, ConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(ConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionStatus other && Equals(other);
        public bool Equals(ConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom.
    /// </summary>
    [EnumType]
    public readonly struct ContainerServiceOrchestratorTypes : IEquatable<ContainerServiceOrchestratorTypes>
    {
        private readonly string _value;

        private ContainerServiceOrchestratorTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerServiceOrchestratorTypes Swarm { get; } = new ContainerServiceOrchestratorTypes("Swarm");
        public static ContainerServiceOrchestratorTypes DCOS { get; } = new ContainerServiceOrchestratorTypes("DCOS");
        public static ContainerServiceOrchestratorTypes Custom { get; } = new ContainerServiceOrchestratorTypes("Custom");
        public static ContainerServiceOrchestratorTypes Kubernetes { get; } = new ContainerServiceOrchestratorTypes("Kubernetes");

        public static bool operator ==(ContainerServiceOrchestratorTypes left, ContainerServiceOrchestratorTypes right) => left.Equals(right);
        public static bool operator !=(ContainerServiceOrchestratorTypes left, ContainerServiceOrchestratorTypes right) => !left.Equals(right);

        public static explicit operator string(ContainerServiceOrchestratorTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerServiceOrchestratorTypes other && Equals(other);
        public bool Equals(ContainerServiceOrchestratorTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Size of agent VMs.
    /// </summary>
    [EnumType]
    public readonly struct ContainerServiceVMSizeTypes : IEquatable<ContainerServiceVMSizeTypes>
    {
        private readonly string _value;

        private ContainerServiceVMSizeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerServiceVMSizeTypes Standard_A1 { get; } = new ContainerServiceVMSizeTypes("Standard_A1");
        public static ContainerServiceVMSizeTypes Standard_A10 { get; } = new ContainerServiceVMSizeTypes("Standard_A10");
        public static ContainerServiceVMSizeTypes Standard_A11 { get; } = new ContainerServiceVMSizeTypes("Standard_A11");
        public static ContainerServiceVMSizeTypes Standard_A1_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A1_v2");
        public static ContainerServiceVMSizeTypes Standard_A2 { get; } = new ContainerServiceVMSizeTypes("Standard_A2");
        public static ContainerServiceVMSizeTypes Standard_A2_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A2_v2");
        public static ContainerServiceVMSizeTypes Standard_A2m_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A2m_v2");
        public static ContainerServiceVMSizeTypes Standard_A3 { get; } = new ContainerServiceVMSizeTypes("Standard_A3");
        public static ContainerServiceVMSizeTypes Standard_A4 { get; } = new ContainerServiceVMSizeTypes("Standard_A4");
        public static ContainerServiceVMSizeTypes Standard_A4_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A4_v2");
        public static ContainerServiceVMSizeTypes Standard_A4m_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A4m_v2");
        public static ContainerServiceVMSizeTypes Standard_A5 { get; } = new ContainerServiceVMSizeTypes("Standard_A5");
        public static ContainerServiceVMSizeTypes Standard_A6 { get; } = new ContainerServiceVMSizeTypes("Standard_A6");
        public static ContainerServiceVMSizeTypes Standard_A7 { get; } = new ContainerServiceVMSizeTypes("Standard_A7");
        public static ContainerServiceVMSizeTypes Standard_A8 { get; } = new ContainerServiceVMSizeTypes("Standard_A8");
        public static ContainerServiceVMSizeTypes Standard_A8_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A8_v2");
        public static ContainerServiceVMSizeTypes Standard_A8m_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_A8m_v2");
        public static ContainerServiceVMSizeTypes Standard_A9 { get; } = new ContainerServiceVMSizeTypes("Standard_A9");
        public static ContainerServiceVMSizeTypes Standard_B2ms { get; } = new ContainerServiceVMSizeTypes("Standard_B2ms");
        public static ContainerServiceVMSizeTypes Standard_B2s { get; } = new ContainerServiceVMSizeTypes("Standard_B2s");
        public static ContainerServiceVMSizeTypes Standard_B4ms { get; } = new ContainerServiceVMSizeTypes("Standard_B4ms");
        public static ContainerServiceVMSizeTypes Standard_B8ms { get; } = new ContainerServiceVMSizeTypes("Standard_B8ms");
        public static ContainerServiceVMSizeTypes Standard_D1 { get; } = new ContainerServiceVMSizeTypes("Standard_D1");
        public static ContainerServiceVMSizeTypes Standard_D11 { get; } = new ContainerServiceVMSizeTypes("Standard_D11");
        public static ContainerServiceVMSizeTypes Standard_D11_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D11_v2");
        public static ContainerServiceVMSizeTypes Standard_D11_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D11_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D12 { get; } = new ContainerServiceVMSizeTypes("Standard_D12");
        public static ContainerServiceVMSizeTypes Standard_D12_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D12_v2");
        public static ContainerServiceVMSizeTypes Standard_D12_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D12_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D13 { get; } = new ContainerServiceVMSizeTypes("Standard_D13");
        public static ContainerServiceVMSizeTypes Standard_D13_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D13_v2");
        public static ContainerServiceVMSizeTypes Standard_D13_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D13_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D14 { get; } = new ContainerServiceVMSizeTypes("Standard_D14");
        public static ContainerServiceVMSizeTypes Standard_D14_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D14_v2");
        public static ContainerServiceVMSizeTypes Standard_D14_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D14_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D15_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D15_v2");
        public static ContainerServiceVMSizeTypes Standard_D16_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D16_v3");
        public static ContainerServiceVMSizeTypes Standard_D16s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D16s_v3");
        public static ContainerServiceVMSizeTypes Standard_D1_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D1_v2");
        public static ContainerServiceVMSizeTypes Standard_D2 { get; } = new ContainerServiceVMSizeTypes("Standard_D2");
        public static ContainerServiceVMSizeTypes Standard_D2_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D2_v2");
        public static ContainerServiceVMSizeTypes Standard_D2_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D2_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D2_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D2_v3");
        public static ContainerServiceVMSizeTypes Standard_D2s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D2s_v3");
        public static ContainerServiceVMSizeTypes Standard_D3 { get; } = new ContainerServiceVMSizeTypes("Standard_D3");
        public static ContainerServiceVMSizeTypes Standard_D32_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D32_v3");
        public static ContainerServiceVMSizeTypes Standard_D32s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D32s_v3");
        public static ContainerServiceVMSizeTypes Standard_D3_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D3_v2");
        public static ContainerServiceVMSizeTypes Standard_D3_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D3_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D4 { get; } = new ContainerServiceVMSizeTypes("Standard_D4");
        public static ContainerServiceVMSizeTypes Standard_D4_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D4_v2");
        public static ContainerServiceVMSizeTypes Standard_D4_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D4_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D4_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D4_v3");
        public static ContainerServiceVMSizeTypes Standard_D4s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D4s_v3");
        public static ContainerServiceVMSizeTypes Standard_D5_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_D5_v2");
        public static ContainerServiceVMSizeTypes Standard_D5_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_D5_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_D64_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D64_v3");
        public static ContainerServiceVMSizeTypes Standard_D64s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D64s_v3");
        public static ContainerServiceVMSizeTypes Standard_D8_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D8_v3");
        public static ContainerServiceVMSizeTypes Standard_D8s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_D8s_v3");
        public static ContainerServiceVMSizeTypes Standard_DS1 { get; } = new ContainerServiceVMSizeTypes("Standard_DS1");
        public static ContainerServiceVMSizeTypes Standard_DS11 { get; } = new ContainerServiceVMSizeTypes("Standard_DS11");
        public static ContainerServiceVMSizeTypes Standard_DS11_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS11_v2");
        public static ContainerServiceVMSizeTypes Standard_DS11_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS11_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS12 { get; } = new ContainerServiceVMSizeTypes("Standard_DS12");
        public static ContainerServiceVMSizeTypes Standard_DS12_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS12_v2");
        public static ContainerServiceVMSizeTypes Standard_DS12_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS12_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS13 { get; } = new ContainerServiceVMSizeTypes("Standard_DS13");
        public static ContainerServiceVMSizeTypes Standard_DS13_2_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS13-2_v2");
        public static ContainerServiceVMSizeTypes Standard_DS13_4_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS13-4_v2");
        public static ContainerServiceVMSizeTypes Standard_DS13_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS13_v2");
        public static ContainerServiceVMSizeTypes Standard_DS13_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS13_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS14 { get; } = new ContainerServiceVMSizeTypes("Standard_DS14");
        public static ContainerServiceVMSizeTypes Standard_DS14_4_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS14-4_v2");
        public static ContainerServiceVMSizeTypes Standard_DS14_8_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS14-8_v2");
        public static ContainerServiceVMSizeTypes Standard_DS14_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS14_v2");
        public static ContainerServiceVMSizeTypes Standard_DS14_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS14_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS15_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS15_v2");
        public static ContainerServiceVMSizeTypes Standard_DS1_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS1_v2");
        public static ContainerServiceVMSizeTypes Standard_DS2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS2");
        public static ContainerServiceVMSizeTypes Standard_DS2_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS2_v2");
        public static ContainerServiceVMSizeTypes Standard_DS2_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS2_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS3 { get; } = new ContainerServiceVMSizeTypes("Standard_DS3");
        public static ContainerServiceVMSizeTypes Standard_DS3_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS3_v2");
        public static ContainerServiceVMSizeTypes Standard_DS3_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS3_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS4 { get; } = new ContainerServiceVMSizeTypes("Standard_DS4");
        public static ContainerServiceVMSizeTypes Standard_DS4_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS4_v2");
        public static ContainerServiceVMSizeTypes Standard_DS4_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS4_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_DS5_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_DS5_v2");
        public static ContainerServiceVMSizeTypes Standard_DS5_v2_Promo { get; } = new ContainerServiceVMSizeTypes("Standard_DS5_v2_Promo");
        public static ContainerServiceVMSizeTypes Standard_E16_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E16_v3");
        public static ContainerServiceVMSizeTypes Standard_E16s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E16s_v3");
        public static ContainerServiceVMSizeTypes Standard_E2_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E2_v3");
        public static ContainerServiceVMSizeTypes Standard_E2s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E2s_v3");
        public static ContainerServiceVMSizeTypes Standard_E32_16s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E32-16s_v3");
        public static ContainerServiceVMSizeTypes Standard_E32_8s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E32-8s_v3");
        public static ContainerServiceVMSizeTypes Standard_E32_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E32_v3");
        public static ContainerServiceVMSizeTypes Standard_E32s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E32s_v3");
        public static ContainerServiceVMSizeTypes Standard_E4_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E4_v3");
        public static ContainerServiceVMSizeTypes Standard_E4s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E4s_v3");
        public static ContainerServiceVMSizeTypes Standard_E64_16s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E64-16s_v3");
        public static ContainerServiceVMSizeTypes Standard_E64_32s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E64-32s_v3");
        public static ContainerServiceVMSizeTypes Standard_E64_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E64_v3");
        public static ContainerServiceVMSizeTypes Standard_E64s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E64s_v3");
        public static ContainerServiceVMSizeTypes Standard_E8_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E8_v3");
        public static ContainerServiceVMSizeTypes Standard_E8s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_E8s_v3");
        public static ContainerServiceVMSizeTypes Standard_F1 { get; } = new ContainerServiceVMSizeTypes("Standard_F1");
        public static ContainerServiceVMSizeTypes Standard_F16 { get; } = new ContainerServiceVMSizeTypes("Standard_F16");
        public static ContainerServiceVMSizeTypes Standard_F16s { get; } = new ContainerServiceVMSizeTypes("Standard_F16s");
        public static ContainerServiceVMSizeTypes Standard_F16s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F16s_v2");
        public static ContainerServiceVMSizeTypes Standard_F1s { get; } = new ContainerServiceVMSizeTypes("Standard_F1s");
        public static ContainerServiceVMSizeTypes Standard_F2 { get; } = new ContainerServiceVMSizeTypes("Standard_F2");
        public static ContainerServiceVMSizeTypes Standard_F2s { get; } = new ContainerServiceVMSizeTypes("Standard_F2s");
        public static ContainerServiceVMSizeTypes Standard_F2s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F2s_v2");
        public static ContainerServiceVMSizeTypes Standard_F32s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F32s_v2");
        public static ContainerServiceVMSizeTypes Standard_F4 { get; } = new ContainerServiceVMSizeTypes("Standard_F4");
        public static ContainerServiceVMSizeTypes Standard_F4s { get; } = new ContainerServiceVMSizeTypes("Standard_F4s");
        public static ContainerServiceVMSizeTypes Standard_F4s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F4s_v2");
        public static ContainerServiceVMSizeTypes Standard_F64s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F64s_v2");
        public static ContainerServiceVMSizeTypes Standard_F72s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F72s_v2");
        public static ContainerServiceVMSizeTypes Standard_F8 { get; } = new ContainerServiceVMSizeTypes("Standard_F8");
        public static ContainerServiceVMSizeTypes Standard_F8s { get; } = new ContainerServiceVMSizeTypes("Standard_F8s");
        public static ContainerServiceVMSizeTypes Standard_F8s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_F8s_v2");
        public static ContainerServiceVMSizeTypes Standard_G1 { get; } = new ContainerServiceVMSizeTypes("Standard_G1");
        public static ContainerServiceVMSizeTypes Standard_G2 { get; } = new ContainerServiceVMSizeTypes("Standard_G2");
        public static ContainerServiceVMSizeTypes Standard_G3 { get; } = new ContainerServiceVMSizeTypes("Standard_G3");
        public static ContainerServiceVMSizeTypes Standard_G4 { get; } = new ContainerServiceVMSizeTypes("Standard_G4");
        public static ContainerServiceVMSizeTypes Standard_G5 { get; } = new ContainerServiceVMSizeTypes("Standard_G5");
        public static ContainerServiceVMSizeTypes Standard_GS1 { get; } = new ContainerServiceVMSizeTypes("Standard_GS1");
        public static ContainerServiceVMSizeTypes Standard_GS2 { get; } = new ContainerServiceVMSizeTypes("Standard_GS2");
        public static ContainerServiceVMSizeTypes Standard_GS3 { get; } = new ContainerServiceVMSizeTypes("Standard_GS3");
        public static ContainerServiceVMSizeTypes Standard_GS4 { get; } = new ContainerServiceVMSizeTypes("Standard_GS4");
        public static ContainerServiceVMSizeTypes Standard_GS4_4 { get; } = new ContainerServiceVMSizeTypes("Standard_GS4-4");
        public static ContainerServiceVMSizeTypes Standard_GS4_8 { get; } = new ContainerServiceVMSizeTypes("Standard_GS4-8");
        public static ContainerServiceVMSizeTypes Standard_GS5 { get; } = new ContainerServiceVMSizeTypes("Standard_GS5");
        public static ContainerServiceVMSizeTypes Standard_GS5_16 { get; } = new ContainerServiceVMSizeTypes("Standard_GS5-16");
        public static ContainerServiceVMSizeTypes Standard_GS5_8 { get; } = new ContainerServiceVMSizeTypes("Standard_GS5-8");
        public static ContainerServiceVMSizeTypes Standard_H16 { get; } = new ContainerServiceVMSizeTypes("Standard_H16");
        public static ContainerServiceVMSizeTypes Standard_H16m { get; } = new ContainerServiceVMSizeTypes("Standard_H16m");
        public static ContainerServiceVMSizeTypes Standard_H16mr { get; } = new ContainerServiceVMSizeTypes("Standard_H16mr");
        public static ContainerServiceVMSizeTypes Standard_H16r { get; } = new ContainerServiceVMSizeTypes("Standard_H16r");
        public static ContainerServiceVMSizeTypes Standard_H8 { get; } = new ContainerServiceVMSizeTypes("Standard_H8");
        public static ContainerServiceVMSizeTypes Standard_H8m { get; } = new ContainerServiceVMSizeTypes("Standard_H8m");
        public static ContainerServiceVMSizeTypes Standard_L16s { get; } = new ContainerServiceVMSizeTypes("Standard_L16s");
        public static ContainerServiceVMSizeTypes Standard_L32s { get; } = new ContainerServiceVMSizeTypes("Standard_L32s");
        public static ContainerServiceVMSizeTypes Standard_L4s { get; } = new ContainerServiceVMSizeTypes("Standard_L4s");
        public static ContainerServiceVMSizeTypes Standard_L8s { get; } = new ContainerServiceVMSizeTypes("Standard_L8s");
        public static ContainerServiceVMSizeTypes Standard_M128_32ms { get; } = new ContainerServiceVMSizeTypes("Standard_M128-32ms");
        public static ContainerServiceVMSizeTypes Standard_M128_64ms { get; } = new ContainerServiceVMSizeTypes("Standard_M128-64ms");
        public static ContainerServiceVMSizeTypes Standard_M128ms { get; } = new ContainerServiceVMSizeTypes("Standard_M128ms");
        public static ContainerServiceVMSizeTypes Standard_M128s { get; } = new ContainerServiceVMSizeTypes("Standard_M128s");
        public static ContainerServiceVMSizeTypes Standard_M64_16ms { get; } = new ContainerServiceVMSizeTypes("Standard_M64-16ms");
        public static ContainerServiceVMSizeTypes Standard_M64_32ms { get; } = new ContainerServiceVMSizeTypes("Standard_M64-32ms");
        public static ContainerServiceVMSizeTypes Standard_M64ms { get; } = new ContainerServiceVMSizeTypes("Standard_M64ms");
        public static ContainerServiceVMSizeTypes Standard_M64s { get; } = new ContainerServiceVMSizeTypes("Standard_M64s");
        public static ContainerServiceVMSizeTypes Standard_NC12 { get; } = new ContainerServiceVMSizeTypes("Standard_NC12");
        public static ContainerServiceVMSizeTypes Standard_NC12s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_NC12s_v2");
        public static ContainerServiceVMSizeTypes Standard_NC12s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_NC12s_v3");
        public static ContainerServiceVMSizeTypes Standard_NC24 { get; } = new ContainerServiceVMSizeTypes("Standard_NC24");
        public static ContainerServiceVMSizeTypes Standard_NC24r { get; } = new ContainerServiceVMSizeTypes("Standard_NC24r");
        public static ContainerServiceVMSizeTypes Standard_NC24rs_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_NC24rs_v2");
        public static ContainerServiceVMSizeTypes Standard_NC24rs_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_NC24rs_v3");
        public static ContainerServiceVMSizeTypes Standard_NC24s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_NC24s_v2");
        public static ContainerServiceVMSizeTypes Standard_NC24s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_NC24s_v3");
        public static ContainerServiceVMSizeTypes Standard_NC6 { get; } = new ContainerServiceVMSizeTypes("Standard_NC6");
        public static ContainerServiceVMSizeTypes Standard_NC6s_v2 { get; } = new ContainerServiceVMSizeTypes("Standard_NC6s_v2");
        public static ContainerServiceVMSizeTypes Standard_NC6s_v3 { get; } = new ContainerServiceVMSizeTypes("Standard_NC6s_v3");
        public static ContainerServiceVMSizeTypes Standard_ND12s { get; } = new ContainerServiceVMSizeTypes("Standard_ND12s");
        public static ContainerServiceVMSizeTypes Standard_ND24rs { get; } = new ContainerServiceVMSizeTypes("Standard_ND24rs");
        public static ContainerServiceVMSizeTypes Standard_ND24s { get; } = new ContainerServiceVMSizeTypes("Standard_ND24s");
        public static ContainerServiceVMSizeTypes Standard_ND6s { get; } = new ContainerServiceVMSizeTypes("Standard_ND6s");
        public static ContainerServiceVMSizeTypes Standard_NV12 { get; } = new ContainerServiceVMSizeTypes("Standard_NV12");
        public static ContainerServiceVMSizeTypes Standard_NV24 { get; } = new ContainerServiceVMSizeTypes("Standard_NV24");
        public static ContainerServiceVMSizeTypes Standard_NV6 { get; } = new ContainerServiceVMSizeTypes("Standard_NV6");

        public static bool operator ==(ContainerServiceVMSizeTypes left, ContainerServiceVMSizeTypes right) => left.Equals(right);
        public static bool operator !=(ContainerServiceVMSizeTypes left, ContainerServiceVMSizeTypes right) => !left.Equals(right);

        public static explicit operator string(ContainerServiceVMSizeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerServiceVMSizeTypes other && Equals(other);
        public bool Equals(ContainerServiceVMSizeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Expander : IEquatable<Expander>
    {
        private readonly string _value;

        private Expander(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Expander Least_waste { get; } = new Expander("least-waste");
        public static Expander Most_pods { get; } = new Expander("most-pods");
        public static Expander Priority { get; } = new Expander("priority");
        public static Expander Random { get; } = new Expander("random");

        public static bool operator ==(Expander left, Expander right) => left.Equals(right);
        public static bool operator !=(Expander left, Expander right) => !left.Equals(right);

        public static explicit operator string(Expander value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Expander other && Equals(other);
        public bool Equals(Expander other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
    /// </summary>
    [EnumType]
    public readonly struct KubeletDiskType : IEquatable<KubeletDiskType>
    {
        private readonly string _value;

        private KubeletDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KubeletDiskType OS { get; } = new KubeletDiskType("OS");

        public static bool operator ==(KubeletDiskType left, KubeletDiskType right) => left.Equals(right);
        public static bool operator !=(KubeletDiskType left, KubeletDiskType right) => !left.Equals(right);

        public static explicit operator string(KubeletDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KubeletDiskType other && Equals(other);
        public bool Equals(KubeletDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User Benefits for Windows VMs.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType None { get; } = new LicenseType("None");
        public static LicenseType Windows_Server { get; } = new LicenseType("Windows_Server");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The load balancer sku for the managed cluster.
    /// </summary>
    [EnumType]
    public readonly struct LoadBalancerSku : IEquatable<LoadBalancerSku>
    {
        private readonly string _value;

        private LoadBalancerSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoadBalancerSku Standard { get; } = new LoadBalancerSku("standard");
        public static LoadBalancerSku Basic { get; } = new LoadBalancerSku("basic");

        public static bool operator ==(LoadBalancerSku left, LoadBalancerSku right) => left.Equals(right);
        public static bool operator !=(LoadBalancerSku left, LoadBalancerSku right) => !left.Equals(right);

        public static explicit operator string(LoadBalancerSku value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoadBalancerSku other && Equals(other);
        public bool Equals(LoadBalancerSku other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of a managed cluster SKU.
    /// </summary>
    [EnumType]
    public readonly struct ManagedClusterSKUName : IEquatable<ManagedClusterSKUName>
    {
        private readonly string _value;

        private ManagedClusterSKUName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedClusterSKUName Basic { get; } = new ManagedClusterSKUName("Basic");

        public static bool operator ==(ManagedClusterSKUName left, ManagedClusterSKUName right) => left.Equals(right);
        public static bool operator !=(ManagedClusterSKUName left, ManagedClusterSKUName right) => !left.Equals(right);

        public static explicit operator string(ManagedClusterSKUName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedClusterSKUName other && Equals(other);
        public bool Equals(ManagedClusterSKUName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tier of a managed cluster SKU.
    /// </summary>
    [EnumType]
    public readonly struct ManagedClusterSKUTier : IEquatable<ManagedClusterSKUTier>
    {
        private readonly string _value;

        private ManagedClusterSKUTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedClusterSKUTier Paid { get; } = new ManagedClusterSKUTier("Paid");
        public static ManagedClusterSKUTier Free { get; } = new ManagedClusterSKUTier("Free");

        public static bool operator ==(ManagedClusterSKUTier left, ManagedClusterSKUTier right) => left.Equals(right);
        public static bool operator !=(ManagedClusterSKUTier left, ManagedClusterSKUTier right) => !left.Equals(right);

        public static explicit operator string(ManagedClusterSKUTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedClusterSKUTier other && Equals(other);
        public bool Equals(ManagedClusterSKUTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network mode used for building Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkMode : IEquatable<NetworkMode>
    {
        private readonly string _value;

        private NetworkMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkMode Transparent { get; } = new NetworkMode("transparent");
        public static NetworkMode Bridge { get; } = new NetworkMode("bridge");

        public static bool operator ==(NetworkMode left, NetworkMode right) => left.Equals(right);
        public static bool operator !=(NetworkMode left, NetworkMode right) => !left.Equals(right);

        public static explicit operator string(NetworkMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkMode other && Equals(other);
        public bool Equals(NetworkMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network plugin used for building Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPlugin : IEquatable<NetworkPlugin>
    {
        private readonly string _value;

        private NetworkPlugin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkPlugin Azure { get; } = new NetworkPlugin("azure");
        public static NetworkPlugin Kubenet { get; } = new NetworkPlugin("kubenet");

        public static bool operator ==(NetworkPlugin left, NetworkPlugin right) => left.Equals(right);
        public static bool operator !=(NetworkPlugin left, NetworkPlugin right) => !left.Equals(right);

        public static explicit operator string(NetworkPlugin value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPlugin other && Equals(other);
        public bool Equals(NetworkPlugin other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network policy used for building Kubernetes network.
    /// </summary>
    [EnumType]
    public readonly struct NetworkPolicy : IEquatable<NetworkPolicy>
    {
        private readonly string _value;

        private NetworkPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkPolicy Calico { get; } = new NetworkPolicy("calico");
        public static NetworkPolicy Azure { get; } = new NetworkPolicy("azure");

        public static bool operator ==(NetworkPolicy left, NetworkPolicy right) => left.Equals(right);
        public static bool operator !=(NetworkPolicy left, NetworkPolicy right) => !left.Equals(right);

        public static explicit operator string(NetworkPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkPolicy other && Equals(other);
        public bool Equals(NetworkPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation.
    /// </summary>
    [EnumType]
    public readonly struct OSDiskType : IEquatable<OSDiskType>
    {
        private readonly string _value;

        private OSDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSDiskType Managed { get; } = new OSDiskType("Managed");
        public static OSDiskType Ephemeral { get; } = new OSDiskType("Ephemeral");

        public static bool operator ==(OSDiskType left, OSDiskType right) => left.Equals(right);
        public static bool operator !=(OSDiskType left, OSDiskType right) => !left.Equals(right);

        public static explicit operator string(OSDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSDiskType other && Equals(other);
        public bool Equals(OSDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
    /// </summary>
    [EnumType]
    public readonly struct OSType : IEquatable<OSType>
    {
        private readonly string _value;

        private OSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OSType Linux { get; } = new OSType("Linux");
        public static OSType Windows { get; } = new OSType("Windows");

        public static bool operator ==(OSType left, OSType right) => left.Equals(right);
        public static bool operator !=(OSType left, OSType right) => !left.Equals(right);

        public static explicit operator string(OSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSType other && Equals(other);
        public bool Equals(OSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Define the role of the AgentPoolProfile.
    /// </summary>
    [EnumType]
    public readonly struct OpenShiftAgentPoolProfileRole : IEquatable<OpenShiftAgentPoolProfileRole>
    {
        private readonly string _value;

        private OpenShiftAgentPoolProfileRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OpenShiftAgentPoolProfileRole Compute { get; } = new OpenShiftAgentPoolProfileRole("compute");
        public static OpenShiftAgentPoolProfileRole Infra { get; } = new OpenShiftAgentPoolProfileRole("infra");

        public static bool operator ==(OpenShiftAgentPoolProfileRole left, OpenShiftAgentPoolProfileRole right) => left.Equals(right);
        public static bool operator !=(OpenShiftAgentPoolProfileRole left, OpenShiftAgentPoolProfileRole right) => !left.Equals(right);

        public static explicit operator string(OpenShiftAgentPoolProfileRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OpenShiftAgentPoolProfileRole other && Equals(other);
        public bool Equals(OpenShiftAgentPoolProfileRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Size of agent VMs.
    /// </summary>
    [EnumType]
    public readonly struct OpenShiftContainerServiceVMSize : IEquatable<OpenShiftContainerServiceVMSize>
    {
        private readonly string _value;

        private OpenShiftContainerServiceVMSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OpenShiftContainerServiceVMSize Standard_D2s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D2s_v3");
        public static OpenShiftContainerServiceVMSize Standard_D4s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D4s_v3");
        public static OpenShiftContainerServiceVMSize Standard_D8s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D8s_v3");
        public static OpenShiftContainerServiceVMSize Standard_D16s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D16s_v3");
        public static OpenShiftContainerServiceVMSize Standard_D32s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D32s_v3");
        public static OpenShiftContainerServiceVMSize Standard_D64s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_D64s_v3");
        public static OpenShiftContainerServiceVMSize Standard_DS4_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS4_v2");
        public static OpenShiftContainerServiceVMSize Standard_DS5_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS5_v2");
        public static OpenShiftContainerServiceVMSize Standard_F8s_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_F8s_v2");
        public static OpenShiftContainerServiceVMSize Standard_F16s_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_F16s_v2");
        public static OpenShiftContainerServiceVMSize Standard_F32s_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_F32s_v2");
        public static OpenShiftContainerServiceVMSize Standard_F64s_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_F64s_v2");
        public static OpenShiftContainerServiceVMSize Standard_F72s_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_F72s_v2");
        public static OpenShiftContainerServiceVMSize Standard_F8s { get; } = new OpenShiftContainerServiceVMSize("Standard_F8s");
        public static OpenShiftContainerServiceVMSize Standard_F16s { get; } = new OpenShiftContainerServiceVMSize("Standard_F16s");
        public static OpenShiftContainerServiceVMSize Standard_E4s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E4s_v3");
        public static OpenShiftContainerServiceVMSize Standard_E8s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E8s_v3");
        public static OpenShiftContainerServiceVMSize Standard_E16s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E16s_v3");
        public static OpenShiftContainerServiceVMSize Standard_E20s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E20s_v3");
        public static OpenShiftContainerServiceVMSize Standard_E32s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E32s_v3");
        public static OpenShiftContainerServiceVMSize Standard_E64s_v3 { get; } = new OpenShiftContainerServiceVMSize("Standard_E64s_v3");
        public static OpenShiftContainerServiceVMSize Standard_GS2 { get; } = new OpenShiftContainerServiceVMSize("Standard_GS2");
        public static OpenShiftContainerServiceVMSize Standard_GS3 { get; } = new OpenShiftContainerServiceVMSize("Standard_GS3");
        public static OpenShiftContainerServiceVMSize Standard_GS4 { get; } = new OpenShiftContainerServiceVMSize("Standard_GS4");
        public static OpenShiftContainerServiceVMSize Standard_GS5 { get; } = new OpenShiftContainerServiceVMSize("Standard_GS5");
        public static OpenShiftContainerServiceVMSize Standard_DS12_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS12_v2");
        public static OpenShiftContainerServiceVMSize Standard_DS13_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS13_v2");
        public static OpenShiftContainerServiceVMSize Standard_DS14_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS14_v2");
        public static OpenShiftContainerServiceVMSize Standard_DS15_v2 { get; } = new OpenShiftContainerServiceVMSize("Standard_DS15_v2");
        public static OpenShiftContainerServiceVMSize Standard_L4s { get; } = new OpenShiftContainerServiceVMSize("Standard_L4s");
        public static OpenShiftContainerServiceVMSize Standard_L8s { get; } = new OpenShiftContainerServiceVMSize("Standard_L8s");
        public static OpenShiftContainerServiceVMSize Standard_L16s { get; } = new OpenShiftContainerServiceVMSize("Standard_L16s");
        public static OpenShiftContainerServiceVMSize Standard_L32s { get; } = new OpenShiftContainerServiceVMSize("Standard_L32s");

        public static bool operator ==(OpenShiftContainerServiceVMSize left, OpenShiftContainerServiceVMSize right) => left.Equals(right);
        public static bool operator !=(OpenShiftContainerServiceVMSize left, OpenShiftContainerServiceVMSize right) => !left.Equals(right);

        public static explicit operator string(OpenShiftContainerServiceVMSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OpenShiftContainerServiceVMSize other && Equals(other);
        public bool Equals(OpenShiftContainerServiceVMSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The outbound (egress) routing method.
    /// </summary>
    [EnumType]
    public readonly struct OutboundType : IEquatable<OutboundType>
    {
        private readonly string _value;

        private OutboundType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OutboundType LoadBalancer { get; } = new OutboundType("loadBalancer");
        public static OutboundType UserDefinedRouting { get; } = new OutboundType("userDefinedRouting");

        public static bool operator ==(OutboundType left, OutboundType right) => left.Equals(right);
        public static bool operator !=(OutboundType left, OutboundType right) => !left.Equals(right);

        public static explicit operator string(OutboundType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutboundType other && Equals(other);
        public bool Equals(OutboundType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of identity used for the managed cluster. Type 'SystemAssigned' will use an implicitly created identity in master components and an auto-created user assigned identity in MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster, service principal will be used instead.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
    /// </summary>
    [EnumType]
    public readonly struct ScaleSetEvictionPolicy : IEquatable<ScaleSetEvictionPolicy>
    {
        private readonly string _value;

        private ScaleSetEvictionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleSetEvictionPolicy Delete { get; } = new ScaleSetEvictionPolicy("Delete");
        public static ScaleSetEvictionPolicy Deallocate { get; } = new ScaleSetEvictionPolicy("Deallocate");

        public static bool operator ==(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => left.Equals(right);
        public static bool operator !=(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => !left.Equals(right);

        public static explicit operator string(ScaleSetEvictionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleSetEvictionPolicy other && Equals(other);
        public bool Equals(ScaleSetEvictionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
    /// </summary>
    [EnumType]
    public readonly struct ScaleSetPriority : IEquatable<ScaleSetPriority>
    {
        private readonly string _value;

        private ScaleSetPriority(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScaleSetPriority Spot { get; } = new ScaleSetPriority("Spot");
        public static ScaleSetPriority Regular { get; } = new ScaleSetPriority("Regular");

        public static bool operator ==(ScaleSetPriority left, ScaleSetPriority right) => left.Equals(right);
        public static bool operator !=(ScaleSetPriority left, ScaleSetPriority right) => !left.Equals(right);

        public static explicit operator string(ScaleSetPriority value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScaleSetPriority other && Equals(other);
        public bool Equals(ScaleSetPriority other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// upgrade channel for auto upgrade.
    /// </summary>
    [EnumType]
    public readonly struct UpgradeChannel : IEquatable<UpgradeChannel>
    {
        private readonly string _value;

        private UpgradeChannel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UpgradeChannel Rapid { get; } = new UpgradeChannel("rapid");
        public static UpgradeChannel Stable { get; } = new UpgradeChannel("stable");
        public static UpgradeChannel Patch { get; } = new UpgradeChannel("patch");
        public static UpgradeChannel None { get; } = new UpgradeChannel("none");

        public static bool operator ==(UpgradeChannel left, UpgradeChannel right) => left.Equals(right);
        public static bool operator !=(UpgradeChannel left, UpgradeChannel right) => !left.Equals(right);

        public static explicit operator string(UpgradeChannel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpgradeChannel other && Equals(other);
        public bool Equals(UpgradeChannel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A day in a week.
    /// </summary>
    [EnumType]
    public readonly struct WeekDay : IEquatable<WeekDay>
    {
        private readonly string _value;

        private WeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekDay Sunday { get; } = new WeekDay("Sunday");
        public static WeekDay Monday { get; } = new WeekDay("Monday");
        public static WeekDay Tuesday { get; } = new WeekDay("Tuesday");
        public static WeekDay Wednesday { get; } = new WeekDay("Wednesday");
        public static WeekDay Thursday { get; } = new WeekDay("Thursday");
        public static WeekDay Friday { get; } = new WeekDay("Friday");
        public static WeekDay Saturday { get; } = new WeekDay("Saturday");

        public static bool operator ==(WeekDay left, WeekDay right) => left.Equals(right);
        public static bool operator !=(WeekDay left, WeekDay right) => !left.Equals(right);

        public static explicit operator string(WeekDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekDay other && Equals(other);
        public bool Equals(WeekDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
