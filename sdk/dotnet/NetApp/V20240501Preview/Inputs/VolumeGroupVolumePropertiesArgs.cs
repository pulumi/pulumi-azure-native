// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20240501Preview.Inputs
{

    /// <summary>
    /// Volume resource
    /// </summary>
    public sealed class VolumeGroupVolumePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// While auto splitting the short term clone volume, if the parent pool does not have enough space to accommodate the volume after split, it will be automatically resized, which will lead to increased billing. To accept capacity pool size auto grow and create a short term clone volume, set the property as accepted.
        /// </summary>
        [Input("acceptGrowCapacityPoolForShortTermCloneSplit")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.AcceptGrowCapacityPoolForShortTermCloneSplit>? AcceptGrowCapacityPoolForShortTermCloneSplit { get; set; }

        /// <summary>
        /// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
        /// </summary>
        [Input("avsDataStore")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.AvsDataStore>? AvsDataStore { get; set; }

        /// <summary>
        /// Resource identifier used to identify the Backup.
        /// </summary>
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        /// <summary>
        /// Pool Resource Id used in case of creating a volume through volume group
        /// </summary>
        [Input("capacityPoolResourceId")]
        public Input<string>? CapacityPoolResourceId { get; set; }

        /// <summary>
        /// Specifies whether Cool Access(tiering) is enabled for the volume.
        /// </summary>
        [Input("coolAccess")]
        public Input<bool>? CoolAccess { get; set; }

        /// <summary>
        /// coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are: 
        ///  Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
        ///  OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
        ///  Never - No client-driven data is pulled from cool tier to standard storage.
        /// </summary>
        [Input("coolAccessRetrievalPolicy")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.CoolAccessRetrievalPolicy>? CoolAccessRetrievalPolicy { get; set; }

        /// <summary>
        /// Specifies the number of days after which data that is not accessed by clients will be tiered.
        /// </summary>
        [Input("coolnessPeriod")]
        public Input<int>? CoolnessPeriod { get; set; }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        [Input("creationToken", required: true)]
        public Input<string> CreationToken { get; set; } = null!;

        /// <summary>
        /// DataProtection type volumes include an object containing details of the replication
        /// </summary>
        [Input("dataProtection")]
        public Input<Inputs.VolumePropertiesDataProtectionArgs>? DataProtection { get; set; }

        /// <summary>
        /// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
        /// </summary>
        [Input("defaultGroupQuotaInKiBs")]
        public Input<double>? DefaultGroupQuotaInKiBs { get; set; }

        /// <summary>
        /// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
        /// </summary>
        [Input("defaultUserQuotaInKiBs")]
        public Input<double>? DefaultUserQuotaInKiBs { get; set; }

        /// <summary>
        /// If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
        /// </summary>
        [Input("deleteBaseSnapshot")]
        public Input<bool>? DeleteBaseSnapshot { get; set; }

        /// <summary>
        /// Flag indicating whether subvolume operations are enabled on the volume
        /// </summary>
        [Input("enableSubvolumes")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.EnableSubvolumes>? EnableSubvolumes { get; set; }

        /// <summary>
        /// Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
        /// </summary>
        [Input("encryptionKeySource")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.EncryptionKeySource>? EncryptionKeySource { get; set; }

        /// <summary>
        /// Set of export policy rules
        /// </summary>
        [Input("exportPolicy")]
        public Input<Inputs.VolumePropertiesExportPolicyArgs>? ExportPolicy { get; set; }

        /// <summary>
        /// Specifies if default quota is enabled for the volume.
        /// </summary>
        [Input("isDefaultQuotaEnabled")]
        public Input<bool>? IsDefaultQuotaEnabled { get; set; }

        /// <summary>
        /// Specifies whether volume is a Large Volume or Regular Volume.
        /// </summary>
        [Input("isLargeVolume")]
        public Input<bool>? IsLargeVolume { get; set; }

        /// <summary>
        /// Restoring
        /// </summary>
        [Input("isRestoring")]
        public Input<bool>? IsRestoring { get; set; }

        /// <summary>
        /// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
        /// </summary>
        [Input("kerberosEnabled")]
        public Input<bool>? KerberosEnabled { get; set; }

        /// <summary>
        /// The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
        /// </summary>
        [Input("keyVaultPrivateEndpointResourceId")]
        public Input<string>? KeyVaultPrivateEndpointResourceId { get; set; }

        /// <summary>
        /// Language supported for volume.
        /// </summary>
        [Input("language")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.VolumeLanguage>? Language { get; set; }

        /// <summary>
        /// Specifies whether LDAP is enabled or not for a given NFS volume.
        /// </summary>
        [Input("ldapEnabled")]
        public Input<bool>? LdapEnabled { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network features available to the volume, or current state of update.
        /// </summary>
        [Input("networkFeatures")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.NetworkFeatures>? NetworkFeatures { get; set; }

        [Input("placementRules")]
        private InputList<Inputs.PlacementKeyValuePairsArgs>? _placementRules;

        /// <summary>
        /// Application specific placement rules for the particular volume
        /// </summary>
        public InputList<Inputs.PlacementKeyValuePairsArgs> PlacementRules
        {
            get => _placementRules ?? (_placementRules = new InputList<Inputs.PlacementKeyValuePairsArgs>());
            set => _placementRules = value;
        }

        [Input("protocolTypes")]
        private InputList<string>? _protocolTypes;

        /// <summary>
        /// Set of protocol types, default NFSv3, CIFS for SMB protocol
        /// </summary>
        public InputList<string> ProtocolTypes
        {
            get => _protocolTypes ?? (_protocolTypes = new InputList<string>());
            set => _protocolTypes = value;
        }

        /// <summary>
        /// Proximity placement group associated with the volume
        /// </summary>
        [Input("proximityPlacementGroup")]
        public Input<string>? ProximityPlacementGroup { get; set; }

        /// <summary>
        /// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
        /// </summary>
        [Input("securityStyle")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.SecurityStyle>? SecurityStyle { get; set; }

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Input("serviceLevel")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.ServiceLevel>? ServiceLevel { get; set; }

        /// <summary>
        /// Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
        /// </summary>
        [Input("smbAccessBasedEnumeration")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.SmbAccessBasedEnumeration>? SmbAccessBasedEnumeration { get; set; }

        /// <summary>
        /// Enables continuously available share property for smb volume. Only applicable for SMB volume
        /// </summary>
        [Input("smbContinuouslyAvailable")]
        public Input<bool>? SmbContinuouslyAvailable { get; set; }

        /// <summary>
        /// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
        /// </summary>
        [Input("smbEncryption")]
        public Input<bool>? SmbEncryption { get; set; }

        /// <summary>
        /// Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
        /// </summary>
        [Input("smbNonBrowsable")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20240501Preview.SmbNonBrowsable>? SmbNonBrowsable { get; set; }

        /// <summary>
        /// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
        /// </summary>
        [Input("snapshotDirectoryVisible")]
        public Input<bool>? SnapshotDirectoryVisible { get; set; }

        /// <summary>
        /// Resource identifier used to identify the Snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("throughputMibps")]
        public Input<double>? ThroughputMibps { get; set; }

        /// <summary>
        /// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.  Avoid passing null value for unixPermissions in volume update operation, As per the behavior, If Null value is passed then user-visible unixPermissions value will became null, and user will not be able to get unixPermissions value. On safer side, actual unixPermissions value on volume will remain as its last saved value only.
        /// </summary>
        [Input("unixPermissions")]
        public Input<string>? UnixPermissions { get; set; }

        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. For regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes, valid values are in the range 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values expressed in bytes as multiples of 1 GiB.
        /// </summary>
        [Input("usageThreshold", required: true)]
        public Input<double> UsageThreshold { get; set; } = null!;

        /// <summary>
        /// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
        /// </summary>
        [Input("volumeSpecName")]
        public Input<string>? VolumeSpecName { get; set; }

        /// <summary>
        /// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. For creating clone volume, set type to ShortTermClone
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Availability Zone
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public VolumeGroupVolumePropertiesArgs()
        {
            AvsDataStore = "Disabled";
            CoolAccess = false;
            DefaultGroupQuotaInKiBs = 0;
            DefaultUserQuotaInKiBs = 0;
            EnableSubvolumes = "Disabled";
            EncryptionKeySource = "Microsoft.NetApp";
            IsDefaultQuotaEnabled = false;
            IsLargeVolume = false;
            KerberosEnabled = false;
            LdapEnabled = false;
            SecurityStyle = "unix";
            SmbContinuouslyAvailable = false;
            SmbEncryption = false;
            SnapshotDirectoryVisible = true;
            UsageThreshold = 107374182400;
        }
        public static new VolumeGroupVolumePropertiesArgs Empty => new VolumeGroupVolumePropertiesArgs();
    }
}
