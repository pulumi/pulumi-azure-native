// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20230701Preview
{
    /// <summary>
    /// Capacity pool resource
    /// </summary>
    [AzureNativeResourceType("azure-native:netapp/v20230701preview:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If enabled (true) the pool can contain cool Access enabled volumes.
        /// </summary>
        [Output("coolAccess")]
        public Output<bool?> CoolAccess { get; private set; } = null!;

        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
        /// </summary>
        [Output("encryptionType")]
        public Output<string?> EncryptionType { get; private set; } = null!;

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// UUID v4 used to identify the Pool
        /// </summary>
        [Output("poolId")]
        public Output<string> PoolId { get; private set; } = null!;

        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The qos type of the pool
        /// </summary>
        [Output("qosType")]
        public Output<string?> QosType { get; private set; } = null!;

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Total throughput of pool in MiB/s
        /// </summary>
        [Output("totalThroughputMibps")]
        public Output<double> TotalThroughputMibps { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Utilized throughput of pool in MiB/s
        /// </summary>
        [Output("utilizedThroughputMibps")]
        public Output<double> UtilizedThroughputMibps { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:netapp/v20230701preview:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:netapp/v20230701preview:Pool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:netapp:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20170815:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20190501:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20190601:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20190701:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20190801:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20191001:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20191101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200201:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200301:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200501:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200601:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200701:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200801:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20200901:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20201101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20201201:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20210201:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20210401:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20210401preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20210601:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20210801:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20211001:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20220101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20220301:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20220501:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20220901:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20221101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20221101preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20230501:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20230501preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20230701:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20231101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20231101preview:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20240101:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20240301:Pool" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20240301preview:Pool" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// If enabled (true) the pool can contain cool Access enabled volumes.
        /// </summary>
        [Input("coolAccess")]
        public Input<bool>? CoolAccess { get; set; }

        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
        /// </summary>
        [Input("encryptionType")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20230701Preview.EncryptionType>? EncryptionType { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        /// <summary>
        /// The qos type of the pool
        /// </summary>
        [Input("qosType")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20230701Preview.QosType>? QosType { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Input("serviceLevel", required: true)]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20230701Preview.ServiceLevel> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        [Input("size", required: true)]
        public Input<double> Size { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PoolArgs()
        {
            CoolAccess = false;
            EncryptionType = "Single";
            QosType = "Auto";
            Size = 4398046511104;
        }
        public static new PoolArgs Empty => new PoolArgs();
    }
}
