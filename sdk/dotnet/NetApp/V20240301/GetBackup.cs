// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20240301
{
    public static class GetBackup
    {
        /// <summary>
        /// Get the specified Backup under Backup Vault.
        /// </summary>
        public static Task<GetBackupResult> InvokeAsync(GetBackupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupResult>("azure-native:netapp/v20240301:getBackup", args ?? new GetBackupArgs(), options.WithDefaults());

        /// <summary>
        /// Get the specified Backup under Backup Vault.
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupResult>("azure-native:netapp/v20240301:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the backup
        /// </summary>
        [Input("backupName", required: true)]
        public string BackupName { get; set; } = null!;

        /// <summary>
        /// The name of the Backup Vault
        /// </summary>
        [Input("backupVaultName", required: true)]
        public string BackupVaultName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBackupArgs()
        {
        }
        public static new GetBackupArgs Empty => new GetBackupArgs();
    }

    public sealed class GetBackupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the backup
        /// </summary>
        [Input("backupName", required: true)]
        public Input<string> BackupName { get; set; } = null!;

        /// <summary>
        /// The name of the Backup Vault
        /// </summary>
        [Input("backupVaultName", required: true)]
        public Input<string> BackupVaultName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBackupInvokeArgs()
        {
        }
        public static new GetBackupInvokeArgs Empty => new GetBackupInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupResult
    {
        /// <summary>
        /// UUID v4 used to identify the Backup
        /// </summary>
        public readonly string BackupId;
        /// <summary>
        /// ResourceId used to identify the backup policy
        /// </summary>
        public readonly string BackupPolicyResourceId;
        /// <summary>
        /// Type of backup Manual or Scheduled
        /// </summary>
        public readonly string BackupType;
        /// <summary>
        /// The creation date of the backup
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// Failure reason
        /// </summary>
        public readonly string FailureReason;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Label for backup
        /// </summary>
        public readonly string? Label;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Size of backup in bytes
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// The name of the snapshot
        /// </summary>
        public readonly string? SnapshotName;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups
        /// </summary>
        public readonly bool? UseExistingSnapshot;
        /// <summary>
        /// ResourceId used to identify the Volume
        /// </summary>
        public readonly string VolumeResourceId;

        [OutputConstructor]
        private GetBackupResult(
            string backupId,

            string backupPolicyResourceId,

            string backupType,

            string creationDate,

            string failureReason,

            string id,

            string? label,

            string name,

            string provisioningState,

            double size,

            string? snapshotName,

            Outputs.SystemDataResponse systemData,

            string type,

            bool? useExistingSnapshot,

            string volumeResourceId)
        {
            BackupId = backupId;
            BackupPolicyResourceId = backupPolicyResourceId;
            BackupType = backupType;
            CreationDate = creationDate;
            FailureReason = failureReason;
            Id = id;
            Label = label;
            Name = name;
            ProvisioningState = provisioningState;
            Size = size;
            SnapshotName = snapshotName;
            SystemData = systemData;
            Type = type;
            UseExistingSnapshot = useExistingSnapshot;
            VolumeResourceId = volumeResourceId;
        }
    }
}
