// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20240901Preview
{
    public static class GetAccountKeyVaultStatus
    {
        /// <summary>
        /// Contains data from encryption.keyVaultProperties as well as information about which private endpoint is used by each encryption sibling set. Response from this endpoint can be modified and used as request body for POST request.
        /// </summary>
        public static Task<GetAccountKeyVaultStatusResult> InvokeAsync(GetAccountKeyVaultStatusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountKeyVaultStatusResult>("azure-native:netapp/v20240901preview:getAccountKeyVaultStatus", args ?? new GetAccountKeyVaultStatusArgs(), options.WithDefaults());

        /// <summary>
        /// Contains data from encryption.keyVaultProperties as well as information about which private endpoint is used by each encryption sibling set. Response from this endpoint can be modified and used as request body for POST request.
        /// </summary>
        public static Output<GetAccountKeyVaultStatusResult> Invoke(GetAccountKeyVaultStatusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountKeyVaultStatusResult>("azure-native:netapp/v20240901preview:getAccountKeyVaultStatus", args ?? new GetAccountKeyVaultStatusInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Contains data from encryption.keyVaultProperties as well as information about which private endpoint is used by each encryption sibling set. Response from this endpoint can be modified and used as request body for POST request.
        /// </summary>
        public static Output<GetAccountKeyVaultStatusResult> Invoke(GetAccountKeyVaultStatusInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountKeyVaultStatusResult>("azure-native:netapp/v20240901preview:getAccountKeyVaultStatus", args ?? new GetAccountKeyVaultStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountKeyVaultStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAccountKeyVaultStatusArgs()
        {
        }
        public static new GetAccountKeyVaultStatusArgs Empty => new GetAccountKeyVaultStatusArgs();
    }

    public sealed class GetAccountKeyVaultStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAccountKeyVaultStatusInvokeArgs()
        {
        }
        public static new GetAccountKeyVaultStatusInvokeArgs Empty => new GetAccountKeyVaultStatusInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountKeyVaultStatusResult
    {
        /// <summary>
        /// The name of the key that should be used for encryption.
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.KeyVaultPrivateEndpointResponse> KeyVaultPrivateEndpoints;
        /// <summary>
        /// Azure resource ID of the key vault/managed HSM that should be used for encryption.
        /// </summary>
        public readonly string? KeyVaultResourceId;
        /// <summary>
        /// The URI of the key vault/managed HSM that should be used for encryption.
        /// </summary>
        public readonly string? KeyVaultUri;

        [OutputConstructor]
        private GetAccountKeyVaultStatusResult(
            string? keyName,

            ImmutableArray<Outputs.KeyVaultPrivateEndpointResponse> keyVaultPrivateEndpoints,

            string? keyVaultResourceId,

            string? keyVaultUri)
        {
            KeyName = keyName;
            KeyVaultPrivateEndpoints = keyVaultPrivateEndpoints;
            KeyVaultResourceId = keyVaultResourceId;
            KeyVaultUri = keyVaultUri;
        }
    }
}
