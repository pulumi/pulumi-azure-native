// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20210801
{
    public static class GetSnapshotPolicy
    {
        /// <summary>
        /// Snapshot policy information
        /// </summary>
        public static Task<GetSnapshotPolicyResult> InvokeAsync(GetSnapshotPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotPolicyResult>("azure-native:netapp/v20210801:getSnapshotPolicy", args ?? new GetSnapshotPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Snapshot policy information
        /// </summary>
        public static Output<GetSnapshotPolicyResult> Invoke(GetSnapshotPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSnapshotPolicyResult>("azure-native:netapp/v20210801:getSnapshotPolicy", args ?? new GetSnapshotPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotPolicyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the snapshot policy
        /// </summary>
        [Input("snapshotPolicyName", required: true)]
        public string SnapshotPolicyName { get; set; } = null!;

        public GetSnapshotPolicyArgs()
        {
        }
    }

    public sealed class GetSnapshotPolicyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the snapshot policy
        /// </summary>
        [Input("snapshotPolicyName", required: true)]
        public Input<string> SnapshotPolicyName { get; set; } = null!;

        public GetSnapshotPolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSnapshotPolicyResult
    {
        /// <summary>
        /// Schedule for daily snapshots
        /// </summary>
        public readonly Outputs.DailyScheduleResponse? DailySchedule;
        /// <summary>
        /// The property to decide policy is enabled or not
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Schedule for hourly snapshots
        /// </summary>
        public readonly Outputs.HourlyScheduleResponse? HourlySchedule;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Schedule for monthly snapshots
        /// </summary>
        public readonly Outputs.MonthlyScheduleResponse? MonthlySchedule;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Schedule for weekly snapshots
        /// </summary>
        public readonly Outputs.WeeklyScheduleResponse? WeeklySchedule;

        [OutputConstructor]
        private GetSnapshotPolicyResult(
            Outputs.DailyScheduleResponse? dailySchedule,

            bool? enabled,

            string etag,

            Outputs.HourlyScheduleResponse? hourlySchedule,

            string id,

            string location,

            Outputs.MonthlyScheduleResponse? monthlySchedule,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.WeeklyScheduleResponse? weeklySchedule)
        {
            DailySchedule = dailySchedule;
            Enabled = enabled;
            Etag = etag;
            HourlySchedule = hourlySchedule;
            Id = id;
            Location = location;
            MonthlySchedule = monthlySchedule;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            WeeklySchedule = weeklySchedule;
        }
    }
}
