// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20170815.Outputs
{

    /// <summary>
    /// Volume properties
    /// </summary>
    [OutputType]
    public sealed class VolumePropertiesResponse
    {
        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        public readonly string CreationToken;
        /// <summary>
        /// Export policy rule
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseExportPolicy? ExportPolicy;
        /// <summary>
        /// Unique FileSystem Identifier.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.
        /// </summary>
        public readonly double? UsageThreshold;

        [OutputConstructor]
        private VolumePropertiesResponse(
            string creationToken,

            Outputs.VolumePropertiesResponseExportPolicy? exportPolicy,

            string fileSystemId,

            string provisioningState,

            string serviceLevel,

            string? subnetId,

            double? usageThreshold)
        {
            CreationToken = creationToken;
            ExportPolicy = exportPolicy;
            FileSystemId = fileSystemId;
            ProvisioningState = provisioningState;
            ServiceLevel = serviceLevel;
            SubnetId = subnetId;
            UsageThreshold = usageThreshold;
        }
    }
}
