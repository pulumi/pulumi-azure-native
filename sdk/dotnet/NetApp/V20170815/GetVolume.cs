// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.NetApp.V20170815
{
    public static class GetVolume
    {
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("azure-nextgen:netapp/v20170815:getVolume", args ?? new GetVolumeArgs(), options.WithVersion());
    }


    public sealed class GetVolumeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the volume
        /// </summary>
        [Input("volumeName", required: true)]
        public string VolumeName { get; set; } = null!;

        public GetVolumeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        public readonly string CreationToken;
        /// <summary>
        /// Export policy rule
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseExportPolicy? ExportPolicy;
        /// <summary>
        /// Unique FileSystem Identifier.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly object? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.
        /// </summary>
        public readonly int? UsageThreshold;

        [OutputConstructor]
        private GetVolumeResult(
            string creationToken,

            Outputs.VolumePropertiesResponseExportPolicy? exportPolicy,

            string fileSystemId,

            string location,

            string name,

            string provisioningState,

            string serviceLevel,

            string? subnetId,

            object? tags,

            string type,

            int? usageThreshold)
        {
            CreationToken = creationToken;
            ExportPolicy = exportPolicy;
            FileSystemId = fileSystemId;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ServiceLevel = serviceLevel;
            SubnetId = subnetId;
            Tags = tags;
            Type = type;
            UsageThreshold = usageThreshold;
        }
    }
}
