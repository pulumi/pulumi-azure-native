// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp
{
    public static class GetCapacityPool
    {
        /// <summary>
        /// Get details of the specified capacity pool
        /// 
        /// Uses Azure REST API version 2024-09-01.
        /// 
        /// Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview, 2025-01-01, 2025-01-01-preview, 2025-03-01, 2025-03-01-preview, 2025-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetCapacityPoolResult> InvokeAsync(GetCapacityPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCapacityPoolResult>("azure-native:netapp:getCapacityPool", args ?? new GetCapacityPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get details of the specified capacity pool
        /// 
        /// Uses Azure REST API version 2024-09-01.
        /// 
        /// Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview, 2025-01-01, 2025-01-01-preview, 2025-03-01, 2025-03-01-preview, 2025-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetCapacityPoolResult> Invoke(GetCapacityPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolResult>("azure-native:netapp:getCapacityPool", args ?? new GetCapacityPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get details of the specified capacity pool
        /// 
        /// Uses Azure REST API version 2024-09-01.
        /// 
        /// Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview, 2025-01-01, 2025-01-01-preview, 2025-03-01, 2025-03-01-preview, 2025-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetCapacityPoolResult> Invoke(GetCapacityPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolResult>("azure-native:netapp:getCapacityPool", args ?? new GetCapacityPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCapacityPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCapacityPoolArgs()
        {
        }
        public static new GetCapacityPoolArgs Empty => new GetCapacityPoolArgs();
    }

    public sealed class GetCapacityPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCapacityPoolInvokeArgs()
        {
        }
        public static new GetCapacityPoolInvokeArgs Empty => new GetCapacityPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetCapacityPoolResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// If enabled (true) the pool can contain cool Access enabled volumes.
        /// </summary>
        public readonly bool? CoolAccess;
        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
        /// </summary>
        public readonly string? EncryptionType;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// UUID v4 used to identify the Pool
        /// </summary>
        public readonly string PoolId;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The qos type of the pool
        /// </summary>
        public readonly string? QosType;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of 1099511627776).
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Total throughput of pool in MiB/s
        /// </summary>
        public readonly double TotalThroughputMibps;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Utilized throughput of pool in MiB/s
        /// </summary>
        public readonly double UtilizedThroughputMibps;

        [OutputConstructor]
        private GetCapacityPoolResult(
            string azureApiVersion,

            bool? coolAccess,

            string? encryptionType,

            string etag,

            string id,

            string location,

            string name,

            string poolId,

            string provisioningState,

            string? qosType,

            string serviceLevel,

            double size,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            double totalThroughputMibps,

            string type,

            double utilizedThroughputMibps)
        {
            AzureApiVersion = azureApiVersion;
            CoolAccess = coolAccess;
            EncryptionType = encryptionType;
            Etag = etag;
            Id = id;
            Location = location;
            Name = name;
            PoolId = poolId;
            ProvisioningState = provisioningState;
            QosType = qosType;
            ServiceLevel = serviceLevel;
            Size = size;
            SystemData = systemData;
            Tags = tags;
            TotalThroughputMibps = totalThroughputMibps;
            Type = type;
            UtilizedThroughputMibps = utilizedThroughputMibps;
        }
    }
}
