// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp
{
    public static class GetCapacityPoolBucket
    {
        /// <summary>
        /// Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services, connect to the volume data contained in those buckets.
        /// 
        /// Uses Azure REST API version 2025-01-01-preview.
        /// </summary>
        public static Task<GetCapacityPoolBucketResult> InvokeAsync(GetCapacityPoolBucketArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCapacityPoolBucketResult>("azure-native:netapp:getCapacityPoolBucket", args ?? new GetCapacityPoolBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services, connect to the volume data contained in those buckets.
        /// 
        /// Uses Azure REST API version 2025-01-01-preview.
        /// </summary>
        public static Output<GetCapacityPoolBucketResult> Invoke(GetCapacityPoolBucketInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolBucketResult>("azure-native:netapp:getCapacityPoolBucket", args ?? new GetCapacityPoolBucketInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of the specified volume's bucket. A bucket allows additional services, such as AI services, connect to the volume data contained in those buckets.
        /// 
        /// Uses Azure REST API version 2025-01-01-preview.
        /// </summary>
        public static Output<GetCapacityPoolBucketResult> Invoke(GetCapacityPoolBucketInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolBucketResult>("azure-native:netapp:getCapacityPoolBucket", args ?? new GetCapacityPoolBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCapacityPoolBucketArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the bucket
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the volume
        /// </summary>
        [Input("volumeName", required: true)]
        public string VolumeName { get; set; } = null!;

        public GetCapacityPoolBucketArgs()
        {
        }
        public static new GetCapacityPoolBucketArgs Empty => new GetCapacityPoolBucketArgs();
    }

    public sealed class GetCapacityPoolBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the bucket
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the volume
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        public GetCapacityPoolBucketInvokeArgs()
        {
        }
        public static new GetCapacityPoolBucketInvokeArgs Empty => new GetCapacityPoolBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetCapacityPoolBucketResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// </summary>
        public readonly Outputs.FileSystemUserResponse? FileSystemUser;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Provisioning state of the resource
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Properties of the server managing the lifecycle of volume buckets
        /// </summary>
        public readonly Outputs.BucketServerPropertiesResponse? Server;
        /// <summary>
        /// The bucket credentials status. There states:
        /// 
        /// "NoCredentialsSet": Access and Secret key pair have not been generated.
        /// "CredentialsExpired": Access and Secret key pair have expired.
        /// "Active": The certificate has been installed and credentials are unexpired.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCapacityPoolBucketResult(
            string azureApiVersion,

            Outputs.FileSystemUserResponse? fileSystemUser,

            string id,

            string name,

            string? path,

            string provisioningState,

            Outputs.BucketServerPropertiesResponse? server,

            string status,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            FileSystemUser = fileSystemUser;
            Id = id;
            Name = name;
            Path = path;
            ProvisioningState = provisioningState;
            Server = server;
            Status = status;
            SystemData = systemData;
            Type = type;
        }
    }
}
