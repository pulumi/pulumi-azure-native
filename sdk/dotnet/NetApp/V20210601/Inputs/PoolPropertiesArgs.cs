// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20210601.Inputs
{

    /// <summary>
    /// Pool properties
    /// </summary>
    public sealed class PoolPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If enabled (true) the pool can contain cool Access enabled volumes.
        /// </summary>
        [Input("coolAccess")]
        public Input<bool>? CoolAccess { get; set; }

        /// <summary>
        /// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
        /// </summary>
        [Input("encryptionType")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20210601.EncryptionType>? EncryptionType { get; set; }

        /// <summary>
        /// The qos type of the pool
        /// </summary>
        [Input("qosType")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20210601.QosType>? QosType { get; set; }

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Input("serviceLevel", required: true)]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20210601.ServiceLevel> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        [Input("size", required: true)]
        public Input<double> Size { get; set; } = null!;

        public PoolPropertiesArgs()
        {
            CoolAccess = false;
            EncryptionType = "Single";
            QosType = "Auto";
        }
        public static new PoolPropertiesArgs Empty => new PoolPropertiesArgs();
    }
}
