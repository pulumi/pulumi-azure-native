// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20211001.Inputs
{

    /// <summary>
    /// Volume resource
    /// </summary>
    public sealed class VolumeGroupVolumePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
        /// </summary>
        [Input("avsDataStore")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20211001.AvsDataStore>? AvsDataStore { get; set; }

        /// <summary>
        /// UUID v4 or resource identifier used to identify the Backup.
        /// </summary>
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        /// <summary>
        /// Pool Resource Id used in case of creating a volume through volume group
        /// </summary>
        [Input("capacityPoolResourceId")]
        public Input<string>? CapacityPoolResourceId { get; set; }

        /// <summary>
        /// Specifies whether Cool Access(tiering) is enabled for the volume.
        /// </summary>
        [Input("coolAccess")]
        public Input<bool>? CoolAccess { get; set; }

        /// <summary>
        /// Specifies the number of days after which data that is not accessed by clients will be tiered.
        /// </summary>
        [Input("coolnessPeriod")]
        public Input<int>? CoolnessPeriod { get; set; }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        [Input("creationToken", required: true)]
        public Input<string> CreationToken { get; set; } = null!;

        /// <summary>
        /// DataProtection type volumes include an object containing details of the replication
        /// </summary>
        [Input("dataProtection")]
        public Input<Inputs.VolumePropertiesDataProtectionArgs>? DataProtection { get; set; }

        /// <summary>
        /// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
        /// </summary>
        [Input("defaultGroupQuotaInKiBs")]
        public Input<double>? DefaultGroupQuotaInKiBs { get; set; }

        /// <summary>
        /// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
        /// </summary>
        [Input("defaultUserQuotaInKiBs")]
        public Input<double>? DefaultUserQuotaInKiBs { get; set; }

        /// <summary>
        /// Flag indicating whether subvolume operations are enabled on the volume
        /// </summary>
        [Input("enableSubvolumes")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20211001.EnableSubvolumes>? EnableSubvolumes { get; set; }

        /// <summary>
        /// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
        /// </summary>
        [Input("encryptionKeySource")]
        public Input<string>? EncryptionKeySource { get; set; }

        /// <summary>
        /// Set of export policy rules
        /// </summary>
        [Input("exportPolicy")]
        public Input<Inputs.VolumePropertiesExportPolicyArgs>? ExportPolicy { get; set; }

        /// <summary>
        /// Specifies if default quota is enabled for the volume.
        /// </summary>
        [Input("isDefaultQuotaEnabled")]
        public Input<bool>? IsDefaultQuotaEnabled { get; set; }

        /// <summary>
        /// Restoring
        /// </summary>
        [Input("isRestoring")]
        public Input<bool>? IsRestoring { get; set; }

        /// <summary>
        /// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
        /// </summary>
        [Input("kerberosEnabled")]
        public Input<bool>? KerberosEnabled { get; set; }

        /// <summary>
        /// Specifies whether LDAP is enabled or not for a given NFS volume.
        /// </summary>
        [Input("ldapEnabled")]
        public Input<bool>? LdapEnabled { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Basic network, or Standard features available to the volume.
        /// </summary>
        [Input("networkFeatures")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20211001.NetworkFeatures>? NetworkFeatures { get; set; }

        [Input("placementRules")]
        private InputList<Inputs.PlacementKeyValuePairsArgs>? _placementRules;

        /// <summary>
        /// Application specific placement rules for the particular volume
        /// </summary>
        public InputList<Inputs.PlacementKeyValuePairsArgs> PlacementRules
        {
            get => _placementRules ?? (_placementRules = new InputList<Inputs.PlacementKeyValuePairsArgs>());
            set => _placementRules = value;
        }

        [Input("protocolTypes")]
        private InputList<string>? _protocolTypes;

        /// <summary>
        /// Set of protocol types, default NFSv3, CIFS for SMB protocol
        /// </summary>
        public InputList<string> ProtocolTypes
        {
            get => _protocolTypes ?? (_protocolTypes = new InputList<string>());
            set => _protocolTypes = value;
        }

        /// <summary>
        /// Proximity placement group associated with the volume
        /// </summary>
        [Input("proximityPlacementGroup")]
        public Input<string>? ProximityPlacementGroup { get; set; }

        /// <summary>
        /// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
        /// </summary>
        [Input("securityStyle")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20211001.SecurityStyle>? SecurityStyle { get; set; }

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Input("serviceLevel")]
        public InputUnion<string, Pulumi.AzureNative.NetApp.V20211001.ServiceLevel>? ServiceLevel { get; set; }

        /// <summary>
        /// Enables continuously available share property for smb volume. Only applicable for SMB volume
        /// </summary>
        [Input("smbContinuouslyAvailable")]
        public Input<bool>? SmbContinuouslyAvailable { get; set; }

        /// <summary>
        /// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
        /// </summary>
        [Input("smbEncryption")]
        public Input<bool>? SmbEncryption { get; set; }

        /// <summary>
        /// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
        /// </summary>
        [Input("snapshotDirectoryVisible")]
        public Input<bool>? SnapshotDirectoryVisible { get; set; }

        /// <summary>
        /// UUID v4 or resource identifier used to identify the Snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("throughputMibps")]
        public Input<double>? ThroughputMibps { get; set; }

        /// <summary>
        /// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
        /// </summary>
        [Input("unixPermissions")]
        public Input<string>? UnixPermissions { get; set; }

        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
        /// </summary>
        [Input("usageThreshold", required: true)]
        public Input<double> UsageThreshold { get; set; } = null!;

        /// <summary>
        /// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
        /// </summary>
        [Input("volumeSpecName")]
        public Input<string>? VolumeSpecName { get; set; }

        /// <summary>
        /// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public VolumeGroupVolumePropertiesArgs()
        {
            AvsDataStore = "Disabled";
            CoolAccess = false;
            DefaultGroupQuotaInKiBs = 0;
            DefaultUserQuotaInKiBs = 0;
            EnableSubvolumes = "Disabled";
            IsDefaultQuotaEnabled = false;
            KerberosEnabled = false;
            LdapEnabled = false;
            NetworkFeatures = "Basic";
            SecurityStyle = "unix";
            SmbContinuouslyAvailable = false;
            SmbEncryption = false;
            SnapshotDirectoryVisible = true;
            UnixPermissions = "0770";
            UsageThreshold = 107374182400;
        }
        public static new VolumeGroupVolumePropertiesArgs Empty => new VolumeGroupVolumePropertiesArgs();
    }
}
