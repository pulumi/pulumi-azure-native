// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20240701
{
    public static class GetBackupPolicy
    {
        /// <summary>
        /// Get a particular backup Policy
        /// </summary>
        public static Task<GetBackupPolicyResult> InvokeAsync(GetBackupPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupPolicyResult>("azure-native:netapp/v20240701:getBackupPolicy", args ?? new GetBackupPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Get a particular backup Policy
        /// </summary>
        public static Output<GetBackupPolicyResult> Invoke(GetBackupPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupPolicyResult>("azure-native:netapp/v20240701:getBackupPolicy", args ?? new GetBackupPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// Backup policy Name which uniquely identify backup policy.
        /// </summary>
        [Input("backupPolicyName", required: true)]
        public string BackupPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBackupPolicyArgs()
        {
        }
        public static new GetBackupPolicyArgs Empty => new GetBackupPolicyArgs();
    }

    public sealed class GetBackupPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Backup policy Name which uniquely identify backup policy.
        /// </summary>
        [Input("backupPolicyName", required: true)]
        public Input<string> BackupPolicyName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBackupPolicyInvokeArgs()
        {
        }
        public static new GetBackupPolicyInvokeArgs Empty => new GetBackupPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupPolicyResult
    {
        /// <summary>
        /// Backup Policy GUID ID
        /// </summary>
        public readonly string BackupPolicyId;
        /// <summary>
        /// Daily backups count to keep
        /// </summary>
        public readonly int? DailyBackupsToKeep;
        /// <summary>
        /// The property to decide policy is enabled or not
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Monthly backups count to keep
        /// </summary>
        public readonly int? MonthlyBackupsToKeep;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A list of volumes assigned to this policy
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeBackupsResponse> VolumeBackups;
        /// <summary>
        /// Volumes using current backup policy
        /// </summary>
        public readonly int VolumesAssigned;
        /// <summary>
        /// Weekly backups count to keep
        /// </summary>
        public readonly int? WeeklyBackupsToKeep;

        [OutputConstructor]
        private GetBackupPolicyResult(
            string backupPolicyId,

            int? dailyBackupsToKeep,

            bool? enabled,

            string etag,

            string id,

            string location,

            int? monthlyBackupsToKeep,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            ImmutableArray<Outputs.VolumeBackupsResponse> volumeBackups,

            int volumesAssigned,

            int? weeklyBackupsToKeep)
        {
            BackupPolicyId = backupPolicyId;
            DailyBackupsToKeep = dailyBackupsToKeep;
            Enabled = enabled;
            Etag = etag;
            Id = id;
            Location = location;
            MonthlyBackupsToKeep = monthlyBackupsToKeep;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VolumeBackups = volumeBackups;
            VolumesAssigned = volumesAssigned;
            WeeklyBackupsToKeep = weeklyBackupsToKeep;
        }
    }
}
