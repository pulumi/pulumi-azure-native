// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp
{
    /// <summary>
    /// Bucket resource
    /// 
    /// Uses Azure REST API version 2025-01-01-preview.
    /// 
    /// Other available API versions: 2025-03-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:netapp:CapacityPoolBucket")]
    public partial class CapacityPoolBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// </summary>
        [Output("fileSystemUser")]
        public Output<Outputs.FileSystemUserResponse?> FileSystemUser { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Properties of the server managing the lifecycle of volume buckets
        /// </summary>
        [Output("server")]
        public Output<Outputs.BucketServerPropertiesResponse?> Server { get; private set; } = null!;

        /// <summary>
        /// The bucket credentials status. There states:
        /// 
        /// "NoCredentialsSet": Access and Secret key pair have not been generated.
        /// "CredentialsExpired": Access and Secret key pair have expired.
        /// "Active": The certificate has been installed and credentials are unexpired.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CapacityPoolBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CapacityPoolBucket(string name, CapacityPoolBucketArgs args, CustomResourceOptions? options = null)
            : base("azure-native:netapp:CapacityPoolBucket", name, args ?? new CapacityPoolBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CapacityPoolBucket(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:netapp:CapacityPoolBucket", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20250101preview:CapacityPoolBucket" },
                    new global::Pulumi.Alias { Type = "azure-native:netapp/v20250301preview:CapacityPoolBucket" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CapacityPoolBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CapacityPoolBucket Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CapacityPoolBucket(name, id, options);
        }
    }

    public sealed class CapacityPoolBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the bucket
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
        /// </summary>
        [Input("fileSystemUser")]
        public Input<Inputs.FileSystemUserArgs>? FileSystemUser { get; set; }

        /// <summary>
        /// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Properties of the server managing the lifecycle of volume buckets
        /// </summary>
        [Input("server")]
        public Input<Inputs.BucketServerPropertiesArgs>? Server { get; set; }

        /// <summary>
        /// The name of the volume
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        public CapacityPoolBucketArgs()
        {
            Path = "/";
        }
        public static new CapacityPoolBucketArgs Empty => new CapacityPoolBucketArgs();
    }
}
