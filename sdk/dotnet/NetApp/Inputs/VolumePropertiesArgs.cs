// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.NetApp.Inputs
{

    /// <summary>
    /// Volume properties
    /// </summary>
    public sealed class VolumePropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        [Input("creationToken", required: true)]
        public Input<string> CreationToken { get; set; } = null!;

        /// <summary>
        /// DataProtection type volumes include an object containing details of the replication
        /// </summary>
        [Input("dataProtection")]
        public Input<Inputs.VolumePropertiesPropertiesArgs>? DataProtection { get; set; }

        /// <summary>
        /// Set of export policy rules
        /// </summary>
        [Input("exportPolicy")]
        public Input<Inputs.VolumePropertiesPropertiesArgs>? ExportPolicy { get; set; }

        /// <summary>
        /// Restoring
        /// </summary>
        [Input("isRestoring")]
        public Input<bool>? IsRestoring { get; set; }

        [Input("mountTargets")]
        private InputList<Inputs.MountTargetPropertiesArgs>? _mountTargets;

        /// <summary>
        /// List of mount targets
        /// </summary>
        public InputList<Inputs.MountTargetPropertiesArgs> MountTargets
        {
            get => _mountTargets ?? (_mountTargets = new InputList<Inputs.MountTargetPropertiesArgs>());
            set => _mountTargets = value;
        }

        [Input("protocolTypes")]
        private InputList<string>? _protocolTypes;

        /// <summary>
        /// Set of protocol types
        /// </summary>
        public InputList<string> ProtocolTypes
        {
            get => _protocolTypes ?? (_protocolTypes = new InputList<string>());
            set => _protocolTypes = value;
        }

        /// <summary>
        /// The service level of the file system
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// If enabled (true) the volume will contain a read-only .snapshot directory which provides access to each of the volume's snapshots (default to true).
        /// </summary>
        [Input("snapshotDirectoryVisible")]
        public Input<bool>? SnapshotDirectoryVisible { get; set; }

        /// <summary>
        /// UUID v4 or resource identifier used to identify the Snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
        /// </summary>
        [Input("usageThreshold", required: true)]
        public Input<int> UsageThreshold { get; set; } = null!;

        /// <summary>
        /// What type of volume is this
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public VolumePropertiesArgs()
        {
        }
    }
}
