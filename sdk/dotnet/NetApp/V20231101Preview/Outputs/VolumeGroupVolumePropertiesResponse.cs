// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20231101Preview.Outputs
{

    /// <summary>
    /// Volume resource
    /// </summary>
    [OutputType]
    public sealed class VolumeGroupVolumePropertiesResponse
    {
        /// <summary>
        /// While auto splitting the short term clone volume, if the parent pool does not have enough space to accommodate the volume after split, it will be automatically resized, which will lead to increased billing. To accept capacity pool size auto grow and create a short term clone volume, set the property as accepted.
        /// </summary>
        public readonly string? AcceptGrowCapacityPoolForShortTermCloneSplit;
        /// <summary>
        /// Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
        /// </summary>
        public readonly double ActualThroughputMibps;
        /// <summary>
        /// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
        /// </summary>
        public readonly string? AvsDataStore;
        /// <summary>
        /// Resource identifier used to identify the Backup.
        /// </summary>
        public readonly string? BackupId;
        /// <summary>
        /// Unique Baremetal Tenant Identifier.
        /// </summary>
        public readonly string BaremetalTenantId;
        /// <summary>
        /// Pool Resource Id used in case of creating a volume through volume group
        /// </summary>
        public readonly string? CapacityPoolResourceId;
        /// <summary>
        /// When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
        /// </summary>
        public readonly int CloneProgress;
        /// <summary>
        /// Specifies whether Cool Access(tiering) is enabled for the volume.
        /// </summary>
        public readonly bool? CoolAccess;
        /// <summary>
        /// coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are: 
        ///  Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
        ///  OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
        ///  Never - No client-driven data is pulled from cool tier to standard storage.
        /// </summary>
        public readonly string? CoolAccessRetrievalPolicy;
        /// <summary>
        /// Specifies the number of days after which data that is not accessed by clients will be tiered.
        /// </summary>
        public readonly int? CoolnessPeriod;
        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        public readonly string CreationToken;
        /// <summary>
        /// DataProtection type volumes include an object containing details of the replication
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseDataProtection? DataProtection;
        /// <summary>
        /// Data store resource unique identifier
        /// </summary>
        public readonly ImmutableArray<string> DataStoreResourceId;
        /// <summary>
        /// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
        /// </summary>
        public readonly double? DefaultGroupQuotaInKiBs;
        /// <summary>
        /// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
        /// </summary>
        public readonly double? DefaultUserQuotaInKiBs;
        /// <summary>
        /// If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
        /// </summary>
        public readonly bool? DeleteBaseSnapshot;
        /// <summary>
        /// Flag indicating whether subvolume operations are enabled on the volume
        /// </summary>
        public readonly string? EnableSubvolumes;
        /// <summary>
        /// Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
        /// </summary>
        public readonly string? EncryptionKeySource;
        /// <summary>
        /// Set of export policy rules
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseExportPolicy? ExportPolicy;
        /// <summary>
        /// Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
        /// </summary>
        public readonly string FileAccessLogs;
        /// <summary>
        /// Unique FileSystem Identifier.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Space shared by short term clone volume with parent volume in bytes.
        /// </summary>
        public readonly double InheritedSizeInBytes;
        /// <summary>
        /// Specifies if default quota is enabled for the volume.
        /// </summary>
        public readonly bool? IsDefaultQuotaEnabled;
        /// <summary>
        /// Specifies whether volume is a Large Volume or Regular Volume.
        /// </summary>
        public readonly bool? IsLargeVolume;
        /// <summary>
        /// Restoring
        /// </summary>
        public readonly bool? IsRestoring;
        /// <summary>
        /// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
        /// </summary>
        public readonly bool? KerberosEnabled;
        /// <summary>
        /// The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
        /// </summary>
        public readonly string? KeyVaultPrivateEndpointResourceId;
        /// <summary>
        /// Language supported for volume.
        /// </summary>
        public readonly string? Language;
        /// <summary>
        /// Specifies whether LDAP is enabled or not for a given NFS volume.
        /// </summary>
        public readonly bool? LdapEnabled;
        /// <summary>
        /// Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
        /// </summary>
        public readonly double MaximumNumberOfFiles;
        /// <summary>
        /// List of mount targets
        /// </summary>
        public readonly ImmutableArray<Outputs.MountTargetPropertiesResponse> MountTargets;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Network features available to the volume, or current state of update.
        /// </summary>
        public readonly string? NetworkFeatures;
        /// <summary>
        /// Network Sibling Set ID for the the group of volumes sharing networking resources.
        /// </summary>
        public readonly string NetworkSiblingSetId;
        /// <summary>
        /// Id of the snapshot or backup that the volume is restored from.
        /// </summary>
        public readonly string OriginatingResourceId;
        /// <summary>
        /// Application specific placement rules for the particular volume
        /// </summary>
        public readonly ImmutableArray<Outputs.PlacementKeyValuePairsResponse> PlacementRules;
        /// <summary>
        /// Set of protocol types, default NFSv3, CIFS for SMB protocol
        /// </summary>
        public readonly ImmutableArray<string> ProtocolTypes;
        /// <summary>
        /// The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
        /// </summary>
        public readonly string ProvisionedAvailabilityZone;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Proximity placement group associated with the volume
        /// </summary>
        public readonly string? ProximityPlacementGroup;
        /// <summary>
        /// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
        /// </summary>
        public readonly string? SecurityStyle;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string? ServiceLevel;
        /// <summary>
        /// Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
        /// </summary>
        public readonly string? SmbAccessBasedEnumeration;
        /// <summary>
        /// Enables continuously available share property for smb volume. Only applicable for SMB volume
        /// </summary>
        public readonly bool? SmbContinuouslyAvailable;
        /// <summary>
        /// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
        /// </summary>
        public readonly bool? SmbEncryption;
        /// <summary>
        /// Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
        /// </summary>
        public readonly string? SmbNonBrowsable;
        /// <summary>
        /// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
        /// </summary>
        public readonly bool? SnapshotDirectoryVisible;
        /// <summary>
        /// Resource identifier used to identify the Snapshot.
        /// </summary>
        public readonly string? SnapshotId;
        /// <summary>
        /// Provides storage to network proximity information for the volume.
        /// </summary>
        public readonly string StorageToNetworkProximity;
        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// T2 network information
        /// </summary>
        public readonly string T2Network;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly double? ThroughputMibps;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
        /// </summary>
        public readonly string? UnixPermissions;
        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes.
        /// </summary>
        public readonly double UsageThreshold;
        /// <summary>
        /// Volume Group Name
        /// </summary>
        public readonly string VolumeGroupName;
        /// <summary>
        /// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
        /// </summary>
        public readonly string? VolumeSpecName;
        /// <summary>
        /// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. For creating clone volume, set type to ShortTermClone
        /// </summary>
        public readonly string? VolumeType;
        /// <summary>
        /// Availability Zone
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private VolumeGroupVolumePropertiesResponse(
            string? acceptGrowCapacityPoolForShortTermCloneSplit,

            double actualThroughputMibps,

            string? avsDataStore,

            string? backupId,

            string baremetalTenantId,

            string? capacityPoolResourceId,

            int cloneProgress,

            bool? coolAccess,

            string? coolAccessRetrievalPolicy,

            int? coolnessPeriod,

            string creationToken,

            Outputs.VolumePropertiesResponseDataProtection? dataProtection,

            ImmutableArray<string> dataStoreResourceId,

            double? defaultGroupQuotaInKiBs,

            double? defaultUserQuotaInKiBs,

            bool? deleteBaseSnapshot,

            string? enableSubvolumes,

            bool encrypted,

            string? encryptionKeySource,

            Outputs.VolumePropertiesResponseExportPolicy? exportPolicy,

            string fileAccessLogs,

            string fileSystemId,

            string id,

            double inheritedSizeInBytes,

            bool? isDefaultQuotaEnabled,

            bool? isLargeVolume,

            bool? isRestoring,

            bool? kerberosEnabled,

            string? keyVaultPrivateEndpointResourceId,

            string? language,

            bool? ldapEnabled,

            double maximumNumberOfFiles,

            ImmutableArray<Outputs.MountTargetPropertiesResponse> mountTargets,

            string? name,

            string? networkFeatures,

            string networkSiblingSetId,

            string originatingResourceId,

            ImmutableArray<Outputs.PlacementKeyValuePairsResponse> placementRules,

            ImmutableArray<string> protocolTypes,

            string provisionedAvailabilityZone,

            string provisioningState,

            string? proximityPlacementGroup,

            string? securityStyle,

            string? serviceLevel,

            string? smbAccessBasedEnumeration,

            bool? smbContinuouslyAvailable,

            bool? smbEncryption,

            string? smbNonBrowsable,

            bool? snapshotDirectoryVisible,

            string? snapshotId,

            string storageToNetworkProximity,

            string subnetId,

            string t2Network,

            ImmutableDictionary<string, string>? tags,

            double? throughputMibps,

            string type,

            string? unixPermissions,

            double usageThreshold,

            string volumeGroupName,

            string? volumeSpecName,

            string? volumeType,

            ImmutableArray<string> zones)
        {
            AcceptGrowCapacityPoolForShortTermCloneSplit = acceptGrowCapacityPoolForShortTermCloneSplit;
            ActualThroughputMibps = actualThroughputMibps;
            AvsDataStore = avsDataStore;
            BackupId = backupId;
            BaremetalTenantId = baremetalTenantId;
            CapacityPoolResourceId = capacityPoolResourceId;
            CloneProgress = cloneProgress;
            CoolAccess = coolAccess;
            CoolAccessRetrievalPolicy = coolAccessRetrievalPolicy;
            CoolnessPeriod = coolnessPeriod;
            CreationToken = creationToken;
            DataProtection = dataProtection;
            DataStoreResourceId = dataStoreResourceId;
            DefaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
            DefaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
            DeleteBaseSnapshot = deleteBaseSnapshot;
            EnableSubvolumes = enableSubvolumes;
            Encrypted = encrypted;
            EncryptionKeySource = encryptionKeySource;
            ExportPolicy = exportPolicy;
            FileAccessLogs = fileAccessLogs;
            FileSystemId = fileSystemId;
            Id = id;
            InheritedSizeInBytes = inheritedSizeInBytes;
            IsDefaultQuotaEnabled = isDefaultQuotaEnabled;
            IsLargeVolume = isLargeVolume;
            IsRestoring = isRestoring;
            KerberosEnabled = kerberosEnabled;
            KeyVaultPrivateEndpointResourceId = keyVaultPrivateEndpointResourceId;
            Language = language;
            LdapEnabled = ldapEnabled;
            MaximumNumberOfFiles = maximumNumberOfFiles;
            MountTargets = mountTargets;
            Name = name;
            NetworkFeatures = networkFeatures;
            NetworkSiblingSetId = networkSiblingSetId;
            OriginatingResourceId = originatingResourceId;
            PlacementRules = placementRules;
            ProtocolTypes = protocolTypes;
            ProvisionedAvailabilityZone = provisionedAvailabilityZone;
            ProvisioningState = provisioningState;
            ProximityPlacementGroup = proximityPlacementGroup;
            SecurityStyle = securityStyle;
            ServiceLevel = serviceLevel;
            SmbAccessBasedEnumeration = smbAccessBasedEnumeration;
            SmbContinuouslyAvailable = smbContinuouslyAvailable;
            SmbEncryption = smbEncryption;
            SmbNonBrowsable = smbNonBrowsable;
            SnapshotDirectoryVisible = snapshotDirectoryVisible;
            SnapshotId = snapshotId;
            StorageToNetworkProximity = storageToNetworkProximity;
            SubnetId = subnetId;
            T2Network = t2Network;
            Tags = tags;
            ThroughputMibps = throughputMibps;
            Type = type;
            UnixPermissions = unixPermissions;
            UsageThreshold = usageThreshold;
            VolumeGroupName = volumeGroupName;
            VolumeSpecName = volumeSpecName;
            VolumeType = volumeType;
            Zones = zones;
        }
    }
}
