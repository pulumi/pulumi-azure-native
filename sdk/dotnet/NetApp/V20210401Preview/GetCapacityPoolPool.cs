// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20210401Preview
{
    public static class GetCapacityPoolPool
    {
        /// <summary>
        /// Get details of the specified capacity pool
        /// </summary>
        public static Task<GetCapacityPoolPoolResult> InvokeAsync(GetCapacityPoolPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCapacityPoolPoolResult>("azure-native:netapp/v20210401preview:getCapacityPoolPool", args ?? new GetCapacityPoolPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get details of the specified capacity pool
        /// </summary>
        public static Output<GetCapacityPoolPoolResult> Invoke(GetCapacityPoolPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolPoolResult>("azure-native:netapp/v20210401preview:getCapacityPoolPool", args ?? new GetCapacityPoolPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get details of the specified capacity pool
        /// </summary>
        public static Output<GetCapacityPoolPoolResult> Invoke(GetCapacityPoolPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCapacityPoolPoolResult>("azure-native:netapp/v20210401preview:getCapacityPoolPool", args ?? new GetCapacityPoolPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCapacityPoolPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCapacityPoolPoolArgs()
        {
        }
        public static new GetCapacityPoolPoolArgs Empty => new GetCapacityPoolPoolArgs();
    }

    public sealed class GetCapacityPoolPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the capacity pool
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCapacityPoolPoolInvokeArgs()
        {
        }
        public static new GetCapacityPoolPoolInvokeArgs Empty => new GetCapacityPoolPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetCapacityPoolPoolResult
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// UUID v4 used to identify the Pool
        /// </summary>
        public readonly string PoolId;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The qos type of the pool
        /// </summary>
        public readonly string? QosType;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Total throughput of pool in Mibps
        /// </summary>
        public readonly double TotalThroughputMibps;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Utilized throughput of pool in Mibps
        /// </summary>
        public readonly double UtilizedThroughputMibps;

        [OutputConstructor]
        private GetCapacityPoolPoolResult(
            string id,

            string location,

            string name,

            string poolId,

            string provisioningState,

            string? qosType,

            string serviceLevel,

            double size,

            ImmutableDictionary<string, string>? tags,

            double totalThroughputMibps,

            string type,

            double utilizedThroughputMibps)
        {
            Id = id;
            Location = location;
            Name = name;
            PoolId = poolId;
            ProvisioningState = provisioningState;
            QosType = qosType;
            ServiceLevel = serviceLevel;
            Size = size;
            Tags = tags;
            TotalThroughputMibps = totalThroughputMibps;
            Type = type;
            UtilizedThroughputMibps = utilizedThroughputMibps;
        }
    }
}
