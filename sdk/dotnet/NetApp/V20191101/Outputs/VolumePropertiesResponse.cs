// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.NetApp.V20191101.Outputs
{

    /// <summary>
    /// Volume properties
    /// </summary>
    [OutputType]
    public sealed class VolumePropertiesResponse
    {
        /// <summary>
        /// Unique Baremetal Tenant Identifier.
        /// </summary>
        public readonly string BaremetalTenantId;
        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets
        /// </summary>
        public readonly string CreationToken;
        /// <summary>
        /// DataProtection type volumes include an object containing details of the replication
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseDataProtection? DataProtection;
        /// <summary>
        /// Set of export policy rules
        /// </summary>
        public readonly Outputs.VolumePropertiesResponseExportPolicy? ExportPolicy;
        /// <summary>
        /// Unique FileSystem Identifier.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// Restoring
        /// </summary>
        public readonly bool? IsRestoring;
        /// <summary>
        /// List of mount targets
        /// </summary>
        public readonly ImmutableArray<Outputs.MountTargetPropertiesResponse> MountTargets;
        /// <summary>
        /// Set of protocol types, default NFSv3, CIFS for SMB protocol
        /// </summary>
        public readonly ImmutableArray<string> ProtocolTypes;
        /// <summary>
        /// Azure lifecycle management
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The service level of the file system
        /// </summary>
        public readonly string? ServiceLevel;
        /// <summary>
        /// UUID v4 or resource identifier used to identify the Snapshot.
        /// </summary>
        public readonly string? SnapshotId;
        /// <summary>
        /// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
        /// </summary>
        public readonly double UsageThreshold;
        /// <summary>
        /// Resource size in bytes, current storage usage for the volume in bytes
        /// </summary>
        public readonly double UsedBytes;
        /// <summary>
        /// What type of volume is this
        /// </summary>
        public readonly string? VolumeType;

        [OutputConstructor]
        private VolumePropertiesResponse(
            string baremetalTenantId,

            string creationToken,

            Outputs.VolumePropertiesResponseDataProtection? dataProtection,

            Outputs.VolumePropertiesResponseExportPolicy? exportPolicy,

            string fileSystemId,

            bool? isRestoring,

            ImmutableArray<Outputs.MountTargetPropertiesResponse> mountTargets,

            ImmutableArray<string> protocolTypes,

            string provisioningState,

            string? serviceLevel,

            string? snapshotId,

            string subnetId,

            double usageThreshold,

            double usedBytes,

            string? volumeType)
        {
            BaremetalTenantId = baremetalTenantId;
            CreationToken = creationToken;
            DataProtection = dataProtection;
            ExportPolicy = exportPolicy;
            FileSystemId = fileSystemId;
            IsRestoring = isRestoring;
            MountTargets = mountTargets;
            ProtocolTypes = protocolTypes;
            ProvisioningState = provisioningState;
            ServiceLevel = serviceLevel;
            SnapshotId = snapshotId;
            SubnetId = subnetId;
            UsageThreshold = usageThreshold;
            UsedBytes = usedBytes;
            VolumeType = volumeType;
        }
    }
}
