// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Peering.V20220601
{
    /// <summary>
    /// The Connection Monitor Test class.
    /// </summary>
    [AzureNativeResourceType("azure-native:peering/v20220601:ConnectionMonitorTest")]
    public partial class ConnectionMonitorTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Connection Monitor test destination
        /// </summary>
        [Output("destination")]
        public Output<string?> Destination { get; private set; } = null!;

        /// <summary>
        /// The Connection Monitor test destination port
        /// </summary>
        [Output("destinationPort")]
        public Output<int?> DestinationPort { get; private set; } = null!;

        /// <summary>
        /// The flag that indicates if the Connection Monitor test is successful or not.
        /// </summary>
        [Output("isTestSuccessful")]
        public Output<bool> IsTestSuccessful { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path representing the Connection Monitor test.
        /// </summary>
        [Output("path")]
        public Output<ImmutableArray<string>> Path { get; private set; } = null!;

        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The Connection Monitor test source agent
        /// </summary>
        [Output("sourceAgent")]
        public Output<string?> SourceAgent { get; private set; } = null!;

        /// <summary>
        /// The Connection Monitor test frequency in seconds
        /// </summary>
        [Output("testFrequencyInSec")]
        public Output<int?> TestFrequencyInSec { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectionMonitorTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectionMonitorTest(string name, ConnectionMonitorTestArgs args, CustomResourceOptions? options = null)
            : base("azure-native:peering/v20220601:ConnectionMonitorTest", name, args ?? new ConnectionMonitorTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectionMonitorTest(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:peering/v20220601:ConnectionMonitorTest", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:peering:ConnectionMonitorTest"},
                    new global::Pulumi.Alias { Type = "azure-native:peering/v20210601:ConnectionMonitorTest"},
                    new global::Pulumi.Alias { Type = "azure-native:peering/v20220101:ConnectionMonitorTest"},
                    new global::Pulumi.Alias { Type = "azure-native:peering/v20221001:ConnectionMonitorTest"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectionMonitorTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectionMonitorTest Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ConnectionMonitorTest(name, id, options);
        }
    }

    public sealed class ConnectionMonitorTestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the connection monitor test
        /// </summary>
        [Input("connectionMonitorTestName")]
        public Input<string>? ConnectionMonitorTestName { get; set; }

        /// <summary>
        /// The Connection Monitor test destination
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// The Connection Monitor test destination port
        /// </summary>
        [Input("destinationPort")]
        public Input<int>? DestinationPort { get; set; }

        /// <summary>
        /// The name of the peering service.
        /// </summary>
        [Input("peeringServiceName", required: true)]
        public Input<string> PeeringServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Connection Monitor test source agent
        /// </summary>
        [Input("sourceAgent")]
        public Input<string>? SourceAgent { get; set; }

        /// <summary>
        /// The Connection Monitor test frequency in seconds
        /// </summary>
        [Input("testFrequencyInSec")]
        public Input<int>? TestFrequencyInSec { get; set; }

        public ConnectionMonitorTestArgs()
        {
        }
        public static new ConnectionMonitorTestArgs Empty => new ConnectionMonitorTestArgs();
    }
}
