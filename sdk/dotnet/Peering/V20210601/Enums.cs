// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Peering.V20210601
{
    /// <summary>
    /// The type of direct peering.
    /// </summary>
    [EnumType]
    public readonly struct DirectPeeringType : IEquatable<DirectPeeringType>
    {
        private readonly string _value;

        private DirectPeeringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DirectPeeringType Edge { get; } = new DirectPeeringType("Edge");
        public static DirectPeeringType Transit { get; } = new DirectPeeringType("Transit");
        public static DirectPeeringType Cdn { get; } = new DirectPeeringType("Cdn");
        public static DirectPeeringType Internal { get; } = new DirectPeeringType("Internal");
        public static DirectPeeringType Ix { get; } = new DirectPeeringType("Ix");
        public static DirectPeeringType IxRs { get; } = new DirectPeeringType("IxRs");
        public static DirectPeeringType Voice { get; } = new DirectPeeringType("Voice");

        public static bool operator ==(DirectPeeringType left, DirectPeeringType right) => left.Equals(right);
        public static bool operator !=(DirectPeeringType left, DirectPeeringType right) => !left.Equals(right);

        public static explicit operator string(DirectPeeringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DirectPeeringType other && Equals(other);
        public bool Equals(DirectPeeringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kind of the peering.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind Direct { get; } = new Kind("Direct");
        public static Kind Exchange { get; } = new Kind("Exchange");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The role of the contact.
    /// </summary>
    [EnumType]
    public readonly struct Role : IEquatable<Role>
    {
        private readonly string _value;

        private Role(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Role Noc { get; } = new Role("Noc");
        public static Role Policy { get; } = new Role("Policy");
        public static Role Technical { get; } = new Role("Technical");
        public static Role Service { get; } = new Role("Service");
        public static Role Escalation { get; } = new Role("Escalation");
        public static Role Other { get; } = new Role("Other");

        public static bool operator ==(Role left, Role right) => left.Equals(right);
        public static bool operator !=(Role left, Role right) => !left.Equals(right);

        public static explicit operator string(Role value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Role other && Equals(other);
        public bool Equals(Role other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The field indicating if Microsoft provides session ip addresses.
    /// </summary>
    [EnumType]
    public readonly struct SessionAddressProvider : IEquatable<SessionAddressProvider>
    {
        private readonly string _value;

        private SessionAddressProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionAddressProvider Microsoft { get; } = new SessionAddressProvider("Microsoft");
        public static SessionAddressProvider Peer { get; } = new SessionAddressProvider("Peer");

        public static bool operator ==(SessionAddressProvider left, SessionAddressProvider right) => left.Equals(right);
        public static bool operator !=(SessionAddressProvider left, SessionAddressProvider right) => !left.Equals(right);

        public static explicit operator string(SessionAddressProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionAddressProvider other && Equals(other);
        public bool Equals(SessionAddressProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
