// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Peering.V20210601
{
    public static class GetConnectionMonitorTest
    {
        /// <summary>
        /// The Connection Monitor Test class.
        /// </summary>
        public static Task<GetConnectionMonitorTestResult> InvokeAsync(GetConnectionMonitorTestArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionMonitorTestResult>("azure-native:peering/v20210601:getConnectionMonitorTest", args ?? new GetConnectionMonitorTestArgs(), options.WithDefaults());

        /// <summary>
        /// The Connection Monitor Test class.
        /// </summary>
        public static Output<GetConnectionMonitorTestResult> Invoke(GetConnectionMonitorTestInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectionMonitorTestResult>("azure-native:peering/v20210601:getConnectionMonitorTest", args ?? new GetConnectionMonitorTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionMonitorTestArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the connection monitor test
        /// </summary>
        [Input("connectionMonitorTestName", required: true)]
        public string ConnectionMonitorTestName { get; set; } = null!;

        /// <summary>
        /// The name of the peering service.
        /// </summary>
        [Input("peeringServiceName", required: true)]
        public string PeeringServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConnectionMonitorTestArgs()
        {
        }
    }

    public sealed class GetConnectionMonitorTestInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the connection monitor test
        /// </summary>
        [Input("connectionMonitorTestName", required: true)]
        public Input<string> ConnectionMonitorTestName { get; set; } = null!;

        /// <summary>
        /// The name of the peering service.
        /// </summary>
        [Input("peeringServiceName", required: true)]
        public Input<string> PeeringServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConnectionMonitorTestInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConnectionMonitorTestResult
    {
        /// <summary>
        /// The Connection Monitor test destination
        /// </summary>
        public readonly string? Destination;
        /// <summary>
        /// The Connection Monitor test destination port
        /// </summary>
        public readonly int? DestinationPort;
        /// <summary>
        /// The ID of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The flag that indicates if the Connection Monitor test is successful or not.
        /// </summary>
        public readonly bool IsTestSuccessful;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path representing the Connection Monitor test.
        /// </summary>
        public readonly ImmutableArray<string> Path;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The Connection Monitor test source agent
        /// </summary>
        public readonly string? SourceAgent;
        /// <summary>
        /// The Connection Monitor test frequency in seconds
        /// </summary>
        public readonly int? TestFrequencyInSec;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetConnectionMonitorTestResult(
            string? destination,

            int? destinationPort,

            string id,

            bool isTestSuccessful,

            string name,

            ImmutableArray<string> path,

            string provisioningState,

            string? sourceAgent,

            int? testFrequencyInSec,

            string type)
        {
            Destination = destination;
            DestinationPort = destinationPort;
            Id = id;
            IsTestSuccessful = isTestSuccessful;
            Name = name;
            Path = path;
            ProvisioningState = provisioningState;
            SourceAgent = sourceAgent;
            TestFrequencyInSec = testFrequencyInSec;
            Type = type;
        }
    }
}
