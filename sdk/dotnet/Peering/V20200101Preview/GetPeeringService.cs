// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Peering.V20200101Preview
{
    [Obsolete(@"Version 2020-01-01-preview will be removed in v2 of the provider.")]
    public static class GetPeeringService
    {
        /// <summary>
        /// Gets an existing peering service with the specified name under the given subscription and resource group.
        /// </summary>
        public static Task<GetPeeringServiceResult> InvokeAsync(GetPeeringServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPeeringServiceResult>("azure-native:peering/v20200101preview:getPeeringService", args ?? new GetPeeringServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an existing peering service with the specified name under the given subscription and resource group.
        /// </summary>
        public static Output<GetPeeringServiceResult> Invoke(GetPeeringServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPeeringServiceResult>("azure-native:peering/v20200101preview:getPeeringService", args ?? new GetPeeringServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPeeringServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the peering.
        /// </summary>
        [Input("peeringServiceName", required: true)]
        public string PeeringServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPeeringServiceArgs()
        {
        }
        public static new GetPeeringServiceArgs Empty => new GetPeeringServiceArgs();
    }

    public sealed class GetPeeringServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the peering.
        /// </summary>
        [Input("peeringServiceName", required: true)]
        public Input<string> PeeringServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPeeringServiceInvokeArgs()
        {
        }
        public static new GetPeeringServiceInvokeArgs Empty => new GetPeeringServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPeeringServiceResult
    {
        /// <summary>
        /// The ID of the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PeeringServiceLocation of the Customer.
        /// </summary>
        public readonly string? PeeringServiceLocation;
        /// <summary>
        /// The MAPS Provider Name.
        /// </summary>
        public readonly string? PeeringServiceProvider;
        /// <summary>
        /// The provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The SKU that defines the type of the peering service.
        /// </summary>
        public readonly Outputs.PeeringServiceSkuResponse? Sku;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPeeringServiceResult(
            string id,

            string location,

            string name,

            string? peeringServiceLocation,

            string? peeringServiceProvider,

            string provisioningState,

            Outputs.PeeringServiceSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            PeeringServiceLocation = peeringServiceLocation;
            PeeringServiceProvider = peeringServiceProvider;
            ProvisioningState = provisioningState;
            Sku = sku;
            Tags = tags;
            Type = type;
        }
    }
}
