// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Automation
{
    public static class GetSchedule
    {
        /// <summary>
        /// Retrieve the schedule identified by schedule name.
        /// Azure REST API version: 2022-08-08.
        /// </summary>
        public static Task<GetScheduleResult> InvokeAsync(GetScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduleResult>("azure-native:automation:getSchedule", args ?? new GetScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve the schedule identified by schedule name.
        /// Azure REST API version: 2022-08-08.
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("azure-native:automation:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the automation account.
        /// </summary>
        [Input("automationAccountName", required: true)]
        public string AutomationAccountName { get; set; } = null!;

        /// <summary>
        /// Name of an Azure Resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The schedule name.
        /// </summary>
        [Input("scheduleName", required: true)]
        public string ScheduleName { get; set; } = null!;

        public GetScheduleArgs()
        {
        }
        public static new GetScheduleArgs Empty => new GetScheduleArgs();
    }

    public sealed class GetScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the automation account.
        /// </summary>
        [Input("automationAccountName", required: true)]
        public Input<string> AutomationAccountName { get; set; } = null!;

        /// <summary>
        /// Name of an Azure Resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The schedule name.
        /// </summary>
        [Input("scheduleName", required: true)]
        public Input<string> ScheduleName { get; set; } = null!;

        public GetScheduleInvokeArgs()
        {
        }
        public static new GetScheduleInvokeArgs Empty => new GetScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduleResult
    {
        /// <summary>
        /// Gets or sets the advanced schedule.
        /// </summary>
        public readonly Outputs.AdvancedScheduleResponse? AdvancedSchedule;
        /// <summary>
        /// Gets or sets the creation time.
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Gets or sets the end time of the schedule.
        /// </summary>
        public readonly string? ExpiryTime;
        /// <summary>
        /// Gets or sets the expiry time's offset in minutes.
        /// </summary>
        public readonly double? ExpiryTimeOffsetMinutes;
        /// <summary>
        /// Gets or sets the frequency of the schedule.
        /// </summary>
        public readonly string? Frequency;
        /// <summary>
        /// Fully qualified resource Id for the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets or sets the interval of the schedule.
        /// </summary>
        public readonly object? Interval;
        /// <summary>
        /// Gets or sets a value indicating whether this schedule is enabled.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// Gets or sets the last modified time.
        /// </summary>
        public readonly string? LastModifiedTime;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets or sets the next run time of the schedule.
        /// </summary>
        public readonly string? NextRun;
        /// <summary>
        /// Gets or sets the next run time's offset in minutes.
        /// </summary>
        public readonly double? NextRunOffsetMinutes;
        /// <summary>
        /// Gets or sets the start time of the schedule.
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// Gets the start time's offset in minutes.
        /// </summary>
        public readonly double StartTimeOffsetMinutes;
        /// <summary>
        /// Gets or sets the time zone of the schedule.
        /// </summary>
        public readonly string? TimeZone;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScheduleResult(
            Outputs.AdvancedScheduleResponse? advancedSchedule,

            string? creationTime,

            string? description,

            string? expiryTime,

            double? expiryTimeOffsetMinutes,

            string? frequency,

            string id,

            object? interval,

            bool? isEnabled,

            string? lastModifiedTime,

            string name,

            string? nextRun,

            double? nextRunOffsetMinutes,

            string? startTime,

            double startTimeOffsetMinutes,

            string? timeZone,

            string type)
        {
            AdvancedSchedule = advancedSchedule;
            CreationTime = creationTime;
            Description = description;
            ExpiryTime = expiryTime;
            ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutes;
            Frequency = frequency;
            Id = id;
            Interval = interval;
            IsEnabled = isEnabled;
            LastModifiedTime = lastModifiedTime;
            Name = name;
            NextRun = nextRun;
            NextRunOffsetMinutes = nextRunOffsetMinutes;
            StartTime = startTime;
            StartTimeOffsetMinutes = startTimeOffsetMinutes;
            TimeZone = timeZone;
            Type = type;
        }
    }
}
