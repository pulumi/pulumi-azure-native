// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.CertificateRegistration.V20190801.Outputs
{

    [OutputType]
    public sealed class AppServiceCertificateOrderResponsePropertiesResult
    {
        /// <summary>
        /// Reasons why App Service Certificate is not renewable at the current moment.
        /// </summary>
        public readonly ImmutableArray<string> AppServiceCertificateNotRenewableReasons;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool? AutoRenew;
        /// <summary>
        /// State of the Key Vault secret.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Certificates;
        /// <summary>
        /// Last CSR that was created for this order.
        /// </summary>
        public readonly string? Csr;
        /// <summary>
        /// Certificate distinguished name.
        /// </summary>
        public readonly string? DistinguishedName;
        /// <summary>
        /// Domain verification token.
        /// </summary>
        public readonly string DomainVerificationToken;
        /// <summary>
        /// Certificate expiration time.
        /// </summary>
        public readonly string ExpirationTime;
        /// <summary>
        /// Intermediate certificate.
        /// </summary>
        public readonly Outputs.CertificateDetailsResponseResult Intermediate;
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        public readonly bool IsPrivateKeyExternal;
        /// <summary>
        /// Certificate key size.
        /// </summary>
        public readonly int? KeySize;
        /// <summary>
        /// Certificate last issuance time.
        /// </summary>
        public readonly string LastCertificateIssuanceTime;
        /// <summary>
        /// Time stamp when the certificate would be auto renewed next
        /// </summary>
        public readonly string NextAutoRenewalTimeStamp;
        /// <summary>
        /// Certificate product type.
        /// </summary>
        public readonly string ProductType;
        /// <summary>
        /// Status of certificate order.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Root certificate.
        /// </summary>
        public readonly Outputs.CertificateDetailsResponseResult Root;
        /// <summary>
        /// Current serial number of the certificate.
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// Signed certificate.
        /// </summary>
        public readonly Outputs.CertificateDetailsResponseResult SignedCertificate;
        /// <summary>
        /// Current order status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Duration in years (must be between 1 and 3).
        /// </summary>
        public readonly int? ValidityInYears;

        [OutputConstructor]
        private AppServiceCertificateOrderResponsePropertiesResult(
            ImmutableArray<string> appServiceCertificateNotRenewableReasons,

            bool? autoRenew,

            ImmutableDictionary<string, string>? certificates,

            string? csr,

            string? distinguishedName,

            string domainVerificationToken,

            string expirationTime,

            Outputs.CertificateDetailsResponseResult intermediate,

            bool isPrivateKeyExternal,

            int? keySize,

            string lastCertificateIssuanceTime,

            string nextAutoRenewalTimeStamp,

            string productType,

            string provisioningState,

            Outputs.CertificateDetailsResponseResult root,

            string serialNumber,

            Outputs.CertificateDetailsResponseResult signedCertificate,

            string status,

            int? validityInYears)
        {
            AppServiceCertificateNotRenewableReasons = appServiceCertificateNotRenewableReasons;
            AutoRenew = autoRenew;
            Certificates = certificates;
            Csr = csr;
            DistinguishedName = distinguishedName;
            DomainVerificationToken = domainVerificationToken;
            ExpirationTime = expirationTime;
            Intermediate = intermediate;
            IsPrivateKeyExternal = isPrivateKeyExternal;
            KeySize = keySize;
            LastCertificateIssuanceTime = lastCertificateIssuanceTime;
            NextAutoRenewalTimeStamp = nextAutoRenewalTimeStamp;
            ProductType = productType;
            ProvisioningState = provisioningState;
            Root = root;
            SerialNumber = serialNumber;
            SignedCertificate = signedCertificate;
            Status = status;
            ValidityInYears = validityInYears;
        }
    }
}
