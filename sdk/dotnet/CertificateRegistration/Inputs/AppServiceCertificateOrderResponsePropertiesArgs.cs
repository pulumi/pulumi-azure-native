// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.CertificateRegistration.Inputs
{

    /// <summary>
    /// AppServiceCertificateOrder resource specific properties
    /// </summary>
    public sealed class AppServiceCertificateOrderResponsePropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("appServiceCertificateNotRenewableReasons", required: true)]
        private InputList<string>? _appServiceCertificateNotRenewableReasons;

        /// <summary>
        /// Reasons why App Service Certificate is not renewable at the current moment.
        /// </summary>
        public InputList<string> AppServiceCertificateNotRenewableReasons
        {
            get => _appServiceCertificateNotRenewableReasons ?? (_appServiceCertificateNotRenewableReasons = new InputList<string>());
            set => _appServiceCertificateNotRenewableReasons = value;
        }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        [Input("certificates")]
        private InputMap<string>? _certificates;

        /// <summary>
        /// State of the Key Vault secret.
        /// </summary>
        public InputMap<string> Certificates
        {
            get => _certificates ?? (_certificates = new InputMap<string>());
            set => _certificates = value;
        }

        /// <summary>
        /// Last CSR that was created for this order.
        /// </summary>
        [Input("csr")]
        public Input<string>? Csr { get; set; }

        /// <summary>
        /// Certificate distinguished name.
        /// </summary>
        [Input("distinguishedName")]
        public Input<string>? DistinguishedName { get; set; }

        /// <summary>
        /// Domain verification token.
        /// </summary>
        [Input("domainVerificationToken", required: true)]
        public Input<string> DomainVerificationToken { get; set; } = null!;

        /// <summary>
        /// Certificate expiration time.
        /// </summary>
        [Input("expirationTime", required: true)]
        public Input<string> ExpirationTime { get; set; } = null!;

        /// <summary>
        /// Intermediate certificate.
        /// </summary>
        [Input("intermediate", required: true)]
        public Input<Inputs.CertificateDetailsResponseArgs> Intermediate { get; set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("isPrivateKeyExternal", required: true)]
        public Input<bool> IsPrivateKeyExternal { get; set; } = null!;

        /// <summary>
        /// Certificate key size.
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// Certificate last issuance time.
        /// </summary>
        [Input("lastCertificateIssuanceTime", required: true)]
        public Input<string> LastCertificateIssuanceTime { get; set; } = null!;

        /// <summary>
        /// Time stamp when the certificate would be auto renewed next
        /// </summary>
        [Input("nextAutoRenewalTimeStamp", required: true)]
        public Input<string> NextAutoRenewalTimeStamp { get; set; } = null!;

        /// <summary>
        /// Certificate product type.
        /// </summary>
        [Input("productType", required: true)]
        public Input<string> ProductType { get; set; } = null!;

        /// <summary>
        /// Status of certificate order.
        /// </summary>
        [Input("provisioningState", required: true)]
        public Input<string> ProvisioningState { get; set; } = null!;

        /// <summary>
        /// Root certificate.
        /// </summary>
        [Input("root", required: true)]
        public Input<Inputs.CertificateDetailsResponseArgs> Root { get; set; } = null!;

        /// <summary>
        /// Current serial number of the certificate.
        /// </summary>
        [Input("serialNumber", required: true)]
        public Input<string> SerialNumber { get; set; } = null!;

        /// <summary>
        /// Signed certificate.
        /// </summary>
        [Input("signedCertificate", required: true)]
        public Input<Inputs.CertificateDetailsResponseArgs> SignedCertificate { get; set; } = null!;

        /// <summary>
        /// Current order status.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// Duration in years (must be between 1 and 3).
        /// </summary>
        [Input("validityInYears")]
        public Input<int>? ValidityInYears { get; set; }

        public AppServiceCertificateOrderResponsePropertiesArgs()
        {
        }
    }
}
