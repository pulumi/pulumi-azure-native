// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.CertificateRegistration.V20150801
{
    public static class GetCertificateOrder
    {
        public static Task<GetCertificateOrderResult> InvokeAsync(GetCertificateOrderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateOrderResult>("azure-nextgen:certificateregistration/v20150801:getCertificateOrder", args ?? new GetCertificateOrderArgs(), options.WithVersion());
    }


    public sealed class GetCertificateOrderArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Certificate name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCertificateOrderArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateOrderResult
    {
        /// <summary>
        /// Auto renew
        /// </summary>
        public readonly bool? AutoRenew;
        /// <summary>
        /// State of the Key Vault secret
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.CertificateOrderCertificateResponse>? Certificates;
        /// <summary>
        /// Last CSR that was created for this order
        /// </summary>
        public readonly string? Csr;
        /// <summary>
        /// Certificate distinguished name
        /// </summary>
        public readonly string? DistinguishedName;
        /// <summary>
        /// Domain Verification Token
        /// </summary>
        public readonly string? DomainVerificationToken;
        /// <summary>
        /// Certificate expiration time
        /// </summary>
        public readonly string? ExpirationTime;
        /// <summary>
        /// Intermediate certificate
        /// </summary>
        public readonly Outputs.CertificateDetailsResponse? Intermediate;
        /// <summary>
        /// Certificate Key Size
        /// </summary>
        public readonly int? KeySize;
        /// <summary>
        /// Kind of resource
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Certificate last issuance time
        /// </summary>
        public readonly string? LastCertificateIssuanceTime;
        /// <summary>
        /// Resource Location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Certificate product type
        /// </summary>
        public readonly string? ProductType;
        /// <summary>
        /// Status of certificate order
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Root certificate
        /// </summary>
        public readonly Outputs.CertificateDetailsResponse? Root;
        /// <summary>
        /// Current serial number of the certificate
        /// </summary>
        public readonly string? SerialNumber;
        /// <summary>
        /// Signed certificate
        /// </summary>
        public readonly Outputs.CertificateDetailsResponse? SignedCertificate;
        /// <summary>
        /// Current order status
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Duration in years (must be between 1 and 3)
        /// </summary>
        public readonly int? ValidityInYears;

        [OutputConstructor]
        private GetCertificateOrderResult(
            bool? autoRenew,

            ImmutableDictionary<string, Outputs.CertificateOrderCertificateResponse>? certificates,

            string? csr,

            string? distinguishedName,

            string? domainVerificationToken,

            string? expirationTime,

            Outputs.CertificateDetailsResponse? intermediate,

            int? keySize,

            string? kind,

            string? lastCertificateIssuanceTime,

            string location,

            string? name,

            string? productType,

            string? provisioningState,

            Outputs.CertificateDetailsResponse? root,

            string? serialNumber,

            Outputs.CertificateDetailsResponse? signedCertificate,

            string? status,

            ImmutableDictionary<string, string>? tags,

            string? type,

            int? validityInYears)
        {
            AutoRenew = autoRenew;
            Certificates = certificates;
            Csr = csr;
            DistinguishedName = distinguishedName;
            DomainVerificationToken = domainVerificationToken;
            ExpirationTime = expirationTime;
            Intermediate = intermediate;
            KeySize = keySize;
            Kind = kind;
            LastCertificateIssuanceTime = lastCertificateIssuanceTime;
            Location = location;
            Name = name;
            ProductType = productType;
            ProvisioningState = provisioningState;
            Root = root;
            SerialNumber = serialNumber;
            SignedCertificate = signedCertificate;
            Status = status;
            Tags = tags;
            Type = type;
            ValidityInYears = validityInYears;
        }
    }
}
