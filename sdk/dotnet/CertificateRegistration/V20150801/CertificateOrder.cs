// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.CertificateRegistration.V20150801
{
    /// <summary>
    /// Certificate purchase order
    /// </summary>
    public partial class CertificateOrder : Pulumi.CustomResource
    {
        /// <summary>
        /// Auto renew
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// State of the Key Vault secret
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableDictionary<string, Outputs.CertificateOrderCertificateResponse>?> Certificates { get; private set; } = null!;

        /// <summary>
        /// Last CSR that was created for this order
        /// </summary>
        [Output("csr")]
        public Output<string?> Csr { get; private set; } = null!;

        /// <summary>
        /// Certificate distinguished name
        /// </summary>
        [Output("distinguishedName")]
        public Output<string?> DistinguishedName { get; private set; } = null!;

        /// <summary>
        /// Domain Verification Token
        /// </summary>
        [Output("domainVerificationToken")]
        public Output<string?> DomainVerificationToken { get; private set; } = null!;

        /// <summary>
        /// Certificate expiration time
        /// </summary>
        [Output("expirationTime")]
        public Output<string?> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Intermediate certificate
        /// </summary>
        [Output("intermediate")]
        public Output<Outputs.CertificateDetailsResponse?> Intermediate { get; private set; } = null!;

        /// <summary>
        /// Certificate Key Size
        /// </summary>
        [Output("keySize")]
        public Output<int?> KeySize { get; private set; } = null!;

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Certificate last issuance time
        /// </summary>
        [Output("lastCertificateIssuanceTime")]
        public Output<string?> LastCertificateIssuanceTime { get; private set; } = null!;

        /// <summary>
        /// Resource Location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Certificate product type
        /// </summary>
        [Output("productType")]
        public Output<string?> ProductType { get; private set; } = null!;

        /// <summary>
        /// Status of certificate order
        /// </summary>
        [Output("provisioningState")]
        public Output<string?> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Root certificate
        /// </summary>
        [Output("root")]
        public Output<Outputs.CertificateDetailsResponse?> Root { get; private set; } = null!;

        /// <summary>
        /// Current serial number of the certificate
        /// </summary>
        [Output("serialNumber")]
        public Output<string?> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// Signed certificate
        /// </summary>
        [Output("signedCertificate")]
        public Output<Outputs.CertificateDetailsResponse?> SignedCertificate { get; private set; } = null!;

        /// <summary>
        /// Current order status
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Duration in years (must be between 1 and 3)
        /// </summary>
        [Output("validityInYears")]
        public Output<int?> ValidityInYears { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateOrder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateOrder(string name, CertificateOrderArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:certificateregistration/v20150801:CertificateOrder", name, args ?? new CertificateOrderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateOrder(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:certificateregistration/v20150801:CertificateOrder", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:certificateregistration/latest:CertificateOrder"},
                    new Pulumi.Alias { Type = "azure-nextgen:certificateregistration/v20180201:CertificateOrder"},
                    new Pulumi.Alias { Type = "azure-nextgen:certificateregistration/v20190801:CertificateOrder"},
                    new Pulumi.Alias { Type = "azure-nextgen:certificateregistration/v20200601:CertificateOrder"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateOrder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateOrder Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CertificateOrder(name, id, options);
        }
    }

    public sealed class CertificateOrderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auto renew
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        [Input("certificates")]
        private InputMap<Inputs.CertificateOrderCertificateArgs>? _certificates;

        /// <summary>
        /// State of the Key Vault secret
        /// </summary>
        public InputMap<Inputs.CertificateOrderCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputMap<Inputs.CertificateOrderCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Last CSR that was created for this order
        /// </summary>
        [Input("csr")]
        public Input<string>? Csr { get; set; }

        /// <summary>
        /// Certificate distinguished name
        /// </summary>
        [Input("distinguishedName")]
        public Input<string>? DistinguishedName { get; set; }

        /// <summary>
        /// Domain Verification Token
        /// </summary>
        [Input("domainVerificationToken")]
        public Input<string>? DomainVerificationToken { get; set; }

        /// <summary>
        /// Certificate expiration time
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Intermediate certificate
        /// </summary>
        [Input("intermediate")]
        public Input<Inputs.CertificateDetailsArgs>? Intermediate { get; set; }

        /// <summary>
        /// Certificate Key Size
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Certificate last issuance time
        /// </summary>
        [Input("lastCertificateIssuanceTime")]
        public Input<string>? LastCertificateIssuanceTime { get; set; }

        /// <summary>
        /// Resource Location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Certificate product type
        /// </summary>
        [Input("productType")]
        public Input<string>? ProductType { get; set; }

        /// <summary>
        /// Status of certificate order
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// Azure resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Root certificate
        /// </summary>
        [Input("root")]
        public Input<Inputs.CertificateDetailsArgs>? Root { get; set; }

        /// <summary>
        /// Current serial number of the certificate
        /// </summary>
        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        /// <summary>
        /// Signed certificate
        /// </summary>
        [Input("signedCertificate")]
        public Input<Inputs.CertificateDetailsArgs>? SignedCertificate { get; set; }

        /// <summary>
        /// Current order status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Resource type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Duration in years (must be between 1 and 3)
        /// </summary>
        [Input("validityInYears")]
        public Input<int>? ValidityInYears { get; set; }

        public CertificateOrderArgs()
        {
        }
    }
}
