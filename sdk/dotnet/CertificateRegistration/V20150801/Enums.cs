// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.CertificateRegistration.V20150801
{
    /// <summary>
    /// Current order status
    /// </summary>
    [EnumType]
    public readonly struct CertificateOrderStatus : IEquatable<CertificateOrderStatus>
    {
        private readonly string _value;

        private CertificateOrderStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateOrderStatus Pendingissuance { get; } = new CertificateOrderStatus("Pendingissuance");
        public static CertificateOrderStatus Issued { get; } = new CertificateOrderStatus("Issued");
        public static CertificateOrderStatus Revoked { get; } = new CertificateOrderStatus("Revoked");
        public static CertificateOrderStatus Canceled { get; } = new CertificateOrderStatus("Canceled");
        public static CertificateOrderStatus Denied { get; } = new CertificateOrderStatus("Denied");
        public static CertificateOrderStatus Pendingrevocation { get; } = new CertificateOrderStatus("Pendingrevocation");
        public static CertificateOrderStatus PendingRekey { get; } = new CertificateOrderStatus("PendingRekey");
        public static CertificateOrderStatus Unused { get; } = new CertificateOrderStatus("Unused");
        public static CertificateOrderStatus Expired { get; } = new CertificateOrderStatus("Expired");
        public static CertificateOrderStatus NotSubmitted { get; } = new CertificateOrderStatus("NotSubmitted");

        public static bool operator ==(CertificateOrderStatus left, CertificateOrderStatus right) => left.Equals(right);
        public static bool operator !=(CertificateOrderStatus left, CertificateOrderStatus right) => !left.Equals(right);

        public static explicit operator string(CertificateOrderStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateOrderStatus other && Equals(other);
        public bool Equals(CertificateOrderStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Certificate product type
    /// </summary>
    [EnumType]
    public readonly struct CertificateProductType : IEquatable<CertificateProductType>
    {
        private readonly string _value;

        private CertificateProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateProductType StandardDomainValidatedSsl { get; } = new CertificateProductType("StandardDomainValidatedSsl");
        public static CertificateProductType StandardDomainValidatedWildCardSsl { get; } = new CertificateProductType("StandardDomainValidatedWildCardSsl");

        public static bool operator ==(CertificateProductType left, CertificateProductType right) => left.Equals(right);
        public static bool operator !=(CertificateProductType left, CertificateProductType right) => !left.Equals(right);

        public static explicit operator string(CertificateProductType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateProductType other && Equals(other);
        public bool Equals(CertificateProductType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the Key Vault secret
    /// </summary>
    [EnumType]
    public readonly struct KeyVaultSecretStatus : IEquatable<KeyVaultSecretStatus>
    {
        private readonly string _value;

        private KeyVaultSecretStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyVaultSecretStatus Initialized { get; } = new KeyVaultSecretStatus("Initialized");
        public static KeyVaultSecretStatus WaitingOnCertificateOrder { get; } = new KeyVaultSecretStatus("WaitingOnCertificateOrder");
        public static KeyVaultSecretStatus Succeeded { get; } = new KeyVaultSecretStatus("Succeeded");
        public static KeyVaultSecretStatus CertificateOrderFailed { get; } = new KeyVaultSecretStatus("CertificateOrderFailed");
        public static KeyVaultSecretStatus OperationNotPermittedOnKeyVault { get; } = new KeyVaultSecretStatus("OperationNotPermittedOnKeyVault");
        public static KeyVaultSecretStatus AzureServiceUnauthorizedToAccessKeyVault { get; } = new KeyVaultSecretStatus("AzureServiceUnauthorizedToAccessKeyVault");
        public static KeyVaultSecretStatus KeyVaultDoesNotExist { get; } = new KeyVaultSecretStatus("KeyVaultDoesNotExist");
        public static KeyVaultSecretStatus KeyVaultSecretDoesNotExist { get; } = new KeyVaultSecretStatus("KeyVaultSecretDoesNotExist");
        public static KeyVaultSecretStatus UnknownError { get; } = new KeyVaultSecretStatus("UnknownError");
        public static KeyVaultSecretStatus Unknown { get; } = new KeyVaultSecretStatus("Unknown");

        public static bool operator ==(KeyVaultSecretStatus left, KeyVaultSecretStatus right) => left.Equals(right);
        public static bool operator !=(KeyVaultSecretStatus left, KeyVaultSecretStatus right) => !left.Equals(right);

        public static explicit operator string(KeyVaultSecretStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyVaultSecretStatus other && Equals(other);
        public bool Equals(KeyVaultSecretStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of certificate order
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState InProgress { get; } = new ProvisioningState("InProgress");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
