// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OffAzure.V20230606
{
    /// <summary>
    /// A MasterSite
    /// </summary>
    [AzureNativeResourceType("azure-native:offazure/v20230606:MasterSitesController")]
    public partial class MasterSitesController : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets a value indicating whether multiple sites per site type are
        /// allowed.
        /// </summary>
        [Output("allowMultipleSites")]
        public Output<bool?> AllowMultipleSites { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a value for customer storage account ARM id.
        /// </summary>
        [Output("customerStorageAccountArmId")]
        public Output<string?> CustomerStorageAccountArmId { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets the nested sites under Master Site.
        /// </summary>
        [Output("nestedSites")]
        public Output<ImmutableArray<string>> NestedSites { get; private set; } = null!;

        /// <summary>
        /// Gets the private endpoint connections.
        /// </summary>
        [Output("privateEndpointConnections")]
        public Output<ImmutableArray<Outputs.PrivateEndpointConnectionResponse>> PrivateEndpointConnections { get; private set; } = null!;

        /// <summary>
        /// provisioning state enum
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the state of public network access.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the sites that are a part of Master Site.
        ///             The key
        /// should contain the Site ARM name.
        /// </summary>
        [Output("sites")]
        public Output<ImmutableArray<string>> Sites { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MasterSitesController resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MasterSitesController(string name, MasterSitesControllerArgs args, CustomResourceOptions? options = null)
            : base("azure-native:offazure/v20230606:MasterSitesController", name, args ?? new MasterSitesControllerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MasterSitesController(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:offazure/v20230606:MasterSitesController", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:offazure:MasterSitesController" },
                    new global::Pulumi.Alias { Type = "azure-native:offazure/v20200707:MasterSitesController" },
                    new global::Pulumi.Alias { Type = "azure-native:offazure/v20231001preview:MasterSitesController" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MasterSitesController resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MasterSitesController Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MasterSitesController(name, id, options);
        }
    }

    public sealed class MasterSitesControllerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Gets or sets a value indicating whether multiple sites per site type are
        /// allowed.
        /// </summary>
        [Input("allowMultipleSites")]
        public Input<bool>? AllowMultipleSites { get; set; }

        /// <summary>
        /// Gets or sets a value for customer storage account ARM id.
        /// </summary>
        [Input("customerStorageAccountArmId")]
        public Input<string>? CustomerStorageAccountArmId { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Gets or sets the state of public network access.
        /// </summary>
        [Input("publicNetworkAccess")]
        public InputUnion<string, Pulumi.AzureNative.OffAzure.V20230606.MasterSitePropertiesPublicNetworkAccess>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName")]
        public Input<string>? SiteName { get; set; }

        [Input("sites")]
        private InputList<string>? _sites;

        /// <summary>
        /// Gets or sets the sites that are a part of Master Site.
        ///             The key
        /// should contain the Site ARM name.
        /// </summary>
        public InputList<string> Sites
        {
            get => _sites ?? (_sites = new InputList<string>());
            set => _sites = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MasterSitesControllerArgs()
        {
        }
        public static new MasterSitesControllerArgs Empty => new MasterSitesControllerArgs();
    }
}
