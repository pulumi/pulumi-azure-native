// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OffAzure
{
    public static class GetVcenterController
    {
        /// <summary>
        /// Get a Vcenter
        /// Azure REST API version: 2023-06-06.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Task<GetVcenterControllerResult> InvokeAsync(GetVcenterControllerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVcenterControllerResult>("azure-native:offazure:getVcenterController", args ?? new GetVcenterControllerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a Vcenter
        /// Azure REST API version: 2023-06-06.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Output<GetVcenterControllerResult> Invoke(GetVcenterControllerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVcenterControllerResult>("azure-native:offazure:getVcenterController", args ?? new GetVcenterControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVcenterControllerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public string SiteName { get; set; } = null!;

        /// <summary>
        ///  VCenters name
        /// </summary>
        [Input("vcenterName", required: true)]
        public string VcenterName { get; set; } = null!;

        public GetVcenterControllerArgs()
        {
        }
        public static new GetVcenterControllerArgs Empty => new GetVcenterControllerArgs();
    }

    public sealed class GetVcenterControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public Input<string> SiteName { get; set; } = null!;

        /// <summary>
        ///  VCenters name
        /// </summary>
        [Input("vcenterName", required: true)]
        public Input<string> VcenterName { get; set; } = null!;

        public GetVcenterControllerInvokeArgs()
        {
        }
        public static new GetVcenterControllerInvokeArgs Empty => new GetVcenterControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetVcenterControllerResult
    {
        /// <summary>
        /// Gets the timestamp marking vCenter creation.
        /// </summary>
        public readonly string CreatedTimestamp;
        /// <summary>
        /// Gets the errors.
        /// </summary>
        public readonly ImmutableArray<Outputs.HealthErrorDetailsResponse> Errors;
        /// <summary>
        /// Gets or sets the FQDN/IPAddress of the vCenter.
        /// </summary>
        public readonly string? Fqdn;
        /// <summary>
        /// Gets or sets the friendly name of the vCenter.
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets the instance UUID of the vCenter.
        /// </summary>
        public readonly string InstanceUuid;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the performance statistics enabled on the vCenter.
        /// </summary>
        public readonly string PerfStatisticsLevel;
        /// <summary>
        /// Gets or sets the port of the vCenter.
        /// </summary>
        public readonly string? Port;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// Gets or sets the run as account ID of the vCenter.
        /// </summary>
        public readonly string? RunAsAccountId;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Gets the timestamp marking last updated on the vCenter.
        /// </summary>
        public readonly string UpdatedTimestamp;
        /// <summary>
        /// Gets the version of the vCenter.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetVcenterControllerResult(
            string createdTimestamp,

            ImmutableArray<Outputs.HealthErrorDetailsResponse> errors,

            string? fqdn,

            string? friendlyName,

            string id,

            string instanceUuid,

            string name,

            string perfStatisticsLevel,

            string? port,

            string? provisioningState,

            string? runAsAccountId,

            Outputs.SystemDataResponse systemData,

            string type,

            string updatedTimestamp,

            string version)
        {
            CreatedTimestamp = createdTimestamp;
            Errors = errors;
            Fqdn = fqdn;
            FriendlyName = friendlyName;
            Id = id;
            InstanceUuid = instanceUuid;
            Name = name;
            PerfStatisticsLevel = perfStatisticsLevel;
            Port = port;
            ProvisioningState = provisioningState;
            RunAsAccountId = runAsAccountId;
            SystemData = systemData;
            Type = type;
            UpdatedTimestamp = updatedTimestamp;
            Version = version;
        }
    }
}
