// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OffAzure
{
    public static class GetMasterSitesController
    {
        /// <summary>
        /// Get a MasterSite
        /// Azure REST API version: 2023-06-06.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Task<GetMasterSitesControllerResult> InvokeAsync(GetMasterSitesControllerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMasterSitesControllerResult>("azure-native:offazure:getMasterSitesController", args ?? new GetMasterSitesControllerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a MasterSite
        /// Azure REST API version: 2023-06-06.
        /// 
        /// Other available API versions: 2023-10-01-preview.
        /// </summary>
        public static Output<GetMasterSitesControllerResult> Invoke(GetMasterSitesControllerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMasterSitesControllerResult>("azure-native:offazure:getMasterSitesController", args ?? new GetMasterSitesControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMasterSitesControllerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public string SiteName { get; set; } = null!;

        public GetMasterSitesControllerArgs()
        {
        }
        public static new GetMasterSitesControllerArgs Empty => new GetMasterSitesControllerArgs();
    }

    public sealed class GetMasterSitesControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public Input<string> SiteName { get; set; } = null!;

        public GetMasterSitesControllerInvokeArgs()
        {
        }
        public static new GetMasterSitesControllerInvokeArgs Empty => new GetMasterSitesControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetMasterSitesControllerResult
    {
        /// <summary>
        /// Gets or sets a value indicating whether multiple sites per site type are
        /// allowed.
        /// </summary>
        public readonly bool? AllowMultipleSites;
        /// <summary>
        /// Gets or sets a value for customer storage account ARM id.
        /// </summary>
        public readonly string? CustomerStorageAccountArmId;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the nested sites under Master Site.
        /// </summary>
        public readonly ImmutableArray<string> NestedSites;
        /// <summary>
        /// Gets the private endpoint connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.PrivateEndpointConnectionResponse> PrivateEndpointConnections;
        /// <summary>
        /// provisioning state enum
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets or sets the state of public network access.
        /// </summary>
        public readonly string? PublicNetworkAccess;
        /// <summary>
        /// Gets or sets the sites that are a part of Master Site.
        ///             The key
        /// should contain the Site ARM name.
        /// </summary>
        public readonly ImmutableArray<string> Sites;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMasterSitesControllerResult(
            bool? allowMultipleSites,

            string? customerStorageAccountArmId,

            string id,

            string location,

            string name,

            ImmutableArray<string> nestedSites,

            ImmutableArray<Outputs.PrivateEndpointConnectionResponse> privateEndpointConnections,

            string provisioningState,

            string? publicNetworkAccess,

            ImmutableArray<string> sites,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AllowMultipleSites = allowMultipleSites;
            CustomerStorageAccountArmId = customerStorageAccountArmId;
            Id = id;
            Location = location;
            Name = name;
            NestedSites = nestedSites;
            PrivateEndpointConnections = privateEndpointConnections;
            ProvisioningState = provisioningState;
            PublicNetworkAccess = publicNetworkAccess;
            Sites = sites;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
