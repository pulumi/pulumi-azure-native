// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.OffAzure.V20231001Preview
{
    public static class GetSitesController
    {
        /// <summary>
        /// Get a VmwareSite
        /// </summary>
        public static Task<GetSitesControllerResult> InvokeAsync(GetSitesControllerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSitesControllerResult>("azure-native:offazure/v20231001preview:getSitesController", args ?? new GetSitesControllerArgs(), options.WithDefaults());

        /// <summary>
        /// Get a VmwareSite
        /// </summary>
        public static Output<GetSitesControllerResult> Invoke(GetSitesControllerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSitesControllerResult>("azure-native:offazure/v20231001preview:getSitesController", args ?? new GetSitesControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSitesControllerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public string SiteName { get; set; } = null!;

        public GetSitesControllerArgs()
        {
        }
        public static new GetSitesControllerArgs Empty => new GetSitesControllerArgs();
    }

    public sealed class GetSitesControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Site name
        /// </summary>
        [Input("siteName", required: true)]
        public Input<string> SiteName { get; set; } = null!;

        public GetSitesControllerInvokeArgs()
        {
        }
        public static new GetSitesControllerInvokeArgs Empty => new GetSitesControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetSitesControllerResult
    {
        /// <summary>
        /// Gets or sets the on-premises agent details.
        /// </summary>
        public readonly Outputs.SiteAgentPropertiesResponse? AgentDetails;
        /// <summary>
        /// Gets or sets the Appliance Name.
        /// </summary>
        public readonly string? ApplianceName;
        /// <summary>
        /// Gets or sets the ARM ID of migration hub solution for SDS.
        /// </summary>
        public readonly string? DiscoverySolutionId;
        /// <summary>
        /// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
        /// </summary>
        public readonly string ETag;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Gets the Master Site this site is linked to.
        /// </summary>
        public readonly string MasterSiteId;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Gets the service endpoint.
        /// </summary>
        public readonly string ServiceEndpoint;
        /// <summary>
        /// Gets or sets the service principal identity details used by agent for
        /// communication
        ///             to the service.
        /// </summary>
        public readonly Outputs.SiteSpnPropertiesResponse? ServicePrincipalIdentityDetails;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSitesControllerResult(
            Outputs.SiteAgentPropertiesResponse? agentDetails,

            string? applianceName,

            string? discoverySolutionId,

            string eTag,

            string id,

            string location,

            string masterSiteId,

            string name,

            string provisioningState,

            string serviceEndpoint,

            Outputs.SiteSpnPropertiesResponse? servicePrincipalIdentityDetails,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AgentDetails = agentDetails;
            ApplianceName = applianceName;
            DiscoverySolutionId = discoverySolutionId;
            ETag = eTag;
            Id = id;
            Location = location;
            MasterSiteId = masterSiteId;
            Name = name;
            ProvisioningState = provisioningState;
            ServiceEndpoint = serviceEndpoint;
            ServicePrincipalIdentityDetails = servicePrincipalIdentityDetails;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
