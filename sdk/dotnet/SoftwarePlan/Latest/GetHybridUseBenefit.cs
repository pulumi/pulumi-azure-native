// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.SoftwarePlan.Latest
{
    public static class GetHybridUseBenefit
    {
        public static Task<GetHybridUseBenefitResult> InvokeAsync(GetHybridUseBenefitArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHybridUseBenefitResult>("azure-nextgen:softwareplan/latest:getHybridUseBenefit", args ?? new GetHybridUseBenefitArgs(), options.WithVersion());
    }


    public sealed class GetHybridUseBenefitArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// This is a unique identifier for a plan. Should be a guid.
        /// </summary>
        [Input("planId", required: true)]
        public string PlanId { get; set; } = null!;

        /// <summary>
        /// The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
        /// </summary>
        [Input("scope", required: true)]
        public string Scope { get; set; } = null!;

        public GetHybridUseBenefitArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHybridUseBenefitResult
    {
        /// <summary>
        /// Created date
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Indicates the revision of the hybrid use benefit
        /// </summary>
        public readonly int Etag;
        /// <summary>
        /// Last updated date
        /// </summary>
        public readonly string LastUpdatedDate;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Hybrid use benefit SKU
        /// </summary>
        public readonly Outputs.SkuResponse Sku;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetHybridUseBenefitResult(
            string createdDate,

            int etag,

            string lastUpdatedDate,

            string name,

            string provisioningState,

            Outputs.SkuResponse sku,

            string type)
        {
            CreatedDate = createdDate;
            Etag = etag;
            LastUpdatedDate = lastUpdatedDate;
            Name = name;
            ProvisioningState = provisioningState;
            Sku = sku;
            Type = type;
        }
    }
}
