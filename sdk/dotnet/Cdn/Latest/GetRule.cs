// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Cdn.Latest
{
    [Obsolete(@"The 'latest' version is deprecated. Please migrate to the function in the top-level module: 'azure-nextgen:cdn:getRule'.")]
    public static class GetRule
    {
        /// <summary>
        /// Friendly Rules name mapping to the any Rules or secret related information.
        /// Latest API Version: 2020-09-01.
        /// </summary>
        public static Task<GetRuleResult> InvokeAsync(GetRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRuleResult>("azure-nextgen:cdn/latest:getRule", args ?? new GetRuleArgs(), options.WithVersion());
    }


    public sealed class GetRuleArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the CDN profile which is unique within the resource group.
        /// </summary>
        [Input("profileName", required: true)]
        public string ProfileName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the delivery rule which is unique within the endpoint.
        /// </summary>
        [Input("ruleName", required: true)]
        public string RuleName { get; set; } = null!;

        /// <summary>
        /// Name of the rule set under the profile.
        /// </summary>
        [Input("ruleSetName", required: true)]
        public string RuleSetName { get; set; } = null!;

        public GetRuleArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRuleResult
    {
        /// <summary>
        /// A list of actions that are executed when all the conditions of a rule are satisfied.
        /// </summary>
        public readonly ImmutableArray<object> Actions;
        /// <summary>
        /// A list of conditions that must be matched for the actions to be executed
        /// </summary>
        public readonly ImmutableArray<object> Conditions;
        public readonly string DeploymentStatus;
        /// <summary>
        /// Resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
        /// </summary>
        public readonly string? MatchProcessingBehavior;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
        /// </summary>
        public readonly int Order;
        /// <summary>
        /// Provisioning status
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Read only system data
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRuleResult(
            ImmutableArray<object> actions,

            ImmutableArray<object> conditions,

            string deploymentStatus,

            string id,

            string? matchProcessingBehavior,

            string name,

            int order,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            Actions = actions;
            Conditions = conditions;
            DeploymentStatus = deploymentStatus;
            Id = id;
            MatchProcessingBehavior = matchProcessingBehavior;
            Name = name;
            Order = order;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
