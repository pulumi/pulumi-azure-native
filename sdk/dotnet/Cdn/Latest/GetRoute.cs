// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Cdn.Latest
{
    public static class GetRoute
    {
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("azure-nextgen:cdn/latest:getRoute", args ?? new GetRouteArgs(), options.WithVersion());
    }


    public sealed class GetRouteArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the endpoint under the profile which is unique globally.
        /// </summary>
        [Input("endpointName", required: true)]
        public string EndpointName { get; set; } = null!;

        /// <summary>
        /// Name of the CDN profile which is unique within the resource group.
        /// </summary>
        [Input("profileName", required: true)]
        public string ProfileName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the routing rule.
        /// </summary>
        [Input("routeName", required: true)]
        public string RouteName { get; set; } = null!;

        public GetRouteArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        /// <summary>
        /// compression settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.CompressionSettingsResponse> CompressionSettings;
        /// <summary>
        /// Domains referenced by this endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceResponse> CustomDomains;
        public readonly string DeploymentStatus;
        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        public readonly string? EnabledState;
        /// <summary>
        /// Protocol this rule will use when forwarding traffic to backends.
        /// </summary>
        public readonly string? ForwardingProtocol;
        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
        /// </summary>
        public readonly string? HttpsRedirect;
        /// <summary>
        /// whether this route will be linked to the default endpoint domain.
        /// </summary>
        public readonly string? LinkToDefaultDomain;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specifies what scenario the customer wants this AzureFrontDoor endpoint to optimize for, e.g. Download, Media services. With this information, AzureFrontDoor can apply scenario driven optimization.
        /// </summary>
        public readonly string? OptimizationType;
        /// <summary>
        /// A reference to the origin group.
        /// </summary>
        public readonly Outputs.ResourceReferenceResponse OriginGroup;
        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        public readonly string? OriginPath;
        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        public readonly ImmutableArray<string> PatternsToMatch;
        /// <summary>
        /// Provisioning status
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Defines how AzureFrontDoor caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
        /// </summary>
        public readonly string? QueryStringCachingBehavior;
        /// <summary>
        /// rule sets referenced by this endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceResponse> RuleSets;
        /// <summary>
        /// List of supported protocols for this route.
        /// </summary>
        public readonly ImmutableArray<string> SupportedProtocols;
        /// <summary>
        /// Read only system data
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRouteResult(
            ImmutableArray<Outputs.CompressionSettingsResponse> compressionSettings,

            ImmutableArray<Outputs.ResourceReferenceResponse> customDomains,

            string deploymentStatus,

            string? enabledState,

            string? forwardingProtocol,

            string? httpsRedirect,

            string? linkToDefaultDomain,

            string name,

            string? optimizationType,

            Outputs.ResourceReferenceResponse originGroup,

            string? originPath,

            ImmutableArray<string> patternsToMatch,

            string provisioningState,

            string? queryStringCachingBehavior,

            ImmutableArray<Outputs.ResourceReferenceResponse> ruleSets,

            ImmutableArray<string> supportedProtocols,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            CompressionSettings = compressionSettings;
            CustomDomains = customDomains;
            DeploymentStatus = deploymentStatus;
            EnabledState = enabledState;
            ForwardingProtocol = forwardingProtocol;
            HttpsRedirect = httpsRedirect;
            LinkToDefaultDomain = linkToDefaultDomain;
            Name = name;
            OptimizationType = optimizationType;
            OriginGroup = originGroup;
            OriginPath = originPath;
            PatternsToMatch = patternsToMatch;
            ProvisioningState = provisioningState;
            QueryStringCachingBehavior = queryStringCachingBehavior;
            RuleSets = ruleSets;
            SupportedProtocols = supportedProtocols;
            SystemData = systemData;
            Type = type;
        }
    }
}
