// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Cdn.V20240722Preview
{
    /// <summary>
    /// The active state
    /// </summary>
    [EnumType]
    public readonly struct EdgeActionIsDefaultVersion : IEquatable<EdgeActionIsDefaultVersion>
    {
        private readonly string _value;

        private EdgeActionIsDefaultVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EdgeActionIsDefaultVersion True { get; } = new EdgeActionIsDefaultVersion("True");
        public static EdgeActionIsDefaultVersion False { get; } = new EdgeActionIsDefaultVersion("False");

        public static bool operator ==(EdgeActionIsDefaultVersion left, EdgeActionIsDefaultVersion right) => left.Equals(right);
        public static bool operator !=(EdgeActionIsDefaultVersion left, EdgeActionIsDefaultVersion right) => !left.Equals(right);

        public static explicit operator string(EdgeActionIsDefaultVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EdgeActionIsDefaultVersion other && Equals(other);
        public bool Equals(EdgeActionIsDefaultVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type
    /// </summary>
    [EnumType]
    public readonly struct EdgeActionVersionDeploymentType : IEquatable<EdgeActionVersionDeploymentType>
    {
        private readonly string _value;

        private EdgeActionVersionDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EdgeActionVersionDeploymentType Zip { get; } = new EdgeActionVersionDeploymentType("zip");
        public static EdgeActionVersionDeploymentType File { get; } = new EdgeActionVersionDeploymentType("file");
        public static EdgeActionVersionDeploymentType Others { get; } = new EdgeActionVersionDeploymentType("others");

        public static bool operator ==(EdgeActionVersionDeploymentType left, EdgeActionVersionDeploymentType right) => left.Equals(right);
        public static bool operator !=(EdgeActionVersionDeploymentType left, EdgeActionVersionDeploymentType right) => !left.Equals(right);

        public static explicit operator string(EdgeActionVersionDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EdgeActionVersionDeploymentType other && Equals(other);
        public bool Equals(EdgeActionVersionDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
