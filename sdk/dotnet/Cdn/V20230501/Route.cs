// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cdn.V20230501
{
    /// <summary>
    /// Friendly Routes name mapping to the any Routes or secret related information.
    /// </summary>
    [AzureNativeResourceType("azure-native:cdn/v20230501:Route")]
    public partial class Route : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object.
        /// </summary>
        [Output("cacheConfiguration")]
        public Output<Outputs.AfdRouteCacheConfigurationResponse?> CacheConfiguration { get; private set; } = null!;

        /// <summary>
        /// Domains referenced by this endpoint.
        /// </summary>
        [Output("customDomains")]
        public Output<ImmutableArray<Outputs.ActivatedResourceReferenceResponse>> CustomDomains { get; private set; } = null!;

        [Output("deploymentStatus")]
        public Output<string> DeploymentStatus { get; private set; } = null!;

        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        [Output("enabledState")]
        public Output<string?> EnabledState { get; private set; } = null!;

        /// <summary>
        /// The name of the endpoint which holds the route.
        /// </summary>
        [Output("endpointName")]
        public Output<string> EndpointName { get; private set; } = null!;

        /// <summary>
        /// Protocol this rule will use when forwarding traffic to backends.
        /// </summary>
        [Output("forwardingProtocol")]
        public Output<string?> ForwardingProtocol { get; private set; } = null!;

        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
        /// </summary>
        [Output("httpsRedirect")]
        public Output<string?> HttpsRedirect { get; private set; } = null!;

        /// <summary>
        /// whether this route will be linked to the default endpoint domain.
        /// </summary>
        [Output("linkToDefaultDomain")]
        public Output<string?> LinkToDefaultDomain { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A reference to the origin group.
        /// </summary>
        [Output("originGroup")]
        public Output<Outputs.ResourceReferenceResponse> OriginGroup { get; private set; } = null!;

        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Output("originPath")]
        public Output<string?> OriginPath { get; private set; } = null!;

        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        [Output("patternsToMatch")]
        public Output<ImmutableArray<string>> PatternsToMatch { get; private set; } = null!;

        /// <summary>
        /// Provisioning status
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// rule sets referenced by this endpoint.
        /// </summary>
        [Output("ruleSets")]
        public Output<ImmutableArray<Outputs.ResourceReferenceResponse>> RuleSets { get; private set; } = null!;

        /// <summary>
        /// List of supported protocols for this route.
        /// </summary>
        [Output("supportedProtocols")]
        public Output<ImmutableArray<string>> SupportedProtocols { get; private set; } = null!;

        /// <summary>
        /// Read only system data
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("azure-native:cdn/v20230501:Route", name, args ?? new RouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:cdn/v20230501:Route", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:cdn:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20200901:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20210601:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20220501preview:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20221101preview:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20230701preview:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20240201:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20240501preview:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20240601preview:Route" },
                    new global::Pulumi.Alias { Type = "azure-native:cdn/v20240901:Route" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Route(name, id, options);
        }
    }

    public sealed class RouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object.
        /// </summary>
        [Input("cacheConfiguration")]
        public Input<Inputs.AfdRouteCacheConfigurationArgs>? CacheConfiguration { get; set; }

        [Input("customDomains")]
        private InputList<Inputs.ActivatedResourceReferenceArgs>? _customDomains;

        /// <summary>
        /// Domains referenced by this endpoint.
        /// </summary>
        public InputList<Inputs.ActivatedResourceReferenceArgs> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<Inputs.ActivatedResourceReferenceArgs>());
            set => _customDomains = value;
        }

        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        [Input("enabledState")]
        public InputUnion<string, Pulumi.AzureNative.Cdn.V20230501.EnabledState>? EnabledState { get; set; }

        /// <summary>
        /// Name of the endpoint under the profile which is unique globally.
        /// </summary>
        [Input("endpointName", required: true)]
        public Input<string> EndpointName { get; set; } = null!;

        /// <summary>
        /// Protocol this rule will use when forwarding traffic to backends.
        /// </summary>
        [Input("forwardingProtocol")]
        public InputUnion<string, Pulumi.AzureNative.Cdn.V20230501.ForwardingProtocol>? ForwardingProtocol { get; set; }

        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
        /// </summary>
        [Input("httpsRedirect")]
        public InputUnion<string, Pulumi.AzureNative.Cdn.V20230501.HttpsRedirect>? HttpsRedirect { get; set; }

        /// <summary>
        /// whether this route will be linked to the default endpoint domain.
        /// </summary>
        [Input("linkToDefaultDomain")]
        public InputUnion<string, Pulumi.AzureNative.Cdn.V20230501.LinkToDefaultDomain>? LinkToDefaultDomain { get; set; }

        /// <summary>
        /// A reference to the origin group.
        /// </summary>
        [Input("originGroup", required: true)]
        public Input<Inputs.ResourceReferenceArgs> OriginGroup { get; set; } = null!;

        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Input("originPath")]
        public Input<string>? OriginPath { get; set; }

        [Input("patternsToMatch")]
        private InputList<string>? _patternsToMatch;

        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        public InputList<string> PatternsToMatch
        {
            get => _patternsToMatch ?? (_patternsToMatch = new InputList<string>());
            set => _patternsToMatch = value;
        }

        /// <summary>
        /// Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique within the resource group.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the routing rule.
        /// </summary>
        [Input("routeName")]
        public Input<string>? RouteName { get; set; }

        [Input("ruleSets")]
        private InputList<Inputs.ResourceReferenceArgs>? _ruleSets;

        /// <summary>
        /// rule sets referenced by this endpoint.
        /// </summary>
        public InputList<Inputs.ResourceReferenceArgs> RuleSets
        {
            get => _ruleSets ?? (_ruleSets = new InputList<Inputs.ResourceReferenceArgs>());
            set => _ruleSets = value;
        }

        [Input("supportedProtocols")]
        private InputList<Union<string, Pulumi.AzureNative.Cdn.V20230501.AFDEndpointProtocols>>? _supportedProtocols;

        /// <summary>
        /// List of supported protocols for this route.
        /// </summary>
        public InputList<Union<string, Pulumi.AzureNative.Cdn.V20230501.AFDEndpointProtocols>> SupportedProtocols
        {
            get => _supportedProtocols ?? (_supportedProtocols = new InputList<Union<string, Pulumi.AzureNative.Cdn.V20230501.AFDEndpointProtocols>>());
            set => _supportedProtocols = value;
        }

        public RouteArgs()
        {
            ForwardingProtocol = "MatchRequest";
            HttpsRedirect = "Disabled";
            LinkToDefaultDomain = "Disabled";
        }
        public static new RouteArgs Empty => new RouteArgs();
    }
}
