// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Cdn.V20191231
{
    public static class GetOriginGroup
    {
        public static Task<GetOriginGroupResult> InvokeAsync(GetOriginGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOriginGroupResult>("azure-nextgen:cdn/v20191231:getOriginGroup", args ?? new GetOriginGroupArgs(), options.WithVersion());
    }


    public sealed class GetOriginGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the endpoint under the profile which is unique globally.
        /// </summary>
        [Input("endpointName", required: true)]
        public string EndpointName { get; set; } = null!;

        /// <summary>
        /// Name of the origin group which is unique within the endpoint.
        /// </summary>
        [Input("originGroupName", required: true)]
        public string OriginGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the CDN profile which is unique within the resource group.
        /// </summary>
        [Input("profileName", required: true)]
        public string ProfileName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetOriginGroupArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOriginGroupResult
    {
        /// <summary>
        /// Health probe settings to the origin that is used to determine the health of the origin.
        /// </summary>
        public readonly Outputs.HealthProbeParametersResponse? HealthProbeSettings;
        /// <summary>
        /// Resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The source of the content being delivered via CDN within given origin group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResourceReferenceResponse> Origins;
        /// <summary>
        /// Provisioning status of the origin group.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource status of the origin group.
        /// </summary>
        public readonly string ResourceState;
        /// <summary>
        /// The JSON object that contains the properties to determine origin health using real requests/responses. This property is currently not supported.
        /// </summary>
        public readonly Outputs.ResponseBasedOriginErrorDetectionParametersResponse? ResponseBasedOriginErrorDetectionSettings;
        /// <summary>
        /// Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported.
        /// </summary>
        public readonly int? TrafficRestorationTimeToHealedOrNewEndpointsInMinutes;
        /// <summary>
        /// Resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetOriginGroupResult(
            Outputs.HealthProbeParametersResponse? healthProbeSettings,

            string name,

            ImmutableArray<Outputs.ResourceReferenceResponse> origins,

            string provisioningState,

            string resourceState,

            Outputs.ResponseBasedOriginErrorDetectionParametersResponse? responseBasedOriginErrorDetectionSettings,

            int? trafficRestorationTimeToHealedOrNewEndpointsInMinutes,

            string type)
        {
            HealthProbeSettings = healthProbeSettings;
            Name = name;
            Origins = origins;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            ResponseBasedOriginErrorDetectionSettings = responseBasedOriginErrorDetectionSettings;
            TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = trafficRestorationTimeToHealedOrNewEndpointsInMinutes;
            Type = type;
        }
    }
}
