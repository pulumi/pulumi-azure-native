// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Cdn
{
    /// <summary>
    /// Friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes, e.g. www.contoso.com.
    /// API Version: 2020-09-01.
    /// </summary>
    [AzureNextGenResourceType("azure-nextgen:cdn:AFDCustomDomain")]
    public partial class AFDCustomDomain : Pulumi.CustomResource
    {
        /// <summary>
        /// Resource reference to the Azure DNS zone
        /// </summary>
        [Output("azureDnsZone")]
        public Output<Outputs.ResourceReferenceResponse?> AzureDnsZone { get; private set; } = null!;

        [Output("deploymentStatus")]
        public Output<string> DeploymentStatus { get; private set; } = null!;

        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. DCV stands for DomainControlValidation.
        /// </summary>
        [Output("domainValidationState")]
        public Output<string> DomainValidationState { get; private set; } = null!;

        /// <summary>
        /// The host name of the domain. Must be a domain name.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// Resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning status
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Read only system data
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
        /// </summary>
        [Output("tlsSettings")]
        public Output<Outputs.AFDDomainHttpsParametersResponse?> TlsSettings { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Values the customer needs to validate domain ownership
        /// </summary>
        [Output("validationProperties")]
        public Output<Outputs.DomainValidationPropertiesResponse> ValidationProperties { get; private set; } = null!;


        /// <summary>
        /// Create a AFDCustomDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AFDCustomDomain(string name, AFDCustomDomainArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:cdn:AFDCustomDomain", name, args ?? new AFDCustomDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AFDCustomDomain(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:cdn:AFDCustomDomain", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:cdn/latest:AFDCustomDomain"},
                    new Pulumi.Alias { Type = "azure-nextgen:cdn/v20200901:AFDCustomDomain"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AFDCustomDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AFDCustomDomain Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AFDCustomDomain(name, id, options);
        }
    }

    public sealed class AFDCustomDomainArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Resource reference to the Azure DNS zone
        /// </summary>
        [Input("azureDnsZone")]
        public Input<Inputs.ResourceReferenceArgs>? AzureDnsZone { get; set; }

        /// <summary>
        /// Name of the domain under the profile which is unique globally
        /// </summary>
        [Input("customDomainName")]
        public Input<string>? CustomDomainName { get; set; }

        /// <summary>
        /// The host name of the domain. Must be a domain name.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// Name of the CDN profile which is unique within the resource group.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user's own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
        /// </summary>
        [Input("tlsSettings")]
        public Input<Inputs.AFDDomainHttpsParametersArgs>? TlsSettings { get; set; }

        public AFDCustomDomainArgs()
        {
        }
    }
}
