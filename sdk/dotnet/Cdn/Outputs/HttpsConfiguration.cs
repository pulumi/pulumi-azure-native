// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cdn.Outputs
{

    /// <summary>
    /// HTTPS configuration for CDN custom domain.
    /// </summary>
    [OutputType]
    public sealed class HttpsConfiguration
    {
        /// <summary>
        /// Parameters required for using CDN managed certificates.
        /// </summary>
        public readonly Outputs.CdnCertificateSourceParameters? CdnCertificateSourceParameters;
        /// <summary>
        /// Certificate source for the custom domain. One of: 'Cdn', 'AzureKeyVault'.
        /// </summary>
        public readonly string CertificateSource;
        /// <summary>
        /// Parameters required for using certificates stored in Azure KeyVault.
        /// </summary>
        public readonly Outputs.KeyVaultCertificateSourceParameters? KeyVaultCertificateSourceParameters;
        /// <summary>
        /// TLS protocol version that will be used for HTTPS. One of: 'None', 'TLS10', 'TLS12'.
        /// </summary>
        public readonly string? MinimumTlsVersion;
        /// <summary>
        /// TLS extension protocol. One of: 'ServerNameIndication', 'IPBased'.
        /// </summary>
        public readonly string ProtocolType;

        [OutputConstructor]
        private HttpsConfiguration(
            Outputs.CdnCertificateSourceParameters? cdnCertificateSourceParameters,

            string certificateSource,

            Outputs.KeyVaultCertificateSourceParameters? keyVaultCertificateSourceParameters,

            string? minimumTlsVersion,

            string protocolType)
        {
            CdnCertificateSourceParameters = cdnCertificateSourceParameters;
            CertificateSource = certificateSource;
            KeyVaultCertificateSourceParameters = keyVaultCertificateSourceParameters;
            MinimumTlsVersion = minimumTlsVersion;
            ProtocolType = protocolType;
        }
    }
}
