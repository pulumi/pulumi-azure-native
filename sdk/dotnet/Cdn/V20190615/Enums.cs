// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Cdn.V20190615
{
    /// <summary>
    /// Describes what action to be applied when rule matches
    /// </summary>
    [EnumType]
    public readonly struct ActionType : IEquatable<ActionType>
    {
        private readonly string _value;

        private ActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionType Allow { get; } = new ActionType("Allow");
        public static ActionType Block { get; } = new ActionType("Block");
        public static ActionType Log { get; } = new ActionType("Log");
        public static ActionType Redirect { get; } = new ActionType("Redirect");

        public static bool operator ==(ActionType left, ActionType right) => left.Equals(right);
        public static bool operator !=(ActionType left, ActionType right) => !left.Equals(right);

        public static explicit operator string(ActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionType other && Equals(other);
        public bool Equals(ActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Caching behavior for the requests
    /// </summary>
    [EnumType]
    public readonly struct CacheBehavior : IEquatable<CacheBehavior>
    {
        private readonly string _value;

        private CacheBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CacheBehavior BypassCache { get; } = new CacheBehavior("BypassCache");
        public static CacheBehavior Override { get; } = new CacheBehavior("Override");
        public static CacheBehavior SetIfMissing { get; } = new CacheBehavior("SetIfMissing");

        public static bool operator ==(CacheBehavior left, CacheBehavior right) => left.Equals(right);
        public static bool operator !=(CacheBehavior left, CacheBehavior right) => !left.Equals(right);

        public static explicit operator string(CacheBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CacheBehavior other && Equals(other);
        public bool Equals(CacheBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level at which the content needs to be cached.
    /// </summary>
    [EnumType]
    public readonly struct CacheType : IEquatable<CacheType>
    {
        private readonly string _value;

        private CacheType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CacheType All { get; } = new CacheType("All");

        public static bool operator ==(CacheType left, CacheType right) => left.Equals(right);
        public static bool operator !=(CacheType left, CacheType right) => !left.Equals(right);

        public static explicit operator string(CacheType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CacheType other && Equals(other);
        public bool Equals(CacheType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct CookiesOperator : IEquatable<CookiesOperator>
    {
        private readonly string _value;

        private CookiesOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CookiesOperator Any { get; } = new CookiesOperator("Any");
        public static CookiesOperator Equal { get; } = new CookiesOperator("Equal");
        public static CookiesOperator Contains { get; } = new CookiesOperator("Contains");
        public static CookiesOperator BeginsWith { get; } = new CookiesOperator("BeginsWith");
        public static CookiesOperator EndsWith { get; } = new CookiesOperator("EndsWith");
        public static CookiesOperator LessThan { get; } = new CookiesOperator("LessThan");
        public static CookiesOperator LessThanOrEqual { get; } = new CookiesOperator("LessThanOrEqual");
        public static CookiesOperator GreaterThan { get; } = new CookiesOperator("GreaterThan");
        public static CookiesOperator GreaterThanOrEqual { get; } = new CookiesOperator("GreaterThanOrEqual");

        public static bool operator ==(CookiesOperator left, CookiesOperator right) => left.Equals(right);
        public static bool operator !=(CookiesOperator left, CookiesOperator right) => !left.Equals(right);

        public static explicit operator string(CookiesOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CookiesOperator other && Equals(other);
        public bool Equals(CookiesOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
    /// </summary>
    [EnumType]
    public readonly struct CustomRuleEnabledState : IEquatable<CustomRuleEnabledState>
    {
        private readonly string _value;

        private CustomRuleEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomRuleEnabledState Disabled { get; } = new CustomRuleEnabledState("Disabled");
        public static CustomRuleEnabledState Enabled { get; } = new CustomRuleEnabledState("Enabled");

        public static bool operator ==(CustomRuleEnabledState left, CustomRuleEnabledState right) => left.Equals(right);
        public static bool operator !=(CustomRuleEnabledState left, CustomRuleEnabledState right) => !left.Equals(right);

        public static explicit operator string(CustomRuleEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomRuleEnabledState other && Equals(other);
        public bool Equals(CustomRuleEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the action for the delivery rule.
    /// </summary>
    [EnumType]
    public readonly struct DeliveryRuleAction : IEquatable<DeliveryRuleAction>
    {
        private readonly string _value;

        private DeliveryRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeliveryRuleAction CacheExpiration { get; } = new DeliveryRuleAction("CacheExpiration");
        public static DeliveryRuleAction CacheKeyQueryString { get; } = new DeliveryRuleAction("CacheKeyQueryString");
        public static DeliveryRuleAction ModifyRequestHeader { get; } = new DeliveryRuleAction("ModifyRequestHeader");
        public static DeliveryRuleAction ModifyResponseHeader { get; } = new DeliveryRuleAction("ModifyResponseHeader");
        public static DeliveryRuleAction UrlRedirect { get; } = new DeliveryRuleAction("UrlRedirect");
        public static DeliveryRuleAction UrlRewrite { get; } = new DeliveryRuleAction("UrlRewrite");

        public static bool operator ==(DeliveryRuleAction left, DeliveryRuleAction right) => left.Equals(right);
        public static bool operator !=(DeliveryRuleAction left, DeliveryRuleAction right) => !left.Equals(right);

        public static explicit operator string(DeliveryRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeliveryRuleAction other && Equals(other);
        public bool Equals(DeliveryRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to use for the redirect. The default value is MatchRequest
    /// </summary>
    [EnumType]
    public readonly struct DestinationProtocol : IEquatable<DestinationProtocol>
    {
        private readonly string _value;

        private DestinationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationProtocol MatchRequest { get; } = new DestinationProtocol("MatchRequest");
        public static DestinationProtocol Http { get; } = new DestinationProtocol("Http");
        public static DestinationProtocol Https { get; } = new DestinationProtocol("Https");

        public static bool operator ==(DestinationProtocol left, DestinationProtocol right) => left.Equals(right);
        public static bool operator !=(DestinationProtocol left, DestinationProtocol right) => !left.Equals(right);

        public static explicit operator string(DestinationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationProtocol other && Equals(other);
        public bool Equals(DestinationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action of the geo filter, i.e. allow or block access.
    /// </summary>
    [EnumType]
    public readonly struct GeoFilterActions : IEquatable<GeoFilterActions>
    {
        private readonly string _value;

        private GeoFilterActions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeoFilterActions Block { get; } = new GeoFilterActions("Block");
        public static GeoFilterActions Allow { get; } = new GeoFilterActions("Allow");

        public static bool operator ==(GeoFilterActions left, GeoFilterActions right) => left.Equals(right);
        public static bool operator !=(GeoFilterActions left, GeoFilterActions right) => !left.Equals(right);

        public static explicit operator string(GeoFilterActions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeoFilterActions other && Equals(other);
        public bool Equals(GeoFilterActions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Action to perform
    /// </summary>
    [EnumType]
    public readonly struct HeaderAction : IEquatable<HeaderAction>
    {
        private readonly string _value;

        private HeaderAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HeaderAction Append { get; } = new HeaderAction("Append");
        public static HeaderAction Overwrite { get; } = new HeaderAction("Overwrite");
        public static HeaderAction Delete { get; } = new HeaderAction("Delete");

        public static bool operator ==(HeaderAction left, HeaderAction right) => left.Equals(right);
        public static bool operator !=(HeaderAction left, HeaderAction right) => !left.Equals(right);

        public static explicit operator string(HeaderAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HeaderAction other && Equals(other);
        public bool Equals(HeaderAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct HttpVersionOperator : IEquatable<HttpVersionOperator>
    {
        private readonly string _value;

        private HttpVersionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HttpVersionOperator Equal { get; } = new HttpVersionOperator("Equal");

        public static bool operator ==(HttpVersionOperator left, HttpVersionOperator right) => left.Equals(right);
        public static bool operator !=(HttpVersionOperator left, HttpVersionOperator right) => !left.Equals(right);

        public static explicit operator string(HttpVersionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpVersionOperator other && Equals(other);
        public bool Equals(HttpVersionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct IsDeviceOperator : IEquatable<IsDeviceOperator>
    {
        private readonly string _value;

        private IsDeviceOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IsDeviceOperator Equal { get; } = new IsDeviceOperator("Equal");

        public static bool operator ==(IsDeviceOperator left, IsDeviceOperator right) => left.Equals(right);
        public static bool operator !=(IsDeviceOperator left, IsDeviceOperator right) => !left.Equals(right);

        public static explicit operator string(IsDeviceOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IsDeviceOperator other && Equals(other);
        public bool Equals(IsDeviceOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
    /// </summary>
    [EnumType]
    public readonly struct ManagedRuleEnabledState : IEquatable<ManagedRuleEnabledState>
    {
        private readonly string _value;

        private ManagedRuleEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedRuleEnabledState Disabled { get; } = new ManagedRuleEnabledState("Disabled");
        public static ManagedRuleEnabledState Enabled { get; } = new ManagedRuleEnabledState("Enabled");

        public static bool operator ==(ManagedRuleEnabledState left, ManagedRuleEnabledState right) => left.Equals(right);
        public static bool operator !=(ManagedRuleEnabledState left, ManagedRuleEnabledState right) => !left.Equals(right);

        public static explicit operator string(ManagedRuleEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedRuleEnabledState other && Equals(other);
        public bool Equals(ManagedRuleEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Match variable to compare against.
    /// </summary>
    [EnumType]
    public readonly struct MatchVariable : IEquatable<MatchVariable>
    {
        private readonly string _value;

        private MatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MatchVariable RemoteAddr { get; } = new MatchVariable("RemoteAddr");
        public static MatchVariable SocketAddr { get; } = new MatchVariable("SocketAddr");
        public static MatchVariable RequestMethod { get; } = new MatchVariable("RequestMethod");
        public static MatchVariable RequestHeader { get; } = new MatchVariable("RequestHeader");
        public static MatchVariable RequestUri { get; } = new MatchVariable("RequestUri");
        public static MatchVariable QueryString { get; } = new MatchVariable("QueryString");
        public static MatchVariable RequestBody { get; } = new MatchVariable("RequestBody");
        public static MatchVariable Cookies { get; } = new MatchVariable("Cookies");
        public static MatchVariable PostArgs { get; } = new MatchVariable("PostArgs");

        public static bool operator ==(MatchVariable left, MatchVariable right) => left.Equals(right);
        public static bool operator !=(MatchVariable left, MatchVariable right) => !left.Equals(right);

        public static explicit operator string(MatchVariable value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MatchVariable other && Equals(other);
        public bool Equals(MatchVariable other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct Operator : IEquatable<Operator>
    {
        private readonly string _value;

        private Operator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Operator Any { get; } = new Operator("Any");
        public static Operator IPMatch { get; } = new Operator("IPMatch");
        public static Operator GeoMatch { get; } = new Operator("GeoMatch");
        public static Operator Equal { get; } = new Operator("Equal");
        public static Operator Contains { get; } = new Operator("Contains");
        public static Operator LessThan { get; } = new Operator("LessThan");
        public static Operator GreaterThan { get; } = new Operator("GreaterThan");
        public static Operator LessThanOrEqual { get; } = new Operator("LessThanOrEqual");
        public static Operator GreaterThanOrEqual { get; } = new Operator("GreaterThanOrEqual");
        public static Operator BeginsWith { get; } = new Operator("BeginsWith");
        public static Operator EndsWith { get; } = new Operator("EndsWith");
        public static Operator RegEx { get; } = new Operator("RegEx");

        public static bool operator ==(Operator left, Operator right) => left.Equals(right);
        public static bool operator !=(Operator left, Operator right) => !left.Equals(right);

        public static explicit operator string(Operator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Operator other && Equals(other);
        public bool Equals(Operator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
    /// </summary>
    [EnumType]
    public readonly struct OptimizationType : IEquatable<OptimizationType>
    {
        private readonly string _value;

        private OptimizationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OptimizationType GeneralWebDelivery { get; } = new OptimizationType("GeneralWebDelivery");
        public static OptimizationType GeneralMediaStreaming { get; } = new OptimizationType("GeneralMediaStreaming");
        public static OptimizationType VideoOnDemandMediaStreaming { get; } = new OptimizationType("VideoOnDemandMediaStreaming");
        public static OptimizationType LargeFileDownload { get; } = new OptimizationType("LargeFileDownload");
        public static OptimizationType DynamicSiteAcceleration { get; } = new OptimizationType("DynamicSiteAcceleration");

        public static bool operator ==(OptimizationType left, OptimizationType right) => left.Equals(right);
        public static bool operator !=(OptimizationType left, OptimizationType right) => !left.Equals(right);

        public static explicit operator string(OptimizationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OptimizationType other && Equals(other);
        public bool Equals(OptimizationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// describes if the policy is in enabled state or disabled state
    /// </summary>
    [EnumType]
    public readonly struct PolicyEnabledState : IEquatable<PolicyEnabledState>
    {
        private readonly string _value;

        private PolicyEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyEnabledState Disabled { get; } = new PolicyEnabledState("Disabled");
        public static PolicyEnabledState Enabled { get; } = new PolicyEnabledState("Enabled");

        public static bool operator ==(PolicyEnabledState left, PolicyEnabledState right) => left.Equals(right);
        public static bool operator !=(PolicyEnabledState left, PolicyEnabledState right) => !left.Equals(right);

        public static explicit operator string(PolicyEnabledState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyEnabledState other && Equals(other);
        public bool Equals(PolicyEnabledState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if it is in detection mode or prevention mode at policy level.
    /// </summary>
    [EnumType]
    public readonly struct PolicyMode : IEquatable<PolicyMode>
    {
        private readonly string _value;

        private PolicyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyMode Prevention { get; } = new PolicyMode("Prevention");
        public static PolicyMode Detection { get; } = new PolicyMode("Detection");

        public static bool operator ==(PolicyMode left, PolicyMode right) => left.Equals(right);
        public static bool operator !=(PolicyMode left, PolicyMode right) => !left.Equals(right);

        public static explicit operator string(PolicyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyMode other && Equals(other);
        public bool Equals(PolicyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct PostArgsOperator : IEquatable<PostArgsOperator>
    {
        private readonly string _value;

        private PostArgsOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostArgsOperator Any { get; } = new PostArgsOperator("Any");
        public static PostArgsOperator Equal { get; } = new PostArgsOperator("Equal");
        public static PostArgsOperator Contains { get; } = new PostArgsOperator("Contains");
        public static PostArgsOperator BeginsWith { get; } = new PostArgsOperator("BeginsWith");
        public static PostArgsOperator EndsWith { get; } = new PostArgsOperator("EndsWith");
        public static PostArgsOperator LessThan { get; } = new PostArgsOperator("LessThan");
        public static PostArgsOperator LessThanOrEqual { get; } = new PostArgsOperator("LessThanOrEqual");
        public static PostArgsOperator GreaterThan { get; } = new PostArgsOperator("GreaterThan");
        public static PostArgsOperator GreaterThanOrEqual { get; } = new PostArgsOperator("GreaterThanOrEqual");

        public static bool operator ==(PostArgsOperator left, PostArgsOperator right) => left.Equals(right);
        public static bool operator !=(PostArgsOperator left, PostArgsOperator right) => !left.Equals(right);

        public static explicit operator string(PostArgsOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostArgsOperator other && Equals(other);
        public bool Equals(PostArgsOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Caching behavior for the requests
    /// </summary>
    [EnumType]
    public readonly struct QueryStringBehavior : IEquatable<QueryStringBehavior>
    {
        private readonly string _value;

        private QueryStringBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryStringBehavior Include { get; } = new QueryStringBehavior("Include");
        public static QueryStringBehavior IncludeAll { get; } = new QueryStringBehavior("IncludeAll");
        public static QueryStringBehavior Exclude { get; } = new QueryStringBehavior("Exclude");
        public static QueryStringBehavior ExcludeAll { get; } = new QueryStringBehavior("ExcludeAll");

        public static bool operator ==(QueryStringBehavior left, QueryStringBehavior right) => left.Equals(right);
        public static bool operator !=(QueryStringBehavior left, QueryStringBehavior right) => !left.Equals(right);

        public static explicit operator string(QueryStringBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryStringBehavior other && Equals(other);
        public bool Equals(QueryStringBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
    /// </summary>
    [EnumType]
    public readonly struct QueryStringCachingBehavior : IEquatable<QueryStringCachingBehavior>
    {
        private readonly string _value;

        private QueryStringCachingBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryStringCachingBehavior IgnoreQueryString { get; } = new QueryStringCachingBehavior("IgnoreQueryString");
        public static QueryStringCachingBehavior BypassCaching { get; } = new QueryStringCachingBehavior("BypassCaching");
        public static QueryStringCachingBehavior UseQueryString { get; } = new QueryStringCachingBehavior("UseQueryString");
        public static QueryStringCachingBehavior NotSet { get; } = new QueryStringCachingBehavior("NotSet");

        public static bool operator ==(QueryStringCachingBehavior left, QueryStringCachingBehavior right) => left.Equals(right);
        public static bool operator !=(QueryStringCachingBehavior left, QueryStringCachingBehavior right) => !left.Equals(right);

        public static explicit operator string(QueryStringCachingBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryStringCachingBehavior other && Equals(other);
        public bool Equals(QueryStringCachingBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct QueryStringOperator : IEquatable<QueryStringOperator>
    {
        private readonly string _value;

        private QueryStringOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueryStringOperator Any { get; } = new QueryStringOperator("Any");
        public static QueryStringOperator Equal { get; } = new QueryStringOperator("Equal");
        public static QueryStringOperator Contains { get; } = new QueryStringOperator("Contains");
        public static QueryStringOperator BeginsWith { get; } = new QueryStringOperator("BeginsWith");
        public static QueryStringOperator EndsWith { get; } = new QueryStringOperator("EndsWith");
        public static QueryStringOperator LessThan { get; } = new QueryStringOperator("LessThan");
        public static QueryStringOperator LessThanOrEqual { get; } = new QueryStringOperator("LessThanOrEqual");
        public static QueryStringOperator GreaterThan { get; } = new QueryStringOperator("GreaterThan");
        public static QueryStringOperator GreaterThanOrEqual { get; } = new QueryStringOperator("GreaterThanOrEqual");

        public static bool operator ==(QueryStringOperator left, QueryStringOperator right) => left.Equals(right);
        public static bool operator !=(QueryStringOperator left, QueryStringOperator right) => !left.Equals(right);

        public static explicit operator string(QueryStringOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueryStringOperator other && Equals(other);
        public bool Equals(QueryStringOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The redirect type the rule will use when redirecting traffic.
    /// </summary>
    [EnumType]
    public readonly struct RedirectType : IEquatable<RedirectType>
    {
        private readonly string _value;

        private RedirectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedirectType Moved { get; } = new RedirectType("Moved");
        public static RedirectType Found { get; } = new RedirectType("Found");
        public static RedirectType TemporaryRedirect { get; } = new RedirectType("TemporaryRedirect");
        public static RedirectType PermanentRedirect { get; } = new RedirectType("PermanentRedirect");

        public static bool operator ==(RedirectType left, RedirectType right) => left.Equals(right);
        public static bool operator !=(RedirectType left, RedirectType right) => !left.Equals(right);

        public static explicit operator string(RedirectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedirectType other && Equals(other);
        public bool Equals(RedirectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RemoteAddressOperator : IEquatable<RemoteAddressOperator>
    {
        private readonly string _value;

        private RemoteAddressOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RemoteAddressOperator Any { get; } = new RemoteAddressOperator("Any");
        public static RemoteAddressOperator IPMatch { get; } = new RemoteAddressOperator("IPMatch");
        public static RemoteAddressOperator GeoMatch { get; } = new RemoteAddressOperator("GeoMatch");

        public static bool operator ==(RemoteAddressOperator left, RemoteAddressOperator right) => left.Equals(right);
        public static bool operator !=(RemoteAddressOperator left, RemoteAddressOperator right) => !left.Equals(right);

        public static explicit operator string(RemoteAddressOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RemoteAddressOperator other && Equals(other);
        public bool Equals(RemoteAddressOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestBodyOperator : IEquatable<RequestBodyOperator>
    {
        private readonly string _value;

        private RequestBodyOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestBodyOperator Any { get; } = new RequestBodyOperator("Any");
        public static RequestBodyOperator Equal { get; } = new RequestBodyOperator("Equal");
        public static RequestBodyOperator Contains { get; } = new RequestBodyOperator("Contains");
        public static RequestBodyOperator BeginsWith { get; } = new RequestBodyOperator("BeginsWith");
        public static RequestBodyOperator EndsWith { get; } = new RequestBodyOperator("EndsWith");
        public static RequestBodyOperator LessThan { get; } = new RequestBodyOperator("LessThan");
        public static RequestBodyOperator LessThanOrEqual { get; } = new RequestBodyOperator("LessThanOrEqual");
        public static RequestBodyOperator GreaterThan { get; } = new RequestBodyOperator("GreaterThan");
        public static RequestBodyOperator GreaterThanOrEqual { get; } = new RequestBodyOperator("GreaterThanOrEqual");

        public static bool operator ==(RequestBodyOperator left, RequestBodyOperator right) => left.Equals(right);
        public static bool operator !=(RequestBodyOperator left, RequestBodyOperator right) => !left.Equals(right);

        public static explicit operator string(RequestBodyOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestBodyOperator other && Equals(other);
        public bool Equals(RequestBodyOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestHeaderOperator : IEquatable<RequestHeaderOperator>
    {
        private readonly string _value;

        private RequestHeaderOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestHeaderOperator Any { get; } = new RequestHeaderOperator("Any");
        public static RequestHeaderOperator Equal { get; } = new RequestHeaderOperator("Equal");
        public static RequestHeaderOperator Contains { get; } = new RequestHeaderOperator("Contains");
        public static RequestHeaderOperator BeginsWith { get; } = new RequestHeaderOperator("BeginsWith");
        public static RequestHeaderOperator EndsWith { get; } = new RequestHeaderOperator("EndsWith");
        public static RequestHeaderOperator LessThan { get; } = new RequestHeaderOperator("LessThan");
        public static RequestHeaderOperator LessThanOrEqual { get; } = new RequestHeaderOperator("LessThanOrEqual");
        public static RequestHeaderOperator GreaterThan { get; } = new RequestHeaderOperator("GreaterThan");
        public static RequestHeaderOperator GreaterThanOrEqual { get; } = new RequestHeaderOperator("GreaterThanOrEqual");

        public static bool operator ==(RequestHeaderOperator left, RequestHeaderOperator right) => left.Equals(right);
        public static bool operator !=(RequestHeaderOperator left, RequestHeaderOperator right) => !left.Equals(right);

        public static explicit operator string(RequestHeaderOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestHeaderOperator other && Equals(other);
        public bool Equals(RequestHeaderOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestMethodOperator : IEquatable<RequestMethodOperator>
    {
        private readonly string _value;

        private RequestMethodOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestMethodOperator Equal { get; } = new RequestMethodOperator("Equal");

        public static bool operator ==(RequestMethodOperator left, RequestMethodOperator right) => left.Equals(right);
        public static bool operator !=(RequestMethodOperator left, RequestMethodOperator right) => !left.Equals(right);

        public static explicit operator string(RequestMethodOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestMethodOperator other && Equals(other);
        public bool Equals(RequestMethodOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct RequestUriOperator : IEquatable<RequestUriOperator>
    {
        private readonly string _value;

        private RequestUriOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequestUriOperator Any { get; } = new RequestUriOperator("Any");
        public static RequestUriOperator Equal { get; } = new RequestUriOperator("Equal");
        public static RequestUriOperator Contains { get; } = new RequestUriOperator("Contains");
        public static RequestUriOperator BeginsWith { get; } = new RequestUriOperator("BeginsWith");
        public static RequestUriOperator EndsWith { get; } = new RequestUriOperator("EndsWith");
        public static RequestUriOperator LessThan { get; } = new RequestUriOperator("LessThan");
        public static RequestUriOperator LessThanOrEqual { get; } = new RequestUriOperator("LessThanOrEqual");
        public static RequestUriOperator GreaterThan { get; } = new RequestUriOperator("GreaterThan");
        public static RequestUriOperator GreaterThanOrEqual { get; } = new RequestUriOperator("GreaterThanOrEqual");

        public static bool operator ==(RequestUriOperator left, RequestUriOperator right) => left.Equals(right);
        public static bool operator !=(RequestUriOperator left, RequestUriOperator right) => !left.Equals(right);

        public static explicit operator string(RequestUriOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequestUriOperator other && Equals(other);
        public bool Equals(RequestUriOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of the pricing tier.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard_Verizon { get; } = new SkuName("Standard_Verizon");
        public static SkuName Premium_Verizon { get; } = new SkuName("Premium_Verizon");
        public static SkuName Custom_Verizon { get; } = new SkuName("Custom_Verizon");
        public static SkuName Standard_Akamai { get; } = new SkuName("Standard_Akamai");
        public static SkuName Standard_ChinaCdn { get; } = new SkuName("Standard_ChinaCdn");
        public static SkuName Standard_Microsoft { get; } = new SkuName("Standard_Microsoft");
        public static SkuName Premium_ChinaCdn { get; } = new SkuName("Premium_ChinaCdn");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms are applied before matching
    /// </summary>
    [EnumType]
    public readonly struct Transform : IEquatable<Transform>
    {
        private readonly string _value;

        private Transform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Transform Lowercase { get; } = new Transform("Lowercase");
        public static Transform Uppercase { get; } = new Transform("Uppercase");

        public static bool operator ==(Transform left, Transform right) => left.Equals(right);
        public static bool operator !=(Transform left, Transform right) => !left.Equals(right);

        public static explicit operator string(Transform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Transform other && Equals(other);
        public bool Equals(Transform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes what transforms were applied before matching.
    /// </summary>
    [EnumType]
    public readonly struct TransformType : IEquatable<TransformType>
    {
        private readonly string _value;

        private TransformType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TransformType Lowercase { get; } = new TransformType("Lowercase");
        public static TransformType Uppercase { get; } = new TransformType("Uppercase");
        public static TransformType Trim { get; } = new TransformType("Trim");
        public static TransformType UrlDecode { get; } = new TransformType("UrlDecode");
        public static TransformType UrlEncode { get; } = new TransformType("UrlEncode");
        public static TransformType RemoveNulls { get; } = new TransformType("RemoveNulls");

        public static bool operator ==(TransformType left, TransformType right) => left.Equals(right);
        public static bool operator !=(TransformType left, TransformType right) => !left.Equals(right);

        public static explicit operator string(TransformType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TransformType other && Equals(other);
        public bool Equals(TransformType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlFileExtensionOperator : IEquatable<UrlFileExtensionOperator>
    {
        private readonly string _value;

        private UrlFileExtensionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlFileExtensionOperator Any { get; } = new UrlFileExtensionOperator("Any");
        public static UrlFileExtensionOperator Equal { get; } = new UrlFileExtensionOperator("Equal");
        public static UrlFileExtensionOperator Contains { get; } = new UrlFileExtensionOperator("Contains");
        public static UrlFileExtensionOperator BeginsWith { get; } = new UrlFileExtensionOperator("BeginsWith");
        public static UrlFileExtensionOperator EndsWith { get; } = new UrlFileExtensionOperator("EndsWith");
        public static UrlFileExtensionOperator LessThan { get; } = new UrlFileExtensionOperator("LessThan");
        public static UrlFileExtensionOperator LessThanOrEqual { get; } = new UrlFileExtensionOperator("LessThanOrEqual");
        public static UrlFileExtensionOperator GreaterThan { get; } = new UrlFileExtensionOperator("GreaterThan");
        public static UrlFileExtensionOperator GreaterThanOrEqual { get; } = new UrlFileExtensionOperator("GreaterThanOrEqual");

        public static bool operator ==(UrlFileExtensionOperator left, UrlFileExtensionOperator right) => left.Equals(right);
        public static bool operator !=(UrlFileExtensionOperator left, UrlFileExtensionOperator right) => !left.Equals(right);

        public static explicit operator string(UrlFileExtensionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlFileExtensionOperator other && Equals(other);
        public bool Equals(UrlFileExtensionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlFileNameOperator : IEquatable<UrlFileNameOperator>
    {
        private readonly string _value;

        private UrlFileNameOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlFileNameOperator Any { get; } = new UrlFileNameOperator("Any");
        public static UrlFileNameOperator Equal { get; } = new UrlFileNameOperator("Equal");
        public static UrlFileNameOperator Contains { get; } = new UrlFileNameOperator("Contains");
        public static UrlFileNameOperator BeginsWith { get; } = new UrlFileNameOperator("BeginsWith");
        public static UrlFileNameOperator EndsWith { get; } = new UrlFileNameOperator("EndsWith");
        public static UrlFileNameOperator LessThan { get; } = new UrlFileNameOperator("LessThan");
        public static UrlFileNameOperator LessThanOrEqual { get; } = new UrlFileNameOperator("LessThanOrEqual");
        public static UrlFileNameOperator GreaterThan { get; } = new UrlFileNameOperator("GreaterThan");
        public static UrlFileNameOperator GreaterThanOrEqual { get; } = new UrlFileNameOperator("GreaterThanOrEqual");

        public static bool operator ==(UrlFileNameOperator left, UrlFileNameOperator right) => left.Equals(right);
        public static bool operator !=(UrlFileNameOperator left, UrlFileNameOperator right) => !left.Equals(right);

        public static explicit operator string(UrlFileNameOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlFileNameOperator other && Equals(other);
        public bool Equals(UrlFileNameOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes operator to be matched
    /// </summary>
    [EnumType]
    public readonly struct UrlPathOperator : IEquatable<UrlPathOperator>
    {
        private readonly string _value;

        private UrlPathOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UrlPathOperator Any { get; } = new UrlPathOperator("Any");
        public static UrlPathOperator Equal { get; } = new UrlPathOperator("Equal");
        public static UrlPathOperator Contains { get; } = new UrlPathOperator("Contains");
        public static UrlPathOperator BeginsWith { get; } = new UrlPathOperator("BeginsWith");
        public static UrlPathOperator EndsWith { get; } = new UrlPathOperator("EndsWith");
        public static UrlPathOperator LessThan { get; } = new UrlPathOperator("LessThan");
        public static UrlPathOperator LessThanOrEqual { get; } = new UrlPathOperator("LessThanOrEqual");
        public static UrlPathOperator GreaterThan { get; } = new UrlPathOperator("GreaterThan");
        public static UrlPathOperator GreaterThanOrEqual { get; } = new UrlPathOperator("GreaterThanOrEqual");
        public static UrlPathOperator Wildcard { get; } = new UrlPathOperator("Wildcard");

        public static bool operator ==(UrlPathOperator left, UrlPathOperator right) => left.Equals(right);
        public static bool operator !=(UrlPathOperator left, UrlPathOperator right) => !left.Equals(right);

        public static explicit operator string(UrlPathOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UrlPathOperator other && Equals(other);
        public bool Equals(UrlPathOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
