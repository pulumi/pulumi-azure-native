// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Relay
{
    public static class ListHybridConnectionKeys
    {
        /// <summary>
        /// Primary and secondary connection strings to the hybrid connection.
        /// API Version: 2017-04-01.
        /// </summary>
        public static Task<ListHybridConnectionKeysResult> InvokeAsync(ListHybridConnectionKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListHybridConnectionKeysResult>("azure-native:relay:listHybridConnectionKeys", args ?? new ListHybridConnectionKeysArgs(), options.WithDefaults());

        /// <summary>
        /// Primary and secondary connection strings to the hybrid connection.
        /// API Version: 2017-04-01.
        /// </summary>
        public static Output<ListHybridConnectionKeysResult> Invoke(ListHybridConnectionKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListHybridConnectionKeysResult>("azure-native:relay:listHybridConnectionKeys", args ?? new ListHybridConnectionKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListHybridConnectionKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The authorization rule name.
        /// </summary>
        [Input("authorizationRuleName", required: true)]
        public string AuthorizationRuleName { get; set; } = null!;

        /// <summary>
        /// The hybrid connection name.
        /// </summary>
        [Input("hybridConnectionName", required: true)]
        public string HybridConnectionName { get; set; } = null!;

        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public ListHybridConnectionKeysArgs()
        {
        }
        public static new ListHybridConnectionKeysArgs Empty => new ListHybridConnectionKeysArgs();
    }

    public sealed class ListHybridConnectionKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The authorization rule name.
        /// </summary>
        [Input("authorizationRuleName", required: true)]
        public Input<string> AuthorizationRuleName { get; set; } = null!;

        /// <summary>
        /// The hybrid connection name.
        /// </summary>
        [Input("hybridConnectionName", required: true)]
        public Input<string> HybridConnectionName { get; set; } = null!;

        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public ListHybridConnectionKeysInvokeArgs()
        {
        }
        public static new ListHybridConnectionKeysInvokeArgs Empty => new ListHybridConnectionKeysInvokeArgs();
    }


    [OutputType]
    public sealed class ListHybridConnectionKeysResult
    {
        /// <summary>
        /// A string that describes the authorization rule.
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// Primary connection string of the created namespace authorization rule.
        /// </summary>
        public readonly string? PrimaryConnectionString;
        /// <summary>
        /// A base64-encoded 256-bit primary key for signing and validating the SAS token.
        /// </summary>
        public readonly string? PrimaryKey;
        /// <summary>
        /// Secondary connection string of the created namespace authorization rule.
        /// </summary>
        public readonly string? SecondaryConnectionString;
        /// <summary>
        /// A base64-encoded 256-bit secondary key for signing and validating the SAS token.
        /// </summary>
        public readonly string? SecondaryKey;

        [OutputConstructor]
        private ListHybridConnectionKeysResult(
            string? keyName,

            string? primaryConnectionString,

            string? primaryKey,

            string? secondaryConnectionString,

            string? secondaryKey)
        {
            KeyName = keyName;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryKey = primaryKey;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryKey = secondaryKey;
        }
    }
}
