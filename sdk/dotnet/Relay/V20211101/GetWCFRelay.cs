// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Relay.V20211101
{
    public static class GetWCFRelay
    {
        /// <summary>
        /// Description of the WCF relay resource.
        /// </summary>
        public static Task<GetWCFRelayResult> InvokeAsync(GetWCFRelayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWCFRelayResult>("azure-native:relay/v20211101:getWCFRelay", args ?? new GetWCFRelayArgs(), options.WithDefaults());

        /// <summary>
        /// Description of the WCF relay resource.
        /// </summary>
        public static Output<GetWCFRelayResult> Invoke(GetWCFRelayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWCFRelayResult>("azure-native:relay/v20211101:getWCFRelay", args ?? new GetWCFRelayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWCFRelayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The relay name.
        /// </summary>
        [Input("relayName", required: true)]
        public string RelayName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetWCFRelayArgs()
        {
        }
        public static new GetWCFRelayArgs Empty => new GetWCFRelayArgs();
    }

    public sealed class GetWCFRelayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The namespace name
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The relay name.
        /// </summary>
        [Input("relayName", required: true)]
        public Input<string> RelayName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetWCFRelayInvokeArgs()
        {
        }
        public static new GetWCFRelayInvokeArgs Empty => new GetWCFRelayInvokeArgs();
    }


    [OutputType]
    public sealed class GetWCFRelayResult
    {
        /// <summary>
        /// The time the WCF relay was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Returns true if the relay is dynamic; otherwise, false.
        /// </summary>
        public readonly bool IsDynamic;
        /// <summary>
        /// The number of listeners for this relay. Note that min :1 and max:25 are supported.
        /// </summary>
        public readonly int ListenerCount;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// WCF relay type.
        /// </summary>
        public readonly string? RelayType;
        /// <summary>
        /// Returns true if client authorization is needed for this relay; otherwise, false.
        /// </summary>
        public readonly bool? RequiresClientAuthorization;
        /// <summary>
        /// Returns true if transport security is needed for this relay; otherwise, false.
        /// </summary>
        public readonly bool? RequiresTransportSecurity;
        /// <summary>
        /// The system meta data relating to this resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The time the namespace was updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
        /// </summary>
        public readonly string? UserMetadata;

        [OutputConstructor]
        private GetWCFRelayResult(
            string createdAt,

            string id,

            bool isDynamic,

            int listenerCount,

            string location,

            string name,

            string? relayType,

            bool? requiresClientAuthorization,

            bool? requiresTransportSecurity,

            Outputs.SystemDataResponse systemData,

            string type,

            string updatedAt,

            string? userMetadata)
        {
            CreatedAt = createdAt;
            Id = id;
            IsDynamic = isDynamic;
            ListenerCount = listenerCount;
            Location = location;
            Name = name;
            RelayType = relayType;
            RequiresClientAuthorization = requiresClientAuthorization;
            RequiresTransportSecurity = requiresTransportSecurity;
            SystemData = systemData;
            Type = type;
            UpdatedAt = updatedAt;
            UserMetadata = userMetadata;
        }
    }
}
