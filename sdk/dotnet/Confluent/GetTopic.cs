// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent
{
    public static class GetTopic
    {
        /// <summary>
        /// Get confluent topic by Name
        /// 
        /// Uses Azure REST API version 2024-07-01.
        /// </summary>
        public static Task<GetTopicResult> InvokeAsync(GetTopicArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicResult>("azure-native:confluent:getTopic", args ?? new GetTopicArgs(), options.WithDefaults());

        /// <summary>
        /// Get confluent topic by Name
        /// 
        /// Uses Azure REST API version 2024-07-01.
        /// </summary>
        public static Output<GetTopicResult> Invoke(GetTopicInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicResult>("azure-native:confluent:getTopic", args ?? new GetTopicInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get confluent topic by Name
        /// 
        /// Uses Azure REST API version 2024-07-01.
        /// </summary>
        public static Output<GetTopicResult> Invoke(GetTopicInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicResult>("azure-native:confluent:getTopic", args ?? new GetTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Confluent kafka or schema registry topic name
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        public GetTopicArgs()
        {
        }
        public static new GetTopicArgs Empty => new GetTopicArgs();
    }

    public sealed class GetTopicInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Confluent kafka or schema registry topic name
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public GetTopicInvokeArgs()
        {
        }
        public static new GetTopicInvokeArgs Empty => new GetTopicInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicResult
    {
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Config Specification of the topic
        /// </summary>
        public readonly Outputs.TopicsRelatedLinkResponse? Configs;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Input Config Specification of the topic
        /// </summary>
        public readonly ImmutableArray<Outputs.TopicsInputConfigResponse> InputConfigs;
        /// <summary>
        /// Type of topic
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Metadata of the record
        /// </summary>
        public readonly Outputs.TopicMetadataEntityResponse? Metadata;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Partition Specification of the topic
        /// </summary>
        public readonly Outputs.TopicsRelatedLinkResponse? Partitions;
        /// <summary>
        /// Partition count of the topic
        /// </summary>
        public readonly string? PartitionsCount;
        /// <summary>
        /// Partition Reassignment Specification of the topic
        /// </summary>
        public readonly Outputs.TopicsRelatedLinkResponse? PartitionsReassignments;
        /// <summary>
        /// Replication factor of the topic
        /// </summary>
        public readonly string? ReplicationFactor;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Topic Id returned by Confluent
        /// </summary>
        public readonly string? TopicId;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTopicResult(
            string azureApiVersion,

            Outputs.TopicsRelatedLinkResponse? configs,

            string id,

            ImmutableArray<Outputs.TopicsInputConfigResponse> inputConfigs,

            string? kind,

            Outputs.TopicMetadataEntityResponse? metadata,

            string name,

            Outputs.TopicsRelatedLinkResponse? partitions,

            string? partitionsCount,

            Outputs.TopicsRelatedLinkResponse? partitionsReassignments,

            string? replicationFactor,

            Outputs.SystemDataResponse systemData,

            string? topicId,

            string type)
        {
            AzureApiVersion = azureApiVersion;
            Configs = configs;
            Id = id;
            InputConfigs = inputConfigs;
            Kind = kind;
            Metadata = metadata;
            Name = name;
            Partitions = partitions;
            PartitionsCount = partitionsCount;
            PartitionsReassignments = partitionsReassignments;
            ReplicationFactor = replicationFactor;
            SystemData = systemData;
            TopicId = topicId;
            Type = type;
        }
    }
}
