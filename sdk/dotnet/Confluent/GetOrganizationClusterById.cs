// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent
{
    public static class GetOrganizationClusterById
    {
        /// <summary>
        /// Details of cluster record
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Task<GetOrganizationClusterByIdResult> InvokeAsync(GetOrganizationClusterByIdArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationClusterByIdResult>("azure-native:confluent:getOrganizationClusterById", args ?? new GetOrganizationClusterByIdArgs(), options.WithDefaults());

        /// <summary>
        /// Details of cluster record
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Output<GetOrganizationClusterByIdResult> Invoke(GetOrganizationClusterByIdInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationClusterByIdResult>("azure-native:confluent:getOrganizationClusterById", args ?? new GetOrganizationClusterByIdInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Details of cluster record
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Output<GetOrganizationClusterByIdResult> Invoke(GetOrganizationClusterByIdInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationClusterByIdResult>("azure-native:confluent:getOrganizationClusterById", args ?? new GetOrganizationClusterByIdInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationClusterByIdArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetOrganizationClusterByIdArgs()
        {
        }
        public static new GetOrganizationClusterByIdArgs Empty => new GetOrganizationClusterByIdArgs();
    }

    public sealed class GetOrganizationClusterByIdInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetOrganizationClusterByIdInvokeArgs()
        {
        }
        public static new GetOrganizationClusterByIdInvokeArgs Empty => new GetOrganizationClusterByIdInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationClusterByIdResult
    {
        /// <summary>
        /// Id of the cluster
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Type of cluster
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Metadata of the record
        /// </summary>
        public readonly Outputs.SCMetadataEntityResponse? Metadata;
        /// <summary>
        /// Display name of the cluster
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Specification of the cluster
        /// </summary>
        public readonly Outputs.SCClusterSpecEntityResponse? Spec;
        /// <summary>
        /// Specification of the cluster status
        /// </summary>
        public readonly Outputs.ClusterStatusEntityResponse? Status;
        /// <summary>
        /// Type of the resource
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetOrganizationClusterByIdResult(
            string? id,

            string? kind,

            Outputs.SCMetadataEntityResponse? metadata,

            string? name,

            Outputs.SCClusterSpecEntityResponse? spec,

            Outputs.ClusterStatusEntityResponse? status,

            string? type)
        {
            Id = id;
            Kind = kind;
            Metadata = metadata;
            Name = name;
            Spec = spec;
            Status = status;
            Type = type;
        }
    }
}
