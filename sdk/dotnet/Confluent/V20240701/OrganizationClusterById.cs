// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent.V20240701
{
    /// <summary>
    /// Details of cluster record
    /// </summary>
    [AzureNativeResourceType("azure-native:confluent/v20240701:OrganizationClusterById")]
    public partial class OrganizationClusterById : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type of cluster
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Metadata of the record
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.SCMetadataEntityResponse?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Display name of the cluster
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Specification of the cluster
        /// </summary>
        [Output("spec")]
        public Output<Outputs.SCClusterSpecEntityResponse?> Spec { get; private set; } = null!;

        /// <summary>
        /// Specification of the cluster status
        /// </summary>
        [Output("status")]
        public Output<Outputs.ClusterStatusEntityResponse?> Status { get; private set; } = null!;

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationClusterById resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationClusterById(string name, OrganizationClusterByIdArgs args, CustomResourceOptions? options = null)
            : base("azure-native:confluent/v20240701:OrganizationClusterById", name, args ?? new OrganizationClusterByIdArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationClusterById(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:confluent/v20240701:OrganizationClusterById", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:confluent:OrganizationClusterById" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationClusterById resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationClusterById Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new OrganizationClusterById(name, id, options);
        }
    }

    public sealed class OrganizationClusterByIdArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Id of the cluster
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Type of cluster
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Metadata of the record
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.SCMetadataEntityArgs>? Metadata { get; set; }

        /// <summary>
        /// Display name of the cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specification of the cluster
        /// </summary>
        [Input("spec")]
        public Input<Inputs.SCClusterSpecEntityArgs>? Spec { get; set; }

        /// <summary>
        /// Specification of the cluster status
        /// </summary>
        [Input("status")]
        public Input<Inputs.ClusterStatusEntityArgs>? Status { get; set; }

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public OrganizationClusterByIdArgs()
        {
        }
        public static new OrganizationClusterByIdArgs Empty => new OrganizationClusterByIdArgs();
    }
}
