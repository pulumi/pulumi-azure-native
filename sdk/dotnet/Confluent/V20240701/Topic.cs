// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent.V20240701
{
    /// <summary>
    /// Details of topic record
    /// </summary>
    [AzureNativeResourceType("azure-native:confluent/v20240701:Topic")]
    public partial class Topic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Config Specification of the topic
        /// </summary>
        [Output("configs")]
        public Output<Outputs.TopicsRelatedLinkResponse?> Configs { get; private set; } = null!;

        /// <summary>
        /// Input Config Specification of the topic
        /// </summary>
        [Output("inputConfigs")]
        public Output<ImmutableArray<Outputs.TopicsInputConfigResponse>> InputConfigs { get; private set; } = null!;

        /// <summary>
        /// Type of topic
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Metadata of the record
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.TopicMetadataEntityResponse?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Display name of the topic
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Partition Specification of the topic
        /// </summary>
        [Output("partitions")]
        public Output<Outputs.TopicsRelatedLinkResponse?> Partitions { get; private set; } = null!;

        /// <summary>
        /// Partition count of the topic
        /// </summary>
        [Output("partitionsCount")]
        public Output<string?> PartitionsCount { get; private set; } = null!;

        /// <summary>
        /// Partition Reassignment Specification of the topic
        /// </summary>
        [Output("partitionsReassignments")]
        public Output<Outputs.TopicsRelatedLinkResponse?> PartitionsReassignments { get; private set; } = null!;

        /// <summary>
        /// Replication factor of the topic
        /// </summary>
        [Output("replicationFactor")]
        public Output<string?> ReplicationFactor { get; private set; } = null!;

        /// <summary>
        /// Topic Id returned by Confluent
        /// </summary>
        [Output("topicId")]
        public Output<string?> TopicId { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Topic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Topic(string name, TopicArgs args, CustomResourceOptions? options = null)
            : base("azure-native:confluent/v20240701:Topic", name, args ?? new TopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Topic(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:confluent/v20240701:Topic", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:confluent:Topic" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Topic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Topic Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Topic(name, id, options);
        }
    }

    public sealed class TopicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent kafka or schema registry cluster id
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Config Specification of the topic
        /// </summary>
        [Input("configs")]
        public Input<Inputs.TopicsRelatedLinkArgs>? Configs { get; set; }

        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        [Input("inputConfigs")]
        private InputList<Inputs.TopicsInputConfigArgs>? _inputConfigs;

        /// <summary>
        /// Input Config Specification of the topic
        /// </summary>
        public InputList<Inputs.TopicsInputConfigArgs> InputConfigs
        {
            get => _inputConfigs ?? (_inputConfigs = new InputList<Inputs.TopicsInputConfigArgs>());
            set => _inputConfigs = value;
        }

        /// <summary>
        /// Type of topic
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Metadata of the record
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.TopicMetadataEntityArgs>? Metadata { get; set; }

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// Partition Specification of the topic
        /// </summary>
        [Input("partitions")]
        public Input<Inputs.TopicsRelatedLinkArgs>? Partitions { get; set; }

        /// <summary>
        /// Partition count of the topic
        /// </summary>
        [Input("partitionsCount")]
        public Input<string>? PartitionsCount { get; set; }

        /// <summary>
        /// Partition Reassignment Specification of the topic
        /// </summary>
        [Input("partitionsReassignments")]
        public Input<Inputs.TopicsRelatedLinkArgs>? PartitionsReassignments { get; set; }

        /// <summary>
        /// Replication factor of the topic
        /// </summary>
        [Input("replicationFactor")]
        public Input<string>? ReplicationFactor { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Topic Id returned by Confluent
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// Confluent kafka or schema registry topic name
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public TopicArgs()
        {
        }
        public static new TopicArgs Empty => new TopicArgs();
    }
}
