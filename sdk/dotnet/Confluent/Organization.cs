// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent
{
    /// <summary>
    /// Organization resource.
    /// Azure REST API version: 2021-12-01. Prior API version in Azure Native 1.x: 2020-03-01.
    /// 
    /// Other available API versions: 2020-03-01-preview, 2023-08-22, 2024-02-13.
    /// </summary>
    [AzureNativeResourceType("azure-native:confluent:Organization")]
    public partial class Organization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// Location of Organization resource
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Confluent offer detail
        /// </summary>
        [Output("offerDetail")]
        public Output<Outputs.OfferDetailResponse> OfferDetail { get; private set; } = null!;

        /// <summary>
        /// Id of the Confluent organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Provision states for confluent RP
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// SSO url for the Confluent organization.
        /// </summary>
        [Output("ssoUrl")]
        public Output<string> SsoUrl { get; private set; } = null!;

        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Organization resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Subscriber detail
        /// </summary>
        [Output("userDetail")]
        public Output<Outputs.UserDetailResponse> UserDetail { get; private set; } = null!;


        /// <summary>
        /// Create a Organization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Organization(string name, OrganizationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:confluent:Organization", name, args ?? new OrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Organization(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:confluent:Organization", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20200301:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20200301preview:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20210301preview:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20210901preview:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20211201:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20230822:Organization" },
                    new global::Pulumi.Alias { Type = "azure-native:confluent/v20240213:Organization" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Organization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Organization Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Organization(name, id, options);
        }
    }

    public sealed class OrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Location of Organization resource
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Confluent offer detail
        /// </summary>
        [Input("offerDetail", required: true)]
        public Input<Inputs.OfferDetailArgs> OfferDetail { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        /// <summary>
        /// Resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Organization resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Subscriber detail
        /// </summary>
        [Input("userDetail", required: true)]
        public Input<Inputs.UserDetailArgs> UserDetail { get; set; } = null!;

        public OrganizationArgs()
        {
        }
        public static new OrganizationArgs Empty => new OrganizationArgs();
    }
}
