// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent
{
    public static class GetOrganizationEnvironmentById
    {
        /// <summary>
        /// Details about environment name, metadata and environment id of an environment
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Task<GetOrganizationEnvironmentByIdResult> InvokeAsync(GetOrganizationEnvironmentByIdArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationEnvironmentByIdResult>("azure-native:confluent:getOrganizationEnvironmentById", args ?? new GetOrganizationEnvironmentByIdArgs(), options.WithDefaults());

        /// <summary>
        /// Details about environment name, metadata and environment id of an environment
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Output<GetOrganizationEnvironmentByIdResult> Invoke(GetOrganizationEnvironmentByIdInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationEnvironmentByIdResult>("azure-native:confluent:getOrganizationEnvironmentById", args ?? new GetOrganizationEnvironmentByIdInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Details about environment name, metadata and environment id of an environment
        /// Azure REST API version: 2024-07-01.
        /// </summary>
        public static Output<GetOrganizationEnvironmentByIdResult> Invoke(GetOrganizationEnvironmentByIdInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationEnvironmentByIdResult>("azure-native:confluent:getOrganizationEnvironmentById", args ?? new GetOrganizationEnvironmentByIdInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationEnvironmentByIdArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetOrganizationEnvironmentByIdArgs()
        {
        }
        public static new GetOrganizationEnvironmentByIdArgs Empty => new GetOrganizationEnvironmentByIdArgs();
    }

    public sealed class GetOrganizationEnvironmentByIdInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent environment id
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetOrganizationEnvironmentByIdInvokeArgs()
        {
        }
        public static new GetOrganizationEnvironmentByIdInvokeArgs Empty => new GetOrganizationEnvironmentByIdInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationEnvironmentByIdResult
    {
        /// <summary>
        /// Id of the environment
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Type of environment
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Metadata of the record
        /// </summary>
        public readonly Outputs.SCMetadataEntityResponse? Metadata;
        /// <summary>
        /// Display name of the environment
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Stream governance configuration
        /// </summary>
        public readonly Outputs.StreamGovernanceConfigResponse? StreamGovernanceConfig;
        /// <summary>
        /// Type of the resource
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetOrganizationEnvironmentByIdResult(
            string? id,

            string? kind,

            Outputs.SCMetadataEntityResponse? metadata,

            string? name,

            Outputs.StreamGovernanceConfigResponse? streamGovernanceConfig,

            string? type)
        {
            Id = id;
            Kind = kind;
            Metadata = metadata;
            Name = name;
            StreamGovernanceConfig = streamGovernanceConfig;
            Type = type;
        }
    }
}
