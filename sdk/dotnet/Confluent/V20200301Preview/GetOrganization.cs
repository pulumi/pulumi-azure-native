// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Confluent.V20200301Preview
{
    public static class GetOrganization
    {
        public static Task<GetOrganizationResult> InvokeAsync(GetOrganizationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationResult>("azure-nextgen:confluent/v20200301preview:getOrganization", args ?? new GetOrganizationArgs(), options.WithVersion());
    }


    public sealed class GetOrganizationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// Resource group name
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetOrganizationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOrganizationResult
    {
        /// <summary>
        /// The creation time of the resource.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// Location of Organization resource
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Confluent offer detail
        /// </summary>
        public readonly Outputs.OrganizationResourcePropertiesResponseOfferDetail? OfferDetail;
        /// <summary>
        /// Id of the Confluent organization.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// Provision states for confluent RP
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// SSO url for the Confluent organization.
        /// </summary>
        public readonly string SsoUrl;
        /// <summary>
        /// Organization resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Subscriber detail
        /// </summary>
        public readonly Outputs.OrganizationResourcePropertiesResponseUserDetail? UserDetail;

        [OutputConstructor]
        private GetOrganizationResult(
            string createdTime,

            string? location,

            string name,

            Outputs.OrganizationResourcePropertiesResponseOfferDetail? offerDetail,

            string organizationId,

            string? provisioningState,

            string ssoUrl,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.OrganizationResourcePropertiesResponseUserDetail? userDetail)
        {
            CreatedTime = createdTime;
            Location = location;
            Name = name;
            OfferDetail = offerDetail;
            OrganizationId = organizationId;
            ProvisioningState = provisioningState;
            SsoUrl = ssoUrl;
            Tags = tags;
            Type = type;
            UserDetail = userDetail;
        }
    }
}
