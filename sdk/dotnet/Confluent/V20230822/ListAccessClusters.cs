// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Confluent.V20230822
{
    public static class ListAccessClusters
    {
        /// <summary>
        /// List cluster success response
        /// </summary>
        public static Task<ListAccessClustersResult> InvokeAsync(ListAccessClustersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListAccessClustersResult>("azure-native:confluent/v20230822:listAccessClusters", args ?? new ListAccessClustersArgs(), options.WithDefaults());

        /// <summary>
        /// List cluster success response
        /// </summary>
        public static Output<ListAccessClustersResult> Invoke(ListAccessClustersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListAccessClustersResult>("azure-native:confluent/v20230822:listAccessClusters", args ?? new ListAccessClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListAccessClustersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public string OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("searchFilters")]
        private Dictionary<string, string>? _searchFilters;

        /// <summary>
        /// Search filters for the request
        /// </summary>
        public Dictionary<string, string> SearchFilters
        {
            get => _searchFilters ?? (_searchFilters = new Dictionary<string, string>());
            set => _searchFilters = value;
        }

        public ListAccessClustersArgs()
        {
        }
        public static new ListAccessClustersArgs Empty => new ListAccessClustersArgs();
    }

    public sealed class ListAccessClustersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Organization resource name
        /// </summary>
        [Input("organizationName", required: true)]
        public Input<string> OrganizationName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("searchFilters")]
        private InputMap<string>? _searchFilters;

        /// <summary>
        /// Search filters for the request
        /// </summary>
        public InputMap<string> SearchFilters
        {
            get => _searchFilters ?? (_searchFilters = new InputMap<string>());
            set => _searchFilters = value;
        }

        public ListAccessClustersInvokeArgs()
        {
        }
        public static new ListAccessClustersInvokeArgs Empty => new ListAccessClustersInvokeArgs();
    }


    [OutputType]
    public sealed class ListAccessClustersResult
    {
        /// <summary>
        /// Data of the environments list
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterRecordResponse> Data;
        /// <summary>
        /// Type of response
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Metadata of the list
        /// </summary>
        public readonly Outputs.ConfluentListMetadataResponse? Metadata;

        [OutputConstructor]
        private ListAccessClustersResult(
            ImmutableArray<Outputs.ClusterRecordResponse> data,

            string? kind,

            Outputs.ConfluentListMetadataResponse? metadata)
        {
            Data = data;
            Kind = kind;
            Metadata = metadata;
        }
    }
}
