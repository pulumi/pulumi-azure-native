// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.RedHatOpenShift.V20210131Preview
{
    /// <summary>
    /// The SDN plugin used in the cluster.
    /// </summary>
    [EnumType]
    public readonly struct SDNProvider : IEquatable<SDNProvider>
    {
        private readonly string _value;

        private SDNProvider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SDNProvider OVNKubernetes { get; } = new SDNProvider("OVNKubernetes");
        public static SDNProvider OpenShiftSDN { get; } = new SDNProvider("OpenShiftSDN");

        public static bool operator ==(SDNProvider left, SDNProvider right) => left.Equals(right);
        public static bool operator !=(SDNProvider left, SDNProvider right) => !left.Equals(right);

        public static explicit operator string(SDNProvider value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SDNProvider other && Equals(other);
        public bool Equals(SDNProvider other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The size of the worker VMs.
    /// </summary>
    [EnumType]
    public readonly struct VMSize : IEquatable<VMSize>
    {
        private readonly string _value;

        private VMSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VMSize Standard_D16as_v4 { get; } = new VMSize("Standard_D16as_v4");
        public static VMSize Standard_D16s_v3 { get; } = new VMSize("Standard_D16s_v3");
        public static VMSize Standard_D2s_v3 { get; } = new VMSize("Standard_D2s_v3");
        public static VMSize Standard_D32as_v4 { get; } = new VMSize("Standard_D32as_v4");
        public static VMSize Standard_D32s_v3 { get; } = new VMSize("Standard_D32s_v3");
        public static VMSize Standard_D4as_v4 { get; } = new VMSize("Standard_D4as_v4");
        public static VMSize Standard_D4s_v3 { get; } = new VMSize("Standard_D4s_v3");
        public static VMSize Standard_D8as_v4 { get; } = new VMSize("Standard_D8as_v4");
        public static VMSize Standard_D8s_v3 { get; } = new VMSize("Standard_D8s_v3");
        public static VMSize Standard_E16s_v3 { get; } = new VMSize("Standard_E16s_v3");
        public static VMSize Standard_E32s_v3 { get; } = new VMSize("Standard_E32s_v3");
        public static VMSize Standard_E4s_v3 { get; } = new VMSize("Standard_E4s_v3");
        public static VMSize Standard_E8s_v3 { get; } = new VMSize("Standard_E8s_v3");
        public static VMSize Standard_F16s_v2 { get; } = new VMSize("Standard_F16s_v2");
        public static VMSize Standard_F32s_v2 { get; } = new VMSize("Standard_F32s_v2");
        public static VMSize Standard_F4s_v2 { get; } = new VMSize("Standard_F4s_v2");
        public static VMSize Standard_F8s_v2 { get; } = new VMSize("Standard_F8s_v2");

        public static bool operator ==(VMSize left, VMSize right) => left.Equals(right);
        public static bool operator !=(VMSize left, VMSize right) => !left.Equals(right);

        public static explicit operator string(VMSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMSize other && Equals(other);
        public bool Equals(VMSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
