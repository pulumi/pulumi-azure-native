// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RedHatOpenShift.V20210901Preview
{
    /// <summary>
    /// Whether master virtual machines are encrypted at host.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionAtHost : IEquatable<EncryptionAtHost>
    {
        private readonly string _value;

        private EncryptionAtHost(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionAtHost Disabled { get; } = new EncryptionAtHost("Disabled");
        public static EncryptionAtHost Enabled { get; } = new EncryptionAtHost("Enabled");

        public static bool operator ==(EncryptionAtHost left, EncryptionAtHost right) => left.Equals(right);
        public static bool operator !=(EncryptionAtHost left, EncryptionAtHost right) => !left.Equals(right);

        public static explicit operator string(EncryptionAtHost value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionAtHost other && Equals(other);
        public bool Equals(EncryptionAtHost other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The software defined network (SDN) to use when installing the cluster.
    /// </summary>
    [EnumType]
    public readonly struct SoftwareDefinedNetwork : IEquatable<SoftwareDefinedNetwork>
    {
        private readonly string _value;

        private SoftwareDefinedNetwork(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SoftwareDefinedNetwork OVNKubernetes { get; } = new SoftwareDefinedNetwork("OVNKubernetes");
        public static SoftwareDefinedNetwork OpenShiftSDN { get; } = new SoftwareDefinedNetwork("OpenShiftSDN");

        public static bool operator ==(SoftwareDefinedNetwork left, SoftwareDefinedNetwork right) => left.Equals(right);
        public static bool operator !=(SoftwareDefinedNetwork left, SoftwareDefinedNetwork right) => !left.Equals(right);

        public static explicit operator string(SoftwareDefinedNetwork value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoftwareDefinedNetwork other && Equals(other);
        public bool Equals(SoftwareDefinedNetwork other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The size of the worker VMs.
    /// </summary>
    [EnumType]
    public readonly struct VMSize : IEquatable<VMSize>
    {
        private readonly string _value;

        private VMSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VMSize Standard_D16as_v4 { get; } = new VMSize("Standard_D16as_v4");
        public static VMSize Standard_D16s_v3 { get; } = new VMSize("Standard_D16s_v3");
        public static VMSize Standard_D2s_v3 { get; } = new VMSize("Standard_D2s_v3");
        public static VMSize Standard_D32as_v4 { get; } = new VMSize("Standard_D32as_v4");
        public static VMSize Standard_D32s_v3 { get; } = new VMSize("Standard_D32s_v3");
        public static VMSize Standard_D4as_v4 { get; } = new VMSize("Standard_D4as_v4");
        public static VMSize Standard_D4s_v3 { get; } = new VMSize("Standard_D4s_v3");
        public static VMSize Standard_D8as_v4 { get; } = new VMSize("Standard_D8as_v4");
        public static VMSize Standard_D8s_v3 { get; } = new VMSize("Standard_D8s_v3");
        public static VMSize Standard_E16s_v3 { get; } = new VMSize("Standard_E16s_v3");
        public static VMSize Standard_E32s_v3 { get; } = new VMSize("Standard_E32s_v3");
        public static VMSize Standard_E4s_v3 { get; } = new VMSize("Standard_E4s_v3");
        public static VMSize Standard_E64i_v3 { get; } = new VMSize("Standard_E64i_v3");
        public static VMSize Standard_E64is_v3 { get; } = new VMSize("Standard_E64is_v3");
        public static VMSize Standard_E8s_v3 { get; } = new VMSize("Standard_E8s_v3");
        public static VMSize Standard_F16s_v2 { get; } = new VMSize("Standard_F16s_v2");
        public static VMSize Standard_F32s_v2 { get; } = new VMSize("Standard_F32s_v2");
        public static VMSize Standard_F4s_v2 { get; } = new VMSize("Standard_F4s_v2");
        public static VMSize Standard_F72s_v2 { get; } = new VMSize("Standard_F72s_v2");
        public static VMSize Standard_F8s_v2 { get; } = new VMSize("Standard_F8s_v2");
        public static VMSize Standard_G5 { get; } = new VMSize("Standard_G5");
        public static VMSize Standard_GS5 { get; } = new VMSize("Standard_GS5");
        public static VMSize Standard_M128ms { get; } = new VMSize("Standard_M128ms");

        public static bool operator ==(VMSize left, VMSize right) => left.Equals(right);
        public static bool operator !=(VMSize left, VMSize right) => !left.Equals(right);

        public static explicit operator string(VMSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VMSize other && Equals(other);
        public bool Equals(VMSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress visibility.
    /// </summary>
    [EnumType]
    public readonly struct Visibility : IEquatable<Visibility>
    {
        private readonly string _value;

        private Visibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Visibility Private { get; } = new Visibility("Private");
        public static Visibility Public { get; } = new Visibility("Public");

        public static bool operator ==(Visibility left, Visibility right) => left.Equals(right);
        public static bool operator !=(Visibility left, Visibility right) => !left.Equals(right);

        public static explicit operator string(Visibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Visibility other && Equals(other);
        public bool Equals(Visibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
