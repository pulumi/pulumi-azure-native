// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RedHatOpenShift.V20231122
{
    /// <summary>
    /// Whether master virtual machines are encrypted at host.
    /// </summary>
    [EnumType]
    public readonly struct EncryptionAtHost : IEquatable<EncryptionAtHost>
    {
        private readonly string _value;

        private EncryptionAtHost(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EncryptionAtHost Disabled { get; } = new EncryptionAtHost("Disabled");
        public static EncryptionAtHost Enabled { get; } = new EncryptionAtHost("Enabled");

        public static bool operator ==(EncryptionAtHost left, EncryptionAtHost right) => left.Equals(right);
        public static bool operator !=(EncryptionAtHost left, EncryptionAtHost right) => !left.Equals(right);

        public static explicit operator string(EncryptionAtHost value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EncryptionAtHost other && Equals(other);
        public bool Equals(EncryptionAtHost other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If FIPS validated crypto modules are used
    /// </summary>
    [EnumType]
    public readonly struct FipsValidatedModules : IEquatable<FipsValidatedModules>
    {
        private readonly string _value;

        private FipsValidatedModules(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FipsValidatedModules Disabled { get; } = new FipsValidatedModules("Disabled");
        public static FipsValidatedModules Enabled { get; } = new FipsValidatedModules("Enabled");

        public static bool operator ==(FipsValidatedModules left, FipsValidatedModules right) => left.Equals(right);
        public static bool operator !=(FipsValidatedModules left, FipsValidatedModules right) => !left.Equals(right);

        public static explicit operator string(FipsValidatedModules value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FipsValidatedModules other && Equals(other);
        public bool Equals(FipsValidatedModules other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OutboundType used for egress traffic.
    /// </summary>
    [EnumType]
    public readonly struct OutboundType : IEquatable<OutboundType>
    {
        private readonly string _value;

        private OutboundType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OutboundType Loadbalancer { get; } = new OutboundType("Loadbalancer");
        public static OutboundType UserDefinedRouting { get; } = new OutboundType("UserDefinedRouting");

        public static bool operator ==(OutboundType left, OutboundType right) => left.Equals(right);
        public static bool operator !=(OutboundType left, OutboundType right) => !left.Equals(right);

        public static explicit operator string(OutboundType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OutboundType other && Equals(other);
        public bool Equals(OutboundType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether subnets are pre-attached with an NSG
    /// </summary>
    [EnumType]
    public readonly struct PreconfiguredNSG : IEquatable<PreconfiguredNSG>
    {
        private readonly string _value;

        private PreconfiguredNSG(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreconfiguredNSG Disabled { get; } = new PreconfiguredNSG("Disabled");
        public static PreconfiguredNSG Enabled { get; } = new PreconfiguredNSG("Enabled");

        public static bool operator ==(PreconfiguredNSG left, PreconfiguredNSG right) => left.Equals(right);
        public static bool operator !=(PreconfiguredNSG left, PreconfiguredNSG right) => !left.Equals(right);

        public static explicit operator string(PreconfiguredNSG value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreconfiguredNSG other && Equals(other);
        public bool Equals(PreconfiguredNSG other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The cluster provisioning state.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState AdminUpdating { get; } = new ProvisioningState("AdminUpdating");
        public static ProvisioningState Canceled { get; } = new ProvisioningState("Canceled");
        public static ProvisioningState Creating { get; } = new ProvisioningState("Creating");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Updating { get; } = new ProvisioningState("Updating");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress visibility.
    /// </summary>
    [EnumType]
    public readonly struct Visibility : IEquatable<Visibility>
    {
        private readonly string _value;

        private Visibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Visibility Private { get; } = new Visibility("Private");
        public static Visibility Public { get; } = new Visibility("Public");

        public static bool operator ==(Visibility left, Visibility right) => left.Equals(right);
        public static bool operator !=(Visibility left, Visibility right) => !left.Equals(right);

        public static explicit operator string(Visibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Visibility other && Equals(other);
        public bool Equals(Visibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
