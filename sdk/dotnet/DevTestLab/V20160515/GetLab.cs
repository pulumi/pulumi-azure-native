// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20160515
{
    public static class GetLab
    {
        public static Task<GetLabResult> InvokeAsync(GetLabArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLabResult>("azure-nextgen:devtestlab/v20160515:getLab", args ?? new GetLabArgs(), options.WithVersion());
    }


    public sealed class GetLabArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLabArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLabResult
    {
        /// <summary>
        /// The lab's artifact storage account.
        /// </summary>
        public readonly string ArtifactsStorageAccount;
        /// <summary>
        /// The creation date of the lab.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The lab's default premium storage account.
        /// </summary>
        public readonly string DefaultPremiumStorageAccount;
        /// <summary>
        /// The lab's default storage account.
        /// </summary>
        public readonly string DefaultStorageAccount;
        /// <summary>
        /// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
        /// </summary>
        public readonly string? LabStorageType;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The lab's premium data disk storage account.
        /// </summary>
        public readonly string PremiumDataDiskStorageAccount;
        /// <summary>
        /// The setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks is allowed.
        /// </summary>
        public readonly string? PremiumDataDisks;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        public readonly string? UniqueIdentifier;
        /// <summary>
        /// The lab's Key vault.
        /// </summary>
        public readonly string VaultName;

        [OutputConstructor]
        private GetLabResult(
            string artifactsStorageAccount,

            string createdDate,

            string defaultPremiumStorageAccount,

            string defaultStorageAccount,

            string? labStorageType,

            string? location,

            string name,

            string premiumDataDiskStorageAccount,

            string? premiumDataDisks,

            string? provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? uniqueIdentifier,

            string vaultName)
        {
            ArtifactsStorageAccount = artifactsStorageAccount;
            CreatedDate = createdDate;
            DefaultPremiumStorageAccount = defaultPremiumStorageAccount;
            DefaultStorageAccount = defaultStorageAccount;
            LabStorageType = labStorageType;
            Location = location;
            Name = name;
            PremiumDataDiskStorageAccount = premiumDataDiskStorageAccount;
            PremiumDataDisks = premiumDataDisks;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            UniqueIdentifier = uniqueIdentifier;
            VaultName = vaultName;
        }
    }
}
