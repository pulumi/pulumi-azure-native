// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20160515.Inputs
{

    /// <summary>
    /// Properties of a virtual machine returned by the Microsoft.Compute API.
    /// </summary>
    public sealed class ComputeVmPropertiesArgs : Pulumi.ResourceArgs
    {
        [Input("dataDiskIds")]
        private InputList<string>? _dataDiskIds;

        /// <summary>
        /// Gets data disks blob uri for the virtual machine.
        /// </summary>
        public InputList<string> DataDiskIds
        {
            get => _dataDiskIds ?? (_dataDiskIds = new InputList<string>());
            set => _dataDiskIds = value;
        }

        [Input("dataDisks")]
        private InputList<Inputs.ComputeDataDiskArgs>? _dataDisks;

        /// <summary>
        /// Gets all data disks attached to the virtual machine.
        /// </summary>
        public InputList<Inputs.ComputeDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.ComputeDataDiskArgs>());
            set => _dataDisks = value;
        }

        /// <summary>
        /// Gets the network interface ID of the virtual machine.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// Gets OS disk blob uri for the virtual machine.
        /// </summary>
        [Input("osDiskId")]
        public Input<string>? OsDiskId { get; set; }

        /// <summary>
        /// Gets the OS type of the virtual machine.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("statuses")]
        private InputList<Inputs.ComputeVmInstanceViewStatusArgs>? _statuses;

        /// <summary>
        /// Gets the statuses of the virtual machine.
        /// </summary>
        public InputList<Inputs.ComputeVmInstanceViewStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.ComputeVmInstanceViewStatusArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// Gets the size of the virtual machine.
        /// </summary>
        [Input("vmSize")]
        public Input<string>? VmSize { get; set; }

        public ComputeVmPropertiesArgs()
        {
        }
    }
}
