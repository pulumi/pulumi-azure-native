// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20180915
{
    public static class GetDisk
    {
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("azure-nextgen:devtestlab/v20180915:getDisk", args ?? new GetDiskArgs(), options.WithVersion());
    }


    public sealed class GetDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the $expand query. Example: 'properties($select=diskType)'
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the disk.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the user profile.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetDiskArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        /// <summary>
        /// The creation date of the disk.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// When backed by a blob, the name of the VHD blob without extension.
        /// </summary>
        public readonly string? DiskBlobName;
        /// <summary>
        /// The size of the disk in GibiBytes.
        /// </summary>
        public readonly int? DiskSizeGiB;
        /// <summary>
        /// The storage type for the disk (i.e. Standard, Premium).
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// When backed by a blob, the URI of underlying blob.
        /// </summary>
        public readonly string? DiskUri;
        /// <summary>
        /// The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
        /// </summary>
        public readonly string? HostCaching;
        /// <summary>
        /// The resource ID of the VM to which this disk is leased.
        /// </summary>
        public readonly string? LeasedByLabVmId;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// When backed by managed disk, this is the ID of the compute disk resource.
        /// </summary>
        public readonly string? ManagedDiskId;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        public readonly string UniqueIdentifier;

        [OutputConstructor]
        private GetDiskResult(
            string createdDate,

            string? diskBlobName,

            int? diskSizeGiB,

            string? diskType,

            string? diskUri,

            string? hostCaching,

            string? leasedByLabVmId,

            string? location,

            string? managedDiskId,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uniqueIdentifier)
        {
            CreatedDate = createdDate;
            DiskBlobName = diskBlobName;
            DiskSizeGiB = diskSizeGiB;
            DiskType = diskType;
            DiskUri = diskUri;
            HostCaching = hostCaching;
            LeasedByLabVmId = leasedByLabVmId;
            Location = location;
            ManagedDiskId = managedDiskId;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            UniqueIdentifier = uniqueIdentifier;
        }
    }
}
