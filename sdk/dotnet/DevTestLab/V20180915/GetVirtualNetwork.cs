// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20180915
{
    public static class GetVirtualNetwork
    {
        public static Task<GetVirtualNetworkResult> InvokeAsync(GetVirtualNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkResult>("azure-nextgen:devtestlab/v20180915:getVirtualNetwork", args ?? new GetVirtualNetworkArgs(), options.WithVersion());
    }


    public sealed class GetVirtualNetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the $expand query. Example: 'properties($expand=externalSubnets)'
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVirtualNetworkArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualNetworkResult
    {
        /// <summary>
        /// The allowed subnets of the virtual network.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetResponse> AllowedSubnets;
        /// <summary>
        /// The creation date of the virtual network.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The description of the virtual network.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The Microsoft.Network resource identifier of the virtual network.
        /// </summary>
        public readonly string? ExternalProviderResourceId;
        /// <summary>
        /// The external subnet properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.ExternalSubnetResponse> ExternalSubnets;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The subnet overrides of the virtual network.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetOverrideResponse> SubnetOverrides;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        public readonly string UniqueIdentifier;

        [OutputConstructor]
        private GetVirtualNetworkResult(
            ImmutableArray<Outputs.SubnetResponse> allowedSubnets,

            string createdDate,

            string? description,

            string? externalProviderResourceId,

            ImmutableArray<Outputs.ExternalSubnetResponse> externalSubnets,

            string? location,

            string name,

            string provisioningState,

            ImmutableArray<Outputs.SubnetOverrideResponse> subnetOverrides,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uniqueIdentifier)
        {
            AllowedSubnets = allowedSubnets;
            CreatedDate = createdDate;
            Description = description;
            ExternalProviderResourceId = externalProviderResourceId;
            ExternalSubnets = externalSubnets;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SubnetOverrides = subnetOverrides;
            Tags = tags;
            Type = type;
            UniqueIdentifier = uniqueIdentifier;
        }
    }
}
