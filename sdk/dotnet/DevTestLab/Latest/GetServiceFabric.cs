// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.Latest
{
    public static class GetServiceFabric
    {
        public static Task<GetServiceFabricResult> InvokeAsync(GetServiceFabricArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceFabricResult>("azure-nextgen:devtestlab/latest:getServiceFabric", args ?? new GetServiceFabricArgs(), options.WithVersion());
    }


    public sealed class GetServiceFabricArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the $expand query. Example: 'properties($expand=applicableSchedule)'
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the service fabric.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the user profile.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetServiceFabricArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceFabricResult
    {
        /// <summary>
        /// The applicable schedule for the virtual machine.
        /// </summary>
        public readonly Outputs.ApplicableScheduleResponse ApplicableSchedule;
        /// <summary>
        /// The resource id of the environment under which the service fabric resource is present
        /// </summary>
        public readonly string? EnvironmentId;
        /// <summary>
        /// The backing service fabric resource's id
        /// </summary>
        public readonly string? ExternalServiceFabricId;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        public readonly string UniqueIdentifier;

        [OutputConstructor]
        private GetServiceFabricResult(
            Outputs.ApplicableScheduleResponse applicableSchedule,

            string? environmentId,

            string? externalServiceFabricId,

            string? location,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uniqueIdentifier)
        {
            ApplicableSchedule = applicableSchedule;
            EnvironmentId = environmentId;
            ExternalServiceFabricId = externalServiceFabricId;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            UniqueIdentifier = uniqueIdentifier;
        }
    }
}
