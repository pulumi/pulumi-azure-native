// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.Latest
{
    public static class GetNotificationChannel
    {
        public static Task<GetNotificationChannelResult> InvokeAsync(GetNotificationChannelArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNotificationChannelResult>("azure-nextgen:devtestlab/latest:getNotificationChannel", args ?? new GetNotificationChannelArgs(), options.WithVersion());
    }


    public sealed class GetNotificationChannelArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify the $expand query. Example: 'properties($select=webHookUrl)'
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the notification channel.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNotificationChannelArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNotificationChannelResult
    {
        /// <summary>
        /// The creation date of the notification channel.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Description of notification.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
        /// </summary>
        public readonly string? EmailRecipient;
        /// <summary>
        /// The list of event for which this notification is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventResponse> Events;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The locale to use when sending a notification (fallback for unsupported languages is EN).
        /// </summary>
        public readonly string? NotificationLocale;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The unique immutable identifier of a resource (Guid).
        /// </summary>
        public readonly string UniqueIdentifier;
        /// <summary>
        /// The webhook URL to send notifications to.
        /// </summary>
        public readonly string? WebHookUrl;

        [OutputConstructor]
        private GetNotificationChannelResult(
            string createdDate,

            string? description,

            string? emailRecipient,

            ImmutableArray<Outputs.EventResponse> events,

            string? location,

            string name,

            string? notificationLocale,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uniqueIdentifier,

            string? webHookUrl)
        {
            CreatedDate = createdDate;
            Description = description;
            EmailRecipient = emailRecipient;
            Events = events;
            Location = location;
            Name = name;
            NotificationLocale = notificationLocale;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            UniqueIdentifier = uniqueIdentifier;
            WebHookUrl = webHookUrl;
        }
    }
}
