// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20150521Preview
{
    /// <summary>
    /// A virtual machine.
    /// </summary>
    public partial class VirtualMachineResource : Pulumi.CustomResource
    {
        /// <summary>
        /// The artifact deployment status for the virtual machine.
        /// </summary>
        [Output("artifactDeploymentStatus")]
        public Output<Outputs.ArtifactDeploymentStatusPropertiesResponse?> ArtifactDeploymentStatus { get; private set; } = null!;

        /// <summary>
        /// The artifacts to be installed on the virtual machine.
        /// </summary>
        [Output("artifacts")]
        public Output<ImmutableArray<Outputs.ArtifactInstallPropertiesResponse>> Artifacts { get; private set; } = null!;

        /// <summary>
        /// The resource identifier (Microsoft.Compute) of the virtual machine.
        /// </summary>
        [Output("computeId")]
        public Output<string?> ComputeId { get; private set; } = null!;

        /// <summary>
        /// The email address of creator of the virtual machine.
        /// </summary>
        [Output("createdByUser")]
        public Output<string?> CreatedByUser { get; private set; } = null!;

        /// <summary>
        /// The object identifier of the creator of the virtual machine.
        /// </summary>
        [Output("createdByUserId")]
        public Output<string?> CreatedByUserId { get; private set; } = null!;

        /// <summary>
        /// The custom image identifier of the virtual machine.
        /// </summary>
        [Output("customImageId")]
        public Output<string?> CustomImageId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the virtual machine is to be created without a public IP address.
        /// </summary>
        [Output("disallowPublicIpAddress")]
        public Output<bool?> DisallowPublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// The fully-qualified domain name of the virtual machine.
        /// </summary>
        [Output("fqdn")]
        public Output<string?> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The Microsoft Azure Marketplace image reference of the virtual machine.
        /// </summary>
        [Output("galleryImageReference")]
        public Output<Outputs.GalleryImageReferenceResponse?> GalleryImageReference { get; private set; } = null!;

        /// <summary>
        /// A value indicating whether this virtual machine uses an SSH key for authentication.
        /// </summary>
        [Output("isAuthenticationWithSshKey")]
        public Output<bool?> IsAuthenticationWithSshKey { get; private set; } = null!;

        /// <summary>
        /// The lab subnet name of the virtual machine.
        /// </summary>
        [Output("labSubnetName")]
        public Output<string?> LabSubnetName { get; private set; } = null!;

        /// <summary>
        /// The lab virtual network identifier of the virtual machine.
        /// </summary>
        [Output("labVirtualNetworkId")]
        public Output<string?> LabVirtualNetworkId { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The notes of the virtual machine.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// The OS type of the virtual machine.
        /// </summary>
        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        /// <summary>
        /// The object identifier of the owner of the virtual machine.
        /// </summary>
        [Output("ownerObjectId")]
        public Output<string?> OwnerObjectId { get; private set; } = null!;

        /// <summary>
        /// The password of the virtual machine administrator.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string?> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The size of the virtual machine.
        /// </summary>
        [Output("size")]
        public Output<string?> Size { get; private set; } = null!;

        /// <summary>
        /// The SSH key of the virtual machine administrator.
        /// </summary>
        [Output("sshKey")]
        public Output<string?> SshKey { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The user name of the virtual machine.
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineResource(string name, VirtualMachineResourceArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:devtestlab/v20150521preview:VirtualMachineResource", name, args ?? new VirtualMachineResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineResource(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:devtestlab/v20150521preview:VirtualMachineResource", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/latest:VirtualMachineResource"},
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/v20160515:VirtualMachineResource"},
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/v20180915:VirtualMachineResource"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineResource Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachineResource(name, id, options);
        }
    }

    public sealed class VirtualMachineResourceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The artifact deployment status for the virtual machine.
        /// </summary>
        [Input("artifactDeploymentStatus")]
        public Input<Inputs.ArtifactDeploymentStatusPropertiesArgs>? ArtifactDeploymentStatus { get; set; }

        [Input("artifacts")]
        private InputList<Inputs.ArtifactInstallPropertiesArgs>? _artifacts;

        /// <summary>
        /// The artifacts to be installed on the virtual machine.
        /// </summary>
        public InputList<Inputs.ArtifactInstallPropertiesArgs> Artifacts
        {
            get => _artifacts ?? (_artifacts = new InputList<Inputs.ArtifactInstallPropertiesArgs>());
            set => _artifacts = value;
        }

        /// <summary>
        /// The resource identifier (Microsoft.Compute) of the virtual machine.
        /// </summary>
        [Input("computeId")]
        public Input<string>? ComputeId { get; set; }

        /// <summary>
        /// The email address of creator of the virtual machine.
        /// </summary>
        [Input("createdByUser")]
        public Input<string>? CreatedByUser { get; set; }

        /// <summary>
        /// The object identifier of the creator of the virtual machine.
        /// </summary>
        [Input("createdByUserId")]
        public Input<string>? CreatedByUserId { get; set; }

        /// <summary>
        /// The custom image identifier of the virtual machine.
        /// </summary>
        [Input("customImageId")]
        public Input<string>? CustomImageId { get; set; }

        /// <summary>
        /// Indicates whether the virtual machine is to be created without a public IP address.
        /// </summary>
        [Input("disallowPublicIpAddress")]
        public Input<bool>? DisallowPublicIpAddress { get; set; }

        /// <summary>
        /// The fully-qualified domain name of the virtual machine.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The Microsoft Azure Marketplace image reference of the virtual machine.
        /// </summary>
        [Input("galleryImageReference")]
        public Input<Inputs.GalleryImageReferenceArgs>? GalleryImageReference { get; set; }

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A value indicating whether this virtual machine uses an SSH key for authentication.
        /// </summary>
        [Input("isAuthenticationWithSshKey")]
        public Input<bool>? IsAuthenticationWithSshKey { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The lab subnet name of the virtual machine.
        /// </summary>
        [Input("labSubnetName")]
        public Input<string>? LabSubnetName { get; set; }

        /// <summary>
        /// The lab virtual network identifier of the virtual machine.
        /// </summary>
        [Input("labVirtualNetworkId")]
        public Input<string>? LabVirtualNetworkId { get; set; }

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The notes of the virtual machine.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The OS type of the virtual machine.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The object identifier of the owner of the virtual machine.
        /// </summary>
        [Input("ownerObjectId")]
        public Input<string>? OwnerObjectId { get; set; }

        /// <summary>
        /// The password of the virtual machine administrator.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The size of the virtual machine.
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        /// <summary>
        /// The SSH key of the virtual machine administrator.
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The user name of the virtual machine.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public VirtualMachineResourceArgs()
        {
        }
    }
}
