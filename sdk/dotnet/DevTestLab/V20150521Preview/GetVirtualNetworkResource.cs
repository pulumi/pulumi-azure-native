// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DevTestLab.V20150521Preview
{
    [Obsolete(@"Version 2015-05-21-preview will be removed in v2 of the provider.")]
    public static class GetVirtualNetworkResource
    {
        /// <summary>
        /// Get virtual network.
        /// </summary>
        public static Task<GetVirtualNetworkResourceResult> InvokeAsync(GetVirtualNetworkResourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkResourceResult>("azure-native:devtestlab/v20150521preview:getVirtualNetworkResource", args ?? new GetVirtualNetworkResourceArgs(), options.WithDefaults());

        /// <summary>
        /// Get virtual network.
        /// </summary>
        public static Output<GetVirtualNetworkResourceResult> Invoke(GetVirtualNetworkResourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkResourceResult>("azure-native:devtestlab/v20150521preview:getVirtualNetworkResource", args ?? new GetVirtualNetworkResourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualNetworkResourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVirtualNetworkResourceArgs()
        {
        }
        public static new GetVirtualNetworkResourceArgs Empty => new GetVirtualNetworkResourceArgs();
    }

    public sealed class GetVirtualNetworkResourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetVirtualNetworkResourceInvokeArgs()
        {
        }
        public static new GetVirtualNetworkResourceInvokeArgs Empty => new GetVirtualNetworkResourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualNetworkResourceResult
    {
        /// <summary>
        /// The allowed subnets of the virtual network.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetResponse> AllowedSubnets;
        /// <summary>
        /// The description of the virtual network.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The Microsoft.Network resource identifier of the virtual network.
        /// </summary>
        public readonly string? ExternalProviderResourceId;
        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The subnet overrides of the virtual network.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetOverrideResponse> SubnetOverrides;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetVirtualNetworkResourceResult(
            ImmutableArray<Outputs.SubnetResponse> allowedSubnets,

            string? description,

            string? externalProviderResourceId,

            string? id,

            string? location,

            string? name,

            string? provisioningState,

            ImmutableArray<Outputs.SubnetOverrideResponse> subnetOverrides,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            AllowedSubnets = allowedSubnets;
            Description = description;
            ExternalProviderResourceId = externalProviderResourceId;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            SubnetOverrides = subnetOverrides;
            Tags = tags;
            Type = type;
        }
    }
}
