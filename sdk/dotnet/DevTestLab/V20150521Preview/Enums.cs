// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DevTestLab.V20150521Preview
{
    /// <summary>
    /// The OS type of the custom image.
    /// </summary>
    [EnumType]
    public readonly struct CustomImageOsType : IEquatable<CustomImageOsType>
    {
        private readonly string _value;

        private CustomImageOsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomImageOsType Windows { get; } = new CustomImageOsType("Windows");
        public static CustomImageOsType Linux { get; } = new CustomImageOsType("Linux");
        public static CustomImageOsType None { get; } = new CustomImageOsType("None");

        public static bool operator ==(CustomImageOsType left, CustomImageOsType right) => left.Equals(right);
        public static bool operator !=(CustomImageOsType left, CustomImageOsType right) => !left.Equals(right);

        public static explicit operator string(CustomImageOsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomImageOsType other && Equals(other);
        public bool Equals(CustomImageOsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the schedule.
    /// </summary>
    [EnumType]
    public readonly struct EnableStatus : IEquatable<EnableStatus>
    {
        private readonly string _value;

        private EnableStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnableStatus Enabled { get; } = new EnableStatus("Enabled");
        public static EnableStatus Disabled { get; } = new EnableStatus("Disabled");

        public static bool operator ==(EnableStatus left, EnableStatus right) => left.Equals(right);
        public static bool operator !=(EnableStatus left, EnableStatus right) => !left.Equals(right);

        public static explicit operator string(EnableStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnableStatus other && Equals(other);
        public bool Equals(EnableStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the lab storage.
    /// </summary>
    [EnumType]
    public readonly struct LabStorageType : IEquatable<LabStorageType>
    {
        private readonly string _value;

        private LabStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LabStorageType Standard { get; } = new LabStorageType("Standard");
        public static LabStorageType Premium { get; } = new LabStorageType("Premium");

        public static bool operator ==(LabStorageType left, LabStorageType right) => left.Equals(right);
        public static bool operator !=(LabStorageType left, LabStorageType right) => !left.Equals(right);

        public static explicit operator string(LabStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LabStorageType other && Equals(other);
        public bool Equals(LabStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the Linux OS.
    /// </summary>
    [EnumType]
    public readonly struct LinuxOsState : IEquatable<LinuxOsState>
    {
        private readonly string _value;

        private LinuxOsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinuxOsState NonDeprovisioned { get; } = new LinuxOsState("NonDeprovisioned");
        public static LinuxOsState DeprovisionRequested { get; } = new LinuxOsState("DeprovisionRequested");
        public static LinuxOsState DeprovisionApplied { get; } = new LinuxOsState("DeprovisionApplied");

        public static bool operator ==(LinuxOsState left, LinuxOsState right) => left.Equals(right);
        public static bool operator !=(LinuxOsState left, LinuxOsState right) => !left.Equals(right);

        public static explicit operator string(LinuxOsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinuxOsState other && Equals(other);
        public bool Equals(LinuxOsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The evaluator type of the policy.
    /// </summary>
    [EnumType]
    public readonly struct PolicyEvaluatorType : IEquatable<PolicyEvaluatorType>
    {
        private readonly string _value;

        private PolicyEvaluatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyEvaluatorType AllowedValuesPolicy { get; } = new PolicyEvaluatorType("AllowedValuesPolicy");
        public static PolicyEvaluatorType MaxValuePolicy { get; } = new PolicyEvaluatorType("MaxValuePolicy");

        public static bool operator ==(PolicyEvaluatorType left, PolicyEvaluatorType right) => left.Equals(right);
        public static bool operator !=(PolicyEvaluatorType left, PolicyEvaluatorType right) => !left.Equals(right);

        public static explicit operator string(PolicyEvaluatorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyEvaluatorType other && Equals(other);
        public bool Equals(PolicyEvaluatorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The fact name of the policy.
    /// </summary>
    [EnumType]
    public readonly struct PolicyFactName : IEquatable<PolicyFactName>
    {
        private readonly string _value;

        private PolicyFactName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyFactName UserOwnedLabVmCount { get; } = new PolicyFactName("UserOwnedLabVmCount");
        public static PolicyFactName LabVmCount { get; } = new PolicyFactName("LabVmCount");
        public static PolicyFactName LabVmSize { get; } = new PolicyFactName("LabVmSize");
        public static PolicyFactName GalleryImage { get; } = new PolicyFactName("GalleryImage");
        public static PolicyFactName UserOwnedLabVmCountInSubnet { get; } = new PolicyFactName("UserOwnedLabVmCountInSubnet");

        public static bool operator ==(PolicyFactName left, PolicyFactName right) => left.Equals(right);
        public static bool operator !=(PolicyFactName left, PolicyFactName right) => !left.Equals(right);

        public static explicit operator string(PolicyFactName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyFactName other && Equals(other);
        public bool Equals(PolicyFactName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the policy.
    /// </summary>
    [EnumType]
    public readonly struct PolicyStatus : IEquatable<PolicyStatus>
    {
        private readonly string _value;

        private PolicyStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyStatus Enabled { get; } = new PolicyStatus("Enabled");
        public static PolicyStatus Disabled { get; } = new PolicyStatus("Disabled");

        public static bool operator ==(PolicyStatus left, PolicyStatus right) => left.Equals(right);
        public static bool operator !=(PolicyStatus left, PolicyStatus right) => !left.Equals(right);

        public static explicit operator string(PolicyStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyStatus other && Equals(other);
        public bool Equals(PolicyStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the artifact source.
    /// </summary>
    [EnumType]
    public readonly struct SourceControlType : IEquatable<SourceControlType>
    {
        private readonly string _value;

        private SourceControlType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceControlType VsoGit { get; } = new SourceControlType("VsoGit");
        public static SourceControlType GitHub { get; } = new SourceControlType("GitHub");

        public static bool operator ==(SourceControlType left, SourceControlType right) => left.Equals(right);
        public static bool operator !=(SourceControlType left, SourceControlType right) => !left.Equals(right);

        public static explicit operator string(SourceControlType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceControlType other && Equals(other);
        public bool Equals(SourceControlType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The task type of the schedule.
    /// </summary>
    [EnumType]
    public readonly struct TaskType : IEquatable<TaskType>
    {
        private readonly string _value;

        private TaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TaskType LabVmsShutdownTask { get; } = new TaskType("LabVmsShutdownTask");
        public static TaskType LabVmsStartupTask { get; } = new TaskType("LabVmsStartupTask");
        public static TaskType LabBillingTask { get; } = new TaskType("LabBillingTask");

        public static bool operator ==(TaskType left, TaskType right) => left.Equals(right);
        public static bool operator !=(TaskType left, TaskType right) => !left.Equals(right);

        public static explicit operator string(TaskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskType other && Equals(other);
        public bool Equals(TaskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether public IP addresses can be assigned to virtual machines on this subnet.
    /// </summary>
    [EnumType]
    public readonly struct UsagePermissionType : IEquatable<UsagePermissionType>
    {
        private readonly string _value;

        private UsagePermissionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UsagePermissionType Default { get; } = new UsagePermissionType("Default");
        public static UsagePermissionType Deny { get; } = new UsagePermissionType("Deny");
        public static UsagePermissionType Allow { get; } = new UsagePermissionType("Allow");

        public static bool operator ==(UsagePermissionType left, UsagePermissionType right) => left.Equals(right);
        public static bool operator !=(UsagePermissionType left, UsagePermissionType right) => !left.Equals(right);

        public static explicit operator string(UsagePermissionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UsagePermissionType other && Equals(other);
        public bool Equals(UsagePermissionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the Windows OS.
    /// </summary>
    [EnumType]
    public readonly struct WindowsOsState : IEquatable<WindowsOsState>
    {
        private readonly string _value;

        private WindowsOsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WindowsOsState NonSysprepped { get; } = new WindowsOsState("NonSysprepped");
        public static WindowsOsState SysprepRequested { get; } = new WindowsOsState("SysprepRequested");
        public static WindowsOsState SysprepApplied { get; } = new WindowsOsState("SysprepApplied");

        public static bool operator ==(WindowsOsState left, WindowsOsState right) => left.Equals(right);
        public static bool operator !=(WindowsOsState left, WindowsOsState right) => !left.Equals(right);

        public static explicit operator string(WindowsOsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WindowsOsState other && Equals(other);
        public bool Equals(WindowsOsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
