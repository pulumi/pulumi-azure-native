// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20150521Preview
{
    /// <summary>
    /// Properties of an artifact source.
    /// </summary>
    public partial class ArtifactSourceResource : Pulumi.CustomResource
    {
        /// <summary>
        /// The branch reference of the artifact source.
        /// </summary>
        [Output("branchRef")]
        public Output<string?> BranchRef { get; private set; } = null!;

        /// <summary>
        /// The display name of the artifact source.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The folder path of the artifact source.
        /// </summary>
        [Output("folderPath")]
        public Output<string?> FolderPath { get; private set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string?> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The security token of the artifact source.
        /// </summary>
        [Output("securityToken")]
        public Output<string?> SecurityToken { get; private set; } = null!;

        /// <summary>
        /// The type of the artifact source.
        /// </summary>
        [Output("sourceType")]
        public Output<string?> SourceType { get; private set; } = null!;

        /// <summary>
        /// The status of the artifact source.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The URI of the artifact source.
        /// </summary>
        [Output("uri")]
        public Output<string?> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a ArtifactSourceResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ArtifactSourceResource(string name, ArtifactSourceResourceArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:devtestlab/v20150521preview:ArtifactSourceResource", name, args ?? new ArtifactSourceResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ArtifactSourceResource(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:devtestlab/v20150521preview:ArtifactSourceResource", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/latest:ArtifactSourceResource"},
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/v20160515:ArtifactSourceResource"},
                    new Pulumi.Alias { Type = "azure-nextgen:devtestlab/v20180915:ArtifactSourceResource"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ArtifactSourceResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ArtifactSourceResource Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ArtifactSourceResource(name, id, options);
        }
    }

    public sealed class ArtifactSourceResourceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The branch reference of the artifact source.
        /// </summary>
        [Input("branchRef")]
        public Input<string>? BranchRef { get; set; }

        /// <summary>
        /// The display name of the artifact source.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The folder path of the artifact source.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The identifier of the resource.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public Input<string> LabName { get; set; } = null!;

        /// <summary>
        /// The location of the resource.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        [Input("provisioningState")]
        public Input<string>? ProvisioningState { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The security token of the artifact source.
        /// </summary>
        [Input("securityToken")]
        public Input<string>? SecurityToken { get; set; }

        /// <summary>
        /// The type of the artifact source.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// The status of the artifact source.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The URI of the artifact source.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public ArtifactSourceResourceArgs()
        {
        }
    }
}
