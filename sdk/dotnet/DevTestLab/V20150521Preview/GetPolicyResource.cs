// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DevTestLab.V20150521Preview
{
    public static class GetPolicyResource
    {
        public static Task<GetPolicyResourceResult> InvokeAsync(GetPolicyResourceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyResourceResult>("azure-nextgen:devtestlab/v20150521preview:getPolicyResource", args ?? new GetPolicyResourceArgs(), options.WithVersion());
    }


    public sealed class GetPolicyResourceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the policy set.
        /// </summary>
        [Input("policySetName", required: true)]
        public string PolicySetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPolicyResourceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyResourceResult
    {
        /// <summary>
        /// The description of the policy.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The evaluator type of the policy.
        /// </summary>
        public readonly string? EvaluatorType;
        /// <summary>
        /// The fact data of the policy.
        /// </summary>
        public readonly string? FactData;
        /// <summary>
        /// The fact name of the policy.
        /// </summary>
        public readonly string? FactName;
        /// <summary>
        /// The location of the resource.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The provisioning status of the resource.
        /// </summary>
        public readonly string? ProvisioningState;
        /// <summary>
        /// The status of the policy.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The tags of the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The threshold of the policy.
        /// </summary>
        public readonly string? Threshold;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetPolicyResourceResult(
            string? description,

            string? evaluatorType,

            string? factData,

            string? factName,

            string? location,

            string? name,

            string? provisioningState,

            string? status,

            ImmutableDictionary<string, string>? tags,

            string? threshold,

            string? type)
        {
            Description = description;
            EvaluatorType = evaluatorType;
            FactData = factData;
            FactName = factName;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Status = status;
            Tags = tags;
            Threshold = threshold;
            Type = type;
        }
    }
}
