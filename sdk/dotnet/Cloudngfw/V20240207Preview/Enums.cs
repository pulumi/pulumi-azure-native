// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Cloudngfw.V20240207Preview
{
    /// <summary>
    /// rule action
    /// </summary>
    [EnumType]
    public readonly struct ActionEnum : IEquatable<ActionEnum>
    {
        private readonly string _value;

        private ActionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActionEnum Allow { get; } = new ActionEnum("Allow");
        public static ActionEnum DenySilent { get; } = new ActionEnum("DenySilent");
        public static ActionEnum DenyResetServer { get; } = new ActionEnum("DenyResetServer");
        public static ActionEnum DenyResetBoth { get; } = new ActionEnum("DenyResetBoth");

        public static bool operator ==(ActionEnum left, ActionEnum right) => left.Equals(right);
        public static bool operator !=(ActionEnum left, ActionEnum right) => !left.Equals(right);

        public static explicit operator string(ActionEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActionEnum other && Equals(other);
        public bool Equals(ActionEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// different billing cycles like MONTHLY/WEEKLY
    /// </summary>
    [EnumType]
    public readonly struct BillingCycle : IEquatable<BillingCycle>
    {
        private readonly string _value;

        private BillingCycle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingCycle WEEKLY { get; } = new BillingCycle("WEEKLY");
        public static BillingCycle MONTHLY { get; } = new BillingCycle("MONTHLY");

        public static bool operator ==(BillingCycle left, BillingCycle right) => left.Equals(right);
        public static bool operator !=(BillingCycle left, BillingCycle right) => !left.Equals(right);

        public static explicit operator string(BillingCycle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingCycle other && Equals(other);
        public bool Equals(BillingCycle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// cidr should not be 'any'
    /// </summary>
    [EnumType]
    public readonly struct BooleanEnum : IEquatable<BooleanEnum>
    {
        private readonly string _value;

        private BooleanEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BooleanEnum TRUE { get; } = new BooleanEnum("TRUE");
        public static BooleanEnum FALSE { get; } = new BooleanEnum("FALSE");

        public static bool operator ==(BooleanEnum left, BooleanEnum right) => left.Equals(right);
        public static bool operator !=(BooleanEnum left, BooleanEnum right) => !left.Equals(right);

        public static explicit operator string(BooleanEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BooleanEnum other && Equals(other);
        public bool Equals(BooleanEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable DNS proxy, disabled by default
    /// </summary>
    [EnumType]
    public readonly struct DNSProxy : IEquatable<DNSProxy>
    {
        private readonly string _value;

        private DNSProxy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DNSProxy DISABLED { get; } = new DNSProxy("DISABLED");
        public static DNSProxy ENABLED { get; } = new DNSProxy("ENABLED");

        public static bool operator ==(DNSProxy left, DNSProxy right) => left.Equals(right);
        public static bool operator !=(DNSProxy left, DNSProxy right) => !left.Equals(right);

        public static explicit operator string(DNSProxy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DNSProxy other && Equals(other);
        public bool Equals(DNSProxy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// enable or disable decryption
    /// </summary>
    [EnumType]
    public readonly struct DecryptionRuleTypeEnum : IEquatable<DecryptionRuleTypeEnum>
    {
        private readonly string _value;

        private DecryptionRuleTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DecryptionRuleTypeEnum SSLOutboundInspection { get; } = new DecryptionRuleTypeEnum("SSLOutboundInspection");
        public static DecryptionRuleTypeEnum SSLInboundInspection { get; } = new DecryptionRuleTypeEnum("SSLInboundInspection");
        public static DecryptionRuleTypeEnum None { get; } = new DecryptionRuleTypeEnum("None");

        public static bool operator ==(DecryptionRuleTypeEnum left, DecryptionRuleTypeEnum right) => left.Equals(right);
        public static bool operator !=(DecryptionRuleTypeEnum left, DecryptionRuleTypeEnum right) => !left.Equals(right);

        public static explicit operator string(DecryptionRuleTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DecryptionRuleTypeEnum other && Equals(other);
        public bool Equals(DecryptionRuleTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Mode for default rules creation
    /// </summary>
    [EnumType]
    public readonly struct DefaultMode : IEquatable<DefaultMode>
    {
        private readonly string _value;

        private DefaultMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DefaultMode IPS { get; } = new DefaultMode("IPS");
        public static DefaultMode FIREWALL { get; } = new DefaultMode("FIREWALL");
        public static DefaultMode NONE { get; } = new DefaultMode("NONE");

        public static bool operator ==(DefaultMode left, DefaultMode right) => left.Equals(right);
        public static bool operator !=(DefaultMode left, DefaultMode right) => !left.Equals(right);

        public static explicit operator string(DefaultMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DefaultMode other && Equals(other);
        public bool Equals(DefaultMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable egress NAT, enabled by default
    /// </summary>
    [EnumType]
    public readonly struct EgressNat : IEquatable<EgressNat>
    {
        private readonly string _value;

        private EgressNat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EgressNat DISABLED { get; } = new EgressNat("DISABLED");
        public static EgressNat ENABLED { get; } = new EgressNat("ENABLED");

        public static bool operator ==(EgressNat left, EgressNat right) => left.Equals(right);
        public static bool operator !=(EgressNat left, EgressNat right) => !left.Equals(right);

        public static explicit operator string(EgressNat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EgressNat other && Equals(other);
        public bool Equals(EgressNat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enabled DNS proxy type, disabled by default
    /// </summary>
    [EnumType]
    public readonly struct EnabledDNSType : IEquatable<EnabledDNSType>
    {
        private readonly string _value;

        private EnabledDNSType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnabledDNSType CUSTOM { get; } = new EnabledDNSType("CUSTOM");
        public static EnabledDNSType AZURE { get; } = new EnabledDNSType("AZURE");

        public static bool operator ==(EnabledDNSType left, EnabledDNSType right) => left.Equals(right);
        public static bool operator !=(EnabledDNSType left, EnabledDNSType right) => !left.Equals(right);

        public static explicit operator string(EnabledDNSType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnabledDNSType other && Equals(other);
        public bool Equals(EnabledDNSType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity assigned to this resource.
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityType : IEquatable<ManagedIdentityType>
    {
        private readonly string _value;

        private ManagedIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedIdentityType None { get; } = new ManagedIdentityType("None");
        public static ManagedIdentityType SystemAssigned { get; } = new ManagedIdentityType("SystemAssigned");
        public static ManagedIdentityType UserAssigned { get; } = new ManagedIdentityType("UserAssigned");
        public static ManagedIdentityType SystemAndUserAssigned { get; } = new ManagedIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedIdentityType left, ManagedIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityType left, ManagedIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityType other && Equals(other);
        public bool Equals(ManagedIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Marketplace Subscription Status
    /// </summary>
    [EnumType]
    public readonly struct MarketplaceSubscriptionStatus : IEquatable<MarketplaceSubscriptionStatus>
    {
        private readonly string _value;

        private MarketplaceSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MarketplaceSubscriptionStatus PendingFulfillmentStart { get; } = new MarketplaceSubscriptionStatus("PendingFulfillmentStart");
        public static MarketplaceSubscriptionStatus Subscribed { get; } = new MarketplaceSubscriptionStatus("Subscribed");
        public static MarketplaceSubscriptionStatus Suspended { get; } = new MarketplaceSubscriptionStatus("Suspended");
        public static MarketplaceSubscriptionStatus Unsubscribed { get; } = new MarketplaceSubscriptionStatus("Unsubscribed");
        public static MarketplaceSubscriptionStatus NotStarted { get; } = new MarketplaceSubscriptionStatus("NotStarted");
        public static MarketplaceSubscriptionStatus FulfillmentRequested { get; } = new MarketplaceSubscriptionStatus("FulfillmentRequested");

        public static bool operator ==(MarketplaceSubscriptionStatus left, MarketplaceSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(MarketplaceSubscriptionStatus left, MarketplaceSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(MarketplaceSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MarketplaceSubscriptionStatus other && Equals(other);
        public bool Equals(MarketplaceSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// vnet or vwan, cannot be updated
    /// </summary>
    [EnumType]
    public readonly struct NetworkType : IEquatable<NetworkType>
    {
        private readonly string _value;

        private NetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkType VNET { get; } = new NetworkType("VNET");
        public static NetworkType VWAN { get; } = new NetworkType("VWAN");

        public static bool operator ==(NetworkType left, NetworkType right) => left.Equals(right);
        public static bool operator !=(NetworkType left, NetworkType right) => !left.Equals(right);

        public static explicit operator string(NetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkType other && Equals(other);
        public bool Equals(NetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol Type
    /// </summary>
    [EnumType]
    public readonly struct ProtocolType : IEquatable<ProtocolType>
    {
        private readonly string _value;

        private ProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtocolType TCP { get; } = new ProtocolType("TCP");
        public static ProtocolType UDP { get; } = new ProtocolType("UDP");

        public static bool operator ==(ProtocolType left, ProtocolType right) => left.Equals(right);
        public static bool operator !=(ProtocolType left, ProtocolType right) => !left.Equals(right);

        public static explicit operator string(ProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtocolType other && Equals(other);
        public bool Equals(ProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rulestack Type
    /// </summary>
    [EnumType]
    public readonly struct ScopeType : IEquatable<ScopeType>
    {
        private readonly string _value;

        private ScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScopeType LOCAL { get; } = new ScopeType("LOCAL");
        public static ScopeType GLOBAL { get; } = new ScopeType("GLOBAL");

        public static bool operator ==(ScopeType left, ScopeType right) => left.Equals(right);
        public static bool operator !=(ScopeType left, ScopeType right) => !left.Equals(right);

        public static explicit operator string(ScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScopeType other && Equals(other);
        public bool Equals(ScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// state of this rule
    /// </summary>
    [EnumType]
    public readonly struct StateEnum : IEquatable<StateEnum>
    {
        private readonly string _value;

        private StateEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StateEnum DISABLED { get; } = new StateEnum("DISABLED");
        public static StateEnum ENABLED { get; } = new StateEnum("ENABLED");

        public static bool operator ==(StateEnum left, StateEnum right) => left.Equals(right);
        public static bool operator !=(StateEnum left, StateEnum right) => !left.Equals(right);

        public static explicit operator string(StateEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StateEnum other && Equals(other);
        public bool Equals(StateEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// different usage type like PAYG/COMMITTED
    /// </summary>
    [EnumType]
    public readonly struct UsageType : IEquatable<UsageType>
    {
        private readonly string _value;

        private UsageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UsageType PAYG { get; } = new UsageType("PAYG");
        public static UsageType COMMITTED { get; } = new UsageType("COMMITTED");

        public static bool operator ==(UsageType left, UsageType right) => left.Equals(right);
        public static bool operator !=(UsageType left, UsageType right) => !left.Equals(right);

        public static explicit operator string(UsageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UsageType other && Equals(other);
        public bool Equals(UsageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
