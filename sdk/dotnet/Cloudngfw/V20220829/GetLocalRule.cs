// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cloudngfw.V20220829
{
    public static class GetLocalRule
    {
        /// <summary>
        /// Get a LocalRulesResource
        /// </summary>
        public static Task<GetLocalRuleResult> InvokeAsync(GetLocalRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocalRuleResult>("azure-native:cloudngfw/v20220829:getLocalRule", args ?? new GetLocalRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Get a LocalRulesResource
        /// </summary>
        public static Output<GetLocalRuleResult> Invoke(GetLocalRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocalRuleResult>("azure-native:cloudngfw/v20220829:getLocalRule", args ?? new GetLocalRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocalRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// LocalRulestack resource name
        /// </summary>
        [Input("localRulestackName", required: true)]
        public string LocalRulestackName { get; set; } = null!;

        /// <summary>
        /// Local Rule priority
        /// </summary>
        [Input("priority", required: true)]
        public string Priority { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLocalRuleArgs()
        {
        }
        public static new GetLocalRuleArgs Empty => new GetLocalRuleArgs();
    }

    public sealed class GetLocalRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// LocalRulestack resource name
        /// </summary>
        [Input("localRulestackName", required: true)]
        public Input<string> LocalRulestackName { get; set; } = null!;

        /// <summary>
        /// Local Rule priority
        /// </summary>
        [Input("priority", required: true)]
        public Input<string> Priority { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLocalRuleInvokeArgs()
        {
        }
        public static new GetLocalRuleInvokeArgs Empty => new GetLocalRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocalRuleResult
    {
        /// <summary>
        /// rule action
        /// </summary>
        public readonly string? ActionType;
        /// <summary>
        /// array of rule applications
        /// </summary>
        public readonly ImmutableArray<string> Applications;
        /// <summary>
        /// rule comment
        /// </summary>
        public readonly string? AuditComment;
        /// <summary>
        /// rule category
        /// </summary>
        public readonly Outputs.CategoryResponse? Category;
        /// <summary>
        /// enable or disable decryption
        /// </summary>
        public readonly string? DecryptionRuleType;
        /// <summary>
        /// rule description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// destination address
        /// </summary>
        public readonly Outputs.DestinationAddrResponse? Destination;
        /// <summary>
        /// enable or disable logging
        /// </summary>
        public readonly string? EnableLogging;
        /// <summary>
        /// etag info
        /// </summary>
        public readonly string? Etag;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// inbound Inspection Certificate
        /// </summary>
        public readonly string? InboundInspectionCertificate;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// cidr should not be 'any'
        /// </summary>
        public readonly string? NegateDestination;
        /// <summary>
        /// cidr should not be 'any'
        /// </summary>
        public readonly string? NegateSource;
        public readonly int Priority;
        /// <summary>
        /// any, application-default, TCP:number, UDP:number
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// prot port list
        /// </summary>
        public readonly ImmutableArray<string> ProtocolPortList;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// rule name
        /// </summary>
        public readonly string RuleName;
        /// <summary>
        /// state of this rule
        /// </summary>
        public readonly string? RuleState;
        /// <summary>
        /// source address
        /// </summary>
        public readonly Outputs.SourceAddrResponse? Source;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// tag for rule
        /// </summary>
        public readonly ImmutableArray<Outputs.TagInfoResponse> Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLocalRuleResult(
            string? actionType,

            ImmutableArray<string> applications,

            string? auditComment,

            Outputs.CategoryResponse? category,

            string? decryptionRuleType,

            string? description,

            Outputs.DestinationAddrResponse? destination,

            string? enableLogging,

            string? etag,

            string id,

            string? inboundInspectionCertificate,

            string name,

            string? negateDestination,

            string? negateSource,

            int priority,

            string? protocol,

            ImmutableArray<string> protocolPortList,

            string provisioningState,

            string ruleName,

            string? ruleState,

            Outputs.SourceAddrResponse? source,

            Outputs.SystemDataResponse systemData,

            ImmutableArray<Outputs.TagInfoResponse> tags,

            string type)
        {
            ActionType = actionType;
            Applications = applications;
            AuditComment = auditComment;
            Category = category;
            DecryptionRuleType = decryptionRuleType;
            Description = description;
            Destination = destination;
            EnableLogging = enableLogging;
            Etag = etag;
            Id = id;
            InboundInspectionCertificate = inboundInspectionCertificate;
            Name = name;
            NegateDestination = negateDestination;
            NegateSource = negateSource;
            Priority = priority;
            Protocol = protocol;
            ProtocolPortList = protocolPortList;
            ProvisioningState = provisioningState;
            RuleName = ruleName;
            RuleState = ruleState;
            Source = source;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
