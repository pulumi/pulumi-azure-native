// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cloudngfw.V20231010Preview
{
    public static class GetLocalRulestack
    {
        /// <summary>
        /// Get a LocalRulestackResource
        /// </summary>
        public static Task<GetLocalRulestackResult> InvokeAsync(GetLocalRulestackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocalRulestackResult>("azure-native:cloudngfw/v20231010preview:getLocalRulestack", args ?? new GetLocalRulestackArgs(), options.WithDefaults());

        /// <summary>
        /// Get a LocalRulestackResource
        /// </summary>
        public static Output<GetLocalRulestackResult> Invoke(GetLocalRulestackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocalRulestackResult>("azure-native:cloudngfw/v20231010preview:getLocalRulestack", args ?? new GetLocalRulestackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocalRulestackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// LocalRulestack resource name
        /// </summary>
        [Input("localRulestackName", required: true)]
        public string LocalRulestackName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetLocalRulestackArgs()
        {
        }
        public static new GetLocalRulestackArgs Empty => new GetLocalRulestackArgs();
    }

    public sealed class GetLocalRulestackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// LocalRulestack resource name
        /// </summary>
        [Input("localRulestackName", required: true)]
        public Input<string> LocalRulestackName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetLocalRulestackInvokeArgs()
        {
        }
        public static new GetLocalRulestackInvokeArgs Empty => new GetLocalRulestackInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocalRulestackResult
    {
        /// <summary>
        /// subscription scope of global rulestack
        /// </summary>
        public readonly ImmutableArray<string> AssociatedSubscriptions;
        /// <summary>
        /// Mode for default rules creation
        /// </summary>
        public readonly string? DefaultMode;
        /// <summary>
        /// rulestack description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        public readonly Outputs.AzureResourceManagerManagedIdentityPropertiesResponse? Identity;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// minimum version
        /// </summary>
        public readonly string? MinAppIdVersion;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// PanEtag info
        /// </summary>
        public readonly string? PanEtag;
        /// <summary>
        /// Rulestack Location, Required for GlobalRulestacks, Not for LocalRulestacks
        /// </summary>
        public readonly string? PanLocation;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Rulestack Type
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// Security Profile
        /// </summary>
        public readonly Outputs.SecurityServicesResponse? SecurityServices;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLocalRulestackResult(
            ImmutableArray<string> associatedSubscriptions,

            string? defaultMode,

            string? description,

            string id,

            Outputs.AzureResourceManagerManagedIdentityPropertiesResponse? identity,

            string location,

            string? minAppIdVersion,

            string name,

            string? panEtag,

            string? panLocation,

            string provisioningState,

            string? scope,

            Outputs.SecurityServicesResponse? securityServices,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AssociatedSubscriptions = associatedSubscriptions;
            DefaultMode = defaultMode;
            Description = description;
            Id = id;
            Identity = identity;
            Location = location;
            MinAppIdVersion = minAppIdVersion;
            Name = name;
            PanEtag = panEtag;
            PanLocation = panLocation;
            ProvisioningState = provisioningState;
            Scope = scope;
            SecurityServices = securityServices;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
