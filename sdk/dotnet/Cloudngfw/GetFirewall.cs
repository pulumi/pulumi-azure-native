// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Cloudngfw
{
    public static class GetFirewall
    {
        /// <summary>
        /// Get a FirewallResource
        /// Azure REST API version: 2023-09-01.
        /// 
        /// Other available API versions: 2022-08-29, 2022-08-29-preview, 2023-09-01-preview, 2023-10-10-preview, 2024-01-19-preview, 2024-02-07-preview.
        /// </summary>
        public static Task<GetFirewallResult> InvokeAsync(GetFirewallArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallResult>("azure-native:cloudngfw:getFirewall", args ?? new GetFirewallArgs(), options.WithDefaults());

        /// <summary>
        /// Get a FirewallResource
        /// Azure REST API version: 2023-09-01.
        /// 
        /// Other available API versions: 2022-08-29, 2022-08-29-preview, 2023-09-01-preview, 2023-10-10-preview, 2024-01-19-preview, 2024-02-07-preview.
        /// </summary>
        public static Output<GetFirewallResult> Invoke(GetFirewallInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallResult>("azure-native:cloudngfw:getFirewall", args ?? new GetFirewallInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Firewall resource name
        /// </summary>
        [Input("firewallName", required: true)]
        public string FirewallName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFirewallArgs()
        {
        }
        public static new GetFirewallArgs Empty => new GetFirewallArgs();
    }

    public sealed class GetFirewallInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Firewall resource name
        /// </summary>
        [Input("firewallName", required: true)]
        public Input<string> FirewallName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetFirewallInvokeArgs()
        {
        }
        public static new GetFirewallInvokeArgs Empty => new GetFirewallInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallResult
    {
        /// <summary>
        /// Associated Rulestack
        /// </summary>
        public readonly Outputs.RulestackDetailsResponse? AssociatedRulestack;
        /// <summary>
        /// DNS settings for Firewall
        /// </summary>
        public readonly Outputs.DNSSettingsResponse DnsSettings;
        /// <summary>
        /// Frontend settings for Firewall
        /// </summary>
        public readonly ImmutableArray<Outputs.FrontendSettingResponse> FrontEndSettings;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed service identities assigned to this resource.
        /// </summary>
        public readonly Outputs.AzureResourceManagerManagedIdentityPropertiesResponse? Identity;
        /// <summary>
        /// Panorama Managed: Default is False. Default will be CloudSec managed
        /// </summary>
        public readonly string? IsPanoramaManaged;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Marketplace details
        /// </summary>
        public readonly Outputs.MarketplaceDetailsResponse MarketplaceDetails;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network settings
        /// </summary>
        public readonly Outputs.NetworkProfileResponse NetworkProfile;
        /// <summary>
        /// panEtag info
        /// </summary>
        public readonly string? PanEtag;
        /// <summary>
        /// Panorama Configuration
        /// </summary>
        public readonly Outputs.PanoramaConfigResponse? PanoramaConfig;
        /// <summary>
        /// Billing plan information.
        /// </summary>
        public readonly Outputs.PlanDataResponse PlanData;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetFirewallResult(
            Outputs.RulestackDetailsResponse? associatedRulestack,

            Outputs.DNSSettingsResponse dnsSettings,

            ImmutableArray<Outputs.FrontendSettingResponse> frontEndSettings,

            string id,

            Outputs.AzureResourceManagerManagedIdentityPropertiesResponse? identity,

            string? isPanoramaManaged,

            string location,

            Outputs.MarketplaceDetailsResponse marketplaceDetails,

            string name,

            Outputs.NetworkProfileResponse networkProfile,

            string? panEtag,

            Outputs.PanoramaConfigResponse? panoramaConfig,

            Outputs.PlanDataResponse planData,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            AssociatedRulestack = associatedRulestack;
            DnsSettings = dnsSettings;
            FrontEndSettings = frontEndSettings;
            Id = id;
            Identity = identity;
            IsPanoramaManaged = isPanoramaManaged;
            Location = location;
            MarketplaceDetails = marketplaceDetails;
            Name = name;
            NetworkProfile = networkProfile;
            PanEtag = panEtag;
            PanoramaConfig = panoramaConfig;
            PlanData = planData;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
