// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ApiCenter
{
    public static class GetApi
    {
        /// <summary>
        /// Returns details of the API.
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2024-03-15-preview.
        /// </summary>
        public static Task<GetApiResult> InvokeAsync(GetApiArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiResult>("azure-native:apicenter:getApi", args ?? new GetApiArgs(), options.WithDefaults());

        /// <summary>
        /// Returns details of the API.
        /// Azure REST API version: 2024-03-01.
        /// 
        /// Other available API versions: 2024-03-15-preview.
        /// </summary>
        public static Output<GetApiResult> Invoke(GetApiInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiResult>("azure-native:apicenter:getApi", args ?? new GetApiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the API.
        /// </summary>
        [Input("apiName", required: true)]
        public string ApiName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of Azure API Center service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetApiArgs()
        {
        }
        public static new GetApiArgs Empty => new GetApiArgs();
    }

    public sealed class GetApiInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the API.
        /// </summary>
        [Input("apiName", required: true)]
        public Input<string> ApiName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of Azure API Center service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        public GetApiInvokeArgs()
        {
        }
        public static new GetApiInvokeArgs Empty => new GetApiInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiResult
    {
        /// <summary>
        /// The set of contacts
        /// </summary>
        public readonly ImmutableArray<Outputs.ContactResponse> Contacts;
        /// <summary>
        /// The custom metadata defined for API catalog entities.
        /// </summary>
        public readonly object? CustomProperties;
        /// <summary>
        /// Description of the API.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The set of external documentation
        /// </summary>
        public readonly ImmutableArray<Outputs.ExternalDocumentationResponse> ExternalDocumentation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kind of API. For example, REST or GraphQL.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The license information for the API.
        /// </summary>
        public readonly Outputs.LicenseResponse? License;
        /// <summary>
        /// Current lifecycle stage of the API.
        /// </summary>
        public readonly string LifecycleStage;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Short description of the API.
        /// </summary>
        public readonly string? Summary;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Terms of service for the API.
        /// </summary>
        public readonly Outputs.TermsOfServiceResponse? TermsOfService;
        /// <summary>
        /// API title.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetApiResult(
            ImmutableArray<Outputs.ContactResponse> contacts,

            object? customProperties,

            string? description,

            ImmutableArray<Outputs.ExternalDocumentationResponse> externalDocumentation,

            string id,

            string kind,

            Outputs.LicenseResponse? license,

            string lifecycleStage,

            string name,

            string? summary,

            Outputs.SystemDataResponse systemData,

            Outputs.TermsOfServiceResponse? termsOfService,

            string title,

            string type)
        {
            Contacts = contacts;
            CustomProperties = customProperties;
            Description = description;
            ExternalDocumentation = externalDocumentation;
            Id = id;
            Kind = kind;
            License = license;
            LifecycleStage = lifecycleStage;
            Name = name;
            Summary = summary;
            SystemData = systemData;
            TermsOfService = termsOfService;
            Title = title;
            Type = type;
        }
    }
}
