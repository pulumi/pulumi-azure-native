// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ApiCenter.V20240601Preview
{
    /// <summary>
    /// Kind of API. For example, REST or GraphQL.
    /// </summary>
    [EnumType]
    public readonly struct ApiKind : IEquatable<ApiKind>
    {
        private readonly string _value;

        private ApiKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A Representational State Transfer Api
        /// </summary>
        public static ApiKind Rest { get; } = new ApiKind("rest");
        /// <summary>
        /// A Graph query language Api
        /// </summary>
        public static ApiKind Graphql { get; } = new ApiKind("graphql");
        /// <summary>
        /// A gRPC Api
        /// </summary>
        public static ApiKind Grpc { get; } = new ApiKind("grpc");
        /// <summary>
        /// A SOAP Api
        /// </summary>
        public static ApiKind Soap { get; } = new ApiKind("soap");
        /// <summary>
        /// Web Hook
        /// </summary>
        public static ApiKind Webhook { get; } = new ApiKind("webhook");
        /// <summary>
        /// Web Socket
        /// </summary>
        public static ApiKind Websocket { get; } = new ApiKind("websocket");

        public static bool operator ==(ApiKind left, ApiKind right) => left.Equals(right);
        public static bool operator !=(ApiKind left, ApiKind right) => !left.Equals(right);

        public static explicit operator string(ApiKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApiKind other && Equals(other);
        public bool Equals(ApiKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of API deployment.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentState : IEquatable<DeploymentState>
    {
        private readonly string _value;

        private DeploymentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Active State
        /// </summary>
        public static DeploymentState Active { get; } = new DeploymentState("active");
        /// <summary>
        /// Inactive State
        /// </summary>
        public static DeploymentState Inactive { get; } = new DeploymentState("inactive");

        public static bool operator ==(DeploymentState left, DeploymentState right) => left.Equals(right);
        public static bool operator !=(DeploymentState left, DeploymentState right) => !left.Equals(right);

        public static explicit operator string(DeploymentState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentState other && Equals(other);
        public bool Equals(DeploymentState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment kind.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentKind : IEquatable<EnvironmentKind>
    {
        private readonly string _value;

        private EnvironmentKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Development environment
        /// </summary>
        public static EnvironmentKind Development { get; } = new EnvironmentKind("development");
        /// <summary>
        /// Testing environment
        /// </summary>
        public static EnvironmentKind Testing { get; } = new EnvironmentKind("testing");
        /// <summary>
        /// Staging environment
        /// </summary>
        public static EnvironmentKind Staging { get; } = new EnvironmentKind("staging");
        /// <summary>
        /// Production environment
        /// </summary>
        public static EnvironmentKind Production { get; } = new EnvironmentKind("production");

        public static bool operator ==(EnvironmentKind left, EnvironmentKind right) => left.Equals(right);
        public static bool operator !=(EnvironmentKind left, EnvironmentKind right) => !left.Equals(right);

        public static explicit operator string(EnvironmentKind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentKind other && Equals(other);
        public bool Equals(EnvironmentKind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the server that represents the environment.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentServerType : IEquatable<EnvironmentServerType>
    {
        private readonly string _value;

        private EnvironmentServerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Api Management Server
        /// </summary>
        public static EnvironmentServerType Azure_API_Management { get; } = new EnvironmentServerType("Azure API Management");
        /// <summary>
        /// Compute server
        /// </summary>
        public static EnvironmentServerType Azure_compute_service { get; } = new EnvironmentServerType("Azure compute service");
        /// <summary>
        /// Apigee server
        /// </summary>
        public static EnvironmentServerType Apigee_API_Management { get; } = new EnvironmentServerType("Apigee API Management");
        /// <summary>
        /// AWS Api Gateway server
        /// </summary>
        public static EnvironmentServerType AWS_API_Gateway { get; } = new EnvironmentServerType("AWS API Gateway");
        /// <summary>
        /// Kong API Gateway server
        /// </summary>
        public static EnvironmentServerType Kong_API_Gateway { get; } = new EnvironmentServerType("Kong API Gateway");
        /// <summary>
        /// Kubernetes server
        /// </summary>
        public static EnvironmentServerType Kubernetes { get; } = new EnvironmentServerType("Kubernetes");
        /// <summary>
        /// Mulesoft Api Management server
        /// </summary>
        public static EnvironmentServerType MuleSoft_API_Management { get; } = new EnvironmentServerType("MuleSoft API Management");

        public static bool operator ==(EnvironmentServerType left, EnvironmentServerType right) => left.Equals(right);
        public static bool operator !=(EnvironmentServerType left, EnvironmentServerType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentServerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentServerType other && Equals(other);
        public bool Equals(EnvironmentServerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if the specification should be imported along with metadata.
    /// </summary>
    [EnumType]
    public readonly struct ImportSpecificationOptions : IEquatable<ImportSpecificationOptions>
    {
        private readonly string _value;

        private ImportSpecificationOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates that the specification should be never be imported.
        /// </summary>
        public static ImportSpecificationOptions Never { get; } = new ImportSpecificationOptions("never");
        /// <summary>
        /// Indicates that the specification should be imported only by request.
        /// </summary>
        public static ImportSpecificationOptions OnDemand { get; } = new ImportSpecificationOptions("ondemand");
        /// <summary>
        /// Indicates that the specification should always be imported along with metadata.
        /// </summary>
        public static ImportSpecificationOptions Always { get; } = new ImportSpecificationOptions("always");

        public static bool operator ==(ImportSpecificationOptions left, ImportSpecificationOptions right) => left.Equals(right);
        public static bool operator !=(ImportSpecificationOptions left, ImportSpecificationOptions right) => !left.Equals(right);

        public static explicit operator string(ImportSpecificationOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImportSpecificationOptions other && Equals(other);
        public bool Equals(ImportSpecificationOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current lifecycle stage of the API.
    /// </summary>
    [EnumType]
    public readonly struct LifecycleStage : IEquatable<LifecycleStage>
    {
        private readonly string _value;

        private LifecycleStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// design stage
        /// </summary>
        public static LifecycleStage Design { get; } = new LifecycleStage("design");
        /// <summary>
        /// development stage
        /// </summary>
        public static LifecycleStage Development { get; } = new LifecycleStage("development");
        /// <summary>
        /// testing stage
        /// </summary>
        public static LifecycleStage Testing { get; } = new LifecycleStage("testing");
        /// <summary>
        /// In preview
        /// </summary>
        public static LifecycleStage Preview { get; } = new LifecycleStage("preview");
        /// <summary>
        /// In production
        /// </summary>
        public static LifecycleStage Production { get; } = new LifecycleStage("production");
        /// <summary>
        /// deprecated stage
        /// </summary>
        public static LifecycleStage Deprecated { get; } = new LifecycleStage("deprecated");
        /// <summary>
        /// Retired stage
        /// </summary>
        public static LifecycleStage Retired { get; } = new LifecycleStage("retired");

        public static bool operator ==(LifecycleStage left, LifecycleStage right) => left.Equals(right);
        public static bool operator !=(LifecycleStage left, LifecycleStage right) => !left.Equals(right);

        public static explicit operator string(LifecycleStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecycleStage other && Equals(other);
        public bool Equals(LifecycleStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entities this metadata schema component gets applied to.
    /// </summary>
    [EnumType]
    public readonly struct MetadataAssignmentEntity : IEquatable<MetadataAssignmentEntity>
    {
        private readonly string _value;

        private MetadataAssignmentEntity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Assigned to API
        /// </summary>
        public static MetadataAssignmentEntity Api { get; } = new MetadataAssignmentEntity("api");
        /// <summary>
        /// Assigned to Environment
        /// </summary>
        public static MetadataAssignmentEntity Environment { get; } = new MetadataAssignmentEntity("environment");
        /// <summary>
        /// Assigned to Deployment
        /// </summary>
        public static MetadataAssignmentEntity Deployment { get; } = new MetadataAssignmentEntity("deployment");

        public static bool operator ==(MetadataAssignmentEntity left, MetadataAssignmentEntity right) => left.Equals(right);
        public static bool operator !=(MetadataAssignmentEntity left, MetadataAssignmentEntity right) => !left.Equals(right);

        public static explicit operator string(MetadataAssignmentEntity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MetadataAssignmentEntity other && Equals(other);
        public bool Equals(MetadataAssignmentEntity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
