// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry.V20240901Preview
{
    public static class GetDiscoveredAsset
    {
        /// <summary>
        /// Get a DiscoveredAsset
        /// </summary>
        public static Task<GetDiscoveredAssetResult> InvokeAsync(GetDiscoveredAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiscoveredAssetResult>("azure-native:deviceregistry/v20240901preview:getDiscoveredAsset", args ?? new GetDiscoveredAssetArgs(), options.WithDefaults());

        /// <summary>
        /// Get a DiscoveredAsset
        /// </summary>
        public static Output<GetDiscoveredAssetResult> Invoke(GetDiscoveredAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiscoveredAssetResult>("azure-native:deviceregistry/v20240901preview:getDiscoveredAsset", args ?? new GetDiscoveredAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscoveredAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Discovered Asset name parameter.
        /// </summary>
        [Input("discoveredAssetName", required: true)]
        public string DiscoveredAssetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiscoveredAssetArgs()
        {
        }
        public static new GetDiscoveredAssetArgs Empty => new GetDiscoveredAssetArgs();
    }

    public sealed class GetDiscoveredAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Discovered Asset name parameter.
        /// </summary>
        [Input("discoveredAssetName", required: true)]
        public Input<string> DiscoveredAssetName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDiscoveredAssetInvokeArgs()
        {
        }
        public static new GetDiscoveredAssetInvokeArgs Empty => new GetDiscoveredAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiscoveredAssetResult
    {
        /// <summary>
        /// A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.
        /// </summary>
        public readonly string AssetEndpointProfileRef;
        /// <summary>
        /// Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiscoveredDatasetResponse> Datasets;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultDatasetsConfiguration;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultEventsConfiguration;
        /// <summary>
        /// Object that describes the default topic information for the asset.
        /// </summary>
        public readonly Outputs.TopicResponse? DefaultTopic;
        /// <summary>
        /// Identifier used to detect changes in the asset.
        /// </summary>
        public readonly string DiscoveryId;
        /// <summary>
        /// Reference to the documentation.
        /// </summary>
        public readonly string? DocumentationUri;
        /// <summary>
        /// Array of events that are part of the asset. Each event can have per-event configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiscoveredEventResponse> Events;
        /// <summary>
        /// The extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Revision number of the hardware.
        /// </summary>
        public readonly string? HardwareRevision;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Asset manufacturer name.
        /// </summary>
        public readonly string? Manufacturer;
        /// <summary>
        /// Asset manufacturer URI.
        /// </summary>
        public readonly string? ManufacturerUri;
        /// <summary>
        /// Asset model name.
        /// </summary>
        public readonly string? Model;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Asset product code.
        /// </summary>
        public readonly string? ProductCode;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Asset serial number.
        /// </summary>
        public readonly string? SerialNumber;
        /// <summary>
        /// Revision number of the software.
        /// </summary>
        public readonly string? SoftwareRevision;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// An integer that is incremented each time the resource is modified.
        /// </summary>
        public readonly double Version;

        [OutputConstructor]
        private GetDiscoveredAssetResult(
            string assetEndpointProfileRef,

            ImmutableArray<Outputs.DiscoveredDatasetResponse> datasets,

            string? defaultDatasetsConfiguration,

            string? defaultEventsConfiguration,

            Outputs.TopicResponse? defaultTopic,

            string discoveryId,

            string? documentationUri,

            ImmutableArray<Outputs.DiscoveredEventResponse> events,

            Outputs.ExtendedLocationResponse extendedLocation,

            string? hardwareRevision,

            string id,

            string location,

            string? manufacturer,

            string? manufacturerUri,

            string? model,

            string name,

            string? productCode,

            string provisioningState,

            string? serialNumber,

            string? softwareRevision,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            double version)
        {
            AssetEndpointProfileRef = assetEndpointProfileRef;
            Datasets = datasets;
            DefaultDatasetsConfiguration = defaultDatasetsConfiguration;
            DefaultEventsConfiguration = defaultEventsConfiguration;
            DefaultTopic = defaultTopic;
            DiscoveryId = discoveryId;
            DocumentationUri = documentationUri;
            Events = events;
            ExtendedLocation = extendedLocation;
            HardwareRevision = hardwareRevision;
            Id = id;
            Location = location;
            Manufacturer = manufacturer;
            ManufacturerUri = manufacturerUri;
            Model = model;
            Name = name;
            ProductCode = productCode;
            ProvisioningState = provisioningState;
            SerialNumber = serialNumber;
            SoftwareRevision = softwareRevision;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
