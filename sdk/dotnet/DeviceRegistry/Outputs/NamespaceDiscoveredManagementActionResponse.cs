// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry.Outputs
{

    /// <summary>
    /// Defines the action properties.
    /// </summary>
    [OutputType]
    public sealed class NamespaceDiscoveredManagementActionResponse
    {
        /// <summary>
        /// Stringified JSON that contains connector-specific configuration for the action.
        /// </summary>
        public readonly string? ActionConfiguration;
        /// <summary>
        /// The type of the action.
        /// </summary>
        public readonly string? ActionType;
        /// <summary>
        /// Timestamp (in UTC) indicating when the management action was added or modified.
        /// </summary>
        public readonly string? LastUpdatedOn;
        /// <summary>
        /// Name of the action.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The target URI on which a client can invoke the specific action.
        /// </summary>
        public readonly string TargetUri;
        /// <summary>
        /// Response timeout for the action.
        /// </summary>
        public readonly int? TimeoutInSeconds;
        /// <summary>
        /// The MQTT topic path on which a client will receive the request for the action.
        /// </summary>
        public readonly string? Topic;
        /// <summary>
        /// URI or type definition ID.
        /// </summary>
        public readonly string? TypeRef;

        [OutputConstructor]
        private NamespaceDiscoveredManagementActionResponse(
            string? actionConfiguration,

            string? actionType,

            string? lastUpdatedOn,

            string name,

            string targetUri,

            int? timeoutInSeconds,

            string? topic,

            string? typeRef)
        {
            ActionConfiguration = actionConfiguration;
            ActionType = actionType;
            LastUpdatedOn = lastUpdatedOn;
            Name = name;
            TargetUri = targetUri;
            TimeoutInSeconds = timeoutInSeconds;
            Topic = topic;
            TypeRef = typeRef;
        }
    }
}
