// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry.Outputs
{

    /// <summary>
    /// Defines the management group properties.
    /// </summary>
    [OutputType]
    public sealed class NamespaceDiscoveredManagementGroupResponse
    {
        /// <summary>
        /// Array of actions that are part of the management group. Each action can have an individual configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceDiscoveredManagementActionResponse> Actions;
        /// <summary>
        /// Default response timeout for all actions that are part of the management group.
        /// </summary>
        public readonly int? DefaultTimeoutInSeconds;
        /// <summary>
        /// Default MQTT topic path on which a client will receive the request for all actions that are part of the management group.
        /// </summary>
        public readonly string? DefaultTopic;
        /// <summary>
        /// Timestamp (in UTC) indicating when the management group was added or modified.
        /// </summary>
        public readonly string? LastUpdatedOn;
        /// <summary>
        /// Stringified JSON that contains connector-specific configuration for the management group.
        /// </summary>
        public readonly string? ManagementGroupConfiguration;
        /// <summary>
        /// Name of the management group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// URI or type definition ID.
        /// </summary>
        public readonly string? TypeRef;

        [OutputConstructor]
        private NamespaceDiscoveredManagementGroupResponse(
            ImmutableArray<Outputs.NamespaceDiscoveredManagementActionResponse> actions,

            int? defaultTimeoutInSeconds,

            string? defaultTopic,

            string? lastUpdatedOn,

            string? managementGroupConfiguration,

            string name,

            string? typeRef)
        {
            Actions = actions;
            DefaultTimeoutInSeconds = defaultTimeoutInSeconds;
            DefaultTopic = defaultTopic;
            LastUpdatedOn = lastUpdatedOn;
            ManagementGroupConfiguration = managementGroupConfiguration;
            Name = name;
            TypeRef = typeRef;
        }
    }
}
