// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DeviceRegistry
{
    /// <summary>
    /// The method to authenticate the user of the client at the server.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMethod : IEquatable<AuthenticationMethod>
    {
        private readonly string _value;

        private AuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user authentication method is anonymous.
        /// </summary>
        public static AuthenticationMethod Anonymous { get; } = new AuthenticationMethod("Anonymous");
        /// <summary>
        /// The user authentication method is an x509 certificate.
        /// </summary>
        public static AuthenticationMethod Certificate { get; } = new AuthenticationMethod("Certificate");
        /// <summary>
        /// The user authentication method is a username and password.
        /// </summary>
        public static AuthenticationMethod UsernamePassword { get; } = new AuthenticationMethod("UsernamePassword");

        public static bool operator ==(AuthenticationMethod left, AuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(AuthenticationMethod left, AuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMethod other && Equals(other);
        public bool Equals(AuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An indication of how the data point should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct DataPointsObservabilityMode : IEquatable<DataPointsObservabilityMode>
    {
        private readonly string _value;

        private DataPointsObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No mapping to OpenTelemetry.
        /// </summary>
        public static DataPointsObservabilityMode None { get; } = new DataPointsObservabilityMode("none");
        /// <summary>
        /// Map as counter to OpenTelemetry.
        /// </summary>
        public static DataPointsObservabilityMode Counter { get; } = new DataPointsObservabilityMode("counter");
        /// <summary>
        /// Map as gauge to OpenTelemetry.
        /// </summary>
        public static DataPointsObservabilityMode Gauge { get; } = new DataPointsObservabilityMode("gauge");
        /// <summary>
        /// Map as histogram to OpenTelemetry.
        /// </summary>
        public static DataPointsObservabilityMode Histogram { get; } = new DataPointsObservabilityMode("histogram");
        /// <summary>
        /// Map as log to OpenTelemetry.
        /// </summary>
        public static DataPointsObservabilityMode Log { get; } = new DataPointsObservabilityMode("log");

        public static bool operator ==(DataPointsObservabilityMode left, DataPointsObservabilityMode right) => left.Equals(right);
        public static bool operator !=(DataPointsObservabilityMode left, DataPointsObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(DataPointsObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataPointsObservabilityMode other && Equals(other);
        public bool Equals(DataPointsObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An indication of how the event should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct EventsObservabilityMode : IEquatable<EventsObservabilityMode>
    {
        private readonly string _value;

        private EventsObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No mapping to OpenTelemetry.
        /// </summary>
        public static EventsObservabilityMode None { get; } = new EventsObservabilityMode("none");
        /// <summary>
        /// Map as log to OpenTelemetry.
        /// </summary>
        public static EventsObservabilityMode Log { get; } = new EventsObservabilityMode("log");

        public static bool operator ==(EventsObservabilityMode left, EventsObservabilityMode right) => left.Equals(right);
        public static bool operator !=(EventsObservabilityMode left, EventsObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(EventsObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventsObservabilityMode other && Equals(other);
        public bool Equals(EventsObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the schema.
    /// </summary>
    [EnumType]
    public readonly struct Format : IEquatable<Format>
    {
        private readonly string _value;

        private Format(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// JSON Schema version draft 7 format
        /// </summary>
        public static Format JsonSchema_draft7 { get; } = new Format("JsonSchema/draft-07");
        /// <summary>
        /// Delta format
        /// </summary>
        public static Format Delta_1_0 { get; } = new Format("Delta/1.0");

        public static bool operator ==(Format left, Format right) => left.Equals(right);
        public static bool operator !=(Format left, Format right) => !left.Equals(right);

        public static explicit operator string(Format value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Format other && Equals(other);
        public bool Equals(Format other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the schema.
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Message Schema schema type
        /// </summary>
        public static SchemaType MessageSchema { get; } = new SchemaType("MessageSchema");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (either system assigned, or none).
    /// </summary>
    [EnumType]
    public readonly struct SystemAssignedServiceIdentityType : IEquatable<SystemAssignedServiceIdentityType>
    {
        private readonly string _value;

        private SystemAssignedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemAssignedServiceIdentityType None { get; } = new SystemAssignedServiceIdentityType("None");
        public static SystemAssignedServiceIdentityType SystemAssigned { get; } = new SystemAssignedServiceIdentityType("SystemAssigned");

        public static bool operator ==(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(SystemAssignedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemAssignedServiceIdentityType other && Equals(other);
        public bool Equals(SystemAssignedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
    /// </summary>
    [EnumType]
    public readonly struct TopicRetainType : IEquatable<TopicRetainType>
    {
        private readonly string _value;

        private TopicRetainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Retain the messages.
        /// </summary>
        public static TopicRetainType Keep { get; } = new TopicRetainType("Keep");
        /// <summary>
        /// Never retain messages.
        /// </summary>
        public static TopicRetainType Never { get; } = new TopicRetainType("Never");

        public static bool operator ==(TopicRetainType left, TopicRetainType right) => left.Equals(right);
        public static bool operator !=(TopicRetainType left, TopicRetainType right) => !left.Equals(right);

        public static explicit operator string(TopicRetainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicRetainType other && Equals(other);
        public bool Equals(TopicRetainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the method to authenticate the user of the client at the server.
    /// </summary>
    [EnumType]
    public readonly struct UserAuthenticationMode : IEquatable<UserAuthenticationMode>
    {
        private readonly string _value;

        private UserAuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user authentication method is anonymous.
        /// </summary>
        public static UserAuthenticationMode Anonymous { get; } = new UserAuthenticationMode("Anonymous");
        /// <summary>
        /// The user authentication method is an x509 certificate.
        /// </summary>
        public static UserAuthenticationMode Certificate { get; } = new UserAuthenticationMode("Certificate");
        /// <summary>
        /// The user authentication method is a username and password.
        /// </summary>
        public static UserAuthenticationMode UsernamePassword { get; } = new UserAuthenticationMode("UsernamePassword");

        public static bool operator ==(UserAuthenticationMode left, UserAuthenticationMode right) => left.Equals(right);
        public static bool operator !=(UserAuthenticationMode left, UserAuthenticationMode right) => !left.Equals(right);

        public static explicit operator string(UserAuthenticationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserAuthenticationMode other && Equals(other);
        public bool Equals(UserAuthenticationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
