// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DeviceRegistry
{
    /// <summary>
    /// The method to authenticate the user of the client at the server.
    /// </summary>
    [EnumType]
    public readonly struct AuthenticationMethod : IEquatable<AuthenticationMethod>
    {
        private readonly string _value;

        private AuthenticationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// The user authentication method is anonymous.
        /// </summary>
        public static AuthenticationMethod Anonymous { get; } = new AuthenticationMethod("Anonymous");
        /// <summary>
        /// The user authentication method is an x509 certificate.
        /// </summary>
        public static AuthenticationMethod Certificate { get; } = new AuthenticationMethod("Certificate");
        /// <summary>
        /// The user authentication method is a username and password.
        /// </summary>
        public static AuthenticationMethod UsernamePassword { get; } = new AuthenticationMethod("UsernamePassword");

        public static bool operator ==(AuthenticationMethod left, AuthenticationMethod right) => left.Equals(right);
        public static bool operator !=(AuthenticationMethod left, AuthenticationMethod right) => !left.Equals(right);

        public static explicit operator string(AuthenticationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthenticationMethod other && Equals(other);
        public bool Equals(AuthenticationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An indication of how the data point should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct DataPointObservabilityMode : IEquatable<DataPointObservabilityMode>
    {
        private readonly string _value;

        private DataPointObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No mapping to OpenTelemetry.
        /// </summary>
        public static DataPointObservabilityMode None { get; } = new DataPointObservabilityMode("None");
        /// <summary>
        /// Map as counter to OpenTelemetry.
        /// </summary>
        public static DataPointObservabilityMode Counter { get; } = new DataPointObservabilityMode("Counter");
        /// <summary>
        /// Map as gauge to OpenTelemetry.
        /// </summary>
        public static DataPointObservabilityMode Gauge { get; } = new DataPointObservabilityMode("Gauge");
        /// <summary>
        /// Map as histogram to OpenTelemetry.
        /// </summary>
        public static DataPointObservabilityMode Histogram { get; } = new DataPointObservabilityMode("Histogram");
        /// <summary>
        /// Map as log to OpenTelemetry.
        /// </summary>
        public static DataPointObservabilityMode Log { get; } = new DataPointObservabilityMode("Log");

        public static bool operator ==(DataPointObservabilityMode left, DataPointObservabilityMode right) => left.Equals(right);
        public static bool operator !=(DataPointObservabilityMode left, DataPointObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(DataPointObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataPointObservabilityMode other && Equals(other);
        public bool Equals(DataPointObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target destination.
    /// </summary>
    [EnumType]
    public readonly struct DatasetDestinationTarget : IEquatable<DatasetDestinationTarget>
    {
        private readonly string _value;

        private DatasetDestinationTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// MQTT target.
        /// </summary>
        public static DatasetDestinationTarget Mqtt { get; } = new DatasetDestinationTarget("Mqtt");
        /// <summary>
        /// Broker State Store target.
        /// </summary>
        public static DatasetDestinationTarget BrokerStateStore { get; } = new DatasetDestinationTarget("BrokerStateStore");
        /// <summary>
        /// Storage target.
        /// </summary>
        public static DatasetDestinationTarget Storage { get; } = new DatasetDestinationTarget("Storage");

        public static bool operator ==(DatasetDestinationTarget left, DatasetDestinationTarget right) => left.Equals(right);
        public static bool operator !=(DatasetDestinationTarget left, DatasetDestinationTarget right) => !left.Equals(right);

        public static explicit operator string(DatasetDestinationTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetDestinationTarget other && Equals(other);
        public bool Equals(DatasetDestinationTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target destination.
    /// </summary>
    [EnumType]
    public readonly struct EventDestinationTarget : IEquatable<EventDestinationTarget>
    {
        private readonly string _value;

        private EventDestinationTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// MQTT target.
        /// </summary>
        public static EventDestinationTarget Mqtt { get; } = new EventDestinationTarget("Mqtt");
        /// <summary>
        /// Storage target.
        /// </summary>
        public static EventDestinationTarget Storage { get; } = new EventDestinationTarget("Storage");

        public static bool operator ==(EventDestinationTarget left, EventDestinationTarget right) => left.Equals(right);
        public static bool operator !=(EventDestinationTarget left, EventDestinationTarget right) => !left.Equals(right);

        public static explicit operator string(EventDestinationTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventDestinationTarget other && Equals(other);
        public bool Equals(EventDestinationTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An indication of how the event should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct EventObservabilityMode : IEquatable<EventObservabilityMode>
    {
        private readonly string _value;

        private EventObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No mapping to OpenTelemetry.
        /// </summary>
        public static EventObservabilityMode None { get; } = new EventObservabilityMode("None");
        /// <summary>
        /// Map as log to OpenTelemetry.
        /// </summary>
        public static EventObservabilityMode Log { get; } = new EventObservabilityMode("Log");

        public static bool operator ==(EventObservabilityMode left, EventObservabilityMode right) => left.Equals(right);
        public static bool operator !=(EventObservabilityMode left, EventObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(EventObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventObservabilityMode other && Equals(other);
        public bool Equals(EventObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the schema.
    /// </summary>
    [EnumType]
    public readonly struct Format : IEquatable<Format>
    {
        private readonly string _value;

        private Format(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// JSON Schema version draft 7 format
        /// </summary>
        public static Format JsonSchema_draft7 { get; } = new Format("JsonSchema/draft-07");
        /// <summary>
        /// Delta format
        /// </summary>
        public static Format Delta_1_0 { get; } = new Format("Delta/1.0");

        public static bool operator ==(Format left, Format right) => left.Equals(right);
        public static bool operator !=(Format left, Format right) => !left.Equals(right);

        public static explicit operator string(Format value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Format other && Equals(other);
        public bool Equals(Format other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the action.
    /// </summary>
    [EnumType]
    public readonly struct ManagementActionType : IEquatable<ManagementActionType>
    {
        private readonly string _value;

        private ManagementActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Call action type.
        /// </summary>
        public static ManagementActionType Call { get; } = new ManagementActionType("Call");
        /// <summary>
        /// Read action type.
        /// </summary>
        public static ManagementActionType Read { get; } = new ManagementActionType("Read");
        /// <summary>
        /// Write action type.
        /// </summary>
        public static ManagementActionType Write { get; } = new ManagementActionType("Write");

        public static bool operator ==(ManagementActionType left, ManagementActionType right) => left.Equals(right);
        public static bool operator !=(ManagementActionType left, ManagementActionType right) => !left.Equals(right);

        public static explicit operator string(ManagementActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagementActionType other && Equals(other);
        public bool Equals(ManagementActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The MQTT QoS setting. Defaults to QoS 1.
    /// </summary>
    [EnumType]
    public readonly struct MqttDestinationQos : IEquatable<MqttDestinationQos>
    {
        private readonly string _value;

        private MqttDestinationQos(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// QoS 0.
        /// </summary>
        public static MqttDestinationQos Qos0 { get; } = new MqttDestinationQos("Qos0");
        /// <summary>
        /// QoS 1.
        /// </summary>
        public static MqttDestinationQos Qos1 { get; } = new MqttDestinationQos("Qos1");

        public static bool operator ==(MqttDestinationQos left, MqttDestinationQos right) => left.Equals(right);
        public static bool operator !=(MqttDestinationQos left, MqttDestinationQos right) => !left.Equals(right);

        public static explicit operator string(MqttDestinationQos value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MqttDestinationQos other && Equals(other);
        public bool Equals(MqttDestinationQos other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the action.
    /// </summary>
    [EnumType]
    public readonly struct NamespaceDiscoveredManagementActionType : IEquatable<NamespaceDiscoveredManagementActionType>
    {
        private readonly string _value;

        private NamespaceDiscoveredManagementActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Call action type.
        /// </summary>
        public static NamespaceDiscoveredManagementActionType Call { get; } = new NamespaceDiscoveredManagementActionType("Call");
        /// <summary>
        /// Read action type.
        /// </summary>
        public static NamespaceDiscoveredManagementActionType Read { get; } = new NamespaceDiscoveredManagementActionType("Read");
        /// <summary>
        /// Write action type.
        /// </summary>
        public static NamespaceDiscoveredManagementActionType Write { get; } = new NamespaceDiscoveredManagementActionType("Write");

        public static bool operator ==(NamespaceDiscoveredManagementActionType left, NamespaceDiscoveredManagementActionType right) => left.Equals(right);
        public static bool operator !=(NamespaceDiscoveredManagementActionType left, NamespaceDiscoveredManagementActionType right) => !left.Equals(right);

        public static explicit operator string(NamespaceDiscoveredManagementActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NamespaceDiscoveredManagementActionType other && Equals(other);
        public bool Equals(NamespaceDiscoveredManagementActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the schema.
    /// </summary>
    [EnumType]
    public readonly struct SchemaType : IEquatable<SchemaType>
    {
        private readonly string _value;

        private SchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Message Schema schema type
        /// </summary>
        public static SchemaType MessageSchema { get; } = new SchemaType("MessageSchema");

        public static bool operator ==(SchemaType left, SchemaType right) => left.Equals(right);
        public static bool operator !=(SchemaType left, SchemaType right) => !left.Equals(right);

        public static explicit operator string(SchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SchemaType other && Equals(other);
        public bool Equals(SchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Target destination.
    /// </summary>
    [EnumType]
    public readonly struct StreamDestinationTarget : IEquatable<StreamDestinationTarget>
    {
        private readonly string _value;

        private StreamDestinationTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// MQTT target.
        /// </summary>
        public static StreamDestinationTarget Mqtt { get; } = new StreamDestinationTarget("Mqtt");
        /// <summary>
        /// Storage target.
        /// </summary>
        public static StreamDestinationTarget Storage { get; } = new StreamDestinationTarget("Storage");

        public static bool operator ==(StreamDestinationTarget left, StreamDestinationTarget right) => left.Equals(right);
        public static bool operator !=(StreamDestinationTarget left, StreamDestinationTarget right) => !left.Equals(right);

        public static explicit operator string(StreamDestinationTarget value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StreamDestinationTarget other && Equals(other);
        public bool Equals(StreamDestinationTarget other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Crypto type: ECC.
    /// </summary>
    [EnumType]
    public readonly struct SupportedKeyType : IEquatable<SupportedKeyType>
    {
        private readonly string _value;

        private SupportedKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Indicates the ECC key type.
        /// </summary>
        public static SupportedKeyType ECC { get; } = new SupportedKeyType("ECC");

        public static bool operator ==(SupportedKeyType left, SupportedKeyType right) => left.Equals(right);
        public static bool operator !=(SupportedKeyType left, SupportedKeyType right) => !left.Equals(right);

        public static explicit operator string(SupportedKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SupportedKeyType other && Equals(other);
        public bool Equals(SupportedKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (either system assigned, or none).
    /// </summary>
    [EnumType]
    public readonly struct SystemAssignedServiceIdentityType : IEquatable<SystemAssignedServiceIdentityType>
    {
        private readonly string _value;

        private SystemAssignedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SystemAssignedServiceIdentityType None { get; } = new SystemAssignedServiceIdentityType("None");
        public static SystemAssignedServiceIdentityType SystemAssigned { get; } = new SystemAssignedServiceIdentityType("SystemAssigned");

        public static bool operator ==(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(SystemAssignedServiceIdentityType left, SystemAssignedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(SystemAssignedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SystemAssignedServiceIdentityType other && Equals(other);
        public bool Equals(SystemAssignedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
    /// </summary>
    [EnumType]
    public readonly struct TopicRetainType : IEquatable<TopicRetainType>
    {
        private readonly string _value;

        private TopicRetainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Retain the messages.
        /// </summary>
        public static TopicRetainType Keep { get; } = new TopicRetainType("Keep");
        /// <summary>
        /// Never retain messages.
        /// </summary>
        public static TopicRetainType Never { get; } = new TopicRetainType("Never");

        public static bool operator ==(TopicRetainType left, TopicRetainType right) => left.Equals(right);
        public static bool operator !=(TopicRetainType left, TopicRetainType right) => !left.Equals(right);

        public static explicit operator string(TopicRetainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicRetainType other && Equals(other);
        public bool Equals(TopicRetainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
