// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DeviceRegistry
{
    /// <summary>
    /// An indication of how the data point should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct DataPointsObservabilityMode : IEquatable<DataPointsObservabilityMode>
    {
        private readonly string _value;

        private DataPointsObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataPointsObservabilityMode None { get; } = new DataPointsObservabilityMode("none");
        public static DataPointsObservabilityMode Counter { get; } = new DataPointsObservabilityMode("counter");
        public static DataPointsObservabilityMode Gauge { get; } = new DataPointsObservabilityMode("gauge");
        public static DataPointsObservabilityMode Histogram { get; } = new DataPointsObservabilityMode("histogram");
        public static DataPointsObservabilityMode Log { get; } = new DataPointsObservabilityMode("log");

        public static bool operator ==(DataPointsObservabilityMode left, DataPointsObservabilityMode right) => left.Equals(right);
        public static bool operator !=(DataPointsObservabilityMode left, DataPointsObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(DataPointsObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataPointsObservabilityMode other && Equals(other);
        public bool Equals(DataPointsObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An indication of how the event should be mapped to OpenTelemetry.
    /// </summary>
    [EnumType]
    public readonly struct EventsObservabilityMode : IEquatable<EventsObservabilityMode>
    {
        private readonly string _value;

        private EventsObservabilityMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EventsObservabilityMode None { get; } = new EventsObservabilityMode("none");
        public static EventsObservabilityMode Log { get; } = new EventsObservabilityMode("log");

        public static bool operator ==(EventsObservabilityMode left, EventsObservabilityMode right) => left.Equals(right);
        public static bool operator !=(EventsObservabilityMode left, EventsObservabilityMode right) => !left.Equals(right);

        public static explicit operator string(EventsObservabilityMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EventsObservabilityMode other && Equals(other);
        public bool Equals(EventsObservabilityMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the mode to authenticate the user of the client at the server.
    /// </summary>
    [EnumType]
    public readonly struct Mode : IEquatable<Mode>
    {
        private readonly string _value;

        private Mode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Mode Anonymous { get; } = new Mode("Anonymous");
        public static Mode Certificate { get; } = new Mode("Certificate");
        public static Mode UsernamePassword { get; } = new Mode("UsernamePassword");

        public static bool operator ==(Mode left, Mode right) => left.Equals(right);
        public static bool operator !=(Mode left, Mode right) => !left.Equals(right);

        public static explicit operator string(Mode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Mode other && Equals(other);
        public bool Equals(Mode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
