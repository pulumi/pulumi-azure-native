// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry
{
    public static class GetNamespaceAsset
    {
        /// <summary>
        /// Get a NamespaceAsset
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// 
        /// Other available API versions: 2025-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Task<GetNamespaceAssetResult> InvokeAsync(GetNamespaceAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceAssetResult>("azure-native:deviceregistry:getNamespaceAsset", args ?? new GetNamespaceAssetArgs(), options.WithDefaults());

        /// <summary>
        /// Get a NamespaceAsset
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// 
        /// Other available API versions: 2025-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetNamespaceAssetResult> Invoke(GetNamespaceAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceAssetResult>("azure-native:deviceregistry:getNamespaceAsset", args ?? new GetNamespaceAssetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get a NamespaceAsset
        /// 
        /// Uses Azure REST API version 2025-07-01-preview.
        /// 
        /// Other available API versions: 2025-10-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
        /// </summary>
        public static Output<GetNamespaceAssetResult> Invoke(GetNamespaceAssetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceAssetResult>("azure-native:deviceregistry:getNamespaceAsset", args ?? new GetNamespaceAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the asset.
        /// </summary>
        [Input("assetName", required: true)]
        public string AssetName { get; set; } = null!;

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNamespaceAssetArgs()
        {
        }
        public static new GetNamespaceAssetArgs Empty => new GetNamespaceAssetArgs();
    }

    public sealed class GetNamespaceAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the asset.
        /// </summary>
        [Input("assetName", required: true)]
        public Input<string> AssetName { get; set; } = null!;

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNamespaceAssetInvokeArgs()
        {
        }
        public static new GetNamespaceAssetInvokeArgs Empty => new GetNamespaceAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceAssetResult
    {
        /// <summary>
        /// URIs or type definition IDs.
        /// </summary>
        public readonly ImmutableArray<string> AssetTypeRefs;
        /// <summary>
        /// A set of key-value pairs that contain custom attributes set by the customer.
        /// </summary>
        public readonly object? Attributes;
        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        public readonly string AzureApiVersion;
        /// <summary>
        /// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceDatasetResponse> Datasets;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultDatasetsConfiguration;
        /// <summary>
        /// Default destinations for a dataset.
        /// </summary>
        public readonly ImmutableArray<object> DefaultDatasetsDestinations;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultEventsConfiguration;
        /// <summary>
        /// Default destinations for an event.
        /// </summary>
        public readonly ImmutableArray<Union<Outputs.EventMqttDestinationResponse, Outputs.EventStorageDestinationResponse>> DefaultEventsDestinations;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultManagementGroupsConfiguration;
        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        /// </summary>
        public readonly string? DefaultStreamsConfiguration;
        /// <summary>
        /// Default destinations for a stream.
        /// </summary>
        public readonly ImmutableArray<Union<Outputs.StreamMqttDestinationResponse, Outputs.StreamStorageDestinationResponse>> DefaultStreamsDestinations;
        /// <summary>
        /// Human-readable description of the asset.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Reference to the device that provides data for this asset. Must provide device name &amp; endpoint on the device to use.
        /// </summary>
        public readonly Outputs.DeviceRefResponse DeviceRef;
        /// <summary>
        /// Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        /// </summary>
        public readonly ImmutableArray<string> DiscoveredAssetRefs;
        /// <summary>
        /// Human-readable display name.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Asset documentation reference.
        /// </summary>
        public readonly string? DocumentationUri;
        /// <summary>
        /// Enabled/disabled status of the asset.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Array of events that are part of the asset. Each event can have per-event configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceEventResponse> Events;
        /// <summary>
        /// The extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Asset ID provided by the customer.
        /// </summary>
        public readonly string? ExternalAssetId;
        /// <summary>
        /// Asset hardware revision number.
        /// </summary>
        public readonly string? HardwareRevision;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A timestamp (in UTC) that is updated each time the resource is modified.
        /// </summary>
        public readonly string LastTransitionTime;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagementGroupResponse> ManagementGroups;
        /// <summary>
        /// Asset manufacturer.
        /// </summary>
        public readonly string? Manufacturer;
        /// <summary>
        /// Asset manufacturer URI.
        /// </summary>
        public readonly string? ManufacturerUri;
        /// <summary>
        /// Asset model.
        /// </summary>
        public readonly string? Model;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Asset product code.
        /// </summary>
        public readonly string? ProductCode;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Asset serial number.
        /// </summary>
        public readonly string? SerialNumber;
        /// <summary>
        /// Asset software revision number.
        /// </summary>
        public readonly string? SoftwareRevision;
        /// <summary>
        /// Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        /// </summary>
        public readonly Outputs.NamespaceAssetStatusResponse Status;
        /// <summary>
        /// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceStreamResponse> Streams;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Globally unique, immutable, non-reusable ID.
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// An integer that is incremented each time the resource is modified.
        /// </summary>
        public readonly double Version;

        [OutputConstructor]
        private GetNamespaceAssetResult(
            ImmutableArray<string> assetTypeRefs,

            object? attributes,

            string azureApiVersion,

            ImmutableArray<Outputs.NamespaceDatasetResponse> datasets,

            string? defaultDatasetsConfiguration,

            ImmutableArray<object> defaultDatasetsDestinations,

            string? defaultEventsConfiguration,

            ImmutableArray<Union<Outputs.EventMqttDestinationResponse, Outputs.EventStorageDestinationResponse>> defaultEventsDestinations,

            string? defaultManagementGroupsConfiguration,

            string? defaultStreamsConfiguration,

            ImmutableArray<Union<Outputs.StreamMqttDestinationResponse, Outputs.StreamStorageDestinationResponse>> defaultStreamsDestinations,

            string? description,

            Outputs.DeviceRefResponse deviceRef,

            ImmutableArray<string> discoveredAssetRefs,

            string? displayName,

            string? documentationUri,

            bool? enabled,

            ImmutableArray<Outputs.NamespaceEventResponse> events,

            Outputs.ExtendedLocationResponse extendedLocation,

            string? externalAssetId,

            string? hardwareRevision,

            string id,

            string lastTransitionTime,

            string location,

            ImmutableArray<Outputs.ManagementGroupResponse> managementGroups,

            string? manufacturer,

            string? manufacturerUri,

            string? model,

            string name,

            string? productCode,

            string provisioningState,

            string? serialNumber,

            string? softwareRevision,

            Outputs.NamespaceAssetStatusResponse status,

            ImmutableArray<Outputs.NamespaceStreamResponse> streams,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uuid,

            double version)
        {
            AssetTypeRefs = assetTypeRefs;
            Attributes = attributes;
            AzureApiVersion = azureApiVersion;
            Datasets = datasets;
            DefaultDatasetsConfiguration = defaultDatasetsConfiguration;
            DefaultDatasetsDestinations = defaultDatasetsDestinations;
            DefaultEventsConfiguration = defaultEventsConfiguration;
            DefaultEventsDestinations = defaultEventsDestinations;
            DefaultManagementGroupsConfiguration = defaultManagementGroupsConfiguration;
            DefaultStreamsConfiguration = defaultStreamsConfiguration;
            DefaultStreamsDestinations = defaultStreamsDestinations;
            Description = description;
            DeviceRef = deviceRef;
            DiscoveredAssetRefs = discoveredAssetRefs;
            DisplayName = displayName;
            DocumentationUri = documentationUri;
            Enabled = enabled;
            Events = events;
            ExtendedLocation = extendedLocation;
            ExternalAssetId = externalAssetId;
            HardwareRevision = hardwareRevision;
            Id = id;
            LastTransitionTime = lastTransitionTime;
            Location = location;
            ManagementGroups = managementGroups;
            Manufacturer = manufacturer;
            ManufacturerUri = manufacturerUri;
            Model = model;
            Name = name;
            ProductCode = productCode;
            ProvisioningState = provisioningState;
            SerialNumber = serialNumber;
            SoftwareRevision = softwareRevision;
            Status = status;
            Streams = streams;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Uuid = uuid;
            Version = version;
        }
    }
}
