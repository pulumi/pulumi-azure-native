// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry.Inputs
{

    /// <summary>
    /// Defines the event properties.
    /// </summary>
    public sealed class NamespaceEventArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataPoints")]
        private InputList<Inputs.NamespaceEventDataPointArgs>? _dataPoints;

        /// <summary>
        /// Array of data points that are part of the event. Each data point can have a per-data point configuration.
        /// </summary>
        public InputList<Inputs.NamespaceEventDataPointArgs> DataPoints
        {
            get => _dataPoints ?? (_dataPoints = new InputList<Inputs.NamespaceEventDataPointArgs>());
            set => _dataPoints = value;
        }

        [Input("destinations")]
        private InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>>? _destinations;

        /// <summary>
        /// Destinations for an event.
        /// </summary>
        public InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>>());
            set => _destinations = value;
        }

        /// <summary>
        /// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
        /// </summary>
        [Input("eventConfiguration")]
        public Input<string>? EventConfiguration { get; set; }

        /// <summary>
        /// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
        /// </summary>
        [Input("eventNotifier", required: true)]
        public Input<string> EventNotifier { get; set; } = null!;

        /// <summary>
        /// The name of the event.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// URI or type definition ID.
        /// </summary>
        [Input("typeRef")]
        public Input<string>? TypeRef { get; set; }

        public NamespaceEventArgs()
        {
        }
        public static new NamespaceEventArgs Empty => new NamespaceEventArgs();
    }
}
