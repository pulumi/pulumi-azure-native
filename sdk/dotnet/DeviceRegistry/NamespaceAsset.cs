// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DeviceRegistry
{
    /// <summary>
    /// Asset definition.
    /// 
    /// Uses Azure REST API version 2025-07-01-preview.
    /// 
    /// Other available API versions: 2025-10-01, 2025-11-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native deviceregistry [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
    /// </summary>
    [AzureNativeResourceType("azure-native:deviceregistry:NamespaceAsset")]
    public partial class NamespaceAsset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URIs or type definition IDs.
        /// </summary>
        [Output("assetTypeRefs")]
        public Output<ImmutableArray<string>> AssetTypeRefs { get; private set; } = null!;

        /// <summary>
        /// A set of key-value pairs that contain custom attributes set by the customer.
        /// </summary>
        [Output("attributes")]
        public Output<object?> Attributes { get; private set; } = null!;

        /// <summary>
        /// The Azure API version of the resource.
        /// </summary>
        [Output("azureApiVersion")]
        public Output<string> AzureApiVersion { get; private set; } = null!;

        /// <summary>
        /// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        /// </summary>
        [Output("datasets")]
        public Output<ImmutableArray<Outputs.NamespaceDatasetResponse>> Datasets { get; private set; } = null!;

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        /// </summary>
        [Output("defaultDatasetsConfiguration")]
        public Output<string?> DefaultDatasetsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Default destinations for a dataset.
        /// </summary>
        [Output("defaultDatasetsDestinations")]
        public Output<ImmutableArray<object>> DefaultDatasetsDestinations { get; private set; } = null!;

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        /// </summary>
        [Output("defaultEventsConfiguration")]
        public Output<string?> DefaultEventsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Default destinations for an event.
        /// </summary>
        [Output("defaultEventsDestinations")]
        public Output<ImmutableArray<Union<Outputs.EventMqttDestinationResponse, Outputs.EventStorageDestinationResponse>>> DefaultEventsDestinations { get; private set; } = null!;

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        /// </summary>
        [Output("defaultManagementGroupsConfiguration")]
        public Output<string?> DefaultManagementGroupsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        /// </summary>
        [Output("defaultStreamsConfiguration")]
        public Output<string?> DefaultStreamsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Default destinations for a stream.
        /// </summary>
        [Output("defaultStreamsDestinations")]
        public Output<ImmutableArray<Union<Outputs.StreamMqttDestinationResponse, Outputs.StreamStorageDestinationResponse>>> DefaultStreamsDestinations { get; private set; } = null!;

        /// <summary>
        /// Human-readable description of the asset.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Reference to the device that provides data for this asset. Must provide device name &amp; endpoint on the device to use.
        /// </summary>
        [Output("deviceRef")]
        public Output<Outputs.DeviceRefResponse> DeviceRef { get; private set; } = null!;

        /// <summary>
        /// Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        /// </summary>
        [Output("discoveredAssetRefs")]
        public Output<ImmutableArray<string>> DiscoveredAssetRefs { get; private set; } = null!;

        /// <summary>
        /// Human-readable display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Asset documentation reference.
        /// </summary>
        [Output("documentationUri")]
        public Output<string?> DocumentationUri { get; private set; } = null!;

        /// <summary>
        /// Enabled/disabled status of the asset.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Array of events that are part of the asset. Each event can have per-event configuration.
        /// </summary>
        [Output("events")]
        public Output<ImmutableArray<Outputs.NamespaceEventResponse>> Events { get; private set; } = null!;

        /// <summary>
        /// The extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Asset ID provided by the customer.
        /// </summary>
        [Output("externalAssetId")]
        public Output<string?> ExternalAssetId { get; private set; } = null!;

        /// <summary>
        /// Asset hardware revision number.
        /// </summary>
        [Output("hardwareRevision")]
        public Output<string?> HardwareRevision { get; private set; } = null!;

        /// <summary>
        /// A timestamp (in UTC) that is updated each time the resource is modified.
        /// </summary>
        [Output("lastTransitionTime")]
        public Output<string> LastTransitionTime { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        /// </summary>
        [Output("managementGroups")]
        public Output<ImmutableArray<Outputs.ManagementGroupResponse>> ManagementGroups { get; private set; } = null!;

        /// <summary>
        /// Asset manufacturer.
        /// </summary>
        [Output("manufacturer")]
        public Output<string?> Manufacturer { get; private set; } = null!;

        /// <summary>
        /// Asset manufacturer URI.
        /// </summary>
        [Output("manufacturerUri")]
        public Output<string?> ManufacturerUri { get; private set; } = null!;

        /// <summary>
        /// Asset model.
        /// </summary>
        [Output("model")]
        public Output<string?> Model { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Asset product code.
        /// </summary>
        [Output("productCode")]
        public Output<string?> ProductCode { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Asset serial number.
        /// </summary>
        [Output("serialNumber")]
        public Output<string?> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// Asset software revision number.
        /// </summary>
        [Output("softwareRevision")]
        public Output<string?> SoftwareRevision { get; private set; } = null!;

        /// <summary>
        /// Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.
        /// </summary>
        [Output("status")]
        public Output<Outputs.NamespaceAssetStatusResponse> Status { get; private set; } = null!;

        /// <summary>
        /// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        /// </summary>
        [Output("streams")]
        public Output<ImmutableArray<Outputs.NamespaceStreamResponse>> Streams { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Globally unique, immutable, non-reusable ID.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// An integer that is incremented each time the resource is modified.
        /// </summary>
        [Output("version")]
        public Output<double> Version { get; private set; } = null!;


        /// <summary>
        /// Create a NamespaceAsset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamespaceAsset(string name, NamespaceAssetArgs args, CustomResourceOptions? options = null)
            : base("azure-native:deviceregistry:NamespaceAsset", name, args ?? new NamespaceAssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamespaceAsset(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:deviceregistry:NamespaceAsset", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:deviceregistry/v20250701preview:NamespaceAsset" },
                    new global::Pulumi.Alias { Type = "azure-native:deviceregistry/v20251001:NamespaceAsset" },
                    new global::Pulumi.Alias { Type = "azure-native:deviceregistry/v20251101preview:NamespaceAsset" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamespaceAsset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamespaceAsset Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NamespaceAsset(name, id, options);
        }
    }

    public sealed class NamespaceAssetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the asset.
        /// </summary>
        [Input("assetName")]
        public Input<string>? AssetName { get; set; }

        [Input("assetTypeRefs")]
        private InputList<string>? _assetTypeRefs;

        /// <summary>
        /// URIs or type definition IDs.
        /// </summary>
        public InputList<string> AssetTypeRefs
        {
            get => _assetTypeRefs ?? (_assetTypeRefs = new InputList<string>());
            set => _assetTypeRefs = value;
        }

        /// <summary>
        /// A set of key-value pairs that contain custom attributes set by the customer.
        /// </summary>
        [Input("attributes")]
        public Input<object>? Attributes { get; set; }

        [Input("datasets")]
        private InputList<Inputs.NamespaceDatasetArgs>? _datasets;

        /// <summary>
        /// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
        /// </summary>
        public InputList<Inputs.NamespaceDatasetArgs> Datasets
        {
            get => _datasets ?? (_datasets = new InputList<Inputs.NamespaceDatasetArgs>());
            set => _datasets = value;
        }

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here.
        /// </summary>
        [Input("defaultDatasetsConfiguration")]
        public Input<string>? DefaultDatasetsConfiguration { get; set; }

        [Input("defaultDatasetsDestinations")]
        private InputList<object>? _defaultDatasetsDestinations;

        /// <summary>
        /// Default destinations for a dataset.
        /// </summary>
        public InputList<object> DefaultDatasetsDestinations
        {
            get => _defaultDatasetsDestinations ?? (_defaultDatasetsDestinations = new InputList<object>());
            set => _defaultDatasetsDestinations = value;
        }

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here.
        /// </summary>
        [Input("defaultEventsConfiguration")]
        public Input<string>? DefaultEventsConfiguration { get; set; }

        [Input("defaultEventsDestinations")]
        private InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>>? _defaultEventsDestinations;

        /// <summary>
        /// Default destinations for an event.
        /// </summary>
        public InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>> DefaultEventsDestinations
        {
            get => _defaultEventsDestinations ?? (_defaultEventsDestinations = new InputList<Union<Inputs.EventMqttDestinationArgs, Inputs.EventStorageDestinationArgs>>());
            set => _defaultEventsDestinations = value;
        }

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here.
        /// </summary>
        [Input("defaultManagementGroupsConfiguration")]
        public Input<string>? DefaultManagementGroupsConfiguration { get; set; }

        /// <summary>
        /// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here.
        /// </summary>
        [Input("defaultStreamsConfiguration")]
        public Input<string>? DefaultStreamsConfiguration { get; set; }

        [Input("defaultStreamsDestinations")]
        private InputList<Union<Inputs.StreamMqttDestinationArgs, Inputs.StreamStorageDestinationArgs>>? _defaultStreamsDestinations;

        /// <summary>
        /// Default destinations for a stream.
        /// </summary>
        public InputList<Union<Inputs.StreamMqttDestinationArgs, Inputs.StreamStorageDestinationArgs>> DefaultStreamsDestinations
        {
            get => _defaultStreamsDestinations ?? (_defaultStreamsDestinations = new InputList<Union<Inputs.StreamMqttDestinationArgs, Inputs.StreamStorageDestinationArgs>>());
            set => _defaultStreamsDestinations = value;
        }

        /// <summary>
        /// Human-readable description of the asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Reference to the device that provides data for this asset. Must provide device name &amp; endpoint on the device to use.
        /// </summary>
        [Input("deviceRef", required: true)]
        public Input<Inputs.DeviceRefArgs> DeviceRef { get; set; } = null!;

        [Input("discoveredAssetRefs")]
        private InputList<string>? _discoveredAssetRefs;

        /// <summary>
        /// Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.
        /// </summary>
        public InputList<string> DiscoveredAssetRefs
        {
            get => _discoveredAssetRefs ?? (_discoveredAssetRefs = new InputList<string>());
            set => _discoveredAssetRefs = value;
        }

        /// <summary>
        /// Human-readable display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Asset documentation reference.
        /// </summary>
        [Input("documentationUri")]
        public Input<string>? DocumentationUri { get; set; }

        /// <summary>
        /// Enabled/disabled status of the asset.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("events")]
        private InputList<Inputs.NamespaceEventArgs>? _events;

        /// <summary>
        /// Array of events that are part of the asset. Each event can have per-event configuration.
        /// </summary>
        public InputList<Inputs.NamespaceEventArgs> Events
        {
            get => _events ?? (_events = new InputList<Inputs.NamespaceEventArgs>());
            set => _events = value;
        }

        /// <summary>
        /// The extended location.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// Asset ID provided by the customer.
        /// </summary>
        [Input("externalAssetId")]
        public Input<string>? ExternalAssetId { get; set; }

        /// <summary>
        /// Asset hardware revision number.
        /// </summary>
        [Input("hardwareRevision")]
        public Input<string>? HardwareRevision { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("managementGroups")]
        private InputList<Inputs.ManagementGroupArgs>? _managementGroups;

        /// <summary>
        /// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
        /// </summary>
        public InputList<Inputs.ManagementGroupArgs> ManagementGroups
        {
            get => _managementGroups ?? (_managementGroups = new InputList<Inputs.ManagementGroupArgs>());
            set => _managementGroups = value;
        }

        /// <summary>
        /// Asset manufacturer.
        /// </summary>
        [Input("manufacturer")]
        public Input<string>? Manufacturer { get; set; }

        /// <summary>
        /// Asset manufacturer URI.
        /// </summary>
        [Input("manufacturerUri")]
        public Input<string>? ManufacturerUri { get; set; }

        /// <summary>
        /// Asset model.
        /// </summary>
        [Input("model")]
        public Input<string>? Model { get; set; }

        /// <summary>
        /// The name of the namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// Asset product code.
        /// </summary>
        [Input("productCode")]
        public Input<string>? ProductCode { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Asset serial number.
        /// </summary>
        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        /// <summary>
        /// Asset software revision number.
        /// </summary>
        [Input("softwareRevision")]
        public Input<string>? SoftwareRevision { get; set; }

        [Input("streams")]
        private InputList<Inputs.NamespaceStreamArgs>? _streams;

        /// <summary>
        /// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
        /// </summary>
        public InputList<Inputs.NamespaceStreamArgs> Streams
        {
            get => _streams ?? (_streams = new InputList<Inputs.NamespaceStreamArgs>());
            set => _streams = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NamespaceAssetArgs()
        {
        }
        public static new NamespaceAssetArgs Empty => new NamespaceAssetArgs();
    }
}
