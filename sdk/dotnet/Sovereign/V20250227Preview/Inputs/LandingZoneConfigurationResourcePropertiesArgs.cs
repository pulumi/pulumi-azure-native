// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sovereign.V20250227Preview.Inputs
{

    /// <summary>
    /// The properties of landing zone configuration resource type.
    /// </summary>
    public sealed class LandingZoneConfigurationResourcePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// To deploy the bastion service, choose Yes, otherwise No. Choose UseExisting for existing bastion service.
        /// </summary>
        [Input("azureBastionCreationOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Sovereign.V20250227Preview.ResourceCreationOptions> AzureBastionCreationOption { get; set; } = null!;

        /// <summary>
        /// Azure bastion subnet. IP v4 CIDR block.
        /// </summary>
        [Input("azureBastionSubnetCidrBlock")]
        public Input<string>? AzureBastionSubnetCidrBlock { get; set; }

        [Input("customNamingConvention")]
        private InputList<Inputs.CustomNamingConventionArgs>? _customNamingConvention;

        /// <summary>
        /// The customized naming convention for one or more resource types in this landing zone configuration
        /// </summary>
        public InputList<Inputs.CustomNamingConventionArgs> CustomNamingConvention
        {
            get => _customNamingConvention ?? (_customNamingConvention = new InputList<Inputs.CustomNamingConventionArgs>());
            set => _customNamingConvention = value;
        }

        /// <summary>
        /// To deploy ddos, choose Yes, otherwise No. Select Existing to provide an existing ddos protection plan.
        /// </summary>
        [Input("ddosProtectionCreationOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Sovereign.V20250227Preview.ResourceCreationOptions> DdosProtectionCreationOption { get; set; } = null!;

        /// <summary>
        /// This will be applied to the decommissioned management group.
        /// </summary>
        [Input("decommissionedMgMetadata")]
        public Input<Inputs.DecommissionedManagementGroupPropertiesArgs>? DecommissionedMgMetadata { get; set; }

        /// <summary>
        /// The resource id of azure bastion.
        /// </summary>
        [Input("existingAzureBastionId")]
        public Input<string>? ExistingAzureBastionId { get; set; }

        /// <summary>
        /// The resource id of the ddos protection plan.
        /// </summary>
        [Input("existingDdosProtectionId")]
        public Input<string>? ExistingDdosProtectionId { get; set; }

        /// <summary>
        /// The resource id of the log analytics workspace that was created to centralize log ingestion.
        /// </summary>
        [Input("existingLogAnalyticsWorkspaceId")]
        public Input<string>? ExistingLogAnalyticsWorkspaceId { get; set; }

        /// <summary>
        /// To deploy firewall, choose the Standard/Premium based on the desired SKU. Choose None for no firewall and UseExisting for a pre existing one.
        /// </summary>
        [Input("firewallCreationOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Sovereign.V20250227Preview.FirewallCreationOptions> FirewallCreationOption { get; set; } = null!;

        /// <summary>
        /// Azure firewall subnet. IPv4 CIDR block.
        /// </summary>
        [Input("firewallSubnetCidrBlock")]
        public Input<string>? FirewallSubnetCidrBlock { get; set; }

        /// <summary>
        /// Gateway subnet. IPv4 CIDR block.
        /// </summary>
        [Input("gatewaySubnetCidrBlock", required: true)]
        public Input<string> GatewaySubnetCidrBlock { get; set; } = null!;

        /// <summary>
        /// The address space for the VNET. IPv4 CIDR block.
        /// </summary>
        [Input("hubNetworkCidrBlock", required: true)]
        public Input<string> HubNetworkCidrBlock { get; set; } = null!;

        [Input("landingZonesMgChildren")]
        private InputList<Inputs.LandingZoneManagementGroupPropertiesArgs>? _landingZonesMgChildren;

        /// <summary>
        /// Landing zone children management group properties
        /// </summary>
        public InputList<Inputs.LandingZoneManagementGroupPropertiesArgs> LandingZonesMgChildren
        {
            get => _landingZonesMgChildren ?? (_landingZonesMgChildren = new InputList<Inputs.LandingZoneManagementGroupPropertiesArgs>());
            set => _landingZonesMgChildren = value;
        }

        /// <summary>
        /// This will be applied to the landing zone management groups.
        /// </summary>
        [Input("landingZonesMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? LandingZonesMgMetadata { get; set; }

        /// <summary>
        /// To deploy log analytics workspace, choose Yes, otherwise No. Select UseExisting to provide an existing log analytics workspace.
        /// </summary>
        [Input("logAnalyticsWorkspaceCreationOption", required: true)]
        public InputUnion<string, Pulumi.AzureNative.Sovereign.V20250227Preview.ResourceCreationOptions> LogAnalyticsWorkspaceCreationOption { get; set; } = null!;

        /// <summary>
        /// Set how long logs are retained for, in days. Minimum length is 30 and maximum is 730
        /// </summary>
        [Input("logRetentionInDays", required: true)]
        public Input<double> LogRetentionInDays { get; set; } = null!;

        /// <summary>
        /// The managed identity to be tied to this landing zone configuration
        /// </summary>
        [Input("managedIdentity", required: true)]
        public Input<Inputs.ManagedIdentityPropertiesArgs> ManagedIdentity { get; set; } = null!;

        /// <summary>
        /// The naming convention that's used by default for all resource types for this landing zone configuration
        /// </summary>
        [Input("namingConventionFormula")]
        public Input<string>? NamingConventionFormula { get; set; }

        /// <summary>
        /// This will be applied to the connectivity management group under platform.
        /// </summary>
        [Input("platformConnectivityMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? PlatformConnectivityMgMetadata { get; set; }

        /// <summary>
        /// This will be applied to the identity management group under platform.
        /// </summary>
        [Input("platformIdentityMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? PlatformIdentityMgMetadata { get; set; }

        /// <summary>
        /// This will be applied to the management management group under platform.
        /// </summary>
        [Input("platformManagementMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? PlatformManagementMgMetadata { get; set; }

        [Input("platformMgChildren")]
        private InputList<Inputs.PlatformManagementGroupPropertiesArgs>? _platformMgChildren;

        /// <summary>
        /// Platform children management group properties.
        /// </summary>
        public InputList<Inputs.PlatformManagementGroupPropertiesArgs> PlatformMgChildren
        {
            get => _platformMgChildren ?? (_platformMgChildren = new InputList<Inputs.PlatformManagementGroupPropertiesArgs>());
            set => _platformMgChildren = value;
        }

        /// <summary>
        /// This will be applied to the platform management group.
        /// </summary>
        [Input("platformMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? PlatformMgMetadata { get; set; }

        /// <summary>
        /// This will be applied to the sandbox management group.
        /// </summary>
        [Input("sandboxMgMetadata")]
        public Input<Inputs.SandboxManagementGroupPropertiesArgs>? SandboxMgMetadata { get; set; }

        [Input("tags")]
        private InputList<Inputs.TagsArgs>? _tags;

        /// <summary>
        /// Array of tag objects in format of {'name':'a tag name', 'value':'a tag value'}.
        /// </summary>
        public InputList<Inputs.TagsArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TagsArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// This will be applied to the root of the landing zone deployment.
        /// </summary>
        [Input("topLevelMgMetadata")]
        public Input<Inputs.ManagementGroupPropertiesArgs>? TopLevelMgMetadata { get; set; }

        public LandingZoneConfigurationResourcePropertiesArgs()
        {
        }
        public static new LandingZoneConfigurationResourcePropertiesArgs Empty => new LandingZoneConfigurationResourcePropertiesArgs();
    }
}
