// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.Sovereign.V20250227Preview
{
    /// <summary>
    /// To deploy firewall, choose the Standard/Premium based on the desired SKU. Choose None for no firewall and UseExisting for a pre existing one.
    /// </summary>
    [EnumType]
    public readonly struct FirewallCreationOptions : IEquatable<FirewallCreationOptions>
    {
        private readonly string _value;

        private FirewallCreationOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value when a firewall resource is not created.
        /// </summary>
        public static FirewallCreationOptions None { get; } = new FirewallCreationOptions("None");
        /// <summary>
        /// Value when the firewall creation is based on the standard SKU.
        /// </summary>
        public static FirewallCreationOptions Standard { get; } = new FirewallCreationOptions("Standard");
        /// <summary>
        /// Value when the firewall creation is based on the premium SKU.
        /// </summary>
        public static FirewallCreationOptions Premium { get; } = new FirewallCreationOptions("Premium");

        public static bool operator ==(FirewallCreationOptions left, FirewallCreationOptions right) => left.Equals(right);
        public static bool operator !=(FirewallCreationOptions left, FirewallCreationOptions right) => !left.Equals(right);

        public static explicit operator string(FirewallCreationOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallCreationOptions other && Equals(other);
        public bool Equals(FirewallCreationOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity.
    /// </summary>
    [EnumType]
    public readonly struct ManagedIdentityResourceType : IEquatable<ManagedIdentityResourceType>
    {
        private readonly string _value;

        private ManagedIdentityResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// System assigned managed identity.
        /// </summary>
        public static ManagedIdentityResourceType SystemAssigned { get; } = new ManagedIdentityResourceType("SystemAssigned");
        /// <summary>
        /// User assigned managed identity.
        /// </summary>
        public static ManagedIdentityResourceType UserAssigned { get; } = new ManagedIdentityResourceType("UserAssigned");

        public static bool operator ==(ManagedIdentityResourceType left, ManagedIdentityResourceType right) => left.Equals(right);
        public static bool operator !=(ManagedIdentityResourceType left, ManagedIdentityResourceType right) => !left.Equals(right);

        public static explicit operator string(ManagedIdentityResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedIdentityResourceType other && Equals(other);
        public bool Equals(ManagedIdentityResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To deploy log analytics workspace, choose Yes, otherwise No. Select UseExisting to provide an existing log analytics workspace.
    /// </summary>
    [EnumType]
    public readonly struct ResourceCreationOptions : IEquatable<ResourceCreationOptions>
    {
        private readonly string _value;

        private ResourceCreationOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value to create a new resource.
        /// </summary>
        public static ResourceCreationOptions Yes { get; } = new ResourceCreationOptions("Yes");
        /// <summary>
        /// Value to not create a new resource.
        /// </summary>
        public static ResourceCreationOptions No { get; } = new ResourceCreationOptions("No");
        /// <summary>
        /// Value to use an existing resource.
        /// </summary>
        public static ResourceCreationOptions UseExisting { get; } = new ResourceCreationOptions("UseExisting");

        public static bool operator ==(ResourceCreationOptions left, ResourceCreationOptions right) => left.Equals(right);
        public static bool operator !=(ResourceCreationOptions left, ResourceCreationOptions right) => !left.Equals(right);

        public static explicit operator string(ResourceCreationOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceCreationOptions other && Equals(other);
        public bool Equals(ResourceCreationOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the resource.
    /// </summary>
    [EnumType]
    public readonly struct ResourceType : IEquatable<ResourceType>
    {
        private readonly string _value;

        private ResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Value when customer wants to provide custom naming convention for Azure Firewall.
        /// </summary>
        public static ResourceType AzureFirewalls { get; } = new ResourceType("azureFirewalls");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for Log Analytics workspace.
        /// </summary>
        public static ResourceType Workspaces { get; } = new ResourceType("workspaces");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for automation account.
        /// </summary>
        public static ResourceType AutomationAccounts { get; } = new ResourceType("automationAccounts");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for dashboard.
        /// </summary>
        public static ResourceType Dashboards { get; } = new ResourceType("dashboards");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for managed identity.
        /// </summary>
        public static ResourceType UserAssignedIdentities { get; } = new ResourceType("userAssignedIdentities");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for Bastion.
        /// </summary>
        public static ResourceType BastionHosts { get; } = new ResourceType("bastionHosts");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for DDoS protection plan.
        /// </summary>
        public static ResourceType DdosProtectionPlans { get; } = new ResourceType("ddosProtectionPlans");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for Bastion NSG.
        /// </summary>
        public static ResourceType NetworkSecurityGroups { get; } = new ResourceType("networkSecurityGroups");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for virtual network.
        /// </summary>
        public static ResourceType VirtualNetworks { get; } = new ResourceType("virtualNetworks");
        /// <summary>
        /// Value when customer wants to provide custom naming convention for route table.
        /// </summary>
        public static ResourceType RouteTables { get; } = new ResourceType("routeTables");

        public static bool operator ==(ResourceType left, ResourceType right) => left.Equals(right);
        public static bool operator !=(ResourceType left, ResourceType right) => !left.Equals(right);

        public static explicit operator string(ResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceType other && Equals(other);
        public bool Equals(ResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
