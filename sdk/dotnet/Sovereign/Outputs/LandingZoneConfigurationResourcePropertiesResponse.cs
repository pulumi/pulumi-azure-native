// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Sovereign.Outputs
{

    /// <summary>
    /// The properties of landing zone configuration resource type.
    /// </summary>
    [OutputType]
    public sealed class LandingZoneConfigurationResourcePropertiesResponse
    {
        /// <summary>
        /// The status for the landing zone configurations workflow.
        /// </summary>
        public readonly string AuthoringStatus;
        /// <summary>
        /// To deploy the bastion service, choose Yes, otherwise No. Choose UseExisting for existing bastion service.
        /// </summary>
        public readonly string AzureBastionCreationOption;
        /// <summary>
        /// Azure bastion subnet. IP v4 CIDR block.
        /// </summary>
        public readonly string? AzureBastionSubnetCidrBlock;
        /// <summary>
        /// The customized naming convention for one or more resource types in this landing zone configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomNamingConventionResponse> CustomNamingConvention;
        /// <summary>
        /// To deploy ddos, choose Yes, otherwise No. Select Existing to provide an existing ddos protection plan.
        /// </summary>
        public readonly string DdosProtectionCreationOption;
        /// <summary>
        /// This will be applied to the decommissioned management group.
        /// </summary>
        public readonly Outputs.DecommissionedManagementGroupPropertiesResponse? DecommissionedMgMetadata;
        /// <summary>
        /// The resource id of azure bastion.
        /// </summary>
        public readonly string? ExistingAzureBastionId;
        /// <summary>
        /// The resource id of the ddos protection plan.
        /// </summary>
        public readonly string? ExistingDdosProtectionId;
        /// <summary>
        /// The resource id of the log analytics workspace that was created to centralize log ingestion.
        /// </summary>
        public readonly string? ExistingLogAnalyticsWorkspaceId;
        /// <summary>
        /// To deploy firewall, choose the Standard/Premium based on the desired SKU. Choose None for no firewall and UseExisting for a pre existing one.
        /// </summary>
        public readonly string FirewallCreationOption;
        /// <summary>
        /// Azure firewall subnet. IPv4 CIDR block.
        /// </summary>
        public readonly string? FirewallSubnetCidrBlock;
        /// <summary>
        /// Gateway subnet. IPv4 CIDR block.
        /// </summary>
        public readonly string GatewaySubnetCidrBlock;
        /// <summary>
        /// The address space for the VNET. IPv4 CIDR block.
        /// </summary>
        public readonly string HubNetworkCidrBlock;
        /// <summary>
        /// Landing zone children management group properties
        /// </summary>
        public readonly ImmutableArray<Outputs.LandingZoneManagementGroupPropertiesResponse> LandingZonesMgChildren;
        /// <summary>
        /// This will be applied to the landing zone management groups.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? LandingZonesMgMetadata;
        /// <summary>
        /// To deploy log analytics workspace, choose Yes, otherwise No. Select UseExisting to provide an existing log analytics workspace.
        /// </summary>
        public readonly string LogAnalyticsWorkspaceCreationOption;
        /// <summary>
        /// Set how long logs are retained for, in days. Minimum length is 30 and maximum is 730
        /// </summary>
        public readonly double LogRetentionInDays;
        /// <summary>
        /// The managed identity to be tied to this landing zone configuration
        /// </summary>
        public readonly Outputs.ManagedIdentityPropertiesResponse ManagedIdentity;
        /// <summary>
        /// The naming convention that's used by default for all resource types for this landing zone configuration
        /// </summary>
        public readonly string? NamingConventionFormula;
        /// <summary>
        /// This will be applied to the connectivity management group under platform.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? PlatformConnectivityMgMetadata;
        /// <summary>
        /// This will be applied to the identity management group under platform.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? PlatformIdentityMgMetadata;
        /// <summary>
        /// This will be applied to the management management group under platform.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? PlatformManagementMgMetadata;
        /// <summary>
        /// Platform children management group properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.PlatformManagementGroupPropertiesResponse> PlatformMgChildren;
        /// <summary>
        /// This will be applied to the platform management group.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? PlatformMgMetadata;
        /// <summary>
        /// The status of a user-initiated, control-plane operation on the landing zone configuration.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// This will be applied to the sandbox management group.
        /// </summary>
        public readonly Outputs.SandboxManagementGroupPropertiesResponse? SandboxMgMetadata;
        /// <summary>
        /// Array of tag objects in format of {'name':'a tag name', 'value':'a tag value'}.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagsResponse> Tags;
        /// <summary>
        /// This will be applied to the root of the landing zone deployment.
        /// </summary>
        public readonly Outputs.ManagementGroupPropertiesResponse? TopLevelMgMetadata;

        [OutputConstructor]
        private LandingZoneConfigurationResourcePropertiesResponse(
            string authoringStatus,

            string azureBastionCreationOption,

            string? azureBastionSubnetCidrBlock,

            ImmutableArray<Outputs.CustomNamingConventionResponse> customNamingConvention,

            string ddosProtectionCreationOption,

            Outputs.DecommissionedManagementGroupPropertiesResponse? decommissionedMgMetadata,

            string? existingAzureBastionId,

            string? existingDdosProtectionId,

            string? existingLogAnalyticsWorkspaceId,

            string firewallCreationOption,

            string? firewallSubnetCidrBlock,

            string gatewaySubnetCidrBlock,

            string hubNetworkCidrBlock,

            ImmutableArray<Outputs.LandingZoneManagementGroupPropertiesResponse> landingZonesMgChildren,

            Outputs.ManagementGroupPropertiesResponse? landingZonesMgMetadata,

            string logAnalyticsWorkspaceCreationOption,

            double logRetentionInDays,

            Outputs.ManagedIdentityPropertiesResponse managedIdentity,

            string? namingConventionFormula,

            Outputs.ManagementGroupPropertiesResponse? platformConnectivityMgMetadata,

            Outputs.ManagementGroupPropertiesResponse? platformIdentityMgMetadata,

            Outputs.ManagementGroupPropertiesResponse? platformManagementMgMetadata,

            ImmutableArray<Outputs.PlatformManagementGroupPropertiesResponse> platformMgChildren,

            Outputs.ManagementGroupPropertiesResponse? platformMgMetadata,

            string provisioningState,

            Outputs.SandboxManagementGroupPropertiesResponse? sandboxMgMetadata,

            ImmutableArray<Outputs.TagsResponse> tags,

            Outputs.ManagementGroupPropertiesResponse? topLevelMgMetadata)
        {
            AuthoringStatus = authoringStatus;
            AzureBastionCreationOption = azureBastionCreationOption;
            AzureBastionSubnetCidrBlock = azureBastionSubnetCidrBlock;
            CustomNamingConvention = customNamingConvention;
            DdosProtectionCreationOption = ddosProtectionCreationOption;
            DecommissionedMgMetadata = decommissionedMgMetadata;
            ExistingAzureBastionId = existingAzureBastionId;
            ExistingDdosProtectionId = existingDdosProtectionId;
            ExistingLogAnalyticsWorkspaceId = existingLogAnalyticsWorkspaceId;
            FirewallCreationOption = firewallCreationOption;
            FirewallSubnetCidrBlock = firewallSubnetCidrBlock;
            GatewaySubnetCidrBlock = gatewaySubnetCidrBlock;
            HubNetworkCidrBlock = hubNetworkCidrBlock;
            LandingZonesMgChildren = landingZonesMgChildren;
            LandingZonesMgMetadata = landingZonesMgMetadata;
            LogAnalyticsWorkspaceCreationOption = logAnalyticsWorkspaceCreationOption;
            LogRetentionInDays = logRetentionInDays;
            ManagedIdentity = managedIdentity;
            NamingConventionFormula = namingConventionFormula;
            PlatformConnectivityMgMetadata = platformConnectivityMgMetadata;
            PlatformIdentityMgMetadata = platformIdentityMgMetadata;
            PlatformManagementMgMetadata = platformManagementMgMetadata;
            PlatformMgChildren = platformMgChildren;
            PlatformMgMetadata = platformMgMetadata;
            ProvisioningState = provisioningState;
            SandboxMgMetadata = sandboxMgMetadata;
            Tags = tags;
            TopLevelMgMetadata = topLevelMgMetadata;
        }
    }
}
