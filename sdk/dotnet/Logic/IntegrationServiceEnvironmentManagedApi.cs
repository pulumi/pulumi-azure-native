// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logic
{
    /// <summary>
    /// The integration service environment managed api.
    /// API Version: 2019-05-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:logic:IntegrationServiceEnvironmentManagedApi")]
    public partial class IntegrationServiceEnvironmentManagedApi : Pulumi.CustomResource
    {
        /// <summary>
        /// The API definition.
        /// </summary>
        [Output("apiDefinitionUrl")]
        public Output<string> ApiDefinitionUrl { get; private set; } = null!;

        /// <summary>
        /// The api definitions.
        /// </summary>
        [Output("apiDefinitions")]
        public Output<Outputs.ApiResourceDefinitionsResponse> ApiDefinitions { get; private set; } = null!;

        /// <summary>
        /// The backend service.
        /// </summary>
        [Output("backendService")]
        public Output<Outputs.ApiResourceBackendServiceResponse> BackendService { get; private set; } = null!;

        /// <summary>
        /// The capabilities.
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<string>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// The category.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// The connection parameters.
        /// </summary>
        [Output("connectionParameters")]
        public Output<ImmutableDictionary<string, object>> ConnectionParameters { get; private set; } = null!;

        /// <summary>
        /// The integration service environment managed api deployment parameters.
        /// </summary>
        [Output("deploymentParameters")]
        public Output<Outputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse?> DeploymentParameters { get; private set; } = null!;

        /// <summary>
        /// The api general information.
        /// </summary>
        [Output("generalInformation")]
        public Output<Outputs.ApiResourceGeneralInformationResponse> GeneralInformation { get; private set; } = null!;

        /// <summary>
        /// The integration service environment reference.
        /// </summary>
        [Output("integrationServiceEnvironment")]
        public Output<Outputs.ResourceReferenceResponse?> IntegrationServiceEnvironment { get; private set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The metadata.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ApiResourceMetadataResponse> Metadata { get; private set; } = null!;

        /// <summary>
        /// Gets the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The policies for the API.
        /// </summary>
        [Output("policies")]
        public Output<Outputs.ApiResourcePoliciesResponse> Policies { get; private set; } = null!;

        /// <summary>
        /// The provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The runtime urls.
        /// </summary>
        [Output("runtimeUrls")]
        public Output<ImmutableArray<string>> RuntimeUrls { get; private set; } = null!;

        /// <summary>
        /// The resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationServiceEnvironmentManagedApi resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationServiceEnvironmentManagedApi(string name, IntegrationServiceEnvironmentManagedApiArgs args, CustomResourceOptions? options = null)
            : base("azure-native:logic:IntegrationServiceEnvironmentManagedApi", name, args ?? new IntegrationServiceEnvironmentManagedApiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationServiceEnvironmentManagedApi(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:logic:IntegrationServiceEnvironmentManagedApi", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-native:logic/v20190501:IntegrationServiceEnvironmentManagedApi"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationServiceEnvironmentManagedApi resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationServiceEnvironmentManagedApi Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new IntegrationServiceEnvironmentManagedApi(name, id, options);
        }
    }

    public sealed class IntegrationServiceEnvironmentManagedApiArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The api name.
        /// </summary>
        [Input("apiName")]
        public Input<string>? ApiName { get; set; }

        /// <summary>
        /// The integration service environment managed api deployment parameters.
        /// </summary>
        [Input("deploymentParameters")]
        public Input<Inputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs>? DeploymentParameters { get; set; }

        /// <summary>
        /// The integration service environment reference.
        /// </summary>
        [Input("integrationServiceEnvironment")]
        public Input<Inputs.ResourceReferenceArgs>? IntegrationServiceEnvironment { get; set; }

        /// <summary>
        /// The integration service environment name.
        /// </summary>
        [Input("integrationServiceEnvironmentName", required: true)]
        public Input<string> IntegrationServiceEnvironmentName { get; set; } = null!;

        /// <summary>
        /// The resource location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public IntegrationServiceEnvironmentManagedApiArgs()
        {
        }
    }
}
