// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logic.V20160601
{
    public static class GetPartner
    {
        /// <summary>
        /// Gets an integration account partner.
        /// </summary>
        public static Task<GetPartnerResult> InvokeAsync(GetPartnerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPartnerResult>("azure-native:logic/v20160601:getPartner", args ?? new GetPartnerArgs(), options.WithDefaults());

        /// <summary>
        /// Gets an integration account partner.
        /// </summary>
        public static Output<GetPartnerResult> Invoke(GetPartnerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPartnerResult>("azure-native:logic/v20160601:getPartner", args ?? new GetPartnerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPartnerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The integration account name.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public string IntegrationAccountName { get; set; } = null!;

        /// <summary>
        /// The integration account partner name.
        /// </summary>
        [Input("partnerName", required: true)]
        public string PartnerName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPartnerArgs()
        {
        }
        public static new GetPartnerArgs Empty => new GetPartnerArgs();
    }

    public sealed class GetPartnerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The integration account name.
        /// </summary>
        [Input("integrationAccountName", required: true)]
        public Input<string> IntegrationAccountName { get; set; } = null!;

        /// <summary>
        /// The integration account partner name.
        /// </summary>
        [Input("partnerName", required: true)]
        public Input<string> PartnerName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPartnerInvokeArgs()
        {
        }
        public static new GetPartnerInvokeArgs Empty => new GetPartnerInvokeArgs();
    }


    [OutputType]
    public sealed class GetPartnerResult
    {
        /// <summary>
        /// The resource id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Gets the resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The integration account partner properties.
        /// </summary>
        public readonly Outputs.IntegrationAccountPartnerPropertiesResponse Properties;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Gets the resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPartnerResult(
            string id,

            string? location,

            string name,

            Outputs.IntegrationAccountPartnerPropertiesResponse properties,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Id = id;
            Location = location;
            Name = name;
            Properties = properties;
            Tags = tags;
            Type = type;
        }
    }
}
