// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Logic.V20190501
{
    public static class GetIntegrationServiceEnvironmentManagedApi
    {
        /// <summary>
        /// The integration service environment managed api.
        /// </summary>
        public static Task<GetIntegrationServiceEnvironmentManagedApiResult> InvokeAsync(GetIntegrationServiceEnvironmentManagedApiArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIntegrationServiceEnvironmentManagedApiResult>("azure-native:logic/v20190501:getIntegrationServiceEnvironmentManagedApi", args ?? new GetIntegrationServiceEnvironmentManagedApiArgs(), options.WithDefaults());

        /// <summary>
        /// The integration service environment managed api.
        /// </summary>
        public static Output<GetIntegrationServiceEnvironmentManagedApiResult> Invoke(GetIntegrationServiceEnvironmentManagedApiInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIntegrationServiceEnvironmentManagedApiResult>("azure-native:logic/v20190501:getIntegrationServiceEnvironmentManagedApi", args ?? new GetIntegrationServiceEnvironmentManagedApiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIntegrationServiceEnvironmentManagedApiArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The api name.
        /// </summary>
        [Input("apiName", required: true)]
        public string ApiName { get; set; } = null!;

        /// <summary>
        /// The integration service environment name.
        /// </summary>
        [Input("integrationServiceEnvironmentName", required: true)]
        public string IntegrationServiceEnvironmentName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public string ResourceGroup { get; set; } = null!;

        public GetIntegrationServiceEnvironmentManagedApiArgs()
        {
        }
    }

    public sealed class GetIntegrationServiceEnvironmentManagedApiInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The api name.
        /// </summary>
        [Input("apiName", required: true)]
        public Input<string> ApiName { get; set; } = null!;

        /// <summary>
        /// The integration service environment name.
        /// </summary>
        [Input("integrationServiceEnvironmentName", required: true)]
        public Input<string> IntegrationServiceEnvironmentName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        public GetIntegrationServiceEnvironmentManagedApiInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIntegrationServiceEnvironmentManagedApiResult
    {
        /// <summary>
        /// The API definition.
        /// </summary>
        public readonly string ApiDefinitionUrl;
        /// <summary>
        /// The api definitions.
        /// </summary>
        public readonly Outputs.ApiResourceDefinitionsResponse ApiDefinitions;
        /// <summary>
        /// The backend service.
        /// </summary>
        public readonly Outputs.ApiResourceBackendServiceResponse BackendService;
        /// <summary>
        /// The capabilities.
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// The category.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The connection parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, object> ConnectionParameters;
        /// <summary>
        /// The integration service environment managed api deployment parameters.
        /// </summary>
        public readonly Outputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse? DeploymentParameters;
        /// <summary>
        /// The api general information.
        /// </summary>
        public readonly Outputs.ApiResourceGeneralInformationResponse GeneralInformation;
        /// <summary>
        /// The resource id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The integration service environment reference.
        /// </summary>
        public readonly Outputs.ResourceReferenceResponse? IntegrationServiceEnvironment;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The metadata.
        /// </summary>
        public readonly Outputs.ApiResourceMetadataResponse Metadata;
        /// <summary>
        /// Gets the resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The policies for the API.
        /// </summary>
        public readonly Outputs.ApiResourcePoliciesResponse Policies;
        /// <summary>
        /// The provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The runtime urls.
        /// </summary>
        public readonly ImmutableArray<string> RuntimeUrls;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Gets the resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetIntegrationServiceEnvironmentManagedApiResult(
            string apiDefinitionUrl,

            Outputs.ApiResourceDefinitionsResponse apiDefinitions,

            Outputs.ApiResourceBackendServiceResponse backendService,

            ImmutableArray<string> capabilities,

            string category,

            ImmutableDictionary<string, object> connectionParameters,

            Outputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersResponse? deploymentParameters,

            Outputs.ApiResourceGeneralInformationResponse generalInformation,

            string id,

            Outputs.ResourceReferenceResponse? integrationServiceEnvironment,

            string? location,

            Outputs.ApiResourceMetadataResponse metadata,

            string name,

            Outputs.ApiResourcePoliciesResponse policies,

            string provisioningState,

            ImmutableArray<string> runtimeUrls,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            ApiDefinitionUrl = apiDefinitionUrl;
            ApiDefinitions = apiDefinitions;
            BackendService = backendService;
            Capabilities = capabilities;
            Category = category;
            ConnectionParameters = connectionParameters;
            DeploymentParameters = deploymentParameters;
            GeneralInformation = generalInformation;
            Id = id;
            IntegrationServiceEnvironment = integrationServiceEnvironment;
            Location = location;
            Metadata = metadata;
            Name = name;
            Policies = policies;
            ProvisioningState = provisioningState;
            RuntimeUrls = runtimeUrls;
            Tags = tags;
            Type = type;
        }
    }
}
