// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Logic.V20190501.Outputs
{

    [OutputType]
    public sealed class IntegrationAccountSchemaPropertiesResponseResult
    {
        /// <summary>
        /// The changed time.
        /// </summary>
        public readonly string ChangedTime;
        /// <summary>
        /// The content.
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// The content link.
        /// </summary>
        public readonly Outputs.ContentLinkResponseResult ContentLink;
        /// <summary>
        /// The content type.
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// The created time.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// The document name.
        /// </summary>
        public readonly string? DocumentName;
        /// <summary>
        /// The file name.
        /// </summary>
        public readonly string? FileName;
        /// <summary>
        /// The metadata.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Metadata;
        /// <summary>
        /// The schema type.
        /// </summary>
        public readonly string SchemaType;
        /// <summary>
        /// The target namespace of the schema.
        /// </summary>
        public readonly string? TargetNamespace;

        [OutputConstructor]
        private IntegrationAccountSchemaPropertiesResponseResult(
            string changedTime,

            string? content,

            Outputs.ContentLinkResponseResult contentLink,

            string? contentType,

            string createdTime,

            string? documentName,

            string? fileName,

            ImmutableDictionary<string, string>? metadata,

            string schemaType,

            string? targetNamespace)
        {
            ChangedTime = changedTime;
            Content = content;
            ContentLink = contentLink;
            ContentType = contentType;
            CreatedTime = createdTime;
            DocumentName = documentName;
            FileName = fileName;
            Metadata = metadata;
            SchemaType = schemaType;
            TargetNamespace = targetNamespace;
        }
    }
}
