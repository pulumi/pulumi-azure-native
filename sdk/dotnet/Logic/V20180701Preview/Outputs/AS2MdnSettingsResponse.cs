// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Logic.V20180701Preview.Outputs
{

    [OutputType]
    public sealed class AS2MdnSettingsResponse
    {
        /// <summary>
        /// The disposition notification to header value.
        /// </summary>
        public readonly string? DispositionNotificationTo;
        /// <summary>
        /// The MDN text.
        /// </summary>
        public readonly string? MdnText;
        /// <summary>
        /// The signing or hashing algorithm.
        /// </summary>
        public readonly string MicHashingAlgorithm;
        /// <summary>
        /// The value indicating whether to send or request a MDN.
        /// </summary>
        public readonly bool NeedMDN;
        /// <summary>
        /// The receipt delivery URL.
        /// </summary>
        public readonly string? ReceiptDeliveryUrl;
        /// <summary>
        /// The value indicating whether to send inbound MDN to message box.
        /// </summary>
        public readonly bool SendInboundMDNToMessageBox;
        /// <summary>
        /// The value indicating whether to send the asynchronous MDN.
        /// </summary>
        public readonly bool SendMDNAsynchronously;
        /// <summary>
        /// The value indicating whether the MDN needs to be signed or not.
        /// </summary>
        public readonly bool SignMDN;
        /// <summary>
        /// The value indicating whether to sign the outbound MDN if optional.
        /// </summary>
        public readonly bool SignOutboundMDNIfOptional;

        [OutputConstructor]
        private AS2MdnSettingsResponse(
            string? dispositionNotificationTo,

            string? mdnText,

            string micHashingAlgorithm,

            bool needMDN,

            string? receiptDeliveryUrl,

            bool sendInboundMDNToMessageBox,

            bool sendMDNAsynchronously,

            bool signMDN,

            bool signOutboundMDNIfOptional)
        {
            DispositionNotificationTo = dispositionNotificationTo;
            MdnText = mdnText;
            MicHashingAlgorithm = micHashingAlgorithm;
            NeedMDN = needMDN;
            ReceiptDeliveryUrl = receiptDeliveryUrl;
            SendInboundMDNToMessageBox = sendInboundMDNToMessageBox;
            SendMDNAsynchronously = sendMDNAsynchronously;
            SignMDN = signMDN;
            SignOutboundMDNIfOptional = signOutboundMDNIfOptional;
        }
    }
}
