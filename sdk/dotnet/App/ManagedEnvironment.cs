// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App
{
    /// <summary>
    /// An environment for hosting container apps
    /// Azure REST API version: 2022-10-01. Prior API version in Azure Native 1.x: 2022-03-01.
    /// 
    /// Other available API versions: 2022-01-01-preview, 2023-04-01-preview, 2023-05-01, 2023-05-02-preview, 2023-08-01-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:app:ManagedEnvironment")]
    public partial class ManagedEnvironment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        [Output("appLogsConfiguration")]
        public Output<Outputs.AppLogsConfigurationResponse?> AppLogsConfiguration { get; private set; } = null!;

        /// <summary>
        /// Custom domain configuration for the environment
        /// </summary>
        [Output("customDomainConfiguration")]
        public Output<Outputs.CustomDomainConfigurationResponse?> CustomDomainConfiguration { get; private set; } = null!;

        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Output("daprAIConnectionString")]
        public Output<string?> DaprAIConnectionString { get; private set; } = null!;

        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Output("daprAIInstrumentationKey")]
        public Output<string?> DaprAIInstrumentationKey { get; private set; } = null!;

        /// <summary>
        /// Default Domain Name for the cluster
        /// </summary>
        [Output("defaultDomain")]
        public Output<string> DefaultDomain { get; private set; } = null!;

        /// <summary>
        /// Any errors that occurred during deployment or deployment validation
        /// </summary>
        [Output("deploymentErrors")]
        public Output<string> DeploymentErrors { get; private set; } = null!;

        /// <summary>
        /// The endpoint of the eventstream of the Environment.
        /// </summary>
        [Output("eventStreamEndpoint")]
        public Output<string> EventStreamEndpoint { get; private set; } = null!;

        /// <summary>
        /// Kind of the Environment.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the Environment.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// SKU properties of the Environment.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.EnvironmentSkuPropertiesResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Static IP of the Environment
        /// </summary>
        [Output("staticIp")]
        public Output<string> StaticIp { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Vnet configuration for the environment
        /// </summary>
        [Output("vnetConfiguration")]
        public Output<Outputs.VnetConfigurationResponse?> VnetConfiguration { get; private set; } = null!;

        /// <summary>
        /// Workload profiles configured for the Managed Environment.
        /// </summary>
        [Output("workloadProfiles")]
        public Output<ImmutableArray<Outputs.WorkloadProfileResponse>> WorkloadProfiles { get; private set; } = null!;

        /// <summary>
        /// Whether or not this Managed Environment is zone-redundant.
        /// </summary>
        [Output("zoneRedundant")]
        public Output<bool?> ZoneRedundant { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedEnvironment(string name, ManagedEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("azure-native:app:ManagedEnvironment", name, args ?? new ManagedEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedEnvironment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:app:ManagedEnvironment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:app/v20220101preview:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20220301:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20220601preview:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20221001:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20221101preview:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20230401preview:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20230501:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20230502preview:ManagedEnvironment" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20230801preview:ManagedEnvironment" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedEnvironment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ManagedEnvironment(name, id, options);
        }
    }

    public sealed class ManagedEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        [Input("appLogsConfiguration")]
        public Input<Inputs.AppLogsConfigurationArgs>? AppLogsConfiguration { get; set; }

        /// <summary>
        /// Custom domain configuration for the environment
        /// </summary>
        [Input("customDomainConfiguration")]
        public Input<Inputs.CustomDomainConfigurationArgs>? CustomDomainConfiguration { get; set; }

        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Input("daprAIConnectionString")]
        public Input<string>? DaprAIConnectionString { get; set; }

        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Input("daprAIInstrumentationKey")]
        public Input<string>? DaprAIInstrumentationKey { get; set; }

        /// <summary>
        /// Name of the Environment.
        /// </summary>
        [Input("environmentName")]
        public Input<string>? EnvironmentName { get; set; }

        /// <summary>
        /// Kind of the Environment.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SKU properties of the Environment.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.EnvironmentSkuPropertiesArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Vnet configuration for the environment
        /// </summary>
        [Input("vnetConfiguration")]
        public Input<Inputs.VnetConfigurationArgs>? VnetConfiguration { get; set; }

        [Input("workloadProfiles")]
        private InputList<Inputs.WorkloadProfileArgs>? _workloadProfiles;

        /// <summary>
        /// Workload profiles configured for the Managed Environment.
        /// </summary>
        public InputList<Inputs.WorkloadProfileArgs> WorkloadProfiles
        {
            get => _workloadProfiles ?? (_workloadProfiles = new InputList<Inputs.WorkloadProfileArgs>());
            set => _workloadProfiles = value;
        }

        /// <summary>
        /// Whether or not this Managed Environment is zone-redundant.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public ManagedEnvironmentArgs()
        {
        }
        public static new ManagedEnvironmentArgs Empty => new ManagedEnvironmentArgs();
    }
}
