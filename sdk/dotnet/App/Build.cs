// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App
{
    /// <summary>
    /// Information pertaining to an individual build.
    /// Azure REST API version: 2023-08-01-preview.
    /// 
    /// Other available API versions: 2023-11-02-preview, 2024-02-02-preview, 2024-08-02-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:app:Build")]
    public partial class Build : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Status of the build once it has been provisioned.
        /// </summary>
        [Output("buildStatus")]
        public Output<string> BuildStatus { get; private set; } = null!;

        /// <summary>
        /// Configuration of the build.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.BuildConfigurationResponse?> Configuration { get; private set; } = null!;

        /// <summary>
        /// Container registry that the final image will be uploaded to.
        /// </summary>
        [Output("destinationContainerRegistry")]
        public Output<Outputs.ContainerRegistryWithCustomImageResponse?> DestinationContainerRegistry { get; private set; } = null!;

        /// <summary>
        /// Endpoint from which the build logs can be streamed.
        /// </summary>
        [Output("logStreamEndpoint")]
        public Output<string> LogStreamEndpoint { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Build provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
        /// </summary>
        [Output("tokenEndpoint")]
        public Output<string> TokenEndpoint { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Endpoint to which the source code should be uploaded.
        /// </summary>
        [Output("uploadEndpoint")]
        public Output<string> UploadEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a Build resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Build(string name, BuildArgs args, CustomResourceOptions? options = null)
            : base("azure-native:app:Build", name, args ?? new BuildArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Build(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:app:Build", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:app/v20230801preview:Build" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20231102preview:Build" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20240202preview:Build" },
                    new global::Pulumi.Alias { Type = "azure-native:app/v20240802preview:Build" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Build resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Build Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Build(name, id, options);
        }
    }

    public sealed class BuildArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of a build.
        /// </summary>
        [Input("buildName")]
        public Input<string>? BuildName { get; set; }

        /// <summary>
        /// The name of the builder.
        /// </summary>
        [Input("builderName", required: true)]
        public Input<string> BuilderName { get; set; } = null!;

        /// <summary>
        /// Configuration of the build.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.BuildConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Container registry that the final image will be uploaded to.
        /// </summary>
        [Input("destinationContainerRegistry")]
        public Input<Inputs.ContainerRegistryWithCustomImageArgs>? DestinationContainerRegistry { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public BuildArgs()
        {
        }
        public static new BuildArgs Empty => new BuildArgs();
    }
}
