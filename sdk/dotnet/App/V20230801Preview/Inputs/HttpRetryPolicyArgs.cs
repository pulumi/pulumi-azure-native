// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20230801Preview.Inputs
{

    /// <summary>
    /// Policy that defines http request retry conditions
    /// </summary>
    public sealed class HttpRetryPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("errors")]
        private InputList<string>? _errors;

        /// <summary>
        /// Errors that can trigger a retry
        /// </summary>
        public InputList<string> Errors
        {
            get => _errors ?? (_errors = new InputList<string>());
            set => _errors = value;
        }

        [Input("headers")]
        private InputList<Inputs.HeaderMatchArgs>? _headers;

        /// <summary>
        /// Headers that must be present for a request to be retried
        /// </summary>
        public InputList<Inputs.HeaderMatchArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.HeaderMatchArgs>());
            set => _headers = value;
        }

        [Input("httpStatusCodes")]
        private InputList<int>? _httpStatusCodes;

        /// <summary>
        /// Additional http status codes that can trigger a retry
        /// </summary>
        public InputList<int> HttpStatusCodes
        {
            get => _httpStatusCodes ?? (_httpStatusCodes = new InputList<int>());
            set => _httpStatusCodes = value;
        }

        /// <summary>
        /// Initial delay, in milliseconds, before retrying a request
        /// </summary>
        [Input("initialDelayInMilliseconds")]
        public Input<double>? InitialDelayInMilliseconds { get; set; }

        /// <summary>
        /// Maximum interval, in milliseconds, between retries
        /// </summary>
        [Input("maxIntervalInMilliseconds")]
        public Input<double>? MaxIntervalInMilliseconds { get; set; }

        /// <summary>
        /// Maximum number of times a request will retry
        /// </summary>
        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        public HttpRetryPolicyArgs()
        {
        }
        public static new HttpRetryPolicyArgs Empty => new HttpRetryPolicyArgs();
    }
}
