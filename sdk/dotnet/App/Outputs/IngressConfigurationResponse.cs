// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.Outputs
{

    /// <summary>
    /// Settings for the ingress component, including workload profile, scaling, and connection handling.
    /// </summary>
    [OutputType]
    public sealed class IngressConfigurationResponse
    {
        /// <summary>
        /// Maximum number of headers per request allowed by the ingress. Must be at least 1. Defaults to 100.
        /// </summary>
        public readonly int? HeaderCountLimit;
        /// <summary>
        /// Duration (in minutes) before idle requests are timed out. Must be at least 1 minute. Defaults to 4 minutes.
        /// </summary>
        public readonly int? RequestIdleTimeout;
        /// <summary>
        /// Scaling configuration for the ingress component. Required.
        /// </summary>
        public readonly Outputs.IngressConfigurationResponseScale? Scale;
        /// <summary>
        /// Time (in seconds) to allow active connections to complete on termination. Must be between 0 and 3600. Defaults to 480 seconds.
        /// </summary>
        public readonly int? TerminationGracePeriodSeconds;
        /// <summary>
        /// Name of the workload profile used by the ingress component. Required.
        /// </summary>
        public readonly string? WorkloadProfileName;

        [OutputConstructor]
        private IngressConfigurationResponse(
            int? headerCountLimit,

            int? requestIdleTimeout,

            Outputs.IngressConfigurationResponseScale? scale,

            int? terminationGracePeriodSeconds,

            string? workloadProfileName)
        {
            HeaderCountLimit = headerCountLimit;
            RequestIdleTimeout = requestIdleTimeout;
            Scale = scale;
            TerminationGracePeriodSeconds = terminationGracePeriodSeconds;
            WorkloadProfileName = workloadProfileName;
        }
    }
}
