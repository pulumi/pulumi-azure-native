// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20240202Preview.Outputs
{

    /// <summary>
    /// Container App init container definition
    /// </summary>
    [OutputType]
    public sealed class InitContainerResponse
    {
        /// <summary>
        /// Container start command arguments.
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Container start command.
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// Container environment variables.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentVarResponse> Env;
        /// <summary>
        /// Container image tag.
        /// </summary>
        public readonly string? Image;
        /// <summary>
        /// The type of the image. Set to CloudBuild to let the system manages the image, where user will not be able to update image through image field. Set to ContainerImage for user provided image.
        /// </summary>
        public readonly string? ImageType;
        /// <summary>
        /// Custom container name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Container resource requirements.
        /// </summary>
        public readonly Outputs.ContainerResourcesResponse? Resources;
        /// <summary>
        /// Container volume mounts.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumeMountResponse> VolumeMounts;

        [OutputConstructor]
        private InitContainerResponse(
            ImmutableArray<string> args,

            ImmutableArray<string> command,

            ImmutableArray<Outputs.EnvironmentVarResponse> env,

            string? image,

            string? imageType,

            string? name,

            Outputs.ContainerResourcesResponse? resources,

            ImmutableArray<Outputs.VolumeMountResponse> volumeMounts)
        {
            Args = args;
            Command = command;
            Env = env;
            Image = image;
            ImageType = imageType;
            Name = name;
            Resources = resources;
            VolumeMounts = volumeMounts;
        }
    }
}
