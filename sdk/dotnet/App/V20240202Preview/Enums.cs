// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.App.V20240202Preview
{
    /// <summary>
    /// Access mode for storage
    /// </summary>
    [EnumType]
    public readonly struct AccessMode : IEquatable<AccessMode>
    {
        private readonly string _value;

        private AccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessMode ReadOnly { get; } = new AccessMode("ReadOnly");
        public static AccessMode ReadWrite { get; } = new AccessMode("ReadWrite");

        public static bool operator ==(AccessMode left, AccessMode right) => left.Equals(right);
        public static bool operator !=(AccessMode left, AccessMode right) => !left.Equals(right);

        public static explicit operator string(AccessMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessMode other && Equals(other);
        public bool Equals(AccessMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
    /// </summary>
    [EnumType]
    public readonly struct Action : IEquatable<Action>
    {
        private readonly string _value;

        private Action(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Action Allow { get; } = new Action("Allow");
        public static Action Deny { get; } = new Action("Deny");

        public static bool operator ==(Action left, Action right) => left.Equals(right);
        public static bool operator !=(Action left, Action right) => !left.Equals(right);

        public static explicit operator string(Action value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Action other && Equals(other);
        public bool Equals(Action other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ActiveRevisionsMode controls how active revisions are handled for the Container app:
    /// &lt;list&gt;&lt;item&gt;Multiple: multiple revisions can be active.&lt;/item&gt;&lt;item&gt;Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.&lt;/item&gt;&lt;/list&gt;
    /// </summary>
    [EnumType]
    public readonly struct ActiveRevisionsMode : IEquatable<ActiveRevisionsMode>
    {
        private readonly string _value;

        private ActiveRevisionsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveRevisionsMode Multiple { get; } = new ActiveRevisionsMode("Multiple");
        public static ActiveRevisionsMode Single { get; } = new ActiveRevisionsMode("Single");

        public static bool operator ==(ActiveRevisionsMode left, ActiveRevisionsMode right) => left.Equals(right);
        public static bool operator !=(ActiveRevisionsMode left, ActiveRevisionsMode right) => !left.Equals(right);

        public static explicit operator string(ActiveRevisionsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveRevisionsMode other && Equals(other);
        public bool Equals(ActiveRevisionsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sticky Session Affinity
    /// </summary>
    [EnumType]
    public readonly struct Affinity : IEquatable<Affinity>
    {
        private readonly string _value;

        private Affinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Affinity Sticky { get; } = new Affinity("sticky");
        public static Affinity None { get; } = new Affinity("none");

        public static bool operator ==(Affinity left, Affinity right) => left.Equals(right);
        public static bool operator !=(Affinity left, Affinity right) => !left.Equals(right);

        public static explicit operator string(Affinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Affinity other && Equals(other);
        public bool Equals(Affinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
    /// </summary>
    [EnumType]
    public readonly struct AppProtocol : IEquatable<AppProtocol>
    {
        private readonly string _value;

        private AppProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppProtocol Http { get; } = new AppProtocol("http");
        public static AppProtocol Grpc { get; } = new AppProtocol("grpc");

        public static bool operator ==(AppProtocol left, AppProtocol right) => left.Equals(right);
        public static bool operator !=(AppProtocol left, AppProtocol right) => !left.Equals(right);

        public static explicit operator string(AppProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppProtocol other && Equals(other);
        public bool Equals(AppProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom Domain binding type.
    /// </summary>
    [EnumType]
    public readonly struct BindingType : IEquatable<BindingType>
    {
        private readonly string _value;

        private BindingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BindingType Disabled { get; } = new BindingType("Disabled");
        public static BindingType SniEnabled { get; } = new BindingType("SniEnabled");

        public static bool operator ==(BindingType left, BindingType right) => left.Equals(right);
        public static bool operator !=(BindingType left, BindingType right) => !left.Equals(right);

        public static explicit operator string(BindingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BindingType other && Equals(other);
        public bool Equals(BindingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the certificate. Allowed values are `ServerSSLCertificate` and `ImagePullTrustedCA`
    /// </summary>
    [EnumType]
    public readonly struct CertificateType : IEquatable<CertificateType>
    {
        private readonly string _value;

        private CertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateType ServerSSLCertificate { get; } = new CertificateType("ServerSSLCertificate");
        public static CertificateType ImagePullTrustedCA { get; } = new CertificateType("ImagePullTrustedCA");

        public static bool operator ==(CertificateType left, CertificateType right) => left.Equals(right);
        public static bool operator !=(CertificateType left, CertificateType right) => !left.Equals(right);

        public static explicit operator string(CertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateType other && Equals(other);
        public bool Equals(CertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The method that should be used to authenticate the user.
    /// </summary>
    [EnumType]
    public readonly struct ClientCredentialMethod : IEquatable<ClientCredentialMethod>
    {
        private readonly string _value;

        private ClientCredentialMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClientCredentialMethod ClientSecretPost { get; } = new ClientCredentialMethod("ClientSecretPost");

        public static bool operator ==(ClientCredentialMethod left, ClientCredentialMethod right) => left.Equals(right);
        public static bool operator !=(ClientCredentialMethod left, ClientCredentialMethod right) => !left.Equals(right);

        public static explicit operator string(ClientCredentialMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientCredentialMethod other && Equals(other);
        public bool Equals(ClientCredentialMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The container type of the sessions.
    /// </summary>
    [EnumType]
    public readonly struct ContainerType : IEquatable<ContainerType>
    {
        private readonly string _value;

        private ContainerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerType CustomContainer { get; } = new ContainerType("CustomContainer");
        public static ContainerType PythonLTS { get; } = new ContainerType("PythonLTS");

        public static bool operator ==(ContainerType left, ContainerType right) => left.Equals(right);
        public static bool operator !=(ContainerType left, ContainerType right) => !left.Equals(right);

        public static explicit operator string(ContainerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerType other && Equals(other);
        public bool Equals(ContainerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The convention used when determining the session cookie's expiration.
    /// </summary>
    [EnumType]
    public readonly struct CookieExpirationConvention : IEquatable<CookieExpirationConvention>
    {
        private readonly string _value;

        private CookieExpirationConvention(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CookieExpirationConvention FixedTime { get; } = new CookieExpirationConvention("FixedTime");
        public static CookieExpirationConvention IdentityProviderDerived { get; } = new CookieExpirationConvention("IdentityProviderDerived");

        public static bool operator ==(CookieExpirationConvention left, CookieExpirationConvention right) => left.Equals(right);
        public static bool operator !=(CookieExpirationConvention left, CookieExpirationConvention right) => !left.Equals(right);

        public static explicit operator string(CookieExpirationConvention value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CookieExpirationConvention other && Equals(other);
        public bool Equals(CookieExpirationConvention other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the .NET Component.
    /// </summary>
    [EnumType]
    public readonly struct DotNetComponentType : IEquatable<DotNetComponentType>
    {
        private readonly string _value;

        private DotNetComponentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DotNetComponentType AspireDashboard { get; } = new DotNetComponentType("AspireDashboard");

        public static bool operator ==(DotNetComponentType left, DotNetComponentType right) => left.Equals(right);
        public static bool operator !=(DotNetComponentType left, DotNetComponentType right) => !left.Equals(right);

        public static explicit operator string(DotNetComponentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DotNetComponentType other && Equals(other);
        public bool Equals(DotNetComponentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The execution type of the session pool.
    /// </summary>
    [EnumType]
    public readonly struct ExecutionType : IEquatable<ExecutionType>
    {
        private readonly string _value;

        private ExecutionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExecutionType Timed { get; } = new ExecutionType("Timed");

        public static bool operator ==(ExecutionType left, ExecutionType right) => left.Equals(right);
        public static bool operator !=(ExecutionType left, ExecutionType right) => !left.Equals(right);

        public static explicit operator string(ExecutionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExecutionType other && Equals(other);
        public bool Equals(ExecutionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the extended location.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationTypes : IEquatable<ExtendedLocationTypes>
    {
        private readonly string _value;

        private ExtendedLocationTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationTypes CustomLocation { get; } = new ExtendedLocationTypes("CustomLocation");

        public static bool operator ==(ExtendedLocationTypes left, ExtendedLocationTypes right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationTypes left, ExtendedLocationTypes right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationTypes other && Equals(other);
        public bool Equals(ExtendedLocationTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The convention used to determine the url of the request made.
    /// </summary>
    [EnumType]
    public readonly struct ForwardProxyConvention : IEquatable<ForwardProxyConvention>
    {
        private readonly string _value;

        private ForwardProxyConvention(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ForwardProxyConvention NoProxy { get; } = new ForwardProxyConvention("NoProxy");
        public static ForwardProxyConvention Standard { get; } = new ForwardProxyConvention("Standard");
        public static ForwardProxyConvention Custom { get; } = new ForwardProxyConvention("Custom");

        public static bool operator ==(ForwardProxyConvention left, ForwardProxyConvention right) => left.Equals(right);
        public static bool operator !=(ForwardProxyConvention left, ForwardProxyConvention right) => !left.Equals(right);

        public static explicit operator string(ForwardProxyConvention value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ForwardProxyConvention other && Equals(other);
        public bool Equals(ForwardProxyConvention other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Use to select the lifecycle stages of a Container App during which the Managed Identity should be available.
    /// </summary>
    [EnumType]
    public readonly struct IdentitySettingsLifeCycle : IEquatable<IdentitySettingsLifeCycle>
    {
        private readonly string _value;

        private IdentitySettingsLifeCycle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentitySettingsLifeCycle Init { get; } = new IdentitySettingsLifeCycle("Init");
        public static IdentitySettingsLifeCycle Main { get; } = new IdentitySettingsLifeCycle("Main");
        public static IdentitySettingsLifeCycle None { get; } = new IdentitySettingsLifeCycle("None");
        public static IdentitySettingsLifeCycle All { get; } = new IdentitySettingsLifeCycle("All");

        public static bool operator ==(IdentitySettingsLifeCycle left, IdentitySettingsLifeCycle right) => left.Equals(right);
        public static bool operator !=(IdentitySettingsLifeCycle left, IdentitySettingsLifeCycle right) => !left.Equals(right);

        public static explicit operator string(IdentitySettingsLifeCycle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentitySettingsLifeCycle other && Equals(other);
        public bool Equals(IdentitySettingsLifeCycle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the image. Set to CloudBuild to let the system manages the image, where user will not be able to update image through image field. Set to ContainerImage for user provided image.
    /// </summary>
    [EnumType]
    public readonly struct ImageType : IEquatable<ImageType>
    {
        private readonly string _value;

        private ImageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageType CloudBuild { get; } = new ImageType("CloudBuild");
        public static ImageType ContainerImage { get; } = new ImageType("ContainerImage");

        public static bool operator ==(ImageType left, ImageType right) => left.Equals(right);
        public static bool operator !=(ImageType left, ImageType right) => !left.Equals(right);

        public static explicit operator string(ImageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageType other && Equals(other);
        public bool Equals(ImageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
    /// </summary>
    [EnumType]
    public readonly struct IngressClientCertificateMode : IEquatable<IngressClientCertificateMode>
    {
        private readonly string _value;

        private IngressClientCertificateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressClientCertificateMode Ignore { get; } = new IngressClientCertificateMode("ignore");
        public static IngressClientCertificateMode Accept { get; } = new IngressClientCertificateMode("accept");
        public static IngressClientCertificateMode Require { get; } = new IngressClientCertificateMode("require");

        public static bool operator ==(IngressClientCertificateMode left, IngressClientCertificateMode right) => left.Equals(right);
        public static bool operator !=(IngressClientCertificateMode left, IngressClientCertificateMode right) => !left.Equals(right);

        public static explicit operator string(IngressClientCertificateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressClientCertificateMode other && Equals(other);
        public bool Equals(IngressClientCertificateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether an http app listens on http or https
    /// </summary>
    [EnumType]
    public readonly struct IngressTargetPortHttpScheme : IEquatable<IngressTargetPortHttpScheme>
    {
        private readonly string _value;

        private IngressTargetPortHttpScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressTargetPortHttpScheme Http { get; } = new IngressTargetPortHttpScheme("http");
        public static IngressTargetPortHttpScheme Https { get; } = new IngressTargetPortHttpScheme("https");

        public static bool operator ==(IngressTargetPortHttpScheme left, IngressTargetPortHttpScheme right) => left.Equals(right);
        public static bool operator !=(IngressTargetPortHttpScheme left, IngressTargetPortHttpScheme right) => !left.Equals(right);

        public static explicit operator string(IngressTargetPortHttpScheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressTargetPortHttpScheme other && Equals(other);
        public bool Equals(IngressTargetPortHttpScheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress transport protocol
    /// </summary>
    [EnumType]
    public readonly struct IngressTransportMethod : IEquatable<IngressTransportMethod>
    {
        private readonly string _value;

        private IngressTransportMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressTransportMethod Auto { get; } = new IngressTransportMethod("auto");
        public static IngressTransportMethod Http { get; } = new IngressTransportMethod("http");
        public static IngressTransportMethod Http2 { get; } = new IngressTransportMethod("http2");
        public static IngressTransportMethod Tcp { get; } = new IngressTransportMethod("tcp");

        public static bool operator ==(IngressTransportMethod left, IngressTransportMethod right) => left.Equals(right);
        public static bool operator !=(IngressTransportMethod left, IngressTransportMethod right) => !left.Equals(right);

        public static explicit operator string(IngressTransportMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressTransportMethod other && Equals(other);
        public bool Equals(IngressTransportMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the Java Component.
    /// </summary>
    [EnumType]
    public readonly struct JavaComponentType : IEquatable<JavaComponentType>
    {
        private readonly string _value;

        private JavaComponentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JavaComponentType SpringBootAdmin { get; } = new JavaComponentType("SpringBootAdmin");
        public static JavaComponentType SpringCloudEureka { get; } = new JavaComponentType("SpringCloudEureka");
        public static JavaComponentType SpringCloudConfig { get; } = new JavaComponentType("SpringCloudConfig");
        public static JavaComponentType Nacos { get; } = new JavaComponentType("Nacos");

        public static bool operator ==(JavaComponentType left, JavaComponentType right) => left.Equals(right);
        public static bool operator !=(JavaComponentType left, JavaComponentType right) => !left.Equals(right);

        public static explicit operator string(JavaComponentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JavaComponentType other && Equals(other);
        public bool Equals(JavaComponentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Metadata used to render different experiences for resources of the same type; e.g. WorkflowApp is a kind of Microsoft.App/ContainerApps type. If supported, the resource provider must validate and persist this value.
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind Workflowapp { get; } = new Kind("workflowapp");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The specified logger's log level.
    /// </summary>
    [EnumType]
    public readonly struct Level : IEquatable<Level>
    {
        private readonly string _value;

        private Level(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Level Off { get; } = new Level("off");
        public static Level Error { get; } = new Level("error");
        public static Level Info { get; } = new Level("info");
        public static Level Debug { get; } = new Level("debug");
        public static Level Trace { get; } = new Level("trace");
        public static Level Warn { get; } = new Level("warn");

        public static bool operator ==(Level left, Level right) => left.Equals(right);
        public static bool operator !=(Level left, Level right) => !left.Equals(right);

        public static explicit operator string(Level value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Level other && Equals(other);
        public bool Equals(Level other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
    /// </summary>
    [EnumType]
    public readonly struct LogLevel : IEquatable<LogLevel>
    {
        private readonly string _value;

        private LogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LogLevel Info { get; } = new LogLevel("info");
        public static LogLevel Debug { get; } = new LogLevel("debug");
        public static LogLevel Warn { get; } = new LogLevel("warn");
        public static LogLevel Error { get; } = new LogLevel("error");

        public static bool operator ==(LogLevel left, LogLevel right) => left.Equals(right);
        public static bool operator !=(LogLevel left, LogLevel right) => !left.Equals(right);

        public static explicit operator string(LogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LogLevel other && Equals(other);
        public bool Equals(LogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Selected type of domain control validation for managed certificates.
    /// </summary>
    [EnumType]
    public readonly struct ManagedCertificateDomainControlValidation : IEquatable<ManagedCertificateDomainControlValidation>
    {
        private readonly string _value;

        private ManagedCertificateDomainControlValidation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedCertificateDomainControlValidation CNAME { get; } = new ManagedCertificateDomainControlValidation("CNAME");
        public static ManagedCertificateDomainControlValidation HTTP { get; } = new ManagedCertificateDomainControlValidation("HTTP");
        public static ManagedCertificateDomainControlValidation TXT { get; } = new ManagedCertificateDomainControlValidation("TXT");

        public static bool operator ==(ManagedCertificateDomainControlValidation left, ManagedCertificateDomainControlValidation right) => left.Equals(right);
        public static bool operator !=(ManagedCertificateDomainControlValidation left, ManagedCertificateDomainControlValidation right) => !left.Equals(right);

        public static explicit operator string(ManagedCertificateDomainControlValidation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedCertificateDomainControlValidation other && Equals(other);
        public bool Equals(ManagedCertificateDomainControlValidation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Patching mode for the container app. Null or default in this field will be interpreted as Automatic by RP. Automatic mode will automatically apply available patches. Manual mode will require the user to manually apply patches. Disabled mode will stop patch detection and auto patching.
    /// </summary>
    [EnumType]
    public readonly struct PatchingMode : IEquatable<PatchingMode>
    {
        private readonly string _value;

        private PatchingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PatchingMode Automatic { get; } = new PatchingMode("Automatic");
        public static PatchingMode Manual { get; } = new PatchingMode("Manual");
        public static PatchingMode Disabled { get; } = new PatchingMode("Disabled");

        public static bool operator ==(PatchingMode left, PatchingMode right) => left.Equals(right);
        public static bool operator !=(PatchingMode left, PatchingMode right) => !left.Equals(right);

        public static explicit operator string(PatchingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PatchingMode other && Equals(other);
        public bool Equals(PatchingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pool management type of the session pool.
    /// </summary>
    [EnumType]
    public readonly struct PoolManagementType : IEquatable<PoolManagementType>
    {
        private readonly string _value;

        private PoolManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PoolManagementType Manual { get; } = new PoolManagementType("Manual");
        public static PoolManagementType Dynamic { get; } = new PoolManagementType("Dynamic");

        public static bool operator ==(PoolManagementType left, PoolManagementType right) => left.Equals(right);
        public static bool operator !=(PoolManagementType left, PoolManagementType right) => !left.Equals(right);

        public static explicit operator string(PoolManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PoolManagementType other && Equals(other);
        public bool Equals(PoolManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointServiceConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus("Pending");
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus("Approved");
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus("Rejected");
        public static PrivateEndpointServiceConnectionStatus Disconnected { get; } = new PrivateEndpointServiceConnectionStatus("Disconnected");

        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointServiceConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Property to allow or block all public traffic. Allowed Values: 'Enabled', 'Disabled'.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    /// </summary>
    [EnumType]
    public readonly struct Scheme : IEquatable<Scheme>
    {
        private readonly string _value;

        private Scheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Scheme HTTP { get; } = new Scheme("HTTP");
        public static Scheme HTTPS { get; } = new Scheme("HTTPS");

        public static bool operator ==(Scheme left, Scheme right) => left.Equals(right);
        public static bool operator !=(Scheme left, Scheme right) => !left.Equals(right);

        public static explicit operator string(Scheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Scheme other && Equals(other);
        public bool Equals(Scheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network status for the sessions.
    /// </summary>
    [EnumType]
    public readonly struct SessionNetworkStatus : IEquatable<SessionNetworkStatus>
    {
        private readonly string _value;

        private SessionNetworkStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionNetworkStatus EgressEnabled { get; } = new SessionNetworkStatus("EgressEnabled");
        public static SessionNetworkStatus EgressDisabled { get; } = new SessionNetworkStatus("EgressDisabled");

        public static bool operator ==(SessionNetworkStatus left, SessionNetworkStatus right) => left.Equals(right);
        public static bool operator !=(SessionNetworkStatus left, SessionNetworkStatus right) => !left.Equals(right);

        public static explicit operator string(SessionNetworkStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionNetworkStatus other && Equals(other);
        public bool Equals(SessionNetworkStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type for the volume. If not provided, use EmptyDir.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType AzureFile { get; } = new StorageType("AzureFile");
        public static StorageType EmptyDir { get; } = new StorageType("EmptyDir");
        public static StorageType Secret { get; } = new StorageType("Secret");
        public static StorageType NfsAzureFile { get; } = new StorageType("NfsAzureFile");
        public static StorageType Smb { get; } = new StorageType("Smb");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Trigger type of the job
    /// </summary>
    [EnumType]
    public readonly struct TriggerType : IEquatable<TriggerType>
    {
        private readonly string _value;

        private TriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TriggerType Schedule { get; } = new TriggerType("Schedule");
        public static TriggerType Event { get; } = new TriggerType("Event");
        public static TriggerType Manual { get; } = new TriggerType("Manual");

        public static bool operator ==(TriggerType left, TriggerType right) => left.Equals(right);
        public static bool operator !=(TriggerType left, TriggerType right) => !left.Equals(right);

        public static explicit operator string(TriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TriggerType other && Equals(other);
        public bool Equals(TriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of probe.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Liveness { get; } = new Type("Liveness");
        public static Type Readiness { get; } = new Type("Readiness");
        public static Type Startup { get; } = new Type("Startup");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to take when an unauthenticated client attempts to access the app.
    /// </summary>
    [EnumType]
    public readonly struct UnauthenticatedClientActionV2 : IEquatable<UnauthenticatedClientActionV2>
    {
        private readonly string _value;

        private UnauthenticatedClientActionV2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UnauthenticatedClientActionV2 RedirectToLoginPage { get; } = new UnauthenticatedClientActionV2("RedirectToLoginPage");
        public static UnauthenticatedClientActionV2 AllowAnonymous { get; } = new UnauthenticatedClientActionV2("AllowAnonymous");
        public static UnauthenticatedClientActionV2 Return401 { get; } = new UnauthenticatedClientActionV2("Return401");
        public static UnauthenticatedClientActionV2 Return403 { get; } = new UnauthenticatedClientActionV2("Return403");

        public static bool operator ==(UnauthenticatedClientActionV2 left, UnauthenticatedClientActionV2 right) => left.Equals(right);
        public static bool operator !=(UnauthenticatedClientActionV2 left, UnauthenticatedClientActionV2 right) => !left.Equals(right);

        public static explicit operator string(UnauthenticatedClientActionV2 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UnauthenticatedClientActionV2 other && Equals(other);
        public bool Equals(UnauthenticatedClientActionV2 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
