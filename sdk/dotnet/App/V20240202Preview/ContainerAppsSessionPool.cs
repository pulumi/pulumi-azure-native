// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20240202Preview
{
    /// <summary>
    /// Container App session pool.
    /// </summary>
    [AzureNativeResourceType("azure-native:app/v20240202preview:ContainerAppsSessionPool")]
    public partial class ContainerAppsSessionPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The container type of the sessions.
        /// </summary>
        [Output("containerType")]
        public Output<string?> ContainerType { get; private set; } = null!;

        /// <summary>
        /// The custom container configuration if the containerType is CustomContainer.
        /// </summary>
        [Output("customContainerTemplate")]
        public Output<Outputs.CustomContainerTemplateResponse?> CustomContainerTemplate { get; private set; } = null!;

        /// <summary>
        /// The pool configuration if the poolManagementType is dynamic.
        /// </summary>
        [Output("dynamicPoolConfiguration")]
        public Output<Outputs.DynamicPoolConfigurationResponse?> DynamicPoolConfiguration { get; private set; } = null!;

        /// <summary>
        /// Resource ID of the session pool's environment.
        /// </summary>
        [Output("environmentId")]
        public Output<string?> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes the session pool is using.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// The endpoint to manage the pool.
        /// </summary>
        [Output("poolManagementEndpoint")]
        public Output<string> PoolManagementEndpoint { get; private set; } = null!;

        /// <summary>
        /// The pool management type of the session pool.
        /// </summary>
        [Output("poolManagementType")]
        public Output<string?> PoolManagementType { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the session pool.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The scale configuration of the session pool.
        /// </summary>
        [Output("scaleConfiguration")]
        public Output<Outputs.ScaleConfigurationResponse?> ScaleConfiguration { get; private set; } = null!;

        /// <summary>
        /// The secrets of the session pool.
        /// </summary>
        [Output("secrets")]
        public Output<ImmutableArray<Outputs.SessionPoolSecretResponse>> Secrets { get; private set; } = null!;

        /// <summary>
        /// The network configuration of the sessions in the session pool.
        /// </summary>
        [Output("sessionNetworkConfiguration")]
        public Output<Outputs.SessionNetworkConfigurationResponse?> SessionNetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerAppsSessionPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerAppsSessionPool(string name, ContainerAppsSessionPoolArgs args, CustomResourceOptions? options = null)
            : base("azure-native:app/v20240202preview:ContainerAppsSessionPool", name, args ?? new ContainerAppsSessionPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerAppsSessionPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:app/v20240202preview:ContainerAppsSessionPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:app:ContainerAppsSessionPool" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerAppsSessionPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerAppsSessionPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ContainerAppsSessionPool(name, id, options);
        }
    }

    public sealed class ContainerAppsSessionPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The container type of the sessions.
        /// </summary>
        [Input("containerType")]
        public InputUnion<string, Pulumi.AzureNative.App.V20240202Preview.ContainerType>? ContainerType { get; set; }

        /// <summary>
        /// The custom container configuration if the containerType is CustomContainer.
        /// </summary>
        [Input("customContainerTemplate")]
        public Input<Inputs.CustomContainerTemplateArgs>? CustomContainerTemplate { get; set; }

        /// <summary>
        /// The pool configuration if the poolManagementType is dynamic.
        /// </summary>
        [Input("dynamicPoolConfiguration")]
        public Input<Inputs.DynamicPoolConfigurationArgs>? DynamicPoolConfiguration { get; set; }

        /// <summary>
        /// Resource ID of the session pool's environment.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The pool management type of the session pool.
        /// </summary>
        [Input("poolManagementType")]
        public InputUnion<string, Pulumi.AzureNative.App.V20240202Preview.PoolManagementType>? PoolManagementType { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The scale configuration of the session pool.
        /// </summary>
        [Input("scaleConfiguration")]
        public Input<Inputs.ScaleConfigurationArgs>? ScaleConfiguration { get; set; }

        [Input("secrets")]
        private InputList<Inputs.SessionPoolSecretArgs>? _secrets;

        /// <summary>
        /// The secrets of the session pool.
        /// </summary>
        public InputList<Inputs.SessionPoolSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.SessionPoolSecretArgs>());
            set => _secrets = value;
        }

        /// <summary>
        /// The network configuration of the sessions in the session pool.
        /// </summary>
        [Input("sessionNetworkConfiguration")]
        public Input<Inputs.SessionNetworkConfigurationArgs>? SessionNetworkConfiguration { get; set; }

        /// <summary>
        /// Name of the session pool.
        /// </summary>
        [Input("sessionPoolName")]
        public Input<string>? SessionPoolName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ContainerAppsSessionPoolArgs()
        {
        }
        public static new ContainerAppsSessionPoolArgs Empty => new ContainerAppsSessionPoolArgs();
    }
}
