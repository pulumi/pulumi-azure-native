// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.App
{
    /// <summary>
    /// Access mode for storage
    /// </summary>
    [EnumType]
    public readonly struct AccessMode : IEquatable<AccessMode>
    {
        private readonly string _value;

        private AccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessMode ReadOnly { get; } = new AccessMode("ReadOnly");
        public static AccessMode ReadWrite { get; } = new AccessMode("ReadWrite");

        public static bool operator ==(AccessMode left, AccessMode right) => left.Equals(right);
        public static bool operator !=(AccessMode left, AccessMode right) => !left.Equals(right);

        public static explicit operator string(AccessMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessMode other && Equals(other);
        public bool Equals(AccessMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ActiveRevisionsMode controls how active revisions are handled for the Container app:
    /// &lt;list&gt;&lt;item&gt;Multiple: multiple revisions can be active. If no value if provided, this is the default&lt;/item&gt;&lt;item&gt;Single: Only one revision can be active at a time. Revision weights can not be used in this mode&lt;/item&gt;&lt;/list&gt;
    /// </summary>
    [EnumType]
    public readonly struct ActiveRevisionsMode : IEquatable<ActiveRevisionsMode>
    {
        private readonly string _value;

        private ActiveRevisionsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveRevisionsMode Multiple { get; } = new ActiveRevisionsMode("multiple");
        public static ActiveRevisionsMode Single { get; } = new ActiveRevisionsMode("single");

        public static bool operator ==(ActiveRevisionsMode left, ActiveRevisionsMode right) => left.Equals(right);
        public static bool operator !=(ActiveRevisionsMode left, ActiveRevisionsMode right) => !left.Equals(right);

        public static explicit operator string(ActiveRevisionsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveRevisionsMode other && Equals(other);
        public bool Equals(ActiveRevisionsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
    /// </summary>
    [EnumType]
    public readonly struct AppProtocol : IEquatable<AppProtocol>
    {
        private readonly string _value;

        private AppProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppProtocol Http { get; } = new AppProtocol("http");
        public static AppProtocol Grpc { get; } = new AppProtocol("grpc");

        public static bool operator ==(AppProtocol left, AppProtocol right) => left.Equals(right);
        public static bool operator !=(AppProtocol left, AppProtocol right) => !left.Equals(right);

        public static explicit operator string(AppProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppProtocol other && Equals(other);
        public bool Equals(AppProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;code&gt;Enabled&lt;/code&gt; if the Authentication / Authorization feature is enabled for the current app; otherwise, &lt;code&gt;Disabled&lt;/code&gt;.
    /// </summary>
    [EnumType]
    public readonly struct AuthConfigState : IEquatable<AuthConfigState>
    {
        private readonly string _value;

        private AuthConfigState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthConfigState Enabled { get; } = new AuthConfigState("Enabled");
        public static AuthConfigState Disabled { get; } = new AuthConfigState("Disabled");

        public static bool operator ==(AuthConfigState left, AuthConfigState right) => left.Equals(right);
        public static bool operator !=(AuthConfigState left, AuthConfigState right) => !left.Equals(right);

        public static explicit operator string(AuthConfigState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthConfigState other && Equals(other);
        public bool Equals(AuthConfigState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom Domain binding type.
    /// </summary>
    [EnumType]
    public readonly struct BindingType : IEquatable<BindingType>
    {
        private readonly string _value;

        private BindingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BindingType Disabled { get; } = new BindingType("Disabled");
        public static BindingType SniEnabled { get; } = new BindingType("SniEnabled");

        public static bool operator ==(BindingType left, BindingType right) => left.Equals(right);
        public static bool operator !=(BindingType left, BindingType right) => !left.Equals(right);

        public static explicit operator string(BindingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BindingType other && Equals(other);
        public bool Equals(BindingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;.
    /// </summary>
    [EnumType]
    public readonly struct DisableWwwAuthenticateMode : IEquatable<DisableWwwAuthenticateMode>
    {
        private readonly string _value;

        private DisableWwwAuthenticateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DisableWwwAuthenticateMode True { get; } = new DisableWwwAuthenticateMode("True");
        public static DisableWwwAuthenticateMode False { get; } = new DisableWwwAuthenticateMode("False");

        public static bool operator ==(DisableWwwAuthenticateMode left, DisableWwwAuthenticateMode right) => left.Equals(right);
        public static bool operator !=(DisableWwwAuthenticateMode left, DisableWwwAuthenticateMode right) => !left.Equals(right);

        public static explicit operator string(DisableWwwAuthenticateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DisableWwwAuthenticateMode other && Equals(other);
        public bool Equals(DisableWwwAuthenticateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;code&gt;Disabled&lt;/code&gt; if the Twitter provider should not be enabled despite the set registration; otherwise, &lt;code&gt;Enabled&lt;/code&gt;.
    /// </summary>
    [EnumType]
    public readonly struct IdentityProviderState : IEquatable<IdentityProviderState>
    {
        private readonly string _value;

        private IdentityProviderState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityProviderState Enabled { get; } = new IdentityProviderState("Enabled");
        public static IdentityProviderState Disabled { get; } = new IdentityProviderState("Disabled");

        public static bool operator ==(IdentityProviderState left, IdentityProviderState right) => left.Equals(right);
        public static bool operator !=(IdentityProviderState left, IdentityProviderState right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderState other && Equals(other);
        public bool Equals(IdentityProviderState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress transport protocol
    /// </summary>
    [EnumType]
    public readonly struct IngressTransportMethod : IEquatable<IngressTransportMethod>
    {
        private readonly string _value;

        private IngressTransportMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressTransportMethod Auto { get; } = new IngressTransportMethod("auto");
        public static IngressTransportMethod Http { get; } = new IngressTransportMethod("http");
        public static IngressTransportMethod Http2 { get; } = new IngressTransportMethod("http2");

        public static bool operator ==(IngressTransportMethod left, IngressTransportMethod right) => left.Equals(right);
        public static bool operator !=(IngressTransportMethod left, IngressTransportMethod right) => !left.Equals(right);

        public static explicit operator string(IngressTransportMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressTransportMethod other && Equals(other);
        public bool Equals(IngressTransportMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;code&gt;True&lt;/code&gt; if the fragments from the request are preserved after the login request is made; otherwise, &lt;code&gt;False&lt;/code&gt;.
    /// </summary>
    [EnumType]
    public readonly struct PreserveUrlFragmentsForLoginsMode : IEquatable<PreserveUrlFragmentsForLoginsMode>
    {
        private readonly string _value;

        private PreserveUrlFragmentsForLoginsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreserveUrlFragmentsForLoginsMode True { get; } = new PreserveUrlFragmentsForLoginsMode("True");
        public static PreserveUrlFragmentsForLoginsMode False { get; } = new PreserveUrlFragmentsForLoginsMode("False");

        public static bool operator ==(PreserveUrlFragmentsForLoginsMode left, PreserveUrlFragmentsForLoginsMode right) => left.Equals(right);
        public static bool operator !=(PreserveUrlFragmentsForLoginsMode left, PreserveUrlFragmentsForLoginsMode right) => !left.Equals(right);

        public static explicit operator string(PreserveUrlFragmentsForLoginsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreserveUrlFragmentsForLoginsMode other && Equals(other);
        public bool Equals(PreserveUrlFragmentsForLoginsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;.
    /// </summary>
    [EnumType]
    public readonly struct RequireHttpsMode : IEquatable<RequireHttpsMode>
    {
        private readonly string _value;

        private RequireHttpsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequireHttpsMode True { get; } = new RequireHttpsMode("True");
        public static RequireHttpsMode False { get; } = new RequireHttpsMode("False");

        public static bool operator ==(RequireHttpsMode left, RequireHttpsMode right) => left.Equals(right);
        public static bool operator !=(RequireHttpsMode left, RequireHttpsMode right) => !left.Equals(right);

        public static explicit operator string(RequireHttpsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequireHttpsMode other && Equals(other);
        public bool Equals(RequireHttpsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type for the volume. If not provided, use EmptyDir.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType AzureFile { get; } = new StorageType("AzureFile");
        public static StorageType EmptyDir { get; } = new StorageType("EmptyDir");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of probe.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Liveness { get; } = new Type("liveness");
        public static Type Readiness { get; } = new Type("readiness");
        public static Type Startup { get; } = new Type("startup");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to take when an unauthenticated client attempts to access the app.
    /// </summary>
    [EnumType]
    public readonly struct UnauthenticatedClientAction : IEquatable<UnauthenticatedClientAction>
    {
        private readonly string _value;

        private UnauthenticatedClientAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UnauthenticatedClientAction RedirectToLoginPage { get; } = new UnauthenticatedClientAction("RedirectToLoginPage");
        public static UnauthenticatedClientAction AllowAnonymous { get; } = new UnauthenticatedClientAction("AllowAnonymous");
        public static UnauthenticatedClientAction Return401 { get; } = new UnauthenticatedClientAction("Return401");
        public static UnauthenticatedClientAction Return403 { get; } = new UnauthenticatedClientAction("Return403");

        public static bool operator ==(UnauthenticatedClientAction left, UnauthenticatedClientAction right) => left.Equals(right);
        public static bool operator !=(UnauthenticatedClientAction left, UnauthenticatedClientAction right) => !left.Equals(right);

        public static explicit operator string(UnauthenticatedClientAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UnauthenticatedClientAction other && Equals(other);
        public bool Equals(UnauthenticatedClientAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
