// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App
{
    public static class GetConnectedEnvironment
    {
        /// <summary>
        /// Get the properties of an connectedEnvironment.
        /// Azure REST API version: 2022-10-01.
        /// </summary>
        public static Task<GetConnectedEnvironmentResult> InvokeAsync(GetConnectedEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectedEnvironmentResult>("azure-native:app:getConnectedEnvironment", args ?? new GetConnectedEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Get the properties of an connectedEnvironment.
        /// Azure REST API version: 2022-10-01.
        /// </summary>
        public static Output<GetConnectedEnvironmentResult> Invoke(GetConnectedEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectedEnvironmentResult>("azure-native:app:getConnectedEnvironment", args ?? new GetConnectedEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectedEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the connectedEnvironment.
        /// </summary>
        [Input("connectedEnvironmentName", required: true)]
        public string ConnectedEnvironmentName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConnectedEnvironmentArgs()
        {
        }
        public static new GetConnectedEnvironmentArgs Empty => new GetConnectedEnvironmentArgs();
    }

    public sealed class GetConnectedEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the connectedEnvironment.
        /// </summary>
        [Input("connectedEnvironmentName", required: true)]
        public Input<string> ConnectedEnvironmentName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConnectedEnvironmentInvokeArgs()
        {
        }
        public static new GetConnectedEnvironmentInvokeArgs Empty => new GetConnectedEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectedEnvironmentResult
    {
        /// <summary>
        /// Custom domain configuration for the environment
        /// </summary>
        public readonly Outputs.CustomDomainConfigurationResponse? CustomDomainConfiguration;
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        public readonly string? DaprAIConnectionString;
        /// <summary>
        /// Default Domain Name for the cluster
        /// </summary>
        public readonly string DefaultDomain;
        /// <summary>
        /// Any errors that occurred during deployment or deployment validation
        /// </summary>
        public readonly string DeploymentErrors;
        /// <summary>
        /// The complex type of the extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Kubernetes Environment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Static IP of the connectedEnvironment
        /// </summary>
        public readonly string? StaticIp;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetConnectedEnvironmentResult(
            Outputs.CustomDomainConfigurationResponse? customDomainConfiguration,

            string? daprAIConnectionString,

            string defaultDomain,

            string deploymentErrors,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            string location,

            string name,

            string provisioningState,

            string? staticIp,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            CustomDomainConfiguration = customDomainConfiguration;
            DaprAIConnectionString = daprAIConnectionString;
            DefaultDomain = defaultDomain;
            DeploymentErrors = deploymentErrors;
            ExtendedLocation = extendedLocation;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            StaticIp = staticIp;
            SystemData = systemData;
            Tags = tags;
            Type = type;
        }
    }
}
