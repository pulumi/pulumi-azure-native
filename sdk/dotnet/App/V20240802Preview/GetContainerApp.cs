// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20240802Preview
{
    public static class GetContainerApp
    {
        /// <summary>
        /// Container App.
        /// </summary>
        public static Task<GetContainerAppResult> InvokeAsync(GetContainerAppArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerAppResult>("azure-native:app/v20240802preview:getContainerApp", args ?? new GetContainerAppArgs(), options.WithDefaults());

        /// <summary>
        /// Container App.
        /// </summary>
        public static Output<GetContainerAppResult> Invoke(GetContainerAppInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerAppResult>("azure-native:app/v20240802preview:getContainerApp", args ?? new GetContainerAppInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerAppArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Container App.
        /// </summary>
        [Input("containerAppName", required: true)]
        public string ContainerAppName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetContainerAppArgs()
        {
        }
        public static new GetContainerAppArgs Empty => new GetContainerAppArgs();
    }

    public sealed class GetContainerAppInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Container App.
        /// </summary>
        [Input("containerAppName", required: true)]
        public Input<string> ContainerAppName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetContainerAppInvokeArgs()
        {
        }
        public static new GetContainerAppInvokeArgs Empty => new GetContainerAppInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerAppResult
    {
        /// <summary>
        /// Non versioned Container App configuration properties.
        /// </summary>
        public readonly Outputs.ConfigurationResponse? Configuration;
        /// <summary>
        /// Id used to verify domain name ownership
        /// </summary>
        public readonly string CustomDomainVerificationId;
        /// <summary>
        /// Any errors that occurred during deployment
        /// </summary>
        public readonly string DeploymentErrors;
        /// <summary>
        /// Resource ID of environment.
        /// </summary>
        public readonly string? EnvironmentId;
        /// <summary>
        /// The endpoint of the eventstream of the container app.
        /// </summary>
        public readonly string EventStreamEndpoint;
        /// <summary>
        /// The complex type of the extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse? ExtendedLocation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// managed identities for the Container App to interact with other Azure services without maintaining any secrets or credentials in code.
        /// </summary>
        public readonly Outputs.ManagedServiceIdentityResponse? Identity;
        /// <summary>
        /// Metadata used to render different experiences for resources of the same type; e.g. WorkflowApp is a kind of Microsoft.App/ContainerApps type. If supported, the resource provider must validate and persist this value.
        /// </summary>
        public readonly string? Kind;
        /// <summary>
        /// Name of the latest ready revision of the Container App.
        /// </summary>
        public readonly string LatestReadyRevisionName;
        /// <summary>
        /// Fully Qualified Domain Name of the latest revision of the Container App.
        /// </summary>
        public readonly string LatestRevisionFqdn;
        /// <summary>
        /// Name of the latest revision of the Container App.
        /// </summary>
        public readonly string LatestRevisionName;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        /// </summary>
        public readonly string? ManagedBy;
        /// <summary>
        /// Deprecated. Resource ID of the Container App's environment.
        /// </summary>
        public readonly string? ManagedEnvironmentId;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Outbound IP Addresses for container app.
        /// </summary>
        public readonly ImmutableArray<string> OutboundIpAddresses;
        /// <summary>
        /// Container App auto patch configuration.
        /// </summary>
        public readonly Outputs.ContainerAppResponsePatchingConfiguration? PatchingConfiguration;
        /// <summary>
        /// Provisioning state of the Container App.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Container App versioned application definition.
        /// </summary>
        public readonly Outputs.TemplateResponse? Template;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Workload profile name to pin for container app execution.
        /// </summary>
        public readonly string? WorkloadProfileName;

        [OutputConstructor]
        private GetContainerAppResult(
            Outputs.ConfigurationResponse? configuration,

            string customDomainVerificationId,

            string deploymentErrors,

            string? environmentId,

            string eventStreamEndpoint,

            Outputs.ExtendedLocationResponse? extendedLocation,

            string id,

            Outputs.ManagedServiceIdentityResponse? identity,

            string? kind,

            string latestReadyRevisionName,

            string latestRevisionFqdn,

            string latestRevisionName,

            string location,

            string? managedBy,

            string? managedEnvironmentId,

            string name,

            ImmutableArray<string> outboundIpAddresses,

            Outputs.ContainerAppResponsePatchingConfiguration? patchingConfiguration,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            Outputs.TemplateResponse? template,

            string type,

            string? workloadProfileName)
        {
            Configuration = configuration;
            CustomDomainVerificationId = customDomainVerificationId;
            DeploymentErrors = deploymentErrors;
            EnvironmentId = environmentId;
            EventStreamEndpoint = eventStreamEndpoint;
            ExtendedLocation = extendedLocation;
            Id = id;
            Identity = identity;
            Kind = kind;
            LatestReadyRevisionName = latestReadyRevisionName;
            LatestRevisionFqdn = latestRevisionFqdn;
            LatestRevisionName = latestRevisionName;
            Location = location;
            ManagedBy = managedBy;
            ManagedEnvironmentId = managedEnvironmentId;
            Name = name;
            OutboundIpAddresses = outboundIpAddresses;
            PatchingConfiguration = patchingConfiguration;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Template = template;
            Type = type;
            WorkloadProfileName = workloadProfileName;
        }
    }
}
