// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20240802Preview
{
    public static class GetBuild
    {
        /// <summary>
        /// Get a BuildResource
        /// </summary>
        public static Task<GetBuildResult> InvokeAsync(GetBuildArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBuildResult>("azure-native:app/v20240802preview:getBuild", args ?? new GetBuildArgs(), options.WithDefaults());

        /// <summary>
        /// Get a BuildResource
        /// </summary>
        public static Output<GetBuildResult> Invoke(GetBuildInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBuildResult>("azure-native:app/v20240802preview:getBuild", args ?? new GetBuildInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBuildArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a build.
        /// </summary>
        [Input("buildName", required: true)]
        public string BuildName { get; set; } = null!;

        /// <summary>
        /// The name of the builder.
        /// </summary>
        [Input("builderName", required: true)]
        public string BuilderName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetBuildArgs()
        {
        }
        public static new GetBuildArgs Empty => new GetBuildArgs();
    }

    public sealed class GetBuildInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a build.
        /// </summary>
        [Input("buildName", required: true)]
        public Input<string> BuildName { get; set; } = null!;

        /// <summary>
        /// The name of the builder.
        /// </summary>
        [Input("builderName", required: true)]
        public Input<string> BuilderName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetBuildInvokeArgs()
        {
        }
        public static new GetBuildInvokeArgs Empty => new GetBuildInvokeArgs();
    }


    [OutputType]
    public sealed class GetBuildResult
    {
        /// <summary>
        /// Status of the build once it has been provisioned.
        /// </summary>
        public readonly string BuildStatus;
        /// <summary>
        /// Configuration of the build.
        /// </summary>
        public readonly Outputs.BuildConfigurationResponse? Configuration;
        /// <summary>
        /// Container registry that the final image will be uploaded to.
        /// </summary>
        public readonly Outputs.ContainerRegistryWithCustomImageResponse? DestinationContainerRegistry;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Endpoint from which the build logs can be streamed.
        /// </summary>
        public readonly string LogStreamEndpoint;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Build provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
        /// </summary>
        public readonly string TokenEndpoint;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Endpoint to which the source code should be uploaded.
        /// </summary>
        public readonly string UploadEndpoint;

        [OutputConstructor]
        private GetBuildResult(
            string buildStatus,

            Outputs.BuildConfigurationResponse? configuration,

            Outputs.ContainerRegistryWithCustomImageResponse? destinationContainerRegistry,

            string id,

            string logStreamEndpoint,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string tokenEndpoint,

            string type,

            string uploadEndpoint)
        {
            BuildStatus = buildStatus;
            Configuration = configuration;
            DestinationContainerRegistry = destinationContainerRegistry;
            Id = id;
            LogStreamEndpoint = logStreamEndpoint;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            TokenEndpoint = tokenEndpoint;
            Type = type;
            UploadEndpoint = uploadEndpoint;
        }
    }
}
