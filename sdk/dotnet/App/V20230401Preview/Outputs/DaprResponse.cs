// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20230401Preview.Outputs
{

    /// <summary>
    /// Container App Dapr configuration.
    /// </summary>
    [OutputType]
    public sealed class DaprResponse
    {
        /// <summary>
        /// Dapr application identifier
        /// </summary>
        public readonly string? AppId;
        /// <summary>
        /// Tells Dapr which port your application is listening on
        /// </summary>
        public readonly int? AppPort;
        /// <summary>
        /// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
        /// </summary>
        public readonly string? AppProtocol;
        /// <summary>
        /// Enables API logging for the Dapr sidecar
        /// </summary>
        public readonly bool? EnableApiLogging;
        /// <summary>
        /// Boolean indicating if the Dapr side car is enabled
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
        /// </summary>
        public readonly int? HttpMaxRequestSize;
        /// <summary>
        /// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
        /// </summary>
        public readonly int? HttpReadBufferSize;
        /// <summary>
        /// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
        /// </summary>
        public readonly string? LogLevel;

        [OutputConstructor]
        private DaprResponse(
            string? appId,

            int? appPort,

            string? appProtocol,

            bool? enableApiLogging,

            bool? enabled,

            int? httpMaxRequestSize,

            int? httpReadBufferSize,

            string? logLevel)
        {
            AppId = appId;
            AppPort = appPort;
            AppProtocol = appProtocol;
            EnableApiLogging = enableApiLogging;
            Enabled = enabled;
            HttpMaxRequestSize = httpMaxRequestSize;
            HttpReadBufferSize = httpReadBufferSize;
            LogLevel = logLevel;
        }
    }
}
