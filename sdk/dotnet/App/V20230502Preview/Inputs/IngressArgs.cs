// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20230502Preview.Inputs
{

    /// <summary>
    /// Container App Ingress configuration.
    /// </summary>
    public sealed class IngressArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalPortMappings")]
        private InputList<Inputs.IngressPortMappingArgs>? _additionalPortMappings;

        /// <summary>
        /// Settings to expose additional ports on container app
        /// </summary>
        public InputList<Inputs.IngressPortMappingArgs> AdditionalPortMappings
        {
            get => _additionalPortMappings ?? (_additionalPortMappings = new InputList<Inputs.IngressPortMappingArgs>());
            set => _additionalPortMappings = value;
        }

        /// <summary>
        /// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
        /// </summary>
        [Input("allowInsecure")]
        public Input<bool>? AllowInsecure { get; set; }

        /// <summary>
        /// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
        /// </summary>
        [Input("clientCertificateMode")]
        public InputUnion<string, Pulumi.AzureNative.App.V20230502Preview.IngressClientCertificateMode>? ClientCertificateMode { get; set; }

        /// <summary>
        /// CORS policy for container app
        /// </summary>
        [Input("corsPolicy")]
        public Input<Inputs.CorsPolicyArgs>? CorsPolicy { get; set; }

        [Input("customDomains")]
        private InputList<Inputs.CustomDomainArgs>? _customDomains;

        /// <summary>
        /// custom domain bindings for Container Apps' hostnames.
        /// </summary>
        public InputList<Inputs.CustomDomainArgs> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<Inputs.CustomDomainArgs>());
            set => _customDomains = value;
        }

        /// <summary>
        /// Exposed Port in containers for TCP traffic from ingress
        /// </summary>
        [Input("exposedPort")]
        public Input<int>? ExposedPort { get; set; }

        /// <summary>
        /// Bool indicating if app exposes an external http endpoint
        /// </summary>
        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("ipSecurityRestrictions")]
        private InputList<Inputs.IpSecurityRestrictionRuleArgs>? _ipSecurityRestrictions;

        /// <summary>
        /// Rules to restrict incoming IP address.
        /// </summary>
        public InputList<Inputs.IpSecurityRestrictionRuleArgs> IpSecurityRestrictions
        {
            get => _ipSecurityRestrictions ?? (_ipSecurityRestrictions = new InputList<Inputs.IpSecurityRestrictionRuleArgs>());
            set => _ipSecurityRestrictions = value;
        }

        /// <summary>
        /// Sticky Sessions for Single Revision Mode
        /// </summary>
        [Input("stickySessions")]
        public Input<Inputs.IngressStickySessionsArgs>? StickySessions { get; set; }

        /// <summary>
        /// Target Port in containers for traffic from ingress
        /// </summary>
        [Input("targetPort")]
        public Input<int>? TargetPort { get; set; }

        [Input("traffic")]
        private InputList<Inputs.TrafficWeightArgs>? _traffic;

        /// <summary>
        /// Traffic weights for app's revisions
        /// </summary>
        public InputList<Inputs.TrafficWeightArgs> Traffic
        {
            get => _traffic ?? (_traffic = new InputList<Inputs.TrafficWeightArgs>());
            set => _traffic = value;
        }

        /// <summary>
        /// Ingress transport protocol
        /// </summary>
        [Input("transport")]
        public InputUnion<string, Pulumi.AzureNative.App.V20230502Preview.IngressTransportMethod>? Transport { get; set; }

        public IngressArgs()
        {
            AllowInsecure = false;
            External = false;
            Transport = "auto";
        }
        public static new IngressArgs Empty => new IngressArgs();
    }
}
