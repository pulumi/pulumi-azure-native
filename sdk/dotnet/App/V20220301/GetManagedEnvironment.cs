// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.App.V20220301
{
    public static class GetManagedEnvironment
    {
        /// <summary>
        /// An environment for hosting container apps
        /// </summary>
        public static Task<GetManagedEnvironmentResult> InvokeAsync(GetManagedEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedEnvironmentResult>("azure-native:app/v20220301:getManagedEnvironment", args ?? new GetManagedEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// An environment for hosting container apps
        /// </summary>
        public static Output<GetManagedEnvironmentResult> Invoke(GetManagedEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetManagedEnvironmentResult>("azure-native:app/v20220301:getManagedEnvironment", args ?? new GetManagedEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Environment.
        /// </summary>
        [Input("environmentName", required: true)]
        public string EnvironmentName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedEnvironmentArgs()
        {
        }
        public static new GetManagedEnvironmentArgs Empty => new GetManagedEnvironmentArgs();
    }

    public sealed class GetManagedEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Environment.
        /// </summary>
        [Input("environmentName", required: true)]
        public Input<string> EnvironmentName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedEnvironmentInvokeArgs()
        {
        }
        public static new GetManagedEnvironmentInvokeArgs Empty => new GetManagedEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedEnvironmentResult
    {
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        public readonly Outputs.AppLogsConfigurationResponse? AppLogsConfiguration;
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        public readonly string? DaprAIConnectionString;
        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        public readonly string? DaprAIInstrumentationKey;
        /// <summary>
        /// Default Domain Name for the cluster
        /// </summary>
        public readonly string DefaultDomain;
        /// <summary>
        /// Any errors that occurred during deployment or deployment validation
        /// </summary>
        public readonly string DeploymentErrors;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Provisioning state of the Environment.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Static IP of the Environment
        /// </summary>
        public readonly string StaticIp;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Vnet configuration for the environment
        /// </summary>
        public readonly Outputs.VnetConfigurationResponse? VnetConfiguration;
        /// <summary>
        /// Whether or not this Managed Environment is zone-redundant.
        /// </summary>
        public readonly bool? ZoneRedundant;

        [OutputConstructor]
        private GetManagedEnvironmentResult(
            Outputs.AppLogsConfigurationResponse? appLogsConfiguration,

            string? daprAIConnectionString,

            string? daprAIInstrumentationKey,

            string defaultDomain,

            string deploymentErrors,

            string id,

            string location,

            string name,

            string provisioningState,

            string staticIp,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            Outputs.VnetConfigurationResponse? vnetConfiguration,

            bool? zoneRedundant)
        {
            AppLogsConfiguration = appLogsConfiguration;
            DaprAIConnectionString = daprAIConnectionString;
            DaprAIInstrumentationKey = daprAIInstrumentationKey;
            DefaultDomain = defaultDomain;
            DeploymentErrors = deploymentErrors;
            Id = id;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            StaticIp = staticIp;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            VnetConfiguration = vnetConfiguration;
            ZoneRedundant = zoneRedundant;
        }
    }
}
