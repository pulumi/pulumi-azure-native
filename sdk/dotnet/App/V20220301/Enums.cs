// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.App.V20220301
{
    /// <summary>
    /// Access mode for storage
    /// </summary>
    [EnumType]
    public readonly struct AccessMode : IEquatable<AccessMode>
    {
        private readonly string _value;

        private AccessMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessMode ReadOnly { get; } = new AccessMode("ReadOnly");
        public static AccessMode ReadWrite { get; } = new AccessMode("ReadWrite");

        public static bool operator ==(AccessMode left, AccessMode right) => left.Equals(right);
        public static bool operator !=(AccessMode left, AccessMode right) => !left.Equals(right);

        public static explicit operator string(AccessMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessMode other && Equals(other);
        public bool Equals(AccessMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ActiveRevisionsMode controls how active revisions are handled for the Container app:
    /// &lt;list&gt;&lt;item&gt;Multiple: multiple revisions can be active.&lt;/item&gt;&lt;item&gt;Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.&lt;/item&gt;&lt;/list&gt;
    /// </summary>
    [EnumType]
    public readonly struct ActiveRevisionsMode : IEquatable<ActiveRevisionsMode>
    {
        private readonly string _value;

        private ActiveRevisionsMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ActiveRevisionsMode Multiple { get; } = new ActiveRevisionsMode("Multiple");
        public static ActiveRevisionsMode Single { get; } = new ActiveRevisionsMode("Single");

        public static bool operator ==(ActiveRevisionsMode left, ActiveRevisionsMode right) => left.Equals(right);
        public static bool operator !=(ActiveRevisionsMode left, ActiveRevisionsMode right) => !left.Equals(right);

        public static explicit operator string(ActiveRevisionsMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ActiveRevisionsMode other && Equals(other);
        public bool Equals(ActiveRevisionsMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
    /// </summary>
    [EnumType]
    public readonly struct AppProtocol : IEquatable<AppProtocol>
    {
        private readonly string _value;

        private AppProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppProtocol Http { get; } = new AppProtocol("http");
        public static AppProtocol Grpc { get; } = new AppProtocol("grpc");

        public static bool operator ==(AppProtocol left, AppProtocol right) => left.Equals(right);
        public static bool operator !=(AppProtocol left, AppProtocol right) => !left.Equals(right);

        public static explicit operator string(AppProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppProtocol other && Equals(other);
        public bool Equals(AppProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Custom Domain binding type.
    /// </summary>
    [EnumType]
    public readonly struct BindingType : IEquatable<BindingType>
    {
        private readonly string _value;

        private BindingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BindingType Disabled { get; } = new BindingType("Disabled");
        public static BindingType SniEnabled { get; } = new BindingType("SniEnabled");

        public static bool operator ==(BindingType left, BindingType right) => left.Equals(right);
        public static bool operator !=(BindingType left, BindingType right) => !left.Equals(right);

        public static explicit operator string(BindingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BindingType other && Equals(other);
        public bool Equals(BindingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The method that should be used to authenticate the user.
    /// </summary>
    [EnumType]
    public readonly struct ClientCredentialMethod : IEquatable<ClientCredentialMethod>
    {
        private readonly string _value;

        private ClientCredentialMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClientCredentialMethod ClientSecretPost { get; } = new ClientCredentialMethod("ClientSecretPost");

        public static bool operator ==(ClientCredentialMethod left, ClientCredentialMethod right) => left.Equals(right);
        public static bool operator !=(ClientCredentialMethod left, ClientCredentialMethod right) => !left.Equals(right);

        public static explicit operator string(ClientCredentialMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClientCredentialMethod other && Equals(other);
        public bool Equals(ClientCredentialMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The convention used when determining the session cookie's expiration.
    /// </summary>
    [EnumType]
    public readonly struct CookieExpirationConvention : IEquatable<CookieExpirationConvention>
    {
        private readonly string _value;

        private CookieExpirationConvention(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CookieExpirationConvention FixedTime { get; } = new CookieExpirationConvention("FixedTime");
        public static CookieExpirationConvention IdentityProviderDerived { get; } = new CookieExpirationConvention("IdentityProviderDerived");

        public static bool operator ==(CookieExpirationConvention left, CookieExpirationConvention right) => left.Equals(right);
        public static bool operator !=(CookieExpirationConvention left, CookieExpirationConvention right) => !left.Equals(right);

        public static explicit operator string(CookieExpirationConvention value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CookieExpirationConvention other && Equals(other);
        public bool Equals(CookieExpirationConvention other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The convention used to determine the url of the request made.
    /// </summary>
    [EnumType]
    public readonly struct ForwardProxyConvention : IEquatable<ForwardProxyConvention>
    {
        private readonly string _value;

        private ForwardProxyConvention(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ForwardProxyConvention NoProxy { get; } = new ForwardProxyConvention("NoProxy");
        public static ForwardProxyConvention Standard { get; } = new ForwardProxyConvention("Standard");
        public static ForwardProxyConvention Custom { get; } = new ForwardProxyConvention("Custom");

        public static bool operator ==(ForwardProxyConvention left, ForwardProxyConvention right) => left.Equals(right);
        public static bool operator !=(ForwardProxyConvention left, ForwardProxyConvention right) => !left.Equals(right);

        public static explicit operator string(ForwardProxyConvention value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ForwardProxyConvention other && Equals(other);
        public bool Equals(ForwardProxyConvention other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ingress transport protocol
    /// </summary>
    [EnumType]
    public readonly struct IngressTransportMethod : IEquatable<IngressTransportMethod>
    {
        private readonly string _value;

        private IngressTransportMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IngressTransportMethod Auto { get; } = new IngressTransportMethod("auto");
        public static IngressTransportMethod Http { get; } = new IngressTransportMethod("http");
        public static IngressTransportMethod Http2 { get; } = new IngressTransportMethod("http2");

        public static bool operator ==(IngressTransportMethod left, IngressTransportMethod right) => left.Equals(right);
        public static bool operator !=(IngressTransportMethod left, IngressTransportMethod right) => !left.Equals(right);

        public static explicit operator string(IngressTransportMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IngressTransportMethod other && Equals(other);
        public bool Equals(IngressTransportMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    /// </summary>
    [EnumType]
    public readonly struct ManagedServiceIdentityType : IEquatable<ManagedServiceIdentityType>
    {
        private readonly string _value;

        private ManagedServiceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedServiceIdentityType None { get; } = new ManagedServiceIdentityType("None");
        public static ManagedServiceIdentityType SystemAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned");
        public static ManagedServiceIdentityType UserAssigned { get; } = new ManagedServiceIdentityType("UserAssigned");
        public static ManagedServiceIdentityType SystemAssigned_UserAssigned { get; } = new ManagedServiceIdentityType("SystemAssigned,UserAssigned");

        public static bool operator ==(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => left.Equals(right);
        public static bool operator !=(ManagedServiceIdentityType left, ManagedServiceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ManagedServiceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedServiceIdentityType other && Equals(other);
        public bool Equals(ManagedServiceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Scheme to use for connecting to the host. Defaults to HTTP.
    /// </summary>
    [EnumType]
    public readonly struct Scheme : IEquatable<Scheme>
    {
        private readonly string _value;

        private Scheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Scheme HTTP { get; } = new Scheme("HTTP");
        public static Scheme HTTPS { get; } = new Scheme("HTTPS");

        public static bool operator ==(Scheme left, Scheme right) => left.Equals(right);
        public static bool operator !=(Scheme left, Scheme right) => !left.Equals(right);

        public static explicit operator string(Scheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Scheme other && Equals(other);
        public bool Equals(Scheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Storage type for the volume. If not provided, use EmptyDir.
    /// </summary>
    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType AzureFile { get; } = new StorageType("AzureFile");
        public static StorageType EmptyDir { get; } = new StorageType("EmptyDir");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of probe.
    /// </summary>
    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Liveness { get; } = new Type("Liveness");
        public static Type Readiness { get; } = new Type("Readiness");
        public static Type Startup { get; } = new Type("Startup");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to take when an unauthenticated client attempts to access the app.
    /// </summary>
    [EnumType]
    public readonly struct UnauthenticatedClientActionV2 : IEquatable<UnauthenticatedClientActionV2>
    {
        private readonly string _value;

        private UnauthenticatedClientActionV2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UnauthenticatedClientActionV2 RedirectToLoginPage { get; } = new UnauthenticatedClientActionV2("RedirectToLoginPage");
        public static UnauthenticatedClientActionV2 AllowAnonymous { get; } = new UnauthenticatedClientActionV2("AllowAnonymous");
        public static UnauthenticatedClientActionV2 Return401 { get; } = new UnauthenticatedClientActionV2("Return401");
        public static UnauthenticatedClientActionV2 Return403 { get; } = new UnauthenticatedClientActionV2("Return403");

        public static bool operator ==(UnauthenticatedClientActionV2 left, UnauthenticatedClientActionV2 right) => left.Equals(right);
        public static bool operator !=(UnauthenticatedClientActionV2 left, UnauthenticatedClientActionV2 right) => !left.Equals(right);

        public static explicit operator string(UnauthenticatedClientActionV2 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UnauthenticatedClientActionV2 other && Equals(other);
        public bool Equals(UnauthenticatedClientActionV2 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
