// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Marketplace.V20210601
{
    public static class GetPrivateStoreCollectionOffer
    {
        /// <summary>
        /// The privateStore offer data structure.
        /// </summary>
        public static Task<GetPrivateStoreCollectionOfferResult> InvokeAsync(GetPrivateStoreCollectionOfferArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPrivateStoreCollectionOfferResult>("azure-native:marketplace/v20210601:getPrivateStoreCollectionOffer", args ?? new GetPrivateStoreCollectionOfferArgs(), options.WithDefaults());

        /// <summary>
        /// The privateStore offer data structure.
        /// </summary>
        public static Output<GetPrivateStoreCollectionOfferResult> Invoke(GetPrivateStoreCollectionOfferInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPrivateStoreCollectionOfferResult>("azure-native:marketplace/v20210601:getPrivateStoreCollectionOffer", args ?? new GetPrivateStoreCollectionOfferInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateStoreCollectionOfferArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The collection ID
        /// </summary>
        [Input("collectionId", required: true)]
        public string CollectionId { get; set; } = null!;

        /// <summary>
        /// The offer ID to update or delete
        /// </summary>
        [Input("offerId", required: true)]
        public string OfferId { get; set; } = null!;

        /// <summary>
        /// The store ID - must use the tenant ID
        /// </summary>
        [Input("privateStoreId", required: true)]
        public string PrivateStoreId { get; set; } = null!;

        public GetPrivateStoreCollectionOfferArgs()
        {
        }
        public static new GetPrivateStoreCollectionOfferArgs Empty => new GetPrivateStoreCollectionOfferArgs();
    }

    public sealed class GetPrivateStoreCollectionOfferInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The collection ID
        /// </summary>
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        /// <summary>
        /// The offer ID to update or delete
        /// </summary>
        [Input("offerId", required: true)]
        public Input<string> OfferId { get; set; } = null!;

        /// <summary>
        /// The store ID - must use the tenant ID
        /// </summary>
        [Input("privateStoreId", required: true)]
        public Input<string> PrivateStoreId { get; set; } = null!;

        public GetPrivateStoreCollectionOfferInvokeArgs()
        {
        }
        public static new GetPrivateStoreCollectionOfferInvokeArgs Empty => new GetPrivateStoreCollectionOfferInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateStoreCollectionOfferResult
    {
        /// <summary>
        /// Private store offer creation date
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Identifier for purposes of race condition
        /// </summary>
        public readonly string? ETag;
        /// <summary>
        /// Icon File Uris
        /// </summary>
        public readonly ImmutableDictionary<string, string>? IconFileUris;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Private store offer modification date
        /// </summary>
        public readonly string ModifiedAt;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// It will be displayed prominently in the marketplace
        /// </summary>
        public readonly string OfferDisplayName;
        /// <summary>
        /// Offer plans
        /// </summary>
        public readonly ImmutableArray<Outputs.PlanResponse> Plans;
        /// <summary>
        /// Private store unique id
        /// </summary>
        public readonly string PrivateStoreId;
        /// <summary>
        /// Publisher name that will be displayed prominently in the marketplace
        /// </summary>
        public readonly string PublisherDisplayName;
        /// <summary>
        /// Plan ids limitation for this offer
        /// </summary>
        public readonly ImmutableArray<string> SpecificPlanIdsLimitation;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Offers unique id
        /// </summary>
        public readonly string UniqueOfferId;
        /// <summary>
        /// Indicating whether the offer was not updated to db (true = not updated). If the allow list is identical to the existed one in db, the offer would not be updated.
        /// </summary>
        public readonly bool? UpdateSuppressedDueIdempotence;

        [OutputConstructor]
        private GetPrivateStoreCollectionOfferResult(
            string createdAt,

            string? eTag,

            ImmutableDictionary<string, string>? iconFileUris,

            string id,

            string modifiedAt,

            string name,

            string offerDisplayName,

            ImmutableArray<Outputs.PlanResponse> plans,

            string privateStoreId,

            string publisherDisplayName,

            ImmutableArray<string> specificPlanIdsLimitation,

            Outputs.SystemDataResponse systemData,

            string type,

            string uniqueOfferId,

            bool? updateSuppressedDueIdempotence)
        {
            CreatedAt = createdAt;
            ETag = eTag;
            IconFileUris = iconFileUris;
            Id = id;
            ModifiedAt = modifiedAt;
            Name = name;
            OfferDisplayName = offerDisplayName;
            Plans = plans;
            PrivateStoreId = privateStoreId;
            PublisherDisplayName = publisherDisplayName;
            SpecificPlanIdsLimitation = specificPlanIdsLimitation;
            SystemData = systemData;
            Type = type;
            UniqueOfferId = uniqueOfferId;
            UpdateSuppressedDueIdempotence = updateSuppressedDueIdempotence;
        }
    }
}
