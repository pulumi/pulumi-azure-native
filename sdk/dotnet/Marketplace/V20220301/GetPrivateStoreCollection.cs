// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Marketplace.V20220301
{
    public static class GetPrivateStoreCollection
    {
        /// <summary>
        /// The Collection data structure.
        /// </summary>
        public static Task<GetPrivateStoreCollectionResult> InvokeAsync(GetPrivateStoreCollectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPrivateStoreCollectionResult>("azure-native:marketplace/v20220301:getPrivateStoreCollection", args ?? new GetPrivateStoreCollectionArgs(), options.WithDefaults());

        /// <summary>
        /// The Collection data structure.
        /// </summary>
        public static Output<GetPrivateStoreCollectionResult> Invoke(GetPrivateStoreCollectionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPrivateStoreCollectionResult>("azure-native:marketplace/v20220301:getPrivateStoreCollection", args ?? new GetPrivateStoreCollectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateStoreCollectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The collection ID
        /// </summary>
        [Input("collectionId", required: true)]
        public string CollectionId { get; set; } = null!;

        /// <summary>
        /// The store ID - must use the tenant ID
        /// </summary>
        [Input("privateStoreId", required: true)]
        public string PrivateStoreId { get; set; } = null!;

        public GetPrivateStoreCollectionArgs()
        {
        }
        public static new GetPrivateStoreCollectionArgs Empty => new GetPrivateStoreCollectionArgs();
    }

    public sealed class GetPrivateStoreCollectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The collection ID
        /// </summary>
        [Input("collectionId", required: true)]
        public Input<string> CollectionId { get; set; } = null!;

        /// <summary>
        /// The store ID - must use the tenant ID
        /// </summary>
        [Input("privateStoreId", required: true)]
        public Input<string> PrivateStoreId { get; set; } = null!;

        public GetPrivateStoreCollectionInvokeArgs()
        {
        }
        public static new GetPrivateStoreCollectionInvokeArgs Empty => new GetPrivateStoreCollectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateStoreCollectionResult
    {
        /// <summary>
        /// Indicating whether all items are approved for this collection (=true) or not (=false).
        /// </summary>
        public readonly bool AllItemsApproved;
        /// <summary>
        /// Gets the modified date of all items approved.
        /// </summary>
        public readonly string AllItemsApprovedModifiedAt;
        /// <summary>
        /// Indicating whether all subscriptions are selected (=true) or not (=false).
        /// </summary>
        public readonly bool? AllSubscriptions;
        /// <summary>
        /// Gets or sets the association with Commercial's Billing Account.
        /// </summary>
        public readonly string? Claim;
        /// <summary>
        /// Gets collection Id.
        /// </summary>
        public readonly string CollectionId;
        /// <summary>
        /// Gets or sets collection name.
        /// </summary>
        public readonly string? CollectionName;
        /// <summary>
        /// Indicating whether the collection is enabled or disabled.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The resource ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the number of offers associated with the collection.
        /// </summary>
        public readonly double NumberOfOffers;
        /// <summary>
        /// Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done, explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
        /// </summary>
        public readonly ImmutableArray<string> SubscriptionsList;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPrivateStoreCollectionResult(
            bool allItemsApproved,

            string allItemsApprovedModifiedAt,

            bool? allSubscriptions,

            string? claim,

            string collectionId,

            string? collectionName,

            bool? enabled,

            string id,

            string name,

            double numberOfOffers,

            ImmutableArray<string> subscriptionsList,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AllItemsApproved = allItemsApproved;
            AllItemsApprovedModifiedAt = allItemsApprovedModifiedAt;
            AllSubscriptions = allSubscriptions;
            Claim = claim;
            CollectionId = collectionId;
            CollectionName = collectionName;
            Enabled = enabled;
            Id = id;
            Name = name;
            NumberOfOffers = numberOfOffers;
            SubscriptionsList = subscriptionsList;
            SystemData = systemData;
            Type = type;
        }
    }
}
