// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Solutions.V20180901Preview
{
    public static class ListApplicationTokens
    {
        /// <summary>
        /// The array of managed identity tokens.
        /// </summary>
        public static Task<ListApplicationTokensResult> InvokeAsync(ListApplicationTokensArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ListApplicationTokensResult>("azure-native:solutions/v20180901preview:listApplicationTokens", args ?? new ListApplicationTokensArgs(), options.WithDefaults());

        /// <summary>
        /// The array of managed identity tokens.
        /// </summary>
        public static Output<ListApplicationTokensResult> Invoke(ListApplicationTokensInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ListApplicationTokensResult>("azure-native:solutions/v20180901preview:listApplicationTokens", args ?? new ListApplicationTokensInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListApplicationTokensArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed application.
        /// </summary>
        [Input("applicationName", required: true)]
        public string ApplicationName { get; set; } = null!;

        /// <summary>
        /// The authorization audience.
        /// </summary>
        [Input("authorizationAudience")]
        public string? AuthorizationAudience { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("userAssignedIdentities")]
        private List<string>? _userAssignedIdentities;

        /// <summary>
        /// The user assigned identities.
        /// </summary>
        public List<string> UserAssignedIdentities
        {
            get => _userAssignedIdentities ?? (_userAssignedIdentities = new List<string>());
            set => _userAssignedIdentities = value;
        }

        public ListApplicationTokensArgs()
        {
        }
    }

    public sealed class ListApplicationTokensInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed application.
        /// </summary>
        [Input("applicationName", required: true)]
        public Input<string> ApplicationName { get; set; } = null!;

        /// <summary>
        /// The authorization audience.
        /// </summary>
        [Input("authorizationAudience")]
        public Input<string>? AuthorizationAudience { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("userAssignedIdentities")]
        private InputList<string>? _userAssignedIdentities;

        /// <summary>
        /// The user assigned identities.
        /// </summary>
        public InputList<string> UserAssignedIdentities
        {
            get => _userAssignedIdentities ?? (_userAssignedIdentities = new InputList<string>());
            set => _userAssignedIdentities = value;
        }

        public ListApplicationTokensInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class ListApplicationTokensResult
    {
        /// <summary>
        /// The array of managed identity tokens.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagedIdentityTokenResponse> Value;

        [OutputConstructor]
        private ListApplicationTokensResult(ImmutableArray<Outputs.ManagedIdentityTokenResponse> value)
        {
            Value = value;
        }
    }
}
