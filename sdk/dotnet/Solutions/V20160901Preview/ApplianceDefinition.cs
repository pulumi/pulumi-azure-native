// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Solutions.V20160901Preview
{
    /// <summary>
    /// Information about appliance definition.
    /// </summary>
    public partial class ApplianceDefinition : Pulumi.CustomResource
    {
        /// <summary>
        /// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
        /// </summary>
        [Output("artifacts")]
        public Output<ImmutableArray<Outputs.ApplianceArtifactResponse>> Artifacts { get; private set; } = null!;

        /// <summary>
        /// The appliance provider authorizations.
        /// </summary>
        [Output("authorizations")]
        public Output<ImmutableArray<Outputs.ApplianceProviderAuthorizationResponse>> Authorizations { get; private set; } = null!;

        /// <summary>
        /// The appliance definition description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The appliance definition display name.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The identity of the resource.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.IdentityResponse?> Identity { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// The appliance lock level.
        /// </summary>
        [Output("lockLevel")]
        public Output<string> LockLevel { get; private set; } = null!;

        /// <summary>
        /// ID of the resource that manages this resource.
        /// </summary>
        [Output("managedBy")]
        public Output<string?> ManagedBy { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The appliance definition package file Uri.
        /// </summary>
        [Output("packageFileUri")]
        public Output<string> PackageFileUri { get; private set; } = null!;

        /// <summary>
        /// The SKU of the resource.
        /// </summary>
        [Output("sku")]
        public Output<Outputs.SkuResponse?> Sku { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceDefinition(string name, ApplianceDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:solutions/v20160901preview:ApplianceDefinition", name, args ?? new ApplianceDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:solutions/v20160901preview:ApplianceDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ApplianceDefinition(name, id, options);
        }
    }

    public sealed class ApplianceDefinitionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the appliance definition.
        /// </summary>
        [Input("applianceDefinitionName", required: true)]
        public Input<string> ApplianceDefinitionName { get; set; } = null!;

        [Input("artifacts")]
        private InputList<Inputs.ApplianceArtifactArgs>? _artifacts;

        /// <summary>
        /// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
        /// </summary>
        public InputList<Inputs.ApplianceArtifactArgs> Artifacts
        {
            get => _artifacts ?? (_artifacts = new InputList<Inputs.ApplianceArtifactArgs>());
            set => _artifacts = value;
        }

        [Input("authorizations", required: true)]
        private InputList<Inputs.ApplianceProviderAuthorizationArgs>? _authorizations;

        /// <summary>
        /// The appliance provider authorizations.
        /// </summary>
        public InputList<Inputs.ApplianceProviderAuthorizationArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.ApplianceProviderAuthorizationArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// The appliance definition description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The appliance definition display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The identity of the resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The appliance lock level.
        /// </summary>
        [Input("lockLevel", required: true)]
        public Input<string> LockLevel { get; set; } = null!;

        /// <summary>
        /// ID of the resource that manages this resource.
        /// </summary>
        [Input("managedBy")]
        public Input<string>? ManagedBy { get; set; }

        /// <summary>
        /// The appliance definition package file Uri.
        /// </summary>
        [Input("packageFileUri", required: true)]
        public Input<string> PackageFileUri { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU of the resource.
        /// </summary>
        [Input("sku")]
        public Input<Inputs.SkuArgs>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ApplianceDefinitionArgs()
        {
        }
    }
}
