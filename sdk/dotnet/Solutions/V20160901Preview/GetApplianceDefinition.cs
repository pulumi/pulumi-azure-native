// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Solutions.V20160901Preview
{
    public static class GetApplianceDefinition
    {
        public static Task<GetApplianceDefinitionResult> InvokeAsync(GetApplianceDefinitionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplianceDefinitionResult>("azure-nextgen:solutions/v20160901preview:getApplianceDefinition", args ?? new GetApplianceDefinitionArgs(), options.WithVersion());
    }


    public sealed class GetApplianceDefinitionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the appliance definition.
        /// </summary>
        [Input("applianceDefinitionName", required: true)]
        public string ApplianceDefinitionName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetApplianceDefinitionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplianceDefinitionResult
    {
        /// <summary>
        /// The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplianceArtifactResponse> Artifacts;
        /// <summary>
        /// The appliance provider authorizations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplianceProviderAuthorizationResponse> Authorizations;
        /// <summary>
        /// The appliance definition description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The appliance definition display name.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The identity of the resource.
        /// </summary>
        public readonly Outputs.IdentityResponse? Identity;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The appliance lock level.
        /// </summary>
        public readonly string LockLevel;
        /// <summary>
        /// ID of the resource that manages this resource.
        /// </summary>
        public readonly string? ManagedBy;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The appliance definition package file Uri.
        /// </summary>
        public readonly string PackageFileUri;
        /// <summary>
        /// The SKU of the resource.
        /// </summary>
        public readonly Outputs.SkuResponse? Sku;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetApplianceDefinitionResult(
            ImmutableArray<Outputs.ApplianceArtifactResponse> artifacts,

            ImmutableArray<Outputs.ApplianceProviderAuthorizationResponse> authorizations,

            string? description,

            string? displayName,

            Outputs.IdentityResponse? identity,

            string? location,

            string lockLevel,

            string? managedBy,

            string name,

            string packageFileUri,

            Outputs.SkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string type)
        {
            Artifacts = artifacts;
            Authorizations = authorizations;
            Description = description;
            DisplayName = displayName;
            Identity = identity;
            Location = location;
            LockLevel = lockLevel;
            ManagedBy = managedBy;
            Name = name;
            PackageFileUri = packageFileUri;
            Sku = sku;
            Tags = tags;
            Type = type;
        }
    }
}
