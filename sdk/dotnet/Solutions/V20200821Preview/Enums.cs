// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Solutions.V20200821Preview
{
    /// <summary>
    /// The managed application definition artifact type.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationArtifactType : IEquatable<ApplicationArtifactType>
    {
        private readonly string _value;

        private ApplicationArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationArtifactType NotSpecified { get; } = new ApplicationArtifactType("NotSpecified");
        public static ApplicationArtifactType Template { get; } = new ApplicationArtifactType("Template");
        public static ApplicationArtifactType Custom { get; } = new ApplicationArtifactType("Custom");

        public static bool operator ==(ApplicationArtifactType left, ApplicationArtifactType right) => left.Equals(right);
        public static bool operator !=(ApplicationArtifactType left, ApplicationArtifactType right) => !left.Equals(right);

        public static explicit operator string(ApplicationArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationArtifactType other && Equals(other);
        public bool Equals(ApplicationArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed application definition artifact name.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationDefinitionArtifactName : IEquatable<ApplicationDefinitionArtifactName>
    {
        private readonly string _value;

        private ApplicationDefinitionArtifactName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationDefinitionArtifactName NotSpecified { get; } = new ApplicationDefinitionArtifactName("NotSpecified");
        public static ApplicationDefinitionArtifactName ApplicationResourceTemplate { get; } = new ApplicationDefinitionArtifactName("ApplicationResourceTemplate");
        public static ApplicationDefinitionArtifactName CreateUiDefinition { get; } = new ApplicationDefinitionArtifactName("CreateUiDefinition");
        public static ApplicationDefinitionArtifactName MainTemplateParameters { get; } = new ApplicationDefinitionArtifactName("MainTemplateParameters");

        public static bool operator ==(ApplicationDefinitionArtifactName left, ApplicationDefinitionArtifactName right) => left.Equals(right);
        public static bool operator !=(ApplicationDefinitionArtifactName left, ApplicationDefinitionArtifactName right) => !left.Equals(right);

        public static explicit operator string(ApplicationDefinitionArtifactName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationDefinitionArtifactName other && Equals(other);
        public bool Equals(ApplicationDefinitionArtifactName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed application lock level.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationLockLevel : IEquatable<ApplicationLockLevel>
    {
        private readonly string _value;

        private ApplicationLockLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationLockLevel CanNotDelete { get; } = new ApplicationLockLevel("CanNotDelete");
        public static ApplicationLockLevel ReadOnly { get; } = new ApplicationLockLevel("ReadOnly");
        public static ApplicationLockLevel None { get; } = new ApplicationLockLevel("None");

        public static bool operator ==(ApplicationLockLevel left, ApplicationLockLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationLockLevel left, ApplicationLockLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationLockLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationLockLevel other && Equals(other);
        public bool Equals(ApplicationLockLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed application management mode.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationManagementMode : IEquatable<ApplicationManagementMode>
    {
        private readonly string _value;

        private ApplicationManagementMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationManagementMode NotSpecified { get; } = new ApplicationManagementMode("NotSpecified");
        public static ApplicationManagementMode Unmanaged { get; } = new ApplicationManagementMode("Unmanaged");
        public static ApplicationManagementMode Managed { get; } = new ApplicationManagementMode("Managed");

        public static bool operator ==(ApplicationManagementMode left, ApplicationManagementMode right) => left.Equals(right);
        public static bool operator !=(ApplicationManagementMode left, ApplicationManagementMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationManagementMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationManagementMode other && Equals(other);
        public bool Equals(ApplicationManagementMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed application deployment mode.
    /// </summary>
    [EnumType]
    public readonly struct DeploymentMode : IEquatable<DeploymentMode>
    {
        private readonly string _value;

        private DeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeploymentMode NotSpecified { get; } = new DeploymentMode("NotSpecified");
        public static DeploymentMode Incremental { get; } = new DeploymentMode("Incremental");
        public static DeploymentMode Complete { get; } = new DeploymentMode("Complete");

        public static bool operator ==(DeploymentMode left, DeploymentMode right) => left.Equals(right);
        public static bool operator !=(DeploymentMode left, DeploymentMode right) => !left.Equals(right);

        public static explicit operator string(DeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeploymentMode other && Equals(other);
        public bool Equals(DeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// JIT approval mode.
    /// </summary>
    [EnumType]
    public readonly struct JitApprovalMode : IEquatable<JitApprovalMode>
    {
        private readonly string _value;

        private JitApprovalMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JitApprovalMode NotSpecified { get; } = new JitApprovalMode("NotSpecified");
        public static JitApprovalMode AutoApprove { get; } = new JitApprovalMode("AutoApprove");
        public static JitApprovalMode ManualApprove { get; } = new JitApprovalMode("ManualApprove");

        public static bool operator ==(JitApprovalMode left, JitApprovalMode right) => left.Equals(right);
        public static bool operator !=(JitApprovalMode left, JitApprovalMode right) => !left.Equals(right);

        public static explicit operator string(JitApprovalMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JitApprovalMode other && Equals(other);
        public bool Equals(JitApprovalMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The approver type.
    /// </summary>
    [EnumType]
    public readonly struct JitApproverType : IEquatable<JitApproverType>
    {
        private readonly string _value;

        private JitApproverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JitApproverType User { get; } = new JitApproverType("user");
        public static JitApproverType @Group { get; } = new JitApproverType("group");

        public static bool operator ==(JitApproverType left, JitApproverType right) => left.Equals(right);
        public static bool operator !=(JitApproverType left, JitApproverType right) => !left.Equals(right);

        public static explicit operator string(JitApproverType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JitApproverType other && Equals(other);
        public bool Equals(JitApproverType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
