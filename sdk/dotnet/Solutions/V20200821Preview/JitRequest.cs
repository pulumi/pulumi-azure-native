// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Solutions.V20200821Preview
{
    /// <summary>
    /// Information about JIT request definition.
    /// </summary>
    public partial class JitRequest : Pulumi.CustomResource
    {
        /// <summary>
        /// The parent application id.
        /// </summary>
        [Output("applicationResourceId")]
        public Output<string> ApplicationResourceId { get; private set; } = null!;

        /// <summary>
        /// The client entity that created the JIT request.
        /// </summary>
        [Output("createdBy")]
        public Output<Outputs.ApplicationClientDetailsResponse> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The JIT authorization policies.
        /// </summary>
        [Output("jitAuthorizationPolicies")]
        public Output<ImmutableArray<Outputs.JitAuthorizationPoliciesResponse>> JitAuthorizationPolicies { get; private set; } = null!;

        /// <summary>
        /// The JIT request state.
        /// </summary>
        [Output("jitRequestState")]
        public Output<string> JitRequestState { get; private set; } = null!;

        /// <summary>
        /// The JIT request properties.
        /// </summary>
        [Output("jitSchedulingPolicy")]
        public Output<Outputs.JitSchedulingPolicyResponse> JitSchedulingPolicy { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The JIT request provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The publisher tenant id.
        /// </summary>
        [Output("publisherTenantId")]
        public Output<string> PublisherTenantId { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The client entity that last updated the JIT request.
        /// </summary>
        [Output("updatedBy")]
        public Output<Outputs.ApplicationClientDetailsResponse> UpdatedBy { get; private set; } = null!;


        /// <summary>
        /// Create a JitRequest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public JitRequest(string name, JitRequestArgs args, CustomResourceOptions? options = null)
            : base("azure-nextgen:solutions/v20200821preview:JitRequest", name, args ?? new JitRequestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private JitRequest(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-nextgen:solutions/v20200821preview:JitRequest", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:solutions/latest:JitRequest"},
                    new Pulumi.Alias { Type = "azure-nextgen:solutions/v20190701:JitRequest"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing JitRequest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static JitRequest Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new JitRequest(name, id, options);
        }
    }

    public sealed class JitRequestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The parent application id.
        /// </summary>
        [Input("applicationResourceId", required: true)]
        public Input<string> ApplicationResourceId { get; set; } = null!;

        [Input("jitAuthorizationPolicies", required: true)]
        private InputList<Inputs.JitAuthorizationPoliciesArgs>? _jitAuthorizationPolicies;

        /// <summary>
        /// The JIT authorization policies.
        /// </summary>
        public InputList<Inputs.JitAuthorizationPoliciesArgs> JitAuthorizationPolicies
        {
            get => _jitAuthorizationPolicies ?? (_jitAuthorizationPolicies = new InputList<Inputs.JitAuthorizationPoliciesArgs>());
            set => _jitAuthorizationPolicies = value;
        }

        /// <summary>
        /// The name of the JIT request.
        /// </summary>
        [Input("jitRequestName", required: true)]
        public Input<string> JitRequestName { get; set; } = null!;

        /// <summary>
        /// The JIT request properties.
        /// </summary>
        [Input("jitSchedulingPolicy", required: true)]
        public Input<Inputs.JitSchedulingPolicyArgs> JitSchedulingPolicy { get; set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public JitRequestArgs()
        {
        }
    }
}
