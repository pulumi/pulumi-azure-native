// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Solutions.V20180601
{
    /// <summary>
    /// The managed application artifact type.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationArtifactType : IEquatable<ApplicationArtifactType>
    {
        private readonly string _value;

        private ApplicationArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationArtifactType Template { get; } = new ApplicationArtifactType("Template");
        public static ApplicationArtifactType Custom { get; } = new ApplicationArtifactType("Custom");

        public static bool operator ==(ApplicationArtifactType left, ApplicationArtifactType right) => left.Equals(right);
        public static bool operator !=(ApplicationArtifactType left, ApplicationArtifactType right) => !left.Equals(right);

        public static explicit operator string(ApplicationArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationArtifactType other && Equals(other);
        public bool Equals(ApplicationArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The managed application lock level.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationLockLevel : IEquatable<ApplicationLockLevel>
    {
        private readonly string _value;

        private ApplicationLockLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationLockLevel CanNotDelete { get; } = new ApplicationLockLevel("CanNotDelete");
        public static ApplicationLockLevel ReadOnly { get; } = new ApplicationLockLevel("ReadOnly");
        public static ApplicationLockLevel None { get; } = new ApplicationLockLevel("None");

        public static bool operator ==(ApplicationLockLevel left, ApplicationLockLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationLockLevel left, ApplicationLockLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationLockLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationLockLevel other && Equals(other);
        public bool Equals(ApplicationLockLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
