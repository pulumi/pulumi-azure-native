// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Management.V20201001
{
    public static class GetManagementGroupSubscription
    {
        /// <summary>
        /// The details of subscription under management group.
        /// </summary>
        public static Task<GetManagementGroupSubscriptionResult> InvokeAsync(GetManagementGroupSubscriptionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagementGroupSubscriptionResult>("azure-native:management/v20201001:getManagementGroupSubscription", args ?? new GetManagementGroupSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// The details of subscription under management group.
        /// </summary>
        public static Output<GetManagementGroupSubscriptionResult> Invoke(GetManagementGroupSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetManagementGroupSubscriptionResult>("azure-native:management/v20201001:getManagementGroupSubscription", args ?? new GetManagementGroupSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementGroupSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Management Group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// Subscription ID.
        /// </summary>
        [Input("subscriptionId")]
        public string? SubscriptionId { get; set; }

        public GetManagementGroupSubscriptionArgs()
        {
        }
        public static new GetManagementGroupSubscriptionArgs Empty => new GetManagementGroupSubscriptionArgs();
    }

    public sealed class GetManagementGroupSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Management Group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Subscription ID.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        public GetManagementGroupSubscriptionInvokeArgs()
        {
        }
        public static new GetManagementGroupSubscriptionInvokeArgs Empty => new GetManagementGroupSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementGroupSubscriptionResult
    {
        /// <summary>
        /// The friendly name of the subscription.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The fully qualified ID for the subscription.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/subscriptions/0000000-0000-0000-0000-000000000001
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The stringified id of the subscription. For example, 00000000-0000-0000-0000-000000000000
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID, name and displayName of the parent management group.
        /// </summary>
        public readonly Outputs.ParentGroupBagInfoResponse? Parent;
        /// <summary>
        /// The state of the subscription.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The AAD Tenant ID associated with the subscription. For example, 00000000-0000-0000-0000-000000000000
        /// </summary>
        public readonly string? Tenant;
        /// <summary>
        /// The type of the resource.  For example, Microsoft.Management/managementGroups/subscriptions
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagementGroupSubscriptionResult(
            string? displayName,

            string id,

            string name,

            Outputs.ParentGroupBagInfoResponse? parent,

            string? state,

            string? tenant,

            string type)
        {
            DisplayName = displayName;
            Id = id;
            Name = name;
            Parent = parent;
            State = state;
            Tenant = tenant;
            Type = type;
        }
    }
}
