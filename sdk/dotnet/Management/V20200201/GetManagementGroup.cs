// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Management.V20200201
{
    [Obsolete(@"Version 2020-02-01 will be removed in v2 of the provider.")]
    public static class GetManagementGroup
    {
        /// <summary>
        /// Get the details of the management group.
        /// </summary>
        public static Task<GetManagementGroupResult> InvokeAsync(GetManagementGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementGroupResult>("azure-native:management/v20200201:getManagementGroup", args ?? new GetManagementGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Get the details of the management group.
        /// </summary>
        public static Output<GetManagementGroupResult> Invoke(GetManagementGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementGroupResult>("azure-native:management/v20200201:getManagementGroup", args ?? new GetManagementGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// Management Group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
        /// </summary>
        [Input("recurse")]
        public bool? Recurse { get; set; }

        public GetManagementGroupArgs()
        {
        }
        public static new GetManagementGroupArgs Empty => new GetManagementGroupArgs();
    }

    public sealed class GetManagementGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Management Group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
        /// </summary>
        [Input("recurse")]
        public Input<bool>? Recurse { get; set; }

        public GetManagementGroupInvokeArgs()
        {
        }
        public static new GetManagementGroupInvokeArgs Empty => new GetManagementGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementGroupResult
    {
        /// <summary>
        /// The list of children.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagementGroupChildInfoResponse> Children;
        /// <summary>
        /// The details of a management group.
        /// </summary>
        public readonly Outputs.ManagementGroupDetailsResponse? Details;
        /// <summary>
        /// The friendly name of the management group.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The fully qualified ID for the management group.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the management group. For example, 00000000-0000-0000-0000-000000000000
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path from the root to the current group.
        /// </summary>
        public readonly ImmutableArray<Outputs.ManagementGroupPathElementResponse> Path;
        /// <summary>
        /// The role definitions associated with the management group.
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
        /// </summary>
        public readonly string? TenantId;
        /// <summary>
        /// The type of the resource.  For example, Microsoft.Management/managementGroups
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetManagementGroupResult(
            ImmutableArray<Outputs.ManagementGroupChildInfoResponse> children,

            Outputs.ManagementGroupDetailsResponse? details,

            string? displayName,

            string id,

            string name,

            ImmutableArray<Outputs.ManagementGroupPathElementResponse> path,

            ImmutableArray<string> roles,

            string? tenantId,

            string type)
        {
            Children = children;
            Details = details;
            DisplayName = displayName;
            Id = id;
            Name = name;
            Path = path;
            Roles = roles;
            TenantId = tenantId;
            Type = type;
        }
    }
}
