// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Management.V20180301Preview
{
    public static class GetEntity
    {
        public static Task<GetEntityResult> InvokeAsync(GetEntityArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEntityResult>("azure-nextgen:management/v20180301preview:getEntity", args ?? new GetEntityArgs(), options.WithVersion());
    }


    public sealed class GetEntityArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The filter parameter allows you to filter on the name or display name fields. You can check for equality on the name field (e.g. name eq '{entityName}')  and you can check for substrings on either the name or display name fields(e.g. contains(name, '{substringToSearch}'), contains(displayName, '{substringToSearch')). Note that the '{entityName}' and '{substringToSearch}' fields are checked case insensitively.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// A filter which allows the get entities call to focus on a particular group (i.e. "$filter=name eq 'groupName'")
        /// </summary>
        [Input("groupName")]
        public string? GroupName { get; set; }

        /// <summary>
        /// The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in. With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user's permissions. With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity. With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
        /// </summary>
        [Input("search")]
        public string? Search { get; set; }

        /// <summary>
        /// This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When specified the $select parameter can override select in $skipToken.
        /// </summary>
        [Input("select")]
        public string? Select { get; set; }

        /// <summary>
        /// Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
        /// </summary>
        [Input("skip")]
        public int? Skip { get; set; }

        /// <summary>
        /// Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        /// </summary>
        [Input("skiptoken")]
        public string? Skiptoken { get; set; }

        /// <summary>
        /// Number of elements to return when retrieving results. Passing this in will override $skipToken.
        /// </summary>
        [Input("top")]
        public int? Top { get; set; }

        /// <summary>
        /// The view parameter allows clients to filter the type of data that is returned by the getEntities call.
        /// </summary>
        [Input("view")]
        public string? View { get; set; }

        public GetEntityArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEntityResult
    {
        /// <summary>
        /// Total count of records that match the filter
        /// </summary>
        public readonly int Count;
        /// <summary>
        /// The URL to use for getting the next set of results.
        /// </summary>
        public readonly string NextLink;
        /// <summary>
        /// The list of entities.
        /// </summary>
        public readonly ImmutableArray<Outputs.EntityInfoResponseResult> Value;

        [OutputConstructor]
        private GetEntityResult(
            int count,

            string nextLink,

            ImmutableArray<Outputs.EntityInfoResponseResult> value)
        {
            Count = count;
            NextLink = nextLink;
            Value = value;
        }
    }
}
