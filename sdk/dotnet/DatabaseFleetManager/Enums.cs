// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DatabaseFleetManager
{
    /// <summary>
    /// Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time (source database name and restore from time must be specified)
    /// </summary>
    [EnumType]
    public readonly struct DatabaseCreateMode : IEquatable<DatabaseCreateMode>
    {
        private readonly string _value;

        private DatabaseCreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Create a database.
        /// </summary>
        public static DatabaseCreateMode Default { get; } = new DatabaseCreateMode("Default");
        /// <summary>
        /// Copy the source database (source database name must be specified).
        /// </summary>
        public static DatabaseCreateMode Copy { get; } = new DatabaseCreateMode("Copy");
        /// <summary>
        /// Create a database by restoring source database from a point in time (source database name and restore from time must be specified).
        /// </summary>
        public static DatabaseCreateMode PointInTimeRestore { get; } = new DatabaseCreateMode("PointInTimeRestore");

        public static bool operator ==(DatabaseCreateMode left, DatabaseCreateMode right) => left.Equals(right);
        public static bool operator !=(DatabaseCreateMode left, DatabaseCreateMode right) => !left.Equals(right);

        public static explicit operator string(DatabaseCreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatabaseCreateMode other && Equals(other);
        public bool Equals(DatabaseCreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Identity type of the main principal.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No identity.
        /// </summary>
        public static IdentityType None { get; } = new IdentityType("None");
        /// <summary>
        /// User assigned identity.
        /// </summary>
        public static IdentityType UserAssigned { get; } = new IdentityType("UserAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Principal type of the main principal.
    /// </summary>
    [EnumType]
    public readonly struct PrincipalType : IEquatable<PrincipalType>
    {
        private readonly string _value;

        private PrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Application principal type.
        /// </summary>
        public static PrincipalType Application { get; } = new PrincipalType("Application");
        /// <summary>
        /// User principal type.
        /// </summary>
        public static PrincipalType User { get; } = new PrincipalType("User");

        public static bool operator ==(PrincipalType left, PrincipalType right) => left.Equals(right);
        public static bool operator !=(PrincipalType left, PrincipalType right) => !left.Equals(right);

        public static explicit operator string(PrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalType other && Equals(other);
        public bool Equals(PrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enable zone redundancy for all databases in this tier.
    /// </summary>
    [EnumType]
    public readonly struct ZoneRedundancy : IEquatable<ZoneRedundancy>
    {
        private readonly string _value;

        private ZoneRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Zone redundancy enabled.
        /// </summary>
        public static ZoneRedundancy Enabled { get; } = new ZoneRedundancy("Enabled");
        /// <summary>
        /// Zone redundancy disabled.
        /// </summary>
        public static ZoneRedundancy Disabled { get; } = new ZoneRedundancy("Disabled");

        public static bool operator ==(ZoneRedundancy left, ZoneRedundancy right) => left.Equals(right);
        public static bool operator !=(ZoneRedundancy left, ZoneRedundancy right) => !left.Equals(right);

        public static explicit operator string(ZoneRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ZoneRedundancy other && Equals(other);
        public bool Equals(ZoneRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
