// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DatabaseFleetManager.Inputs
{

    /// <summary>
    /// Fleet database properties.
    /// </summary>
    public sealed class FleetDatabasePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Database collation.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time (source database name and restore from time must be specified)
        /// </summary>
        [Input("createMode")]
        public InputUnion<string, Pulumi.AzureNative.DatabaseFleetManager.DatabaseCreateMode>? CreateMode { get; set; }

        /// <summary>
        /// Identity property.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.IdentityArgs>? Identity { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// Additional database properties to be applied as the underlying database resource tags.
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        /// <summary>
        /// Restore from time when CreateMode is PointInTimeRestore.
        /// </summary>
        [Input("restoreFromTime")]
        public Input<string>? RestoreFromTime { get; set; }

        /// <summary>
        /// Source database name used when CreateMode is Copy or PointInTimeRestore.
        /// </summary>
        [Input("sourceDatabaseName")]
        public Input<string>? SourceDatabaseName { get; set; }

        /// <summary>
        /// Name of the tier this database belongs to.
        /// </summary>
        [Input("tierName")]
        public Input<string>? TierName { get; set; }

        /// <summary>
        /// Transparent Data Encryption properties
        /// </summary>
        [Input("transparentDataEncryption")]
        public Input<Inputs.TransparentDataEncryptionArgs>? TransparentDataEncryption { get; set; }

        public FleetDatabasePropertiesArgs()
        {
        }
        public static new FleetDatabasePropertiesArgs Empty => new FleetDatabasePropertiesArgs();
    }
}
