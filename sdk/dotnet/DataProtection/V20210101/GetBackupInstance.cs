// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataProtection.V20210101
{
    public static class GetBackupInstance
    {
        /// <summary>
        /// BackupInstance Resource
        /// </summary>
        public static Task<GetBackupInstanceResult> InvokeAsync(GetBackupInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackupInstanceResult>("azure-native:dataprotection/v20210101:getBackupInstance", args ?? new GetBackupInstanceArgs(), options.WithVersion());
    }


    public sealed class GetBackupInstanceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the backup instance
        /// </summary>
        [Input("backupInstanceName", required: true)]
        public string BackupInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the backup vault is present.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the backup vault.
        /// </summary>
        [Input("vaultName", required: true)]
        public string VaultName { get; set; } = null!;

        public GetBackupInstanceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBackupInstanceResult
    {
        /// <summary>
        /// Specifies the current protection state of the resource
        /// </summary>
        public readonly string CurrentProtectionState;
        /// <summary>
        /// Gets or sets the data source information.
        /// </summary>
        public readonly Outputs.DatasourceResponse DataSourceInfo;
        /// <summary>
        /// Gets or sets the data source set information.
        /// </summary>
        public readonly Outputs.DatasourceSetResponse? DataSourceSetInfo;
        /// <summary>
        /// Gets or sets the Backup Instance friendly name.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// Resource Id represents the complete path to the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource name associated with the resource.
        /// </summary>
        public readonly string Name;
        public readonly string ObjectType;
        /// <summary>
        /// Gets or sets the policy information.
        /// </summary>
        public readonly Outputs.PolicyInfoResponse PolicyInfo;
        /// <summary>
        /// Specifies the protection error of the resource
        /// </summary>
        public readonly Outputs.UserFacingErrorResponse ProtectionErrorDetails;
        /// <summary>
        /// Specifies the protection status of the resource
        /// </summary>
        public readonly Outputs.ProtectionStatusDetailsResponse ProtectionStatus;
        /// <summary>
        /// Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Metadata pertaining to creation and last modification of the resource.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBackupInstanceResult(
            string currentProtectionState,

            Outputs.DatasourceResponse dataSourceInfo,

            Outputs.DatasourceSetResponse? dataSourceSetInfo,

            string friendlyName,

            string id,

            string name,

            string objectType,

            Outputs.PolicyInfoResponse policyInfo,

            Outputs.UserFacingErrorResponse protectionErrorDetails,

            Outputs.ProtectionStatusDetailsResponse protectionStatus,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            CurrentProtectionState = currentProtectionState;
            DataSourceInfo = dataSourceInfo;
            DataSourceSetInfo = dataSourceSetInfo;
            FriendlyName = friendlyName;
            Id = id;
            Name = name;
            ObjectType = objectType;
            PolicyInfo = policyInfo;
            ProtectionErrorDetails = protectionErrorDetails;
            ProtectionStatus = protectionStatus;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
        }
    }
}
