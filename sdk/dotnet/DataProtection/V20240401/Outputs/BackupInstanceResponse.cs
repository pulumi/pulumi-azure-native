// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataProtection.V20240401.Outputs
{

    /// <summary>
    /// Backup Instance
    /// </summary>
    [OutputType]
    public sealed class BackupInstanceResponse
    {
        /// <summary>
        /// Specifies the current protection state of the resource
        /// </summary>
        public readonly string CurrentProtectionState;
        /// <summary>
        /// Gets or sets the data source information.
        /// </summary>
        public readonly Outputs.DatasourceResponse DataSourceInfo;
        /// <summary>
        /// Gets or sets the data source set information.
        /// </summary>
        public readonly Outputs.DatasourceSetResponse? DataSourceSetInfo;
        /// <summary>
        /// Credentials to use to authenticate with data source provider.
        /// </summary>
        public readonly Outputs.SecretStoreBasedAuthCredentialsResponse? DatasourceAuthCredentials;
        /// <summary>
        /// Gets or sets the Backup Instance friendly name.
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// Contains information of the Identity Details for the BI.
        /// If it is null, default will be considered as System Assigned.
        /// </summary>
        public readonly Outputs.IdentityDetailsResponse? IdentityDetails;
        public readonly string ObjectType;
        /// <summary>
        /// Gets or sets the policy information.
        /// </summary>
        public readonly Outputs.PolicyInfoResponse PolicyInfo;
        /// <summary>
        /// Specifies the protection error of the resource
        /// </summary>
        public readonly Outputs.UserFacingErrorResponse ProtectionErrorDetails;
        /// <summary>
        /// Specifies the protection status of the resource
        /// </summary>
        public readonly Outputs.ProtectionStatusDetailsResponse ProtectionStatus;
        /// <summary>
        /// Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// ResourceGuardOperationRequests on which LAC check will be performed
        /// </summary>
        public readonly ImmutableArray<string> ResourceGuardOperationRequests;
        /// <summary>
        /// Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again.
        /// </summary>
        public readonly string? ValidationType;

        [OutputConstructor]
        private BackupInstanceResponse(
            string currentProtectionState,

            Outputs.DatasourceResponse dataSourceInfo,

            Outputs.DatasourceSetResponse? dataSourceSetInfo,

            Outputs.SecretStoreBasedAuthCredentialsResponse? datasourceAuthCredentials,

            string? friendlyName,

            Outputs.IdentityDetailsResponse? identityDetails,

            string objectType,

            Outputs.PolicyInfoResponse policyInfo,

            Outputs.UserFacingErrorResponse protectionErrorDetails,

            Outputs.ProtectionStatusDetailsResponse protectionStatus,

            string provisioningState,

            ImmutableArray<string> resourceGuardOperationRequests,

            string? validationType)
        {
            CurrentProtectionState = currentProtectionState;
            DataSourceInfo = dataSourceInfo;
            DataSourceSetInfo = dataSourceSetInfo;
            DatasourceAuthCredentials = datasourceAuthCredentials;
            FriendlyName = friendlyName;
            IdentityDetails = identityDetails;
            ObjectType = objectType;
            PolicyInfo = policyInfo;
            ProtectionErrorDetails = protectionErrorDetails;
            ProtectionStatus = protectionStatus;
            ProvisioningState = provisioningState;
            ResourceGuardOperationRequests = resourceGuardOperationRequests;
            ValidationType = validationType;
        }
    }
}
