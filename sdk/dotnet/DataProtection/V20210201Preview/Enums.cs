// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DataProtection.V20210201Preview
{
    /// <summary>
    /// type of datastore; Operational/Vault/Archive
    /// </summary>
    [EnumType]
    public readonly struct DataStoreTypes : IEquatable<DataStoreTypes>
    {
        private readonly string _value;

        private DataStoreTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataStoreTypes OperationalStore { get; } = new DataStoreTypes("OperationalStore");
        public static DataStoreTypes VaultStore { get; } = new DataStoreTypes("VaultStore");
        public static DataStoreTypes ArchiveStore { get; } = new DataStoreTypes("ArchiveStore");

        public static bool operator ==(DataStoreTypes left, DataStoreTypes right) => left.Equals(right);
        public static bool operator !=(DataStoreTypes left, DataStoreTypes right) => !left.Equals(right);

        public static explicit operator string(DataStoreTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataStoreTypes other && Equals(other);
        public bool Equals(DataStoreTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the type of the datastore.
    /// </summary>
    [EnumType]
    public readonly struct StorageSettingStoreTypes : IEquatable<StorageSettingStoreTypes>
    {
        private readonly string _value;

        private StorageSettingStoreTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageSettingStoreTypes ArchiveStore { get; } = new StorageSettingStoreTypes("ArchiveStore");
        public static StorageSettingStoreTypes SnapshotStore { get; } = new StorageSettingStoreTypes("SnapshotStore");
        public static StorageSettingStoreTypes VaultStore { get; } = new StorageSettingStoreTypes("VaultStore");

        public static bool operator ==(StorageSettingStoreTypes left, StorageSettingStoreTypes right) => left.Equals(right);
        public static bool operator !=(StorageSettingStoreTypes left, StorageSettingStoreTypes right) => !left.Equals(right);

        public static explicit operator string(StorageSettingStoreTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageSettingStoreTypes other && Equals(other);
        public bool Equals(StorageSettingStoreTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the type.
    /// </summary>
    [EnumType]
    public readonly struct StorageSettingTypes : IEquatable<StorageSettingTypes>
    {
        private readonly string _value;

        private StorageSettingTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageSettingTypes GeoRedundant { get; } = new StorageSettingTypes("GeoRedundant");
        public static StorageSettingTypes LocallyRedundant { get; } = new StorageSettingTypes("LocallyRedundant");

        public static bool operator ==(StorageSettingTypes left, StorageSettingTypes right) => left.Equals(right);
        public static bool operator !=(StorageSettingTypes left, StorageSettingTypes right) => !left.Equals(right);

        public static explicit operator string(StorageSettingTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageSettingTypes other && Equals(other);
        public bool Equals(StorageSettingTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
