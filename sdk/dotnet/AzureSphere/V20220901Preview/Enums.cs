// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.AzureSphere.V20220901Preview
{
    /// <summary>
    /// Flag to define if the user allows for crash dump collection.
    /// </summary>
    [EnumType]
    public readonly struct AllowCrashDumpCollection : IEquatable<AllowCrashDumpCollection>
    {
        private readonly string _value;

        private AllowCrashDumpCollection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Crash dump collection enabled
        /// </summary>
        public static AllowCrashDumpCollection Enabled { get; } = new AllowCrashDumpCollection("Enabled");
        /// <summary>
        /// Crash dump collection disabled
        /// </summary>
        public static AllowCrashDumpCollection Disabled { get; } = new AllowCrashDumpCollection("Disabled");

        public static bool operator ==(AllowCrashDumpCollection left, AllowCrashDumpCollection right) => left.Equals(right);
        public static bool operator !=(AllowCrashDumpCollection left, AllowCrashDumpCollection right) => !left.Equals(right);

        public static explicit operator string(AllowCrashDumpCollection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowCrashDumpCollection other && Equals(other);
        public bool Equals(AllowCrashDumpCollection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Operating system feed type of the device group.
    /// </summary>
    [EnumType]
    public readonly struct OSFeedType : IEquatable<OSFeedType>
    {
        private readonly string _value;

        private OSFeedType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Retail OS feed type.
        /// </summary>
        public static OSFeedType Retail { get; } = new OSFeedType("Retail");
        /// <summary>
        /// Retail evaluation OS feed type.
        /// </summary>
        public static OSFeedType RetailEval { get; } = new OSFeedType("RetailEval");

        public static bool operator ==(OSFeedType left, OSFeedType right) => left.Equals(right);
        public static bool operator !=(OSFeedType left, OSFeedType right) => !left.Equals(right);

        public static explicit operator string(OSFeedType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OSFeedType other && Equals(other);
        public bool Equals(OSFeedType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Regional data boundary for an image
    /// </summary>
    [EnumType]
    public readonly struct RegionalDataBoundary : IEquatable<RegionalDataBoundary>
    {
        private readonly string _value;

        private RegionalDataBoundary(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// No data boundary
        /// </summary>
        public static RegionalDataBoundary None { get; } = new RegionalDataBoundary("None");
        /// <summary>
        /// EU data boundary
        /// </summary>
        public static RegionalDataBoundary EU { get; } = new RegionalDataBoundary("EU");

        public static bool operator ==(RegionalDataBoundary left, RegionalDataBoundary right) => left.Equals(right);
        public static bool operator !=(RegionalDataBoundary left, RegionalDataBoundary right) => !left.Equals(right);

        public static explicit operator string(RegionalDataBoundary value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegionalDataBoundary other && Equals(other);
        public bool Equals(RegionalDataBoundary other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Update policy of the device group.
    /// </summary>
    [EnumType]
    public readonly struct UpdatePolicy : IEquatable<UpdatePolicy>
    {
        private readonly string _value;

        private UpdatePolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Update all policy.
        /// </summary>
        public static UpdatePolicy UpdateAll { get; } = new UpdatePolicy("UpdateAll");
        /// <summary>
        /// No update for 3rd party app policy.
        /// </summary>
        public static UpdatePolicy No3rdPartyAppUpdates { get; } = new UpdatePolicy("No3rdPartyAppUpdates");

        public static bool operator ==(UpdatePolicy left, UpdatePolicy right) => left.Equals(right);
        public static bool operator !=(UpdatePolicy left, UpdatePolicy right) => !left.Equals(right);

        public static explicit operator string(UpdatePolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UpdatePolicy other && Equals(other);
        public bool Equals(UpdatePolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
