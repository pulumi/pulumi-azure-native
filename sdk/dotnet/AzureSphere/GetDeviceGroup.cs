// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.AzureSphere
{
    public static class GetDeviceGroup
    {
        /// <summary>
        /// Get a DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be used for product or device group name.
        /// API Version: 2022-09-01-preview.
        /// </summary>
        public static Task<GetDeviceGroupResult> InvokeAsync(GetDeviceGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceGroupResult>("azure-native:azuresphere:getDeviceGroup", args ?? new GetDeviceGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Get a DeviceGroup. '.default' and '.unassigned' are system defined values and cannot be used for product or device group name.
        /// API Version: 2022-09-01-preview.
        /// </summary>
        public static Output<GetDeviceGroupResult> Invoke(GetDeviceGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceGroupResult>("azure-native:azuresphere:getDeviceGroup", args ?? new GetDeviceGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of catalog
        /// </summary>
        [Input("catalogName", required: true)]
        public string CatalogName { get; set; } = null!;

        /// <summary>
        /// Name of device group.
        /// </summary>
        [Input("deviceGroupName", required: true)]
        public string DeviceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of product.
        /// </summary>
        [Input("productName", required: true)]
        public string ProductName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDeviceGroupArgs()
        {
        }
        public static new GetDeviceGroupArgs Empty => new GetDeviceGroupArgs();
    }

    public sealed class GetDeviceGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of catalog
        /// </summary>
        [Input("catalogName", required: true)]
        public Input<string> CatalogName { get; set; } = null!;

        /// <summary>
        /// Name of device group.
        /// </summary>
        [Input("deviceGroupName", required: true)]
        public Input<string> DeviceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of product.
        /// </summary>
        [Input("productName", required: true)]
        public Input<string> ProductName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDeviceGroupInvokeArgs()
        {
        }
        public static new GetDeviceGroupInvokeArgs Empty => new GetDeviceGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceGroupResult
    {
        /// <summary>
        /// Flag to define if the user allows for crash dump collection.
        /// </summary>
        public readonly string? AllowCrashDumpsCollection;
        /// <summary>
        /// Description of the device group.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Deployment status for the device group.
        /// </summary>
        public readonly bool HasDeployment;
        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Operating system feed type of the device group.
        /// </summary>
        public readonly string? OsFeedType;
        /// <summary>
        /// The status of the last operation.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Regional data boundary for the device group.
        /// </summary>
        public readonly string? RegionalDataBoundary;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Update policy of the device group.
        /// </summary>
        public readonly string? UpdatePolicy;

        [OutputConstructor]
        private GetDeviceGroupResult(
            string? allowCrashDumpsCollection,

            string? description,

            bool hasDeployment,

            string id,

            string name,

            string? osFeedType,

            string provisioningState,

            string? regionalDataBoundary,

            Outputs.SystemDataResponse systemData,

            string type,

            string? updatePolicy)
        {
            AllowCrashDumpsCollection = allowCrashDumpsCollection;
            Description = description;
            HasDeployment = hasDeployment;
            Id = id;
            Name = name;
            OsFeedType = osFeedType;
            ProvisioningState = provisioningState;
            RegionalDataBoundary = regionalDataBoundary;
            SystemData = systemData;
            Type = type;
            UpdatePolicy = updatePolicy;
        }
    }
}
