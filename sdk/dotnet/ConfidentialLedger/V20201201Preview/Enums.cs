// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ConfidentialLedger.V20201201Preview
{
    /// <summary>
    /// LedgerRole associated with the Security Principal of Ledger
    /// </summary>
    [EnumType]
    public readonly struct LedgerRoleName : IEquatable<LedgerRoleName>
    {
        private readonly string _value;

        private LedgerRoleName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LedgerRoleName Reader { get; } = new LedgerRoleName("Reader");
        public static LedgerRoleName Contributor { get; } = new LedgerRoleName("Contributor");
        public static LedgerRoleName Administrator { get; } = new LedgerRoleName("Administrator");

        public static bool operator ==(LedgerRoleName left, LedgerRoleName right) => left.Equals(right);
        public static bool operator !=(LedgerRoleName left, LedgerRoleName right) => !left.Equals(right);

        public static explicit operator string(LedgerRoleName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LedgerRoleName other && Equals(other);
        public bool Equals(LedgerRoleName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Confidential Ledger
    /// </summary>
    [EnumType]
    public readonly struct LedgerType : IEquatable<LedgerType>
    {
        private readonly string _value;

        private LedgerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LedgerType Unknown { get; } = new LedgerType("Unknown");
        public static LedgerType Public { get; } = new LedgerType("Public");
        public static LedgerType Private { get; } = new LedgerType("Private");

        public static bool operator ==(LedgerType left, LedgerType right) => left.Equals(right);
        public static bool operator !=(LedgerType left, LedgerType right) => !left.Equals(right);

        public static explicit operator string(LedgerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LedgerType other && Equals(other);
        public bool Equals(LedgerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
