// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataBoxEdge.V20210201
{
    public static class GetKubernetesRole
    {
        /// <summary>
        /// The limited preview of Kubernetes Cluster Management from the Azure supports:
        /// 1. Using a simple turn-key option in Azure Portal, deploy a Kubernetes cluster on your Azure Stack Edge device. 
        /// 2. Configure Kubernetes cluster running on your device with Arc enabled Kubernetes with a click of a button in the Azure Portal. 
        ///  Azure Arc enables organizations to view, manage, and govern their on-premises Kubernetes clusters using the Azure Portal, command line tools, and APIs.
        /// 3. Easily configure Persistent Volumes using SMB and NFS shares for storing container data. 
        ///  For more information, refer to the document here: https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8-Cloud-Management-20210323.pdf 
        ///  Or Demo: https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8S-Cloud-Management-20210323.mp4
        ///  By using this feature, you agree to the preview legal terms. See the https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/
        /// </summary>
        public static Task<GetKubernetesRoleResult> InvokeAsync(GetKubernetesRoleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesRoleResult>("azure-native:databoxedge/v20210201:getKubernetesRole", args ?? new GetKubernetesRoleArgs(), options.WithDefaults());

        /// <summary>
        /// The limited preview of Kubernetes Cluster Management from the Azure supports:
        /// 1. Using a simple turn-key option in Azure Portal, deploy a Kubernetes cluster on your Azure Stack Edge device. 
        /// 2. Configure Kubernetes cluster running on your device with Arc enabled Kubernetes with a click of a button in the Azure Portal. 
        ///  Azure Arc enables organizations to view, manage, and govern their on-premises Kubernetes clusters using the Azure Portal, command line tools, and APIs.
        /// 3. Easily configure Persistent Volumes using SMB and NFS shares for storing container data. 
        ///  For more information, refer to the document here: https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8-Cloud-Management-20210323.pdf 
        ///  Or Demo: https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8S-Cloud-Management-20210323.mp4
        ///  By using this feature, you agree to the preview legal terms. See the https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/
        /// </summary>
        public static Output<GetKubernetesRoleResult> Invoke(GetKubernetesRoleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKubernetesRoleResult>("azure-native:databoxedge/v20210201:getKubernetesRole", args ?? new GetKubernetesRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesRoleArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public string DeviceName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKubernetesRoleArgs()
        {
        }
    }

    public sealed class GetKubernetesRoleInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKubernetesRoleInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKubernetesRoleResult
    {
        /// <summary>
        /// Host OS supported by the Kubernetes role.
        /// </summary>
        public readonly string HostPlatform;
        /// <summary>
        /// Platform where the runtime is hosted.
        /// </summary>
        public readonly string HostPlatformType;
        /// <summary>
        /// The path ID that uniquely identifies the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Role type.
        /// Expected value is 'Kubernetes'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Kubernetes cluster configuration
        /// </summary>
        public readonly Outputs.KubernetesClusterInfoResponse KubernetesClusterInfo;
        /// <summary>
        /// Kubernetes role resources
        /// </summary>
        public readonly Outputs.KubernetesRoleResourcesResponse KubernetesRoleResources;
        /// <summary>
        /// The object name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// State of Kubernetes deployment
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Role status.
        /// </summary>
        public readonly string RoleStatus;
        /// <summary>
        /// Role configured on ASE resource
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The hierarchical type of the object.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetKubernetesRoleResult(
            string hostPlatform,

            string hostPlatformType,

            string id,

            string kind,

            Outputs.KubernetesClusterInfoResponse kubernetesClusterInfo,

            Outputs.KubernetesRoleResourcesResponse kubernetesRoleResources,

            string name,

            string provisioningState,

            string roleStatus,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            HostPlatform = hostPlatform;
            HostPlatformType = hostPlatformType;
            Id = id;
            Kind = kind;
            KubernetesClusterInfo = kubernetesClusterInfo;
            KubernetesRoleResources = kubernetesRoleResources;
            Name = name;
            ProvisioningState = provisioningState;
            RoleStatus = roleStatus;
            SystemData = systemData;
            Type = type;
        }
    }
}
