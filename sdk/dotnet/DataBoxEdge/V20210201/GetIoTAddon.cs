// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataBoxEdge.V20210201
{
    public static class GetIoTAddon
    {
        /// <summary>
        /// IoT Addon.
        /// </summary>
        public static Task<GetIoTAddonResult> InvokeAsync(GetIoTAddonArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIoTAddonResult>("azure-native:databoxedge/v20210201:getIoTAddon", args ?? new GetIoTAddonArgs(), options.WithDefaults());

        /// <summary>
        /// IoT Addon.
        /// </summary>
        public static Output<GetIoTAddonResult> Invoke(GetIoTAddonInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIoTAddonResult>("azure-native:databoxedge/v20210201:getIoTAddon", args ?? new GetIoTAddonInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIoTAddonArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The addon name.
        /// </summary>
        [Input("addonName", required: true)]
        public string AddonName { get; set; } = null!;

        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public string DeviceName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("roleName", required: true)]
        public string RoleName { get; set; } = null!;

        public GetIoTAddonArgs()
        {
        }
    }

    public sealed class GetIoTAddonInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The addon name.
        /// </summary>
        [Input("addonName", required: true)]
        public Input<string> AddonName { get; set; } = null!;

        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public GetIoTAddonInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIoTAddonResult
    {
        /// <summary>
        /// Host OS supported by the IoT addon.
        /// </summary>
        public readonly string HostPlatform;
        /// <summary>
        /// Platform where the runtime is hosted.
        /// </summary>
        public readonly string HostPlatformType;
        /// <summary>
        /// The path ID that uniquely identifies the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IoT device metadata to which appliance needs to be connected.
        /// </summary>
        public readonly Outputs.IoTDeviceInfoResponse IoTDeviceDetails;
        /// <summary>
        /// IoT edge device to which the IoT Addon needs to be configured.
        /// </summary>
        public readonly Outputs.IoTDeviceInfoResponse IoTEdgeDeviceDetails;
        /// <summary>
        /// Addon type.
        /// Expected value is 'IotEdge'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The object name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Addon Provisioning State
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Addon type
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The hierarchical type of the object.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of IoT running on the appliance.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetIoTAddonResult(
            string hostPlatform,

            string hostPlatformType,

            string id,

            Outputs.IoTDeviceInfoResponse ioTDeviceDetails,

            Outputs.IoTDeviceInfoResponse ioTEdgeDeviceDetails,

            string kind,

            string name,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            string type,

            string version)
        {
            HostPlatform = hostPlatform;
            HostPlatformType = hostPlatformType;
            Id = id;
            IoTDeviceDetails = ioTDeviceDetails;
            IoTEdgeDeviceDetails = ioTEdgeDeviceDetails;
            Kind = kind;
            Name = name;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Type = type;
            Version = version;
        }
    }
}
