// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataBoxEdge.V20220401Preview
{
    public static class GetIoTRole
    {
        /// <summary>
        /// Compute role.
        /// </summary>
        public static Task<GetIoTRoleResult> InvokeAsync(GetIoTRoleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIoTRoleResult>("azure-native:databoxedge/v20220401preview:getIoTRole", args ?? new GetIoTRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Compute role.
        /// </summary>
        public static Output<GetIoTRoleResult> Invoke(GetIoTRoleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIoTRoleResult>("azure-native:databoxedge/v20220401preview:getIoTRole", args ?? new GetIoTRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIoTRoleArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public string DeviceName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetIoTRoleArgs()
        {
        }
    }

    public sealed class GetIoTRoleInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetIoTRoleInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIoTRoleResult
    {
        /// <summary>
        /// Resource allocation
        /// </summary>
        public readonly Outputs.ComputeResourceResponse? ComputeResource;
        /// <summary>
        /// Host OS supported by the IoT role.
        /// </summary>
        public readonly string HostPlatform;
        /// <summary>
        /// Platform where the Iot runtime is hosted.
        /// </summary>
        public readonly string HostPlatformType;
        /// <summary>
        /// The path ID that uniquely identifies the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IoT device metadata to which data box edge device needs to be connected.
        /// </summary>
        public readonly Outputs.IoTDeviceInfoResponse IoTDeviceDetails;
        /// <summary>
        /// Iot edge agent details to download the agent and bootstrap iot runtime.
        /// </summary>
        public readonly Outputs.IoTEdgeAgentInfoResponse? IoTEdgeAgentInfo;
        /// <summary>
        /// IoT edge device to which the IoT role needs to be configured.
        /// </summary>
        public readonly Outputs.IoTDeviceInfoResponse IoTEdgeDeviceDetails;
        /// <summary>
        /// Role type.
        /// Expected value is 'IOT'.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The object name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Role status.
        /// </summary>
        public readonly string RoleStatus;
        /// <summary>
        /// Mount points of shares in role(s).
        /// </summary>
        public readonly ImmutableArray<Outputs.MountPointMapResponse> ShareMappings;
        /// <summary>
        /// Metadata pertaining to creation and last modification of Role
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The hierarchical type of the object.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetIoTRoleResult(
            Outputs.ComputeResourceResponse? computeResource,

            string hostPlatform,

            string hostPlatformType,

            string id,

            Outputs.IoTDeviceInfoResponse ioTDeviceDetails,

            Outputs.IoTEdgeAgentInfoResponse? ioTEdgeAgentInfo,

            Outputs.IoTDeviceInfoResponse ioTEdgeDeviceDetails,

            string kind,

            string name,

            string roleStatus,

            ImmutableArray<Outputs.MountPointMapResponse> shareMappings,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            ComputeResource = computeResource;
            HostPlatform = hostPlatform;
            HostPlatformType = hostPlatformType;
            Id = id;
            IoTDeviceDetails = ioTDeviceDetails;
            IoTEdgeAgentInfo = ioTEdgeAgentInfo;
            IoTEdgeDeviceDetails = ioTEdgeDeviceDetails;
            Kind = kind;
            Name = name;
            RoleStatus = roleStatus;
            ShareMappings = shareMappings;
            SystemData = systemData;
            Type = type;
        }
    }
}
