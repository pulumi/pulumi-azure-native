// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.DataBoxEdge.V20220401Preview
{
    /// <summary>
    /// DataResidencyType enum
    /// </summary>
    [EnumType]
    public readonly struct DataResidencyType : IEquatable<DataResidencyType>
    {
        private readonly string _value;

        private DataResidencyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataResidencyType GeoZoneReplication { get; } = new DataResidencyType("GeoZoneReplication");
        public static DataResidencyType ZoneReplication { get; } = new DataResidencyType("ZoneReplication");

        public static bool operator ==(DataResidencyType left, DataResidencyType right) => left.Equals(right);
        public static bool operator !=(DataResidencyType left, DataResidencyType right) => !left.Equals(right);

        public static explicit operator string(DataResidencyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataResidencyType other && Equals(other);
        public bool Equals(DataResidencyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// ShipmentType of the order
    /// </summary>
    [EnumType]
    public readonly struct ShipmentType : IEquatable<ShipmentType>
    {
        private readonly string _value;

        private ShipmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ShipmentType NotApplicable { get; } = new ShipmentType("NotApplicable");
        public static ShipmentType ShippedToCustomer { get; } = new ShipmentType("ShippedToCustomer");
        public static ShipmentType SelfPickup { get; } = new ShipmentType("SelfPickup");

        public static bool operator ==(ShipmentType left, ShipmentType right) => left.Equals(right);
        public static bool operator !=(ShipmentType left, ShipmentType right) => !left.Equals(right);

        public static explicit operator string(ShipmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ShipmentType other && Equals(other);
        public bool Equals(ShipmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// SKU name.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Gateway { get; } = new SkuName("Gateway");
        public static SkuName Edge { get; } = new SkuName("Edge");
        public static SkuName TEA_1Node { get; } = new SkuName("TEA_1Node");
        public static SkuName TEA_1Node_UPS { get; } = new SkuName("TEA_1Node_UPS");
        public static SkuName TEA_1Node_Heater { get; } = new SkuName("TEA_1Node_Heater");
        public static SkuName TEA_1Node_UPS_Heater { get; } = new SkuName("TEA_1Node_UPS_Heater");
        public static SkuName TEA_4Node_Heater { get; } = new SkuName("TEA_4Node_Heater");
        public static SkuName TEA_4Node_UPS_Heater { get; } = new SkuName("TEA_4Node_UPS_Heater");
        public static SkuName TMA { get; } = new SkuName("TMA");
        public static SkuName TDC { get; } = new SkuName("TDC");
        public static SkuName TCA_Small { get; } = new SkuName("TCA_Small");
        public static SkuName GPU { get; } = new SkuName("GPU");
        public static SkuName TCA_Large { get; } = new SkuName("TCA_Large");
        public static SkuName EdgeP_Base { get; } = new SkuName("EdgeP_Base");
        public static SkuName EdgeP_High { get; } = new SkuName("EdgeP_High");
        public static SkuName EdgePR_Base { get; } = new SkuName("EdgePR_Base");
        public static SkuName EdgePR_Base_UPS { get; } = new SkuName("EdgePR_Base_UPS");
        public static SkuName EP2_64_1VPU_W { get; } = new SkuName("EP2_64_1VPU_W");
        public static SkuName EP2_128_1T4_Mx1_W { get; } = new SkuName("EP2_128_1T4_Mx1_W");
        public static SkuName EP2_256_2T4_W { get; } = new SkuName("EP2_256_2T4_W");
        public static SkuName EdgeMR_Mini { get; } = new SkuName("EdgeMR_Mini");
        public static SkuName RCA_Small { get; } = new SkuName("RCA_Small");
        public static SkuName RCA_Large { get; } = new SkuName("RCA_Large");
        public static SkuName RDC { get; } = new SkuName("RDC");
        public static SkuName Management { get; } = new SkuName("Management");
        public static SkuName EP2_64_Mx1_W { get; } = new SkuName("EP2_64_Mx1_W");
        public static SkuName EP2_128_GPU1_Mx1_W { get; } = new SkuName("EP2_128_GPU1_Mx1_W");
        public static SkuName EP2_256_GPU2_Mx1 { get; } = new SkuName("EP2_256_GPU2_Mx1");
        public static SkuName EdgeMR_TCP { get; } = new SkuName("EdgeMR_TCP");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SKU tier. This is based on the SKU name.
    /// </summary>
    [EnumType]
    public readonly struct SkuTier : IEquatable<SkuTier>
    {
        private readonly string _value;

        private SkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuTier Standard { get; } = new SkuTier("Standard");

        public static bool operator ==(SkuTier left, SkuTier right) => left.Equals(right);
        public static bool operator !=(SkuTier left, SkuTier right) => !left.Equals(right);

        public static explicit operator string(SkuTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuTier other && Equals(other);
        public bool Equals(SkuTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
