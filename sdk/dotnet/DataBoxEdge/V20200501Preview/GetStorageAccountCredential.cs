// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataBoxEdge.V20200501Preview
{
    public static class GetStorageAccountCredential
    {
        public static Task<GetStorageAccountCredentialResult> InvokeAsync(GetStorageAccountCredentialArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStorageAccountCredentialResult>("azure-nextgen:databoxedge/v20200501preview:getStorageAccountCredential", args ?? new GetStorageAccountCredentialArgs(), options.WithVersion());
    }


    public sealed class GetStorageAccountCredentialArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The device name.
        /// </summary>
        [Input("deviceName", required: true)]
        public string DeviceName { get; set; } = null!;

        /// <summary>
        /// The storage account credential name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetStorageAccountCredentialArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStorageAccountCredentialResult
    {
        /// <summary>
        /// Encrypted storage key.
        /// </summary>
        public readonly Outputs.AsymmetricEncryptedSecretResponse? AccountKey;
        /// <summary>
        /// Type of storage accessed on the storage account.
        /// </summary>
        public readonly string AccountType;
        /// <summary>
        /// Alias for the storage account.
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// Blob end point for private clouds.
        /// </summary>
        public readonly string? BlobDomainName;
        /// <summary>
        /// Connection string for the storage account. Use this string if username and account key are not specified.
        /// </summary>
        public readonly string? ConnectionString;
        /// <summary>
        /// The object name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Signifies whether SSL needs to be enabled or not.
        /// </summary>
        public readonly string SslStatus;
        /// <summary>
        /// Id of the storage account.
        /// </summary>
        public readonly string? StorageAccountId;
        /// <summary>
        /// The hierarchical type of the object.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Username for the storage account.
        /// </summary>
        public readonly string? UserName;

        [OutputConstructor]
        private GetStorageAccountCredentialResult(
            Outputs.AsymmetricEncryptedSecretResponse? accountKey,

            string accountType,

            string alias,

            string? blobDomainName,

            string? connectionString,

            string name,

            string sslStatus,

            string? storageAccountId,

            string type,

            string? userName)
        {
            AccountKey = accountKey;
            AccountType = accountType;
            Alias = alias;
            BlobDomainName = blobDomainName;
            ConnectionString = connectionString;
            Name = name;
            SslStatus = sslStatus;
            StorageAccountId = storageAccountId;
            Type = type;
            UserName = userName;
        }
    }
}
