// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20160430Preview
{
    [Obsolete(@"Version 2016-04-30-preview will be removed in v2 of the provider.")]
    public static class GetDisk
    {
        /// <summary>
        /// Gets information about a disk.
        /// </summary>
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("azure-native:compute/v20160430preview:getDisk", args ?? new GetDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a disk.
        /// </summary>
        public static Output<GetDiskResult> Invoke(GetDiskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDiskResult>("azure-native:compute/v20160430preview:getDisk", args ?? new GetDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiskArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
        /// </summary>
        [Input("diskName", required: true)]
        public string DiskName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiskArgs()
        {
        }
        public static new GetDiskArgs Empty => new GetDiskArgs();
    }

    public sealed class GetDiskInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
        /// </summary>
        [Input("diskName", required: true)]
        public Input<string> DiskName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDiskInvokeArgs()
        {
        }
        public static new GetDiskInvokeArgs Empty => new GetDiskInvokeArgs();
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        /// <summary>
        /// the storage account type of the disk.
        /// </summary>
        public readonly string? AccountType;
        /// <summary>
        /// Disk source information. CreationData information cannot be changed after the disk has been created.
        /// </summary>
        public readonly Outputs.CreationDataResponse CreationData;
        /// <summary>
        /// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// Encryption settings for disk or snapshot
        /// </summary>
        public readonly Outputs.EncryptionSettingsResponse? EncryptionSettings;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Operating System type.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// A relative URI containing the VM id that has the disk attached.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The disk provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The time when the disk was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDiskResult(
            string? accountType,

            Outputs.CreationDataResponse creationData,

            int? diskSizeGB,

            Outputs.EncryptionSettingsResponse? encryptionSettings,

            string id,

            string location,

            string name,

            string? osType,

            string ownerId,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string timeCreated,

            string type)
        {
            AccountType = accountType;
            CreationData = creationData;
            DiskSizeGB = diskSizeGB;
            EncryptionSettings = encryptionSettings;
            Id = id;
            Location = location;
            Name = name;
            OsType = osType;
            OwnerId = ownerId;
            ProvisioningState = provisioningState;
            Tags = tags;
            TimeCreated = timeCreated;
            Type = type;
        }
    }
}
