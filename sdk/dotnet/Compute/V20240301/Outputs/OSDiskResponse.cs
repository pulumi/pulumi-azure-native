// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20240301.Outputs
{

    /// <summary>
    /// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
    /// </summary>
    [OutputType]
    public sealed class OSDiskResponse
    {
        /// <summary>
        /// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
        /// </summary>
        public readonly string? Caching;
        /// <summary>
        /// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
        /// </summary>
        public readonly string CreateOption;
        /// <summary>
        /// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
        /// </summary>
        public readonly string? DeleteOption;
        /// <summary>
        /// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
        /// </summary>
        public readonly Outputs.DiffDiskSettingsResponse? DiffDiskSettings;
        /// <summary>
        /// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
        /// </summary>
        public readonly Outputs.DiskEncryptionSettingsResponse? EncryptionSettings;
        /// <summary>
        /// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
        /// </summary>
        public readonly Outputs.VirtualHardDiskResponse? Image;
        /// <summary>
        /// The managed disk parameters.
        /// </summary>
        public readonly Outputs.ManagedDiskParametersResponse? ManagedDisk;
        /// <summary>
        /// The disk name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The virtual hard disk.
        /// </summary>
        public readonly Outputs.VirtualHardDiskResponse? Vhd;
        /// <summary>
        /// Specifies whether writeAccelerator should be enabled or disabled on the disk.
        /// </summary>
        public readonly bool? WriteAcceleratorEnabled;

        [OutputConstructor]
        private OSDiskResponse(
            string? caching,

            string createOption,

            string? deleteOption,

            Outputs.DiffDiskSettingsResponse? diffDiskSettings,

            int? diskSizeGB,

            Outputs.DiskEncryptionSettingsResponse? encryptionSettings,

            Outputs.VirtualHardDiskResponse? image,

            Outputs.ManagedDiskParametersResponse? managedDisk,

            string? name,

            string? osType,

            Outputs.VirtualHardDiskResponse? vhd,

            bool? writeAcceleratorEnabled)
        {
            Caching = caching;
            CreateOption = createOption;
            DeleteOption = deleteOption;
            DiffDiskSettings = diffDiskSettings;
            DiskSizeGB = diskSizeGB;
            EncryptionSettings = encryptionSettings;
            Image = image;
            ManagedDisk = managedDisk;
            Name = name;
            OsType = osType;
            Vhd = vhd;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
        }
    }
}
