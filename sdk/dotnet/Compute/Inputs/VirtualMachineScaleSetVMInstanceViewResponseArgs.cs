// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Compute.Inputs
{

    /// <summary>
    /// The instance view of a virtual machine scale set VM.
    /// </summary>
    public sealed class VirtualMachineScaleSetVMInstanceViewResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
        /// </summary>
        [Input("assignedHost", required: true)]
        public Input<string> AssignedHost { get; set; } = null!;

        /// <summary>
        /// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor.
        /// </summary>
        [Input("bootDiagnostics")]
        public Input<Inputs.BootDiagnosticsInstanceViewResponseArgs>? BootDiagnostics { get; set; }

        [Input("disks")]
        private InputList<Inputs.DiskInstanceViewResponseArgs>? _disks;

        /// <summary>
        /// The disks information.
        /// </summary>
        public InputList<Inputs.DiskInstanceViewResponseArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.DiskInstanceViewResponseArgs>());
            set => _disks = value;
        }

        [Input("extensions")]
        private InputList<Inputs.VirtualMachineExtensionInstanceViewResponseArgs>? _extensions;

        /// <summary>
        /// The extensions information.
        /// </summary>
        public InputList<Inputs.VirtualMachineExtensionInstanceViewResponseArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.VirtualMachineExtensionInstanceViewResponseArgs>());
            set => _extensions = value;
        }

        /// <summary>
        /// The Maintenance Operation status on the virtual machine.
        /// </summary>
        [Input("maintenanceRedeployStatus")]
        public Input<Inputs.MaintenanceRedeployStatusResponseArgs>? MaintenanceRedeployStatus { get; set; }

        /// <summary>
        /// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
        /// </summary>
        [Input("placementGroupId")]
        public Input<string>? PlacementGroupId { get; set; }

        /// <summary>
        /// The Fault Domain count.
        /// </summary>
        [Input("platformFaultDomain")]
        public Input<int>? PlatformFaultDomain { get; set; }

        /// <summary>
        /// The Update Domain count.
        /// </summary>
        [Input("platformUpdateDomain")]
        public Input<int>? PlatformUpdateDomain { get; set; }

        /// <summary>
        /// The Remote desktop certificate thumbprint.
        /// </summary>
        [Input("rdpThumbPrint")]
        public Input<string>? RdpThumbPrint { get; set; }

        [Input("statuses")]
        private InputList<Inputs.InstanceViewStatusResponseArgs>? _statuses;

        /// <summary>
        /// The resource status information.
        /// </summary>
        public InputList<Inputs.InstanceViewStatusResponseArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.InstanceViewStatusResponseArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The VM Agent running on the virtual machine.
        /// </summary>
        [Input("vmAgent")]
        public Input<Inputs.VirtualMachineAgentInstanceViewResponseArgs>? VmAgent { get; set; }

        /// <summary>
        /// The health status for the VM.
        /// </summary>
        [Input("vmHealth", required: true)]
        public Input<Inputs.VirtualMachineHealthStatusResponseArgs> VmHealth { get; set; } = null!;

        public VirtualMachineScaleSetVMInstanceViewResponseArgs()
        {
        }
    }
}
