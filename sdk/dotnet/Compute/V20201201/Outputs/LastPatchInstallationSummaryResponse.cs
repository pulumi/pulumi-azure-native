// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Compute.V20201201.Outputs
{

    [OutputType]
    public sealed class LastPatchInstallationSummaryResponse
    {
        /// <summary>
        /// The errors that were encountered during execution of the operation. The details array contains the list of them.
        /// </summary>
        public readonly Outputs.ApiErrorResponse Error;
        /// <summary>
        /// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
        /// </summary>
        public readonly int ExcludedPatchCount;
        /// <summary>
        /// The count of patches that failed installation.
        /// </summary>
        public readonly int FailedPatchCount;
        /// <summary>
        /// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
        /// </summary>
        public readonly string InstallationActivityId;
        /// <summary>
        /// The count of patches that successfully installed.
        /// </summary>
        public readonly int InstalledPatchCount;
        /// <summary>
        /// The UTC timestamp when the operation began.
        /// </summary>
        public readonly string LastModifiedTime;
        /// <summary>
        /// Describes whether the operation ran out of time before it completed all its intended actions
        /// </summary>
        public readonly bool MaintenanceWindowExceeded;
        /// <summary>
        /// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
        /// </summary>
        public readonly int NotSelectedPatchCount;
        /// <summary>
        /// The number of all available patches expected to be installed over the course of the patch installation operation.
        /// </summary>
        public readonly int PendingPatchCount;
        /// <summary>
        /// The UTC timestamp when the operation began.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private LastPatchInstallationSummaryResponse(
            Outputs.ApiErrorResponse error,

            int excludedPatchCount,

            int failedPatchCount,

            string installationActivityId,

            int installedPatchCount,

            string lastModifiedTime,

            bool maintenanceWindowExceeded,

            int notSelectedPatchCount,

            int pendingPatchCount,

            string startTime,

            string status)
        {
            Error = error;
            ExcludedPatchCount = excludedPatchCount;
            FailedPatchCount = failedPatchCount;
            InstallationActivityId = installationActivityId;
            InstalledPatchCount = installedPatchCount;
            LastModifiedTime = lastModifiedTime;
            MaintenanceWindowExceeded = maintenanceWindowExceeded;
            NotSelectedPatchCount = notSelectedPatchCount;
            PendingPatchCount = pendingPatchCount;
            StartTime = startTime;
            Status = status;
        }
    }
}
