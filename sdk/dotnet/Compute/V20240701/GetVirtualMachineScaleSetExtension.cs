// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20240701
{
    public static class GetVirtualMachineScaleSetExtension
    {
        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        public static Task<GetVirtualMachineScaleSetExtensionResult> InvokeAsync(GetVirtualMachineScaleSetExtensionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineScaleSetExtensionResult>("azure-native:compute/v20240701:getVirtualMachineScaleSetExtension", args ?? new GetVirtualMachineScaleSetExtensionArgs(), options.WithDefaults());

        /// <summary>
        /// The operation to get the extension.
        /// </summary>
        public static Output<GetVirtualMachineScaleSetExtensionResult> Invoke(GetVirtualMachineScaleSetExtensionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineScaleSetExtensionResult>("azure-native:compute/v20240701:getVirtualMachineScaleSetExtension", args ?? new GetVirtualMachineScaleSetExtensionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineScaleSetExtensionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set containing the extension.
        /// </summary>
        [Input("vmScaleSetName", required: true)]
        public string VmScaleSetName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set extension.
        /// </summary>
        [Input("vmssExtensionName", required: true)]
        public string VmssExtensionName { get; set; } = null!;

        public GetVirtualMachineScaleSetExtensionArgs()
        {
        }
        public static new GetVirtualMachineScaleSetExtensionArgs Empty => new GetVirtualMachineScaleSetExtensionArgs();
    }

    public sealed class GetVirtualMachineScaleSetExtensionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set containing the extension.
        /// </summary>
        [Input("vmScaleSetName", required: true)]
        public Input<string> VmScaleSetName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set extension.
        /// </summary>
        [Input("vmssExtensionName", required: true)]
        public Input<string> VmssExtensionName { get; set; } = null!;

        public GetVirtualMachineScaleSetExtensionInvokeArgs()
        {
        }
        public static new GetVirtualMachineScaleSetExtensionInvokeArgs Empty => new GetVirtualMachineScaleSetExtensionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineScaleSetExtensionResult
    {
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        public readonly bool? AutoUpgradeMinorVersion;
        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
        /// </summary>
        public readonly bool? EnableAutomaticUpgrade;
        /// <summary>
        /// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
        /// </summary>
        public readonly string? ForceUpdateTag;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the extension.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        public readonly object? ProtectedSettings;
        /// <summary>
        /// The extensions protected settings that are passed by reference, and consumed from key vault
        /// </summary>
        public readonly Outputs.KeyVaultSecretReferenceResponse? ProtectedSettingsFromKeyVault;
        /// <summary>
        /// Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        public readonly ImmutableArray<string> ProvisionAfterExtensions;
        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The name of the extension handler publisher.
        /// </summary>
        public readonly string? Publisher;
        /// <summary>
        /// Json formatted public settings for the extension.
        /// </summary>
        public readonly object? Settings;
        /// <summary>
        /// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
        /// </summary>
        public readonly bool? SuppressFailures;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies the version of the script handler.
        /// </summary>
        public readonly string? TypeHandlerVersion;

        [OutputConstructor]
        private GetVirtualMachineScaleSetExtensionResult(
            bool? autoUpgradeMinorVersion,

            bool? enableAutomaticUpgrade,

            string? forceUpdateTag,

            string id,

            string? name,

            object? protectedSettings,

            Outputs.KeyVaultSecretReferenceResponse? protectedSettingsFromKeyVault,

            ImmutableArray<string> provisionAfterExtensions,

            string provisioningState,

            string? publisher,

            object? settings,

            bool? suppressFailures,

            string type,

            string? typeHandlerVersion)
        {
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            EnableAutomaticUpgrade = enableAutomaticUpgrade;
            ForceUpdateTag = forceUpdateTag;
            Id = id;
            Name = name;
            ProtectedSettings = protectedSettings;
            ProtectedSettingsFromKeyVault = protectedSettingsFromKeyVault;
            ProvisionAfterExtensions = provisionAfterExtensions;
            ProvisioningState = provisioningState;
            Publisher = publisher;
            Settings = settings;
            SuppressFailures = suppressFailures;
            Type = type;
            TypeHandlerVersion = typeHandlerVersion;
        }
    }
}
