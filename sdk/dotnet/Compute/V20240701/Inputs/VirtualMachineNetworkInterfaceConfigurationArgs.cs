// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20240701.Inputs
{

    /// <summary>
    /// Describes a virtual machine network interface configurations.
    /// </summary>
    public sealed class VirtualMachineNetworkInterfaceConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
        /// </summary>
        [Input("auxiliaryMode")]
        public InputUnion<string, Pulumi.AzureNative.Compute.V20240701.NetworkInterfaceAuxiliaryMode>? AuxiliaryMode { get; set; }

        /// <summary>
        /// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
        /// </summary>
        [Input("auxiliarySku")]
        public InputUnion<string, Pulumi.AzureNative.Compute.V20240701.NetworkInterfaceAuxiliarySku>? AuxiliarySku { get; set; }

        /// <summary>
        /// Specify what happens to the network interface when the VM is deleted
        /// </summary>
        [Input("deleteOption")]
        public InputUnion<string, Pulumi.AzureNative.Compute.V20240701.DeleteOptions>? DeleteOption { get; set; }

        /// <summary>
        /// Specifies whether the network interface is disabled for tcp state tracking.
        /// </summary>
        [Input("disableTcpStateTracking")]
        public Input<bool>? DisableTcpStateTracking { get; set; }

        /// <summary>
        /// The dns settings to be applied on the network interfaces.
        /// </summary>
        [Input("dnsSettings")]
        public Input<Inputs.VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs>? DnsSettings { get; set; }

        [Input("dscpConfiguration")]
        public Input<Inputs.SubResourceArgs>? DscpConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the network interface is accelerated networking-enabled.
        /// </summary>
        [Input("enableAcceleratedNetworking")]
        public Input<bool>? EnableAcceleratedNetworking { get; set; }

        /// <summary>
        /// Specifies whether the network interface is FPGA networking-enabled.
        /// </summary>
        [Input("enableFpga")]
        public Input<bool>? EnableFpga { get; set; }

        /// <summary>
        /// Whether IP forwarding enabled on this NIC.
        /// </summary>
        [Input("enableIPForwarding")]
        public Input<bool>? EnableIPForwarding { get; set; }

        [Input("ipConfigurations", required: true)]
        private InputList<Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs>? _ipConfigurations;

        /// <summary>
        /// Specifies the IP configurations of the network interface.
        /// </summary>
        public InputList<Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.VirtualMachineNetworkInterfaceIPConfigurationArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The network interface configuration name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The network security group.
        /// </summary>
        [Input("networkSecurityGroup")]
        public Input<Inputs.SubResourceArgs>? NetworkSecurityGroup { get; set; }

        /// <summary>
        /// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
        /// </summary>
        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        public VirtualMachineNetworkInterfaceConfigurationArgs()
        {
        }
        public static new VirtualMachineNetworkInterfaceConfigurationArgs Empty => new VirtualMachineNetworkInterfaceConfigurationArgs();
    }
}
