// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Compute.Latest
{
    public static class GetSnapshot
    {
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("azure-nextgen:compute/latest:getSnapshot", args ?? new GetSnapshotArgs(), options.WithVersion());
    }


    public sealed class GetSnapshotArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the snapshot that is being created. The name can't be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
        /// </summary>
        [Input("snapshotName", required: true)]
        public string SnapshotName { get; set; } = null!;

        public GetSnapshotArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        /// <summary>
        /// Disk source information. CreationData information cannot be changed after the disk has been created.
        /// </summary>
        public readonly Outputs.CreationDataResponse CreationData;
        /// <summary>
        /// ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </summary>
        public readonly string? DiskAccessId;
        /// <summary>
        /// The size of the disk in bytes. This field is read only.
        /// </summary>
        public readonly int DiskSizeBytes;
        /// <summary>
        /// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// The state of the snapshot.
        /// </summary>
        public readonly string DiskState;
        /// <summary>
        /// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
        /// </summary>
        public readonly Outputs.EncryptionResponse? Encryption;
        /// <summary>
        /// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        public readonly Outputs.EncryptionSettingsCollectionResponse? EncryptionSettingsCollection;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
        /// </summary>
        public readonly bool? Incremental;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Unused. Always Null.
        /// </summary>
        public readonly string ManagedBy;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Policy for accessing the disk via network.
        /// </summary>
        public readonly string? NetworkAccessPolicy;
        /// <summary>
        /// The Operating System type.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The disk provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
        /// </summary>
        public readonly Outputs.SnapshotSkuResponse? Sku;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The time when the snapshot was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique Guid identifying the resource.
        /// </summary>
        public readonly string UniqueId;

        [OutputConstructor]
        private GetSnapshotResult(
            Outputs.CreationDataResponse creationData,

            string? diskAccessId,

            int diskSizeBytes,

            int? diskSizeGB,

            string diskState,

            Outputs.EncryptionResponse? encryption,

            Outputs.EncryptionSettingsCollectionResponse? encryptionSettingsCollection,

            string? hyperVGeneration,

            bool? incremental,

            string location,

            string managedBy,

            string name,

            string? networkAccessPolicy,

            string? osType,

            string provisioningState,

            Outputs.SnapshotSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string timeCreated,

            string type,

            string uniqueId)
        {
            CreationData = creationData;
            DiskAccessId = diskAccessId;
            DiskSizeBytes = diskSizeBytes;
            DiskSizeGB = diskSizeGB;
            DiskState = diskState;
            Encryption = encryption;
            EncryptionSettingsCollection = encryptionSettingsCollection;
            HyperVGeneration = hyperVGeneration;
            Incremental = incremental;
            Location = location;
            ManagedBy = managedBy;
            Name = name;
            NetworkAccessPolicy = networkAccessPolicy;
            OsType = osType;
            ProvisioningState = provisioningState;
            Sku = sku;
            Tags = tags;
            TimeCreated = timeCreated;
            Type = type;
            UniqueId = uniqueId;
        }
    }
}
