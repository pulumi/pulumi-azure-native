// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Compute.Outputs
{

    [OutputType]
    public sealed class SnapshotPropertiesResponseResult
    {
        /// <summary>
        /// Disk source information. CreationData information cannot be changed after the disk has been created.
        /// </summary>
        public readonly Outputs.CreationDataResponseResult CreationData;
        /// <summary>
        /// ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </summary>
        public readonly string? DiskAccessId;
        /// <summary>
        /// The size of the disk in bytes. This field is read only.
        /// </summary>
        public readonly int DiskSizeBytes;
        /// <summary>
        /// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
        /// </summary>
        public readonly Outputs.EncryptionResponseResult? Encryption;
        /// <summary>
        /// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        public readonly Outputs.EncryptionSettingsCollectionResponseResult? EncryptionSettingsCollection;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
        /// </summary>
        public readonly bool? Incremental;
        /// <summary>
        /// Policy for accessing the disk via network.
        /// </summary>
        public readonly string? NetworkAccessPolicy;
        /// <summary>
        /// The Operating System type.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The disk provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The time when the snapshot was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Unique Guid identifying the resource.
        /// </summary>
        public readonly string UniqueId;

        [OutputConstructor]
        private SnapshotPropertiesResponseResult(
            Outputs.CreationDataResponseResult creationData,

            string? diskAccessId,

            int diskSizeBytes,

            int? diskSizeGB,

            Outputs.EncryptionResponseResult? encryption,

            Outputs.EncryptionSettingsCollectionResponseResult? encryptionSettingsCollection,

            string? hyperVGeneration,

            bool? incremental,

            string? networkAccessPolicy,

            string? osType,

            string provisioningState,

            string timeCreated,

            string uniqueId)
        {
            CreationData = creationData;
            DiskAccessId = diskAccessId;
            DiskSizeBytes = diskSizeBytes;
            DiskSizeGB = diskSizeGB;
            Encryption = encryption;
            EncryptionSettingsCollection = encryptionSettingsCollection;
            HyperVGeneration = hyperVGeneration;
            Incremental = incremental;
            NetworkAccessPolicy = networkAccessPolicy;
            OsType = osType;
            ProvisioningState = provisioningState;
            TimeCreated = timeCreated;
            UniqueId = uniqueId;
        }
    }
}
