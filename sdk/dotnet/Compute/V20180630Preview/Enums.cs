// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.Compute.V20180630Preview
{
    /// <summary>
    /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
    /// </summary>
    [EnumType]
    public readonly struct AllowModuleOverwrite : IEquatable<AllowModuleOverwrite>
    {
        private readonly string _value;

        private AllowModuleOverwrite(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllowModuleOverwrite True { get; } = new AllowModuleOverwrite("True");
        public static AllowModuleOverwrite False { get; } = new AllowModuleOverwrite("False");

        public static bool operator ==(AllowModuleOverwrite left, AllowModuleOverwrite right) => left.Equals(right);
        public static bool operator !=(AllowModuleOverwrite left, AllowModuleOverwrite right) => !left.Equals(right);

        public static explicit operator string(AllowModuleOverwrite value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllowModuleOverwrite other && Equals(other);
        public bool Equals(AllowModuleOverwrite other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Kind of the guest configuration. For example:DSC
    /// </summary>
    [EnumType]
    public readonly struct Kind : IEquatable<Kind>
    {
        private readonly string _value;

        private Kind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Kind DSC { get; } = new Kind("DSC");

        public static bool operator ==(Kind left, Kind right) => left.Equals(right);
        public static bool operator !=(Kind left, Kind right) => !left.Equals(right);

        public static explicit operator string(Kind value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Kind other && Equals(other);
        public bool Equals(Kind other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
