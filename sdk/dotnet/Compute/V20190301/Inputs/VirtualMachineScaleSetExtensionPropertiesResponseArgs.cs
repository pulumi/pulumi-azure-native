// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Compute.V20190301.Inputs
{

    /// <summary>
    /// Describes the properties of a Virtual Machine Scale Set Extension.
    /// </summary>
    public sealed class VirtualMachineScaleSetExtensionPropertiesResponseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Input("autoUpgradeMinorVersion")]
        public bool? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
        /// </summary>
        [Input("forceUpdateTag")]
        public string? ForceUpdateTag { get; set; }

        [Input("protectedSettings")]
        private Dictionary<string, string>? _protectedSettings;

        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        public Dictionary<string, string> ProtectedSettings
        {
            get => _protectedSettings ?? (_protectedSettings = new Dictionary<string, string>());
            set => _protectedSettings = value;
        }

        [Input("provisionAfterExtensions")]
        private List<string>? _provisionAfterExtensions;

        /// <summary>
        /// Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        public List<string> ProvisionAfterExtensions
        {
            get => _provisionAfterExtensions ?? (_provisionAfterExtensions = new List<string>());
            set => _provisionAfterExtensions = value;
        }

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Input("provisioningState", required: true)]
        public string ProvisioningState { get; set; } = null!;

        /// <summary>
        /// The name of the extension handler publisher.
        /// </summary>
        [Input("publisher")]
        public string? Publisher { get; set; }

        [Input("settings")]
        private Dictionary<string, string>? _settings;

        /// <summary>
        /// Json formatted public settings for the extension.
        /// </summary>
        public Dictionary<string, string> Settings
        {
            get => _settings ?? (_settings = new Dictionary<string, string>());
            set => _settings = value;
        }

        /// <summary>
        /// Specifies the type of the extension; an example is "CustomScriptExtension".
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Specifies the version of the script handler.
        /// </summary>
        [Input("typeHandlerVersion")]
        public string? TypeHandlerVersion { get; set; }

        public VirtualMachineScaleSetExtensionPropertiesResponseArgs()
        {
        }
    }
}
