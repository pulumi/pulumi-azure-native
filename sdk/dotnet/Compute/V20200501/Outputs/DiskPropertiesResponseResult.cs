// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Compute.V20200501.Outputs
{

    [OutputType]
    public sealed class DiskPropertiesResponseResult
    {
        /// <summary>
        /// Disk source information. CreationData information cannot be changed after the disk has been created.
        /// </summary>
        public readonly Outputs.CreationDataResponseResult CreationData;
        /// <summary>
        /// ARM id of the DiskAccess resource for using private endpoints on disks.
        /// </summary>
        public readonly string? DiskAccessId;
        /// <summary>
        /// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int? DiskIOPSReadOnly;
        /// <summary>
        /// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
        /// </summary>
        public readonly int? DiskIOPSReadWrite;
        /// <summary>
        /// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
        /// </summary>
        public readonly int? DiskMBpsReadOnly;
        /// <summary>
        /// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
        /// </summary>
        public readonly int? DiskMBpsReadWrite;
        /// <summary>
        /// The size of the disk in bytes. This field is read only.
        /// </summary>
        public readonly int DiskSizeBytes;
        /// <summary>
        /// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// The state of the disk.
        /// </summary>
        public readonly string DiskState;
        /// <summary>
        /// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
        /// </summary>
        public readonly Outputs.EncryptionResponseResult? Encryption;
        /// <summary>
        /// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
        /// </summary>
        public readonly Outputs.EncryptionSettingsCollectionResponseResult? EncryptionSettingsCollection;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
        /// </summary>
        public readonly int? MaxShares;
        /// <summary>
        /// Policy for accessing the disk via network.
        /// </summary>
        public readonly string? NetworkAccessPolicy;
        /// <summary>
        /// The Operating System type.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The disk provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
        /// </summary>
        public readonly ImmutableArray<Outputs.ShareInfoElementResponseResult> ShareInfo;
        /// <summary>
        /// The time when the disk was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Unique Guid identifying the resource.
        /// </summary>
        public readonly string UniqueId;

        [OutputConstructor]
        private DiskPropertiesResponseResult(
            Outputs.CreationDataResponseResult creationData,

            string? diskAccessId,

            int? diskIOPSReadOnly,

            int? diskIOPSReadWrite,

            int? diskMBpsReadOnly,

            int? diskMBpsReadWrite,

            int diskSizeBytes,

            int? diskSizeGB,

            string diskState,

            Outputs.EncryptionResponseResult? encryption,

            Outputs.EncryptionSettingsCollectionResponseResult? encryptionSettingsCollection,

            string? hyperVGeneration,

            int? maxShares,

            string? networkAccessPolicy,

            string? osType,

            string provisioningState,

            ImmutableArray<Outputs.ShareInfoElementResponseResult> shareInfo,

            string timeCreated,

            string uniqueId)
        {
            CreationData = creationData;
            DiskAccessId = diskAccessId;
            DiskIOPSReadOnly = diskIOPSReadOnly;
            DiskIOPSReadWrite = diskIOPSReadWrite;
            DiskMBpsReadOnly = diskMBpsReadOnly;
            DiskMBpsReadWrite = diskMBpsReadWrite;
            DiskSizeBytes = diskSizeBytes;
            DiskSizeGB = diskSizeGB;
            DiskState = diskState;
            Encryption = encryption;
            EncryptionSettingsCollection = encryptionSettingsCollection;
            HyperVGeneration = hyperVGeneration;
            MaxShares = maxShares;
            NetworkAccessPolicy = networkAccessPolicy;
            OsType = osType;
            ProvisioningState = provisioningState;
            ShareInfo = shareInfo;
            TimeCreated = timeCreated;
            UniqueId = uniqueId;
        }
    }
}
