// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.Compute.V20180601
{
    public static class GetDisk
    {
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("azure-nextgen:compute/v20180601:getDisk", args ?? new GetDiskArgs(), options.WithVersion());
    }


    public sealed class GetDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
        /// </summary>
        [Input("diskName", required: true)]
        public string DiskName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDiskArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        /// <summary>
        /// Disk source information. CreationData information cannot be changed after the disk has been created.
        /// </summary>
        public readonly Outputs.CreationDataResponse CreationData;
        /// <summary>
        /// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. For a description of the range of values you can set, see [Ultra SSD Managed Disk Offerings](https://docs.microsoft.com/azure/virtual-machines/windows/disks-ultra-ssd#ultra-ssd-managed-disk-offerings).
        /// </summary>
        public readonly int? DiskIOPSReadWrite;
        /// <summary>
        /// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. For a description of the range of values you can set, see [Ultra SSD Managed Disk Offerings](https://docs.microsoft.com/azure/virtual-machines/windows/disks-ultra-ssd#ultra-ssd-managed-disk-offerings).
        /// </summary>
        public readonly int? DiskMBpsReadWrite;
        /// <summary>
        /// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
        /// </summary>
        public readonly int? DiskSizeGB;
        /// <summary>
        /// Encryption settings for disk or snapshot
        /// </summary>
        public readonly Outputs.EncryptionSettingsResponse? EncryptionSettings;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A relative URI containing the ID of the VM that has the disk attached.
        /// </summary>
        public readonly string ManagedBy;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Operating System type.
        /// </summary>
        public readonly string? OsType;
        /// <summary>
        /// The disk provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
        /// </summary>
        public readonly Outputs.DiskSkuResponse? Sku;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The time when the disk was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The Logical zone list for Disk.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetDiskResult(
            Outputs.CreationDataResponse creationData,

            int? diskIOPSReadWrite,

            int? diskMBpsReadWrite,

            int? diskSizeGB,

            Outputs.EncryptionSettingsResponse? encryptionSettings,

            string location,

            string managedBy,

            string name,

            string? osType,

            string provisioningState,

            Outputs.DiskSkuResponse? sku,

            ImmutableDictionary<string, string>? tags,

            string timeCreated,

            string type,

            ImmutableArray<string> zones)
        {
            CreationData = creationData;
            DiskIOPSReadWrite = diskIOPSReadWrite;
            DiskMBpsReadWrite = diskMBpsReadWrite;
            DiskSizeGB = diskSizeGB;
            EncryptionSettings = encryptionSettings;
            Location = location;
            ManagedBy = managedBy;
            Name = name;
            OsType = osType;
            ProvisioningState = provisioningState;
            Sku = sku;
            Tags = tags;
            TimeCreated = timeCreated;
            Type = type;
            Zones = zones;
        }
    }
}
