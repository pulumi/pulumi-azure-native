// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20230901
{
    public static class GetVirtualMachineScaleSetVMRunCommand
    {
        /// <summary>
        /// The operation to get the VMSS VM run command.
        /// </summary>
        public static Task<GetVirtualMachineScaleSetVMRunCommandResult> InvokeAsync(GetVirtualMachineScaleSetVMRunCommandArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineScaleSetVMRunCommandResult>("azure-native:compute/v20230901:getVirtualMachineScaleSetVMRunCommand", args ?? new GetVirtualMachineScaleSetVMRunCommandArgs(), options.WithDefaults());

        /// <summary>
        /// The operation to get the VMSS VM run command.
        /// </summary>
        public static Output<GetVirtualMachineScaleSetVMRunCommandResult> Invoke(GetVirtualMachineScaleSetVMRunCommandInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineScaleSetVMRunCommandResult>("azure-native:compute/v20230901:getVirtualMachineScaleSetVMRunCommand", args ?? new GetVirtualMachineScaleSetVMRunCommandInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineScaleSetVMRunCommandArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The instance ID of the virtual machine.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine run command.
        /// </summary>
        [Input("runCommandName", required: true)]
        public string RunCommandName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set.
        /// </summary>
        [Input("vmScaleSetName", required: true)]
        public string VmScaleSetName { get; set; } = null!;

        public GetVirtualMachineScaleSetVMRunCommandArgs()
        {
        }
        public static new GetVirtualMachineScaleSetVMRunCommandArgs Empty => new GetVirtualMachineScaleSetVMRunCommandArgs();
    }

    public sealed class GetVirtualMachineScaleSetVMRunCommandInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The instance ID of the virtual machine.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine run command.
        /// </summary>
        [Input("runCommandName", required: true)]
        public Input<string> RunCommandName { get; set; } = null!;

        /// <summary>
        /// The name of the VM scale set.
        /// </summary>
        [Input("vmScaleSetName", required: true)]
        public Input<string> VmScaleSetName { get; set; } = null!;

        public GetVirtualMachineScaleSetVMRunCommandInvokeArgs()
        {
        }
        public static new GetVirtualMachineScaleSetVMRunCommandInvokeArgs Empty => new GetVirtualMachineScaleSetVMRunCommandInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineScaleSetVMRunCommandResult
    {
        /// <summary>
        /// Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
        /// </summary>
        public readonly bool? AsyncExecution;
        /// <summary>
        /// User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        public readonly Outputs.RunCommandManagedIdentityResponse? ErrorBlobManagedIdentity;
        /// <summary>
        /// Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
        /// </summary>
        public readonly string? ErrorBlobUri;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The virtual machine run command instance view.
        /// </summary>
        public readonly Outputs.VirtualMachineRunCommandInstanceViewResponse InstanceView;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged 
        /// </summary>
        public readonly Outputs.RunCommandManagedIdentityResponse? OutputBlobManagedIdentity;
        /// <summary>
        /// Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter. 
        /// </summary>
        public readonly string? OutputBlobUri;
        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        public readonly ImmutableArray<Outputs.RunCommandInputParameterResponse> Parameters;
        /// <summary>
        /// The parameters used by the script.
        /// </summary>
        public readonly ImmutableArray<Outputs.RunCommandInputParameterResponse> ProtectedParameters;
        /// <summary>
        /// The provisioning state, which only appears in the response. If treatFailureAsDeploymentFailure set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed. If treatFailureAsDeploymentFailure set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures. See instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results 
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Specifies the user account password on the VM when executing the run command.
        /// </summary>
        public readonly string? RunAsPassword;
        /// <summary>
        /// Specifies the user account on the VM when executing the run command.
        /// </summary>
        public readonly string? RunAsUser;
        /// <summary>
        /// The source of the run command script.
        /// </summary>
        public readonly Outputs.VirtualMachineRunCommandScriptSourceResponse? Source;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The timeout in seconds to execute the run command.
        /// </summary>
        public readonly int? TimeoutInSeconds;
        /// <summary>
        /// Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed. If set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures. See instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results 
        /// </summary>
        public readonly bool? TreatFailureAsDeploymentFailure;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetVirtualMachineScaleSetVMRunCommandResult(
            bool? asyncExecution,

            Outputs.RunCommandManagedIdentityResponse? errorBlobManagedIdentity,

            string? errorBlobUri,

            string id,

            Outputs.VirtualMachineRunCommandInstanceViewResponse instanceView,

            string location,

            string name,

            Outputs.RunCommandManagedIdentityResponse? outputBlobManagedIdentity,

            string? outputBlobUri,

            ImmutableArray<Outputs.RunCommandInputParameterResponse> parameters,

            ImmutableArray<Outputs.RunCommandInputParameterResponse> protectedParameters,

            string provisioningState,

            string? runAsPassword,

            string? runAsUser,

            Outputs.VirtualMachineRunCommandScriptSourceResponse? source,

            ImmutableDictionary<string, string>? tags,

            int? timeoutInSeconds,

            bool? treatFailureAsDeploymentFailure,

            string type)
        {
            AsyncExecution = asyncExecution;
            ErrorBlobManagedIdentity = errorBlobManagedIdentity;
            ErrorBlobUri = errorBlobUri;
            Id = id;
            InstanceView = instanceView;
            Location = location;
            Name = name;
            OutputBlobManagedIdentity = outputBlobManagedIdentity;
            OutputBlobUri = outputBlobUri;
            Parameters = parameters;
            ProtectedParameters = protectedParameters;
            ProvisioningState = provisioningState;
            RunAsPassword = runAsPassword;
            RunAsUser = runAsUser;
            Source = source;
            Tags = tags;
            TimeoutInSeconds = timeoutInSeconds;
            TreatFailureAsDeploymentFailure = treatFailureAsDeploymentFailure;
            Type = type;
        }
    }
}
