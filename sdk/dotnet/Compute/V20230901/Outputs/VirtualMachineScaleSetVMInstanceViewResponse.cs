// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute.V20230901.Outputs
{

    /// <summary>
    /// The instance view of a virtual machine scale set VM.
    /// </summary>
    [OutputType]
    public sealed class VirtualMachineScaleSetVMInstanceViewResponse
    {
        /// <summary>
        /// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
        /// </summary>
        public readonly string AssignedHost;
        /// <summary>
        /// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
        /// </summary>
        public readonly Outputs.BootDiagnosticsInstanceViewResponse? BootDiagnostics;
        /// <summary>
        /// Specifies the host OS name of the virtual machine. &lt;br&gt;&lt;br&gt; This name cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 15 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters. &lt;br&gt;&lt;br&gt; For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
        /// </summary>
        public readonly string? ComputerName;
        /// <summary>
        /// The disks information.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskInstanceViewResponse> Disks;
        /// <summary>
        /// The extensions information.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualMachineExtensionInstanceViewResponse> Extensions;
        /// <summary>
        /// The hypervisor generation of the Virtual Machine [V1, V2]
        /// </summary>
        public readonly string? HyperVGeneration;
        /// <summary>
        /// The Maintenance Operation status on the virtual machine.
        /// </summary>
        public readonly Outputs.MaintenanceRedeployStatusResponse? MaintenanceRedeployStatus;
        /// <summary>
        /// The Operating System running on the hybrid machine.
        /// </summary>
        public readonly string? OsName;
        /// <summary>
        /// The version of Operating System running on the hybrid machine.
        /// </summary>
        public readonly string? OsVersion;
        /// <summary>
        /// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
        /// </summary>
        public readonly string? PlacementGroupId;
        /// <summary>
        /// The Fault Domain count.
        /// </summary>
        public readonly int? PlatformFaultDomain;
        /// <summary>
        /// The Update Domain count.
        /// </summary>
        public readonly int? PlatformUpdateDomain;
        /// <summary>
        /// The Remote desktop certificate thumbprint.
        /// </summary>
        public readonly string? RdpThumbPrint;
        /// <summary>
        /// The resource status information.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceViewStatusResponse> Statuses;
        /// <summary>
        /// The VM Agent running on the virtual machine.
        /// </summary>
        public readonly Outputs.VirtualMachineAgentInstanceViewResponse? VmAgent;
        /// <summary>
        /// The health status for the VM.
        /// </summary>
        public readonly Outputs.VirtualMachineHealthStatusResponse VmHealth;

        [OutputConstructor]
        private VirtualMachineScaleSetVMInstanceViewResponse(
            string assignedHost,

            Outputs.BootDiagnosticsInstanceViewResponse? bootDiagnostics,

            string? computerName,

            ImmutableArray<Outputs.DiskInstanceViewResponse> disks,

            ImmutableArray<Outputs.VirtualMachineExtensionInstanceViewResponse> extensions,

            string? hyperVGeneration,

            Outputs.MaintenanceRedeployStatusResponse? maintenanceRedeployStatus,

            string? osName,

            string? osVersion,

            string? placementGroupId,

            int? platformFaultDomain,

            int? platformUpdateDomain,

            string? rdpThumbPrint,

            ImmutableArray<Outputs.InstanceViewStatusResponse> statuses,

            Outputs.VirtualMachineAgentInstanceViewResponse? vmAgent,

            Outputs.VirtualMachineHealthStatusResponse vmHealth)
        {
            AssignedHost = assignedHost;
            BootDiagnostics = bootDiagnostics;
            ComputerName = computerName;
            Disks = disks;
            Extensions = extensions;
            HyperVGeneration = hyperVGeneration;
            MaintenanceRedeployStatus = maintenanceRedeployStatus;
            OsName = osName;
            OsVersion = osVersion;
            PlacementGroupId = placementGroupId;
            PlatformFaultDomain = platformFaultDomain;
            PlatformUpdateDomain = platformUpdateDomain;
            RdpThumbPrint = rdpThumbPrint;
            Statuses = statuses;
            VmAgent = vmAgent;
            VmHealth = vmHealth;
        }
    }
}
