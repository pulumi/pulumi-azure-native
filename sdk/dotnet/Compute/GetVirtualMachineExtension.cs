// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Compute
{
    public static class GetVirtualMachineExtension
    {
        /// <summary>
        /// The operation to get the extension.
        /// API Version: 2023-03-01.
        /// </summary>
        public static Task<GetVirtualMachineExtensionResult> InvokeAsync(GetVirtualMachineExtensionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineExtensionResult>("azure-native:compute:getVirtualMachineExtension", args ?? new GetVirtualMachineExtensionArgs(), options.WithDefaults());

        /// <summary>
        /// The operation to get the extension.
        /// API Version: 2023-03-01.
        /// </summary>
        public static Output<GetVirtualMachineExtensionResult> Invoke(GetVirtualMachineExtensionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineExtensionResult>("azure-native:compute:getVirtualMachineExtension", args ?? new GetVirtualMachineExtensionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineExtensionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public string? Expand { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine extension.
        /// </summary>
        [Input("vmExtensionName", required: true)]
        public string VmExtensionName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine containing the extension.
        /// </summary>
        [Input("vmName", required: true)]
        public string VmName { get; set; } = null!;

        public GetVirtualMachineExtensionArgs()
        {
        }
        public static new GetVirtualMachineExtensionArgs Empty => new GetVirtualMachineExtensionArgs();
    }

    public sealed class GetVirtualMachineExtensionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The expand expression to apply on the operation.
        /// </summary>
        [Input("expand")]
        public Input<string>? Expand { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine extension.
        /// </summary>
        [Input("vmExtensionName", required: true)]
        public Input<string> VmExtensionName { get; set; } = null!;

        /// <summary>
        /// The name of the virtual machine containing the extension.
        /// </summary>
        [Input("vmName", required: true)]
        public Input<string> VmName { get; set; } = null!;

        public GetVirtualMachineExtensionInvokeArgs()
        {
        }
        public static new GetVirtualMachineExtensionInvokeArgs Empty => new GetVirtualMachineExtensionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineExtensionResult
    {
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        public readonly bool? AutoUpgradeMinorVersion;
        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
        /// </summary>
        public readonly bool? EnableAutomaticUpgrade;
        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        public readonly string? ForceUpdateTag;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The virtual machine extension instance view.
        /// </summary>
        public readonly Outputs.VirtualMachineExtensionInstanceViewResponse? InstanceView;
        /// <summary>
        /// Resource location
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Resource name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        public readonly object? ProtectedSettings;
        /// <summary>
        /// The extensions protected settings that are passed by reference, and consumed from key vault
        /// </summary>
        public readonly Outputs.KeyVaultSecretReferenceResponse? ProtectedSettingsFromKeyVault;
        /// <summary>
        /// Collection of extension names after which this extension needs to be provisioned.
        /// </summary>
        public readonly ImmutableArray<string> ProvisionAfterExtensions;
        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The name of the extension handler publisher.
        /// </summary>
        public readonly string? Publisher;
        /// <summary>
        /// Json formatted public settings for the extension.
        /// </summary>
        public readonly object? Settings;
        /// <summary>
        /// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
        /// </summary>
        public readonly bool? SuppressFailures;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies the version of the script handler.
        /// </summary>
        public readonly string? TypeHandlerVersion;

        [OutputConstructor]
        private GetVirtualMachineExtensionResult(
            bool? autoUpgradeMinorVersion,

            bool? enableAutomaticUpgrade,

            string? forceUpdateTag,

            string id,

            Outputs.VirtualMachineExtensionInstanceViewResponse? instanceView,

            string? location,

            string name,

            object? protectedSettings,

            Outputs.KeyVaultSecretReferenceResponse? protectedSettingsFromKeyVault,

            ImmutableArray<string> provisionAfterExtensions,

            string provisioningState,

            string? publisher,

            object? settings,

            bool? suppressFailures,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? typeHandlerVersion)
        {
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            EnableAutomaticUpgrade = enableAutomaticUpgrade;
            ForceUpdateTag = forceUpdateTag;
            Id = id;
            InstanceView = instanceView;
            Location = location;
            Name = name;
            ProtectedSettings = protectedSettings;
            ProtectedSettingsFromKeyVault = protectedSettingsFromKeyVault;
            ProvisionAfterExtensions = provisionAfterExtensions;
            ProvisioningState = provisioningState;
            Publisher = publisher;
            Settings = settings;
            SuppressFailures = suppressFailures;
            Tags = tags;
            Type = type;
            TypeHandlerVersion = typeHandlerVersion;
        }
    }
}
