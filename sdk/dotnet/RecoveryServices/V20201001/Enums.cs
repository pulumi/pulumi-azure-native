// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.RecoveryServices.V20201001
{
    /// <summary>
    /// Type of backup items associated with this container.
    /// </summary>
    [EnumType]
    public readonly struct BackupItemType : IEquatable<BackupItemType>
    {
        private readonly string _value;

        private BackupItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupItemType Invalid { get; } = new BackupItemType("Invalid");
        public static BackupItemType VM { get; } = new BackupItemType("VM");
        public static BackupItemType FileFolder { get; } = new BackupItemType("FileFolder");
        public static BackupItemType AzureSqlDb { get; } = new BackupItemType("AzureSqlDb");
        public static BackupItemType SQLDB { get; } = new BackupItemType("SQLDB");
        public static BackupItemType Exchange { get; } = new BackupItemType("Exchange");
        public static BackupItemType Sharepoint { get; } = new BackupItemType("Sharepoint");
        public static BackupItemType VMwareVM { get; } = new BackupItemType("VMwareVM");
        public static BackupItemType SystemState { get; } = new BackupItemType("SystemState");
        public static BackupItemType Client { get; } = new BackupItemType("Client");
        public static BackupItemType GenericDataSource { get; } = new BackupItemType("GenericDataSource");
        public static BackupItemType SQLDataBase { get; } = new BackupItemType("SQLDataBase");
        public static BackupItemType AzureFileShare { get; } = new BackupItemType("AzureFileShare");
        public static BackupItemType SAPHanaDatabase { get; } = new BackupItemType("SAPHanaDatabase");
        public static BackupItemType SAPAseDatabase { get; } = new BackupItemType("SAPAseDatabase");

        public static bool operator ==(BackupItemType left, BackupItemType right) => left.Equals(right);
        public static bool operator !=(BackupItemType left, BackupItemType right) => !left.Equals(right);

        public static explicit operator string(BackupItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupItemType other && Equals(other);
        public bool Equals(BackupItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of backup management for the container.
    /// </summary>
    [EnumType]
    public readonly struct BackupManagementType : IEquatable<BackupManagementType>
    {
        private readonly string _value;

        private BackupManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupManagementType Invalid { get; } = new BackupManagementType("Invalid");
        public static BackupManagementType AzureIaasVM { get; } = new BackupManagementType("AzureIaasVM");
        public static BackupManagementType MAB { get; } = new BackupManagementType("MAB");
        public static BackupManagementType DPM { get; } = new BackupManagementType("DPM");
        public static BackupManagementType AzureBackupServer { get; } = new BackupManagementType("AzureBackupServer");
        public static BackupManagementType AzureSql { get; } = new BackupManagementType("AzureSql");
        public static BackupManagementType AzureStorage { get; } = new BackupManagementType("AzureStorage");
        public static BackupManagementType AzureWorkload { get; } = new BackupManagementType("AzureWorkload");
        public static BackupManagementType DefaultBackup { get; } = new BackupManagementType("DefaultBackup");

        public static bool operator ==(BackupManagementType left, BackupManagementType right) => left.Equals(right);
        public static bool operator !=(BackupManagementType left, BackupManagementType right) => !left.Equals(right);

        public static explicit operator string(BackupManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupManagementType other && Equals(other);
        public bool Equals(BackupManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
    /// Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
    /// Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
    /// Backup is VMAppContainer
    /// </summary>
    [EnumType]
    public readonly struct ContainerType : IEquatable<ContainerType>
    {
        private readonly string _value;

        private ContainerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerType Invalid { get; } = new ContainerType("Invalid");
        public static ContainerType Unknown { get; } = new ContainerType("Unknown");
        public static ContainerType IaasVMContainer { get; } = new ContainerType("IaasVMContainer");
        public static ContainerType IaasVMServiceContainer { get; } = new ContainerType("IaasVMServiceContainer");
        public static ContainerType DPMContainer { get; } = new ContainerType("DPMContainer");
        public static ContainerType AzureBackupServerContainer { get; } = new ContainerType("AzureBackupServerContainer");
        public static ContainerType MABContainer { get; } = new ContainerType("MABContainer");
        public static ContainerType Cluster { get; } = new ContainerType("Cluster");
        public static ContainerType AzureSqlContainer { get; } = new ContainerType("AzureSqlContainer");
        public static ContainerType Windows { get; } = new ContainerType("Windows");
        public static ContainerType VCenter { get; } = new ContainerType("VCenter");
        public static ContainerType VMAppContainer { get; } = new ContainerType("VMAppContainer");
        public static ContainerType SQLAGWorkLoadContainer { get; } = new ContainerType("SQLAGWorkLoadContainer");
        public static ContainerType StorageContainer { get; } = new ContainerType("StorageContainer");
        public static ContainerType GenericContainer { get; } = new ContainerType("GenericContainer");

        public static bool operator ==(ContainerType left, ContainerType right) => left.Equals(right);
        public static bool operator !=(ContainerType left, ContainerType right) => !left.Equals(right);

        public static explicit operator string(ContainerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerType other && Equals(other);
        public bool Equals(ContainerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Invalid { get; } = new CreateMode("Invalid");
        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Recover { get; } = new CreateMode("Recover");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of workload this item represents.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType Invalid { get; } = new DataSourceType("Invalid");
        public static DataSourceType VM { get; } = new DataSourceType("VM");
        public static DataSourceType FileFolder { get; } = new DataSourceType("FileFolder");
        public static DataSourceType AzureSqlDb { get; } = new DataSourceType("AzureSqlDb");
        public static DataSourceType SQLDB { get; } = new DataSourceType("SQLDB");
        public static DataSourceType Exchange { get; } = new DataSourceType("Exchange");
        public static DataSourceType Sharepoint { get; } = new DataSourceType("Sharepoint");
        public static DataSourceType VMwareVM { get; } = new DataSourceType("VMwareVM");
        public static DataSourceType SystemState { get; } = new DataSourceType("SystemState");
        public static DataSourceType Client { get; } = new DataSourceType("Client");
        public static DataSourceType GenericDataSource { get; } = new DataSourceType("GenericDataSource");
        public static DataSourceType SQLDataBase { get; } = new DataSourceType("SQLDataBase");
        public static DataSourceType AzureFileShare { get; } = new DataSourceType("AzureFileShare");
        public static DataSourceType SAPHanaDatabase { get; } = new DataSourceType("SAPHanaDatabase");
        public static DataSourceType SAPAseDatabase { get; } = new DataSourceType("SAPAseDatabase");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health status of protected item.
    /// </summary>
    [EnumType]
    public readonly struct HealthStatus : IEquatable<HealthStatus>
    {
        private readonly string _value;

        private HealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HealthStatus Passed { get; } = new HealthStatus("Passed");
        public static HealthStatus ActionRequired { get; } = new HealthStatus("ActionRequired");
        public static HealthStatus ActionSuggested { get; } = new HealthStatus("ActionSuggested");
        public static HealthStatus Invalid { get; } = new HealthStatus("Invalid");

        public static bool operator ==(HealthStatus left, HealthStatus right) => left.Equals(right);
        public static bool operator !=(HealthStatus left, HealthStatus right) => !left.Equals(right);

        public static explicit operator string(HealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthStatus other && Equals(other);
        public bool Equals(HealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Last backup operation status. Possible values: Healthy, Unhealthy.
    /// </summary>
    [EnumType]
    public readonly struct LastBackupStatus : IEquatable<LastBackupStatus>
    {
        private readonly string _value;

        private LastBackupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LastBackupStatus Invalid { get; } = new LastBackupStatus("Invalid");
        public static LastBackupStatus Healthy { get; } = new LastBackupStatus("Healthy");
        public static LastBackupStatus Unhealthy { get; } = new LastBackupStatus("Unhealthy");
        public static LastBackupStatus IRPending { get; } = new LastBackupStatus("IRPending");

        public static bool operator ==(LastBackupStatus left, LastBackupStatus right) => left.Equals(right);
        public static bool operator !=(LastBackupStatus left, LastBackupStatus right) => !left.Equals(right);

        public static explicit operator string(LastBackupStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LastBackupStatus other && Equals(other);
        public bool Equals(LastBackupStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MonthOfYear : IEquatable<MonthOfYear>
    {
        private readonly string _value;

        private MonthOfYear(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonthOfYear Invalid { get; } = new MonthOfYear("Invalid");
        public static MonthOfYear January { get; } = new MonthOfYear("January");
        public static MonthOfYear February { get; } = new MonthOfYear("February");
        public static MonthOfYear March { get; } = new MonthOfYear("March");
        public static MonthOfYear April { get; } = new MonthOfYear("April");
        public static MonthOfYear May { get; } = new MonthOfYear("May");
        public static MonthOfYear June { get; } = new MonthOfYear("June");
        public static MonthOfYear July { get; } = new MonthOfYear("July");
        public static MonthOfYear August { get; } = new MonthOfYear("August");
        public static MonthOfYear September { get; } = new MonthOfYear("September");
        public static MonthOfYear October { get; } = new MonthOfYear("October");
        public static MonthOfYear November { get; } = new MonthOfYear("November");
        public static MonthOfYear December { get; } = new MonthOfYear("December");

        public static bool operator ==(MonthOfYear left, MonthOfYear right) => left.Equals(right);
        public static bool operator !=(MonthOfYear left, MonthOfYear right) => !left.Equals(right);

        public static explicit operator string(MonthOfYear value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonthOfYear other && Equals(other);
        public bool Equals(MonthOfYear other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Re-Do Operation
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperationType Invalid { get; } = new OperationType("Invalid");
        public static OperationType Register { get; } = new OperationType("Register");
        public static OperationType Reregister { get; } = new OperationType("Reregister");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of backup policy type
    /// </summary>
    [EnumType]
    public readonly struct PolicyType : IEquatable<PolicyType>
    {
        private readonly string _value;

        private PolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolicyType Invalid { get; } = new PolicyType("Invalid");
        public static PolicyType Full { get; } = new PolicyType("Full");
        public static PolicyType Differential { get; } = new PolicyType("Differential");
        public static PolicyType Log { get; } = new PolicyType("Log");
        public static PolicyType CopyOnlyFull { get; } = new PolicyType("CopyOnlyFull");
        public static PolicyType Incremental { get; } = new PolicyType("Incremental");

        public static bool operator ==(PolicyType left, PolicyType right) => left.Equals(right);
        public static bool operator !=(PolicyType left, PolicyType right) => !left.Equals(right);

        public static explicit operator string(PolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolicyType other && Equals(other);
        public bool Equals(PolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the status
    /// </summary>
    [EnumType]
    public readonly struct PrivateEndpointConnectionStatus : IEquatable<PrivateEndpointConnectionStatus>
    {
        private readonly string _value;

        private PrivateEndpointConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateEndpointConnectionStatus Pending { get; } = new PrivateEndpointConnectionStatus("Pending");
        public static PrivateEndpointConnectionStatus Approved { get; } = new PrivateEndpointConnectionStatus("Approved");
        public static PrivateEndpointConnectionStatus Rejected { get; } = new PrivateEndpointConnectionStatus("Rejected");
        public static PrivateEndpointConnectionStatus Disconnected { get; } = new PrivateEndpointConnectionStatus("Disconnected");

        public static bool operator ==(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => left.Equals(right);
        public static bool operator !=(PrivateEndpointConnectionStatus left, PrivateEndpointConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(PrivateEndpointConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateEndpointConnectionStatus other && Equals(other);
        public bool Equals(PrivateEndpointConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health status of the backup item, evaluated based on last heartbeat received
    /// </summary>
    [EnumType]
    public readonly struct ProtectedItemHealthStatus : IEquatable<ProtectedItemHealthStatus>
    {
        private readonly string _value;

        private ProtectedItemHealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectedItemHealthStatus Invalid { get; } = new ProtectedItemHealthStatus("Invalid");
        public static ProtectedItemHealthStatus Healthy { get; } = new ProtectedItemHealthStatus("Healthy");
        public static ProtectedItemHealthStatus Unhealthy { get; } = new ProtectedItemHealthStatus("Unhealthy");
        public static ProtectedItemHealthStatus NotReachable { get; } = new ProtectedItemHealthStatus("NotReachable");
        public static ProtectedItemHealthStatus IRPending { get; } = new ProtectedItemHealthStatus("IRPending");

        public static bool operator ==(ProtectedItemHealthStatus left, ProtectedItemHealthStatus right) => left.Equals(right);
        public static bool operator !=(ProtectedItemHealthStatus left, ProtectedItemHealthStatus right) => !left.Equals(right);

        public static explicit operator string(ProtectedItemHealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectedItemHealthStatus other && Equals(other);
        public bool Equals(ProtectedItemHealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protection state of the backup engine
    /// </summary>
    [EnumType]
    public readonly struct ProtectedItemState : IEquatable<ProtectedItemState>
    {
        private readonly string _value;

        private ProtectedItemState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectedItemState Invalid { get; } = new ProtectedItemState("Invalid");
        public static ProtectedItemState IRPending { get; } = new ProtectedItemState("IRPending");
        public static ProtectedItemState Protected { get; } = new ProtectedItemState("Protected");
        public static ProtectedItemState ProtectionError { get; } = new ProtectedItemState("ProtectionError");
        public static ProtectedItemState ProtectionStopped { get; } = new ProtectedItemState("ProtectionStopped");
        public static ProtectedItemState ProtectionPaused { get; } = new ProtectedItemState("ProtectionPaused");

        public static bool operator ==(ProtectedItemState left, ProtectedItemState right) => left.Equals(right);
        public static bool operator !=(ProtectedItemState left, ProtectedItemState right) => !left.Equals(right);

        public static explicit operator string(ProtectedItemState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectedItemState other && Equals(other);
        public bool Equals(ProtectedItemState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backup state of this backup item.
    /// </summary>
    [EnumType]
    public readonly struct ProtectionState : IEquatable<ProtectionState>
    {
        private readonly string _value;

        private ProtectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectionState Invalid { get; } = new ProtectionState("Invalid");
        public static ProtectionState IRPending { get; } = new ProtectionState("IRPending");
        public static ProtectionState Protected { get; } = new ProtectionState("Protected");
        public static ProtectionState ProtectionError { get; } = new ProtectionState("ProtectionError");
        public static ProtectionState ProtectionStopped { get; } = new ProtectionState("ProtectionStopped");
        public static ProtectionState ProtectionPaused { get; } = new ProtectionState("ProtectionPaused");

        public static bool operator ==(ProtectionState left, ProtectionState right) => left.Equals(right);
        public static bool operator !=(ProtectionState left, ProtectionState right) => !left.Equals(right);

        public static explicit operator string(ProtectionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectionState other && Equals(other);
        public bool Equals(ProtectionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets provisioning state of the private endpoint connection
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningState : IEquatable<ProvisioningState>
    {
        private readonly string _value;

        private ProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningState Succeeded { get; } = new ProvisioningState("Succeeded");
        public static ProvisioningState Deleting { get; } = new ProvisioningState("Deleting");
        public static ProvisioningState Failed { get; } = new ProvisioningState("Failed");
        public static ProvisioningState Pending { get; } = new ProvisioningState("Pending");

        public static bool operator ==(ProvisioningState left, ProvisioningState right) => left.Equals(right);
        public static bool operator !=(ProvisioningState left, ProvisioningState right) => !left.Equals(right);

        public static explicit operator string(ProvisioningState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningState other && Equals(other);
        public bool Equals(ProvisioningState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource Health Status
    /// </summary>
    [EnumType]
    public readonly struct ResourceHealthStatus : IEquatable<ResourceHealthStatus>
    {
        private readonly string _value;

        private ResourceHealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceHealthStatus Healthy { get; } = new ResourceHealthStatus("Healthy");
        public static ResourceHealthStatus TransientDegraded { get; } = new ResourceHealthStatus("TransientDegraded");
        public static ResourceHealthStatus PersistentDegraded { get; } = new ResourceHealthStatus("PersistentDegraded");
        public static ResourceHealthStatus TransientUnhealthy { get; } = new ResourceHealthStatus("TransientUnhealthy");
        public static ResourceHealthStatus PersistentUnhealthy { get; } = new ResourceHealthStatus("PersistentUnhealthy");
        public static ResourceHealthStatus Invalid { get; } = new ResourceHealthStatus("Invalid");

        public static bool operator ==(ResourceHealthStatus left, ResourceHealthStatus right) => left.Equals(right);
        public static bool operator !=(ResourceHealthStatus left, ResourceHealthStatus right) => !left.Equals(right);

        public static explicit operator string(ResourceHealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceHealthStatus other && Equals(other);
        public bool Equals(ResourceHealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Retention duration type of retention policy.
    /// </summary>
    [EnumType]
    public readonly struct RetentionDurationType : IEquatable<RetentionDurationType>
    {
        private readonly string _value;

        private RetentionDurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionDurationType Invalid { get; } = new RetentionDurationType("Invalid");
        public static RetentionDurationType Days { get; } = new RetentionDurationType("Days");
        public static RetentionDurationType Weeks { get; } = new RetentionDurationType("Weeks");
        public static RetentionDurationType Months { get; } = new RetentionDurationType("Months");
        public static RetentionDurationType Years { get; } = new RetentionDurationType("Years");

        public static bool operator ==(RetentionDurationType left, RetentionDurationType right) => left.Equals(right);
        public static bool operator !=(RetentionDurationType left, RetentionDurationType right) => !left.Equals(right);

        public static explicit operator string(RetentionDurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionDurationType other && Equals(other);
        public bool Equals(RetentionDurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Retention schedule format for yearly retention policy.
    /// </summary>
    [EnumType]
    public readonly struct RetentionScheduleFormat : IEquatable<RetentionScheduleFormat>
    {
        private readonly string _value;

        private RetentionScheduleFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionScheduleFormat Invalid { get; } = new RetentionScheduleFormat("Invalid");
        public static RetentionScheduleFormat Daily { get; } = new RetentionScheduleFormat("Daily");
        public static RetentionScheduleFormat Weekly { get; } = new RetentionScheduleFormat("Weekly");

        public static bool operator ==(RetentionScheduleFormat left, RetentionScheduleFormat right) => left.Equals(right);
        public static bool operator !=(RetentionScheduleFormat left, RetentionScheduleFormat right) => !left.Equals(right);

        public static explicit operator string(RetentionScheduleFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionScheduleFormat other && Equals(other);
        public bool Equals(RetentionScheduleFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Frequency of the schedule operation of this policy.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleRunType : IEquatable<ScheduleRunType>
    {
        private readonly string _value;

        private ScheduleRunType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleRunType Invalid { get; } = new ScheduleRunType("Invalid");
        public static ScheduleRunType Daily { get; } = new ScheduleRunType("Daily");
        public static ScheduleRunType Weekly { get; } = new ScheduleRunType("Weekly");

        public static bool operator ==(ScheduleRunType left, ScheduleRunType right) => left.Equals(right);
        public static bool operator !=(ScheduleRunType left, ScheduleRunType right) => !left.Equals(right);

        public static explicit operator string(ScheduleRunType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleRunType other && Equals(other);
        public bool Equals(ScheduleRunType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WeekOfMonth : IEquatable<WeekOfMonth>
    {
        private readonly string _value;

        private WeekOfMonth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekOfMonth First { get; } = new WeekOfMonth("First");
        public static WeekOfMonth Second { get; } = new WeekOfMonth("Second");
        public static WeekOfMonth Third { get; } = new WeekOfMonth("Third");
        public static WeekOfMonth Fourth { get; } = new WeekOfMonth("Fourth");
        public static WeekOfMonth Last { get; } = new WeekOfMonth("Last");
        public static WeekOfMonth Invalid { get; } = new WeekOfMonth("Invalid");

        public static bool operator ==(WeekOfMonth left, WeekOfMonth right) => left.Equals(right);
        public static bool operator !=(WeekOfMonth left, WeekOfMonth right) => !left.Equals(right);

        public static explicit operator string(WeekOfMonth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekOfMonth other && Equals(other);
        public bool Equals(WeekOfMonth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of workload for the backup management
    /// </summary>
    [EnumType]
    public readonly struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        private WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadType Invalid { get; } = new WorkloadType("Invalid");
        public static WorkloadType VM { get; } = new WorkloadType("VM");
        public static WorkloadType FileFolder { get; } = new WorkloadType("FileFolder");
        public static WorkloadType AzureSqlDb { get; } = new WorkloadType("AzureSqlDb");
        public static WorkloadType SQLDB { get; } = new WorkloadType("SQLDB");
        public static WorkloadType Exchange { get; } = new WorkloadType("Exchange");
        public static WorkloadType Sharepoint { get; } = new WorkloadType("Sharepoint");
        public static WorkloadType VMwareVM { get; } = new WorkloadType("VMwareVM");
        public static WorkloadType SystemState { get; } = new WorkloadType("SystemState");
        public static WorkloadType Client { get; } = new WorkloadType("Client");
        public static WorkloadType GenericDataSource { get; } = new WorkloadType("GenericDataSource");
        public static WorkloadType SQLDataBase { get; } = new WorkloadType("SQLDataBase");
        public static WorkloadType AzureFileShare { get; } = new WorkloadType("AzureFileShare");
        public static WorkloadType SAPHanaDatabase { get; } = new WorkloadType("SAPHanaDatabase");
        public static WorkloadType SAPAseDatabase { get; } = new WorkloadType("SAPAseDatabase");

        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);

        public static explicit operator string(WorkloadType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadType other && Equals(other);
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
