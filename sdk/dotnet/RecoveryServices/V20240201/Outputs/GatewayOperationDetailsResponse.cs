// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.RecoveryServices.V20240201.Outputs
{

    /// <summary>
    /// Details of the gateway operation.
    /// </summary>
    [OutputType]
    public sealed class GatewayOperationDetailsResponse
    {
        /// <summary>
        /// A value indicating the datastore collection.
        /// </summary>
        public readonly ImmutableArray<string> DataStores;
        /// <summary>
        /// A value indicating the ESXi host name.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// A value indicating the progress percentage of gateway operation.
        /// </summary>
        public readonly int ProgressPercentage;
        /// <summary>
        /// A value indicating the state of gateway operation.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A value indicating the time elapsed for the operation in milliseconds.
        /// </summary>
        public readonly double TimeElapsed;
        /// <summary>
        /// A value indicating the time remaining for the operation in milliseconds.
        /// </summary>
        public readonly double TimeRemaining;
        /// <summary>
        /// A value indicating the upload speed in bytes per second.
        /// </summary>
        public readonly double UploadSpeed;
        /// <summary>
        /// A value indicating the VMware read throughput in bytes per second.
        /// </summary>
        public readonly double VmwareReadThroughput;

        [OutputConstructor]
        private GatewayOperationDetailsResponse(
            ImmutableArray<string> dataStores,

            string hostName,

            int progressPercentage,

            string state,

            double timeElapsed,

            double timeRemaining,

            double uploadSpeed,

            double vmwareReadThroughput)
        {
            DataStores = dataStores;
            HostName = hostName;
            ProgressPercentage = progressPercentage;
            State = state;
            TimeElapsed = timeElapsed;
            TimeRemaining = timeRemaining;
            UploadSpeed = uploadSpeed;
            VmwareReadThroughput = vmwareReadThroughput;
        }
    }
}
