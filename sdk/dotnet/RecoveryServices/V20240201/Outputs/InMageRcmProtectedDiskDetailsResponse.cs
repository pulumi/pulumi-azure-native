// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.RecoveryServices.V20240201.Outputs
{

    /// <summary>
    /// InMageRcm protected disk details.
    /// </summary>
    [OutputType]
    public sealed class InMageRcmProtectedDiskDetailsResponse
    {
        /// <summary>
        /// The disk capacity in bytes.
        /// </summary>
        public readonly double CapacityInBytes;
        /// <summary>
        /// The custom target Azure disk name.
        /// </summary>
        public readonly string? CustomTargetDiskName;
        /// <summary>
        /// The data pending at source agent in MB.
        /// </summary>
        public readonly double DataPendingAtSourceAgentInMB;
        /// <summary>
        /// The data pending in log data store in MB.
        /// </summary>
        public readonly double DataPendingInLogDataStoreInMB;
        /// <summary>
        /// The DiskEncryptionSet ARM Id.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The disk Id.
        /// </summary>
        public readonly string DiskId;
        /// <summary>
        /// The disk name.
        /// </summary>
        public readonly string DiskName;
        /// <summary>
        /// The disk state.
        /// </summary>
        public readonly string DiskState;
        /// <summary>
        /// The disk type.
        /// </summary>
        public readonly string? DiskType;
        /// <summary>
        /// The initial replication details.
        /// </summary>
        public readonly Outputs.InMageRcmSyncDetailsResponse? IrDetails;
        /// <summary>
        /// A value indicating whether initial replication is complete or not.
        /// </summary>
        public readonly string IsInitialReplicationComplete;
        /// <summary>
        /// A value indicating whether the disk is the OS disk.
        /// </summary>
        public readonly string IsOSDisk;
        /// <summary>
        /// The log storage account ARM Id.
        /// </summary>
        public readonly string LogStorageAccountId;
        /// <summary>
        /// The resync details.
        /// </summary>
        public readonly Outputs.InMageRcmSyncDetailsResponse? ResyncDetails;
        /// <summary>
        /// The logical sector size (in bytes), 512 by default.
        /// </summary>
        public readonly int? SectorSizeInBytes;
        /// <summary>
        /// The uri of the seed blob.
        /// </summary>
        public readonly string SeedBlobUri;
        /// <summary>
        /// The ARM Id of the seed managed disk.
        /// </summary>
        public readonly string SeedManagedDiskId;
        /// <summary>
        /// The ARM Id of the target managed disk.
        /// </summary>
        public readonly string TargetManagedDiskId;

        [OutputConstructor]
        private InMageRcmProtectedDiskDetailsResponse(
            double capacityInBytes,

            string? customTargetDiskName,

            double dataPendingAtSourceAgentInMB,

            double dataPendingInLogDataStoreInMB,

            string diskEncryptionSetId,

            string diskId,

            string diskName,

            string diskState,

            string? diskType,

            Outputs.InMageRcmSyncDetailsResponse? irDetails,

            string isInitialReplicationComplete,

            string isOSDisk,

            string logStorageAccountId,

            Outputs.InMageRcmSyncDetailsResponse? resyncDetails,

            int? sectorSizeInBytes,

            string seedBlobUri,

            string seedManagedDiskId,

            string targetManagedDiskId)
        {
            CapacityInBytes = capacityInBytes;
            CustomTargetDiskName = customTargetDiskName;
            DataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
            DataPendingInLogDataStoreInMB = dataPendingInLogDataStoreInMB;
            DiskEncryptionSetId = diskEncryptionSetId;
            DiskId = diskId;
            DiskName = diskName;
            DiskState = diskState;
            DiskType = diskType;
            IrDetails = irDetails;
            IsInitialReplicationComplete = isInitialReplicationComplete;
            IsOSDisk = isOSDisk;
            LogStorageAccountId = logStorageAccountId;
            ResyncDetails = resyncDetails;
            SectorSizeInBytes = sectorSizeInBytes;
            SeedBlobUri = seedBlobUri;
            SeedManagedDiskId = seedManagedDiskId;
            TargetManagedDiskId = targetManagedDiskId;
        }
    }
}
