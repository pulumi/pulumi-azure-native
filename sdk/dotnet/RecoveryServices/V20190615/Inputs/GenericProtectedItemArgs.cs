// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.RecoveryServices.V20190615.Inputs
{

    /// <summary>
    /// Base class for backup items.
    /// </summary>
    public sealed class GenericProtectedItemArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of backup management for the backed up item.
        /// </summary>
        [Input("backupManagementType")]
        public Input<string>? BackupManagementType { get; set; }

        /// <summary>
        /// Name of the backup set the backup item belongs to
        /// </summary>
        [Input("backupSetName")]
        public Input<string>? BackupSetName { get; set; }

        /// <summary>
        /// Unique name of container
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// Time for deferred deletion in UTC
        /// </summary>
        [Input("deferredDeleteTimeInUTC")]
        public Input<string>? DeferredDeleteTimeInUTC { get; set; }

        /// <summary>
        /// Time remaining before the DS marked for deferred delete is permanently deleted
        /// </summary>
        [Input("deferredDeleteTimeRemaining")]
        public Input<string>? DeferredDeleteTimeRemaining { get; set; }

        /// <summary>
        /// Name of this backup item's fabric.
        /// </summary>
        [Input("fabricName")]
        public Input<string>? FabricName { get; set; }

        /// <summary>
        /// Friendly name of the container.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// Flag to identify whether the deferred deleted DS is to be purged soon
        /// </summary>
        [Input("isDeferredDeleteScheduleUpcoming")]
        public Input<bool>? IsDeferredDeleteScheduleUpcoming { get; set; }

        /// <summary>
        /// Flag to identify that deferred deleted DS is to be moved into Pause state
        /// </summary>
        [Input("isRehydrate")]
        public Input<bool>? IsRehydrate { get; set; }

        /// <summary>
        /// Flag to identify whether the DS is scheduled for deferred delete
        /// </summary>
        [Input("isScheduledForDeferredDelete")]
        public Input<bool>? IsScheduledForDeferredDelete { get; set; }

        /// <summary>
        /// Timestamp when the last (latest) backup copy was created for this backup item.
        /// </summary>
        [Input("lastRecoveryPoint")]
        public Input<string>? LastRecoveryPoint { get; set; }

        /// <summary>
        /// ID of the backup policy with which this item is backed up.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// Indicates consistency of policy object and policy applied to this backup item.
        /// </summary>
        [Input("policyState")]
        public Input<string>? PolicyState { get; set; }

        /// <summary>
        /// Data Plane Service ID of the protected item.
        /// </summary>
        [Input("protectedItemId")]
        public Input<int>? ProtectedItemId { get; set; }

        /// <summary>
        /// backup item type.
        /// </summary>
        [Input("protectedItemType", required: true)]
        public Input<string> ProtectedItemType { get; set; } = null!;

        /// <summary>
        /// Backup state of this backup item.
        /// </summary>
        [Input("protectionState")]
        public Input<string>? ProtectionState { get; set; }

        [Input("sourceAssociations")]
        private InputMap<string>? _sourceAssociations;

        /// <summary>
        /// Loosely coupled (type, value) associations (example - parent of a protected item)
        /// </summary>
        public InputMap<string> SourceAssociations
        {
            get => _sourceAssociations ?? (_sourceAssociations = new InputMap<string>());
            set => _sourceAssociations = value;
        }

        /// <summary>
        /// ARM ID of the resource to be backed up.
        /// </summary>
        [Input("sourceResourceId")]
        public Input<string>? SourceResourceId { get; set; }

        /// <summary>
        /// Type of workload this item represents.
        /// </summary>
        [Input("workloadType")]
        public Input<string>? WorkloadType { get; set; }

        public GenericProtectedItemArgs()
        {
        }
    }
}
