// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.RecoveryServices.V20190615.Outputs
{

    [OutputType]
    public sealed class GenericProtectedItemResponse
    {
        /// <summary>
        /// Type of backup management for the backed up item.
        /// </summary>
        public readonly string? BackupManagementType;
        /// <summary>
        /// Name of the backup set the backup item belongs to
        /// </summary>
        public readonly string? BackupSetName;
        /// <summary>
        /// Unique name of container
        /// </summary>
        public readonly string? ContainerName;
        /// <summary>
        /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        /// </summary>
        public readonly string? CreateMode;
        /// <summary>
        /// Time for deferred deletion in UTC
        /// </summary>
        public readonly string? DeferredDeleteTimeInUTC;
        /// <summary>
        /// Time remaining before the DS marked for deferred delete is permanently deleted
        /// </summary>
        public readonly string? DeferredDeleteTimeRemaining;
        /// <summary>
        /// Name of this backup item's fabric.
        /// </summary>
        public readonly string? FabricName;
        /// <summary>
        /// Friendly name of the container.
        /// </summary>
        public readonly string? FriendlyName;
        /// <summary>
        /// Flag to identify whether the deferred deleted DS is to be purged soon
        /// </summary>
        public readonly bool? IsDeferredDeleteScheduleUpcoming;
        /// <summary>
        /// Flag to identify that deferred deleted DS is to be moved into Pause state
        /// </summary>
        public readonly bool? IsRehydrate;
        /// <summary>
        /// Flag to identify whether the DS is scheduled for deferred delete
        /// </summary>
        public readonly bool? IsScheduledForDeferredDelete;
        /// <summary>
        /// Timestamp when the last (latest) backup copy was created for this backup item.
        /// </summary>
        public readonly string? LastRecoveryPoint;
        /// <summary>
        /// ID of the backup policy with which this item is backed up.
        /// </summary>
        public readonly string? PolicyId;
        /// <summary>
        /// Indicates consistency of policy object and policy applied to this backup item.
        /// </summary>
        public readonly string? PolicyState;
        /// <summary>
        /// Data Plane Service ID of the protected item.
        /// </summary>
        public readonly int? ProtectedItemId;
        /// <summary>
        /// backup item type.
        /// </summary>
        public readonly string ProtectedItemType;
        /// <summary>
        /// Backup state of this backup item.
        /// </summary>
        public readonly string? ProtectionState;
        /// <summary>
        /// Loosely coupled (type, value) associations (example - parent of a protected item)
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SourceAssociations;
        /// <summary>
        /// ARM ID of the resource to be backed up.
        /// </summary>
        public readonly string? SourceResourceId;
        /// <summary>
        /// Type of workload this item represents.
        /// </summary>
        public readonly string? WorkloadType;

        [OutputConstructor]
        private GenericProtectedItemResponse(
            string? backupManagementType,

            string? backupSetName,

            string? containerName,

            string? createMode,

            string? deferredDeleteTimeInUTC,

            string? deferredDeleteTimeRemaining,

            string? fabricName,

            string? friendlyName,

            bool? isDeferredDeleteScheduleUpcoming,

            bool? isRehydrate,

            bool? isScheduledForDeferredDelete,

            string? lastRecoveryPoint,

            string? policyId,

            string? policyState,

            int? protectedItemId,

            string protectedItemType,

            string? protectionState,

            ImmutableDictionary<string, string>? sourceAssociations,

            string? sourceResourceId,

            string? workloadType)
        {
            BackupManagementType = backupManagementType;
            BackupSetName = backupSetName;
            ContainerName = containerName;
            CreateMode = createMode;
            DeferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            DeferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            FabricName = fabricName;
            FriendlyName = friendlyName;
            IsDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            IsRehydrate = isRehydrate;
            IsScheduledForDeferredDelete = isScheduledForDeferredDelete;
            LastRecoveryPoint = lastRecoveryPoint;
            PolicyId = policyId;
            PolicyState = policyState;
            ProtectedItemId = protectedItemId;
            ProtectedItemType = protectedItemType;
            ProtectionState = protectionState;
            SourceAssociations = sourceAssociations;
            SourceResourceId = sourceResourceId;
            WorkloadType = workloadType;
        }
    }
}
