// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RecoveryServices.V20160601
{
    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MonthOfYear : IEquatable<MonthOfYear>
    {
        private readonly string _value;

        private MonthOfYear(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonthOfYear Invalid { get; } = new MonthOfYear("Invalid");
        public static MonthOfYear January { get; } = new MonthOfYear("January");
        public static MonthOfYear February { get; } = new MonthOfYear("February");
        public static MonthOfYear March { get; } = new MonthOfYear("March");
        public static MonthOfYear April { get; } = new MonthOfYear("April");
        public static MonthOfYear May { get; } = new MonthOfYear("May");
        public static MonthOfYear June { get; } = new MonthOfYear("June");
        public static MonthOfYear July { get; } = new MonthOfYear("July");
        public static MonthOfYear August { get; } = new MonthOfYear("August");
        public static MonthOfYear September { get; } = new MonthOfYear("September");
        public static MonthOfYear October { get; } = new MonthOfYear("October");
        public static MonthOfYear November { get; } = new MonthOfYear("November");
        public static MonthOfYear December { get; } = new MonthOfYear("December");

        public static bool operator ==(MonthOfYear left, MonthOfYear right) => left.Equals(right);
        public static bool operator !=(MonthOfYear left, MonthOfYear right) => !left.Equals(right);

        public static explicit operator string(MonthOfYear value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonthOfYear other && Equals(other);
        public bool Equals(MonthOfYear other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The retention duration type of the retention policy.
    /// </summary>
    [EnumType]
    public readonly struct RetentionDurationType : IEquatable<RetentionDurationType>
    {
        private readonly string _value;

        private RetentionDurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionDurationType Invalid { get; } = new RetentionDurationType("Invalid");
        public static RetentionDurationType Days { get; } = new RetentionDurationType("Days");
        public static RetentionDurationType Weeks { get; } = new RetentionDurationType("Weeks");
        public static RetentionDurationType Months { get; } = new RetentionDurationType("Months");
        public static RetentionDurationType Years { get; } = new RetentionDurationType("Years");

        public static bool operator ==(RetentionDurationType left, RetentionDurationType right) => left.Equals(right);
        public static bool operator !=(RetentionDurationType left, RetentionDurationType right) => !left.Equals(right);

        public static explicit operator string(RetentionDurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionDurationType other && Equals(other);
        public bool Equals(RetentionDurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Retention schedule format for the yearly retention policy.
    /// </summary>
    [EnumType]
    public readonly struct RetentionScheduleFormat : IEquatable<RetentionScheduleFormat>
    {
        private readonly string _value;

        private RetentionScheduleFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetentionScheduleFormat Invalid { get; } = new RetentionScheduleFormat("Invalid");
        public static RetentionScheduleFormat Daily { get; } = new RetentionScheduleFormat("Daily");
        public static RetentionScheduleFormat Weekly { get; } = new RetentionScheduleFormat("Weekly");

        public static bool operator ==(RetentionScheduleFormat left, RetentionScheduleFormat right) => left.Equals(right);
        public static bool operator !=(RetentionScheduleFormat left, RetentionScheduleFormat right) => !left.Equals(right);

        public static explicit operator string(RetentionScheduleFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetentionScheduleFormat other && Equals(other);
        public bool Equals(RetentionScheduleFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines the frequency interval (daily or weekly) for the schedule policy.
    /// </summary>
    [EnumType]
    public readonly struct ScheduleRunType : IEquatable<ScheduleRunType>
    {
        private readonly string _value;

        private ScheduleRunType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduleRunType Invalid { get; } = new ScheduleRunType("Invalid");
        public static ScheduleRunType Daily { get; } = new ScheduleRunType("Daily");
        public static ScheduleRunType Weekly { get; } = new ScheduleRunType("Weekly");

        public static bool operator ==(ScheduleRunType left, ScheduleRunType right) => left.Equals(right);
        public static bool operator !=(ScheduleRunType left, ScheduleRunType right) => !left.Equals(right);

        public static explicit operator string(ScheduleRunType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduleRunType other && Equals(other);
        public bool Equals(ScheduleRunType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Sku name.
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard { get; } = new SkuName("Standard");
        public static SkuName RS0 { get; } = new SkuName("RS0");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WeekOfMonth : IEquatable<WeekOfMonth>
    {
        private readonly string _value;

        private WeekOfMonth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WeekOfMonth First { get; } = new WeekOfMonth("First");
        public static WeekOfMonth Second { get; } = new WeekOfMonth("Second");
        public static WeekOfMonth Third { get; } = new WeekOfMonth("Third");
        public static WeekOfMonth Fourth { get; } = new WeekOfMonth("Fourth");
        public static WeekOfMonth Last { get; } = new WeekOfMonth("Last");

        public static bool operator ==(WeekOfMonth left, WeekOfMonth right) => left.Equals(right);
        public static bool operator !=(WeekOfMonth left, WeekOfMonth right) => !left.Equals(right);

        public static explicit operator string(WeekOfMonth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WeekOfMonth other && Equals(other);
        public bool Equals(WeekOfMonth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
