// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.RecoveryServices.V20220901Preview.Outputs
{

    /// <summary>
    /// Azure SQL workload-specific backup item.
    /// </summary>
    [OutputType]
    public sealed class AzureSqlProtectedItemResponse
    {
        /// <summary>
        /// Type of backup management for the backed up item.
        /// </summary>
        public readonly string BackupManagementType;
        /// <summary>
        /// Name of the backup set the backup item belongs to
        /// </summary>
        public readonly string? BackupSetName;
        /// <summary>
        /// Unique name of container
        /// </summary>
        public readonly string? ContainerName;
        /// <summary>
        /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        /// </summary>
        public readonly string? CreateMode;
        /// <summary>
        /// Time for deferred deletion in UTC
        /// </summary>
        public readonly string? DeferredDeleteTimeInUTC;
        /// <summary>
        /// Time remaining before the DS marked for deferred delete is permanently deleted
        /// </summary>
        public readonly string? DeferredDeleteTimeRemaining;
        /// <summary>
        /// Additional information for this backup item.
        /// </summary>
        public readonly Outputs.AzureSqlProtectedItemExtendedInfoResponse? ExtendedInfo;
        /// <summary>
        /// Flag to identify whether datasource is protected in archive
        /// </summary>
        public readonly bool? IsArchiveEnabled;
        /// <summary>
        /// Flag to identify whether the deferred deleted DS is to be purged soon
        /// </summary>
        public readonly bool? IsDeferredDeleteScheduleUpcoming;
        /// <summary>
        /// Flag to identify that deferred deleted DS is to be moved into Pause state
        /// </summary>
        public readonly bool? IsRehydrate;
        /// <summary>
        /// Flag to identify whether the DS is scheduled for deferred delete
        /// </summary>
        public readonly bool? IsScheduledForDeferredDelete;
        /// <summary>
        /// Timestamp when the last (latest) backup copy was created for this backup item.
        /// </summary>
        public readonly string? LastRecoveryPoint;
        /// <summary>
        /// ID of the backup policy with which this item is backed up.
        /// </summary>
        public readonly string? PolicyId;
        /// <summary>
        /// Name of the policy used for protection
        /// </summary>
        public readonly string? PolicyName;
        /// <summary>
        /// Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
        /// </summary>
        public readonly string? ProtectedItemDataId;
        /// <summary>
        /// backup item type.
        /// Expected value is 'Microsoft.Sql/servers/databases'.
        /// </summary>
        public readonly string ProtectedItemType;
        /// <summary>
        /// Backup state of the backed up item.
        /// </summary>
        public readonly string? ProtectionState;
        /// <summary>
        /// ResourceGuardOperationRequests on which LAC check will be performed
        /// </summary>
        public readonly ImmutableArray<string> ResourceGuardOperationRequests;
        /// <summary>
        /// Soft delete retention period in days
        /// </summary>
        public readonly int? SoftDeleteRetentionPeriod;
        /// <summary>
        /// ARM ID of the resource to be backed up.
        /// </summary>
        public readonly string? SourceResourceId;
        /// <summary>
        /// Type of workload this item represents.
        /// </summary>
        public readonly string WorkloadType;

        [OutputConstructor]
        private AzureSqlProtectedItemResponse(
            string backupManagementType,

            string? backupSetName,

            string? containerName,

            string? createMode,

            string? deferredDeleteTimeInUTC,

            string? deferredDeleteTimeRemaining,

            Outputs.AzureSqlProtectedItemExtendedInfoResponse? extendedInfo,

            bool? isArchiveEnabled,

            bool? isDeferredDeleteScheduleUpcoming,

            bool? isRehydrate,

            bool? isScheduledForDeferredDelete,

            string? lastRecoveryPoint,

            string? policyId,

            string? policyName,

            string? protectedItemDataId,

            string protectedItemType,

            string? protectionState,

            ImmutableArray<string> resourceGuardOperationRequests,

            int? softDeleteRetentionPeriod,

            string? sourceResourceId,

            string workloadType)
        {
            BackupManagementType = backupManagementType;
            BackupSetName = backupSetName;
            ContainerName = containerName;
            CreateMode = createMode;
            DeferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            DeferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            ExtendedInfo = extendedInfo;
            IsArchiveEnabled = isArchiveEnabled;
            IsDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            IsRehydrate = isRehydrate;
            IsScheduledForDeferredDelete = isScheduledForDeferredDelete;
            LastRecoveryPoint = lastRecoveryPoint;
            PolicyId = policyId;
            PolicyName = policyName;
            ProtectedItemDataId = protectedItemDataId;
            ProtectedItemType = protectedItemType;
            ProtectionState = protectionState;
            ResourceGuardOperationRequests = resourceGuardOperationRequests;
            SoftDeleteRetentionPeriod = softDeleteRetentionPeriod;
            SourceResourceId = sourceResourceId;
            WorkloadType = workloadType;
        }
    }
}
