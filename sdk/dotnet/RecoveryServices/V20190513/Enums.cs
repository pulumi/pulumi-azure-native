// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.RecoveryServices.V20190513
{
    /// <summary>
    /// Type of backup management for the backed up item.
    /// </summary>
    [EnumType]
    public readonly struct BackupManagementType : IEquatable<BackupManagementType>
    {
        private readonly string _value;

        private BackupManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupManagementType Invalid { get; } = new BackupManagementType("Invalid");
        public static BackupManagementType AzureIaasVM { get; } = new BackupManagementType("AzureIaasVM");
        public static BackupManagementType MAB { get; } = new BackupManagementType("MAB");
        public static BackupManagementType DPM { get; } = new BackupManagementType("DPM");
        public static BackupManagementType AzureBackupServer { get; } = new BackupManagementType("AzureBackupServer");
        public static BackupManagementType AzureSql { get; } = new BackupManagementType("AzureSql");
        public static BackupManagementType AzureStorage { get; } = new BackupManagementType("AzureStorage");
        public static BackupManagementType AzureWorkload { get; } = new BackupManagementType("AzureWorkload");
        public static BackupManagementType DefaultBackup { get; } = new BackupManagementType("DefaultBackup");

        public static bool operator ==(BackupManagementType left, BackupManagementType right) => left.Equals(right);
        public static bool operator !=(BackupManagementType left, BackupManagementType right) => !left.Equals(right);

        public static explicit operator string(BackupManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupManagementType other && Equals(other);
        public bool Equals(BackupManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
    /// </summary>
    [EnumType]
    public readonly struct CreateMode : IEquatable<CreateMode>
    {
        private readonly string _value;

        private CreateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateMode Invalid { get; } = new CreateMode("Invalid");
        public static CreateMode Default { get; } = new CreateMode("Default");
        public static CreateMode Recover { get; } = new CreateMode("Recover");

        public static bool operator ==(CreateMode left, CreateMode right) => left.Equals(right);
        public static bool operator !=(CreateMode left, CreateMode right) => !left.Equals(right);

        public static explicit operator string(CreateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateMode other && Equals(other);
        public bool Equals(CreateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of workload this item represents.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType Invalid { get; } = new DataSourceType("Invalid");
        public static DataSourceType VM { get; } = new DataSourceType("VM");
        public static DataSourceType FileFolder { get; } = new DataSourceType("FileFolder");
        public static DataSourceType AzureSqlDb { get; } = new DataSourceType("AzureSqlDb");
        public static DataSourceType SQLDB { get; } = new DataSourceType("SQLDB");
        public static DataSourceType Exchange { get; } = new DataSourceType("Exchange");
        public static DataSourceType Sharepoint { get; } = new DataSourceType("Sharepoint");
        public static DataSourceType VMwareVM { get; } = new DataSourceType("VMwareVM");
        public static DataSourceType SystemState { get; } = new DataSourceType("SystemState");
        public static DataSourceType Client { get; } = new DataSourceType("Client");
        public static DataSourceType GenericDataSource { get; } = new DataSourceType("GenericDataSource");
        public static DataSourceType SQLDataBase { get; } = new DataSourceType("SQLDataBase");
        public static DataSourceType AzureFileShare { get; } = new DataSourceType("AzureFileShare");
        public static DataSourceType SAPHanaDatabase { get; } = new DataSourceType("SAPHanaDatabase");
        public static DataSourceType SAPAseDatabase { get; } = new DataSourceType("SAPAseDatabase");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health status of protected item
    /// </summary>
    [EnumType]
    public readonly struct HealthStatus : IEquatable<HealthStatus>
    {
        private readonly string _value;

        private HealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HealthStatus Passed { get; } = new HealthStatus("Passed");
        public static HealthStatus ActionRequired { get; } = new HealthStatus("ActionRequired");
        public static HealthStatus ActionSuggested { get; } = new HealthStatus("ActionSuggested");
        public static HealthStatus Invalid { get; } = new HealthStatus("Invalid");

        public static bool operator ==(HealthStatus left, HealthStatus right) => left.Equals(right);
        public static bool operator !=(HealthStatus left, HealthStatus right) => !left.Equals(right);

        public static explicit operator string(HealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HealthStatus other && Equals(other);
        public bool Equals(HealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Last backup operation status. Possible values: Healthy, Unhealthy.
    /// </summary>
    [EnumType]
    public readonly struct LastBackupStatus : IEquatable<LastBackupStatus>
    {
        private readonly string _value;

        private LastBackupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LastBackupStatus Invalid { get; } = new LastBackupStatus("Invalid");
        public static LastBackupStatus Healthy { get; } = new LastBackupStatus("Healthy");
        public static LastBackupStatus Unhealthy { get; } = new LastBackupStatus("Unhealthy");
        public static LastBackupStatus IRPending { get; } = new LastBackupStatus("IRPending");

        public static bool operator ==(LastBackupStatus left, LastBackupStatus right) => left.Equals(right);
        public static bool operator !=(LastBackupStatus left, LastBackupStatus right) => !left.Equals(right);

        public static explicit operator string(LastBackupStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LastBackupStatus other && Equals(other);
        public bool Equals(LastBackupStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health status of the backup item, evaluated based on last heartbeat received
    /// </summary>
    [EnumType]
    public readonly struct ProtectedItemHealthStatus : IEquatable<ProtectedItemHealthStatus>
    {
        private readonly string _value;

        private ProtectedItemHealthStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectedItemHealthStatus Invalid { get; } = new ProtectedItemHealthStatus("Invalid");
        public static ProtectedItemHealthStatus Healthy { get; } = new ProtectedItemHealthStatus("Healthy");
        public static ProtectedItemHealthStatus Unhealthy { get; } = new ProtectedItemHealthStatus("Unhealthy");
        public static ProtectedItemHealthStatus NotReachable { get; } = new ProtectedItemHealthStatus("NotReachable");
        public static ProtectedItemHealthStatus IRPending { get; } = new ProtectedItemHealthStatus("IRPending");

        public static bool operator ==(ProtectedItemHealthStatus left, ProtectedItemHealthStatus right) => left.Equals(right);
        public static bool operator !=(ProtectedItemHealthStatus left, ProtectedItemHealthStatus right) => !left.Equals(right);

        public static explicit operator string(ProtectedItemHealthStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectedItemHealthStatus other && Equals(other);
        public bool Equals(ProtectedItemHealthStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protection state of the backup engine
    /// </summary>
    [EnumType]
    public readonly struct ProtectedItemState : IEquatable<ProtectedItemState>
    {
        private readonly string _value;

        private ProtectedItemState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectedItemState Invalid { get; } = new ProtectedItemState("Invalid");
        public static ProtectedItemState IRPending { get; } = new ProtectedItemState("IRPending");
        public static ProtectedItemState Protected { get; } = new ProtectedItemState("Protected");
        public static ProtectedItemState ProtectionError { get; } = new ProtectedItemState("ProtectionError");
        public static ProtectedItemState ProtectionStopped { get; } = new ProtectedItemState("ProtectionStopped");
        public static ProtectedItemState ProtectionPaused { get; } = new ProtectedItemState("ProtectionPaused");

        public static bool operator ==(ProtectedItemState left, ProtectedItemState right) => left.Equals(right);
        public static bool operator !=(ProtectedItemState left, ProtectedItemState right) => !left.Equals(right);

        public static explicit operator string(ProtectedItemState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectedItemState other && Equals(other);
        public bool Equals(ProtectedItemState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Backup state of this backup item.
    /// </summary>
    [EnumType]
    public readonly struct ProtectionState : IEquatable<ProtectionState>
    {
        private readonly string _value;

        private ProtectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectionState Invalid { get; } = new ProtectionState("Invalid");
        public static ProtectionState IRPending { get; } = new ProtectionState("IRPending");
        public static ProtectionState Protected { get; } = new ProtectionState("Protected");
        public static ProtectionState ProtectionError { get; } = new ProtectionState("ProtectionError");
        public static ProtectionState ProtectionStopped { get; } = new ProtectionState("ProtectionStopped");
        public static ProtectionState ProtectionPaused { get; } = new ProtectionState("ProtectionPaused");

        public static bool operator ==(ProtectionState left, ProtectionState right) => left.Equals(right);
        public static bool operator !=(ProtectionState left, ProtectionState right) => !left.Equals(right);

        public static explicit operator string(ProtectionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectionState other && Equals(other);
        public bool Equals(ProtectionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
