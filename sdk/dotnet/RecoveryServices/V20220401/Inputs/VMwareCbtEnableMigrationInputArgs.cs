// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.RecoveryServices.V20220401.Inputs
{

    /// <summary>
    /// VMwareCbt specific enable migration input.
    /// </summary>
    public sealed class VMwareCbtEnableMigrationInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The data mover run as account Id.
        /// </summary>
        [Input("dataMoverRunAsAccountId", required: true)]
        public Input<string> DataMoverRunAsAccountId { get; set; } = null!;

        [Input("disksToInclude", required: true)]
        private InputList<Inputs.VMwareCbtDiskInputArgs>? _disksToInclude;

        /// <summary>
        /// The disks to include list.
        /// </summary>
        public InputList<Inputs.VMwareCbtDiskInputArgs> DisksToInclude
        {
            get => _disksToInclude ?? (_disksToInclude = new InputList<Inputs.VMwareCbtDiskInputArgs>());
            set => _disksToInclude = value;
        }

        /// <summary>
        /// The class type.
        /// Expected value is 'VMwareCbt'.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// License type.
        /// </summary>
        [Input("licenseType")]
        public InputUnion<string, Pulumi.AzureNative.RecoveryServices.V20220401.LicenseType>? LicenseType { get; set; }

        /// <summary>
        /// A value indicating whether auto resync is to be done.
        /// </summary>
        [Input("performAutoResync")]
        public Input<string>? PerformAutoResync { get; set; }

        [Input("seedDiskTags")]
        private InputMap<string>? _seedDiskTags;

        /// <summary>
        /// The tags for the seed disks.
        /// </summary>
        public InputMap<string> SeedDiskTags
        {
            get => _seedDiskTags ?? (_seedDiskTags = new InputMap<string>());
            set => _seedDiskTags = value;
        }

        /// <summary>
        /// The snapshot run as account Id.
        /// </summary>
        [Input("snapshotRunAsAccountId", required: true)]
        public Input<string> SnapshotRunAsAccountId { get; set; } = null!;

        /// <summary>
        /// The SQL Server license type.
        /// </summary>
        [Input("sqlServerLicenseType")]
        public InputUnion<string, Pulumi.AzureNative.RecoveryServices.V20220401.SqlServerLicenseType>? SqlServerLicenseType { get; set; }

        /// <summary>
        /// The target availability set ARM Id.
        /// </summary>
        [Input("targetAvailabilitySetId")]
        public Input<string>? TargetAvailabilitySetId { get; set; }

        /// <summary>
        /// The target availability zone.
        /// </summary>
        [Input("targetAvailabilityZone")]
        public Input<string>? TargetAvailabilityZone { get; set; }

        /// <summary>
        /// The target boot diagnostics storage account ARM Id.
        /// </summary>
        [Input("targetBootDiagnosticsStorageAccountId")]
        public Input<string>? TargetBootDiagnosticsStorageAccountId { get; set; }

        [Input("targetDiskTags")]
        private InputMap<string>? _targetDiskTags;

        /// <summary>
        /// The tags for the target disks.
        /// </summary>
        public InputMap<string> TargetDiskTags
        {
            get => _targetDiskTags ?? (_targetDiskTags = new InputMap<string>());
            set => _targetDiskTags = value;
        }

        /// <summary>
        /// The target network ARM Id.
        /// </summary>
        [Input("targetNetworkId", required: true)]
        public Input<string> TargetNetworkId { get; set; } = null!;

        [Input("targetNicTags")]
        private InputMap<string>? _targetNicTags;

        /// <summary>
        /// The tags for the target NICs.
        /// </summary>
        public InputMap<string> TargetNicTags
        {
            get => _targetNicTags ?? (_targetNicTags = new InputMap<string>());
            set => _targetNicTags = value;
        }

        /// <summary>
        /// The target proximity placement group ARM Id.
        /// </summary>
        [Input("targetProximityPlacementGroupId")]
        public Input<string>? TargetProximityPlacementGroupId { get; set; }

        /// <summary>
        /// The target resource group ARM Id.
        /// </summary>
        [Input("targetResourceGroupId", required: true)]
        public Input<string> TargetResourceGroupId { get; set; } = null!;

        /// <summary>
        /// The target subnet name.
        /// </summary>
        [Input("targetSubnetName")]
        public Input<string>? TargetSubnetName { get; set; }

        /// <summary>
        /// The target VM name.
        /// </summary>
        [Input("targetVmName")]
        public Input<string>? TargetVmName { get; set; }

        /// <summary>
        /// The target VM size.
        /// </summary>
        [Input("targetVmSize")]
        public Input<string>? TargetVmSize { get; set; }

        [Input("targetVmTags")]
        private InputMap<string>? _targetVmTags;

        /// <summary>
        /// The target VM tags.
        /// </summary>
        public InputMap<string> TargetVmTags
        {
            get => _targetVmTags ?? (_targetVmTags = new InputMap<string>());
            set => _targetVmTags = value;
        }

        /// <summary>
        /// The selected test network ARM Id.
        /// </summary>
        [Input("testNetworkId")]
        public Input<string>? TestNetworkId { get; set; }

        /// <summary>
        /// The selected test subnet name.
        /// </summary>
        [Input("testSubnetName")]
        public Input<string>? TestSubnetName { get; set; }

        /// <summary>
        /// The ARM Id of the VM discovered in VMware.
        /// </summary>
        [Input("vmwareMachineId", required: true)]
        public Input<string> VmwareMachineId { get; set; } = null!;

        public VMwareCbtEnableMigrationInputArgs()
        {
        }
        public static new VMwareCbtEnableMigrationInputArgs Empty => new VMwareCbtEnableMigrationInputArgs();
    }
}
