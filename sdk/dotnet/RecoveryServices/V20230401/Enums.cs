// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RecoveryServices.V20230401
{
    /// <summary>
    /// A value indicating whether the auto update is enabled.
    /// </summary>
    [EnumType]
    public readonly struct AgentAutoUpdateStatus : IEquatable<AgentAutoUpdateStatus>
    {
        private readonly string _value;

        private AgentAutoUpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentAutoUpdateStatus Disabled { get; } = new AgentAutoUpdateStatus("Disabled");
        public static AgentAutoUpdateStatus Enabled { get; } = new AgentAutoUpdateStatus("Enabled");

        public static bool operator ==(AgentAutoUpdateStatus left, AgentAutoUpdateStatus right) => left.Equals(right);
        public static bool operator !=(AgentAutoUpdateStatus left, AgentAutoUpdateStatus right) => !left.Equals(right);

        public static explicit operator string(AgentAutoUpdateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentAutoUpdateStatus other && Equals(other);
        public bool Equals(AgentAutoUpdateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AlertsState : IEquatable<AlertsState>
    {
        private readonly string _value;

        private AlertsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertsState Enabled { get; } = new AlertsState("Enabled");
        public static AlertsState Disabled { get; } = new AlertsState("Disabled");

        public static bool operator ==(AlertsState left, AlertsState right) => left.Equals(right);
        public static bool operator !=(AlertsState left, AlertsState right) => !left.Equals(right);

        public static explicit operator string(AlertsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertsState other && Equals(other);
        public bool Equals(AlertsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A value indicating the type authentication to use for automation Account.
    /// </summary>
    [EnumType]
    public readonly struct AutomationAccountAuthenticationType : IEquatable<AutomationAccountAuthenticationType>
    {
        private readonly string _value;

        private AutomationAccountAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationAccountAuthenticationType RunAsAccount { get; } = new AutomationAccountAuthenticationType("RunAsAccount");
        public static AutomationAccountAuthenticationType SystemAssignedIdentity { get; } = new AutomationAccountAuthenticationType("SystemAssignedIdentity");

        public static bool operator ==(AutomationAccountAuthenticationType left, AutomationAccountAuthenticationType right) => left.Equals(right);
        public static bool operator !=(AutomationAccountAuthenticationType left, AutomationAccountAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(AutomationAccountAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationAccountAuthenticationType other && Equals(other);
        public bool Equals(AutomationAccountAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CrossSubscriptionRestoreState : IEquatable<CrossSubscriptionRestoreState>
    {
        private readonly string _value;

        private CrossSubscriptionRestoreState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CrossSubscriptionRestoreState Enabled { get; } = new CrossSubscriptionRestoreState("Enabled");
        public static CrossSubscriptionRestoreState Disabled { get; } = new CrossSubscriptionRestoreState("Disabled");
        public static CrossSubscriptionRestoreState PermanentlyDisabled { get; } = new CrossSubscriptionRestoreState("PermanentlyDisabled");

        public static bool operator ==(CrossSubscriptionRestoreState left, CrossSubscriptionRestoreState right) => left.Equals(right);
        public static bool operator !=(CrossSubscriptionRestoreState left, CrossSubscriptionRestoreState right) => !left.Equals(right);

        public static explicit operator string(CrossSubscriptionRestoreState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CrossSubscriptionRestoreState other && Equals(other);
        public bool Equals(CrossSubscriptionRestoreState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The disk type.
    /// </summary>
    [EnumType]
    public readonly struct DiskAccountType : IEquatable<DiskAccountType>
    {
        private readonly string _value;

        private DiskAccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DiskAccountType Standard_LRS { get; } = new DiskAccountType("Standard_LRS");
        public static DiskAccountType Premium_LRS { get; } = new DiskAccountType("Premium_LRS");
        public static DiskAccountType StandardSSD_LRS { get; } = new DiskAccountType("StandardSSD_LRS");

        public static bool operator ==(DiskAccountType left, DiskAccountType right) => left.Equals(right);
        public static bool operator !=(DiskAccountType left, DiskAccountType right) => !left.Equals(right);

        public static explicit operator string(DiskAccountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DiskAccountType other && Equals(other);
        public bool Equals(DiskAccountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The extended location type.
    /// </summary>
    [EnumType]
    public readonly struct ExtendedLocationType : IEquatable<ExtendedLocationType>
    {
        private readonly string _value;

        private ExtendedLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ExtendedLocationType EdgeZone { get; } = new ExtendedLocationType("EdgeZone");

        public static bool operator ==(ExtendedLocationType left, ExtendedLocationType right) => left.Equals(right);
        public static bool operator !=(ExtendedLocationType left, ExtendedLocationType right) => !left.Equals(right);

        public static explicit operator string(ExtendedLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ExtendedLocationType other && Equals(other);
        public bool Equals(ExtendedLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The failover deployment model.
    /// </summary>
    [EnumType]
    public readonly struct FailoverDeploymentModel : IEquatable<FailoverDeploymentModel>
    {
        private readonly string _value;

        private FailoverDeploymentModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FailoverDeploymentModel NotApplicable { get; } = new FailoverDeploymentModel("NotApplicable");
        public static FailoverDeploymentModel Classic { get; } = new FailoverDeploymentModel("Classic");
        public static FailoverDeploymentModel ResourceManager { get; } = new FailoverDeploymentModel("ResourceManager");

        public static bool operator ==(FailoverDeploymentModel left, FailoverDeploymentModel right) => left.Equals(right);
        public static bool operator !=(FailoverDeploymentModel left, FailoverDeploymentModel right) => !left.Equals(right);

        public static explicit operator string(FailoverDeploymentModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FailoverDeploymentModel other && Equals(other);
        public bool Equals(FailoverDeploymentModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ImmutabilityState : IEquatable<ImmutabilityState>
    {
        private readonly string _value;

        private ImmutabilityState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImmutabilityState Disabled { get; } = new ImmutabilityState("Disabled");
        public static ImmutabilityState Unlocked { get; } = new ImmutabilityState("Unlocked");
        public static ImmutabilityState Locked { get; } = new ImmutabilityState("Locked");

        public static bool operator ==(ImmutabilityState left, ImmutabilityState right) => left.Equals(right);
        public static bool operator !=(ImmutabilityState left, ImmutabilityState right) => !left.Equals(right);

        public static explicit operator string(ImmutabilityState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImmutabilityState other && Equals(other);
        public bool Equals(ImmutabilityState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enabling/Disabling the Double Encryption state
    /// </summary>
    [EnumType]
    public readonly struct InfrastructureEncryptionState : IEquatable<InfrastructureEncryptionState>
    {
        private readonly string _value;

        private InfrastructureEncryptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InfrastructureEncryptionState Enabled { get; } = new InfrastructureEncryptionState("Enabled");
        public static InfrastructureEncryptionState Disabled { get; } = new InfrastructureEncryptionState("Disabled");

        public static bool operator ==(InfrastructureEncryptionState left, InfrastructureEncryptionState right) => left.Equals(right);
        public static bool operator !=(InfrastructureEncryptionState left, InfrastructureEncryptionState right) => !left.Equals(right);

        public static explicit operator string(InfrastructureEncryptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InfrastructureEncryptionState other && Equals(other);
        public bool Equals(InfrastructureEncryptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The license type.
    /// </summary>
    [EnumType]
    public readonly struct LicenseType : IEquatable<LicenseType>
    {
        private readonly string _value;

        private LicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseType NotSpecified { get; } = new LicenseType("NotSpecified");
        public static LicenseType NoLicenseType { get; } = new LicenseType("NoLicenseType");
        public static LicenseType WindowsServer { get; } = new LicenseType("WindowsServer");

        public static bool operator ==(LicenseType left, LicenseType right) => left.Equals(right);
        public static bool operator !=(LicenseType left, LicenseType right) => !left.Equals(right);

        public static explicit operator string(LicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseType other && Equals(other);
        public bool Equals(LicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PossibleOperationsDirections : IEquatable<PossibleOperationsDirections>
    {
        private readonly string _value;

        private PossibleOperationsDirections(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PossibleOperationsDirections PrimaryToRecovery { get; } = new PossibleOperationsDirections("PrimaryToRecovery");
        public static PossibleOperationsDirections RecoveryToPrimary { get; } = new PossibleOperationsDirections("RecoveryToPrimary");

        public static bool operator ==(PossibleOperationsDirections left, PossibleOperationsDirections right) => left.Equals(right);
        public static bool operator !=(PossibleOperationsDirections left, PossibleOperationsDirections right) => !left.Equals(right);

        public static explicit operator string(PossibleOperationsDirections value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PossibleOperationsDirections other && Equals(other);
        public bool Equals(PossibleOperationsDirections other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// property to enable or disable resource provider inbound network traffic from public clients
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The fabric location.
    /// </summary>
    [EnumType]
    public readonly struct RecoveryPlanActionLocation : IEquatable<RecoveryPlanActionLocation>
    {
        private readonly string _value;

        private RecoveryPlanActionLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecoveryPlanActionLocation Primary { get; } = new RecoveryPlanActionLocation("Primary");
        public static RecoveryPlanActionLocation Recovery { get; } = new RecoveryPlanActionLocation("Recovery");

        public static bool operator ==(RecoveryPlanActionLocation left, RecoveryPlanActionLocation right) => left.Equals(right);
        public static bool operator !=(RecoveryPlanActionLocation left, RecoveryPlanActionLocation right) => !left.Equals(right);

        public static explicit operator string(RecoveryPlanActionLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecoveryPlanActionLocation other && Equals(other);
        public bool Equals(RecoveryPlanActionLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The group type.
    /// </summary>
    [EnumType]
    public readonly struct RecoveryPlanGroupType : IEquatable<RecoveryPlanGroupType>
    {
        private readonly string _value;

        private RecoveryPlanGroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecoveryPlanGroupType Shutdown { get; } = new RecoveryPlanGroupType("Shutdown");
        public static RecoveryPlanGroupType Boot { get; } = new RecoveryPlanGroupType("Boot");
        public static RecoveryPlanGroupType Failover { get; } = new RecoveryPlanGroupType("Failover");

        public static bool operator ==(RecoveryPlanGroupType left, RecoveryPlanGroupType right) => left.Equals(right);
        public static bool operator !=(RecoveryPlanGroupType left, RecoveryPlanGroupType right) => !left.Equals(right);

        public static explicit operator string(RecoveryPlanGroupType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecoveryPlanGroupType other && Equals(other);
        public bool Equals(RecoveryPlanGroupType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ReplicationProtectedItemOperation : IEquatable<ReplicationProtectedItemOperation>
    {
        private readonly string _value;

        private ReplicationProtectedItemOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationProtectedItemOperation ReverseReplicate { get; } = new ReplicationProtectedItemOperation("ReverseReplicate");
        public static ReplicationProtectedItemOperation Commit { get; } = new ReplicationProtectedItemOperation("Commit");
        public static ReplicationProtectedItemOperation PlannedFailover { get; } = new ReplicationProtectedItemOperation("PlannedFailover");
        public static ReplicationProtectedItemOperation UnplannedFailover { get; } = new ReplicationProtectedItemOperation("UnplannedFailover");
        public static ReplicationProtectedItemOperation DisableProtection { get; } = new ReplicationProtectedItemOperation("DisableProtection");
        public static ReplicationProtectedItemOperation TestFailover { get; } = new ReplicationProtectedItemOperation("TestFailover");
        public static ReplicationProtectedItemOperation TestFailoverCleanup { get; } = new ReplicationProtectedItemOperation("TestFailoverCleanup");
        public static ReplicationProtectedItemOperation Failback { get; } = new ReplicationProtectedItemOperation("Failback");
        public static ReplicationProtectedItemOperation FinalizeFailback { get; } = new ReplicationProtectedItemOperation("FinalizeFailback");
        public static ReplicationProtectedItemOperation CancelFailover { get; } = new ReplicationProtectedItemOperation("CancelFailover");
        public static ReplicationProtectedItemOperation ChangePit { get; } = new ReplicationProtectedItemOperation("ChangePit");
        public static ReplicationProtectedItemOperation RepairReplication { get; } = new ReplicationProtectedItemOperation("RepairReplication");
        public static ReplicationProtectedItemOperation SwitchProtection { get; } = new ReplicationProtectedItemOperation("SwitchProtection");
        public static ReplicationProtectedItemOperation CompleteMigration { get; } = new ReplicationProtectedItemOperation("CompleteMigration");

        public static bool operator ==(ReplicationProtectedItemOperation left, ReplicationProtectedItemOperation right) => left.Equals(right);
        public static bool operator !=(ReplicationProtectedItemOperation left, ReplicationProtectedItemOperation right) => !left.Equals(right);

        public static explicit operator string(ReplicationProtectedItemOperation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationProtectedItemOperation other && Equals(other);
        public bool Equals(ReplicationProtectedItemOperation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The target VM security type.
    /// </summary>
    [EnumType]
    public readonly struct SecurityType : IEquatable<SecurityType>
    {
        private readonly string _value;

        private SecurityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityType None { get; } = new SecurityType("None");
        public static SecurityType TrustedLaunch { get; } = new SecurityType("TrustedLaunch");
        public static SecurityType ConfidentialVM { get; } = new SecurityType("ConfidentialVM");

        public static bool operator ==(SecurityType left, SecurityType right) => left.Equals(right);
        public static bool operator !=(SecurityType left, SecurityType right) => !left.Equals(right);

        public static explicit operator string(SecurityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityType other && Equals(other);
        public bool Equals(SecurityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.
    /// </summary>
    [EnumType]
    public readonly struct SetMultiVmSyncStatus : IEquatable<SetMultiVmSyncStatus>
    {
        private readonly string _value;

        private SetMultiVmSyncStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SetMultiVmSyncStatus Enable { get; } = new SetMultiVmSyncStatus("Enable");
        public static SetMultiVmSyncStatus Disable { get; } = new SetMultiVmSyncStatus("Disable");

        public static bool operator ==(SetMultiVmSyncStatus left, SetMultiVmSyncStatus right) => left.Equals(right);
        public static bool operator !=(SetMultiVmSyncStatus left, SetMultiVmSyncStatus right) => !left.Equals(right);

        public static explicit operator string(SetMultiVmSyncStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SetMultiVmSyncStatus other && Equals(other);
        public bool Equals(SetMultiVmSyncStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard { get; } = new SkuName("Standard");
        public static SkuName RS0 { get; } = new SkuName("RS0");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The SQL Server license type.
    /// </summary>
    [EnumType]
    public readonly struct SqlServerLicenseType : IEquatable<SqlServerLicenseType>
    {
        private readonly string _value;

        private SqlServerLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SqlServerLicenseType NotSpecified { get; } = new SqlServerLicenseType("NotSpecified");
        public static SqlServerLicenseType NoLicenseType { get; } = new SqlServerLicenseType("NoLicenseType");
        public static SqlServerLicenseType PAYG { get; } = new SqlServerLicenseType("PAYG");
        public static SqlServerLicenseType AHUB { get; } = new SqlServerLicenseType("AHUB");

        public static bool operator ==(SqlServerLicenseType left, SqlServerLicenseType right) => left.Equals(right);
        public static bool operator !=(SqlServerLicenseType left, SqlServerLicenseType right) => !left.Equals(right);

        public static explicit operator string(SqlServerLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SqlServerLicenseType other && Equals(other);
        public bool Equals(SqlServerLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
