// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.RecoveryServices.V20230801
{
    [EnumType]
    public readonly struct AlertsState : IEquatable<AlertsState>
    {
        private readonly string _value;

        private AlertsState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AlertsState Enabled { get; } = new AlertsState("Enabled");
        public static AlertsState Disabled { get; } = new AlertsState("Disabled");

        public static bool operator ==(AlertsState left, AlertsState right) => left.Equals(right);
        public static bool operator !=(AlertsState left, AlertsState right) => !left.Equals(right);

        public static explicit operator string(AlertsState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AlertsState other && Equals(other);
        public bool Equals(AlertsState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Flag to show if Cross Region Restore is enabled on the Vault or not
    /// </summary>
    [EnumType]
    public readonly struct CrossRegionRestore : IEquatable<CrossRegionRestore>
    {
        private readonly string _value;

        private CrossRegionRestore(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CrossRegionRestore Enabled { get; } = new CrossRegionRestore("Enabled");
        public static CrossRegionRestore Disabled { get; } = new CrossRegionRestore("Disabled");

        public static bool operator ==(CrossRegionRestore left, CrossRegionRestore right) => left.Equals(right);
        public static bool operator !=(CrossRegionRestore left, CrossRegionRestore right) => !left.Equals(right);

        public static explicit operator string(CrossRegionRestore value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CrossRegionRestore other && Equals(other);
        public bool Equals(CrossRegionRestore other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CrossSubscriptionRestoreState : IEquatable<CrossSubscriptionRestoreState>
    {
        private readonly string _value;

        private CrossSubscriptionRestoreState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CrossSubscriptionRestoreState Enabled { get; } = new CrossSubscriptionRestoreState("Enabled");
        public static CrossSubscriptionRestoreState Disabled { get; } = new CrossSubscriptionRestoreState("Disabled");
        public static CrossSubscriptionRestoreState PermanentlyDisabled { get; } = new CrossSubscriptionRestoreState("PermanentlyDisabled");

        public static bool operator ==(CrossSubscriptionRestoreState left, CrossSubscriptionRestoreState right) => left.Equals(right);
        public static bool operator !=(CrossSubscriptionRestoreState left, CrossSubscriptionRestoreState right) => !left.Equals(right);

        public static explicit operator string(CrossSubscriptionRestoreState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CrossSubscriptionRestoreState other && Equals(other);
        public bool Equals(CrossSubscriptionRestoreState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EnhancedSecurityState : IEquatable<EnhancedSecurityState>
    {
        private readonly string _value;

        private EnhancedSecurityState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnhancedSecurityState Invalid { get; } = new EnhancedSecurityState("Invalid");
        public static EnhancedSecurityState Enabled { get; } = new EnhancedSecurityState("Enabled");
        public static EnhancedSecurityState Disabled { get; } = new EnhancedSecurityState("Disabled");
        public static EnhancedSecurityState AlwaysON { get; } = new EnhancedSecurityState("AlwaysON");

        public static bool operator ==(EnhancedSecurityState left, EnhancedSecurityState right) => left.Equals(right);
        public static bool operator !=(EnhancedSecurityState left, EnhancedSecurityState right) => !left.Equals(right);

        public static explicit operator string(EnhancedSecurityState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnhancedSecurityState other && Equals(other);
        public bool Equals(EnhancedSecurityState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ImmutabilityState : IEquatable<ImmutabilityState>
    {
        private readonly string _value;

        private ImmutabilityState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImmutabilityState Disabled { get; } = new ImmutabilityState("Disabled");
        public static ImmutabilityState Unlocked { get; } = new ImmutabilityState("Unlocked");
        public static ImmutabilityState Locked { get; } = new ImmutabilityState("Locked");

        public static bool operator ==(ImmutabilityState left, ImmutabilityState right) => left.Equals(right);
        public static bool operator !=(ImmutabilityState left, ImmutabilityState right) => !left.Equals(right);

        public static explicit operator string(ImmutabilityState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImmutabilityState other && Equals(other);
        public bool Equals(ImmutabilityState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enabling/Disabling the Double Encryption state
    /// </summary>
    [EnumType]
    public readonly struct InfrastructureEncryptionState : IEquatable<InfrastructureEncryptionState>
    {
        private readonly string _value;

        private InfrastructureEncryptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InfrastructureEncryptionState Enabled { get; } = new InfrastructureEncryptionState("Enabled");
        public static InfrastructureEncryptionState Disabled { get; } = new InfrastructureEncryptionState("Disabled");

        public static bool operator ==(InfrastructureEncryptionState left, InfrastructureEncryptionState right) => left.Equals(right);
        public static bool operator !=(InfrastructureEncryptionState left, InfrastructureEncryptionState right) => !left.Equals(right);

        public static explicit operator string(InfrastructureEncryptionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InfrastructureEncryptionState other && Equals(other);
        public bool Equals(InfrastructureEncryptionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// property to enable or disable resource provider inbound network traffic from public clients
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
    /// </summary>
    [EnumType]
    public readonly struct ResourceIdentityType : IEquatable<ResourceIdentityType>
    {
        private readonly string _value;

        private ResourceIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResourceIdentityType SystemAssigned { get; } = new ResourceIdentityType("SystemAssigned");
        public static ResourceIdentityType None { get; } = new ResourceIdentityType("None");
        public static ResourceIdentityType UserAssigned { get; } = new ResourceIdentityType("UserAssigned");
        public static ResourceIdentityType SystemAssigned_UserAssigned { get; } = new ResourceIdentityType("SystemAssigned, UserAssigned");

        public static bool operator ==(ResourceIdentityType left, ResourceIdentityType right) => left.Equals(right);
        public static bool operator !=(ResourceIdentityType left, ResourceIdentityType right) => !left.Equals(right);

        public static explicit operator string(ResourceIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResourceIdentityType other && Equals(other);
        public bool Equals(ResourceIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig
    /// </summary>
    [EnumType]
    public readonly struct SkuName : IEquatable<SkuName>
    {
        private readonly string _value;

        private SkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SkuName Standard { get; } = new SkuName("Standard");
        public static SkuName RS0 { get; } = new SkuName("RS0");

        public static bool operator ==(SkuName left, SkuName right) => left.Equals(right);
        public static bool operator !=(SkuName left, SkuName right) => !left.Equals(right);

        public static explicit operator string(SkuName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SkuName other && Equals(other);
        public bool Equals(SkuName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SoftDeleteState : IEquatable<SoftDeleteState>
    {
        private readonly string _value;

        private SoftDeleteState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SoftDeleteState Invalid { get; } = new SoftDeleteState("Invalid");
        public static SoftDeleteState Enabled { get; } = new SoftDeleteState("Enabled");
        public static SoftDeleteState Disabled { get; } = new SoftDeleteState("Disabled");
        public static SoftDeleteState AlwaysON { get; } = new SoftDeleteState("AlwaysON");

        public static bool operator ==(SoftDeleteState left, SoftDeleteState right) => left.Equals(right);
        public static bool operator !=(SoftDeleteState left, SoftDeleteState right) => !left.Equals(right);

        public static explicit operator string(SoftDeleteState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SoftDeleteState other && Equals(other);
        public bool Equals(SoftDeleteState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage redundancy setting of a vault
    /// </summary>
    [EnumType]
    public readonly struct StandardTierStorageRedundancy : IEquatable<StandardTierStorageRedundancy>
    {
        private readonly string _value;

        private StandardTierStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StandardTierStorageRedundancy Invalid { get; } = new StandardTierStorageRedundancy("Invalid");
        public static StandardTierStorageRedundancy LocallyRedundant { get; } = new StandardTierStorageRedundancy("LocallyRedundant");
        public static StandardTierStorageRedundancy GeoRedundant { get; } = new StandardTierStorageRedundancy("GeoRedundant");
        public static StandardTierStorageRedundancy ZoneRedundant { get; } = new StandardTierStorageRedundancy("ZoneRedundant");

        public static bool operator ==(StandardTierStorageRedundancy left, StandardTierStorageRedundancy right) => left.Equals(right);
        public static bool operator !=(StandardTierStorageRedundancy left, StandardTierStorageRedundancy right) => !left.Equals(right);

        public static explicit operator string(StandardTierStorageRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StandardTierStorageRedundancy other && Equals(other);
        public bool Equals(StandardTierStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
