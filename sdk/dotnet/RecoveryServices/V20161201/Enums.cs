// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.RecoveryServices.V20161201
{
    /// <summary>
    /// Type of backup items associated with this container.
    /// </summary>
    [EnumType]
    public readonly struct BackupItemType : IEquatable<BackupItemType>
    {
        private readonly string _value;

        private BackupItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupItemType Invalid { get; } = new BackupItemType("Invalid");
        public static BackupItemType VM { get; } = new BackupItemType("VM");
        public static BackupItemType FileFolder { get; } = new BackupItemType("FileFolder");
        public static BackupItemType AzureSqlDb { get; } = new BackupItemType("AzureSqlDb");
        public static BackupItemType SQLDB { get; } = new BackupItemType("SQLDB");
        public static BackupItemType Exchange { get; } = new BackupItemType("Exchange");
        public static BackupItemType Sharepoint { get; } = new BackupItemType("Sharepoint");
        public static BackupItemType VMwareVM { get; } = new BackupItemType("VMwareVM");
        public static BackupItemType SystemState { get; } = new BackupItemType("SystemState");
        public static BackupItemType Client { get; } = new BackupItemType("Client");
        public static BackupItemType GenericDataSource { get; } = new BackupItemType("GenericDataSource");
        public static BackupItemType SQLDataBase { get; } = new BackupItemType("SQLDataBase");
        public static BackupItemType AzureFileShare { get; } = new BackupItemType("AzureFileShare");
        public static BackupItemType SAPHanaDatabase { get; } = new BackupItemType("SAPHanaDatabase");
        public static BackupItemType SAPAseDatabase { get; } = new BackupItemType("SAPAseDatabase");

        public static bool operator ==(BackupItemType left, BackupItemType right) => left.Equals(right);
        public static bool operator !=(BackupItemType left, BackupItemType right) => !left.Equals(right);

        public static explicit operator string(BackupItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupItemType other && Equals(other);
        public bool Equals(BackupItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of backup management for the container.
    /// </summary>
    [EnumType]
    public readonly struct BackupManagementType : IEquatable<BackupManagementType>
    {
        private readonly string _value;

        private BackupManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackupManagementType Invalid { get; } = new BackupManagementType("Invalid");
        public static BackupManagementType AzureIaasVM { get; } = new BackupManagementType("AzureIaasVM");
        public static BackupManagementType MAB { get; } = new BackupManagementType("MAB");
        public static BackupManagementType DPM { get; } = new BackupManagementType("DPM");
        public static BackupManagementType AzureBackupServer { get; } = new BackupManagementType("AzureBackupServer");
        public static BackupManagementType AzureSql { get; } = new BackupManagementType("AzureSql");
        public static BackupManagementType AzureStorage { get; } = new BackupManagementType("AzureStorage");
        public static BackupManagementType AzureWorkload { get; } = new BackupManagementType("AzureWorkload");
        public static BackupManagementType DefaultBackup { get; } = new BackupManagementType("DefaultBackup");

        public static bool operator ==(BackupManagementType left, BackupManagementType right) => left.Equals(right);
        public static bool operator !=(BackupManagementType left, BackupManagementType right) => !left.Equals(right);

        public static explicit operator string(BackupManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackupManagementType other && Equals(other);
        public bool Equals(BackupManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
    /// Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
    /// Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
    /// Backup is VMAppContainer
    /// </summary>
    [EnumType]
    public readonly struct ContainerType : IEquatable<ContainerType>
    {
        private readonly string _value;

        private ContainerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerType Invalid { get; } = new ContainerType("Invalid");
        public static ContainerType Unknown { get; } = new ContainerType("Unknown");
        public static ContainerType IaasVMContainer { get; } = new ContainerType("IaasVMContainer");
        public static ContainerType IaasVMServiceContainer { get; } = new ContainerType("IaasVMServiceContainer");
        public static ContainerType DPMContainer { get; } = new ContainerType("DPMContainer");
        public static ContainerType AzureBackupServerContainer { get; } = new ContainerType("AzureBackupServerContainer");
        public static ContainerType MABContainer { get; } = new ContainerType("MABContainer");
        public static ContainerType Cluster { get; } = new ContainerType("Cluster");
        public static ContainerType AzureSqlContainer { get; } = new ContainerType("AzureSqlContainer");
        public static ContainerType Windows { get; } = new ContainerType("Windows");
        public static ContainerType VCenter { get; } = new ContainerType("VCenter");
        public static ContainerType VMAppContainer { get; } = new ContainerType("VMAppContainer");
        public static ContainerType SQLAGWorkLoadContainer { get; } = new ContainerType("SQLAGWorkLoadContainer");
        public static ContainerType StorageContainer { get; } = new ContainerType("StorageContainer");
        public static ContainerType GenericContainer { get; } = new ContainerType("GenericContainer");

        public static bool operator ==(ContainerType left, ContainerType right) => left.Equals(right);
        public static bool operator !=(ContainerType left, ContainerType right) => !left.Equals(right);

        public static explicit operator string(ContainerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerType other && Equals(other);
        public bool Equals(ContainerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Re-Do Operation
    /// </summary>
    [EnumType]
    public readonly struct OperationType : IEquatable<OperationType>
    {
        private readonly string _value;

        private OperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OperationType Invalid { get; } = new OperationType("Invalid");
        public static OperationType Register { get; } = new OperationType("Register");
        public static OperationType Reregister { get; } = new OperationType("Reregister");

        public static bool operator ==(OperationType left, OperationType right) => left.Equals(right);
        public static bool operator !=(OperationType left, OperationType right) => !left.Equals(right);

        public static explicit operator string(OperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OperationType other && Equals(other);
        public bool Equals(OperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Workload type for which registration was sent.
    /// </summary>
    [EnumType]
    public readonly struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        private WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkloadType Invalid { get; } = new WorkloadType("Invalid");
        public static WorkloadType VM { get; } = new WorkloadType("VM");
        public static WorkloadType FileFolder { get; } = new WorkloadType("FileFolder");
        public static WorkloadType AzureSqlDb { get; } = new WorkloadType("AzureSqlDb");
        public static WorkloadType SQLDB { get; } = new WorkloadType("SQLDB");
        public static WorkloadType Exchange { get; } = new WorkloadType("Exchange");
        public static WorkloadType Sharepoint { get; } = new WorkloadType("Sharepoint");
        public static WorkloadType VMwareVM { get; } = new WorkloadType("VMwareVM");
        public static WorkloadType SystemState { get; } = new WorkloadType("SystemState");
        public static WorkloadType Client { get; } = new WorkloadType("Client");
        public static WorkloadType GenericDataSource { get; } = new WorkloadType("GenericDataSource");
        public static WorkloadType SQLDataBase { get; } = new WorkloadType("SQLDataBase");
        public static WorkloadType AzureFileShare { get; } = new WorkloadType("AzureFileShare");
        public static WorkloadType SAPHanaDatabase { get; } = new WorkloadType("SAPHanaDatabase");
        public static WorkloadType SAPAseDatabase { get; } = new WorkloadType("SAPAseDatabase");

        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);

        public static explicit operator string(WorkloadType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkloadType other && Equals(other);
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
