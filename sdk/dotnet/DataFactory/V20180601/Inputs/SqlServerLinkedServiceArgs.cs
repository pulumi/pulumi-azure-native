// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Inputs
{

    /// <summary>
    /// SQL Server linked service.
    /// </summary>
    public sealed class SqlServerLinkedServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sql always encrypted properties.
        /// </summary>
        [Input("alwaysEncryptedSettings")]
        public Input<Inputs.SqlAlwaysEncryptedPropertiesArgs>? AlwaysEncryptedSettings { get; set; }

        [Input("annotations")]
        private InputList<object>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the linked service.
        /// </summary>
        public InputList<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The application workload type when connecting to a server, used by recommended version. Possible values are ReadOnly and ReadWrite. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("applicationIntent")]
        public Input<object>? ApplicationIntent { get; set; }

        /// <summary>
        /// The type used for authentication. Type: string.
        /// </summary>
        [Input("authenticationType")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.SqlServerAuthenticationType>? AuthenticationType { get; set; }

        /// <summary>
        /// The default wait time (in seconds) before terminating the attempt to execute a command and generating an error, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("commandTimeout")]
        public Input<object>? CommandTimeout { get; set; }

        /// <summary>
        /// The number of re-connections attempted after identifying that there was an idle connection failure, used by recommended version. This must be an integer between 0 and 255. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("connectRetryCount")]
        public Input<object>? ConnectRetryCount { get; set; }

        /// <summary>
        /// The amount of time (in seconds) between each re-connection attempt after identifying that there was an idle connection failure, used by recommended version. This must be an integer between 1 and 60. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("connectRetryInterval")]
        public Input<object>? ConnectRetryInterval { get; set; }

        /// <summary>
        /// The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("connectTimeout")]
        public Input<object>? ConnectTimeout { get; set; }

        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        [Input("connectVia")]
        public Input<Inputs.IntegrationRuntimeReferenceArgs>? ConnectVia { get; set; }

        /// <summary>
        /// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        [Input("connectionString")]
        public Input<object>? ConnectionString { get; set; }

        /// <summary>
        /// The credential reference containing authentication information.
        /// </summary>
        [Input("credential")]
        public Input<Inputs.CredentialReferenceArgs>? Credential { get; set; }

        /// <summary>
        /// The name of the database, used by recommended version. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("database")]
        public Input<object>? Database { get; set; }

        /// <summary>
        /// Linked service description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicate whether TLS encryption is required for all data sent between the client and server, used by recommended version. Possible values are true/yes/mandatory, false/no/optional and strict. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("encrypt")]
        public Input<object>? Encrypt { get; set; }

        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// </summary>
        [Input("encryptedCredential")]
        public Input<string>? EncryptedCredential { get; set; }

        /// <summary>
        /// The name or address of the partner server to connect to if the primary server is down, used by recommended version. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("failoverPartner")]
        public Input<object>? FailoverPartner { get; set; }

        /// <summary>
        /// The host name to use when validating the server certificate for the connection. When not specified, the server name from the Data Source is used for certificate validation, used by recommended version. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("hostNameInCertificate")]
        public Input<object>? HostNameInCertificate { get; set; }

        /// <summary>
        /// Indicate whether User ID and Password are specified in the connection (when false) or whether the current Windows account credentials are used for authentication (when true), used by recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Input("integratedSecurity")]
        public Input<object>? IntegratedSecurity { get; set; }

        /// <summary>
        /// The minimum time, in seconds, for the connection to live in the connection pool before being destroyed, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("loadBalanceTimeout")]
        public Input<object>? LoadBalanceTimeout { get; set; }

        /// <summary>
        /// The maximum number of connections allowed in the connection pool for this specific connection string, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("maxPoolSize")]
        public Input<object>? MaxPoolSize { get; set; }

        /// <summary>
        /// The minimum number of connections allowed in the connection pool for this specific connection string, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("minPoolSize")]
        public Input<object>? MinPoolSize { get; set; }

        /// <summary>
        /// If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server, used by recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Input("multiSubnetFailover")]
        public Input<object>? MultiSubnetFailover { get; set; }

        /// <summary>
        /// When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection, used by recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Input("multipleActiveResultSets")]
        public Input<object>? MultipleActiveResultSets { get; set; }

        /// <summary>
        /// The size in bytes of the network packets used to communicate with an instance of server, used by recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("packetSize")]
        public Input<object>? PacketSize { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.ParameterSpecificationArgs>? _parameters;

        /// <summary>
        /// Parameters for linked service.
        /// </summary>
        public InputMap<Inputs.ParameterSpecificationArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.ParameterSpecificationArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The on-premises Windows authentication password.
        /// </summary>
        [Input("password")]
        public InputUnion<Inputs.AzureKeyVaultSecretReferenceArgs, Inputs.SecureStringArgs>? Password { get; set; }

        /// <summary>
        /// Indicate whether the connection will be pooled or explicitly opened every time that the connection is requested, used by recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Input("pooling")]
        public Input<object>? Pooling { get; set; }

        /// <summary>
        /// The name or network address of the instance of SQL Server to which to connect, used by recommended version. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("server")]
        public Input<object>? Server { get; set; }

        /// <summary>
        /// Indicate whether the channel will be encrypted while bypassing walking the certificate chain to validate trust, used by recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Input("trustServerCertificate")]
        public Input<object>? TrustServerCertificate { get; set; }

        /// <summary>
        /// Type of linked service.
        /// Expected value is 'SqlServer'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("userName")]
        public Input<object>? UserName { get; set; }

        /// <summary>
        /// Version of the linked service.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public SqlServerLinkedServiceArgs()
        {
        }
        public static new SqlServerLinkedServiceArgs Empty => new SqlServerLinkedServiceArgs();
    }
}
