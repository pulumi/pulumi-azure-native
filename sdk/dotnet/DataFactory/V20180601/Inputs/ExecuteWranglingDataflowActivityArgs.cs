// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Inputs
{

    /// <summary>
    /// Execute power query activity.
    /// </summary>
    public sealed class ExecuteWranglingDataflowActivityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute properties for data flow activity.
        /// </summary>
        [Input("compute")]
        public Input<Inputs.ExecuteDataFlowActivityTypePropertiesComputeArgs>? Compute { get; set; }

        /// <summary>
        /// Continuation settings for execute data flow activity.
        /// </summary>
        [Input("continuationSettings")]
        public Input<Inputs.ContinuationSettingsReferenceArgs>? ContinuationSettings { get; set; }

        /// <summary>
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// </summary>
        [Input("continueOnError")]
        public Input<object>? ContinueOnError { get; set; }

        /// <summary>
        /// Data flow reference.
        /// </summary>
        [Input("dataFlow", required: true)]
        public Input<Inputs.DataFlowReferenceArgs> DataFlow { get; set; } = null!;

        [Input("dependsOn")]
        private InputList<Inputs.ActivityDependencyArgs>? _dependsOn;

        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public InputList<Inputs.ActivityDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.ActivityDependencyArgs>());
            set => _dependsOn = value;
        }

        /// <summary>
        /// Activity description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        [Input("integrationRuntime")]
        public Input<Inputs.IntegrationRuntimeReferenceArgs>? IntegrationRuntime { get; set; }

        /// <summary>
        /// Activity name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        [Input("onInactiveMarkAs")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.ActivityOnInactiveMarkAs>? OnInactiveMarkAs { get; set; }

        /// <summary>
        /// Activity policy.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ActivityPolicyArgs>? Policy { get; set; }

        [Input("queries")]
        private InputList<Inputs.PowerQuerySinkMappingArgs>? _queries;

        /// <summary>
        /// List of mapping for Power Query mashup query to sink dataset(s).
        /// </summary>
        public InputList<Inputs.PowerQuerySinkMappingArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.PowerQuerySinkMappingArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// </summary>
        [Input("runConcurrently")]
        public Input<object>? RunConcurrently { get; set; }

        [Input("sinks")]
        private InputMap<Inputs.PowerQuerySinkArgs>? _sinks;

        /// <summary>
        /// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
        /// </summary>
        public InputMap<Inputs.PowerQuerySinkArgs> Sinks
        {
            get => _sinks ?? (_sinks = new InputMap<Inputs.PowerQuerySinkArgs>());
            set => _sinks = value;
        }

        /// <summary>
        /// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
        /// </summary>
        [Input("sourceStagingConcurrency")]
        public Input<object>? SourceStagingConcurrency { get; set; }

        /// <summary>
        /// Staging info for execute data flow activity.
        /// </summary>
        [Input("staging")]
        public Input<Inputs.DataFlowStagingInfoArgs>? Staging { get; set; }

        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        [Input("state")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.ActivityState>? State { get; set; }

        /// <summary>
        /// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
        /// </summary>
        [Input("traceLevel")]
        public Input<object>? TraceLevel { get; set; }

        /// <summary>
        /// Type of activity.
        /// Expected value is 'ExecuteWranglingDataflow'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userProperties")]
        private InputList<Inputs.UserPropertyArgs>? _userProperties;

        /// <summary>
        /// Activity user properties.
        /// </summary>
        public InputList<Inputs.UserPropertyArgs> UserProperties
        {
            get => _userProperties ?? (_userProperties = new InputList<Inputs.UserPropertyArgs>());
            set => _userProperties = value;
        }

        public ExecuteWranglingDataflowActivityArgs()
        {
        }
        public static new ExecuteWranglingDataflowActivityArgs Empty => new ExecuteWranglingDataflowActivityArgs();
    }
}
