// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Inputs
{

    /// <summary>
    /// Execute Synapse notebook activity properties.
    /// </summary>
    public sealed class SynapseNotebookActivityTypePropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// </summary>
        [Input("conf")]
        public Input<object>? Conf { get; set; }

        /// <summary>
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("driverSize")]
        public Input<object>? DriverSize { get; set; }

        /// <summary>
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("executorSize")]
        public Input<object>? ExecutorSize { get; set; }

        /// <summary>
        /// Synapse notebook reference.
        /// </summary>
        [Input("notebook", required: true)]
        public Input<Inputs.SynapseNotebookReferenceArgs> Notebook { get; set; } = null!;

        /// <summary>
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide.
        /// </summary>
        [Input("numExecutors")]
        public Input<int>? NumExecutors { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.NotebookParameterArgs>? _parameters;

        /// <summary>
        /// Notebook parameters.
        /// </summary>
        public InputMap<Inputs.NotebookParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.NotebookParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The name of the big data pool which will be used to execute the notebook.
        /// </summary>
        [Input("sparkPool")]
        public Input<Inputs.BigDataPoolParametrizationReferenceArgs>? SparkPool { get; set; }

        public SynapseNotebookActivityTypePropertiesArgs()
        {
        }
        public static new SynapseNotebookActivityTypePropertiesArgs Empty => new SynapseNotebookActivityTypePropertiesArgs();
    }
}
