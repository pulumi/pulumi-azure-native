// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Inputs
{

    /// <summary>
    /// Execute Synapse notebook activity.
    /// </summary>
    public sealed class SynapseNotebookActivityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// </summary>
        [Input("conf")]
        public Input<object>? Conf { get; set; }

        /// <summary>
        /// The type of the spark config.
        /// </summary>
        [Input("configurationType")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.ConfigurationType>? ConfigurationType { get; set; }

        [Input("dependsOn")]
        private InputList<Inputs.ActivityDependencyArgs>? _dependsOn;

        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public InputList<Inputs.ActivityDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.ActivityDependencyArgs>());
            set => _dependsOn = value;
        }

        /// <summary>
        /// Activity description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("driverSize")]
        public Input<object>? DriverSize { get; set; }

        /// <summary>
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("executorSize")]
        public Input<object>? ExecutorSize { get; set; }

        /// <summary>
        /// Linked service reference.
        /// </summary>
        [Input("linkedServiceName")]
        public Input<Inputs.LinkedServiceReferenceArgs>? LinkedServiceName { get; set; }

        /// <summary>
        /// Activity name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Synapse notebook reference.
        /// </summary>
        [Input("notebook", required: true)]
        public Input<Inputs.SynapseNotebookReferenceArgs> Notebook { get; set; } = null!;

        /// <summary>
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("numExecutors")]
        public Input<object>? NumExecutors { get; set; }

        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        [Input("onInactiveMarkAs")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.ActivityOnInactiveMarkAs>? OnInactiveMarkAs { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.NotebookParameterArgs>? _parameters;

        /// <summary>
        /// Notebook parameters.
        /// </summary>
        public InputMap<Inputs.NotebookParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.NotebookParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// Activity policy.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ActivityPolicyArgs>? Policy { get; set; }

        [Input("sparkConfig")]
        private InputMap<object>? _sparkConfig;

        /// <summary>
        /// Spark configuration property.
        /// </summary>
        public InputMap<object> SparkConfig
        {
            get => _sparkConfig ?? (_sparkConfig = new InputMap<object>());
            set => _sparkConfig = value;
        }

        /// <summary>
        /// The name of the big data pool which will be used to execute the notebook.
        /// </summary>
        [Input("sparkPool")]
        public Input<Inputs.BigDataPoolParametrizationReferenceArgs>? SparkPool { get; set; }

        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        [Input("state")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.V20180601.ActivityState>? State { get; set; }

        /// <summary>
        /// The spark configuration of the spark job.
        /// </summary>
        [Input("targetSparkConfiguration")]
        public Input<Inputs.SparkConfigurationParametrizationReferenceArgs>? TargetSparkConfiguration { get; set; }

        /// <summary>
        /// Type of activity.
        /// Expected value is 'SynapseNotebook'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userProperties")]
        private InputList<Inputs.UserPropertyArgs>? _userProperties;

        /// <summary>
        /// Activity user properties.
        /// </summary>
        public InputList<Inputs.UserPropertyArgs> UserProperties
        {
            get => _userProperties ?? (_userProperties = new InputList<Inputs.UserPropertyArgs>());
            set => _userProperties = value;
        }

        public SynapseNotebookActivityArgs()
        {
        }
        public static new SynapseNotebookActivityArgs Empty => new SynapseNotebookActivityArgs();
    }
}
