// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Set value for a Variable.
    /// </summary>
    [OutputType]
    public sealed class SetVariableActivityResponse
    {
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// If set to true, it sets the pipeline run return value.
        /// </summary>
        public readonly bool? SetSystemVariable;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'SetVariable'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;
        /// <summary>
        /// Value to be set. Could be a static value or Expression.
        /// </summary>
        public readonly object? Value;
        /// <summary>
        /// Name of the variable whose value needs to be set.
        /// </summary>
        public readonly string? VariableName;

        [OutputConstructor]
        private SetVariableActivityResponse(
            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            string name,

            string? onInactiveMarkAs,

            bool? setSystemVariable,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties,

            object? value,

            string? variableName)
        {
            DependsOn = dependsOn;
            Description = description;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            SetSystemVariable = setSystemVariable;
            State = state;
            Type = type;
            UserProperties = userProperties;
            Value = value;
            VariableName = variableName;
        }
    }
}
