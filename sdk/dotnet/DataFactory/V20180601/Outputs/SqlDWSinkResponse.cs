// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.V20180601.Outputs
{

    [OutputType]
    public sealed class SqlDWSinkResponse
    {
        /// <summary>
        /// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? AllowCopyCommand;
        /// <summary>
        /// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? AllowPolyBase;
        /// <summary>
        /// Specifies Copy Command related settings when allowCopyCommand is true.
        /// </summary>
        public readonly Outputs.DWCopyCommandSettingsResponse? CopyCommandSettings;
        /// <summary>
        /// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? MaxConcurrentConnections;
        /// <summary>
        /// Specifies PolyBase-related settings when allowPolyBase is true.
        /// </summary>
        public readonly Outputs.PolybaseSettingsResponse? PolyBaseSettings;
        /// <summary>
        /// SQL pre-copy script. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? PreCopyScript;
        /// <summary>
        /// Sink retry count. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? SinkRetryCount;
        /// <summary>
        /// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        public readonly object? SinkRetryWait;
        /// <summary>
        /// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? TableOption;
        /// <summary>
        /// Copy sink type.
        /// Expected value is 'SqlDWSink'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
        /// </summary>
        public readonly object? WriteBatchSize;
        /// <summary>
        /// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        public readonly object? WriteBatchTimeout;

        [OutputConstructor]
        private SqlDWSinkResponse(
            object? allowCopyCommand,

            object? allowPolyBase,

            Outputs.DWCopyCommandSettingsResponse? copyCommandSettings,

            object? maxConcurrentConnections,

            Outputs.PolybaseSettingsResponse? polyBaseSettings,

            object? preCopyScript,

            object? sinkRetryCount,

            object? sinkRetryWait,

            object? tableOption,

            string type,

            object? writeBatchSize,

            object? writeBatchTimeout)
        {
            AllowCopyCommand = allowCopyCommand;
            AllowPolyBase = allowPolyBase;
            CopyCommandSettings = copyCommandSettings;
            MaxConcurrentConnections = maxConcurrentConnections;
            PolyBaseSettings = polyBaseSettings;
            PreCopyScript = preCopyScript;
            SinkRetryCount = sinkRetryCount;
            SinkRetryWait = sinkRetryWait;
            TableOption = tableOption;
            Type = type;
            WriteBatchSize = writeBatchSize;
            WriteBatchTimeout = writeBatchTimeout;
        }
    }
}
