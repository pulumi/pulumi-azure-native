// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Amazon Rds for SQL Server linked service properties.
    /// </summary>
    [OutputType]
    public sealed class AmazonRdsForSqlServerLinkedServiceTypePropertiesResponse
    {
        /// <summary>
        /// Sql always encrypted properties.
        /// </summary>
        public readonly Outputs.SqlAlwaysEncryptedPropertiesResponse? AlwaysEncryptedSettings;
        /// <summary>
        /// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        public readonly object ConnectionString;
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? EncryptedCredential;
        /// <summary>
        /// The on-premises Windows authentication password.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? Password;
        /// <summary>
        /// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? UserName;

        [OutputConstructor]
        private AmazonRdsForSqlServerLinkedServiceTypePropertiesResponse(
            Outputs.SqlAlwaysEncryptedPropertiesResponse? alwaysEncryptedSettings,

            object connectionString,

            object? encryptedCredential,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? password,

            object? userName)
        {
            AlwaysEncryptedSettings = alwaysEncryptedSettings;
            ConnectionString = connectionString;
            EncryptedCredential = encryptedCredential;
            Password = password;
            UserName = userName;
        }
    }
}
