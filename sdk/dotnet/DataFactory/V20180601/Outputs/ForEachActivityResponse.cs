// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.V20180601.Outputs
{

    [OutputType]
    public sealed class ForEachActivityResponse
    {
        /// <summary>
        /// List of activities to execute .
        /// </summary>
        public readonly ImmutableArray<object> Activities;
        /// <summary>
        /// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
        /// </summary>
        public readonly int? BatchCount;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Should the loop be executed in sequence or in parallel (max 50)
        /// </summary>
        public readonly bool? IsSequential;
        /// <summary>
        /// Collection to iterate.
        /// </summary>
        public readonly Outputs.ExpressionResponse Items;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Container'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private ForEachActivityResponse(
            ImmutableArray<object> activities,

            int? batchCount,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            bool? isSequential,

            Outputs.ExpressionResponse items,

            string name,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Activities = activities;
            BatchCount = batchCount;
            DependsOn = dependsOn;
            Description = description;
            IsSequential = isSequential;
            Items = items;
            Name = name;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
