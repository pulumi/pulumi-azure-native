// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.V20180601.Outputs
{

    [OutputType]
    public sealed class HDInsightSparkActivityInvokeResponseResult
    {
        /// <summary>
        /// The user-specified arguments to HDInsightSparkActivity.
        /// </summary>
        public readonly ImmutableArray<object> Arguments;
        /// <summary>
        /// The application's Java/Spark main class.
        /// </summary>
        public readonly string? ClassName;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyInvokeResponseResult> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object EntryFilePath;
        /// <summary>
        /// Debug info option.
        /// </summary>
        public readonly string? GetDebugInfo;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceInvokeResponseResult? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyInvokeResponseResult? Policy;
        /// <summary>
        /// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ProxyUser;
        /// <summary>
        /// The root path in 'sparkJobLinkedService' for all the jobâ€™s files. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object RootPath;
        /// <summary>
        /// Spark configuration property.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SparkConfig;
        /// <summary>
        /// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceInvokeResponseResult? SparkJobLinkedService;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Execution'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyInvokeResponseResult> UserProperties;

        [OutputConstructor]
        private HDInsightSparkActivityInvokeResponseResult(
            ImmutableArray<object> arguments,

            string? className,

            ImmutableArray<Outputs.ActivityDependencyInvokeResponseResult> dependsOn,

            string? description,

            object entryFilePath,

            string? getDebugInfo,

            Outputs.LinkedServiceReferenceInvokeResponseResult? linkedServiceName,

            string name,

            Outputs.ActivityPolicyInvokeResponseResult? policy,

            object? proxyUser,

            object rootPath,

            ImmutableDictionary<string, object>? sparkConfig,

            Outputs.LinkedServiceReferenceInvokeResponseResult? sparkJobLinkedService,

            string type,

            ImmutableArray<Outputs.UserPropertyInvokeResponseResult> userProperties)
        {
            Arguments = arguments;
            ClassName = className;
            DependsOn = dependsOn;
            Description = description;
            EntryFilePath = entryFilePath;
            GetDebugInfo = getDebugInfo;
            LinkedServiceName = linkedServiceName;
            Name = name;
            Policy = policy;
            ProxyUser = proxyUser;
            RootPath = rootPath;
            SparkConfig = sparkConfig;
            SparkJobLinkedService = sparkJobLinkedService;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
