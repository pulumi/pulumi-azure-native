// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// HDInsight Spark activity.
    /// </summary>
    [OutputType]
    public sealed class HDInsightSparkActivityResponse
    {
        /// <summary>
        /// The user-specified arguments to HDInsightSparkActivity.
        /// </summary>
        public readonly ImmutableArray<object> Arguments;
        /// <summary>
        /// The application's Java/Spark main class.
        /// </summary>
        public readonly string? ClassName;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object EntryFilePath;
        /// <summary>
        /// Debug info option.
        /// </summary>
        public readonly string? GetDebugInfo;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ProxyUser;
        /// <summary>
        /// The root path in 'sparkJobLinkedService' for all the jobâ€™s files. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object RootPath;
        /// <summary>
        /// Spark configuration property.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SparkConfig;
        /// <summary>
        /// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? SparkJobLinkedService;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'HDInsightSpark'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private HDInsightSparkActivityResponse(
            ImmutableArray<object> arguments,

            string? className,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            object entryFilePath,

            string? getDebugInfo,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            object? proxyUser,

            object rootPath,

            ImmutableDictionary<string, object>? sparkConfig,

            Outputs.LinkedServiceReferenceResponse? sparkJobLinkedService,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Arguments = arguments;
            ClassName = className;
            DependsOn = dependsOn;
            Description = description;
            EntryFilePath = entryFilePath;
            GetDebugInfo = getDebugInfo;
            LinkedServiceName = linkedServiceName;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            ProxyUser = proxyUser;
            RootPath = rootPath;
            SparkConfig = sparkConfig;
            SparkJobLinkedService = sparkJobLinkedService;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
