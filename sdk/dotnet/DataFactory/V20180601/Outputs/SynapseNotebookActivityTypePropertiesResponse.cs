// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Execute Synapse notebook activity properties.
    /// </summary>
    [OutputType]
    public sealed class SynapseNotebookActivityTypePropertiesResponse
    {
        /// <summary>
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// </summary>
        public readonly object? Conf;
        /// <summary>
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? DriverSize;
        /// <summary>
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ExecutorSize;
        /// <summary>
        /// Synapse notebook reference.
        /// </summary>
        public readonly Outputs.SynapseNotebookReferenceResponse Notebook;
        /// <summary>
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide.
        /// </summary>
        public readonly int? NumExecutors;
        /// <summary>
        /// Notebook parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.NotebookParameterResponse>? Parameters;
        /// <summary>
        /// The name of the big data pool which will be used to execute the notebook.
        /// </summary>
        public readonly Outputs.BigDataPoolParametrizationReferenceResponse? SparkPool;

        [OutputConstructor]
        private SynapseNotebookActivityTypePropertiesResponse(
            object? conf,

            object? driverSize,

            object? executorSize,

            Outputs.SynapseNotebookReferenceResponse notebook,

            int? numExecutors,

            ImmutableDictionary<string, Outputs.NotebookParameterResponse>? parameters,

            Outputs.BigDataPoolParametrizationReferenceResponse? sparkPool)
        {
            Conf = conf;
            DriverSize = driverSize;
            ExecutorSize = executorSize;
            Notebook = notebook;
            NumExecutors = numExecutors;
            Parameters = parameters;
            SparkPool = sparkPool;
        }
    }
}
