// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Delete activity properties.
    /// </summary>
    [OutputType]
    public sealed class DeleteActivityTypePropertiesResponse
    {
        /// <summary>
        /// Delete activity dataset reference.
        /// </summary>
        public readonly Outputs.DatasetReferenceResponse Dataset;
        /// <summary>
        /// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? EnableLogging;
        /// <summary>
        /// Log storage settings customer need to provide when enableLogging is true.
        /// </summary>
        public readonly Outputs.LogStorageSettingsResponse? LogStorageSettings;
        /// <summary>
        /// The max concurrent connections to connect data source at the same time.
        /// </summary>
        public readonly int? MaxConcurrentConnections;
        /// <summary>
        /// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? Recursive;
        /// <summary>
        /// Delete activity store settings.
        /// </summary>
        public readonly object? StoreSettings;

        [OutputConstructor]
        private DeleteActivityTypePropertiesResponse(
            Outputs.DatasetReferenceResponse dataset,

            object? enableLogging,

            Outputs.LogStorageSettingsResponse? logStorageSettings,

            int? maxConcurrentConnections,

            object? recursive,

            object? storeSettings)
        {
            Dataset = dataset;
            EnableLogging = enableLogging;
            LogStorageSettings = logStorageSettings;
            MaxConcurrentConnections = maxConcurrentConnections;
            Recursive = recursive;
            StoreSettings = storeSettings;
        }
    }
}
