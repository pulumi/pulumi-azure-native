// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Google AdWords service linked service properties.
    /// </summary>
    [OutputType]
    public sealed class GoogleAdWordsLinkedServiceTypePropertiesResponse
    {
        /// <summary>
        /// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
        /// </summary>
        public readonly string? AuthenticationType;
        /// <summary>
        /// The Client customer ID of the AdWords account that you want to fetch report data for.
        /// </summary>
        public readonly object? ClientCustomerID;
        /// <summary>
        /// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ClientId;
        /// <summary>
        /// The client secret of the google application used to acquire the refresh token.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? ClientSecret;
        /// <summary>
        /// Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
        /// </summary>
        public readonly object? ConnectionProperties;
        /// <summary>
        /// The developer token associated with the manager account that you use to grant access to the AdWords API.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? DeveloperToken;
        /// <summary>
        /// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
        /// </summary>
        public readonly object? Email;
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? EncryptedCredential;
        /// <summary>
        /// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
        /// </summary>
        public readonly object? KeyFilePath;
        /// <summary>
        /// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? RefreshToken;
        /// <summary>
        /// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
        /// </summary>
        public readonly object? TrustedCertPath;
        /// <summary>
        /// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
        /// </summary>
        public readonly object? UseSystemTrustStore;

        [OutputConstructor]
        private GoogleAdWordsLinkedServiceTypePropertiesResponse(
            string? authenticationType,

            object? clientCustomerID,

            object? clientId,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? clientSecret,

            object? connectionProperties,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? developerToken,

            object? email,

            object? encryptedCredential,

            object? keyFilePath,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? refreshToken,

            object? trustedCertPath,

            object? useSystemTrustStore)
        {
            AuthenticationType = authenticationType;
            ClientCustomerID = clientCustomerID;
            ClientId = clientId;
            ClientSecret = clientSecret;
            ConnectionProperties = connectionProperties;
            DeveloperToken = developerToken;
            Email = email;
            EncryptedCredential = encryptedCredential;
            KeyFilePath = keyFilePath;
            RefreshToken = refreshToken;
            TrustedCertPath = trustedCertPath;
            UseSystemTrustStore = useSystemTrustStore;
        }
    }
}
