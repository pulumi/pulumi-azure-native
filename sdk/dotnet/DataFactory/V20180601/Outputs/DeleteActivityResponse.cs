// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Delete activity.
    /// </summary>
    [OutputType]
    public sealed class DeleteActivityResponse
    {
        /// <summary>
        /// Delete activity dataset reference.
        /// </summary>
        public readonly Outputs.DatasetReferenceResponse Dataset;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? EnableLogging;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Log storage settings customer need to provide when enableLogging is true.
        /// </summary>
        public readonly Outputs.LogStorageSettingsResponse? LogStorageSettings;
        /// <summary>
        /// The max concurrent connections to connect data source at the same time.
        /// </summary>
        public readonly int? MaxConcurrentConnections;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? Recursive;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Delete activity store settings.
        /// </summary>
        public readonly object? StoreSettings;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Delete'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private DeleteActivityResponse(
            Outputs.DatasetReferenceResponse dataset,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            object? enableLogging,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            Outputs.LogStorageSettingsResponse? logStorageSettings,

            int? maxConcurrentConnections,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            object? recursive,

            string? state,

            object? storeSettings,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Dataset = dataset;
            DependsOn = dependsOn;
            Description = description;
            EnableLogging = enableLogging;
            LinkedServiceName = linkedServiceName;
            LogStorageSettings = logStorageSettings;
            MaxConcurrentConnections = maxConcurrentConnections;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            Recursive = recursive;
            State = state;
            StoreSettings = storeSettings;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
