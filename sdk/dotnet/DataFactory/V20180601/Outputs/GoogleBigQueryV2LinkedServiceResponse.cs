// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Google BigQuery service linked service.
    /// </summary>
    [OutputType]
    public sealed class GoogleBigQueryV2LinkedServiceResponse
    {
        /// <summary>
        /// List of tags that can be used for describing the linked service.
        /// </summary>
        public readonly ImmutableArray<object> Annotations;
        /// <summary>
        /// The OAuth 2.0 authentication mechanism used for authentication.
        /// </summary>
        public readonly string AuthenticationType;
        /// <summary>
        /// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ClientId;
        /// <summary>
        /// The client secret of the google application used to acquire the refresh token.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? ClientSecret;
        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        public readonly Outputs.IntegrationRuntimeReferenceResponse? ConnectVia;
        /// <summary>
        /// Linked service description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// </summary>
        public readonly string? EncryptedCredential;
        /// <summary>
        /// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? KeyFileContent;
        /// <summary>
        /// Parameters for linked service.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterSpecificationResponse>? Parameters;
        /// <summary>
        /// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object ProjectId;
        /// <summary>
        /// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
        /// </summary>
        public readonly Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? RefreshToken;
        /// <summary>
        /// Type of linked service.
        /// Expected value is 'GoogleBigQueryV2'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the linked service.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GoogleBigQueryV2LinkedServiceResponse(
            ImmutableArray<object> annotations,

            string authenticationType,

            object? clientId,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? clientSecret,

            Outputs.IntegrationRuntimeReferenceResponse? connectVia,

            string? description,

            string? encryptedCredential,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? keyFileContent,

            ImmutableDictionary<string, Outputs.ParameterSpecificationResponse>? parameters,

            object projectId,

            Union<Outputs.AzureKeyVaultSecretReferenceResponse, Outputs.SecureStringResponse>? refreshToken,

            string type,

            string? version)
        {
            Annotations = annotations;
            AuthenticationType = authenticationType;
            ClientId = clientId;
            ClientSecret = clientSecret;
            ConnectVia = connectVia;
            Description = description;
            EncryptedCredential = encryptedCredential;
            KeyFileContent = keyFileContent;
            Parameters = parameters;
            ProjectId = projectId;
            RefreshToken = refreshToken;
            Type = type;
            Version = version;
        }
    }
}
