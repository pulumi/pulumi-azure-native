// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Execute SSIS package activity.
    /// </summary>
    [OutputType]
    public sealed class ExecuteSSISPackageActivityResponse
    {
        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        public readonly Outputs.IntegrationRuntimeReferenceResponse ConnectVia;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? EnvironmentPath;
        /// <summary>
        /// The package execution credential.
        /// </summary>
        public readonly Outputs.SSISExecutionCredentialResponse? ExecutionCredential;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// SSIS package execution log location.
        /// </summary>
        public readonly Outputs.SSISLogLocationResponse? LogLocation;
        /// <summary>
        /// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? LoggingLevel;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// The package level connection managers to execute the SSIS package.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>>? PackageConnectionManagers;
        /// <summary>
        /// SSIS package location.
        /// </summary>
        public readonly Outputs.SSISPackageLocationResponse PackageLocation;
        /// <summary>
        /// The package level parameters to execute the SSIS package.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>? PackageParameters;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// The project level connection managers to execute the SSIS package.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>>? ProjectConnectionManagers;
        /// <summary>
        /// The project level parameters to execute the SSIS package.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>? ProjectParameters;
        /// <summary>
        /// The property overrides to execute the SSIS package.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.SSISPropertyOverrideResponse>? PropertyOverrides;
        /// <summary>
        /// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? Runtime;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'ExecuteSSISPackage'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private ExecuteSSISPackageActivityResponse(
            Outputs.IntegrationRuntimeReferenceResponse connectVia,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            object? environmentPath,

            Outputs.SSISExecutionCredentialResponse? executionCredential,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            Outputs.SSISLogLocationResponse? logLocation,

            object? loggingLevel,

            string name,

            string? onInactiveMarkAs,

            ImmutableDictionary<string, ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>>? packageConnectionManagers,

            Outputs.SSISPackageLocationResponse packageLocation,

            ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>? packageParameters,

            Outputs.ActivityPolicyResponse? policy,

            ImmutableDictionary<string, ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>>? projectConnectionManagers,

            ImmutableDictionary<string, Outputs.SSISExecutionParameterResponse>? projectParameters,

            ImmutableDictionary<string, Outputs.SSISPropertyOverrideResponse>? propertyOverrides,

            object? runtime,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            ConnectVia = connectVia;
            DependsOn = dependsOn;
            Description = description;
            EnvironmentPath = environmentPath;
            ExecutionCredential = executionCredential;
            LinkedServiceName = linkedServiceName;
            LogLocation = logLocation;
            LoggingLevel = loggingLevel;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            PackageConnectionManagers = packageConnectionManagers;
            PackageLocation = packageLocation;
            PackageParameters = packageParameters;
            Policy = policy;
            ProjectConnectionManagers = projectConnectionManagers;
            ProjectParameters = projectParameters;
            PropertyOverrides = propertyOverrides;
            Runtime = runtime;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
