// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// Custom activity type.
    /// </summary>
    [OutputType]
    public sealed class CustomActivityResponse
    {
        /// <summary>
        /// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
        /// </summary>
        public readonly object? AutoUserSpecification;
        /// <summary>
        /// Command for custom activity Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object Command;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ExtendedProperties;
        /// <summary>
        /// Folder path for resource files Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? FolderPath;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// Reference objects
        /// </summary>
        public readonly Outputs.CustomActivityReferenceObjectResponse? ReferenceObjects;
        /// <summary>
        /// Resource linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? ResourceLinkedService;
        /// <summary>
        /// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
        /// </summary>
        public readonly object? RetentionTimeInDays;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Custom'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private CustomActivityResponse(
            object? autoUserSpecification,

            object command,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            ImmutableDictionary<string, object>? extendedProperties,

            object? folderPath,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            Outputs.CustomActivityReferenceObjectResponse? referenceObjects,

            Outputs.LinkedServiceReferenceResponse? resourceLinkedService,

            object? retentionTimeInDays,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            AutoUserSpecification = autoUserSpecification;
            Command = command;
            DependsOn = dependsOn;
            Description = description;
            ExtendedProperties = extendedProperties;
            FolderPath = folderPath;
            LinkedServiceName = linkedServiceName;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            ReferenceObjects = referenceObjects;
            ResourceLinkedService = resourceLinkedService;
            RetentionTimeInDays = retentionTimeInDays;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
