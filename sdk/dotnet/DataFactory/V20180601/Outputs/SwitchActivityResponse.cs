// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601.Outputs
{

    /// <summary>
    /// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
    /// </summary>
    [OutputType]
    public sealed class SwitchActivityResponse
    {
        /// <summary>
        /// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
        /// </summary>
        public readonly ImmutableArray<Outputs.SwitchCaseResponse> Cases;
        /// <summary>
        /// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
        /// </summary>
        public readonly ImmutableArray<object> DefaultActivities;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
        /// </summary>
        public readonly Outputs.ExpressionResponse On;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Switch'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private SwitchActivityResponse(
            ImmutableArray<Outputs.SwitchCaseResponse> cases,

            ImmutableArray<object> defaultActivities,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            string name,

            Outputs.ExpressionResponse on,

            string? onInactiveMarkAs,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Cases = cases;
            DefaultActivities = defaultActivities;
            DependsOn = dependsOn;
            Description = description;
            Name = name;
            On = on;
            OnInactiveMarkAs = onInactiveMarkAs;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
