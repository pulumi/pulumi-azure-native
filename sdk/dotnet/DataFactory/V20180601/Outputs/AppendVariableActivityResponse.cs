// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.V20180601.Outputs
{

    [OutputType]
    public sealed class AppendVariableActivityResponse
    {
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Container'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;
        /// <summary>
        /// Value to be appended. Could be a static value or Expression
        /// </summary>
        public readonly object? Value;
        /// <summary>
        /// Name of the variable whose value needs to be appended to.
        /// </summary>
        public readonly string? VariableName;

        [OutputConstructor]
        private AppendVariableActivityResponse(
            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            string name,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties,

            object? value,

            string? variableName)
        {
            DependsOn = dependsOn;
            Description = description;
            Name = name;
            Type = type;
            UserProperties = userProperties;
            Value = value;
            VariableName = variableName;
        }
    }
}
