// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20180601
{
    public static class GetChangeDataCapture
    {
        /// <summary>
        /// Gets a change data capture.
        /// </summary>
        public static Task<GetChangeDataCaptureResult> InvokeAsync(GetChangeDataCaptureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetChangeDataCaptureResult>("azure-native:datafactory/v20180601:getChangeDataCapture", args ?? new GetChangeDataCaptureArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a change data capture.
        /// </summary>
        public static Output<GetChangeDataCaptureResult> Invoke(GetChangeDataCaptureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetChangeDataCaptureResult>("azure-native:datafactory/v20180601:getChangeDataCapture", args ?? new GetChangeDataCaptureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChangeDataCaptureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The change data capture name.
        /// </summary>
        [Input("changeDataCaptureName", required: true)]
        public string ChangeDataCaptureName { get; set; } = null!;

        /// <summary>
        /// The factory name.
        /// </summary>
        [Input("factoryName", required: true)]
        public string FactoryName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetChangeDataCaptureArgs()
        {
        }
        public static new GetChangeDataCaptureArgs Empty => new GetChangeDataCaptureArgs();
    }

    public sealed class GetChangeDataCaptureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The change data capture name.
        /// </summary>
        [Input("changeDataCaptureName", required: true)]
        public Input<string> ChangeDataCaptureName { get; set; } = null!;

        /// <summary>
        /// The factory name.
        /// </summary>
        [Input("factoryName", required: true)]
        public Input<string> FactoryName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetChangeDataCaptureInvokeArgs()
        {
        }
        public static new GetChangeDataCaptureInvokeArgs Empty => new GetChangeDataCaptureInvokeArgs();
    }


    [OutputType]
    public sealed class GetChangeDataCaptureResult
    {
        /// <summary>
        /// A boolean to determine if the vnet configuration needs to be overwritten.
        /// </summary>
        public readonly bool? AllowVNetOverride;
        /// <summary>
        /// The description of the change data capture.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Etag identifies change in the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The folder that this CDC is in. If not specified, CDC will appear at the root level.
        /// </summary>
        public readonly Outputs.ChangeDataCaptureResponseFolder? Folder;
        /// <summary>
        /// The resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// CDC policy
        /// </summary>
        public readonly Outputs.MapperPolicyResponse Policy;
        /// <summary>
        /// List of sources connections that can be used as sources in the CDC.
        /// </summary>
        public readonly ImmutableArray<Outputs.MapperSourceConnectionsInfoResponse> SourceConnectionsInfo;
        /// <summary>
        /// Status of the CDC as to if it is running or stopped.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// List of target connections that can be used as sources in the CDC.
        /// </summary>
        public readonly ImmutableArray<Outputs.MapperTargetConnectionsInfoResponse> TargetConnectionsInfo;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetChangeDataCaptureResult(
            bool? allowVNetOverride,

            string? description,

            string etag,

            Outputs.ChangeDataCaptureResponseFolder? folder,

            string id,

            string name,

            Outputs.MapperPolicyResponse policy,

            ImmutableArray<Outputs.MapperSourceConnectionsInfoResponse> sourceConnectionsInfo,

            string? status,

            ImmutableArray<Outputs.MapperTargetConnectionsInfoResponse> targetConnectionsInfo,

            string type)
        {
            AllowVNetOverride = allowVNetOverride;
            Description = description;
            Etag = etag;
            Folder = folder;
            Id = id;
            Name = name;
            Policy = policy;
            SourceConnectionsInfo = sourceConnectionsInfo;
            Status = status;
            TargetConnectionsInfo = targetConnectionsInfo;
            Type = type;
        }
    }
}
