// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.V20170901Preview
{
    [Obsolete(@"Version 2017-09-01-preview will be removed in v2 of the provider.")]
    public static class GetFactory
    {
        /// <summary>
        /// Gets a factory.
        /// </summary>
        public static Task<GetFactoryResult> InvokeAsync(GetFactoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFactoryResult>("azure-native:datafactory/v20170901preview:getFactory", args ?? new GetFactoryArgs(), options.WithDefaults());

        /// <summary>
        /// Gets a factory.
        /// </summary>
        public static Output<GetFactoryResult> Invoke(GetFactoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFactoryResult>("azure-native:datafactory/v20170901preview:getFactory", args ?? new GetFactoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFactoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The factory name.
        /// </summary>
        [Input("factoryName", required: true)]
        public string FactoryName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFactoryArgs()
        {
        }
        public static new GetFactoryArgs Empty => new GetFactoryArgs();
    }

    public sealed class GetFactoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The factory name.
        /// </summary>
        [Input("factoryName", required: true)]
        public Input<string> FactoryName { get; set; } = null!;

        /// <summary>
        /// The resource group name.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetFactoryInvokeArgs()
        {
        }
        public static new GetFactoryInvokeArgs Empty => new GetFactoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetFactoryResult
    {
        /// <summary>
        /// Time the factory was created in ISO8601 format.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The resource identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Managed service identity of the factory.
        /// </summary>
        public readonly Outputs.FactoryIdentityResponse? Identity;
        /// <summary>
        /// The resource location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The resource name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Factory provisioning state, example Succeeded.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The resource type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Version of the factory.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// VSTS repo information of the factory.
        /// </summary>
        public readonly Outputs.FactoryVSTSConfigurationResponse? VstsConfiguration;

        [OutputConstructor]
        private GetFactoryResult(
            string createTime,

            string id,

            Outputs.FactoryIdentityResponse? identity,

            string? location,

            string name,

            string provisioningState,

            ImmutableDictionary<string, string>? tags,

            string type,

            string version,

            Outputs.FactoryVSTSConfigurationResponse? vstsConfiguration)
        {
            CreateTime = createTime;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            Tags = tags;
            Type = type;
            Version = version;
            VstsConfiguration = vstsConfiguration;
        }
    }
}
