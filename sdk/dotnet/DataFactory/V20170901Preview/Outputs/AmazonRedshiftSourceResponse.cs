// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.V20170901Preview.Outputs
{

    [OutputType]
    public sealed class AmazonRedshiftSourceResponse
    {
        /// <summary>
        /// Database query. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? Query;
        /// <summary>
        /// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
        /// </summary>
        public readonly Outputs.RedshiftUnloadSettingsResponse? RedshiftUnloadSettings;
        /// <summary>
        /// Source retry count. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? SourceRetryCount;
        /// <summary>
        /// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        public readonly object? SourceRetryWait;
        /// <summary>
        /// Copy source type.
        /// Expected value is 'AmazonRedshiftSource'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private AmazonRedshiftSourceResponse(
            object? query,

            Outputs.RedshiftUnloadSettingsResponse? redshiftUnloadSettings,

            object? sourceRetryCount,

            object? sourceRetryWait,

            string type)
        {
            Query = query;
            RedshiftUnloadSettings = redshiftUnloadSettings;
            SourceRetryCount = sourceRetryCount;
            SourceRetryWait = sourceRetryWait;
            Type = type;
        }
    }
}
