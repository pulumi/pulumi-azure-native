// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.DataFactory.V20170901Preview.Outputs
{

    [OutputType]
    public sealed class AmazonS3DatasetResponseResult
    {
        /// <summary>
        /// List of tags that can be used for describing the Dataset.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, object>> Annotations;
        /// <summary>
        /// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly ImmutableDictionary<string, object> BucketName;
        /// <summary>
        /// The data compression method used for the Amazon S3 object.
        /// </summary>
        public readonly Union<Outputs.DatasetBZip2CompressionResponseResult, Union<Outputs.DatasetDeflateCompressionResponseResult, Union<Outputs.DatasetGZipCompressionResponseResult, Outputs.DatasetZipDeflateCompressionResponseResult>>>? Compression;
        /// <summary>
        /// Dataset description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The format of files.
        /// </summary>
        public readonly Union<Outputs.AvroFormatResponseResult, Union<Outputs.JsonFormatResponseResult, Union<Outputs.OrcFormatResponseResult, Union<Outputs.ParquetFormatResponseResult, Outputs.TextFormatResponseResult>>>>? Format;
        /// <summary>
        /// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Key;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponseResult LinkedServiceName;
        /// <summary>
        /// Parameters for dataset.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterSpecificationResponseResult>? Parameters;
        /// <summary>
        /// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Prefix;
        /// <summary>
        /// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Structure;
        /// <summary>
        /// Type of dataset.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The version for the S3 object. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Version;

        [OutputConstructor]
        private AmazonS3DatasetResponseResult(
            ImmutableArray<ImmutableDictionary<string, object>> annotations,

            ImmutableDictionary<string, object> bucketName,

            Union<Outputs.DatasetBZip2CompressionResponseResult, Union<Outputs.DatasetDeflateCompressionResponseResult, Union<Outputs.DatasetGZipCompressionResponseResult, Outputs.DatasetZipDeflateCompressionResponseResult>>>? compression,

            string? description,

            Union<Outputs.AvroFormatResponseResult, Union<Outputs.JsonFormatResponseResult, Union<Outputs.OrcFormatResponseResult, Union<Outputs.ParquetFormatResponseResult, Outputs.TextFormatResponseResult>>>>? format,

            ImmutableDictionary<string, object>? key,

            Outputs.LinkedServiceReferenceResponseResult linkedServiceName,

            ImmutableDictionary<string, Outputs.ParameterSpecificationResponseResult>? parameters,

            ImmutableDictionary<string, object>? prefix,

            ImmutableDictionary<string, object>? structure,

            string type,

            ImmutableDictionary<string, object>? version)
        {
            Annotations = annotations;
            BucketName = bucketName;
            Compression = compression;
            Description = description;
            Format = format;
            Key = key;
            LinkedServiceName = linkedServiceName;
            Parameters = parameters;
            Prefix = prefix;
            Structure = structure;
            Type = type;
            Version = version;
        }
    }
}
