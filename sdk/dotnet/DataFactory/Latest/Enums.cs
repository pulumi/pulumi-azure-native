// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNextGen.DataFactory.Latest
{
    [EnumType]
    public readonly struct AvroCompressionCodec : IEquatable<AvroCompressionCodec>
    {
        private readonly string _value;

        private AvroCompressionCodec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AvroCompressionCodec None { get; } = new AvroCompressionCodec("none");
        public static AvroCompressionCodec Deflate { get; } = new AvroCompressionCodec("deflate");
        public static AvroCompressionCodec Snappy { get; } = new AvroCompressionCodec("snappy");
        public static AvroCompressionCodec Xz { get; } = new AvroCompressionCodec("xz");
        public static AvroCompressionCodec Bzip2 { get; } = new AvroCompressionCodec("bzip2");

        public static bool operator ==(AvroCompressionCodec left, AvroCompressionCodec right) => left.Equals(right);
        public static bool operator !=(AvroCompressionCodec left, AvroCompressionCodec right) => !left.Equals(right);

        public static explicit operator string(AvroCompressionCodec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AvroCompressionCodec other && Equals(other);
        public bool Equals(AvroCompressionCodec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rest API method for target endpoint.
    /// </summary>
    [EnumType]
    public readonly struct AzureFunctionActivityMethod : IEquatable<AzureFunctionActivityMethod>
    {
        private readonly string _value;

        private AzureFunctionActivityMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureFunctionActivityMethod GET { get; } = new AzureFunctionActivityMethod("GET");
        public static AzureFunctionActivityMethod POST { get; } = new AzureFunctionActivityMethod("POST");
        public static AzureFunctionActivityMethod PUT { get; } = new AzureFunctionActivityMethod("PUT");
        public static AzureFunctionActivityMethod DELETE { get; } = new AzureFunctionActivityMethod("DELETE");
        public static AzureFunctionActivityMethod OPTIONS { get; } = new AzureFunctionActivityMethod("OPTIONS");
        public static AzureFunctionActivityMethod HEAD { get; } = new AzureFunctionActivityMethod("HEAD");
        public static AzureFunctionActivityMethod TRACE { get; } = new AzureFunctionActivityMethod("TRACE");

        public static bool operator ==(AzureFunctionActivityMethod left, AzureFunctionActivityMethod right) => left.Equals(right);
        public static bool operator !=(AzureFunctionActivityMethod left, AzureFunctionActivityMethod right) => !left.Equals(right);

        public static explicit operator string(AzureFunctionActivityMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureFunctionActivityMethod other && Equals(other);
        public bool Equals(AzureFunctionActivityMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify the write behavior when upserting documents into Azure Search Index.
    /// </summary>
    [EnumType]
    public readonly struct AzureSearchIndexWriteBehaviorType : IEquatable<AzureSearchIndexWriteBehaviorType>
    {
        private readonly string _value;

        private AzureSearchIndexWriteBehaviorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AzureSearchIndexWriteBehaviorType Merge { get; } = new AzureSearchIndexWriteBehaviorType("Merge");
        public static AzureSearchIndexWriteBehaviorType Upload { get; } = new AzureSearchIndexWriteBehaviorType("Upload");

        public static bool operator ==(AzureSearchIndexWriteBehaviorType left, AzureSearchIndexWriteBehaviorType right) => left.Equals(right);
        public static bool operator !=(AzureSearchIndexWriteBehaviorType left, AzureSearchIndexWriteBehaviorType right) => !left.Equals(right);

        public static explicit operator string(AzureSearchIndexWriteBehaviorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AzureSearchIndexWriteBehaviorType other && Equals(other);
        public bool Equals(AzureSearchIndexWriteBehaviorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BlobEventTypes : IEquatable<BlobEventTypes>
    {
        private readonly string _value;

        private BlobEventTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BlobEventTypes Microsoft_Storage_BlobCreated { get; } = new BlobEventTypes("Microsoft.Storage.BlobCreated");
        public static BlobEventTypes Microsoft_Storage_BlobDeleted { get; } = new BlobEventTypes("Microsoft.Storage.BlobDeleted");

        public static bool operator ==(BlobEventTypes left, BlobEventTypes right) => left.Equals(right);
        public static bool operator !=(BlobEventTypes left, BlobEventTypes right) => !left.Equals(right);

        public static explicit operator string(BlobEventTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BlobEventTypes other && Equals(other);
        public bool Equals(BlobEventTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
    /// </summary>
    [EnumType]
    public readonly struct CassandraSourceReadConsistencyLevels : IEquatable<CassandraSourceReadConsistencyLevels>
    {
        private readonly string _value;

        private CassandraSourceReadConsistencyLevels(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CassandraSourceReadConsistencyLevels ALL { get; } = new CassandraSourceReadConsistencyLevels("ALL");
        public static CassandraSourceReadConsistencyLevels EACH_QUORUM { get; } = new CassandraSourceReadConsistencyLevels("EACH_QUORUM");
        public static CassandraSourceReadConsistencyLevels QUORUM { get; } = new CassandraSourceReadConsistencyLevels("QUORUM");
        public static CassandraSourceReadConsistencyLevels LOCAL_QUORUM { get; } = new CassandraSourceReadConsistencyLevels("LOCAL_QUORUM");
        public static CassandraSourceReadConsistencyLevels ONE { get; } = new CassandraSourceReadConsistencyLevels("ONE");
        public static CassandraSourceReadConsistencyLevels TWO { get; } = new CassandraSourceReadConsistencyLevels("TWO");
        public static CassandraSourceReadConsistencyLevels THREE { get; } = new CassandraSourceReadConsistencyLevels("THREE");
        public static CassandraSourceReadConsistencyLevels LOCAL_ONE { get; } = new CassandraSourceReadConsistencyLevels("LOCAL_ONE");
        public static CassandraSourceReadConsistencyLevels SERIAL { get; } = new CassandraSourceReadConsistencyLevels("SERIAL");
        public static CassandraSourceReadConsistencyLevels LOCAL_SERIAL { get; } = new CassandraSourceReadConsistencyLevels("LOCAL_SERIAL");

        public static bool operator ==(CassandraSourceReadConsistencyLevels left, CassandraSourceReadConsistencyLevels right) => left.Equals(right);
        public static bool operator !=(CassandraSourceReadConsistencyLevels left, CassandraSourceReadConsistencyLevels right) => !left.Equals(right);

        public static explicit operator string(CassandraSourceReadConsistencyLevels value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CassandraSourceReadConsistencyLevels other && Equals(other);
        public bool Equals(CassandraSourceReadConsistencyLevels other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CompressionCodec : IEquatable<CompressionCodec>
    {
        private readonly string _value;

        private CompressionCodec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CompressionCodec None { get; } = new CompressionCodec("none");
        public static CompressionCodec Gzip { get; } = new CompressionCodec("gzip");
        public static CompressionCodec Snappy { get; } = new CompressionCodec("snappy");
        public static CompressionCodec Lzo { get; } = new CompressionCodec("lzo");

        public static bool operator ==(CompressionCodec left, CompressionCodec right) => left.Equals(right);
        public static bool operator !=(CompressionCodec left, CompressionCodec right) => !left.Equals(right);

        public static explicit operator string(CompressionCodec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CompressionCodec other && Equals(other);
        public bool Equals(CompressionCodec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Compute type of the cluster which will execute data flow job.
    /// </summary>
    [EnumType]
    public readonly struct DataFlowComputeType : IEquatable<DataFlowComputeType>
    {
        private readonly string _value;

        private DataFlowComputeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataFlowComputeType General { get; } = new DataFlowComputeType("General");
        public static DataFlowComputeType MemoryOptimized { get; } = new DataFlowComputeType("MemoryOptimized");
        public static DataFlowComputeType ComputeOptimized { get; } = new DataFlowComputeType("ComputeOptimized");

        public static bool operator ==(DataFlowComputeType left, DataFlowComputeType right) => left.Equals(right);
        public static bool operator !=(DataFlowComputeType left, DataFlowComputeType right) => !left.Equals(right);

        public static explicit operator string(DataFlowComputeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataFlowComputeType other && Equals(other);
        public bool Equals(DataFlowComputeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The data compression method used for DelimitedText.
    /// </summary>
    [EnumType]
    public readonly struct DatasetCompressionLevel : IEquatable<DatasetCompressionLevel>
    {
        private readonly string _value;

        private DatasetCompressionLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetCompressionLevel Optimal { get; } = new DatasetCompressionLevel("Optimal");
        public static DatasetCompressionLevel Fastest { get; } = new DatasetCompressionLevel("Fastest");

        public static bool operator ==(DatasetCompressionLevel left, DatasetCompressionLevel right) => left.Equals(right);
        public static bool operator !=(DatasetCompressionLevel left, DatasetCompressionLevel right) => !left.Equals(right);

        public static explicit operator string(DatasetCompressionLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetCompressionLevel other && Equals(other);
        public bool Equals(DatasetCompressionLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day of the week.
    /// </summary>
    [EnumType]
    public readonly struct DayOfWeek : IEquatable<DayOfWeek>
    {
        private readonly string _value;

        private DayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DayOfWeek Sunday { get; } = new DayOfWeek("Sunday");
        public static DayOfWeek Monday { get; } = new DayOfWeek("Monday");
        public static DayOfWeek Tuesday { get; } = new DayOfWeek("Tuesday");
        public static DayOfWeek Wednesday { get; } = new DayOfWeek("Wednesday");
        public static DayOfWeek Thursday { get; } = new DayOfWeek("Thursday");
        public static DayOfWeek Friday { get; } = new DayOfWeek("Friday");
        public static DayOfWeek Saturday { get; } = new DayOfWeek("Saturday");

        public static bool operator ==(DayOfWeek left, DayOfWeek right) => left.Equals(right);
        public static bool operator !=(DayOfWeek left, DayOfWeek right) => !left.Equals(right);

        public static explicit operator string(DayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DayOfWeek other && Equals(other);
        public bool Equals(DayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DaysOfWeek : IEquatable<DaysOfWeek>
    {
        private readonly string _value;

        private DaysOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DaysOfWeek Sunday { get; } = new DaysOfWeek("Sunday");
        public static DaysOfWeek Monday { get; } = new DaysOfWeek("Monday");
        public static DaysOfWeek Tuesday { get; } = new DaysOfWeek("Tuesday");
        public static DaysOfWeek Wednesday { get; } = new DaysOfWeek("Wednesday");
        public static DaysOfWeek Thursday { get; } = new DaysOfWeek("Thursday");
        public static DaysOfWeek Friday { get; } = new DaysOfWeek("Friday");
        public static DaysOfWeek Saturday { get; } = new DaysOfWeek("Saturday");

        public static bool operator ==(DaysOfWeek left, DaysOfWeek right) => left.Equals(right);
        public static bool operator !=(DaysOfWeek left, DaysOfWeek right) => !left.Equals(right);

        public static explicit operator string(DaysOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DaysOfWeek other && Equals(other);
        public bool Equals(DaysOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
    /// </summary>
    [EnumType]
    public readonly struct Db2AuthenticationType : IEquatable<Db2AuthenticationType>
    {
        private readonly string _value;

        private Db2AuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Db2AuthenticationType Basic { get; } = new Db2AuthenticationType("Basic");

        public static bool operator ==(Db2AuthenticationType left, Db2AuthenticationType right) => left.Equals(right);
        public static bool operator !=(Db2AuthenticationType left, Db2AuthenticationType right) => !left.Equals(right);

        public static explicit operator string(Db2AuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Db2AuthenticationType other && Equals(other);
        public bool Equals(Db2AuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DependencyCondition : IEquatable<DependencyCondition>
    {
        private readonly string _value;

        private DependencyCondition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DependencyCondition Succeeded { get; } = new DependencyCondition("Succeeded");
        public static DependencyCondition Failed { get; } = new DependencyCondition("Failed");
        public static DependencyCondition Skipped { get; } = new DependencyCondition("Skipped");
        public static DependencyCondition Completed { get; } = new DependencyCondition("Completed");

        public static bool operator ==(DependencyCondition left, DependencyCondition right) => left.Equals(right);
        public static bool operator !=(DependencyCondition left, DependencyCondition right) => !left.Equals(right);

        public static explicit operator string(DependencyCondition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DependencyCondition other && Equals(other);
        public bool Equals(DependencyCondition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
    /// </summary>
    [EnumType]
    public readonly struct DynamicsAuthenticationType : IEquatable<DynamicsAuthenticationType>
    {
        private readonly string _value;

        private DynamicsAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicsAuthenticationType Office365 { get; } = new DynamicsAuthenticationType("Office365");
        public static DynamicsAuthenticationType Ifd { get; } = new DynamicsAuthenticationType("Ifd");
        public static DynamicsAuthenticationType AADServicePrincipal { get; } = new DynamicsAuthenticationType("AADServicePrincipal");

        public static bool operator ==(DynamicsAuthenticationType left, DynamicsAuthenticationType right) => left.Equals(right);
        public static bool operator !=(DynamicsAuthenticationType left, DynamicsAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(DynamicsAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicsAuthenticationType other && Equals(other);
        public bool Equals(DynamicsAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
    /// </summary>
    [EnumType]
    public readonly struct DynamicsDeploymentType : IEquatable<DynamicsDeploymentType>
    {
        private readonly string _value;

        private DynamicsDeploymentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicsDeploymentType Online { get; } = new DynamicsDeploymentType("Online");
        public static DynamicsDeploymentType OnPremisesWithIfd { get; } = new DynamicsDeploymentType("OnPremisesWithIfd");

        public static bool operator ==(DynamicsDeploymentType left, DynamicsDeploymentType right) => left.Equals(right);
        public static bool operator !=(DynamicsDeploymentType left, DynamicsDeploymentType right) => !left.Equals(right);

        public static explicit operator string(DynamicsDeploymentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicsDeploymentType other && Equals(other);
        public bool Equals(DynamicsDeploymentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
    /// </summary>
    [EnumType]
    public readonly struct DynamicsServicePrincipalCredentialType : IEquatable<DynamicsServicePrincipalCredentialType>
    {
        private readonly string _value;

        private DynamicsServicePrincipalCredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicsServicePrincipalCredentialType ServicePrincipalKey { get; } = new DynamicsServicePrincipalCredentialType("ServicePrincipalKey");
        public static DynamicsServicePrincipalCredentialType ServicePrincipalCert { get; } = new DynamicsServicePrincipalCredentialType("ServicePrincipalCert");

        public static bool operator ==(DynamicsServicePrincipalCredentialType left, DynamicsServicePrincipalCredentialType right) => left.Equals(right);
        public static bool operator !=(DynamicsServicePrincipalCredentialType left, DynamicsServicePrincipalCredentialType right) => !left.Equals(right);

        public static explicit operator string(DynamicsServicePrincipalCredentialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicsServicePrincipalCredentialType other && Equals(other);
        public bool Equals(DynamicsServicePrincipalCredentialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The write behavior for the operation.
    /// </summary>
    [EnumType]
    public readonly struct DynamicsSinkWriteBehavior : IEquatable<DynamicsSinkWriteBehavior>
    {
        private readonly string _value;

        private DynamicsSinkWriteBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicsSinkWriteBehavior Upsert { get; } = new DynamicsSinkWriteBehavior("Upsert");

        public static bool operator ==(DynamicsSinkWriteBehavior left, DynamicsSinkWriteBehavior right) => left.Equals(right);
        public static bool operator !=(DynamicsSinkWriteBehavior left, DynamicsSinkWriteBehavior right) => !left.Equals(right);

        public static explicit operator string(DynamicsSinkWriteBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicsSinkWriteBehavior other && Equals(other);
        public bool Equals(DynamicsSinkWriteBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identity type.
    /// </summary>
    [EnumType]
    public readonly struct FactoryIdentityType : IEquatable<FactoryIdentityType>
    {
        private readonly string _value;

        private FactoryIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FactoryIdentityType SystemAssigned { get; } = new FactoryIdentityType("SystemAssigned");

        public static bool operator ==(FactoryIdentityType left, FactoryIdentityType right) => left.Equals(right);
        public static bool operator !=(FactoryIdentityType left, FactoryIdentityType right) => !left.Equals(right);

        public static explicit operator string(FactoryIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FactoryIdentityType other && Equals(other);
        public bool Equals(FactoryIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to be used to connect to the FTP server.
    /// </summary>
    [EnumType]
    public readonly struct FtpAuthenticationType : IEquatable<FtpAuthenticationType>
    {
        private readonly string _value;

        private FtpAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FtpAuthenticationType Basic { get; } = new FtpAuthenticationType("Basic");
        public static FtpAuthenticationType Anonymous { get; } = new FtpAuthenticationType("Anonymous");

        public static bool operator ==(FtpAuthenticationType left, FtpAuthenticationType right) => left.Equals(right);
        public static bool operator !=(FtpAuthenticationType left, FtpAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(FtpAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FtpAuthenticationType other && Equals(other);
        public bool Equals(FtpAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Global Parameter type.
    /// </summary>
    [EnumType]
    public readonly struct GlobalParameterType : IEquatable<GlobalParameterType>
    {
        private readonly string _value;

        private GlobalParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalParameterType Object { get; } = new GlobalParameterType("Object");
        public static GlobalParameterType String { get; } = new GlobalParameterType("String");
        public static GlobalParameterType Int { get; } = new GlobalParameterType("Int");
        public static GlobalParameterType Float { get; } = new GlobalParameterType("Float");
        public static GlobalParameterType Bool { get; } = new GlobalParameterType("Bool");
        public static GlobalParameterType Array { get; } = new GlobalParameterType("Array");

        public static bool operator ==(GlobalParameterType left, GlobalParameterType right) => left.Equals(right);
        public static bool operator !=(GlobalParameterType left, GlobalParameterType right) => !left.Equals(right);

        public static explicit operator string(GlobalParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalParameterType other && Equals(other);
        public bool Equals(GlobalParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
    /// </summary>
    [EnumType]
    public readonly struct GoogleAdWordsAuthenticationType : IEquatable<GoogleAdWordsAuthenticationType>
    {
        private readonly string _value;

        private GoogleAdWordsAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GoogleAdWordsAuthenticationType ServiceAuthentication { get; } = new GoogleAdWordsAuthenticationType("ServiceAuthentication");
        public static GoogleAdWordsAuthenticationType UserAuthentication { get; } = new GoogleAdWordsAuthenticationType("UserAuthentication");

        public static bool operator ==(GoogleAdWordsAuthenticationType left, GoogleAdWordsAuthenticationType right) => left.Equals(right);
        public static bool operator !=(GoogleAdWordsAuthenticationType left, GoogleAdWordsAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(GoogleAdWordsAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleAdWordsAuthenticationType other && Equals(other);
        public bool Equals(GoogleAdWordsAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
    /// </summary>
    [EnumType]
    public readonly struct GoogleBigQueryAuthenticationType : IEquatable<GoogleBigQueryAuthenticationType>
    {
        private readonly string _value;

        private GoogleBigQueryAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GoogleBigQueryAuthenticationType ServiceAuthentication { get; } = new GoogleBigQueryAuthenticationType("ServiceAuthentication");
        public static GoogleBigQueryAuthenticationType UserAuthentication { get; } = new GoogleBigQueryAuthenticationType("UserAuthentication");

        public static bool operator ==(GoogleBigQueryAuthenticationType left, GoogleBigQueryAuthenticationType right) => left.Equals(right);
        public static bool operator !=(GoogleBigQueryAuthenticationType left, GoogleBigQueryAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(GoogleBigQueryAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GoogleBigQueryAuthenticationType other && Equals(other);
        public bool Equals(GoogleBigQueryAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mechanism to use to connect to the HBase server.
    /// </summary>
    [EnumType]
    public readonly struct HBaseAuthenticationType : IEquatable<HBaseAuthenticationType>
    {
        private readonly string _value;

        private HBaseAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HBaseAuthenticationType Anonymous { get; } = new HBaseAuthenticationType("Anonymous");
        public static HBaseAuthenticationType Basic { get; } = new HBaseAuthenticationType("Basic");

        public static bool operator ==(HBaseAuthenticationType left, HBaseAuthenticationType right) => left.Equals(right);
        public static bool operator !=(HBaseAuthenticationType left, HBaseAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(HBaseAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HBaseAuthenticationType other && Equals(other);
        public bool Equals(HBaseAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Debug info option.
    /// </summary>
    [EnumType]
    public readonly struct HDInsightActivityDebugInfoOption : IEquatable<HDInsightActivityDebugInfoOption>
    {
        private readonly string _value;

        private HDInsightActivityDebugInfoOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HDInsightActivityDebugInfoOption None { get; } = new HDInsightActivityDebugInfoOption("None");
        public static HDInsightActivityDebugInfoOption Always { get; } = new HDInsightActivityDebugInfoOption("Always");
        public static HDInsightActivityDebugInfoOption Failure { get; } = new HDInsightActivityDebugInfoOption("Failure");

        public static bool operator ==(HDInsightActivityDebugInfoOption left, HDInsightActivityDebugInfoOption right) => left.Equals(right);
        public static bool operator !=(HDInsightActivityDebugInfoOption left, HDInsightActivityDebugInfoOption right) => !left.Equals(right);

        public static explicit operator string(HDInsightActivityDebugInfoOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HDInsightActivityDebugInfoOption other && Equals(other);
        public bool Equals(HDInsightActivityDebugInfoOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The node types on which the script action should be executed.
    /// </summary>
    [EnumType]
    public readonly struct HdiNodeTypes : IEquatable<HdiNodeTypes>
    {
        private readonly string _value;

        private HdiNodeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HdiNodeTypes Headnode { get; } = new HdiNodeTypes("Headnode");
        public static HdiNodeTypes Workernode { get; } = new HdiNodeTypes("Workernode");
        public static HdiNodeTypes Zookeeper { get; } = new HdiNodeTypes("Zookeeper");

        public static bool operator ==(HdiNodeTypes left, HdiNodeTypes right) => left.Equals(right);
        public static bool operator !=(HdiNodeTypes left, HdiNodeTypes right) => !left.Equals(right);

        public static explicit operator string(HdiNodeTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HdiNodeTypes other && Equals(other);
        public bool Equals(HdiNodeTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication method used to access the Hive server.
    /// </summary>
    [EnumType]
    public readonly struct HiveAuthenticationType : IEquatable<HiveAuthenticationType>
    {
        private readonly string _value;

        private HiveAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HiveAuthenticationType Anonymous { get; } = new HiveAuthenticationType("Anonymous");
        public static HiveAuthenticationType Username { get; } = new HiveAuthenticationType("Username");
        public static HiveAuthenticationType UsernameAndPassword { get; } = new HiveAuthenticationType("UsernameAndPassword");
        public static HiveAuthenticationType WindowsAzureHDInsightService { get; } = new HiveAuthenticationType("WindowsAzureHDInsightService");

        public static bool operator ==(HiveAuthenticationType left, HiveAuthenticationType right) => left.Equals(right);
        public static bool operator !=(HiveAuthenticationType left, HiveAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(HiveAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HiveAuthenticationType other && Equals(other);
        public bool Equals(HiveAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Hive server.
    /// </summary>
    [EnumType]
    public readonly struct HiveServerType : IEquatable<HiveServerType>
    {
        private readonly string _value;

        private HiveServerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HiveServerType HiveServer1 { get; } = new HiveServerType("HiveServer1");
        public static HiveServerType HiveServer2 { get; } = new HiveServerType("HiveServer2");
        public static HiveServerType HiveThriftServer { get; } = new HiveServerType("HiveThriftServer");

        public static bool operator ==(HiveServerType left, HiveServerType right) => left.Equals(right);
        public static bool operator !=(HiveServerType left, HiveServerType right) => !left.Equals(right);

        public static explicit operator string(HiveServerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HiveServerType other && Equals(other);
        public bool Equals(HiveServerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The transport protocol to use in the Thrift layer.
    /// </summary>
    [EnumType]
    public readonly struct HiveThriftTransportProtocol : IEquatable<HiveThriftTransportProtocol>
    {
        private readonly string _value;

        private HiveThriftTransportProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HiveThriftTransportProtocol Binary { get; } = new HiveThriftTransportProtocol("Binary");
        public static HiveThriftTransportProtocol SASL { get; } = new HiveThriftTransportProtocol("SASL");
        public static HiveThriftTransportProtocol HTTP_ { get; } = new HiveThriftTransportProtocol("HTTP ");

        public static bool operator ==(HiveThriftTransportProtocol left, HiveThriftTransportProtocol right) => left.Equals(right);
        public static bool operator !=(HiveThriftTransportProtocol left, HiveThriftTransportProtocol right) => !left.Equals(right);

        public static explicit operator string(HiveThriftTransportProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HiveThriftTransportProtocol other && Equals(other);
        public bool Equals(HiveThriftTransportProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to be used to connect to the HTTP server.
    /// </summary>
    [EnumType]
    public readonly struct HttpAuthenticationType : IEquatable<HttpAuthenticationType>
    {
        private readonly string _value;

        private HttpAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HttpAuthenticationType Basic { get; } = new HttpAuthenticationType("Basic");
        public static HttpAuthenticationType Anonymous { get; } = new HttpAuthenticationType("Anonymous");
        public static HttpAuthenticationType Digest { get; } = new HttpAuthenticationType("Digest");
        public static HttpAuthenticationType Windows { get; } = new HttpAuthenticationType("Windows");
        public static HttpAuthenticationType ClientCertificate { get; } = new HttpAuthenticationType("ClientCertificate");

        public static bool operator ==(HttpAuthenticationType left, HttpAuthenticationType right) => left.Equals(right);
        public static bool operator !=(HttpAuthenticationType left, HttpAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(HttpAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HttpAuthenticationType other && Equals(other);
        public bool Equals(HttpAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to use.
    /// </summary>
    [EnumType]
    public readonly struct ImpalaAuthenticationType : IEquatable<ImpalaAuthenticationType>
    {
        private readonly string _value;

        private ImpalaAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImpalaAuthenticationType Anonymous { get; } = new ImpalaAuthenticationType("Anonymous");
        public static ImpalaAuthenticationType SASLUsername { get; } = new ImpalaAuthenticationType("SASLUsername");
        public static ImpalaAuthenticationType UsernameAndPassword { get; } = new ImpalaAuthenticationType("UsernameAndPassword");

        public static bool operator ==(ImpalaAuthenticationType left, ImpalaAuthenticationType right) => left.Equals(right);
        public static bool operator !=(ImpalaAuthenticationType left, ImpalaAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(ImpalaAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImpalaAuthenticationType other && Equals(other);
        public bool Equals(ImpalaAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The edition for the SSIS Integration Runtime
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEdition : IEquatable<IntegrationRuntimeEdition>
    {
        private readonly string _value;

        private IntegrationRuntimeEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEdition Standard { get; } = new IntegrationRuntimeEdition("Standard");
        public static IntegrationRuntimeEdition Enterprise { get; } = new IntegrationRuntimeEdition("Enterprise");

        public static bool operator ==(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEdition left, IntegrationRuntimeEdition right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEdition other && Equals(other);
        public bool Equals(IntegrationRuntimeEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of this referenced entity.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeEntityReferenceType : IEquatable<IntegrationRuntimeEntityReferenceType>
    {
        private readonly string _value;

        private IntegrationRuntimeEntityReferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeEntityReferenceType IntegrationRuntimeReference { get; } = new IntegrationRuntimeEntityReferenceType("IntegrationRuntimeReference");
        public static IntegrationRuntimeEntityReferenceType LinkedServiceReference { get; } = new IntegrationRuntimeEntityReferenceType("LinkedServiceReference");

        public static bool operator ==(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeEntityReferenceType left, IntegrationRuntimeEntityReferenceType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeEntityReferenceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeEntityReferenceType other && Equals(other);
        public bool Equals(IntegrationRuntimeEntityReferenceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// License type for bringing your own license scenario.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeLicenseType : IEquatable<IntegrationRuntimeLicenseType>
    {
        private readonly string _value;

        private IntegrationRuntimeLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeLicenseType BasePrice { get; } = new IntegrationRuntimeLicenseType("BasePrice");
        public static IntegrationRuntimeLicenseType LicenseIncluded { get; } = new IntegrationRuntimeLicenseType("LicenseIncluded");

        public static bool operator ==(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeLicenseType left, IntegrationRuntimeLicenseType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeLicenseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeLicenseType other && Equals(other);
        public bool Equals(IntegrationRuntimeLicenseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeSsisCatalogPricingTier : IEquatable<IntegrationRuntimeSsisCatalogPricingTier>
    {
        private readonly string _value;

        private IntegrationRuntimeSsisCatalogPricingTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeSsisCatalogPricingTier Basic { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Basic");
        public static IntegrationRuntimeSsisCatalogPricingTier Standard { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Standard");
        public static IntegrationRuntimeSsisCatalogPricingTier Premium { get; } = new IntegrationRuntimeSsisCatalogPricingTier("Premium");
        public static IntegrationRuntimeSsisCatalogPricingTier PremiumRS { get; } = new IntegrationRuntimeSsisCatalogPricingTier("PremiumRS");

        public static bool operator ==(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeSsisCatalogPricingTier left, IntegrationRuntimeSsisCatalogPricingTier right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeSsisCatalogPricingTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeSsisCatalogPricingTier other && Equals(other);
        public bool Equals(IntegrationRuntimeSsisCatalogPricingTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of integration runtime.
    /// </summary>
    [EnumType]
    public readonly struct IntegrationRuntimeType : IEquatable<IntegrationRuntimeType>
    {
        private readonly string _value;

        private IntegrationRuntimeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationRuntimeType Managed { get; } = new IntegrationRuntimeType("Managed");
        public static IntegrationRuntimeType SelfHosted { get; } = new IntegrationRuntimeType("SelfHosted");

        public static bool operator ==(IntegrationRuntimeType left, IntegrationRuntimeType right) => left.Equals(right);
        public static bool operator !=(IntegrationRuntimeType left, IntegrationRuntimeType right) => !left.Equals(right);

        public static explicit operator string(IntegrationRuntimeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationRuntimeType other && Equals(other);
        public bool Equals(IntegrationRuntimeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
    /// </summary>
    [EnumType]
    public readonly struct JsonFormatFilePattern : IEquatable<JsonFormatFilePattern>
    {
        private readonly string _value;

        private JsonFormatFilePattern(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JsonFormatFilePattern SetOfObjects { get; } = new JsonFormatFilePattern("setOfObjects");
        public static JsonFormatFilePattern ArrayOfObjects { get; } = new JsonFormatFilePattern("arrayOfObjects");

        public static bool operator ==(JsonFormatFilePattern left, JsonFormatFilePattern right) => left.Equals(right);
        public static bool operator !=(JsonFormatFilePattern left, JsonFormatFilePattern right) => !left.Equals(right);

        public static explicit operator string(JsonFormatFilePattern value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JsonFormatFilePattern other && Equals(other);
        public bool Equals(JsonFormatFilePattern other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
    /// </summary>
    [EnumType]
    public readonly struct JsonWriteFilePattern : IEquatable<JsonWriteFilePattern>
    {
        private readonly string _value;

        private JsonWriteFilePattern(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JsonWriteFilePattern SetOfObjects { get; } = new JsonWriteFilePattern("setOfObjects");
        public static JsonWriteFilePattern ArrayOfObjects { get; } = new JsonWriteFilePattern("arrayOfObjects");

        public static bool operator ==(JsonWriteFilePattern left, JsonWriteFilePattern right) => left.Equals(right);
        public static bool operator !=(JsonWriteFilePattern left, JsonWriteFilePattern right) => !left.Equals(right);

        public static explicit operator string(JsonWriteFilePattern value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JsonWriteFilePattern other && Equals(other);
        public bool Equals(JsonWriteFilePattern other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to be used to connect to the MongoDB database.
    /// </summary>
    [EnumType]
    public readonly struct MongoDbAuthenticationType : IEquatable<MongoDbAuthenticationType>
    {
        private readonly string _value;

        private MongoDbAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MongoDbAuthenticationType Basic { get; } = new MongoDbAuthenticationType("Basic");
        public static MongoDbAuthenticationType Anonymous { get; } = new MongoDbAuthenticationType("Anonymous");

        public static bool operator ==(MongoDbAuthenticationType left, MongoDbAuthenticationType right) => left.Equals(right);
        public static bool operator !=(MongoDbAuthenticationType left, MongoDbAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(MongoDbAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MongoDbAuthenticationType other && Equals(other);
        public bool Equals(MongoDbAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify the credential type (key or cert) is used for service principal.
    /// </summary>
    [EnumType]
    public readonly struct ODataAadServicePrincipalCredentialType : IEquatable<ODataAadServicePrincipalCredentialType>
    {
        private readonly string _value;

        private ODataAadServicePrincipalCredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ODataAadServicePrincipalCredentialType ServicePrincipalKey { get; } = new ODataAadServicePrincipalCredentialType("ServicePrincipalKey");
        public static ODataAadServicePrincipalCredentialType ServicePrincipalCert { get; } = new ODataAadServicePrincipalCredentialType("ServicePrincipalCert");

        public static bool operator ==(ODataAadServicePrincipalCredentialType left, ODataAadServicePrincipalCredentialType right) => left.Equals(right);
        public static bool operator !=(ODataAadServicePrincipalCredentialType left, ODataAadServicePrincipalCredentialType right) => !left.Equals(right);

        public static explicit operator string(ODataAadServicePrincipalCredentialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ODataAadServicePrincipalCredentialType other && Equals(other);
        public bool Equals(ODataAadServicePrincipalCredentialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of authentication used to connect to the OData service.
    /// </summary>
    [EnumType]
    public readonly struct ODataAuthenticationType : IEquatable<ODataAuthenticationType>
    {
        private readonly string _value;

        private ODataAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ODataAuthenticationType Basic { get; } = new ODataAuthenticationType("Basic");
        public static ODataAuthenticationType Anonymous { get; } = new ODataAuthenticationType("Anonymous");
        public static ODataAuthenticationType Windows { get; } = new ODataAuthenticationType("Windows");
        public static ODataAuthenticationType AadServicePrincipal { get; } = new ODataAuthenticationType("AadServicePrincipal");
        public static ODataAuthenticationType ManagedServiceIdentity { get; } = new ODataAuthenticationType("ManagedServiceIdentity");

        public static bool operator ==(ODataAuthenticationType left, ODataAuthenticationType right) => left.Equals(right);
        public static bool operator !=(ODataAuthenticationType left, ODataAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(ODataAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ODataAuthenticationType other && Equals(other);
        public bool Equals(ODataAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OrcCompressionCodec : IEquatable<OrcCompressionCodec>
    {
        private readonly string _value;

        private OrcCompressionCodec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrcCompressionCodec None { get; } = new OrcCompressionCodec("none");
        public static OrcCompressionCodec Zlib { get; } = new OrcCompressionCodec("zlib");
        public static OrcCompressionCodec Snappy { get; } = new OrcCompressionCodec("snappy");
        public static OrcCompressionCodec Lzo { get; } = new OrcCompressionCodec("lzo");

        public static bool operator ==(OrcCompressionCodec left, OrcCompressionCodec right) => left.Equals(right);
        public static bool operator !=(OrcCompressionCodec left, OrcCompressionCodec right) => !left.Equals(right);

        public static explicit operator string(OrcCompressionCodec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrcCompressionCodec other && Equals(other);
        public bool Equals(OrcCompressionCodec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Parameter type.
    /// </summary>
    [EnumType]
    public readonly struct ParameterType : IEquatable<ParameterType>
    {
        private readonly string _value;

        private ParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ParameterType Object { get; } = new ParameterType("Object");
        public static ParameterType String { get; } = new ParameterType("String");
        public static ParameterType Int { get; } = new ParameterType("Int");
        public static ParameterType Float { get; } = new ParameterType("Float");
        public static ParameterType Bool { get; } = new ParameterType("Bool");
        public static ParameterType Array { get; } = new ParameterType("Array");
        public static ParameterType SecureString { get; } = new ParameterType("SecureString");

        public static bool operator ==(ParameterType left, ParameterType right) => left.Equals(right);
        public static bool operator !=(ParameterType left, ParameterType right) => !left.Equals(right);

        public static explicit operator string(ParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ParameterType other && Equals(other);
        public bool Equals(ParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mechanism used to connect to the Phoenix server.
    /// </summary>
    [EnumType]
    public readonly struct PhoenixAuthenticationType : IEquatable<PhoenixAuthenticationType>
    {
        private readonly string _value;

        private PhoenixAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PhoenixAuthenticationType Anonymous { get; } = new PhoenixAuthenticationType("Anonymous");
        public static PhoenixAuthenticationType UsernameAndPassword { get; } = new PhoenixAuthenticationType("UsernameAndPassword");
        public static PhoenixAuthenticationType WindowsAzureHDInsightService { get; } = new PhoenixAuthenticationType("WindowsAzureHDInsightService");

        public static bool operator ==(PhoenixAuthenticationType left, PhoenixAuthenticationType right) => left.Equals(right);
        public static bool operator !=(PhoenixAuthenticationType left, PhoenixAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(PhoenixAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PhoenixAuthenticationType other && Equals(other);
        public bool Equals(PhoenixAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Reject type.
    /// </summary>
    [EnumType]
    public readonly struct PolybaseSettingsRejectType : IEquatable<PolybaseSettingsRejectType>
    {
        private readonly string _value;

        private PolybaseSettingsRejectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PolybaseSettingsRejectType @Value { get; } = new PolybaseSettingsRejectType("value");
        public static PolybaseSettingsRejectType Percentage { get; } = new PolybaseSettingsRejectType("percentage");

        public static bool operator ==(PolybaseSettingsRejectType left, PolybaseSettingsRejectType right) => left.Equals(right);
        public static bool operator !=(PolybaseSettingsRejectType left, PolybaseSettingsRejectType right) => !left.Equals(right);

        public static explicit operator string(PolybaseSettingsRejectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PolybaseSettingsRejectType other && Equals(other);
        public bool Equals(PolybaseSettingsRejectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication mechanism used to connect to the Presto server.
    /// </summary>
    [EnumType]
    public readonly struct PrestoAuthenticationType : IEquatable<PrestoAuthenticationType>
    {
        private readonly string _value;

        private PrestoAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrestoAuthenticationType Anonymous { get; } = new PrestoAuthenticationType("Anonymous");
        public static PrestoAuthenticationType LDAP { get; } = new PrestoAuthenticationType("LDAP");

        public static bool operator ==(PrestoAuthenticationType left, PrestoAuthenticationType right) => left.Equals(right);
        public static bool operator !=(PrestoAuthenticationType left, PrestoAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(PrestoAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrestoAuthenticationType other && Equals(other);
        public bool Equals(PrestoAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not public network access is allowed for the data factory.
    /// </summary>
    [EnumType]
    public readonly struct PublicNetworkAccess : IEquatable<PublicNetworkAccess>
    {
        private readonly string _value;

        private PublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PublicNetworkAccess Enabled { get; } = new PublicNetworkAccess("Enabled");
        public static PublicNetworkAccess Disabled { get; } = new PublicNetworkAccess("Disabled");

        public static bool operator ==(PublicNetworkAccess left, PublicNetworkAccess right) => left.Equals(right);
        public static bool operator !=(PublicNetworkAccess left, PublicNetworkAccess right) => !left.Equals(right);

        public static explicit operator string(PublicNetworkAccess value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PublicNetworkAccess other && Equals(other);
        public bool Equals(PublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency.
    /// </summary>
    [EnumType]
    public readonly struct RecurrenceFrequency : IEquatable<RecurrenceFrequency>
    {
        private readonly string _value;

        private RecurrenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecurrenceFrequency NotSpecified { get; } = new RecurrenceFrequency("NotSpecified");
        public static RecurrenceFrequency Minute { get; } = new RecurrenceFrequency("Minute");
        public static RecurrenceFrequency Hour { get; } = new RecurrenceFrequency("Hour");
        public static RecurrenceFrequency Day { get; } = new RecurrenceFrequency("Day");
        public static RecurrenceFrequency Week { get; } = new RecurrenceFrequency("Week");
        public static RecurrenceFrequency Month { get; } = new RecurrenceFrequency("Month");
        public static RecurrenceFrequency Year { get; } = new RecurrenceFrequency("Year");

        public static bool operator ==(RecurrenceFrequency left, RecurrenceFrequency right) => left.Equals(right);
        public static bool operator !=(RecurrenceFrequency left, RecurrenceFrequency right) => !left.Equals(right);

        public static explicit operator string(RecurrenceFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecurrenceFrequency other && Equals(other);
        public bool Equals(RecurrenceFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of authentication used to connect to the REST service.
    /// </summary>
    [EnumType]
    public readonly struct RestServiceAuthenticationType : IEquatable<RestServiceAuthenticationType>
    {
        private readonly string _value;

        private RestServiceAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RestServiceAuthenticationType Anonymous { get; } = new RestServiceAuthenticationType("Anonymous");
        public static RestServiceAuthenticationType Basic { get; } = new RestServiceAuthenticationType("Basic");
        public static RestServiceAuthenticationType AadServicePrincipal { get; } = new RestServiceAuthenticationType("AadServicePrincipal");
        public static RestServiceAuthenticationType ManagedServiceIdentity { get; } = new RestServiceAuthenticationType("ManagedServiceIdentity");

        public static bool operator ==(RestServiceAuthenticationType left, RestServiceAuthenticationType right) => left.Equals(right);
        public static bool operator !=(RestServiceAuthenticationType left, RestServiceAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(RestServiceAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RestServiceAuthenticationType other && Equals(other);
        public bool Equals(RestServiceAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The write behavior for the operation. Default is Insert.
    /// </summary>
    [EnumType]
    public readonly struct SalesforceSinkWriteBehavior : IEquatable<SalesforceSinkWriteBehavior>
    {
        private readonly string _value;

        private SalesforceSinkWriteBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SalesforceSinkWriteBehavior Insert { get; } = new SalesforceSinkWriteBehavior("Insert");
        public static SalesforceSinkWriteBehavior Upsert { get; } = new SalesforceSinkWriteBehavior("Upsert");

        public static bool operator ==(SalesforceSinkWriteBehavior left, SalesforceSinkWriteBehavior right) => left.Equals(right);
        public static bool operator !=(SalesforceSinkWriteBehavior left, SalesforceSinkWriteBehavior right) => !left.Equals(right);

        public static explicit operator string(SalesforceSinkWriteBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SalesforceSinkWriteBehavior other && Equals(other);
        public bool Equals(SalesforceSinkWriteBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The read behavior for the operation. Default is Query.
    /// </summary>
    [EnumType]
    public readonly struct SalesforceSourceReadBehavior : IEquatable<SalesforceSourceReadBehavior>
    {
        private readonly string _value;

        private SalesforceSourceReadBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SalesforceSourceReadBehavior Query { get; } = new SalesforceSourceReadBehavior("Query");
        public static SalesforceSourceReadBehavior QueryAll { get; } = new SalesforceSourceReadBehavior("QueryAll");

        public static bool operator ==(SalesforceSourceReadBehavior left, SalesforceSourceReadBehavior right) => left.Equals(right);
        public static bool operator !=(SalesforceSourceReadBehavior left, SalesforceSourceReadBehavior right) => !left.Equals(right);

        public static explicit operator string(SalesforceSourceReadBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SalesforceSourceReadBehavior other && Equals(other);
        public bool Equals(SalesforceSourceReadBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The write behavior for the operation. Default is 'Insert'.
    /// </summary>
    [EnumType]
    public readonly struct SapCloudForCustomerSinkWriteBehavior : IEquatable<SapCloudForCustomerSinkWriteBehavior>
    {
        private readonly string _value;

        private SapCloudForCustomerSinkWriteBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SapCloudForCustomerSinkWriteBehavior Insert { get; } = new SapCloudForCustomerSinkWriteBehavior("Insert");
        public static SapCloudForCustomerSinkWriteBehavior Update { get; } = new SapCloudForCustomerSinkWriteBehavior("Update");

        public static bool operator ==(SapCloudForCustomerSinkWriteBehavior left, SapCloudForCustomerSinkWriteBehavior right) => left.Equals(right);
        public static bool operator !=(SapCloudForCustomerSinkWriteBehavior left, SapCloudForCustomerSinkWriteBehavior right) => !left.Equals(right);

        public static explicit operator string(SapCloudForCustomerSinkWriteBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SapCloudForCustomerSinkWriteBehavior other && Equals(other);
        public bool Equals(SapCloudForCustomerSinkWriteBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to be used to connect to the SAP HANA server.
    /// </summary>
    [EnumType]
    public readonly struct SapHanaAuthenticationType : IEquatable<SapHanaAuthenticationType>
    {
        private readonly string _value;

        private SapHanaAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SapHanaAuthenticationType Basic { get; } = new SapHanaAuthenticationType("Basic");
        public static SapHanaAuthenticationType Windows { get; } = new SapHanaAuthenticationType("Windows");

        public static bool operator ==(SapHanaAuthenticationType left, SapHanaAuthenticationType right) => left.Equals(right);
        public static bool operator !=(SapHanaAuthenticationType left, SapHanaAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(SapHanaAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SapHanaAuthenticationType other && Equals(other);
        public bool Equals(SapHanaAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to use.
    /// </summary>
    [EnumType]
    public readonly struct ServiceNowAuthenticationType : IEquatable<ServiceNowAuthenticationType>
    {
        private readonly string _value;

        private ServiceNowAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNowAuthenticationType Basic { get; } = new ServiceNowAuthenticationType("Basic");
        public static ServiceNowAuthenticationType OAuth2 { get; } = new ServiceNowAuthenticationType("OAuth2");

        public static bool operator ==(ServiceNowAuthenticationType left, ServiceNowAuthenticationType right) => left.Equals(right);
        public static bool operator !=(ServiceNowAuthenticationType left, ServiceNowAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(ServiceNowAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNowAuthenticationType other && Equals(other);
        public bool Equals(ServiceNowAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication type to be used to connect to the FTP server.
    /// </summary>
    [EnumType]
    public readonly struct SftpAuthenticationType : IEquatable<SftpAuthenticationType>
    {
        private readonly string _value;

        private SftpAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SftpAuthenticationType Basic { get; } = new SftpAuthenticationType("Basic");
        public static SftpAuthenticationType SshPublicKey { get; } = new SftpAuthenticationType("SshPublicKey");

        public static bool operator ==(SftpAuthenticationType left, SftpAuthenticationType right) => left.Equals(right);
        public static bool operator !=(SftpAuthenticationType left, SftpAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(SftpAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SftpAuthenticationType other && Equals(other);
        public bool Equals(SftpAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The authentication method used to access the Spark server.
    /// </summary>
    [EnumType]
    public readonly struct SparkAuthenticationType : IEquatable<SparkAuthenticationType>
    {
        private readonly string _value;

        private SparkAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SparkAuthenticationType Anonymous { get; } = new SparkAuthenticationType("Anonymous");
        public static SparkAuthenticationType Username { get; } = new SparkAuthenticationType("Username");
        public static SparkAuthenticationType UsernameAndPassword { get; } = new SparkAuthenticationType("UsernameAndPassword");
        public static SparkAuthenticationType WindowsAzureHDInsightService { get; } = new SparkAuthenticationType("WindowsAzureHDInsightService");

        public static bool operator ==(SparkAuthenticationType left, SparkAuthenticationType right) => left.Equals(right);
        public static bool operator !=(SparkAuthenticationType left, SparkAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(SparkAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SparkAuthenticationType other && Equals(other);
        public bool Equals(SparkAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of Spark server.
    /// </summary>
    [EnumType]
    public readonly struct SparkServerType : IEquatable<SparkServerType>
    {
        private readonly string _value;

        private SparkServerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SparkServerType SharkServer { get; } = new SparkServerType("SharkServer");
        public static SparkServerType SharkServer2 { get; } = new SparkServerType("SharkServer2");
        public static SparkServerType SparkThriftServer { get; } = new SparkServerType("SparkThriftServer");

        public static bool operator ==(SparkServerType left, SparkServerType right) => left.Equals(right);
        public static bool operator !=(SparkServerType left, SparkServerType right) => !left.Equals(right);

        public static explicit operator string(SparkServerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SparkServerType other && Equals(other);
        public bool Equals(SparkServerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The transport protocol to use in the Thrift layer.
    /// </summary>
    [EnumType]
    public readonly struct SparkThriftTransportProtocol : IEquatable<SparkThriftTransportProtocol>
    {
        private readonly string _value;

        private SparkThriftTransportProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SparkThriftTransportProtocol Binary { get; } = new SparkThriftTransportProtocol("Binary");
        public static SparkThriftTransportProtocol SASL { get; } = new SparkThriftTransportProtocol("SASL");
        public static SparkThriftTransportProtocol HTTP_ { get; } = new SparkThriftTransportProtocol("HTTP ");

        public static bool operator ==(SparkThriftTransportProtocol left, SparkThriftTransportProtocol right) => left.Equals(right);
        public static bool operator !=(SparkThriftTransportProtocol left, SparkThriftTransportProtocol right) => !left.Equals(right);

        public static explicit operator string(SparkThriftTransportProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SparkThriftTransportProtocol other && Equals(other);
        public bool Equals(SparkThriftTransportProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of SSIS log location.
    /// </summary>
    [EnumType]
    public readonly struct SsisLogLocationType : IEquatable<SsisLogLocationType>
    {
        private readonly string _value;

        private SsisLogLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SsisLogLocationType File { get; } = new SsisLogLocationType("File");

        public static bool operator ==(SsisLogLocationType left, SsisLogLocationType right) => left.Equals(right);
        public static bool operator !=(SsisLogLocationType left, SsisLogLocationType right) => !left.Equals(right);

        public static explicit operator string(SsisLogLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SsisLogLocationType other && Equals(other);
        public bool Equals(SsisLogLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of SSIS package location.
    /// </summary>
    [EnumType]
    public readonly struct SsisPackageLocationType : IEquatable<SsisPackageLocationType>
    {
        private readonly string _value;

        private SsisPackageLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SsisPackageLocationType SSISDB { get; } = new SsisPackageLocationType("SSISDB");
        public static SsisPackageLocationType File { get; } = new SsisPackageLocationType("File");
        public static SsisPackageLocationType InlinePackage { get; } = new SsisPackageLocationType("InlinePackage");
        public static SsisPackageLocationType PackageStore { get; } = new SsisPackageLocationType("PackageStore");

        public static bool operator ==(SsisPackageLocationType left, SsisPackageLocationType right) => left.Equals(right);
        public static bool operator !=(SsisPackageLocationType left, SsisPackageLocationType right) => !left.Equals(right);

        public static explicit operator string(SsisPackageLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SsisPackageLocationType other && Equals(other);
        public bool Equals(SsisPackageLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Stored procedure parameter type.
    /// </summary>
    [EnumType]
    public readonly struct StoredProcedureParameterType : IEquatable<StoredProcedureParameterType>
    {
        private readonly string _value;

        private StoredProcedureParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StoredProcedureParameterType String { get; } = new StoredProcedureParameterType("String");
        public static StoredProcedureParameterType Int { get; } = new StoredProcedureParameterType("Int");
        public static StoredProcedureParameterType Int64 { get; } = new StoredProcedureParameterType("Int64");
        public static StoredProcedureParameterType Decimal { get; } = new StoredProcedureParameterType("Decimal");
        public static StoredProcedureParameterType Guid { get; } = new StoredProcedureParameterType("Guid");
        public static StoredProcedureParameterType Boolean { get; } = new StoredProcedureParameterType("Boolean");
        public static StoredProcedureParameterType Date { get; } = new StoredProcedureParameterType("Date");

        public static bool operator ==(StoredProcedureParameterType left, StoredProcedureParameterType right) => left.Equals(right);
        public static bool operator !=(StoredProcedureParameterType left, StoredProcedureParameterType right) => !left.Equals(right);

        public static explicit operator string(StoredProcedureParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StoredProcedureParameterType other && Equals(other);
        public bool Equals(StoredProcedureParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AuthenticationType to be used for connection.
    /// </summary>
    [EnumType]
    public readonly struct SybaseAuthenticationType : IEquatable<SybaseAuthenticationType>
    {
        private readonly string _value;

        private SybaseAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SybaseAuthenticationType Basic { get; } = new SybaseAuthenticationType("Basic");
        public static SybaseAuthenticationType Windows { get; } = new SybaseAuthenticationType("Windows");

        public static bool operator ==(SybaseAuthenticationType left, SybaseAuthenticationType right) => left.Equals(right);
        public static bool operator !=(SybaseAuthenticationType left, SybaseAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(SybaseAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SybaseAuthenticationType other && Equals(other);
        public bool Equals(SybaseAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// AuthenticationType to be used for connection.
    /// </summary>
    [EnumType]
    public readonly struct TeradataAuthenticationType : IEquatable<TeradataAuthenticationType>
    {
        private readonly string _value;

        private TeradataAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TeradataAuthenticationType Basic { get; } = new TeradataAuthenticationType("Basic");
        public static TeradataAuthenticationType Windows { get; } = new TeradataAuthenticationType("Windows");

        public static bool operator ==(TeradataAuthenticationType left, TeradataAuthenticationType right) => left.Equals(right);
        public static bool operator !=(TeradataAuthenticationType left, TeradataAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(TeradataAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TeradataAuthenticationType other && Equals(other);
        public bool Equals(TeradataAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency of the time windows.
    /// </summary>
    [EnumType]
    public readonly struct TumblingWindowFrequency : IEquatable<TumblingWindowFrequency>
    {
        private readonly string _value;

        private TumblingWindowFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TumblingWindowFrequency Minute { get; } = new TumblingWindowFrequency("Minute");
        public static TumblingWindowFrequency Hour { get; } = new TumblingWindowFrequency("Hour");
        public static TumblingWindowFrequency Month { get; } = new TumblingWindowFrequency("Month");

        public static bool operator ==(TumblingWindowFrequency left, TumblingWindowFrequency right) => left.Equals(right);
        public static bool operator !=(TumblingWindowFrequency left, TumblingWindowFrequency right) => !left.Equals(right);

        public static explicit operator string(TumblingWindowFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TumblingWindowFrequency other && Equals(other);
        public bool Equals(TumblingWindowFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Variable type.
    /// </summary>
    [EnumType]
    public readonly struct VariableType : IEquatable<VariableType>
    {
        private readonly string _value;

        private VariableType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VariableType String { get; } = new VariableType("String");
        public static VariableType Bool { get; } = new VariableType("Bool");
        public static VariableType Array { get; } = new VariableType("Array");

        public static bool operator ==(VariableType left, VariableType right) => left.Equals(right);
        public static bool operator !=(VariableType left, VariableType right) => !left.Equals(right);

        public static explicit operator string(VariableType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VariableType other && Equals(other);
        public bool Equals(VariableType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rest API method for target endpoint.
    /// </summary>
    [EnumType]
    public readonly struct WebActivityMethod : IEquatable<WebActivityMethod>
    {
        private readonly string _value;

        private WebActivityMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebActivityMethod GET { get; } = new WebActivityMethod("GET");
        public static WebActivityMethod POST { get; } = new WebActivityMethod("POST");
        public static WebActivityMethod PUT { get; } = new WebActivityMethod("PUT");
        public static WebActivityMethod DELETE { get; } = new WebActivityMethod("DELETE");

        public static bool operator ==(WebActivityMethod left, WebActivityMethod right) => left.Equals(right);
        public static bool operator !=(WebActivityMethod left, WebActivityMethod right) => !left.Equals(right);

        public static explicit operator string(WebActivityMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebActivityMethod other && Equals(other);
        public bool Equals(WebActivityMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of authentication used to connect to the web table source.
    /// </summary>
    [EnumType]
    public readonly struct WebAuthenticationType : IEquatable<WebAuthenticationType>
    {
        private readonly string _value;

        private WebAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebAuthenticationType Basic { get; } = new WebAuthenticationType("Basic");
        public static WebAuthenticationType Anonymous { get; } = new WebAuthenticationType("Anonymous");
        public static WebAuthenticationType ClientCertificate { get; } = new WebAuthenticationType("ClientCertificate");

        public static bool operator ==(WebAuthenticationType left, WebAuthenticationType right) => left.Equals(right);
        public static bool operator !=(WebAuthenticationType left, WebAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(WebAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebAuthenticationType other && Equals(other);
        public bool Equals(WebAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Rest API method for target endpoint.
    /// </summary>
    [EnumType]
    public readonly struct WebHookActivityMethod : IEquatable<WebHookActivityMethod>
    {
        private readonly string _value;

        private WebHookActivityMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebHookActivityMethod POST { get; } = new WebHookActivityMethod("POST");

        public static bool operator ==(WebHookActivityMethod left, WebHookActivityMethod right) => left.Equals(right);
        public static bool operator !=(WebHookActivityMethod left, WebHookActivityMethod right) => !left.Equals(right);

        public static explicit operator string(WebHookActivityMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebHookActivityMethod other && Equals(other);
        public bool Equals(WebHookActivityMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
