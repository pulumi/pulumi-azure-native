// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.Latest.Inputs
{

    /// <summary>
    /// Execute data flow activity.
    /// </summary>
    public sealed class ExecuteDataFlowActivityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute properties for data flow activity.
        /// </summary>
        [Input("compute")]
        public Input<Inputs.ExecuteDataFlowActivityTypePropertiesComputeArgs>? Compute { get; set; }

        /// <summary>
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// </summary>
        [Input("continueOnError")]
        public Input<object>? ContinueOnError { get; set; }

        /// <summary>
        /// Data flow reference.
        /// </summary>
        [Input("dataFlow", required: true)]
        public Input<Inputs.DataFlowReferenceArgs> DataFlow { get; set; } = null!;

        [Input("dependsOn")]
        private InputList<Inputs.ActivityDependencyArgs>? _dependsOn;

        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public InputList<Inputs.ActivityDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.ActivityDependencyArgs>());
            set => _dependsOn = value;
        }

        /// <summary>
        /// Activity description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        [Input("integrationRuntime")]
        public Input<Inputs.IntegrationRuntimeReferenceArgs>? IntegrationRuntime { get; set; }

        /// <summary>
        /// Linked service reference.
        /// </summary>
        [Input("linkedServiceName")]
        public Input<Inputs.LinkedServiceReferenceArgs>? LinkedServiceName { get; set; }

        /// <summary>
        /// Activity name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Activity policy.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ActivityPolicyArgs>? Policy { get; set; }

        /// <summary>
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// </summary>
        [Input("runConcurrently")]
        public Input<object>? RunConcurrently { get; set; }

        /// <summary>
        /// Staging info for execute data flow activity.
        /// </summary>
        [Input("staging")]
        public Input<Inputs.DataFlowStagingInfoArgs>? Staging { get; set; }

        /// <summary>
        /// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
        /// </summary>
        [Input("traceLevel")]
        public Input<object>? TraceLevel { get; set; }

        /// <summary>
        /// Type of activity.
        /// Expected value is 'Execution'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("userProperties")]
        private InputList<Inputs.UserPropertyArgs>? _userProperties;

        /// <summary>
        /// Activity user properties.
        /// </summary>
        public InputList<Inputs.UserPropertyArgs> UserProperties
        {
            get => _userProperties ?? (_userProperties = new InputList<Inputs.UserPropertyArgs>());
            set => _userProperties = value;
        }

        public ExecuteDataFlowActivityArgs()
        {
        }
    }
}
