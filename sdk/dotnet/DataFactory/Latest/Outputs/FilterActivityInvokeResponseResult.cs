// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.Latest.Outputs
{

    [OutputType]
    public sealed class FilterActivityInvokeResponseResult
    {
        /// <summary>
        /// Condition to be used for filtering the input.
        /// </summary>
        public readonly Outputs.ExpressionInvokeResponseResult Condition;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyInvokeResponseResult> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Input array on which filter should be applied.
        /// </summary>
        public readonly Outputs.ExpressionInvokeResponseResult Items;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'Container'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyInvokeResponseResult> UserProperties;

        [OutputConstructor]
        private FilterActivityInvokeResponseResult(
            Outputs.ExpressionInvokeResponseResult condition,

            ImmutableArray<Outputs.ActivityDependencyInvokeResponseResult> dependsOn,

            string? description,

            Outputs.ExpressionInvokeResponseResult items,

            string name,

            string type,

            ImmutableArray<Outputs.UserPropertyInvokeResponseResult> userProperties)
        {
            Condition = condition;
            DependsOn = dependsOn;
            Description = description;
            Items = items;
            Name = name;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
