// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Databricks Job activity.
    /// </summary>
    [OutputType]
    public sealed class DatabricksJobActivityResponse
    {
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The Id of the Databricks Job to be executed. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object JobId;
        /// <summary>
        /// Job parameters to be used for each run of this job. If the job takes a parameter that is not specified, the default value from the job will be used.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? JobParameters;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'DatabricksJob'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private DatabricksJobActivityResponse(
            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            object jobId,

            ImmutableDictionary<string, object>? jobParameters,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            DependsOn = dependsOn;
            Description = description;
            JobId = jobId;
            JobParameters = jobParameters;
            LinkedServiceName = linkedServiceName;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
