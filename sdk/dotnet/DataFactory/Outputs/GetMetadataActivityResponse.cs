// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Activity to get metadata of dataset
    /// </summary>
    [OutputType]
    public sealed class GetMetadataActivityResponse
    {
        /// <summary>
        /// GetMetadata activity dataset reference.
        /// </summary>
        public readonly Outputs.DatasetReferenceResponse Dataset;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Fields of metadata to get from dataset.
        /// </summary>
        public readonly ImmutableArray<object> FieldList;
        /// <summary>
        /// GetMetadata activity format settings.
        /// </summary>
        public readonly object? FormatSettings;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// GetMetadata activity store settings.
        /// </summary>
        public readonly object? StoreSettings;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'GetMetadata'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private GetMetadataActivityResponse(
            Outputs.DatasetReferenceResponse dataset,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            ImmutableArray<object> fieldList,

            object? formatSettings,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            string? state,

            object? storeSettings,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Dataset = dataset;
            DependsOn = dependsOn;
            Description = description;
            FieldList = fieldList;
            FormatSettings = formatSettings;
            LinkedServiceName = linkedServiceName;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            State = state;
            StoreSettings = storeSettings;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
