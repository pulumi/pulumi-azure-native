// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// This activity is used for iterating over a collection and execute given activities.
    /// </summary>
    [OutputType]
    public sealed class ForEachActivityResponse
    {
        /// <summary>
        /// List of activities to execute .
        /// </summary>
        public readonly ImmutableArray<object> Activities;
        /// <summary>
        /// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
        /// </summary>
        public readonly int? BatchCount;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Should the loop be executed in sequence or in parallel (max 50)
        /// </summary>
        public readonly bool? IsSequential;
        /// <summary>
        /// Collection to iterate.
        /// </summary>
        public readonly Outputs.ExpressionResponse Items;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'ForEach'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private ForEachActivityResponse(
            ImmutableArray<object> activities,

            int? batchCount,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            bool? isSequential,

            Outputs.ExpressionResponse items,

            string name,

            string? onInactiveMarkAs,

            string? state,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Activities = activities;
            BatchCount = batchCount;
            DependsOn = dependsOn;
            Description = description;
            IsSequential = isSequential;
            Items = items;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            State = state;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
