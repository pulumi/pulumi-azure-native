// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// HDInsight Pig activity type.
    /// </summary>
    [OutputType]
    public sealed class HDInsightPigActivityResponse
    {
        /// <summary>
        /// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
        /// </summary>
        public readonly object? Arguments;
        /// <summary>
        /// Allows user to specify defines for Pig job request.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Defines;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Debug info option.
        /// </summary>
        public readonly string? GetDebugInfo;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// Script linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? ScriptLinkedService;
        /// <summary>
        /// Script path. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ScriptPath;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Storage linked service references.
        /// </summary>
        public readonly ImmutableArray<Outputs.LinkedServiceReferenceResponse> StorageLinkedServices;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'HDInsightPig'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private HDInsightPigActivityResponse(
            object? arguments,

            ImmutableDictionary<string, object>? defines,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            string? getDebugInfo,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            string? onInactiveMarkAs,

            Outputs.ActivityPolicyResponse? policy,

            Outputs.LinkedServiceReferenceResponse? scriptLinkedService,

            object? scriptPath,

            string? state,

            ImmutableArray<Outputs.LinkedServiceReferenceResponse> storageLinkedServices,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Arguments = arguments;
            Defines = defines;
            DependsOn = dependsOn;
            Description = description;
            GetDebugInfo = getDebugInfo;
            LinkedServiceName = linkedServiceName;
            Name = name;
            OnInactiveMarkAs = onInactiveMarkAs;
            Policy = policy;
            ScriptLinkedService = scriptLinkedService;
            ScriptPath = scriptPath;
            State = state;
            StorageLinkedServices = storageLinkedServices;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
