// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Linked service for PostgreSQLV2 data source.
    /// </summary>
    [OutputType]
    public sealed class PostgreSqlV2LinkedServiceResponse
    {
        /// <summary>
        /// List of tags that can be used for describing the linked service.
        /// </summary>
        public readonly ImmutableArray<object> Annotations;
        /// <summary>
        /// The authentication type to use. Type: string.
        /// </summary>
        public readonly object AuthenticationType;
        /// <summary>
        /// The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity. Type: integer.
        /// </summary>
        public readonly object? CommandTimeout;
        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        public readonly Outputs.IntegrationRuntimeReferenceResponse? ConnectVia;
        /// <summary>
        /// The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Type: integer.
        /// </summary>
        public readonly object? ConnectionTimeout;
        /// <summary>
        /// Database name for connection. Type: string.
        /// </summary>
        public readonly object Database;
        /// <summary>
        /// Linked service description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. Type: string
        /// </summary>
        public readonly object? Encoding;
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// </summary>
        public readonly string? EncryptedCredential;
        /// <summary>
        /// When enabled, parameter values are logged when commands are executed. Type: boolean.
        /// </summary>
        public readonly object? LogParameters;
        /// <summary>
        /// Parameters for linked service.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.ParameterSpecificationResponse>? Parameters;
        /// <summary>
        /// The Azure key vault secret reference of password in connection string. Type: string.
        /// </summary>
        public readonly Outputs.AzureKeyVaultSecretReferenceResponse? Password;
        /// <summary>
        /// Whether connection pooling should be used. Type: boolean.
        /// </summary>
        public readonly object? Pooling;
        /// <summary>
        /// The port for the connection. Type: integer.
        /// </summary>
        public readonly object? Port;
        /// <summary>
        /// Determines the size of the internal buffer uses when reading. Increasing may improve performance if transferring large values from the database. Type: integer.
        /// </summary>
        public readonly object? ReadBufferSize;
        /// <summary>
        /// Sets the schema search path. Type: string.
        /// </summary>
        public readonly object? Schema;
        /// <summary>
        /// Server name for connection. Type: string.
        /// </summary>
        public readonly object Server;
        /// <summary>
        /// Location of a client certificate to be sent to the server. Type: string.
        /// </summary>
        public readonly object? SslCertificate;
        /// <summary>
        /// Location of a client key for a client certificate to be sent to the server. Type: string.
        /// </summary>
        public readonly object? SslKey;
        /// <summary>
        /// SSL mode for connection. Type: integer. 0: disable, 1:allow, 2: prefer, 3: require, 4: verify-ca, 5: verify-full. Type: integer.
        /// </summary>
        public readonly object SslMode;
        /// <summary>
        /// Password for a key for a client certificate. Type: string.
        /// </summary>
        public readonly object? SslPassword;
        /// <summary>
        /// Gets or sets the session timezone. Type: string.
        /// </summary>
        public readonly object? Timezone;
        /// <summary>
        /// Whether to trust the server certificate without validating it. Type: boolean.
        /// </summary>
        public readonly object? TrustServerCertificate;
        /// <summary>
        /// Type of linked service.
        /// Expected value is 'PostgreSqlV2'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Username for authentication. Type: string.
        /// </summary>
        public readonly object Username;
        /// <summary>
        /// Version of the linked service.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private PostgreSqlV2LinkedServiceResponse(
            ImmutableArray<object> annotations,

            object authenticationType,

            object? commandTimeout,

            Outputs.IntegrationRuntimeReferenceResponse? connectVia,

            object? connectionTimeout,

            object database,

            string? description,

            object? encoding,

            string? encryptedCredential,

            object? logParameters,

            ImmutableDictionary<string, Outputs.ParameterSpecificationResponse>? parameters,

            Outputs.AzureKeyVaultSecretReferenceResponse? password,

            object? pooling,

            object? port,

            object? readBufferSize,

            object? schema,

            object server,

            object? sslCertificate,

            object? sslKey,

            object sslMode,

            object? sslPassword,

            object? timezone,

            object? trustServerCertificate,

            string type,

            object username,

            string? version)
        {
            Annotations = annotations;
            AuthenticationType = authenticationType;
            CommandTimeout = commandTimeout;
            ConnectVia = connectVia;
            ConnectionTimeout = connectionTimeout;
            Database = database;
            Description = description;
            Encoding = encoding;
            EncryptedCredential = encryptedCredential;
            LogParameters = logParameters;
            Parameters = parameters;
            Password = password;
            Pooling = pooling;
            Port = port;
            ReadBufferSize = readBufferSize;
            Schema = schema;
            Server = server;
            SslCertificate = sslCertificate;
            SslKey = sslKey;
            SslMode = sslMode;
            SslPassword = sslPassword;
            Timezone = timezone;
            TrustServerCertificate = trustServerCertificate;
            Type = type;
            Username = username;
            Version = version;
        }
    }
}
