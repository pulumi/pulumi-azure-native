// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Execute Synapse notebook activity.
    /// </summary>
    [OutputType]
    public sealed class SynapseNotebookActivityResponse
    {
        /// <summary>
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// </summary>
        public readonly object? Conf;
        /// <summary>
        /// The type of the spark config.
        /// </summary>
        public readonly string? ConfigurationType;
        /// <summary>
        /// Activity depends on condition.
        /// </summary>
        public readonly ImmutableArray<Outputs.ActivityDependencyResponse> DependsOn;
        /// <summary>
        /// Activity description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? DriverSize;
        /// <summary>
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? ExecutorSize;
        /// <summary>
        /// Linked service reference.
        /// </summary>
        public readonly Outputs.LinkedServiceReferenceResponse? LinkedServiceName;
        /// <summary>
        /// Activity name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Synapse notebook reference.
        /// </summary>
        public readonly Outputs.SynapseNotebookReferenceResponse Notebook;
        /// <summary>
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? NumExecutors;
        /// <summary>
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// </summary>
        public readonly string? OnInactiveMarkAs;
        /// <summary>
        /// Notebook parameters.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.NotebookParameterResponse>? Parameters;
        /// <summary>
        /// Activity policy.
        /// </summary>
        public readonly Outputs.ActivityPolicyResponse? Policy;
        /// <summary>
        /// Spark configuration property.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SparkConfig;
        /// <summary>
        /// The name of the big data pool which will be used to execute the notebook.
        /// </summary>
        public readonly Outputs.BigDataPoolParametrizationReferenceResponse? SparkPool;
        /// <summary>
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The spark configuration of the spark job.
        /// </summary>
        public readonly Outputs.SparkConfigurationParametrizationReferenceResponse? TargetSparkConfiguration;
        /// <summary>
        /// Type of activity.
        /// Expected value is 'SynapseNotebook'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Activity user properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPropertyResponse> UserProperties;

        [OutputConstructor]
        private SynapseNotebookActivityResponse(
            object? conf,

            string? configurationType,

            ImmutableArray<Outputs.ActivityDependencyResponse> dependsOn,

            string? description,

            object? driverSize,

            object? executorSize,

            Outputs.LinkedServiceReferenceResponse? linkedServiceName,

            string name,

            Outputs.SynapseNotebookReferenceResponse notebook,

            object? numExecutors,

            string? onInactiveMarkAs,

            ImmutableDictionary<string, Outputs.NotebookParameterResponse>? parameters,

            Outputs.ActivityPolicyResponse? policy,

            ImmutableDictionary<string, object>? sparkConfig,

            Outputs.BigDataPoolParametrizationReferenceResponse? sparkPool,

            string? state,

            Outputs.SparkConfigurationParametrizationReferenceResponse? targetSparkConfiguration,

            string type,

            ImmutableArray<Outputs.UserPropertyResponse> userProperties)
        {
            Conf = conf;
            ConfigurationType = configurationType;
            DependsOn = dependsOn;
            Description = description;
            DriverSize = driverSize;
            ExecutorSize = executorSize;
            LinkedServiceName = linkedServiceName;
            Name = name;
            Notebook = notebook;
            NumExecutors = numExecutors;
            OnInactiveMarkAs = onInactiveMarkAs;
            Parameters = parameters;
            Policy = policy;
            SparkConfig = sparkConfig;
            SparkPool = sparkPool;
            State = state;
            TargetSparkConfiguration = targetSparkConfiguration;
            Type = type;
            UserProperties = userProperties;
        }
    }
}
