// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// A copy activity Rest service source.
    /// </summary>
    [OutputType]
    public sealed class RestSourceResponse
    {
        /// <summary>
        /// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
        /// </summary>
        public readonly object? AdditionalColumns;
        /// <summary>
        /// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? AdditionalHeaders;
        /// <summary>
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? DisableMetricsCollection;
        /// <summary>
        /// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        public readonly object? HttpRequestTimeout;
        /// <summary>
        /// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? MaxConcurrentConnections;
        /// <summary>
        /// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? PaginationRules;
        /// <summary>
        /// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? RequestBody;
        /// <summary>
        /// The time to await before sending next page request. 
        /// </summary>
        public readonly object? RequestInterval;
        /// <summary>
        /// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
        /// </summary>
        public readonly object? RequestMethod;
        /// <summary>
        /// Source retry count. Type: integer (or Expression with resultType integer).
        /// </summary>
        public readonly object? SourceRetryCount;
        /// <summary>
        /// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        public readonly object? SourceRetryWait;
        /// <summary>
        /// Copy source type.
        /// Expected value is 'RestSource'.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private RestSourceResponse(
            object? additionalColumns,

            object? additionalHeaders,

            object? disableMetricsCollection,

            object? httpRequestTimeout,

            object? maxConcurrentConnections,

            object? paginationRules,

            object? requestBody,

            object? requestInterval,

            object? requestMethod,

            object? sourceRetryCount,

            object? sourceRetryWait,

            string type)
        {
            AdditionalColumns = additionalColumns;
            AdditionalHeaders = additionalHeaders;
            DisableMetricsCollection = disableMetricsCollection;
            HttpRequestTimeout = httpRequestTimeout;
            MaxConcurrentConnections = maxConcurrentConnections;
            PaginationRules = paginationRules;
            RequestBody = requestBody;
            RequestInterval = requestInterval;
            RequestMethod = requestMethod;
            SourceRetryCount = sourceRetryCount;
            SourceRetryWait = sourceRetryWait;
            Type = type;
        }
    }
}
