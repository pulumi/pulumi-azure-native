// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Source and target column mapping details.
    /// </summary>
    [OutputType]
    public sealed class MapperAttributeMappingResponse
    {
        /// <summary>
        /// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
        /// </summary>
        public readonly Outputs.MapperAttributeReferenceResponse? AttributeReference;
        /// <summary>
        /// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
        /// </summary>
        public readonly ImmutableArray<Outputs.MapperAttributeReferenceResponse> AttributeReferences;
        /// <summary>
        /// Expression used for 'Aggregate' and 'Derived' type mapping.
        /// </summary>
        public readonly string? Expression;
        /// <summary>
        /// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
        /// </summary>
        public readonly string? FunctionName;
        /// <summary>
        /// Name of the target column.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private MapperAttributeMappingResponse(
            Outputs.MapperAttributeReferenceResponse? attributeReference,

            ImmutableArray<Outputs.MapperAttributeReferenceResponse> attributeReferences,

            string? expression,

            string? functionName,

            string? name,

            string? type)
        {
            AttributeReference = attributeReference;
            AttributeReferences = attributeReferences;
            Expression = expression;
            FunctionName = functionName;
            Name = name;
            Type = type;
        }
    }
}
