// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Outputs
{

    /// <summary>
    /// Copy activity properties.
    /// </summary>
    [OutputType]
    public sealed class CopyActivityTypePropertiesResponse
    {
        /// <summary>
        /// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
        /// </summary>
        public readonly object? DataIntegrationUnits;
        /// <summary>
        /// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? EnableSkipIncompatibleRow;
        /// <summary>
        /// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? EnableStaging;
        /// <summary>
        /// Log settings customer needs provide when enabling log.
        /// </summary>
        public readonly Outputs.LogSettingsResponse? LogSettings;
        /// <summary>
        /// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
        /// </summary>
        public readonly Outputs.LogStorageSettingsResponse? LogStorageSettings;
        /// <summary>
        /// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
        /// </summary>
        public readonly object? ParallelCopies;
        /// <summary>
        /// Preserve rules.
        /// </summary>
        public readonly ImmutableArray<object> Preserve;
        /// <summary>
        /// Preserve Rules.
        /// </summary>
        public readonly ImmutableArray<object> PreserveRules;
        /// <summary>
        /// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
        /// </summary>
        public readonly Outputs.RedirectIncompatibleRowSettingsResponse? RedirectIncompatibleRowSettings;
        /// <summary>
        /// Copy activity sink.
        /// </summary>
        public readonly object Sink;
        /// <summary>
        /// Specify the fault tolerance for data consistency.
        /// </summary>
        public readonly Outputs.SkipErrorFileResponse? SkipErrorFile;
        /// <summary>
        /// Copy activity source.
        /// </summary>
        public readonly object Source;
        /// <summary>
        /// Specifies interim staging settings when EnableStaging is true.
        /// </summary>
        public readonly Outputs.StagingSettingsResponse? StagingSettings;
        /// <summary>
        /// Copy activity translator. If not specified, tabular translator is used.
        /// </summary>
        public readonly object? Translator;
        /// <summary>
        /// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        public readonly object? ValidateDataConsistency;

        [OutputConstructor]
        private CopyActivityTypePropertiesResponse(
            object? dataIntegrationUnits,

            object? enableSkipIncompatibleRow,

            object? enableStaging,

            Outputs.LogSettingsResponse? logSettings,

            Outputs.LogStorageSettingsResponse? logStorageSettings,

            object? parallelCopies,

            ImmutableArray<object> preserve,

            ImmutableArray<object> preserveRules,

            Outputs.RedirectIncompatibleRowSettingsResponse? redirectIncompatibleRowSettings,

            object sink,

            Outputs.SkipErrorFileResponse? skipErrorFile,

            object source,

            Outputs.StagingSettingsResponse? stagingSettings,

            object? translator,

            object? validateDataConsistency)
        {
            DataIntegrationUnits = dataIntegrationUnits;
            EnableSkipIncompatibleRow = enableSkipIncompatibleRow;
            EnableStaging = enableStaging;
            LogSettings = logSettings;
            LogStorageSettings = logStorageSettings;
            ParallelCopies = parallelCopies;
            Preserve = preserve;
            PreserveRules = preserveRules;
            RedirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
            Sink = sink;
            SkipErrorFile = skipErrorFile;
            Source = source;
            StagingSettings = stagingSettings;
            Translator = translator;
            ValidateDataConsistency = validateDataConsistency;
        }
    }
}
