// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNextGen.DataFactory.Inputs
{

    /// <summary>
    /// Cursor methods for Mongodb query
    /// </summary>
    public sealed class MongoDbCursorMethodsPropertiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("limit")]
        public Input<object>? Limit { get; set; }

        /// <summary>
        /// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("project")]
        public Input<object>? Project { get; set; }

        /// <summary>
        /// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Input("skip")]
        public Input<object>? Skip { get; set; }

        /// <summary>
        /// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
        /// </summary>
        [Input("sort")]
        public Input<object>? Sort { get; set; }

        public MongoDbCursorMethodsPropertiesArgs()
        {
        }
    }
}
