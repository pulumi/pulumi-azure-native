// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.DataFactory.Inputs
{

    /// <summary>
    /// Linked service for Teradata data source.
    /// </summary>
    public sealed class TeradataLinkedServiceArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputList<object>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the linked service.
        /// </summary>
        public InputList<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// AuthenticationType to be used for connection.
        /// </summary>
        [Input("authenticationType")]
        public InputUnion<string, Pulumi.AzureNative.DataFactory.TeradataAuthenticationType>? AuthenticationType { get; set; }

        /// <summary>
        /// The character set to use for the connection. Type: string (or Expression with resultType string). Only applied for version 2.0.
        /// </summary>
        [Input("characterSet")]
        public Input<object>? CharacterSet { get; set; }

        /// <summary>
        /// The integration runtime reference.
        /// </summary>
        [Input("connectVia")]
        public Input<Inputs.IntegrationRuntimeReferenceArgs>? ConnectVia { get; set; }

        /// <summary>
        /// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Only applied for version 1.0.
        /// </summary>
        [Input("connectionString")]
        public Input<object>? ConnectionString { get; set; }

        /// <summary>
        /// Linked service description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// </summary>
        [Input("encryptedCredential")]
        public Input<string>? EncryptedCredential { get; set; }

        /// <summary>
        /// The port numbers when connecting to server through HTTPS/TLS connections. Type: integer (or Expression with resultType integer). Only applied for version 2.0.
        /// </summary>
        [Input("httpsPortNumber")]
        public Input<object>? HttpsPortNumber { get; set; }

        /// <summary>
        /// The maximum size of the response buffer for SQL requests, in bytes. Type: integer. Only applied for version 2.0.
        /// </summary>
        [Input("maxRespSize")]
        public Input<object>? MaxRespSize { get; set; }

        [Input("parameters")]
        private InputMap<Inputs.ParameterSpecificationArgs>? _parameters;

        /// <summary>
        /// Parameters for linked service.
        /// </summary>
        public InputMap<Inputs.ParameterSpecificationArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<Inputs.ParameterSpecificationArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// Password for authentication.
        /// </summary>
        [Input("password")]
        public InputUnion<Inputs.AzureKeyVaultSecretReferenceArgs, Inputs.SecureStringArgs>? Password { get; set; }

        /// <summary>
        /// The port numbers when connecting to server through non HTTPS/TLS connections. Type: integer (or Expression with resultType integer). Only used for V2. Only applied for version 2.0.
        /// </summary>
        [Input("portNumber")]
        public Input<object>? PortNumber { get; set; }

        /// <summary>
        /// Server name for connection. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("server")]
        public Input<object>? Server { get; set; }

        /// <summary>
        /// SSL mode for connection. Valid values including: “Disable”, “Allow”, “Prefer”, “Require”, “Verify-CA”, “Verify-Full”. Default value is “Verify-Full”. Type: string (or Expression with resultType string). Only applied for version 2.0.
        /// </summary>
        [Input("sslMode")]
        public Input<object>? SslMode { get; set; }

        /// <summary>
        /// Type of linked service.
        /// Expected value is 'Teradata'.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Specifies whether to encrypt all communication with the Teradata database. Allowed values are 0 or 1. This setting will be ignored for HTTPS/TLS connections. Type: integer (or Expression with resultType integer). Only applied for version 2.0.
        /// </summary>
        [Input("useDataEncryption")]
        public Input<object>? UseDataEncryption { get; set; }

        /// <summary>
        /// Username for authentication. Type: string (or Expression with resultType string).
        /// </summary>
        [Input("username")]
        public Input<object>? Username { get; set; }

        /// <summary>
        /// Version of the linked service.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public TeradataLinkedServiceArgs()
        {
        }
        public static new TeradataLinkedServiceArgs Empty => new TeradataLinkedServiceArgs();
    }
}
