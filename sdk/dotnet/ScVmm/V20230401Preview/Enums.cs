// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AzureNative.ScVmm.V20230401Preview
{
    /// <summary>
    /// Gets or sets the mac address type.
    /// </summary>
    [EnumType]
    public readonly struct AllocationMethod : IEquatable<AllocationMethod>
    {
        private readonly string _value;

        private AllocationMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AllocationMethod Dynamic { get; } = new AllocationMethod("Dynamic");
        public static AllocationMethod Static { get; } = new AllocationMethod("Static");

        public static bool operator ==(AllocationMethod left, AllocationMethod right) => left.Equals(right);
        public static bool operator !=(AllocationMethod left, AllocationMethod right) => !left.Equals(right);

        public static explicit operator string(AllocationMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AllocationMethod other && Equals(other);
        public bool Equals(AllocationMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets a value indicating diff disk.
    /// </summary>
    [EnumType]
    public readonly struct CreateDiffDisk : IEquatable<CreateDiffDisk>
    {
        private readonly string _value;

        private CreateDiffDisk(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CreateDiffDisk @False { get; } = new CreateDiffDisk("false");
        public static CreateDiffDisk @True { get; } = new CreateDiffDisk("true");

        public static bool operator ==(CreateDiffDisk left, CreateDiffDisk right) => left.Equals(right);
        public static bool operator !=(CreateDiffDisk left, CreateDiffDisk right) => !left.Equals(right);

        public static explicit operator string(CreateDiffDisk value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CreateDiffDisk other && Equals(other);
        public bool Equals(CreateDiffDisk other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether to enable dynamic memory or not.
    /// </summary>
    [EnumType]
    public readonly struct DynamicMemoryEnabled : IEquatable<DynamicMemoryEnabled>
    {
        private readonly string _value;

        private DynamicMemoryEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DynamicMemoryEnabled @False { get; } = new DynamicMemoryEnabled("false");
        public static DynamicMemoryEnabled @True { get; } = new DynamicMemoryEnabled("true");

        public static bool operator ==(DynamicMemoryEnabled left, DynamicMemoryEnabled right) => left.Equals(right);
        public static bool operator !=(DynamicMemoryEnabled left, DynamicMemoryEnabled right) => !left.Equals(right);

        public static explicit operator string(DynamicMemoryEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DynamicMemoryEnabled other && Equals(other);
        public bool Equals(DynamicMemoryEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of managed service identity.
    /// </summary>
    [EnumType]
    public readonly struct IdentityType : IEquatable<IdentityType>
    {
        private readonly string _value;

        private IdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityType None { get; } = new IdentityType("None");
        public static IdentityType SystemAssigned { get; } = new IdentityType("SystemAssigned");

        public static bool operator ==(IdentityType left, IdentityType right) => left.Equals(right);
        public static bool operator !=(IdentityType left, IdentityType right) => !left.Equals(right);

        public static explicit operator string(IdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityType other && Equals(other);
        public bool Equals(IdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// They inventory type.
    /// </summary>
    [EnumType]
    public readonly struct InventoryType : IEquatable<InventoryType>
    {
        private readonly string _value;

        private InventoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InventoryType Cloud { get; } = new InventoryType("Cloud");
        public static InventoryType VirtualNetwork { get; } = new InventoryType("VirtualNetwork");
        public static InventoryType VirtualMachineTemplate { get; } = new InventoryType("VirtualMachineTemplate");
        public static InventoryType VirtualMachine { get; } = new InventoryType("VirtualMachine");

        public static bool operator ==(InventoryType left, InventoryType right) => left.Equals(right);
        public static bool operator !=(InventoryType left, InventoryType right) => !left.Equals(right);

        public static explicit operator string(InventoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InventoryType other && Equals(other);
        public bool Equals(InventoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
    /// </summary>
    [EnumType]
    public readonly struct LimitCpuForMigration : IEquatable<LimitCpuForMigration>
    {
        private readonly string _value;

        private LimitCpuForMigration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LimitCpuForMigration @False { get; } = new LimitCpuForMigration("false");
        public static LimitCpuForMigration @True { get; } = new LimitCpuForMigration("true");

        public static bool operator ==(LimitCpuForMigration left, LimitCpuForMigration right) => left.Equals(right);
        public static bool operator !=(LimitCpuForMigration left, LimitCpuForMigration right) => !left.Equals(right);

        public static explicit operator string(LimitCpuForMigration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LimitCpuForMigration other && Equals(other);
        public bool Equals(LimitCpuForMigration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Gets or sets the guest agent provisioning action.
    /// </summary>
    [EnumType]
    public readonly struct ProvisioningAction : IEquatable<ProvisioningAction>
    {
        private readonly string _value;

        private ProvisioningAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProvisioningAction Install { get; } = new ProvisioningAction("install");
        public static ProvisioningAction Uninstall { get; } = new ProvisioningAction("uninstall");
        public static ProvisioningAction Repair { get; } = new ProvisioningAction("repair");

        public static bool operator ==(ProvisioningAction left, ProvisioningAction right) => left.Equals(right);
        public static bool operator !=(ProvisioningAction left, ProvisioningAction right) => !left.Equals(right);

        public static explicit operator string(ProvisioningAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProvisioningAction other && Equals(other);
        public bool Equals(ProvisioningAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
