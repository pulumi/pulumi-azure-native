// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm
{
    /// <summary>
    /// The VirtualMachineTemplates resource definition.
    /// API Version: 2020-06-05-preview.
    /// </summary>
    [AzureNativeResourceType("azure-native:scvmm:VirtualMachineTemplate")]
    public partial class VirtualMachineTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Gets or sets computer name.
        /// </summary>
        [Output("computerName")]
        public Output<string> ComputerName { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the desired number of vCPUs for the vm.
        /// </summary>
        [Output("cpuCount")]
        public Output<int> CpuCount { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the disks of the template.
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<Outputs.VirtualDiskResponse>> Disks { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a value indicating whether to enable dynamic memory or not.
        /// </summary>
        [Output("dynamicMemoryEnabled")]
        public Output<string> DynamicMemoryEnabled { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the max dynamic memory for the vm.
        /// </summary>
        [Output("dynamicMemoryMaxMB")]
        public Output<int> DynamicMemoryMaxMB { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the min dynamic memory for the vm.
        /// </summary>
        [Output("dynamicMemoryMinMB")]
        public Output<int> DynamicMemoryMinMB { get; private set; } = null!;

        /// <summary>
        /// The extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the generation for the vm.
        /// </summary>
        [Output("generation")]
        public Output<int> Generation { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the inventory Item ID for the resource.
        /// </summary>
        [Output("inventoryItemId")]
        public Output<string?> InventoryItemId { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a value indicating whether the vm template is customizable or not.
        /// </summary>
        [Output("isCustomizable")]
        public Output<string> IsCustomizable { get; private set; } = null!;

        /// <summary>
        /// Gets highly available property.
        /// </summary>
        [Output("isHighlyAvailable")]
        public Output<string> IsHighlyAvailable { get; private set; } = null!;

        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [Output("limitCpuForMigration")]
        public Output<string> LimitCpuForMigration { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// MemoryMB is the desired size of a virtual machine's memory, in MB.
        /// </summary>
        [Output("memoryMB")]
        public Output<int> MemoryMB { get; private set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the network interfaces of the template.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.NetworkInterfacesResponse>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// Gets or sets os name.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the type of the os.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// The system data.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource Type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Unique ID of the virtual machine template.
        /// </summary>
        [Output("uuid")]
        public Output<string?> Uuid { get; private set; } = null!;

        /// <summary>
        /// ARM Id of the vmmServer resource in which this resource resides.
        /// </summary>
        [Output("vmmServerId")]
        public Output<string?> VmmServerId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineTemplate(string name, VirtualMachineTemplateArgs args, CustomResourceOptions? options = null)
            : base("azure-native:scvmm:VirtualMachineTemplate", name, args ?? new VirtualMachineTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineTemplate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:scvmm:VirtualMachineTemplate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:scvmm/v20200605preview:VirtualMachineTemplate"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineTemplate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachineTemplate(name, id, options);
        }
    }

    public sealed class VirtualMachineTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The extended location.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// Gets or sets the inventory Item ID for the resource.
        /// </summary>
        [Input("inventoryItemId")]
        public Input<string>? InventoryItemId { get; set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unique ID of the virtual machine template.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Name of the VirtualMachineTemplate.
        /// </summary>
        [Input("virtualMachineTemplateName")]
        public Input<string>? VirtualMachineTemplateName { get; set; }

        /// <summary>
        /// ARM Id of the vmmServer resource in which this resource resides.
        /// </summary>
        [Input("vmmServerId")]
        public Input<string>? VmmServerId { get; set; }

        public VirtualMachineTemplateArgs()
        {
        }
        public static new VirtualMachineTemplateArgs Empty => new VirtualMachineTemplateArgs();
    }
}
