// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm
{
    public static class GetVmmServer
    {
        /// <summary>
        /// Implements VMMServer GET method.
        /// Azure REST API version: 2020-06-05-preview.
        /// </summary>
        public static Task<GetVmmServerResult> InvokeAsync(GetVmmServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmmServerResult>("azure-native:scvmm:getVmmServer", args ?? new GetVmmServerArgs(), options.WithDefaults());

        /// <summary>
        /// Implements VMMServer GET method.
        /// Azure REST API version: 2020-06-05-preview.
        /// </summary>
        public static Output<GetVmmServerResult> Invoke(GetVmmServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmmServerResult>("azure-native:scvmm:getVmmServer", args ?? new GetVmmServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmmServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the VMMServer.
        /// </summary>
        [Input("vmmServerName", required: true)]
        public string VmmServerName { get; set; } = null!;

        public GetVmmServerArgs()
        {
        }
        public static new GetVmmServerArgs Empty => new GetVmmServerArgs();
    }

    public sealed class GetVmmServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the VMMServer.
        /// </summary>
        [Input("vmmServerName", required: true)]
        public Input<string> VmmServerName { get; set; } = null!;

        public GetVmmServerInvokeArgs()
        {
        }
        public static new GetVmmServerInvokeArgs Empty => new GetVmmServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmmServerResult
    {
        /// <summary>
        /// Gets or sets the connection status to the vmmServer.
        /// </summary>
        public readonly string ConnectionStatus;
        /// <summary>
        /// Credentials to connect to VMMServer.
        /// </summary>
        public readonly Outputs.VMMServerPropertiesResponseCredentials? Credentials;
        /// <summary>
        /// Gets or sets any error message if connection to vmmServer is having any issue.
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// The extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Fqdn is the hostname/ip of the vmmServer.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Resource Id
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Resource Name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Port is the port on which the vmmServer is listening.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// The system data.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Resource Type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique ID of vmmServer.
        /// </summary>
        public readonly string Uuid;
        /// <summary>
        /// Version is the version of the vmmSever.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetVmmServerResult(
            string connectionStatus,

            Outputs.VMMServerPropertiesResponseCredentials? credentials,

            string errorMessage,

            Outputs.ExtendedLocationResponse extendedLocation,

            string fqdn,

            string id,

            string location,

            string name,

            int? port,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string uuid,

            string version)
        {
            ConnectionStatus = connectionStatus;
            Credentials = credentials;
            ErrorMessage = errorMessage;
            ExtendedLocation = extendedLocation;
            Fqdn = fqdn;
            Id = id;
            Location = location;
            Name = name;
            Port = port;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Uuid = uuid;
            Version = version;
        }
    }
}
