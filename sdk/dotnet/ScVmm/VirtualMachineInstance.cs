// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm
{
    /// <summary>
    /// Define the virtualMachineInstance.
    /// Azure REST API version: 2023-04-01-preview.
    /// 
    /// Other available API versions: 2023-10-07, 2024-06-01.
    /// </summary>
    [AzureNativeResourceType("azure-native:scvmm:VirtualMachineInstance")]
    public partial class VirtualMachineInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Availability Sets in vm.
        /// </summary>
        [Output("availabilitySets")]
        public Output<ImmutableArray<Outputs.VirtualMachineInstancePropertiesResponseAvailabilitySets>> AvailabilitySets { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Output("extendedLocation")]
        public Output<Outputs.ExtendedLocationResponse> ExtendedLocation { get; private set; } = null!;

        /// <summary>
        /// Hardware properties.
        /// </summary>
        [Output("hardwareProfile")]
        public Output<Outputs.HardwareProfileResponse?> HardwareProfile { get; private set; } = null!;

        /// <summary>
        /// Gets the infrastructure profile.
        /// </summary>
        [Output("infrastructureProfile")]
        public Output<Outputs.InfrastructureProfileResponse?> InfrastructureProfile { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network properties.
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.NetworkProfileResponse?> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// OS properties.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.OsProfileForVMInstanceResponse?> OsProfile { get; private set; } = null!;

        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        [Output("powerState")]
        public Output<string> PowerState { get; private set; } = null!;

        /// <summary>
        /// Gets or sets the provisioning state.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Storage properties.
        /// </summary>
        [Output("storageProfile")]
        public Output<Outputs.StorageProfileResponse?> StorageProfile { get; private set; } = null!;

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineInstance(string name, VirtualMachineInstanceArgs args, CustomResourceOptions? options = null)
            : base("azure-native:scvmm:VirtualMachineInstance", name, args ?? new VirtualMachineInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineInstance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:scvmm:VirtualMachineInstance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure-native:scvmm/v20230401preview:VirtualMachineInstance" },
                    new global::Pulumi.Alias { Type = "azure-native:scvmm/v20231007:VirtualMachineInstance" },
                    new global::Pulumi.Alias { Type = "azure-native:scvmm/v20240601:VirtualMachineInstance" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineInstance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachineInstance(name, id, options);
        }
    }

    public sealed class VirtualMachineInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilitySets")]
        private InputList<Inputs.VirtualMachineInstancePropertiesAvailabilitySetsArgs>? _availabilitySets;

        /// <summary>
        /// Availability Sets in vm.
        /// </summary>
        public InputList<Inputs.VirtualMachineInstancePropertiesAvailabilitySetsArgs> AvailabilitySets
        {
            get => _availabilitySets ?? (_availabilitySets = new InputList<Inputs.VirtualMachineInstancePropertiesAvailabilitySetsArgs>());
            set => _availabilitySets = value;
        }

        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        [Input("extendedLocation", required: true)]
        public Input<Inputs.ExtendedLocationArgs> ExtendedLocation { get; set; } = null!;

        /// <summary>
        /// Hardware properties.
        /// </summary>
        [Input("hardwareProfile")]
        public Input<Inputs.HardwareProfileArgs>? HardwareProfile { get; set; }

        /// <summary>
        /// Gets the infrastructure profile.
        /// </summary>
        [Input("infrastructureProfile")]
        public Input<Inputs.InfrastructureProfileArgs>? InfrastructureProfile { get; set; }

        /// <summary>
        /// Network properties.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// OS properties.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.OsProfileForVMInstanceArgs>? OsProfile { get; set; }

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        /// <summary>
        /// Storage properties.
        /// </summary>
        [Input("storageProfile")]
        public Input<Inputs.StorageProfileArgs>? StorageProfile { get; set; }

        public VirtualMachineInstanceArgs()
        {
        }
        public static new VirtualMachineInstanceArgs Empty => new VirtualMachineInstanceArgs();
    }
}
