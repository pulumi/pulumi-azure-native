// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm.V20231007
{
    public static class GetVirtualMachineTemplate
    {
        /// <summary>
        /// Implements VirtualMachineTemplate GET method.
        /// </summary>
        public static Task<GetVirtualMachineTemplateResult> InvokeAsync(GetVirtualMachineTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineTemplateResult>("azure-native:scvmm/v20231007:getVirtualMachineTemplate", args ?? new GetVirtualMachineTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Implements VirtualMachineTemplate GET method.
        /// </summary>
        public static Output<GetVirtualMachineTemplateResult> Invoke(GetVirtualMachineTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineTemplateResult>("azure-native:scvmm/v20231007:getVirtualMachineTemplate", args ?? new GetVirtualMachineTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the VirtualMachineTemplate.
        /// </summary>
        [Input("virtualMachineTemplateName", required: true)]
        public string VirtualMachineTemplateName { get; set; } = null!;

        public GetVirtualMachineTemplateArgs()
        {
        }
        public static new GetVirtualMachineTemplateArgs Empty => new GetVirtualMachineTemplateArgs();
    }

    public sealed class GetVirtualMachineTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the resource group. The name is case insensitive.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Name of the VirtualMachineTemplate.
        /// </summary>
        [Input("virtualMachineTemplateName", required: true)]
        public Input<string> VirtualMachineTemplateName { get; set; } = null!;

        public GetVirtualMachineTemplateInvokeArgs()
        {
        }
        public static new GetVirtualMachineTemplateInvokeArgs Empty => new GetVirtualMachineTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineTemplateResult
    {
        /// <summary>
        /// Gets computer name.
        /// </summary>
        public readonly string ComputerName;
        /// <summary>
        /// Gets the desired number of vCPUs for the vm.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// Gets the disks of the template.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualDiskResponse> Disks;
        /// <summary>
        /// Gets a value indicating whether to enable dynamic memory or not.
        /// </summary>
        public readonly string DynamicMemoryEnabled;
        /// <summary>
        /// Gets the max dynamic memory for the vm.
        /// </summary>
        public readonly int DynamicMemoryMaxMB;
        /// <summary>
        /// Gets the min dynamic memory for the vm.
        /// </summary>
        public readonly int DynamicMemoryMinMB;
        /// <summary>
        /// The extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Gets the generation for the vm.
        /// </summary>
        public readonly int Generation;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets or sets the inventory Item ID for the resource.
        /// </summary>
        public readonly string? InventoryItemId;
        /// <summary>
        /// Gets a value indicating whether the vm template is customizable or not.
        /// </summary>
        public readonly string IsCustomizable;
        /// <summary>
        /// Gets highly available property.
        /// </summary>
        public readonly string IsHighlyAvailable;
        /// <summary>
        /// Gets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        public readonly string LimitCpuForMigration;
        /// <summary>
        /// The geo-location where the resource lives
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// MemoryMB is the desired size of a virtual machine's memory, in MB.
        /// </summary>
        public readonly int MemoryMB;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Gets the network interfaces of the template.
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkInterfaceResponse> NetworkInterfaces;
        /// <summary>
        /// Gets os name.
        /// </summary>
        public readonly string OsName;
        /// <summary>
        /// Gets the type of the os.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unique ID of the virtual machine template.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// ARM Id of the vmmServer resource in which this resource resides.
        /// </summary>
        public readonly string? VmmServerId;

        [OutputConstructor]
        private GetVirtualMachineTemplateResult(
            string computerName,

            int cpuCount,

            ImmutableArray<Outputs.VirtualDiskResponse> disks,

            string dynamicMemoryEnabled,

            int dynamicMemoryMaxMB,

            int dynamicMemoryMinMB,

            Outputs.ExtendedLocationResponse extendedLocation,

            int generation,

            string id,

            string? inventoryItemId,

            string isCustomizable,

            string isHighlyAvailable,

            string limitCpuForMigration,

            string location,

            int memoryMB,

            string name,

            ImmutableArray<Outputs.NetworkInterfaceResponse> networkInterfaces,

            string osName,

            string osType,

            string provisioningState,

            Outputs.SystemDataResponse systemData,

            ImmutableDictionary<string, string>? tags,

            string type,

            string? uuid,

            string? vmmServerId)
        {
            ComputerName = computerName;
            CpuCount = cpuCount;
            Disks = disks;
            DynamicMemoryEnabled = dynamicMemoryEnabled;
            DynamicMemoryMaxMB = dynamicMemoryMaxMB;
            DynamicMemoryMinMB = dynamicMemoryMinMB;
            ExtendedLocation = extendedLocation;
            Generation = generation;
            Id = id;
            InventoryItemId = inventoryItemId;
            IsCustomizable = isCustomizable;
            IsHighlyAvailable = isHighlyAvailable;
            LimitCpuForMigration = limitCpuForMigration;
            Location = location;
            MemoryMB = memoryMB;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            OsName = osName;
            OsType = osType;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            Tags = tags;
            Type = type;
            Uuid = uuid;
            VmmServerId = vmmServerId;
        }
    }
}
