// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm.V20231007
{
    public static class GetVirtualMachineInstance
    {
        /// <summary>
        /// Retrieves information about a virtual machine instance.
        /// </summary>
        public static Task<GetVirtualMachineInstanceResult> InvokeAsync(GetVirtualMachineInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineInstanceResult>("azure-native:scvmm/v20231007:getVirtualMachineInstance", args ?? new GetVirtualMachineInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a virtual machine instance.
        /// </summary>
        public static Output<GetVirtualMachineInstanceResult> Invoke(GetVirtualMachineInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualMachineInstanceResult>("azure-native:scvmm/v20231007:getVirtualMachineInstance", args ?? new GetVirtualMachineInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public string ResourceUri { get; set; } = null!;

        public GetVirtualMachineInstanceArgs()
        {
        }
        public static new GetVirtualMachineInstanceArgs Empty => new GetVirtualMachineInstanceArgs();
    }

    public sealed class GetVirtualMachineInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the resource.
        /// </summary>
        [Input("resourceUri", required: true)]
        public Input<string> ResourceUri { get; set; } = null!;

        public GetVirtualMachineInstanceInvokeArgs()
        {
        }
        public static new GetVirtualMachineInstanceInvokeArgs Empty => new GetVirtualMachineInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualMachineInstanceResult
    {
        /// <summary>
        /// Availability Sets in vm.
        /// </summary>
        public readonly ImmutableArray<Outputs.AvailabilitySetListItemResponse> AvailabilitySets;
        /// <summary>
        /// Gets or sets the extended location.
        /// </summary>
        public readonly Outputs.ExtendedLocationResponse ExtendedLocation;
        /// <summary>
        /// Hardware properties.
        /// </summary>
        public readonly Outputs.HardwareProfileResponse? HardwareProfile;
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Gets the infrastructure profile.
        /// </summary>
        public readonly Outputs.InfrastructureProfileResponse? InfrastructureProfile;
        /// <summary>
        /// The name of the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network properties.
        /// </summary>
        public readonly Outputs.NetworkProfileResponse? NetworkProfile;
        /// <summary>
        /// OS properties.
        /// </summary>
        public readonly Outputs.OsProfileForVmInstanceResponse? OsProfile;
        /// <summary>
        /// Gets the power state of the virtual machine.
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// Provisioning state of the resource.
        /// </summary>
        public readonly string ProvisioningState;
        /// <summary>
        /// Storage properties.
        /// </summary>
        public readonly Outputs.StorageProfileResponse? StorageProfile;
        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        public readonly Outputs.SystemDataResponse SystemData;
        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetVirtualMachineInstanceResult(
            ImmutableArray<Outputs.AvailabilitySetListItemResponse> availabilitySets,

            Outputs.ExtendedLocationResponse extendedLocation,

            Outputs.HardwareProfileResponse? hardwareProfile,

            string id,

            Outputs.InfrastructureProfileResponse? infrastructureProfile,

            string name,

            Outputs.NetworkProfileResponse? networkProfile,

            Outputs.OsProfileForVmInstanceResponse? osProfile,

            string powerState,

            string provisioningState,

            Outputs.StorageProfileResponse? storageProfile,

            Outputs.SystemDataResponse systemData,

            string type)
        {
            AvailabilitySets = availabilitySets;
            ExtendedLocation = extendedLocation;
            HardwareProfile = hardwareProfile;
            Id = id;
            InfrastructureProfile = infrastructureProfile;
            Name = name;
            NetworkProfile = networkProfile;
            OsProfile = osProfile;
            PowerState = powerState;
            ProvisioningState = provisioningState;
            StorageProfile = storageProfile;
            SystemData = systemData;
            Type = type;
        }
    }
}
