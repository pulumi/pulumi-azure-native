// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.ScVmm.V20200605Preview.Inputs
{

    /// <summary>
    /// Defines the resource properties.
    /// </summary>
    public sealed class VirtualMachinePropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilitySets")]
        private InputList<Inputs.VirtualMachinePropertiesAvailabilitySetsArgs>? _availabilitySets;

        /// <summary>
        /// Availability Sets in vm.
        /// </summary>
        public InputList<Inputs.VirtualMachinePropertiesAvailabilitySetsArgs> AvailabilitySets
        {
            get => _availabilitySets ?? (_availabilitySets = new InputList<Inputs.VirtualMachinePropertiesAvailabilitySetsArgs>());
            set => _availabilitySets = value;
        }

        /// <summary>
        /// Type of checkpoint supported for the vm.
        /// </summary>
        [Input("checkpointType")]
        public Input<string>? CheckpointType { get; set; }

        [Input("checkpoints")]
        private InputList<Inputs.CheckpointArgs>? _checkpoints;

        /// <summary>
        /// Checkpoints in the vm.
        /// </summary>
        public InputList<Inputs.CheckpointArgs> Checkpoints
        {
            get => _checkpoints ?? (_checkpoints = new InputList<Inputs.CheckpointArgs>());
            set => _checkpoints = value;
        }

        /// <summary>
        /// ARM Id of the cloud resource to use for deploying the vm.
        /// </summary>
        [Input("cloudId")]
        public Input<string>? CloudId { get; set; }

        /// <summary>
        /// Gets or sets the generation for the vm.
        /// </summary>
        [Input("generation")]
        public Input<int>? Generation { get; set; }

        /// <summary>
        /// Hardware properties.
        /// </summary>
        [Input("hardwareProfile")]
        public Input<Inputs.HardwareProfileArgs>? HardwareProfile { get; set; }

        /// <summary>
        /// Gets or sets the inventory Item ID for the resource.
        /// </summary>
        [Input("inventoryItemId")]
        public Input<string>? InventoryItemId { get; set; }

        /// <summary>
        /// Network properties.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// OS properties.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.OsProfileArgs>? OsProfile { get; set; }

        /// <summary>
        /// Storage properties.
        /// </summary>
        [Input("storageProfile")]
        public Input<Inputs.StorageProfileArgs>? StorageProfile { get; set; }

        /// <summary>
        /// ARM Id of the template resource to use for deploying the vm.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// Unique ID of the virtual machine.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// VMName is the name of VM on the SCVMM server.
        /// </summary>
        [Input("vmName")]
        public Input<string>? VmName { get; set; }

        /// <summary>
        /// ARM Id of the vmmServer resource in which this resource resides.
        /// </summary>
        [Input("vmmServerId")]
        public Input<string>? VmmServerId { get; set; }

        public VirtualMachinePropertiesArgs()
        {
        }
        public static new VirtualMachinePropertiesArgs Empty => new VirtualMachinePropertiesArgs();
    }
}
