# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AccessPolicyResourcePropertiesArgs',
    'EventHubEventSourceCreationPropertiesArgs',
    'IoTHubEventSourceCreationPropertiesArgs',
    'LocalTimestampTimeZoneOffsetArgs',
    'LocalTimestampArgs',
    'LongTermEnvironmentCreationPropertiesArgs',
    'LongTermStorageConfigurationInputArgs',
    'ReferenceDataSetCreationPropertiesArgs',
    'ReferenceDataSetKeyPropertyArgs',
    'SkuArgs',
    'StandardEnvironmentCreationPropertiesArgs',
    'TimeSeriesIdPropertyArgs',
    'WarmStoreConfigurationPropertiesArgs',
]

@pulumi.input_type
class AccessPolicyResourcePropertiesArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 principal_object_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessPolicyRole']]]]] = None):
        """
        :param pulumi.Input[str] description: An description of the access policy.
        :param pulumi.Input[str] principal_object_id: The objectId of the principal in Azure Active Directory.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessPolicyRole']]]] roles: The list of roles the principal is assigned on the environment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if principal_object_id is not None:
            pulumi.set(__self__, "principal_object_id", principal_object_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An description of the access policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="principalObjectId")
    def principal_object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The objectId of the principal in Azure Active Directory.
        """
        return pulumi.get(self, "principal_object_id")

    @principal_object_id.setter
    def principal_object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_object_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessPolicyRole']]]]]:
        """
        The list of roles the principal is assigned on the environment.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AccessPolicyRole']]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class EventHubEventSourceCreationPropertiesArgs:
    def __init__(__self__, *,
                 consumer_group_name: pulumi.Input[str],
                 event_hub_name: pulumi.Input[str],
                 event_source_resource_id: pulumi.Input[str],
                 key_name: pulumi.Input[str],
                 service_bus_namespace: pulumi.Input[str],
                 shared_access_key: pulumi.Input[str],
                 timestamp_property_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of the EventHub event source that are required on create or update requests.
        :param pulumi.Input[str] consumer_group_name: The name of the event hub's consumer group that holds the partitions from which events will be read.
        :param pulumi.Input[str] event_hub_name: The name of the event hub.
        :param pulumi.Input[str] event_source_resource_id: The resource id of the event source in Azure Resource Manager.
        :param pulumi.Input[str] key_name: The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
        :param pulumi.Input[str] service_bus_namespace: The name of the service bus that contains the event hub.
        :param pulumi.Input[str] shared_access_key: The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.
        :param pulumi.Input[str] timestamp_property_name: The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        pulumi.set(__self__, "event_hub_name", event_hub_name)
        pulumi.set(__self__, "event_source_resource_id", event_source_resource_id)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "service_bus_namespace", service_bus_namespace)
        pulumi.set(__self__, "shared_access_key", shared_access_key)
        if timestamp_property_name is not None:
            pulumi.set(__self__, "timestamp_property_name", timestamp_property_name)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> pulumi.Input[str]:
        """
        The name of the event hub's consumer group that holds the partitions from which events will be read.
        """
        return pulumi.get(self, "consumer_group_name")

    @consumer_group_name.setter
    def consumer_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_group_name", value)

    @property
    @pulumi.getter(name="eventHubName")
    def event_hub_name(self) -> pulumi.Input[str]:
        """
        The name of the event hub.
        """
        return pulumi.get(self, "event_hub_name")

    @event_hub_name.setter
    def event_hub_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_hub_name", value)

    @property
    @pulumi.getter(name="eventSourceResourceId")
    def event_source_resource_id(self) -> pulumi.Input[str]:
        """
        The resource id of the event source in Azure Resource Manager.
        """
        return pulumi.get(self, "event_source_resource_id")

    @event_source_resource_id.setter
    def event_source_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_source_resource_id", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="serviceBusNamespace")
    def service_bus_namespace(self) -> pulumi.Input[str]:
        """
        The name of the service bus that contains the event hub.
        """
        return pulumi.get(self, "service_bus_namespace")

    @service_bus_namespace.setter
    def service_bus_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_bus_namespace", value)

    @property
    @pulumi.getter(name="sharedAccessKey")
    def shared_access_key(self) -> pulumi.Input[str]:
        """
        The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.
        """
        return pulumi.get(self, "shared_access_key")

    @shared_access_key.setter
    def shared_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "shared_access_key", value)

    @property
    @pulumi.getter(name="timestampPropertyName")
    def timestamp_property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        return pulumi.get(self, "timestamp_property_name")

    @timestamp_property_name.setter
    def timestamp_property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_property_name", value)


@pulumi.input_type
class IoTHubEventSourceCreationPropertiesArgs:
    def __init__(__self__, *,
                 consumer_group_name: pulumi.Input[str],
                 event_source_resource_id: pulumi.Input[str],
                 iot_hub_name: pulumi.Input[str],
                 key_name: pulumi.Input[str],
                 shared_access_key: pulumi.Input[str],
                 timestamp_property_name: Optional[pulumi.Input[str]] = None):
        """
        Properties of the IoTHub event source that are required on create or update requests.
        :param pulumi.Input[str] consumer_group_name: The name of the iot hub's consumer group that holds the partitions from which events will be read.
        :param pulumi.Input[str] event_source_resource_id: The resource id of the event source in Azure Resource Manager.
        :param pulumi.Input[str] iot_hub_name: The name of the iot hub.
        :param pulumi.Input[str] key_name: The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
        :param pulumi.Input[str] shared_access_key: The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.
        :param pulumi.Input[str] timestamp_property_name: The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        pulumi.set(__self__, "event_source_resource_id", event_source_resource_id)
        pulumi.set(__self__, "iot_hub_name", iot_hub_name)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "shared_access_key", shared_access_key)
        if timestamp_property_name is not None:
            pulumi.set(__self__, "timestamp_property_name", timestamp_property_name)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> pulumi.Input[str]:
        """
        The name of the iot hub's consumer group that holds the partitions from which events will be read.
        """
        return pulumi.get(self, "consumer_group_name")

    @consumer_group_name.setter
    def consumer_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_group_name", value)

    @property
    @pulumi.getter(name="eventSourceResourceId")
    def event_source_resource_id(self) -> pulumi.Input[str]:
        """
        The resource id of the event source in Azure Resource Manager.
        """
        return pulumi.get(self, "event_source_resource_id")

    @event_source_resource_id.setter
    def event_source_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_source_resource_id", value)

    @property
    @pulumi.getter(name="iotHubName")
    def iot_hub_name(self) -> pulumi.Input[str]:
        """
        The name of the iot hub.
        """
        return pulumi.get(self, "iot_hub_name")

    @iot_hub_name.setter
    def iot_hub_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "iot_hub_name", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[str]:
        """
        The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="sharedAccessKey")
    def shared_access_key(self) -> pulumi.Input[str]:
        """
        The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.
        """
        return pulumi.get(self, "shared_access_key")

    @shared_access_key.setter
    def shared_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "shared_access_key", value)

    @property
    @pulumi.getter(name="timestampPropertyName")
    def timestamp_property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        return pulumi.get(self, "timestamp_property_name")

    @timestamp_property_name.setter
    def timestamp_property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_property_name", value)


@pulumi.input_type
class LocalTimestampTimeZoneOffsetArgs:
    def __init__(__self__, *,
                 property_name: Optional[pulumi.Input[str]] = None):
        """
        An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        :param pulumi.Input[str] property_name: The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
        """
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[str]]:
        """
        The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
        """
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_name", value)


@pulumi.input_type
class LocalTimestampArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[Union[str, 'LocalTimestampFormat']]] = None,
                 time_zone_offset: Optional[pulumi.Input['LocalTimestampTimeZoneOffsetArgs']] = None):
        """
        An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        :param pulumi.Input[Union[str, 'LocalTimestampFormat']] format: An enum that represents the format of the local timestamp property that needs to be set.
        :param pulumi.Input['LocalTimestampTimeZoneOffsetArgs'] time_zone_offset: An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if time_zone_offset is not None:
            pulumi.set(__self__, "time_zone_offset", time_zone_offset)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[Union[str, 'LocalTimestampFormat']]]:
        """
        An enum that represents the format of the local timestamp property that needs to be set.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[Union[str, 'LocalTimestampFormat']]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> Optional[pulumi.Input['LocalTimestampTimeZoneOffsetArgs']]:
        """
        An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        """
        return pulumi.get(self, "time_zone_offset")

    @time_zone_offset.setter
    def time_zone_offset(self, value: Optional[pulumi.Input['LocalTimestampTimeZoneOffsetArgs']]):
        pulumi.set(self, "time_zone_offset", value)


@pulumi.input_type
class LongTermEnvironmentCreationPropertiesArgs:
    def __init__(__self__, *,
                 storage_configuration: pulumi.Input['LongTermStorageConfigurationInputArgs'],
                 time_series_id_properties: pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]],
                 warm_store_configuration: Optional[pulumi.Input['WarmStoreConfigurationPropertiesArgs']] = None):
        """
        Properties used to create a long-term environment.
        :param pulumi.Input['LongTermStorageConfigurationInputArgs'] storage_configuration: The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
        :param pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]] time_series_id_properties: The list of event properties which will be used to define the environment's time series id.
        :param pulumi.Input['WarmStoreConfigurationPropertiesArgs'] warm_store_configuration: The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        """
        pulumi.set(__self__, "storage_configuration", storage_configuration)
        pulumi.set(__self__, "time_series_id_properties", time_series_id_properties)
        if warm_store_configuration is not None:
            pulumi.set(__self__, "warm_store_configuration", warm_store_configuration)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> pulumi.Input['LongTermStorageConfigurationInputArgs']:
        """
        The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: pulumi.Input['LongTermStorageConfigurationInputArgs']):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="timeSeriesIdProperties")
    def time_series_id_properties(self) -> pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]]:
        """
        The list of event properties which will be used to define the environment's time series id.
        """
        return pulumi.get(self, "time_series_id_properties")

    @time_series_id_properties.setter
    def time_series_id_properties(self, value: pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]]):
        pulumi.set(self, "time_series_id_properties", value)

    @property
    @pulumi.getter(name="warmStoreConfiguration")
    def warm_store_configuration(self) -> Optional[pulumi.Input['WarmStoreConfigurationPropertiesArgs']]:
        """
        The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        """
        return pulumi.get(self, "warm_store_configuration")

    @warm_store_configuration.setter
    def warm_store_configuration(self, value: Optional[pulumi.Input['WarmStoreConfigurationPropertiesArgs']]):
        pulumi.set(self, "warm_store_configuration", value)


@pulumi.input_type
class LongTermStorageConfigurationInputArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 management_key: pulumi.Input[str]):
        """
        The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
        :param pulumi.Input[str] account_name: The name of the storage account that will hold the environment's long term data.
        :param pulumi.Input[str] management_key: The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "management_key", management_key)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        The name of the storage account that will hold the environment's long term data.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="managementKey")
    def management_key(self) -> pulumi.Input[str]:
        """
        The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
        """
        return pulumi.get(self, "management_key")

    @management_key.setter
    def management_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "management_key", value)


@pulumi.input_type
class ReferenceDataSetCreationPropertiesArgs:
    def __init__(__self__, *,
                 key_properties: pulumi.Input[Sequence[pulumi.Input['ReferenceDataSetKeyPropertyArgs']]],
                 data_string_comparison_behavior: Optional[pulumi.Input[Union[str, 'DataStringComparisonBehavior']]] = None):
        """
        Properties used to create a reference data set.
        :param pulumi.Input[Sequence[pulumi.Input['ReferenceDataSetKeyPropertyArgs']]] key_properties: The list of key properties for the reference data set.
        :param pulumi.Input[Union[str, 'DataStringComparisonBehavior']] data_string_comparison_behavior: The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
        """
        pulumi.set(__self__, "key_properties", key_properties)
        if data_string_comparison_behavior is not None:
            pulumi.set(__self__, "data_string_comparison_behavior", data_string_comparison_behavior)

    @property
    @pulumi.getter(name="keyProperties")
    def key_properties(self) -> pulumi.Input[Sequence[pulumi.Input['ReferenceDataSetKeyPropertyArgs']]]:
        """
        The list of key properties for the reference data set.
        """
        return pulumi.get(self, "key_properties")

    @key_properties.setter
    def key_properties(self, value: pulumi.Input[Sequence[pulumi.Input['ReferenceDataSetKeyPropertyArgs']]]):
        pulumi.set(self, "key_properties", value)

    @property
    @pulumi.getter(name="dataStringComparisonBehavior")
    def data_string_comparison_behavior(self) -> Optional[pulumi.Input[Union[str, 'DataStringComparisonBehavior']]]:
        """
        The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
        """
        return pulumi.get(self, "data_string_comparison_behavior")

    @data_string_comparison_behavior.setter
    def data_string_comparison_behavior(self, value: Optional[pulumi.Input[Union[str, 'DataStringComparisonBehavior']]]):
        pulumi.set(self, "data_string_comparison_behavior", value)


@pulumi.input_type
class ReferenceDataSetKeyPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'ReferenceDataKeyPropertyType']]] = None):
        """
        A key property for the reference data set. A reference data set can have multiple key properties.
        :param pulumi.Input[str] name: The name of the key property.
        :param pulumi.Input[Union[str, 'ReferenceDataKeyPropertyType']] type: The type of the key property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the key property.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'ReferenceDataKeyPropertyType']]]:
        """
        The type of the key property.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'ReferenceDataKeyPropertyType']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[int],
                 name: pulumi.Input[Union[str, 'SkuName']]):
        """
        The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
        :param pulumi.Input[int] capacity: The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
        :param pulumi.Input[Union[str, 'SkuName']] name: The name of this SKU.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        """
        The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Union[str, 'SkuName']]:
        """
        The name of this SKU.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Union[str, 'SkuName']]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StandardEnvironmentCreationPropertiesArgs:
    def __init__(__self__, *,
                 data_retention_time: pulumi.Input[str],
                 partition_key_properties: Optional[pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]]] = None,
                 storage_limit_exceeded_behavior: Optional[pulumi.Input[Union[str, 'StorageLimitExceededBehavior']]] = None):
        """
        Properties used to create a standard environment.
        :param pulumi.Input[str] data_retention_time: ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        :param pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]] partition_key_properties: The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
        :param pulumi.Input[Union[str, 'StorageLimitExceededBehavior']] storage_limit_exceeded_behavior: The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        """
        pulumi.set(__self__, "data_retention_time", data_retention_time)
        if partition_key_properties is not None:
            pulumi.set(__self__, "partition_key_properties", partition_key_properties)
        if storage_limit_exceeded_behavior is not None:
            pulumi.set(__self__, "storage_limit_exceeded_behavior", storage_limit_exceeded_behavior)

    @property
    @pulumi.getter(name="dataRetentionTime")
    def data_retention_time(self) -> pulumi.Input[str]:
        """
        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        """
        return pulumi.get(self, "data_retention_time")

    @data_retention_time.setter
    def data_retention_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_retention_time", value)

    @property
    @pulumi.getter(name="partitionKeyProperties")
    def partition_key_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]]]:
        """
        The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
        """
        return pulumi.get(self, "partition_key_properties")

    @partition_key_properties.setter
    def partition_key_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TimeSeriesIdPropertyArgs']]]]):
        pulumi.set(self, "partition_key_properties", value)

    @property
    @pulumi.getter(name="storageLimitExceededBehavior")
    def storage_limit_exceeded_behavior(self) -> Optional[pulumi.Input[Union[str, 'StorageLimitExceededBehavior']]]:
        """
        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        """
        return pulumi.get(self, "storage_limit_exceeded_behavior")

    @storage_limit_exceeded_behavior.setter
    def storage_limit_exceeded_behavior(self, value: Optional[pulumi.Input[Union[str, 'StorageLimitExceededBehavior']]]):
        pulumi.set(self, "storage_limit_exceeded_behavior", value)


@pulumi.input_type
class TimeSeriesIdPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'PropertyType']]] = None):
        """
        The structure of the property that a time series id can have. An environment can have multiple such properties.
        :param pulumi.Input[str] name: The name of the property.
        :param pulumi.Input[Union[str, 'PropertyType']] type: The type of the property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the property.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'PropertyType']]]:
        """
        The type of the property.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'PropertyType']]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WarmStoreConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 data_retention: pulumi.Input[str]):
        """
        The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        :param pulumi.Input[str] data_retention: ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
        """
        pulumi.set(__self__, "data_retention", data_retention)

    @property
    @pulumi.getter(name="dataRetention")
    def data_retention(self) -> pulumi.Input[str]:
        """
        ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
        """
        return pulumi.get(self, "data_retention")

    @data_retention.setter
    def data_retention(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_retention", value)


