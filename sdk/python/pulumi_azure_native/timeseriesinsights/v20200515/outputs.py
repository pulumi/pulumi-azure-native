# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'EnvironmentStateDetailsResponse',
    'EnvironmentStatusResponse',
    'EventHubEventSourceResourcePropertiesResponse',
    'Gen1EnvironmentResourcePropertiesResponse',
    'Gen2EnvironmentResourcePropertiesResponse',
    'Gen2StorageConfigurationOutputResponse',
    'IngressEnvironmentStatusResponse',
    'IoTHubEventSourceResourcePropertiesResponse',
    'LocalTimestampResponse',
    'LocalTimestampResponseTimeZoneOffset',
    'ReferenceDataSetKeyPropertyResponse',
    'SkuResponse',
    'TimeSeriesIdPropertyResponse',
    'WarmStorageEnvironmentStatusResponse',
    'WarmStoreConfigurationPropertiesResponse',
]

@pulumi.output_type
class EnvironmentStateDetailsResponse(dict):
    """
    An object that contains the details about an environment's state.
    """
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 message: Optional[str] = None):
        """
        An object that contains the details about an environment's state.
        :param str code: Contains the code that represents the reason of an environment being in a particular state. Can be used to programmatically handle specific cases.
        :param str message: A message that describes the state in detail.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Contains the code that represents the reason of an environment being in a particular state. Can be used to programmatically handle specific cases.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A message that describes the state in detail.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class EnvironmentStatusResponse(dict):
    """
    An object that represents the status of the environment, and its internal state in the Time Series Insights service.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "warmStorage":
            suggest = "warm_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress: 'outputs.IngressEnvironmentStatusResponse',
                 warm_storage: 'outputs.WarmStorageEnvironmentStatusResponse'):
        """
        An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        :param 'IngressEnvironmentStatusResponse' ingress: An object that represents the status of ingress on an environment.
        :param 'WarmStorageEnvironmentStatusResponse' warm_storage: An object that represents the status of warm storage on an environment.
        """
        pulumi.set(__self__, "ingress", ingress)
        pulumi.set(__self__, "warm_storage", warm_storage)

    @property
    @pulumi.getter
    def ingress(self) -> 'outputs.IngressEnvironmentStatusResponse':
        """
        An object that represents the status of ingress on an environment.
        """
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter(name="warmStorage")
    def warm_storage(self) -> 'outputs.WarmStorageEnvironmentStatusResponse':
        """
        An object that represents the status of warm storage on an environment.
        """
        return pulumi.get(self, "warm_storage")


@pulumi.output_type
class EventHubEventSourceResourcePropertiesResponse(dict):
    """
    Properties of the EventHub event source resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerGroupName":
            suggest = "consumer_group_name"
        elif key == "creationTime":
            suggest = "creation_time"
        elif key == "eventHubName":
            suggest = "event_hub_name"
        elif key == "eventSourceResourceId":
            suggest = "event_source_resource_id"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "serviceBusNamespace":
            suggest = "service_bus_namespace"
        elif key == "localTimestamp":
            suggest = "local_timestamp"
        elif key == "timestampPropertyName":
            suggest = "timestamp_property_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventHubEventSourceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventHubEventSourceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventHubEventSourceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 consumer_group_name: str,
                 creation_time: str,
                 event_hub_name: str,
                 event_source_resource_id: str,
                 key_name: str,
                 provisioning_state: str,
                 service_bus_namespace: str,
                 local_timestamp: Optional['outputs.LocalTimestampResponse'] = None,
                 time: Optional[str] = None,
                 timestamp_property_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Properties of the EventHub event source resource.
        :param str consumer_group_name: The name of the event hub's consumer group that holds the partitions from which events will be read.
        :param str creation_time: The time the resource was created.
        :param str event_hub_name: The name of the event hub.
        :param str event_source_resource_id: The resource id of the event source in Azure Resource Manager.
        :param str key_name: The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
        :param str provisioning_state: Provisioning state of the resource.
        :param str service_bus_namespace: The name of the service bus that contains the event hub.
        :param 'LocalTimestampResponse' local_timestamp: An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        :param str time: ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
        :param str timestamp_property_name: The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        :param str type: The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
        """
        pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "event_hub_name", event_hub_name)
        pulumi.set(__self__, "event_source_resource_id", event_source_resource_id)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "service_bus_namespace", service_bus_namespace)
        if local_timestamp is not None:
            pulumi.set(__self__, "local_timestamp", local_timestamp)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timestamp_property_name is not None:
            pulumi.set(__self__, "timestamp_property_name", timestamp_property_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> str:
        """
        The name of the event hub's consumer group that holds the partitions from which events will be read.
        """
        return pulumi.get(self, "consumer_group_name")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time the resource was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="eventHubName")
    def event_hub_name(self) -> str:
        """
        The name of the event hub.
        """
        return pulumi.get(self, "event_hub_name")

    @property
    @pulumi.getter(name="eventSourceResourceId")
    def event_source_resource_id(self) -> str:
        """
        The resource id of the event source in Azure Resource Manager.
        """
        return pulumi.get(self, "event_source_resource_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="serviceBusNamespace")
    def service_bus_namespace(self) -> str:
        """
        The name of the service bus that contains the event hub.
        """
        return pulumi.get(self, "service_bus_namespace")

    @property
    @pulumi.getter(name="localTimestamp")
    def local_timestamp(self) -> Optional['outputs.LocalTimestampResponse']:
        """
        An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        """
        return pulumi.get(self, "local_timestamp")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="timestampPropertyName")
    def timestamp_property_name(self) -> Optional[str]:
        """
        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        return pulumi.get(self, "timestamp_property_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class Gen1EnvironmentResourcePropertiesResponse(dict):
    """
    Properties of the Gen1 environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "dataAccessFqdn":
            suggest = "data_access_fqdn"
        elif key == "dataAccessId":
            suggest = "data_access_id"
        elif key == "dataRetentionTime":
            suggest = "data_retention_time"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "partitionKeyProperties":
            suggest = "partition_key_properties"
        elif key == "storageLimitExceededBehavior":
            suggest = "storage_limit_exceeded_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Gen1EnvironmentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Gen1EnvironmentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Gen1EnvironmentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 data_access_fqdn: str,
                 data_access_id: str,
                 data_retention_time: str,
                 provisioning_state: str,
                 status: 'outputs.EnvironmentStatusResponse',
                 partition_key_properties: Optional[Sequence['outputs.TimeSeriesIdPropertyResponse']] = None,
                 storage_limit_exceeded_behavior: Optional[str] = None):
        """
        Properties of the Gen1 environment.
        :param str creation_time: The time the resource was created.
        :param str data_access_fqdn: The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        :param str data_access_id: An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        :param str data_retention_time: ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        :param str provisioning_state: Provisioning state of the resource.
        :param 'EnvironmentStatusResponse' status: An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        :param Sequence['TimeSeriesIdPropertyResponse'] partition_key_properties: The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
        :param str storage_limit_exceeded_behavior: The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "data_access_fqdn", data_access_fqdn)
        pulumi.set(__self__, "data_access_id", data_access_id)
        pulumi.set(__self__, "data_retention_time", data_retention_time)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        if partition_key_properties is not None:
            pulumi.set(__self__, "partition_key_properties", partition_key_properties)
        if storage_limit_exceeded_behavior is not None:
            pulumi.set(__self__, "storage_limit_exceeded_behavior", storage_limit_exceeded_behavior)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time the resource was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="dataAccessFqdn")
    def data_access_fqdn(self) -> str:
        """
        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        """
        return pulumi.get(self, "data_access_fqdn")

    @property
    @pulumi.getter(name="dataAccessId")
    def data_access_id(self) -> str:
        """
        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        """
        return pulumi.get(self, "data_access_id")

    @property
    @pulumi.getter(name="dataRetentionTime")
    def data_retention_time(self) -> str:
        """
        ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
        """
        return pulumi.get(self, "data_retention_time")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.EnvironmentStatusResponse':
        """
        An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="partitionKeyProperties")
    def partition_key_properties(self) -> Optional[Sequence['outputs.TimeSeriesIdPropertyResponse']]:
        """
        The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
        """
        return pulumi.get(self, "partition_key_properties")

    @property
    @pulumi.getter(name="storageLimitExceededBehavior")
    def storage_limit_exceeded_behavior(self) -> Optional[str]:
        """
        The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
        """
        return pulumi.get(self, "storage_limit_exceeded_behavior")


@pulumi.output_type
class Gen2EnvironmentResourcePropertiesResponse(dict):
    """
    Properties of the Gen2 environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "dataAccessFqdn":
            suggest = "data_access_fqdn"
        elif key == "dataAccessId":
            suggest = "data_access_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "storageConfiguration":
            suggest = "storage_configuration"
        elif key == "timeSeriesIdProperties":
            suggest = "time_series_id_properties"
        elif key == "warmStoreConfiguration":
            suggest = "warm_store_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Gen2EnvironmentResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Gen2EnvironmentResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Gen2EnvironmentResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 data_access_fqdn: str,
                 data_access_id: str,
                 provisioning_state: str,
                 status: 'outputs.EnvironmentStatusResponse',
                 storage_configuration: 'outputs.Gen2StorageConfigurationOutputResponse',
                 time_series_id_properties: Sequence['outputs.TimeSeriesIdPropertyResponse'],
                 warm_store_configuration: Optional['outputs.WarmStoreConfigurationPropertiesResponse'] = None):
        """
        Properties of the Gen2 environment.
        :param str creation_time: The time the resource was created.
        :param str data_access_fqdn: The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        :param str data_access_id: An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        :param str provisioning_state: Provisioning state of the resource.
        :param 'EnvironmentStatusResponse' status: An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        :param 'Gen2StorageConfigurationOutputResponse' storage_configuration: The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
        :param Sequence['TimeSeriesIdPropertyResponse'] time_series_id_properties: The list of event properties which will be used to define the environment's time series id.
        :param 'WarmStoreConfigurationPropertiesResponse' warm_store_configuration: The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "data_access_fqdn", data_access_fqdn)
        pulumi.set(__self__, "data_access_id", data_access_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_configuration", storage_configuration)
        pulumi.set(__self__, "time_series_id_properties", time_series_id_properties)
        if warm_store_configuration is not None:
            pulumi.set(__self__, "warm_store_configuration", warm_store_configuration)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time the resource was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="dataAccessFqdn")
    def data_access_fqdn(self) -> str:
        """
        The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        """
        return pulumi.get(self, "data_access_fqdn")

    @property
    @pulumi.getter(name="dataAccessId")
    def data_access_id(self) -> str:
        """
        An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
        """
        return pulumi.get(self, "data_access_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.EnvironmentStatusResponse':
        """
        An object that represents the status of the environment, and its internal state in the Time Series Insights service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> 'outputs.Gen2StorageConfigurationOutputResponse':
        """
        The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
        """
        return pulumi.get(self, "storage_configuration")

    @property
    @pulumi.getter(name="timeSeriesIdProperties")
    def time_series_id_properties(self) -> Sequence['outputs.TimeSeriesIdPropertyResponse']:
        """
        The list of event properties which will be used to define the environment's time series id.
        """
        return pulumi.get(self, "time_series_id_properties")

    @property
    @pulumi.getter(name="warmStoreConfiguration")
    def warm_store_configuration(self) -> Optional['outputs.WarmStoreConfigurationPropertiesResponse']:
        """
        The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        """
        return pulumi.get(self, "warm_store_configuration")


@pulumi.output_type
class Gen2StorageConfigurationOutputResponse(dict):
    """
    The storage configuration provides the non-secret connection details about the customer storage account that is used to store the environment's data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Gen2StorageConfigurationOutputResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Gen2StorageConfigurationOutputResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Gen2StorageConfigurationOutputResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: str):
        """
        The storage configuration provides the non-secret connection details about the customer storage account that is used to store the environment's data.
        :param str account_name: The name of the storage account that will hold the environment's Gen2 data.
        """
        pulumi.set(__self__, "account_name", account_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        """
        The name of the storage account that will hold the environment's Gen2 data.
        """
        return pulumi.get(self, "account_name")


@pulumi.output_type
class IngressEnvironmentStatusResponse(dict):
    """
    An object that represents the status of ingress on an environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateDetails":
            suggest = "state_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IngressEnvironmentStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IngressEnvironmentStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IngressEnvironmentStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_details: 'outputs.EnvironmentStateDetailsResponse',
                 state: Optional[str] = None):
        """
        An object that represents the status of ingress on an environment.
        :param 'EnvironmentStateDetailsResponse' state_details: An object that contains the details about an environment's state.
        :param str state: This string represents the state of ingress operations on an environment. It can be "Disabled", "Ready", "Running", "Paused" or "Unknown"
        """
        pulumi.set(__self__, "state_details", state_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="stateDetails")
    def state_details(self) -> 'outputs.EnvironmentStateDetailsResponse':
        """
        An object that contains the details about an environment's state.
        """
        return pulumi.get(self, "state_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        This string represents the state of ingress operations on an environment. It can be "Disabled", "Ready", "Running", "Paused" or "Unknown"
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class IoTHubEventSourceResourcePropertiesResponse(dict):
    """
    Properties of the IoTHub event source resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerGroupName":
            suggest = "consumer_group_name"
        elif key == "creationTime":
            suggest = "creation_time"
        elif key == "eventSourceResourceId":
            suggest = "event_source_resource_id"
        elif key == "iotHubName":
            suggest = "iot_hub_name"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "localTimestamp":
            suggest = "local_timestamp"
        elif key == "timestampPropertyName":
            suggest = "timestamp_property_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IoTHubEventSourceResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IoTHubEventSourceResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IoTHubEventSourceResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 consumer_group_name: str,
                 creation_time: str,
                 event_source_resource_id: str,
                 iot_hub_name: str,
                 key_name: str,
                 provisioning_state: str,
                 local_timestamp: Optional['outputs.LocalTimestampResponse'] = None,
                 time: Optional[str] = None,
                 timestamp_property_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Properties of the IoTHub event source resource.
        :param str consumer_group_name: The name of the iot hub's consumer group that holds the partitions from which events will be read.
        :param str creation_time: The time the resource was created.
        :param str event_source_resource_id: The resource id of the event source in Azure Resource Manager.
        :param str iot_hub_name: The name of the iot hub.
        :param str key_name: The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
        :param str provisioning_state: Provisioning state of the resource.
        :param 'LocalTimestampResponse' local_timestamp: An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        :param str time: ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
        :param str timestamp_property_name: The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        :param str type: The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
        """
        pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "event_source_resource_id", event_source_resource_id)
        pulumi.set(__self__, "iot_hub_name", iot_hub_name)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if local_timestamp is not None:
            pulumi.set(__self__, "local_timestamp", local_timestamp)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timestamp_property_name is not None:
            pulumi.set(__self__, "timestamp_property_name", timestamp_property_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> str:
        """
        The name of the iot hub's consumer group that holds the partitions from which events will be read.
        """
        return pulumi.get(self, "consumer_group_name")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time the resource was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="eventSourceResourceId")
    def event_source_resource_id(self) -> str:
        """
        The resource id of the event source in Azure Resource Manager.
        """
        return pulumi.get(self, "event_source_resource_id")

    @property
    @pulumi.getter(name="iotHubName")
    def iot_hub_name(self) -> str:
        """
        The name of the iot hub.
        """
        return pulumi.get(self, "iot_hub_name")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="localTimestamp")
    def local_timestamp(self) -> Optional['outputs.LocalTimestampResponse']:
        """
        An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        """
        return pulumi.get(self, "local_timestamp")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="timestampPropertyName")
    def timestamp_property_name(self) -> Optional[str]:
        """
        The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
        """
        return pulumi.get(self, "timestamp_property_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LocalTimestampResponse(dict):
    """
    An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeZoneOffset":
            suggest = "time_zone_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalTimestampResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalTimestampResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalTimestampResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: Optional[str] = None,
                 time_zone_offset: Optional['outputs.LocalTimestampResponseTimeZoneOffset'] = None):
        """
        An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
        :param str format: An enum that represents the format of the local timestamp property that needs to be set.
        :param 'LocalTimestampResponseTimeZoneOffset' time_zone_offset: An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if time_zone_offset is not None:
            pulumi.set(__self__, "time_zone_offset", time_zone_offset)

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        An enum that represents the format of the local timestamp property that needs to be set.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> Optional['outputs.LocalTimestampResponseTimeZoneOffset']:
        """
        An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        """
        return pulumi.get(self, "time_zone_offset")


@pulumi.output_type
class LocalTimestampResponseTimeZoneOffset(dict):
    """
    An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyName":
            suggest = "property_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalTimestampResponseTimeZoneOffset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalTimestampResponseTimeZoneOffset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalTimestampResponseTimeZoneOffset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_name: Optional[str] = None):
        """
        An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
        :param str property_name: The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
        """
        if property_name is not None:
            pulumi.set(__self__, "property_name", property_name)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[str]:
        """
        The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
        """
        return pulumi.get(self, "property_name")


@pulumi.output_type
class ReferenceDataSetKeyPropertyResponse(dict):
    """
    A key property for the reference data set. A reference data set can have multiple key properties.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        A key property for the reference data set. A reference data set can have multiple key properties.
        :param str name: The name of the key property.
        :param str type: The type of the key property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the key property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the key property.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SkuResponse(dict):
    """
    The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
    """
    def __init__(__self__, *,
                 capacity: int,
                 name: str):
        """
        The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
        :param int capacity: The capacity of the sku. For Gen1 environments, this value can be changed to support scale out of environments after they have been created.
        :param str name: The name of this SKU.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> int:
        """
        The capacity of the sku. For Gen1 environments, this value can be changed to support scale out of environments after they have been created.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this SKU.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TimeSeriesIdPropertyResponse(dict):
    """
    The structure of the property that a time series id can have. An environment can have multiple such properties.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        The structure of the property that a time series id can have. An environment can have multiple such properties.
        :param str name: The name of the property.
        :param str type: The type of the property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the property.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WarmStorageEnvironmentStatusResponse(dict):
    """
    An object that represents the status of warm storage on an environment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentCount":
            suggest = "current_count"
        elif key == "maxCount":
            suggest = "max_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarmStorageEnvironmentStatusResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarmStorageEnvironmentStatusResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarmStorageEnvironmentStatusResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_count: Optional[int] = None,
                 max_count: Optional[int] = None,
                 state: Optional[str] = None):
        """
        An object that represents the status of warm storage on an environment.
        :param int current_count: A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU
        :param int max_count: A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.
        :param str state: This string represents the state of warm storage properties usage. It can be "Ok", "Error", "Unknown".
        """
        if current_count is not None:
            pulumi.set(__self__, "current_count", current_count)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="currentCount")
    def current_count(self) -> Optional[int]:
        """
        A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU
        """
        return pulumi.get(self, "current_count")

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[int]:
        """
        A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU.
        """
        return pulumi.get(self, "max_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        This string represents the state of warm storage properties usage. It can be "Ok", "Error", "Unknown".
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class WarmStoreConfigurationPropertiesResponse(dict):
    """
    The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataRetention":
            suggest = "data_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WarmStoreConfigurationPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WarmStoreConfigurationPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WarmStoreConfigurationPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_retention: str):
        """
        The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
        :param str data_retention: ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
        """
        pulumi.set(__self__, "data_retention", data_retention)

    @property
    @pulumi.getter(name="dataRetention")
    def data_retention(self) -> str:
        """
        ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
        """
        return pulumi.get(self, "data_retention")


