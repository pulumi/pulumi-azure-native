# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCGProfileResult',
    'AwaitableGetCGProfileResult',
    'get_cg_profile',
    'get_cg_profile_output',
]

@pulumi.output_type
class GetCGProfileResult:
    """
    container group profile object
    """
    def __init__(__self__, confidential_compute_properties=None, containers=None, diagnostics=None, encryption_properties=None, extensions=None, id=None, image_registry_credentials=None, init_containers=None, ip_address=None, location=None, name=None, os_type=None, priority=None, registered_revisions=None, restart_policy=None, revision=None, security_context=None, shutdown_grace_period=None, sku=None, system_data=None, tags=None, time_to_live=None, type=None, use_krypton=None, volumes=None, zones=None):
        if confidential_compute_properties and not isinstance(confidential_compute_properties, dict):
            raise TypeError("Expected argument 'confidential_compute_properties' to be a dict")
        pulumi.set(__self__, "confidential_compute_properties", confidential_compute_properties)
        if containers and not isinstance(containers, list):
            raise TypeError("Expected argument 'containers' to be a list")
        pulumi.set(__self__, "containers", containers)
        if diagnostics and not isinstance(diagnostics, dict):
            raise TypeError("Expected argument 'diagnostics' to be a dict")
        pulumi.set(__self__, "diagnostics", diagnostics)
        if encryption_properties and not isinstance(encryption_properties, dict):
            raise TypeError("Expected argument 'encryption_properties' to be a dict")
        pulumi.set(__self__, "encryption_properties", encryption_properties)
        if extensions and not isinstance(extensions, list):
            raise TypeError("Expected argument 'extensions' to be a list")
        pulumi.set(__self__, "extensions", extensions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_registry_credentials and not isinstance(image_registry_credentials, list):
            raise TypeError("Expected argument 'image_registry_credentials' to be a list")
        pulumi.set(__self__, "image_registry_credentials", image_registry_credentials)
        if init_containers and not isinstance(init_containers, list):
            raise TypeError("Expected argument 'init_containers' to be a list")
        pulumi.set(__self__, "init_containers", init_containers)
        if ip_address and not isinstance(ip_address, dict):
            raise TypeError("Expected argument 'ip_address' to be a dict")
        pulumi.set(__self__, "ip_address", ip_address)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if priority and not isinstance(priority, str):
            raise TypeError("Expected argument 'priority' to be a str")
        pulumi.set(__self__, "priority", priority)
        if registered_revisions and not isinstance(registered_revisions, list):
            raise TypeError("Expected argument 'registered_revisions' to be a list")
        pulumi.set(__self__, "registered_revisions", registered_revisions)
        if restart_policy and not isinstance(restart_policy, str):
            raise TypeError("Expected argument 'restart_policy' to be a str")
        pulumi.set(__self__, "restart_policy", restart_policy)
        if revision and not isinstance(revision, float):
            raise TypeError("Expected argument 'revision' to be a float")
        pulumi.set(__self__, "revision", revision)
        if security_context and not isinstance(security_context, dict):
            raise TypeError("Expected argument 'security_context' to be a dict")
        pulumi.set(__self__, "security_context", security_context)
        if shutdown_grace_period and not isinstance(shutdown_grace_period, str):
            raise TypeError("Expected argument 'shutdown_grace_period' to be a str")
        pulumi.set(__self__, "shutdown_grace_period", shutdown_grace_period)
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        pulumi.set(__self__, "sku", sku)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if time_to_live and not isinstance(time_to_live, str):
            raise TypeError("Expected argument 'time_to_live' to be a str")
        pulumi.set(__self__, "time_to_live", time_to_live)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if use_krypton and not isinstance(use_krypton, bool):
            raise TypeError("Expected argument 'use_krypton' to be a bool")
        pulumi.set(__self__, "use_krypton", use_krypton)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="confidentialComputeProperties")
    def confidential_compute_properties(self) -> Optional['outputs.ConfidentialComputePropertiesResponse']:
        """
        The properties for confidential container group
        """
        return pulumi.get(self, "confidential_compute_properties")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.ContainerResponse']]:
        """
        The containers within the container group.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def diagnostics(self) -> Optional['outputs.ContainerGroupDiagnosticsResponse']:
        """
        The diagnostic information for a container group.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter(name="encryptionProperties")
    def encryption_properties(self) -> Optional['outputs.EncryptionPropertiesResponse']:
        """
        The encryption properties for a container group.
        """
        return pulumi.get(self, "encryption_properties")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.DeploymentExtensionSpecResponse']]:
        """
        extensions used by virtual kubelet
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The resource id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> Optional[Sequence['outputs.ImageRegistryCredentialResponse']]:
        """
        The image registry credentials by which the container group is created from.
        """
        return pulumi.get(self, "image_registry_credentials")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[Sequence['outputs.InitContainerDefinitionResponse']]:
        """
        The init containers for a container group.
        """
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional['outputs.IpAddressResponse']:
        """
        The IP address type of the container group.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        The operating system type required by the containers in the container group.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The priority of the container group.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="registeredRevisions")
    def registered_revisions(self) -> Optional[Sequence[float]]:
        """
        Registered revisions are calculated at request time based off the records in the table logs.
        """
        return pulumi.get(self, "registered_revisions")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[str]:
        """
        Restart policy for all containers within the container group. 
        - `Always` Always restart
        - `OnFailure` Restart on failure
        - `Never` Never restart
        """
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter
    def revision(self) -> Optional[float]:
        """
        Container group profile current revision number
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.SecurityContextDefinitionResponse']:
        """
        The container security properties.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> Optional[str]:
        """
        Shutdown grace period for containers in a container group.
        """
        return pulumi.get(self, "shutdown_grace_period")

    @property
    @pulumi.getter
    def sku(self) -> Optional[str]:
        """
        The SKU for a container group.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[str]:
        """
        Post completion time to live for containers of a CG
        """
        return pulumi.get(self, "time_to_live")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useKrypton")
    def use_krypton(self) -> Optional[bool]:
        """
        Gets or sets Krypton use property.
        """
        return pulumi.get(self, "use_krypton")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.VolumeResponse']]:
        """
        The list of volumes that can be mounted by containers in this container group.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")


class AwaitableGetCGProfileResult(GetCGProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCGProfileResult(
            confidential_compute_properties=self.confidential_compute_properties,
            containers=self.containers,
            diagnostics=self.diagnostics,
            encryption_properties=self.encryption_properties,
            extensions=self.extensions,
            id=self.id,
            image_registry_credentials=self.image_registry_credentials,
            init_containers=self.init_containers,
            ip_address=self.ip_address,
            location=self.location,
            name=self.name,
            os_type=self.os_type,
            priority=self.priority,
            registered_revisions=self.registered_revisions,
            restart_policy=self.restart_policy,
            revision=self.revision,
            security_context=self.security_context,
            shutdown_grace_period=self.shutdown_grace_period,
            sku=self.sku,
            system_data=self.system_data,
            tags=self.tags,
            time_to_live=self.time_to_live,
            type=self.type,
            use_krypton=self.use_krypton,
            volumes=self.volumes,
            zones=self.zones)


def get_cg_profile(container_group_profile_name: Optional[str] = None,
                   resource_group_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCGProfileResult:
    """
    Get the properties of the specified container group profile.
    Azure REST API version: 2024-11-01-preview.


    :param str container_group_profile_name: ContainerGroupProfile name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['containerGroupProfileName'] = container_group_profile_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:containerinstance:getCGProfile', __args__, opts=opts, typ=GetCGProfileResult).value

    return AwaitableGetCGProfileResult(
        confidential_compute_properties=pulumi.get(__ret__, 'confidential_compute_properties'),
        containers=pulumi.get(__ret__, 'containers'),
        diagnostics=pulumi.get(__ret__, 'diagnostics'),
        encryption_properties=pulumi.get(__ret__, 'encryption_properties'),
        extensions=pulumi.get(__ret__, 'extensions'),
        id=pulumi.get(__ret__, 'id'),
        image_registry_credentials=pulumi.get(__ret__, 'image_registry_credentials'),
        init_containers=pulumi.get(__ret__, 'init_containers'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        os_type=pulumi.get(__ret__, 'os_type'),
        priority=pulumi.get(__ret__, 'priority'),
        registered_revisions=pulumi.get(__ret__, 'registered_revisions'),
        restart_policy=pulumi.get(__ret__, 'restart_policy'),
        revision=pulumi.get(__ret__, 'revision'),
        security_context=pulumi.get(__ret__, 'security_context'),
        shutdown_grace_period=pulumi.get(__ret__, 'shutdown_grace_period'),
        sku=pulumi.get(__ret__, 'sku'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        time_to_live=pulumi.get(__ret__, 'time_to_live'),
        type=pulumi.get(__ret__, 'type'),
        use_krypton=pulumi.get(__ret__, 'use_krypton'),
        volumes=pulumi.get(__ret__, 'volumes'),
        zones=pulumi.get(__ret__, 'zones'))
def get_cg_profile_output(container_group_profile_name: Optional[pulumi.Input[str]] = None,
                          resource_group_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCGProfileResult]:
    """
    Get the properties of the specified container group profile.
    Azure REST API version: 2024-11-01-preview.


    :param str container_group_profile_name: ContainerGroupProfile name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['containerGroupProfileName'] = container_group_profile_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:containerinstance:getCGProfile', __args__, opts=opts, typ=GetCGProfileResult)
    return __ret__.apply(lambda __response__: GetCGProfileResult(
        confidential_compute_properties=pulumi.get(__response__, 'confidential_compute_properties'),
        containers=pulumi.get(__response__, 'containers'),
        diagnostics=pulumi.get(__response__, 'diagnostics'),
        encryption_properties=pulumi.get(__response__, 'encryption_properties'),
        extensions=pulumi.get(__response__, 'extensions'),
        id=pulumi.get(__response__, 'id'),
        image_registry_credentials=pulumi.get(__response__, 'image_registry_credentials'),
        init_containers=pulumi.get(__response__, 'init_containers'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        os_type=pulumi.get(__response__, 'os_type'),
        priority=pulumi.get(__response__, 'priority'),
        registered_revisions=pulumi.get(__response__, 'registered_revisions'),
        restart_policy=pulumi.get(__response__, 'restart_policy'),
        revision=pulumi.get(__response__, 'revision'),
        security_context=pulumi.get(__response__, 'security_context'),
        shutdown_grace_period=pulumi.get(__response__, 'shutdown_grace_period'),
        sku=pulumi.get(__response__, 'sku'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        time_to_live=pulumi.get(__response__, 'time_to_live'),
        type=pulumi.get(__response__, 'type'),
        use_krypton=pulumi.get(__response__, 'use_krypton'),
        volumes=pulumi.get(__response__, 'volumes'),
        zones=pulumi.get(__response__, 'zones')))
