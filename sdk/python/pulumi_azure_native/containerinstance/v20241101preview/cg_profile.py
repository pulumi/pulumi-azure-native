# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CGProfileArgs', 'CGProfile']

@pulumi.input_type
class CGProfileArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 confidential_compute_properties: Optional[pulumi.Input['ConfidentialComputePropertiesArgs']] = None,
                 container_group_profile_name: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerArgs']]]] = None,
                 diagnostics: Optional[pulumi.Input['ContainerGroupDiagnosticsArgs']] = None,
                 encryption_properties: Optional[pulumi.Input['EncryptionPropertiesArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentExtensionSpecArgs']]]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryCredentialArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['InitContainerDefinitionArgs']]]] = None,
                 ip_address: Optional[pulumi.Input['IpAddressArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OperatingSystemTypes']]] = None,
                 priority: Optional[pulumi.Input[Union[str, 'ContainerGroupPriority']]] = None,
                 registered_revisions: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 restart_policy: Optional[pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']]] = None,
                 revision: Optional[pulumi.Input[float]] = None,
                 security_context: Optional[pulumi.Input['SecurityContextDefinitionArgs']] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'ContainerGroupSku']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 time_to_live: Optional[pulumi.Input[str]] = None,
                 use_krypton: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeArgs']]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CGProfile resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input['ConfidentialComputePropertiesArgs'] confidential_compute_properties: The properties for confidential container group
        :param pulumi.Input[str] container_group_profile_name: ContainerGroupProfile name.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerArgs']]] containers: The containers within the container group.
        :param pulumi.Input['ContainerGroupDiagnosticsArgs'] diagnostics: The diagnostic information for a container group.
        :param pulumi.Input['EncryptionPropertiesArgs'] encryption_properties: The encryption properties for a container group.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentExtensionSpecArgs']]] extensions: extensions used by virtual kubelet
        :param pulumi.Input[Sequence[pulumi.Input['ImageRegistryCredentialArgs']]] image_registry_credentials: The image registry credentials by which the container group is created from.
        :param pulumi.Input[Sequence[pulumi.Input['InitContainerDefinitionArgs']]] init_containers: The init containers for a container group.
        :param pulumi.Input['IpAddressArgs'] ip_address: The IP address type of the container group.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[Union[str, 'OperatingSystemTypes']] os_type: The operating system type required by the containers in the container group.
        :param pulumi.Input[Union[str, 'ContainerGroupPriority']] priority: The priority of the container group.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] registered_revisions: Registered revisions are calculated at request time based off the records in the table logs.
        :param pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']] restart_policy: Restart policy for all containers within the container group. 
               - `Always` Always restart
               - `OnFailure` Restart on failure
               - `Never` Never restart
        :param pulumi.Input[float] revision: Container group profile current revision number
        :param pulumi.Input['SecurityContextDefinitionArgs'] security_context: The container security properties.
        :param pulumi.Input[str] shutdown_grace_period: Shutdown grace period for containers in a container group.
        :param pulumi.Input[Union[str, 'ContainerGroupSku']] sku: The SKU for a container group.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        :param pulumi.Input[str] time_to_live: Post completion time to live for containers of a CG
        :param pulumi.Input[bool] use_krypton: Gets or sets Krypton use property.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeArgs']]] volumes: The list of volumes that can be mounted by containers in this container group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: The zones for the container group.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if confidential_compute_properties is not None:
            pulumi.set(__self__, "confidential_compute_properties", confidential_compute_properties)
        if container_group_profile_name is not None:
            pulumi.set(__self__, "container_group_profile_name", container_group_profile_name)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if diagnostics is not None:
            pulumi.set(__self__, "diagnostics", diagnostics)
        if encryption_properties is not None:
            pulumi.set(__self__, "encryption_properties", encryption_properties)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if image_registry_credentials is not None:
            pulumi.set(__self__, "image_registry_credentials", image_registry_credentials)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if registered_revisions is not None:
            pulumi.set(__self__, "registered_revisions", registered_revisions)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if shutdown_grace_period is not None:
            pulumi.set(__self__, "shutdown_grace_period", shutdown_grace_period)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_to_live is not None:
            pulumi.set(__self__, "time_to_live", time_to_live)
        if use_krypton is not None:
            pulumi.set(__self__, "use_krypton", use_krypton)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="confidentialComputeProperties")
    def confidential_compute_properties(self) -> Optional[pulumi.Input['ConfidentialComputePropertiesArgs']]:
        """
        The properties for confidential container group
        """
        return pulumi.get(self, "confidential_compute_properties")

    @confidential_compute_properties.setter
    def confidential_compute_properties(self, value: Optional[pulumi.Input['ConfidentialComputePropertiesArgs']]):
        pulumi.set(self, "confidential_compute_properties", value)

    @property
    @pulumi.getter(name="containerGroupProfileName")
    def container_group_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        ContainerGroupProfile name.
        """
        return pulumi.get(self, "container_group_profile_name")

    @container_group_profile_name.setter
    def container_group_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_group_profile_name", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerArgs']]]]:
        """
        The containers within the container group.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def diagnostics(self) -> Optional[pulumi.Input['ContainerGroupDiagnosticsArgs']]:
        """
        The diagnostic information for a container group.
        """
        return pulumi.get(self, "diagnostics")

    @diagnostics.setter
    def diagnostics(self, value: Optional[pulumi.Input['ContainerGroupDiagnosticsArgs']]):
        pulumi.set(self, "diagnostics", value)

    @property
    @pulumi.getter(name="encryptionProperties")
    def encryption_properties(self) -> Optional[pulumi.Input['EncryptionPropertiesArgs']]:
        """
        The encryption properties for a container group.
        """
        return pulumi.get(self, "encryption_properties")

    @encryption_properties.setter
    def encryption_properties(self, value: Optional[pulumi.Input['EncryptionPropertiesArgs']]):
        pulumi.set(self, "encryption_properties", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentExtensionSpecArgs']]]]:
        """
        extensions used by virtual kubelet
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentExtensionSpecArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryCredentialArgs']]]]:
        """
        The image registry credentials by which the container group is created from.
        """
        return pulumi.get(self, "image_registry_credentials")

    @image_registry_credentials.setter
    def image_registry_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryCredentialArgs']]]]):
        pulumi.set(self, "image_registry_credentials", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InitContainerDefinitionArgs']]]]:
        """
        The init containers for a container group.
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InitContainerDefinitionArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input['IpAddressArgs']]:
        """
        The IP address type of the container group.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input['IpAddressArgs']]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[Union[str, 'OperatingSystemTypes']]]:
        """
        The operating system type required by the containers in the container group.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[Union[str, 'OperatingSystemTypes']]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Union[str, 'ContainerGroupPriority']]]:
        """
        The priority of the container group.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Union[str, 'ContainerGroupPriority']]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="registeredRevisions")
    def registered_revisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        Registered revisions are calculated at request time based off the records in the table logs.
        """
        return pulumi.get(self, "registered_revisions")

    @registered_revisions.setter
    def registered_revisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "registered_revisions", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']]]:
        """
        Restart policy for all containers within the container group. 
        - `Always` Always restart
        - `OnFailure` Restart on failure
        - `Never` Never restart
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']]]):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[float]]:
        """
        Container group profile current revision number
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['SecurityContextDefinitionArgs']]:
        """
        The container security properties.
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['SecurityContextDefinitionArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> Optional[pulumi.Input[str]]:
        """
        Shutdown grace period for containers in a container group.
        """
        return pulumi.get(self, "shutdown_grace_period")

    @shutdown_grace_period.setter
    def shutdown_grace_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_grace_period", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input[Union[str, 'ContainerGroupSku']]]:
        """
        The SKU for a container group.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input[Union[str, 'ContainerGroupSku']]]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[pulumi.Input[str]]:
        """
        Post completion time to live for containers of a CG
        """
        return pulumi.get(self, "time_to_live")

    @time_to_live.setter
    def time_to_live(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_to_live", value)

    @property
    @pulumi.getter(name="useKrypton")
    def use_krypton(self) -> Optional[pulumi.Input[bool]]:
        """
        Gets or sets Krypton use property.
        """
        return pulumi.get(self, "use_krypton")

    @use_krypton.setter
    def use_krypton(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_krypton", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeArgs']]]]:
        """
        The list of volumes that can be mounted by containers in this container group.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeArgs']]]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class CGProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidential_compute_properties: Optional[pulumi.Input[Union['ConfidentialComputePropertiesArgs', 'ConfidentialComputePropertiesArgsDict']]] = None,
                 container_group_profile_name: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerArgs', 'ContainerArgsDict']]]]] = None,
                 diagnostics: Optional[pulumi.Input[Union['ContainerGroupDiagnosticsArgs', 'ContainerGroupDiagnosticsArgsDict']]] = None,
                 encryption_properties: Optional[pulumi.Input[Union['EncryptionPropertiesArgs', 'EncryptionPropertiesArgsDict']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentExtensionSpecArgs', 'DeploymentExtensionSpecArgsDict']]]]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageRegistryCredentialArgs', 'ImageRegistryCredentialArgsDict']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InitContainerDefinitionArgs', 'InitContainerDefinitionArgsDict']]]]] = None,
                 ip_address: Optional[pulumi.Input[Union['IpAddressArgs', 'IpAddressArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OperatingSystemTypes']]] = None,
                 priority: Optional[pulumi.Input[Union[str, 'ContainerGroupPriority']]] = None,
                 registered_revisions: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 restart_policy: Optional[pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']]] = None,
                 revision: Optional[pulumi.Input[float]] = None,
                 security_context: Optional[pulumi.Input[Union['SecurityContextDefinitionArgs', 'SecurityContextDefinitionArgsDict']]] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'ContainerGroupSku']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 time_to_live: Optional[pulumi.Input[str]] = None,
                 use_krypton: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeArgs', 'VolumeArgsDict']]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        container group profile object

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ConfidentialComputePropertiesArgs', 'ConfidentialComputePropertiesArgsDict']] confidential_compute_properties: The properties for confidential container group
        :param pulumi.Input[str] container_group_profile_name: ContainerGroupProfile name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerArgs', 'ContainerArgsDict']]]] containers: The containers within the container group.
        :param pulumi.Input[Union['ContainerGroupDiagnosticsArgs', 'ContainerGroupDiagnosticsArgsDict']] diagnostics: The diagnostic information for a container group.
        :param pulumi.Input[Union['EncryptionPropertiesArgs', 'EncryptionPropertiesArgsDict']] encryption_properties: The encryption properties for a container group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeploymentExtensionSpecArgs', 'DeploymentExtensionSpecArgsDict']]]] extensions: extensions used by virtual kubelet
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageRegistryCredentialArgs', 'ImageRegistryCredentialArgsDict']]]] image_registry_credentials: The image registry credentials by which the container group is created from.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InitContainerDefinitionArgs', 'InitContainerDefinitionArgsDict']]]] init_containers: The init containers for a container group.
        :param pulumi.Input[Union['IpAddressArgs', 'IpAddressArgsDict']] ip_address: The IP address type of the container group.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[Union[str, 'OperatingSystemTypes']] os_type: The operating system type required by the containers in the container group.
        :param pulumi.Input[Union[str, 'ContainerGroupPriority']] priority: The priority of the container group.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] registered_revisions: Registered revisions are calculated at request time based off the records in the table logs.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']] restart_policy: Restart policy for all containers within the container group. 
               - `Always` Always restart
               - `OnFailure` Restart on failure
               - `Never` Never restart
        :param pulumi.Input[float] revision: Container group profile current revision number
        :param pulumi.Input[Union['SecurityContextDefinitionArgs', 'SecurityContextDefinitionArgsDict']] security_context: The container security properties.
        :param pulumi.Input[str] shutdown_grace_period: Shutdown grace period for containers in a container group.
        :param pulumi.Input[Union[str, 'ContainerGroupSku']] sku: The SKU for a container group.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        :param pulumi.Input[str] time_to_live: Post completion time to live for containers of a CG
        :param pulumi.Input[bool] use_krypton: Gets or sets Krypton use property.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeArgs', 'VolumeArgsDict']]]] volumes: The list of volumes that can be mounted by containers in this container group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: The zones for the container group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CGProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        container group profile object

        :param str resource_name: The name of the resource.
        :param CGProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CGProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidential_compute_properties: Optional[pulumi.Input[Union['ConfidentialComputePropertiesArgs', 'ConfidentialComputePropertiesArgsDict']]] = None,
                 container_group_profile_name: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerArgs', 'ContainerArgsDict']]]]] = None,
                 diagnostics: Optional[pulumi.Input[Union['ContainerGroupDiagnosticsArgs', 'ContainerGroupDiagnosticsArgsDict']]] = None,
                 encryption_properties: Optional[pulumi.Input[Union['EncryptionPropertiesArgs', 'EncryptionPropertiesArgsDict']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeploymentExtensionSpecArgs', 'DeploymentExtensionSpecArgsDict']]]]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageRegistryCredentialArgs', 'ImageRegistryCredentialArgsDict']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InitContainerDefinitionArgs', 'InitContainerDefinitionArgsDict']]]]] = None,
                 ip_address: Optional[pulumi.Input[Union['IpAddressArgs', 'IpAddressArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[Union[str, 'OperatingSystemTypes']]] = None,
                 priority: Optional[pulumi.Input[Union[str, 'ContainerGroupPriority']]] = None,
                 registered_revisions: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 restart_policy: Optional[pulumi.Input[Union[str, 'ContainerGroupRestartPolicy']]] = None,
                 revision: Optional[pulumi.Input[float]] = None,
                 security_context: Optional[pulumi.Input[Union['SecurityContextDefinitionArgs', 'SecurityContextDefinitionArgsDict']]] = None,
                 shutdown_grace_period: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input[Union[str, 'ContainerGroupSku']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 time_to_live: Optional[pulumi.Input[str]] = None,
                 use_krypton: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeArgs', 'VolumeArgsDict']]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CGProfileArgs.__new__(CGProfileArgs)

            __props__.__dict__["confidential_compute_properties"] = confidential_compute_properties
            __props__.__dict__["container_group_profile_name"] = container_group_profile_name
            __props__.__dict__["containers"] = containers
            __props__.__dict__["diagnostics"] = diagnostics
            __props__.__dict__["encryption_properties"] = encryption_properties
            __props__.__dict__["extensions"] = extensions
            __props__.__dict__["image_registry_credentials"] = image_registry_credentials
            __props__.__dict__["init_containers"] = init_containers
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["location"] = location
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["priority"] = priority
            __props__.__dict__["registered_revisions"] = registered_revisions
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["restart_policy"] = restart_policy
            __props__.__dict__["revision"] = revision
            __props__.__dict__["security_context"] = security_context
            __props__.__dict__["shutdown_grace_period"] = shutdown_grace_period
            __props__.__dict__["sku"] = sku
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_to_live"] = time_to_live
            __props__.__dict__["use_krypton"] = use_krypton
            __props__.__dict__["volumes"] = volumes
            __props__.__dict__["zones"] = zones
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:containerinstance:CGProfile"), pulumi.Alias(type_="azure-native:containerinstance/v20240501preview:CGProfile")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CGProfile, __self__).__init__(
            'azure-native:containerinstance/v20241101preview:CGProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CGProfile':
        """
        Get an existing CGProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CGProfileArgs.__new__(CGProfileArgs)

        __props__.__dict__["confidential_compute_properties"] = None
        __props__.__dict__["containers"] = None
        __props__.__dict__["diagnostics"] = None
        __props__.__dict__["encryption_properties"] = None
        __props__.__dict__["extensions"] = None
        __props__.__dict__["image_registry_credentials"] = None
        __props__.__dict__["init_containers"] = None
        __props__.__dict__["ip_address"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["os_type"] = None
        __props__.__dict__["priority"] = None
        __props__.__dict__["registered_revisions"] = None
        __props__.__dict__["restart_policy"] = None
        __props__.__dict__["revision"] = None
        __props__.__dict__["security_context"] = None
        __props__.__dict__["shutdown_grace_period"] = None
        __props__.__dict__["sku"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["time_to_live"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["use_krypton"] = None
        __props__.__dict__["volumes"] = None
        __props__.__dict__["zones"] = None
        return CGProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="confidentialComputeProperties")
    def confidential_compute_properties(self) -> pulumi.Output[Optional['outputs.ConfidentialComputePropertiesResponse']]:
        """
        The properties for confidential container group
        """
        return pulumi.get(self, "confidential_compute_properties")

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerResponse']]]:
        """
        The containers within the container group.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def diagnostics(self) -> pulumi.Output[Optional['outputs.ContainerGroupDiagnosticsResponse']]:
        """
        The diagnostic information for a container group.
        """
        return pulumi.get(self, "diagnostics")

    @property
    @pulumi.getter(name="encryptionProperties")
    def encryption_properties(self) -> pulumi.Output[Optional['outputs.EncryptionPropertiesResponse']]:
        """
        The encryption properties for a container group.
        """
        return pulumi.get(self, "encryption_properties")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentExtensionSpecResponse']]]:
        """
        extensions used by virtual kubelet
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> pulumi.Output[Optional[Sequence['outputs.ImageRegistryCredentialResponse']]]:
        """
        The image registry credentials by which the container group is created from.
        """
        return pulumi.get(self, "image_registry_credentials")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> pulumi.Output[Optional[Sequence['outputs.InitContainerDefinitionResponse']]]:
        """
        The init containers for a container group.
        """
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional['outputs.IpAddressResponse']]:
        """
        The IP address type of the container group.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[Optional[str]]:
        """
        The operating system type required by the containers in the container group.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        The priority of the container group.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="registeredRevisions")
    def registered_revisions(self) -> pulumi.Output[Optional[Sequence[float]]]:
        """
        Registered revisions are calculated at request time based off the records in the table logs.
        """
        return pulumi.get(self, "registered_revisions")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Restart policy for all containers within the container group. 
        - `Always` Always restart
        - `OnFailure` Restart on failure
        - `Never` Never restart
        """
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[Optional[float]]:
        """
        Container group profile current revision number
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> pulumi.Output[Optional['outputs.SecurityContextDefinitionResponse']]:
        """
        The container security properties.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="shutdownGracePeriod")
    def shutdown_grace_period(self) -> pulumi.Output[Optional[str]]:
        """
        Shutdown grace period for containers in a container group.
        """
        return pulumi.get(self, "shutdown_grace_period")

    @property
    @pulumi.getter
    def sku(self) -> pulumi.Output[Optional[str]]:
        """
        The SKU for a container group.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> pulumi.Output[Optional[str]]:
        """
        Post completion time to live for containers of a CG
        """
        return pulumi.get(self, "time_to_live")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useKrypton")
    def use_krypton(self) -> pulumi.Output[Optional[bool]]:
        """
        Gets or sets Krypton use property.
        """
        return pulumi.get(self, "use_krypton")

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Optional[Sequence['outputs.VolumeResponse']]]:
        """
        The list of volumes that can be mounted by containers in this container group.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")

