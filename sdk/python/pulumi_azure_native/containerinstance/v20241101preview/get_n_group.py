# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetNGroupResult',
    'AwaitableGetNGroupResult',
    'get_n_group',
    'get_n_group_output',
]

@pulumi.output_type
class GetNGroupResult:
    """
    Describes the NGroups resource.
    """
    def __init__(__self__, container_group_profiles=None, elastic_profile=None, id=None, identity=None, location=None, name=None, placement_profile=None, provisioning_state=None, system_data=None, tags=None, type=None, update_profile=None, zones=None):
        if container_group_profiles and not isinstance(container_group_profiles, list):
            raise TypeError("Expected argument 'container_group_profiles' to be a list")
        pulumi.set(__self__, "container_group_profiles", container_group_profiles)
        if elastic_profile and not isinstance(elastic_profile, dict):
            raise TypeError("Expected argument 'elastic_profile' to be a dict")
        pulumi.set(__self__, "elastic_profile", elastic_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, dict):
            raise TypeError("Expected argument 'identity' to be a dict")
        pulumi.set(__self__, "identity", identity)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if placement_profile and not isinstance(placement_profile, dict):
            raise TypeError("Expected argument 'placement_profile' to be a dict")
        pulumi.set(__self__, "placement_profile", placement_profile)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_profile and not isinstance(update_profile, dict):
            raise TypeError("Expected argument 'update_profile' to be a dict")
        pulumi.set(__self__, "update_profile", update_profile)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="containerGroupProfiles")
    def container_group_profiles(self) -> Optional[Sequence['outputs.ContainerGroupProfileStubResponse']]:
        """
        The Container Group Profiles that could be used in the NGroups resource.
        """
        return pulumi.get(self, "container_group_profiles")

    @property
    @pulumi.getter(name="elasticProfile")
    def elastic_profile(self) -> Optional['outputs.ElasticProfileResponse']:
        """
        The elastic profile.
        """
        return pulumi.get(self, "elastic_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The resource id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identity(self) -> Optional['outputs.NGroupIdentityResponse']:
        """
        The identity of the NGroup, if configured.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="placementProfile")
    def placement_profile(self) -> Optional['outputs.PlacementProfileResponse']:
        """
        Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        """
        return pulumi.get(self, "placement_profile")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state, which only appears in the response.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateProfile")
    def update_profile(self) -> Optional['outputs.UpdateProfileResponse']:
        """
        Used by the customer to specify the way to update the Container Groups in NGroup.
        """
        return pulumi.get(self, "update_profile")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")


class AwaitableGetNGroupResult(GetNGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNGroupResult(
            container_group_profiles=self.container_group_profiles,
            elastic_profile=self.elastic_profile,
            id=self.id,
            identity=self.identity,
            location=self.location,
            name=self.name,
            placement_profile=self.placement_profile,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type,
            update_profile=self.update_profile,
            zones=self.zones)


def get_n_group(ngroups_name: Optional[str] = None,
                resource_group_name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNGroupResult:
    """
    Get the properties of the specified NGroups resource.


    :param str ngroups_name: The NGroups name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['ngroupsName'] = ngroups_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:containerinstance/v20241101preview:getNGroup', __args__, opts=opts, typ=GetNGroupResult).value

    return AwaitableGetNGroupResult(
        container_group_profiles=pulumi.get(__ret__, 'container_group_profiles'),
        elastic_profile=pulumi.get(__ret__, 'elastic_profile'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        placement_profile=pulumi.get(__ret__, 'placement_profile'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        update_profile=pulumi.get(__ret__, 'update_profile'),
        zones=pulumi.get(__ret__, 'zones'))
def get_n_group_output(ngroups_name: Optional[pulumi.Input[str]] = None,
                       resource_group_name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNGroupResult]:
    """
    Get the properties of the specified NGroups resource.


    :param str ngroups_name: The NGroups name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['ngroupsName'] = ngroups_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:containerinstance/v20241101preview:getNGroup', __args__, opts=opts, typ=GetNGroupResult)
    return __ret__.apply(lambda __response__: GetNGroupResult(
        container_group_profiles=pulumi.get(__response__, 'container_group_profiles'),
        elastic_profile=pulumi.get(__response__, 'elastic_profile'),
        id=pulumi.get(__response__, 'id'),
        identity=pulumi.get(__response__, 'identity'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        placement_profile=pulumi.get(__response__, 'placement_profile'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        update_profile=pulumi.get(__response__, 'update_profile'),
        zones=pulumi.get(__response__, 'zones')))
