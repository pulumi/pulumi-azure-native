# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NGroupArgs', 'NGroup']

@pulumi.input_type
class NGroupArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 container_group_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerGroupProfileStubArgs']]]] = None,
                 elastic_profile: Optional[pulumi.Input['ElasticProfileArgs']] = None,
                 identity: Optional[pulumi.Input['NGroupIdentityArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 ngroups_name: Optional[pulumi.Input[str]] = None,
                 placement_profile: Optional[pulumi.Input['PlacementProfileArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 update_profile: Optional[pulumi.Input['UpdateProfileArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NGroup resource.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerGroupProfileStubArgs']]] container_group_profiles: The Container Group Profiles that could be used in the NGroups resource.
        :param pulumi.Input['ElasticProfileArgs'] elastic_profile: The elastic profile.
        :param pulumi.Input['NGroupIdentityArgs'] identity: The identity of the NGroup, if configured.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] ngroups_name: The NGroups name.
        :param pulumi.Input['PlacementProfileArgs'] placement_profile: Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        :param pulumi.Input['UpdateProfileArgs'] update_profile: Used by the customer to specify the way to update the Container Groups in NGroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: The zones for the container group.
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if container_group_profiles is not None:
            pulumi.set(__self__, "container_group_profiles", container_group_profiles)
        if elastic_profile is not None:
            pulumi.set(__self__, "elastic_profile", elastic_profile)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if ngroups_name is not None:
            pulumi.set(__self__, "ngroups_name", ngroups_name)
        if placement_profile is not None:
            pulumi.set(__self__, "placement_profile", placement_profile)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_profile is not None:
            pulumi.set(__self__, "update_profile", update_profile)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="containerGroupProfiles")
    def container_group_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerGroupProfileStubArgs']]]]:
        """
        The Container Group Profiles that could be used in the NGroups resource.
        """
        return pulumi.get(self, "container_group_profiles")

    @container_group_profiles.setter
    def container_group_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerGroupProfileStubArgs']]]]):
        pulumi.set(self, "container_group_profiles", value)

    @property
    @pulumi.getter(name="elasticProfile")
    def elastic_profile(self) -> Optional[pulumi.Input['ElasticProfileArgs']]:
        """
        The elastic profile.
        """
        return pulumi.get(self, "elastic_profile")

    @elastic_profile.setter
    def elastic_profile(self, value: Optional[pulumi.Input['ElasticProfileArgs']]):
        pulumi.set(self, "elastic_profile", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input['NGroupIdentityArgs']]:
        """
        The identity of the NGroup, if configured.
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input['NGroupIdentityArgs']]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="ngroupsName")
    def ngroups_name(self) -> Optional[pulumi.Input[str]]:
        """
        The NGroups name.
        """
        return pulumi.get(self, "ngroups_name")

    @ngroups_name.setter
    def ngroups_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ngroups_name", value)

    @property
    @pulumi.getter(name="placementProfile")
    def placement_profile(self) -> Optional[pulumi.Input['PlacementProfileArgs']]:
        """
        Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        """
        return pulumi.get(self, "placement_profile")

    @placement_profile.setter
    def placement_profile(self, value: Optional[pulumi.Input['PlacementProfileArgs']]):
        pulumi.set(self, "placement_profile", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateProfile")
    def update_profile(self) -> Optional[pulumi.Input['UpdateProfileArgs']]:
        """
        Used by the customer to specify the way to update the Container Groups in NGroup.
        """
        return pulumi.get(self, "update_profile")

    @update_profile.setter
    def update_profile(self, value: Optional[pulumi.Input['UpdateProfileArgs']]):
        pulumi.set(self, "update_profile", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class NGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_group_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerGroupProfileStubArgs', 'ContainerGroupProfileStubArgsDict']]]]] = None,
                 elastic_profile: Optional[pulumi.Input[Union['ElasticProfileArgs', 'ElasticProfileArgsDict']]] = None,
                 identity: Optional[pulumi.Input[Union['NGroupIdentityArgs', 'NGroupIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 ngroups_name: Optional[pulumi.Input[str]] = None,
                 placement_profile: Optional[pulumi.Input[Union['PlacementProfileArgs', 'PlacementProfileArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 update_profile: Optional[pulumi.Input[Union['UpdateProfileArgs', 'UpdateProfileArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Describes the NGroups resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerGroupProfileStubArgs', 'ContainerGroupProfileStubArgsDict']]]] container_group_profiles: The Container Group Profiles that could be used in the NGroups resource.
        :param pulumi.Input[Union['ElasticProfileArgs', 'ElasticProfileArgsDict']] elastic_profile: The elastic profile.
        :param pulumi.Input[Union['NGroupIdentityArgs', 'NGroupIdentityArgsDict']] identity: The identity of the NGroup, if configured.
        :param pulumi.Input[str] location: The resource location.
        :param pulumi.Input[str] ngroups_name: The NGroups name.
        :param pulumi.Input[Union['PlacementProfileArgs', 'PlacementProfileArgsDict']] placement_profile: Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The resource tags.
        :param pulumi.Input[Union['UpdateProfileArgs', 'UpdateProfileArgsDict']] update_profile: Used by the customer to specify the way to update the Container Groups in NGroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: The zones for the container group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Describes the NGroups resource.

        :param str resource_name: The name of the resource.
        :param NGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_group_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerGroupProfileStubArgs', 'ContainerGroupProfileStubArgsDict']]]]] = None,
                 elastic_profile: Optional[pulumi.Input[Union['ElasticProfileArgs', 'ElasticProfileArgsDict']]] = None,
                 identity: Optional[pulumi.Input[Union['NGroupIdentityArgs', 'NGroupIdentityArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 ngroups_name: Optional[pulumi.Input[str]] = None,
                 placement_profile: Optional[pulumi.Input[Union['PlacementProfileArgs', 'PlacementProfileArgsDict']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 update_profile: Optional[pulumi.Input[Union['UpdateProfileArgs', 'UpdateProfileArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NGroupArgs.__new__(NGroupArgs)

            __props__.__dict__["container_group_profiles"] = container_group_profiles
            __props__.__dict__["elastic_profile"] = elastic_profile
            __props__.__dict__["identity"] = identity
            __props__.__dict__["location"] = location
            __props__.__dict__["ngroups_name"] = ngroups_name
            __props__.__dict__["placement_profile"] = placement_profile
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_profile"] = update_profile
            __props__.__dict__["zones"] = zones
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:containerinstance:NGroup"), pulumi.Alias(type_="azure-native:containerinstance/v20240901preview:NGroup")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NGroup, __self__).__init__(
            'azure-native:containerinstance/v20241101preview:NGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NGroup':
        """
        Get an existing NGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NGroupArgs.__new__(NGroupArgs)

        __props__.__dict__["container_group_profiles"] = None
        __props__.__dict__["elastic_profile"] = None
        __props__.__dict__["identity"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["placement_profile"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["update_profile"] = None
        __props__.__dict__["zones"] = None
        return NGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="containerGroupProfiles")
    def container_group_profiles(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerGroupProfileStubResponse']]]:
        """
        The Container Group Profiles that could be used in the NGroups resource.
        """
        return pulumi.get(self, "container_group_profiles")

    @property
    @pulumi.getter(name="elasticProfile")
    def elastic_profile(self) -> pulumi.Output[Optional['outputs.ElasticProfileResponse']]:
        """
        The elastic profile.
        """
        return pulumi.get(self, "elastic_profile")

    @property
    @pulumi.getter
    def identity(self) -> pulumi.Output[Optional['outputs.NGroupIdentityResponse']]:
        """
        The identity of the NGroup, if configured.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        The resource location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="placementProfile")
    def placement_profile(self) -> pulumi.Output[Optional['outputs.PlacementProfileResponse']]:
        """
        Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        """
        return pulumi.get(self, "placement_profile")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state, which only appears in the response.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Metadata pertaining to creation and last modification of the resource.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateProfile")
    def update_profile(self) -> pulumi.Output[Optional['outputs.UpdateProfileResponse']]:
        """
        Used by the customer to specify the way to update the Container Groups in NGroup.
        """
        return pulumi.get(self, "update_profile")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The zones for the container group.
        """
        return pulumi.get(self, "zones")

