# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApiEntityReferenceResponse',
    'ApplicationGatewayBackendAddressPoolResponse',
    'ApplicationGatewayResponse',
    'AzureFileVolumeResponse',
    'ConfidentialComputePropertiesResponse',
    'ContainerExecResponse',
    'ContainerGroupDiagnosticsResponse',
    'ContainerGroupIdentityResponse',
    'ContainerGroupProfileStubResponse',
    'ContainerGroupPropertiesResponseInstanceView',
    'ContainerGroupSubnetIdResponse',
    'ContainerHttpGetResponse',
    'ContainerPortResponse',
    'ContainerProbeResponse',
    'ContainerPropertiesResponseInstanceView',
    'ContainerResponse',
    'ContainerStateResponse',
    'DeploymentExtensionSpecResponse',
    'DnsConfigurationResponse',
    'ElasticProfileResponse',
    'ElasticProfileResponseContainerGroupNamingPolicy',
    'ElasticProfileResponseGuidNamingPolicy',
    'EncryptionPropertiesResponse',
    'EnvironmentVariableResponse',
    'EventResponse',
    'FileShareResponse',
    'FileShareResponseProperties',
    'GitRepoVolumeResponse',
    'GpuResourceResponse',
    'HttpHeaderResponse',
    'IdentityAccessControlResponse',
    'IdentityAclsResponse',
    'ImageRegistryCredentialResponse',
    'InitContainerDefinitionResponse',
    'InitContainerPropertiesDefinitionResponseInstanceView',
    'IpAddressResponse',
    'LoadBalancerBackendAddressPoolResponse',
    'LoadBalancerResponse',
    'LogAnalyticsResponse',
    'NGroupCGPropertyContainerResponse',
    'NGroupCGPropertyContainerResponseProperties',
    'NGroupCGPropertyVolumeResponse',
    'NGroupContainerGroupPropertiesResponse',
    'NGroupIdentityResponse',
    'NetworkProfileResponse',
    'PlacementProfileResponse',
    'PortResponse',
    'ResourceLimitsResponse',
    'ResourceRequestsResponse',
    'ResourceRequirementsResponse',
    'SecretReferenceResponse',
    'SecurityContextCapabilitiesDefinitionResponse',
    'SecurityContextDefinitionResponse',
    'StorageProfileResponse',
    'SystemDataResponse',
    'UpdateProfileResponse',
    'UpdateProfileResponseRollingUpdateProfile',
    'UserAssignedIdentitiesResponse',
    'VolumeMountResponse',
    'VolumeResponse',
]

@pulumi.output_type
class ApiEntityReferenceResponse(dict):
    """
    The API entity reference.
    """
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        The API entity reference.
        :param str id: The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ApplicationGatewayBackendAddressPoolResponse(dict):
    """
    NGroups application gateway backend address pool
    """
    def __init__(__self__, *,
                 resource: Optional[str] = None):
        """
        NGroups application gateway backend address pool
        :param str resource: The application gateway backend address pool ARM resource Id.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        The application gateway backend address pool ARM resource Id.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class ApplicationGatewayResponse(dict):
    """
    Application Gateway the CG profile will use to interact with CGs in a backend pool
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendAddressPools":
            suggest = "backend_address_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationGatewayResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationGatewayResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationGatewayResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_address_pools: Optional[Sequence['outputs.ApplicationGatewayBackendAddressPoolResponse']] = None,
                 resource: Optional[str] = None):
        """
        Application Gateway the CG profile will use to interact with CGs in a backend pool
        :param Sequence['ApplicationGatewayBackendAddressPoolResponse'] backend_address_pools: List of Application Gateway Backend Address Pools.
        :param str resource: The Application Gateway ARM resource Id.
        """
        if backend_address_pools is not None:
            pulumi.set(__self__, "backend_address_pools", backend_address_pools)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="backendAddressPools")
    def backend_address_pools(self) -> Optional[Sequence['outputs.ApplicationGatewayBackendAddressPoolResponse']]:
        """
        List of Application Gateway Backend Address Pools.
        """
        return pulumi.get(self, "backend_address_pools")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        The Application Gateway ARM resource Id.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class AzureFileVolumeResponse(dict):
    """
    The properties of the Azure File volume. Azure File shares are mounted as volumes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareName":
            suggest = "share_name"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "storageAccountKey":
            suggest = "storage_account_key"
        elif key == "storageAccountKeyReference":
            suggest = "storage_account_key_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureFileVolumeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureFileVolumeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureFileVolumeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_name: str,
                 storage_account_name: str,
                 read_only: Optional[bool] = None,
                 storage_account_key: Optional[str] = None,
                 storage_account_key_reference: Optional[str] = None):
        """
        The properties of the Azure File volume. Azure File shares are mounted as volumes.
        :param str share_name: The name of the Azure File share to be mounted as a volume.
        :param str storage_account_name: The name of the storage account that contains the Azure File share.
        :param bool read_only: The flag indicating whether the Azure File shared mounted as a volume is read-only.
        :param str storage_account_key: The storage account access key used to access the Azure File share.
        :param str storage_account_key_reference: The reference to the storage account access key used to access the Azure File share.
        """
        pulumi.set(__self__, "share_name", share_name)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if storage_account_key is not None:
            pulumi.set(__self__, "storage_account_key", storage_account_key)
        if storage_account_key_reference is not None:
            pulumi.set(__self__, "storage_account_key_reference", storage_account_key_reference)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> str:
        """
        The name of the Azure File share to be mounted as a volume.
        """
        return pulumi.get(self, "share_name")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        """
        The name of the storage account that contains the Azure File share.
        """
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        The flag indicating whether the Azure File shared mounted as a volume is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="storageAccountKey")
    def storage_account_key(self) -> Optional[str]:
        """
        The storage account access key used to access the Azure File share.
        """
        return pulumi.get(self, "storage_account_key")

    @property
    @pulumi.getter(name="storageAccountKeyReference")
    def storage_account_key_reference(self) -> Optional[str]:
        """
        The reference to the storage account access key used to access the Azure File share.
        """
        return pulumi.get(self, "storage_account_key_reference")


@pulumi.output_type
class ConfidentialComputePropertiesResponse(dict):
    """
    The properties for confidential container group
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ccePolicy":
            suggest = "cce_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfidentialComputePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfidentialComputePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfidentialComputePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cce_policy: Optional[str] = None):
        """
        The properties for confidential container group
        :param str cce_policy: The base64 encoded confidential compute enforcement policy
        """
        if cce_policy is not None:
            pulumi.set(__self__, "cce_policy", cce_policy)

    @property
    @pulumi.getter(name="ccePolicy")
    def cce_policy(self) -> Optional[str]:
        """
        The base64 encoded confidential compute enforcement policy
        """
        return pulumi.get(self, "cce_policy")


@pulumi.output_type
class ContainerExecResponse(dict):
    """
    The container execution command, for liveness or readiness probe
    """
    def __init__(__self__, *,
                 command: Optional[Sequence[str]] = None):
        """
        The container execution command, for liveness or readiness probe
        :param Sequence[str] command: The commands to execute within the container.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        The commands to execute within the container.
        """
        return pulumi.get(self, "command")


@pulumi.output_type
class ContainerGroupDiagnosticsResponse(dict):
    """
    Container group diagnostic information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logAnalytics":
            suggest = "log_analytics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerGroupDiagnosticsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerGroupDiagnosticsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerGroupDiagnosticsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_analytics: Optional['outputs.LogAnalyticsResponse'] = None):
        """
        Container group diagnostic information.
        :param 'LogAnalyticsResponse' log_analytics: Container group log analytics information.
        """
        if log_analytics is not None:
            pulumi.set(__self__, "log_analytics", log_analytics)

    @property
    @pulumi.getter(name="logAnalytics")
    def log_analytics(self) -> Optional['outputs.LogAnalyticsResponse']:
        """
        Container group log analytics information.
        """
        return pulumi.get(self, "log_analytics")


@pulumi.output_type
class ContainerGroupIdentityResponse(dict):
    """
    Identity for the container group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerGroupIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerGroupIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerGroupIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentitiesResponse']] = None):
        """
        Identity for the container group.
        :param str principal_id: The principal id of the container group identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant id associated with the container group. This property will only be provided for a system assigned identity.
        :param str type: The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
        :param Mapping[str, 'UserAssignedIdentitiesResponse'] user_assigned_identities: The list of user identities associated with the container group.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal id of the container group identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant id associated with the container group. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentitiesResponse']]:
        """
        The list of user identities associated with the container group.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ContainerGroupProfileStubResponse(dict):
    """
    The object that contains a reference to a Container Group Profile and it's other related properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerGroupProperties":
            suggest = "container_group_properties"
        elif key == "networkProfile":
            suggest = "network_profile"
        elif key == "storageProfile":
            suggest = "storage_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerGroupProfileStubResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerGroupProfileStubResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerGroupProfileStubResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_group_properties: Optional['outputs.NGroupContainerGroupPropertiesResponse'] = None,
                 network_profile: Optional['outputs.NetworkProfileResponse'] = None,
                 resource: Optional['outputs.ApiEntityReferenceResponse'] = None,
                 revision: Optional[int] = None,
                 storage_profile: Optional['outputs.StorageProfileResponse'] = None):
        """
        The object that contains a reference to a Container Group Profile and it's other related properties.
        :param 'NGroupContainerGroupPropertiesResponse' container_group_properties:  Container Group properties which can be set while creating or updating the NGroups.
        :param 'NetworkProfileResponse' network_profile: A network profile for network settings of a ContainerGroupProfile.
        :param 'ApiEntityReferenceResponse' resource: A reference to the container group profile ARM resource hosted in ACI RP.
        :param int revision: The revision of the CG profile is an optional property. If customer does not to provide a revision then NGroups will pickup the latest revision of CGProfile.
        :param 'StorageProfileResponse' storage_profile: Storage profile for storage related settings of a container group profile.
        """
        if container_group_properties is not None:
            pulumi.set(__self__, "container_group_properties", container_group_properties)
        if network_profile is not None:
            pulumi.set(__self__, "network_profile", network_profile)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter(name="containerGroupProperties")
    def container_group_properties(self) -> Optional['outputs.NGroupContainerGroupPropertiesResponse']:
        """
         Container Group properties which can be set while creating or updating the NGroups.
        """
        return pulumi.get(self, "container_group_properties")

    @property
    @pulumi.getter(name="networkProfile")
    def network_profile(self) -> Optional['outputs.NetworkProfileResponse']:
        """
        A network profile for network settings of a ContainerGroupProfile.
        """
        return pulumi.get(self, "network_profile")

    @property
    @pulumi.getter
    def resource(self) -> Optional['outputs.ApiEntityReferenceResponse']:
        """
        A reference to the container group profile ARM resource hosted in ACI RP.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        """
        The revision of the CG profile is an optional property. If customer does not to provide a revision then NGroups will pickup the latest revision of CGProfile.
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional['outputs.StorageProfileResponse']:
        """
        Storage profile for storage related settings of a container group profile.
        """
        return pulumi.get(self, "storage_profile")


@pulumi.output_type
class ContainerGroupPropertiesResponseInstanceView(dict):
    """
    The instance view of the container group. Only valid in response.
    """
    def __init__(__self__, *,
                 events: Sequence['outputs.EventResponse'],
                 state: str):
        """
        The instance view of the container group. Only valid in response.
        :param Sequence['EventResponse'] events: The events of this container group.
        :param str state: The state of the container group. Only valid in response.
        """
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.EventResponse']:
        """
        The events of this container group.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the container group. Only valid in response.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ContainerGroupSubnetIdResponse(dict):
    """
    Container group subnet information.
    """
    def __init__(__self__, *,
                 id: str,
                 name: Optional[str] = None):
        """
        Container group subnet information.
        :param str id: Resource ID of virtual network and subnet.
        :param str name: Friendly name for the subnet.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource ID of virtual network and subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Friendly name for the subnet.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContainerHttpGetResponse(dict):
    """
    The container Http Get settings, for liveness or readiness probe
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerHttpGetResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerHttpGetResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerHttpGetResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Sequence['outputs.HttpHeaderResponse']] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        """
        The container Http Get settings, for liveness or readiness probe
        :param int port: The port number to probe.
        :param Sequence['HttpHeaderResponse'] http_headers: The HTTP headers.
        :param str path: The path to probe.
        :param str scheme: The scheme.
        """
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number to probe.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.HttpHeaderResponse']]:
        """
        The HTTP headers.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path to probe.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        The scheme.
        """
        return pulumi.get(self, "scheme")


@pulumi.output_type
class ContainerPortResponse(dict):
    """
    The port exposed on the container instance.
    """
    def __init__(__self__, *,
                 port: int,
                 protocol: Optional[str] = None):
        """
        The port exposed on the container instance.
        :param int port: The port number exposed within the container group.
        :param str protocol: The protocol associated with the port.
        """
        pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number exposed within the container group.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol associated with the port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ContainerProbeResponse(dict):
    """
    The container probe, for liveness or readiness
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exec":
            suggest = "exec_"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerProbeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerProbeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerProbeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_: Optional['outputs.ContainerExecResponse'] = None,
                 failure_threshold: Optional[int] = None,
                 http_get: Optional['outputs.ContainerHttpGetResponse'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        The container probe, for liveness or readiness
        :param 'ContainerExecResponse' exec_: The execution command to probe
        :param int failure_threshold: The failure threshold.
        :param 'ContainerHttpGetResponse' http_get: The Http Get settings to probe
        :param int initial_delay_seconds: The initial delay seconds.
        :param int period_seconds: The period seconds.
        :param int success_threshold: The success threshold.
        :param int timeout_seconds: The timeout seconds.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional['outputs.ContainerExecResponse']:
        """
        The execution command to probe
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        The failure threshold.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.ContainerHttpGetResponse']:
        """
        The Http Get settings to probe
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        The initial delay seconds.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        The period seconds.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        The success threshold.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        The timeout seconds.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class ContainerPropertiesResponseInstanceView(dict):
    """
    The instance view of the container instance. Only valid in response.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentState":
            suggest = "current_state"
        elif key == "previousState":
            suggest = "previous_state"
        elif key == "restartCount":
            suggest = "restart_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerPropertiesResponseInstanceView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerPropertiesResponseInstanceView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerPropertiesResponseInstanceView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_state: 'outputs.ContainerStateResponse',
                 events: Sequence['outputs.EventResponse'],
                 previous_state: 'outputs.ContainerStateResponse',
                 restart_count: int):
        """
        The instance view of the container instance. Only valid in response.
        :param 'ContainerStateResponse' current_state: Current container instance state.
        :param Sequence['EventResponse'] events: The events of the container instance.
        :param 'ContainerStateResponse' previous_state: Previous container instance state.
        :param int restart_count: The number of times that the container instance has been restarted.
        """
        pulumi.set(__self__, "current_state", current_state)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "previous_state", previous_state)
        pulumi.set(__self__, "restart_count", restart_count)

    @property
    @pulumi.getter(name="currentState")
    def current_state(self) -> 'outputs.ContainerStateResponse':
        """
        Current container instance state.
        """
        return pulumi.get(self, "current_state")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.EventResponse']:
        """
        The events of the container instance.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="previousState")
    def previous_state(self) -> 'outputs.ContainerStateResponse':
        """
        Previous container instance state.
        """
        return pulumi.get(self, "previous_state")

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> int:
        """
        The number of times that the container instance has been restarted.
        """
        return pulumi.get(self, "restart_count")


@pulumi.output_type
class ContainerResponse(dict):
    """
    A container instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceView":
            suggest = "instance_view"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 instance_view: 'outputs.ContainerPropertiesResponseInstanceView',
                 name: str,
                 resources: 'outputs.ResourceRequirementsResponse',
                 command: Optional[Sequence[str]] = None,
                 environment_variables: Optional[Sequence['outputs.EnvironmentVariableResponse']] = None,
                 liveness_probe: Optional['outputs.ContainerProbeResponse'] = None,
                 ports: Optional[Sequence['outputs.ContainerPortResponse']] = None,
                 readiness_probe: Optional['outputs.ContainerProbeResponse'] = None,
                 security_context: Optional['outputs.SecurityContextDefinitionResponse'] = None,
                 volume_mounts: Optional[Sequence['outputs.VolumeMountResponse']] = None):
        """
        A container instance.
        :param str image: The name of the image used to create the container instance.
        :param 'ContainerPropertiesResponseInstanceView' instance_view: The instance view of the container instance. Only valid in response.
        :param str name: The user-provided name of the container instance.
        :param 'ResourceRequirementsResponse' resources: The resource requirements of the container instance.
        :param Sequence[str] command: The commands to execute within the container instance in exec form.
        :param Sequence['EnvironmentVariableResponse'] environment_variables: The environment variables to set in the container instance.
        :param 'ContainerProbeResponse' liveness_probe: The liveness probe.
        :param Sequence['ContainerPortResponse'] ports: The exposed ports on the container instance.
        :param 'ContainerProbeResponse' readiness_probe: The readiness probe.
        :param 'SecurityContextDefinitionResponse' security_context: The container security properties.
        :param Sequence['VolumeMountResponse'] volume_mounts: The volume mounts available to the container instance.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "instance_view", instance_view)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The name of the image used to create the container instance.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceView")
    def instance_view(self) -> 'outputs.ContainerPropertiesResponseInstanceView':
        """
        The instance view of the container instance. Only valid in response.
        """
        return pulumi.get(self, "instance_view")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The user-provided name of the container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.ResourceRequirementsResponse':
        """
        The resource requirements of the container instance.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        The commands to execute within the container instance in exec form.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Sequence['outputs.EnvironmentVariableResponse']]:
        """
        The environment variables to set in the container instance.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ContainerProbeResponse']:
        """
        The liveness probe.
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.ContainerPortResponse']]:
        """
        The exposed ports on the container instance.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ContainerProbeResponse']:
        """
        The readiness probe.
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.SecurityContextDefinitionResponse']:
        """
        The container security properties.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.VolumeMountResponse']]:
        """
        The volume mounts available to the container instance.
        """
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class ContainerStateResponse(dict):
    """
    The container instance state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detailStatus":
            suggest = "detail_status"
        elif key == "exitCode":
            suggest = "exit_code"
        elif key == "finishTime":
            suggest = "finish_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerStateResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerStateResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerStateResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detail_status: str,
                 exit_code: int,
                 finish_time: str,
                 start_time: str,
                 state: str):
        """
        The container instance state.
        :param str detail_status: The human-readable status of the container instance state.
        :param int exit_code: The container instance exit codes correspond to those from the `docker run` command.
        :param str finish_time: The date-time when the container instance state finished.
        :param str start_time: The date-time when the container instance state started.
        :param str state: The state of the container instance.
        """
        pulumi.set(__self__, "detail_status", detail_status)
        pulumi.set(__self__, "exit_code", exit_code)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="detailStatus")
    def detail_status(self) -> str:
        """
        The human-readable status of the container instance state.
        """
        return pulumi.get(self, "detail_status")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        The container instance exit codes correspond to those from the `docker run` command.
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        The date-time when the container instance state finished.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The date-time when the container instance state started.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the container instance.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class DeploymentExtensionSpecResponse(dict):
    """
    Extension sidecars to be added to the deployment.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionType":
            suggest = "extension_type"
        elif key == "protectedSettings":
            suggest = "protected_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentExtensionSpecResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentExtensionSpecResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentExtensionSpecResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extension_type: str,
                 name: str,
                 version: str,
                 protected_settings: Optional[Any] = None,
                 settings: Optional[Any] = None):
        """
        Extension sidecars to be added to the deployment.
        :param str extension_type: Type of extension to be added.
        :param str name: Name of the extension.
        :param str version: Version of the extension being used.
        :param Any protected_settings: Protected settings for the extension.
        :param Any settings: Settings for the extension.
        """
        pulumi.set(__self__, "extension_type", extension_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)
        if protected_settings is not None:
            pulumi.set(__self__, "protected_settings", protected_settings)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="extensionType")
    def extension_type(self) -> str:
        """
        Type of extension to be added.
        """
        return pulumi.get(self, "extension_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the extension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the extension being used.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="protectedSettings")
    def protected_settings(self) -> Optional[Any]:
        """
        Protected settings for the extension.
        """
        return pulumi.get(self, "protected_settings")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Any]:
        """
        Settings for the extension.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class DnsConfigurationResponse(dict):
    """
    DNS configuration for the container group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameServers":
            suggest = "name_servers"
        elif key == "searchDomains":
            suggest = "search_domains"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name_servers: Sequence[str],
                 options: Optional[str] = None,
                 search_domains: Optional[str] = None):
        """
        DNS configuration for the container group.
        :param Sequence[str] name_servers: The DNS servers for the container group.
        :param str options: The DNS options for the container group.
        :param str search_domains: The DNS search domains for hostname lookup in the container group.
        """
        pulumi.set(__self__, "name_servers", name_servers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if search_domains is not None:
            pulumi.set(__self__, "search_domains", search_domains)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Sequence[str]:
        """
        The DNS servers for the container group.
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        The DNS options for the container group.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="searchDomains")
    def search_domains(self) -> Optional[str]:
        """
        The DNS search domains for hostname lookup in the container group.
        """
        return pulumi.get(self, "search_domains")


@pulumi.output_type
class ElasticProfileResponse(dict):
    """
    Describes the elastic profile of the NGroup
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerGroupNamingPolicy":
            suggest = "container_group_naming_policy"
        elif key == "desiredCount":
            suggest = "desired_count"
        elif key == "maintainDesiredCount":
            suggest = "maintain_desired_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_group_naming_policy: Optional['outputs.ElasticProfileResponseContainerGroupNamingPolicy'] = None,
                 desired_count: Optional[int] = None,
                 maintain_desired_count: Optional[bool] = None):
        """
        Describes the elastic profile of the NGroup
        :param 'ElasticProfileResponseContainerGroupNamingPolicy' container_group_naming_policy: Container Groups are named on a generic guid based naming scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
        :param bool maintain_desired_count: Flag that indicates whether desiredCount should be maintained when customer deletes SPECIFIC container groups (CGs) from the NGroups. In this case, new CGs will be created by NGroup to compensate for the specific deleted ones.
        """
        if container_group_naming_policy is not None:
            pulumi.set(__self__, "container_group_naming_policy", container_group_naming_policy)
        if desired_count is not None:
            pulumi.set(__self__, "desired_count", desired_count)
        if maintain_desired_count is not None:
            pulumi.set(__self__, "maintain_desired_count", maintain_desired_count)

    @property
    @pulumi.getter(name="containerGroupNamingPolicy")
    def container_group_naming_policy(self) -> Optional['outputs.ElasticProfileResponseContainerGroupNamingPolicy']:
        """
        Container Groups are named on a generic guid based naming scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
        """
        return pulumi.get(self, "container_group_naming_policy")

    @property
    @pulumi.getter(name="desiredCount")
    def desired_count(self) -> Optional[int]:
        return pulumi.get(self, "desired_count")

    @property
    @pulumi.getter(name="maintainDesiredCount")
    def maintain_desired_count(self) -> Optional[bool]:
        """
        Flag that indicates whether desiredCount should be maintained when customer deletes SPECIFIC container groups (CGs) from the NGroups. In this case, new CGs will be created by NGroup to compensate for the specific deleted ones.
        """
        return pulumi.get(self, "maintain_desired_count")


@pulumi.output_type
class ElasticProfileResponseContainerGroupNamingPolicy(dict):
    """
    Container Groups are named on a generic guid based naming scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "guidNamingPolicy":
            suggest = "guid_naming_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElasticProfileResponseContainerGroupNamingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElasticProfileResponseContainerGroupNamingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElasticProfileResponseContainerGroupNamingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 guid_naming_policy: Optional['outputs.ElasticProfileResponseGuidNamingPolicy'] = None):
        """
        Container Groups are named on a generic guid based naming scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
        """
        if guid_naming_policy is not None:
            pulumi.set(__self__, "guid_naming_policy", guid_naming_policy)

    @property
    @pulumi.getter(name="guidNamingPolicy")
    def guid_naming_policy(self) -> Optional['outputs.ElasticProfileResponseGuidNamingPolicy']:
        return pulumi.get(self, "guid_naming_policy")


@pulumi.output_type
class ElasticProfileResponseGuidNamingPolicy(dict):
    def __init__(__self__, *,
                 prefix: Optional[str] = None):
        """
        :param str prefix: The prefix can be used when there are tooling limitations (e.g. on the Azure portal where CGs from multiple NGroups exist in the same RG). The prefix with the suffixed resource name must still follow Azure resource naming guidelines.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The prefix can be used when there are tooling limitations (e.g. on the Azure portal where CGs from multiple NGroups exist in the same RG). The prefix with the suffixed resource name must still follow Azure resource naming guidelines.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class EncryptionPropertiesResponse(dict):
    """
    The container group encryption properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyName":
            suggest = "key_name"
        elif key == "keyVersion":
            suggest = "key_version"
        elif key == "vaultBaseUrl":
            suggest = "vault_base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_name: str,
                 key_version: str,
                 vault_base_url: str,
                 identity: Optional[str] = None):
        """
        The container group encryption properties.
        :param str key_name: The encryption key name.
        :param str key_version: The encryption key version.
        :param str vault_base_url: The keyvault base url.
        :param str identity: The keyvault managed identity.
        """
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "key_version", key_version)
        pulumi.set(__self__, "vault_base_url", vault_base_url)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        """
        The encryption key name.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> str:
        """
        The encryption key version.
        """
        return pulumi.get(self, "key_version")

    @property
    @pulumi.getter(name="vaultBaseUrl")
    def vault_base_url(self) -> str:
        """
        The keyvault base url.
        """
        return pulumi.get(self, "vault_base_url")

    @property
    @pulumi.getter
    def identity(self) -> Optional[str]:
        """
        The keyvault managed identity.
        """
        return pulumi.get(self, "identity")


@pulumi.output_type
class EnvironmentVariableResponse(dict):
    """
    The environment variable to set within the container instance.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureValue":
            suggest = "secure_value"
        elif key == "secureValueReference":
            suggest = "secure_value_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentVariableResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentVariableResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentVariableResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secure_value: Optional[str] = None,
                 secure_value_reference: Optional[str] = None,
                 value: Optional[str] = None):
        """
        The environment variable to set within the container instance.
        :param str name: The name of the environment variable.
        :param str secure_value: The value of the secure environment variable.
        :param str secure_value_reference: The reference of the secure environment variable.
        :param str value: The value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        if secure_value is not None:
            pulumi.set(__self__, "secure_value", secure_value)
        if secure_value_reference is not None:
            pulumi.set(__self__, "secure_value_reference", secure_value_reference)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secureValue")
    def secure_value(self) -> Optional[str]:
        """
        The value of the secure environment variable.
        """
        return pulumi.get(self, "secure_value")

    @property
    @pulumi.getter(name="secureValueReference")
    def secure_value_reference(self) -> Optional[str]:
        """
        The reference of the secure environment variable.
        """
        return pulumi.get(self, "secure_value_reference")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EventResponse(dict):
    """
    A container group or container instance event.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstTimestamp":
            suggest = "first_timestamp"
        elif key == "lastTimestamp":
            suggest = "last_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EventResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EventResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EventResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 first_timestamp: str,
                 last_timestamp: str,
                 message: str,
                 name: str,
                 type: str):
        """
        A container group or container instance event.
        :param int count: The count of the event.
        :param str first_timestamp: The date-time of the earliest logged event.
        :param str last_timestamp: The date-time of the latest logged event.
        :param str message: The event message.
        :param str name: The event name.
        :param str type: The event type.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "first_timestamp", first_timestamp)
        pulumi.set(__self__, "last_timestamp", last_timestamp)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of the event.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="firstTimestamp")
    def first_timestamp(self) -> str:
        """
        The date-time of the earliest logged event.
        """
        return pulumi.get(self, "first_timestamp")

    @property
    @pulumi.getter(name="lastTimestamp")
    def last_timestamp(self) -> str:
        """
        The date-time of the latest logged event.
        """
        return pulumi.get(self, "last_timestamp")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        The event message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The event name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The event type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FileShareResponse(dict):
    """
    File shares that can be mounted on container groups.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "storageAccountName":
            suggest = "storage_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileShareResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileShareResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileShareResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 properties: Optional['outputs.FileShareResponseProperties'] = None,
                 resource_group_name: Optional[str] = None,
                 storage_account_name: Optional[str] = None):
        """
        File shares that can be mounted on container groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.FileShareResponseProperties']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")


@pulumi.output_type
class FileShareResponseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareAccessTier":
            suggest = "share_access_tier"
        elif key == "shareAccessType":
            suggest = "share_access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileShareResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileShareResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileShareResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_access_tier: Optional[str] = None,
                 share_access_type: Optional[str] = None):
        """
        :param str share_access_tier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Learn more at: https://learn.microsoft.com/en-us/rest/api/storagerp/file-shares/create?tabs=HTTP#shareaccesstier
        :param str share_access_type:  Specifies how Container Groups can access the Azure file share i.e. all CG will share same Azure file share or going to have exclusive file share.
        """
        if share_access_tier is None:
            share_access_tier = 'TransactionOptimized'
        if share_access_tier is not None:
            pulumi.set(__self__, "share_access_tier", share_access_tier)
        if share_access_type is not None:
            pulumi.set(__self__, "share_access_type", share_access_type)

    @property
    @pulumi.getter(name="shareAccessTier")
    def share_access_tier(self) -> Optional[str]:
        """
        Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Learn more at: https://learn.microsoft.com/en-us/rest/api/storagerp/file-shares/create?tabs=HTTP#shareaccesstier
        """
        return pulumi.get(self, "share_access_tier")

    @property
    @pulumi.getter(name="shareAccessType")
    def share_access_type(self) -> Optional[str]:
        """
         Specifies how Container Groups can access the Azure file share i.e. all CG will share same Azure file share or going to have exclusive file share.
        """
        return pulumi.get(self, "share_access_type")


@pulumi.output_type
class GitRepoVolumeResponse(dict):
    """
    Represents a volume that is populated with the contents of a git repository
    """
    def __init__(__self__, *,
                 repository: str,
                 directory: Optional[str] = None,
                 revision: Optional[str] = None):
        """
        Represents a volume that is populated with the contents of a git repository
        :param str repository: Repository URL
        :param str directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param str revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def revision(self) -> Optional[str]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")


@pulumi.output_type
class GpuResourceResponse(dict):
    """
    The GPU resource.
    """
    def __init__(__self__, *,
                 count: int,
                 sku: str):
        """
        The GPU resource.
        :param int count: The count of the GPU resource.
        :param str sku: The SKU of the GPU resource.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The count of the GPU resource.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The SKU of the GPU resource.
        """
        return pulumi.get(self, "sku")


@pulumi.output_type
class HttpHeaderResponse(dict):
    """
    The HTTP header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        The HTTP header.
        :param str name: The header name.
        :param str value: The header value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The header name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IdentityAccessControlResponse(dict):
    """
    The access control for an identity
    """
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 identity: Optional[str] = None):
        """
        The access control for an identity
        :param str access: The access level of the identity.
        :param str identity: An identity.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        The access level of the identity.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def identity(self) -> Optional[str]:
        """
        An identity.
        """
        return pulumi.get(self, "identity")


@pulumi.output_type
class IdentityAclsResponse(dict):
    """
    The access control levels of the identities.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultAccess":
            suggest = "default_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityAclsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityAclsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityAclsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acls: Optional[Sequence['outputs.IdentityAccessControlResponse']] = None,
                 default_access: Optional[str] = None):
        """
        The access control levels of the identities.
        :param Sequence['IdentityAccessControlResponse'] acls: The access control levels for each identity.
        :param str default_access: The default access level.
        """
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if default_access is not None:
            pulumi.set(__self__, "default_access", default_access)

    @property
    @pulumi.getter
    def acls(self) -> Optional[Sequence['outputs.IdentityAccessControlResponse']]:
        """
        The access control levels for each identity.
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter(name="defaultAccess")
    def default_access(self) -> Optional[str]:
        """
        The default access level.
        """
        return pulumi.get(self, "default_access")


@pulumi.output_type
class ImageRegistryCredentialResponse(dict):
    """
    Image registry credential.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityUrl":
            suggest = "identity_url"
        elif key == "passwordReference":
            suggest = "password_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageRegistryCredentialResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageRegistryCredentialResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageRegistryCredentialResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server: str,
                 identity: Optional[str] = None,
                 identity_url: Optional[str] = None,
                 password: Optional[str] = None,
                 password_reference: Optional[str] = None,
                 username: Optional[str] = None):
        """
        Image registry credential.
        :param str server: The Docker image registry server without a protocol such as "http" and "https".
        :param str identity: The identity for the private registry.
        :param str identity_url: The identity URL for the private registry.
        :param str password: The password for the private registry.
        :param str password_reference: The reference for the private registry password.
        :param str username: The username for the private registry.
        """
        pulumi.set(__self__, "server", server)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if identity_url is not None:
            pulumi.set(__self__, "identity_url", identity_url)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_reference is not None:
            pulumi.set(__self__, "password_reference", password_reference)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        The Docker image registry server without a protocol such as "http" and "https".
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def identity(self) -> Optional[str]:
        """
        The identity for the private registry.
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter(name="identityUrl")
    def identity_url(self) -> Optional[str]:
        """
        The identity URL for the private registry.
        """
        return pulumi.get(self, "identity_url")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password for the private registry.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordReference")
    def password_reference(self) -> Optional[str]:
        """
        The reference for the private registry password.
        """
        return pulumi.get(self, "password_reference")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username for the private registry.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class InitContainerDefinitionResponse(dict):
    """
    The init container definition.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceView":
            suggest = "instance_view"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InitContainerDefinitionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InitContainerDefinitionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InitContainerDefinitionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_view: 'outputs.InitContainerPropertiesDefinitionResponseInstanceView',
                 name: str,
                 command: Optional[Sequence[str]] = None,
                 environment_variables: Optional[Sequence['outputs.EnvironmentVariableResponse']] = None,
                 image: Optional[str] = None,
                 security_context: Optional['outputs.SecurityContextDefinitionResponse'] = None,
                 volume_mounts: Optional[Sequence['outputs.VolumeMountResponse']] = None):
        """
        The init container definition.
        :param 'InitContainerPropertiesDefinitionResponseInstanceView' instance_view: The instance view of the init container. Only valid in response.
        :param str name: The name for the init container.
        :param Sequence[str] command: The command to execute within the init container in exec form.
        :param Sequence['EnvironmentVariableResponse'] environment_variables: The environment variables to set in the init container.
        :param str image: The image of the init container.
        :param 'SecurityContextDefinitionResponse' security_context: The container security properties.
        :param Sequence['VolumeMountResponse'] volume_mounts: The volume mounts available to the init container.
        """
        pulumi.set(__self__, "instance_view", instance_view)
        pulumi.set(__self__, "name", name)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter(name="instanceView")
    def instance_view(self) -> 'outputs.InitContainerPropertiesDefinitionResponseInstanceView':
        """
        The instance view of the init container. Only valid in response.
        """
        return pulumi.get(self, "instance_view")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the init container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        """
        The command to execute within the init container in exec form.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Sequence['outputs.EnvironmentVariableResponse']]:
        """
        The environment variables to set in the init container.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        The image of the init container.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.SecurityContextDefinitionResponse']:
        """
        The container security properties.
        """
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.VolumeMountResponse']]:
        """
        The volume mounts available to the init container.
        """
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class InitContainerPropertiesDefinitionResponseInstanceView(dict):
    """
    The instance view of the init container. Only valid in response.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentState":
            suggest = "current_state"
        elif key == "previousState":
            suggest = "previous_state"
        elif key == "restartCount":
            suggest = "restart_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InitContainerPropertiesDefinitionResponseInstanceView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InitContainerPropertiesDefinitionResponseInstanceView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InitContainerPropertiesDefinitionResponseInstanceView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_state: 'outputs.ContainerStateResponse',
                 events: Sequence['outputs.EventResponse'],
                 previous_state: 'outputs.ContainerStateResponse',
                 restart_count: int):
        """
        The instance view of the init container. Only valid in response.
        :param 'ContainerStateResponse' current_state: The current state of the init container.
        :param Sequence['EventResponse'] events: The events of the init container.
        :param 'ContainerStateResponse' previous_state: The previous state of the init container.
        :param int restart_count: The number of times that the init container has been restarted.
        """
        pulumi.set(__self__, "current_state", current_state)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "previous_state", previous_state)
        pulumi.set(__self__, "restart_count", restart_count)

    @property
    @pulumi.getter(name="currentState")
    def current_state(self) -> 'outputs.ContainerStateResponse':
        """
        The current state of the init container.
        """
        return pulumi.get(self, "current_state")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.EventResponse']:
        """
        The events of the init container.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="previousState")
    def previous_state(self) -> 'outputs.ContainerStateResponse':
        """
        The previous state of the init container.
        """
        return pulumi.get(self, "previous_state")

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> int:
        """
        The number of times that the init container has been restarted.
        """
        return pulumi.get(self, "restart_count")


@pulumi.output_type
class IpAddressResponse(dict):
    """
    IP address for the container group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoGeneratedDomainNameLabelScope":
            suggest = "auto_generated_domain_name_label_scope"
        elif key == "dnsNameLabel":
            suggest = "dns_name_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpAddressResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpAddressResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpAddressResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 ports: Sequence['outputs.PortResponse'],
                 type: str,
                 auto_generated_domain_name_label_scope: Optional[str] = None,
                 dns_name_label: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        IP address for the container group.
        :param str fqdn: The FQDN for the IP.
        :param Sequence['PortResponse'] ports: The list of ports exposed on the container group.
        :param str type: Specifies if the IP is exposed to the public internet or private VNET.
        :param str auto_generated_domain_name_label_scope: The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
        :param str dns_name_label: The Dns name label for the IP.
        :param str ip: The IP exposed to the public internet.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "type", type)
        if auto_generated_domain_name_label_scope is None:
            auto_generated_domain_name_label_scope = 'Unsecure'
        if auto_generated_domain_name_label_scope is not None:
            pulumi.set(__self__, "auto_generated_domain_name_label_scope", auto_generated_domain_name_label_scope)
        if dns_name_label is not None:
            pulumi.set(__self__, "dns_name_label", dns_name_label)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        The FQDN for the IP.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.PortResponse']:
        """
        The list of ports exposed on the container group.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specifies if the IP is exposed to the public internet or private VNET.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="autoGeneratedDomainNameLabelScope")
    def auto_generated_domain_name_label_scope(self) -> Optional[str]:
        """
        The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
        """
        return pulumi.get(self, "auto_generated_domain_name_label_scope")

    @property
    @pulumi.getter(name="dnsNameLabel")
    def dns_name_label(self) -> Optional[str]:
        """
        The Dns name label for the IP.
        """
        return pulumi.get(self, "dns_name_label")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP exposed to the public internet.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class LoadBalancerBackendAddressPoolResponse(dict):
    """
    NGroups load balancer backend address pool
    """
    def __init__(__self__, *,
                 resource: Optional[str] = None):
        """
        NGroups load balancer backend address pool
        :param str resource: The Load Balancer backend address pool ARM resource Id.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        The Load Balancer backend address pool ARM resource Id.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class LoadBalancerResponse(dict):
    """
    LoadBalancer the CG profile will use to interact with CGs in a backend pool
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendAddressPools":
            suggest = "backend_address_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_address_pools: Optional[Sequence['outputs.LoadBalancerBackendAddressPoolResponse']] = None):
        """
        LoadBalancer the CG profile will use to interact with CGs in a backend pool
        :param Sequence['LoadBalancerBackendAddressPoolResponse'] backend_address_pools: List of Load Balancer Backend Address Pools.
        """
        if backend_address_pools is not None:
            pulumi.set(__self__, "backend_address_pools", backend_address_pools)

    @property
    @pulumi.getter(name="backendAddressPools")
    def backend_address_pools(self) -> Optional[Sequence['outputs.LoadBalancerBackendAddressPoolResponse']]:
        """
        List of Load Balancer Backend Address Pools.
        """
        return pulumi.get(self, "backend_address_pools")


@pulumi.output_type
class LogAnalyticsResponse(dict):
    """
    Container group log analytics information.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workspaceId":
            suggest = "workspace_id"
        elif key == "workspaceKey":
            suggest = "workspace_key"
        elif key == "logType":
            suggest = "log_type"
        elif key == "workspaceResourceId":
            suggest = "workspace_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogAnalyticsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogAnalyticsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogAnalyticsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 workspace_id: str,
                 workspace_key: str,
                 log_type: Optional[str] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 workspace_resource_id: Optional[str] = None):
        """
        Container group log analytics information.
        :param str workspace_id: The workspace id for log analytics
        :param str workspace_key: The workspace key for log analytics
        :param str log_type: The log type to be used.
        :param Mapping[str, str] metadata: Metadata for log analytics.
        :param str workspace_resource_id: The workspace resource id for log analytics
        """
        pulumi.set(__self__, "workspace_id", workspace_id)
        pulumi.set(__self__, "workspace_key", workspace_key)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if workspace_resource_id is not None:
            pulumi.set(__self__, "workspace_resource_id", workspace_resource_id)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace id for log analytics
        """
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="workspaceKey")
    def workspace_key(self) -> str:
        """
        The workspace key for log analytics
        """
        return pulumi.get(self, "workspace_key")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[str]:
        """
        The log type to be used.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        Metadata for log analytics.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="workspaceResourceId")
    def workspace_resource_id(self) -> Optional[str]:
        """
        The workspace resource id for log analytics
        """
        return pulumi.get(self, "workspace_resource_id")


@pulumi.output_type
class NGroupCGPropertyContainerResponse(dict):
    """
    Container properties that can be provided with NGroups object.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 properties: Optional['outputs.NGroupCGPropertyContainerResponseProperties'] = None):
        """
        Container properties that can be provided with NGroups object.
        :param str name: container name
        :param 'NGroupCGPropertyContainerResponseProperties' properties: container properties
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        container name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.NGroupCGPropertyContainerResponseProperties']:
        """
        container properties
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class NGroupCGPropertyContainerResponseProperties(dict):
    """
    container properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NGroupCGPropertyContainerResponseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NGroupCGPropertyContainerResponseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NGroupCGPropertyContainerResponseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volume_mounts: Optional[Sequence['outputs.VolumeMountResponse']] = None):
        """
        container properties
        """
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.VolumeMountResponse']]:
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class NGroupCGPropertyVolumeResponse(dict):
    """
    Contains information about the volumes that can be mounted by Containers in the Container Groups.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFile":
            suggest = "azure_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NGroupCGPropertyVolumeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NGroupCGPropertyVolumeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NGroupCGPropertyVolumeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 azure_file: Optional['outputs.AzureFileVolumeResponse'] = None):
        """
        Contains information about the volumes that can be mounted by Containers in the Container Groups.
        :param str name: The name of the volume.
        :param 'AzureFileVolumeResponse' azure_file: The Azure File volume.
        """
        pulumi.set(__self__, "name", name)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.AzureFileVolumeResponse']:
        """
        The Azure File volume.
        """
        return pulumi.get(self, "azure_file")


@pulumi.output_type
class NGroupContainerGroupPropertiesResponse(dict):
    """
    Container Group properties which can be set while creating or updating the NGroups.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NGroupContainerGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NGroupContainerGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NGroupContainerGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Optional[Sequence['outputs.NGroupCGPropertyContainerResponse']] = None,
                 subnet_ids: Optional[Sequence['outputs.ContainerGroupSubnetIdResponse']] = None,
                 volumes: Optional[Sequence['outputs.NGroupCGPropertyVolumeResponse']] = None):
        """
        Container Group properties which can be set while creating or updating the NGroups.
        :param Sequence['NGroupCGPropertyContainerResponse'] containers: Contains information about Container which can be set while creating or updating the NGroups.
        :param Sequence['ContainerGroupSubnetIdResponse'] subnet_ids: Contains information about Virtual Network Subnet ARM Resource
        :param Sequence['NGroupCGPropertyVolumeResponse'] volumes: Contains information about the volumes that can be mounted by Containers in the Container Groups.
        """
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.NGroupCGPropertyContainerResponse']]:
        """
        Contains information about Container which can be set while creating or updating the NGroups.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence['outputs.ContainerGroupSubnetIdResponse']]:
        """
        Contains information about Virtual Network Subnet ARM Resource
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.NGroupCGPropertyVolumeResponse']]:
        """
        Contains information about the volumes that can be mounted by Containers in the Container Groups.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class NGroupIdentityResponse(dict):
    """
    Identity for the NGroup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NGroupIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NGroupIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NGroupIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: Optional[str] = None,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentitiesResponse']] = None):
        """
        Identity for the NGroup.
        :param str principal_id: The principal id of the NGroup identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant id associated with the NGroup. This property will only be provided for a system assigned identity.
        :param str type: The type of identity used for the NGroup. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the NGroup.
        :param Mapping[str, 'UserAssignedIdentitiesResponse'] user_assigned_identities: The list of user identities associated with the NGroup.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal id of the NGroup identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant id associated with the NGroup. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of identity used for the NGroup. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the NGroup.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentitiesResponse']]:
        """
        The list of user identities associated with the NGroup.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class NetworkProfileResponse(dict):
    """
    A network profile for network settings of a ContainerGroupProfile. Used to manage load balancer and application gateway backend pools, specifically updating the IP addresses of CGs within the backend pool.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationGateway":
            suggest = "application_gateway"
        elif key == "loadBalancer":
            suggest = "load_balancer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_gateway: Optional['outputs.ApplicationGatewayResponse'] = None,
                 load_balancer: Optional['outputs.LoadBalancerResponse'] = None):
        """
        A network profile for network settings of a ContainerGroupProfile. Used to manage load balancer and application gateway backend pools, specifically updating the IP addresses of CGs within the backend pool.
        :param 'ApplicationGatewayResponse' application_gateway: Application Gateway the CG profile will use to interact with CGs in a backend pool
        :param 'LoadBalancerResponse' load_balancer: LoadBalancer the CG profile will use to interact with CGs in a backend pool
        """
        if application_gateway is not None:
            pulumi.set(__self__, "application_gateway", application_gateway)
        if load_balancer is not None:
            pulumi.set(__self__, "load_balancer", load_balancer)

    @property
    @pulumi.getter(name="applicationGateway")
    def application_gateway(self) -> Optional['outputs.ApplicationGatewayResponse']:
        """
        Application Gateway the CG profile will use to interact with CGs in a backend pool
        """
        return pulumi.get(self, "application_gateway")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional['outputs.LoadBalancerResponse']:
        """
        LoadBalancer the CG profile will use to interact with CGs in a backend pool
        """
        return pulumi.get(self, "load_balancer")


@pulumi.output_type
class PlacementProfileResponse(dict):
    """
    Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "faultDomainCount":
            suggest = "fault_domain_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlacementProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlacementProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlacementProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fault_domain_count: Optional[int] = None):
        """
        Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g., distributing CGs across fault domains.
        :param int fault_domain_count: The number of fault domains to be used to spread CGs in the NGroups resource. This can only be specified during NGroup creation and is immutable after that.
        """
        if fault_domain_count is not None:
            pulumi.set(__self__, "fault_domain_count", fault_domain_count)

    @property
    @pulumi.getter(name="faultDomainCount")
    def fault_domain_count(self) -> Optional[int]:
        """
        The number of fault domains to be used to spread CGs in the NGroups resource. This can only be specified during NGroup creation and is immutable after that.
        """
        return pulumi.get(self, "fault_domain_count")


@pulumi.output_type
class PortResponse(dict):
    """
    The port exposed on the container group.
    """
    def __init__(__self__, *,
                 port: int,
                 protocol: Optional[str] = None):
        """
        The port exposed on the container group.
        :param int port: The port number.
        :param str protocol: The protocol associated with the port.
        """
        pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol associated with the port.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ResourceLimitsResponse(dict):
    """
    The resource limits.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGB":
            suggest = "memory_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceLimitsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceLimitsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceLimitsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[float] = None,
                 gpu: Optional['outputs.GpuResourceResponse'] = None,
                 memory_in_gb: Optional[float] = None):
        """
        The resource limits.
        :param float cpu: The CPU limit of this container instance.
        :param 'GpuResourceResponse' gpu: The GPU limit of this container instance.
        :param float memory_in_gb: The memory limit in GB of this container instance.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if memory_in_gb is not None:
            pulumi.set(__self__, "memory_in_gb", memory_in_gb)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[float]:
        """
        The CPU limit of this container instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def gpu(self) -> Optional['outputs.GpuResourceResponse']:
        """
        The GPU limit of this container instance.
        """
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter(name="memoryInGB")
    def memory_in_gb(self) -> Optional[float]:
        """
        The memory limit in GB of this container instance.
        """
        return pulumi.get(self, "memory_in_gb")


@pulumi.output_type
class ResourceRequestsResponse(dict):
    """
    The resource requests.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGB":
            suggest = "memory_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceRequestsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceRequestsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceRequestsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: float,
                 memory_in_gb: float,
                 gpu: Optional['outputs.GpuResourceResponse'] = None):
        """
        The resource requests.
        :param float cpu: The CPU request of this container instance.
        :param float memory_in_gb: The memory request in GB of this container instance.
        :param 'GpuResourceResponse' gpu: The GPU request of this container instance.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory_in_gb", memory_in_gb)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)

    @property
    @pulumi.getter
    def cpu(self) -> float:
        """
        The CPU request of this container instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="memoryInGB")
    def memory_in_gb(self) -> float:
        """
        The memory request in GB of this container instance.
        """
        return pulumi.get(self, "memory_in_gb")

    @property
    @pulumi.getter
    def gpu(self) -> Optional['outputs.GpuResourceResponse']:
        """
        The GPU request of this container instance.
        """
        return pulumi.get(self, "gpu")


@pulumi.output_type
class ResourceRequirementsResponse(dict):
    """
    The resource requirements.
    """
    def __init__(__self__, *,
                 requests: 'outputs.ResourceRequestsResponse',
                 limits: Optional['outputs.ResourceLimitsResponse'] = None):
        """
        The resource requirements.
        :param 'ResourceRequestsResponse' requests: The resource requests of this container instance.
        :param 'ResourceLimitsResponse' limits: The resource limits of this container instance.
        """
        pulumi.set(__self__, "requests", requests)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def requests(self) -> 'outputs.ResourceRequestsResponse':
        """
        The resource requests of this container instance.
        """
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.ResourceLimitsResponse']:
        """
        The resource limits of this container instance.
        """
        return pulumi.get(self, "limits")


@pulumi.output_type
class SecretReferenceResponse(dict):
    """
    A secret reference
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretReferenceUri":
            suggest = "secret_reference_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReferenceResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReferenceResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReferenceResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity: str,
                 name: str,
                 secret_reference_uri: str):
        """
        A secret reference
        :param str identity: The ARM resource id of the managed identity that has access to the secret in the key vault
        :param str name: The identifier of the secret reference
        :param str secret_reference_uri: The URI to the secret in key vault
        """
        pulumi.set(__self__, "identity", identity)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_reference_uri", secret_reference_uri)

    @property
    @pulumi.getter
    def identity(self) -> str:
        """
        The ARM resource id of the managed identity that has access to the secret in the key vault
        """
        return pulumi.get(self, "identity")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The identifier of the secret reference
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretReferenceUri")
    def secret_reference_uri(self) -> str:
        """
        The URI to the secret in key vault
        """
        return pulumi.get(self, "secret_reference_uri")


@pulumi.output_type
class SecurityContextCapabilitiesDefinitionResponse(dict):
    """
    The capabilities to add or drop from a container.
    """
    def __init__(__self__, *,
                 add: Optional[Sequence[str]] = None,
                 drop: Optional[Sequence[str]] = None):
        """
        The capabilities to add or drop from a container.
        :param Sequence[str] add: The capabilities to add to the container.
        :param Sequence[str] drop: The capabilities to drop from the container.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence[str]]:
        """
        The capabilities to add to the container.
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def drop(self) -> Optional[Sequence[str]]:
        """
        The capabilities to drop from the container.
        """
        return pulumi.get(self, "drop")


@pulumi.output_type
class SecurityContextDefinitionResponse(dict):
    """
    The security context for the container.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowPrivilegeEscalation":
            suggest = "allow_privilege_escalation"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "seccompProfile":
            suggest = "seccomp_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityContextDefinitionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityContextDefinitionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityContextDefinitionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.SecurityContextCapabilitiesDefinitionResponse'] = None,
                 privileged: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_user: Optional[int] = None,
                 seccomp_profile: Optional[str] = None):
        """
        The security context for the container.
        :param bool allow_privilege_escalation: A boolean value indicating whether the init process can elevate its privileges
        :param 'SecurityContextCapabilitiesDefinitionResponse' capabilities: The capabilities to add or drop from a container.
        :param bool privileged: The flag to determine if the container permissions is elevated to Privileged.
        :param int run_as_group: Sets the User GID for the container.
        :param int run_as_user: Sets the User UID for the container.
        :param str seccomp_profile: a base64 encoded string containing the contents of the JSON in the seccomp profile
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if seccomp_profile is not None:
            pulumi.set(__self__, "seccomp_profile", seccomp_profile)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        """
        A boolean value indicating whether the init process can elevate its privileges
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.SecurityContextCapabilitiesDefinitionResponse']:
        """
        The capabilities to add or drop from a container.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        The flag to determine if the container permissions is elevated to Privileged.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        """
        Sets the User GID for the container.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        """
        Sets the User UID for the container.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="seccompProfile")
    def seccomp_profile(self) -> Optional[str]:
        """
        a base64 encoded string containing the contents of the JSON in the seccomp profile
        """
        return pulumi.get(self, "seccomp_profile")


@pulumi.output_type
class StorageProfileResponse(dict):
    """
    Storage profile for storage related settings of a container group profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileShares":
            suggest = "file_shares"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_shares: Optional[Sequence['outputs.FileShareResponse']] = None):
        """
        Storage profile for storage related settings of a container group profile.
        """
        if file_shares is not None:
            pulumi.set(__self__, "file_shares", file_shares)

    @property
    @pulumi.getter(name="fileShares")
    def file_shares(self) -> Optional[Sequence['outputs.FileShareResponse']]:
        return pulumi.get(self, "file_shares")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UpdateProfileResponse(dict):
    """
    Used by the customer to specify the way to update the Container Groups in NGroup.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingUpdateProfile":
            suggest = "rolling_update_profile"
        elif key == "updateMode":
            suggest = "update_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdateProfileResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdateProfileResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdateProfileResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rolling_update_profile: Optional['outputs.UpdateProfileResponseRollingUpdateProfile'] = None,
                 update_mode: Optional[str] = None):
        """
        Used by the customer to specify the way to update the Container Groups in NGroup.
        :param 'UpdateProfileResponseRollingUpdateProfile' rolling_update_profile: This profile allows the customers to customize the rolling update.
        """
        if rolling_update_profile is not None:
            pulumi.set(__self__, "rolling_update_profile", rolling_update_profile)
        if update_mode is not None:
            pulumi.set(__self__, "update_mode", update_mode)

    @property
    @pulumi.getter(name="rollingUpdateProfile")
    def rolling_update_profile(self) -> Optional['outputs.UpdateProfileResponseRollingUpdateProfile']:
        """
        This profile allows the customers to customize the rolling update.
        """
        return pulumi.get(self, "rolling_update_profile")

    @property
    @pulumi.getter(name="updateMode")
    def update_mode(self) -> Optional[str]:
        return pulumi.get(self, "update_mode")


@pulumi.output_type
class UpdateProfileResponseRollingUpdateProfile(dict):
    """
    This profile allows the customers to customize the rolling update.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inPlaceUpdate":
            suggest = "in_place_update"
        elif key == "maxBatchPercent":
            suggest = "max_batch_percent"
        elif key == "maxUnhealthyPercent":
            suggest = "max_unhealthy_percent"
        elif key == "pauseTimeBetweenBatches":
            suggest = "pause_time_between_batches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpdateProfileResponseRollingUpdateProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpdateProfileResponseRollingUpdateProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpdateProfileResponseRollingUpdateProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_place_update: Optional[bool] = None,
                 max_batch_percent: Optional[int] = None,
                 max_unhealthy_percent: Optional[int] = None,
                 pause_time_between_batches: Optional[str] = None):
        """
        This profile allows the customers to customize the rolling update.
        :param bool in_place_update: Default is false. If set to true, the CGs will be updated in-place instead of creating new CG and deleting old ones.
        :param int max_batch_percent: Maximum percentage of total Container Groups which can be updated simultaneously by rolling update in one batch.
        :param int max_unhealthy_percent: Maximum percentage of the updated Container Groups which can be in unhealthy state after each batch is updated.
        :param str pause_time_between_batches: The wait time between batches after completing the one batch of the rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for duration.
        """
        if in_place_update is not None:
            pulumi.set(__self__, "in_place_update", in_place_update)
        if max_batch_percent is not None:
            pulumi.set(__self__, "max_batch_percent", max_batch_percent)
        if max_unhealthy_percent is not None:
            pulumi.set(__self__, "max_unhealthy_percent", max_unhealthy_percent)
        if pause_time_between_batches is not None:
            pulumi.set(__self__, "pause_time_between_batches", pause_time_between_batches)

    @property
    @pulumi.getter(name="inPlaceUpdate")
    def in_place_update(self) -> Optional[bool]:
        """
        Default is false. If set to true, the CGs will be updated in-place instead of creating new CG and deleting old ones.
        """
        return pulumi.get(self, "in_place_update")

    @property
    @pulumi.getter(name="maxBatchPercent")
    def max_batch_percent(self) -> Optional[int]:
        """
        Maximum percentage of total Container Groups which can be updated simultaneously by rolling update in one batch.
        """
        return pulumi.get(self, "max_batch_percent")

    @property
    @pulumi.getter(name="maxUnhealthyPercent")
    def max_unhealthy_percent(self) -> Optional[int]:
        """
        Maximum percentage of the updated Container Groups which can be in unhealthy state after each batch is updated.
        """
        return pulumi.get(self, "max_unhealthy_percent")

    @property
    @pulumi.getter(name="pauseTimeBetweenBatches")
    def pause_time_between_batches(self) -> Optional[str]:
        """
        The wait time between batches after completing the one batch of the rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for duration.
        """
        return pulumi.get(self, "pause_time_between_batches")


@pulumi.output_type
class UserAssignedIdentitiesResponse(dict):
    """
    The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentitiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentitiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentitiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        :param str client_id: The client id of user assigned identity.
        :param str principal_id: The principal id of user assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client id of user assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal id of user assigned identity.
        """
        return pulumi.get(self, "principal_id")


@pulumi.output_type
class VolumeMountResponse(dict):
    """
    The properties of the volume mount.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeMountResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeMountResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeMountResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: str,
                 name: str,
                 read_only: Optional[bool] = None):
        """
        The properties of the volume mount.
        :param str mount_path: The path within the container where the volume should be mounted. Must not contain colon (:).
        :param str name: The name of the volume mount.
        :param bool read_only: The flag indicating whether the volume mount is read-only.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        """
        The path within the container where the volume should be mounted. Must not contain colon (:).
        """
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume mount.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        The flag indicating whether the volume mount is read-only.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class VolumeResponse(dict):
    """
    The properties of the volume.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureFile":
            suggest = "azure_file"
        elif key == "emptyDir":
            suggest = "empty_dir"
        elif key == "gitRepo":
            suggest = "git_repo"
        elif key == "secretReference":
            suggest = "secret_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 azure_file: Optional['outputs.AzureFileVolumeResponse'] = None,
                 empty_dir: Optional[Any] = None,
                 git_repo: Optional['outputs.GitRepoVolumeResponse'] = None,
                 secret: Optional[Mapping[str, str]] = None,
                 secret_reference: Optional[Mapping[str, str]] = None):
        """
        The properties of the volume.
        :param str name: The name of the volume.
        :param 'AzureFileVolumeResponse' azure_file: The Azure File volume.
        :param Any empty_dir: The empty directory volume.
        :param 'GitRepoVolumeResponse' git_repo: The git repo volume.
        :param Mapping[str, str] secret: The secret volume.
        :param Mapping[str, str] secret_reference: The secret reference volume.
        """
        pulumi.set(__self__, "name", name)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_reference is not None:
            pulumi.set(__self__, "secret_reference", secret_reference)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional['outputs.AzureFileVolumeResponse']:
        """
        The Azure File volume.
        """
        return pulumi.get(self, "azure_file")

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[Any]:
        """
        The empty directory volume.
        """
        return pulumi.get(self, "empty_dir")

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional['outputs.GitRepoVolumeResponse']:
        """
        The git repo volume.
        """
        return pulumi.get(self, "git_repo")

    @property
    @pulumi.getter
    def secret(self) -> Optional[Mapping[str, str]]:
        """
        The secret volume.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretReference")
    def secret_reference(self) -> Optional[Mapping[str, str]]:
        """
        The secret reference volume.
        """
        return pulumi.get(self, "secret_reference")


