# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VariableValueArgs', 'VariableValue']

@pulumi.input_type
class VariableValueArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input['PolicyVariableValueColumnValueArgs']]],
                 variable_name: pulumi.Input[str],
                 variable_value_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VariableValue resource.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyVariableValueColumnValueArgs']]] values: Variable value column value array.
        :param pulumi.Input[str] variable_name: The name of the variable to operate on.
        :param pulumi.Input[str] variable_value_name: The name of the variable value to operate on.
        """
        pulumi.set(__self__, "values", values)
        pulumi.set(__self__, "variable_name", variable_name)
        if variable_value_name is not None:
            pulumi.set(__self__, "variable_value_name", variable_value_name)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyVariableValueColumnValueArgs']]]:
        """
        Variable value column value array.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyVariableValueColumnValueArgs']]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> pulumi.Input[str]:
        """
        The name of the variable to operate on.
        """
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="variableValueName")
    def variable_value_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable value to operate on.
        """
        return pulumi.get(self, "variable_value_name")

    @variable_value_name.setter
    def variable_value_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_value_name", value)


class VariableValue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVariableValueColumnValueArgs']]]]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 variable_value_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The variable value.
        Azure REST API version: 2022-08-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVariableValueColumnValueArgs']]]] values: Variable value column value array.
        :param pulumi.Input[str] variable_name: The name of the variable to operate on.
        :param pulumi.Input[str] variable_value_name: The name of the variable value to operate on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VariableValueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The variable value.
        Azure REST API version: 2022-08-01-preview.

        :param str resource_name: The name of the resource.
        :param VariableValueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VariableValueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVariableValueColumnValueArgs']]]]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 variable_value_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VariableValueArgs.__new__(VariableValueArgs)

            if values is None and not opts.urn:
                raise TypeError("Missing required property 'values'")
            __props__.__dict__["values"] = values
            if variable_name is None and not opts.urn:
                raise TypeError("Missing required property 'variable_name'")
            __props__.__dict__["variable_name"] = variable_name
            __props__.__dict__["variable_value_name"] = variable_value_name
            __props__.__dict__["name"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:authorization/v20220801preview:VariableValue")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VariableValue, __self__).__init__(
            'azure-native:authorization:VariableValue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VariableValue':
        """
        Get an existing VariableValue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VariableValueArgs.__new__(VariableValueArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["values"] = None
        return VariableValue(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource (Microsoft.Authorization/variables/values).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence['outputs.PolicyVariableValueColumnValueResponse']]:
        """
        Variable value column value array.
        """
        return pulumi.get(self, "values")

