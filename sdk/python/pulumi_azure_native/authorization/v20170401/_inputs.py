# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'ManagementLockOwnerArgs',
    'ManagementLockOwnerArgsDict',
]

MYPY = False

if not MYPY:
    class ManagementLockOwnerArgsDict(TypedDict):
        """
        Lock owner properties.
        """
        application_id: NotRequired[pulumi.Input[str]]
        """
        The application ID of the lock owner.
        """
elif False:
    ManagementLockOwnerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagementLockOwnerArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None):
        """
        Lock owner properties.
        :param pulumi.Input[str] application_id: The application ID of the lock owner.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The application ID of the lock owner.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)


