# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRoleManagementPolicyResult',
    'AwaitableGetRoleManagementPolicyResult',
    'get_role_management_policy',
    'get_role_management_policy_output',
]

@pulumi.output_type
class GetRoleManagementPolicyResult:
    """
    Role management policy
    """
    def __init__(__self__, description=None, display_name=None, effective_rules=None, id=None, is_organization_default=None, last_modified_by=None, last_modified_date_time=None, name=None, policy_properties=None, rules=None, scope=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if effective_rules and not isinstance(effective_rules, list):
            raise TypeError("Expected argument 'effective_rules' to be a list")
        pulumi.set(__self__, "effective_rules", effective_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_organization_default and not isinstance(is_organization_default, bool):
            raise TypeError("Expected argument 'is_organization_default' to be a bool")
        pulumi.set(__self__, "is_organization_default", is_organization_default)
        if last_modified_by and not isinstance(last_modified_by, dict):
            raise TypeError("Expected argument 'last_modified_by' to be a dict")
        pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_date_time and not isinstance(last_modified_date_time, str):
            raise TypeError("Expected argument 'last_modified_date_time' to be a str")
        pulumi.set(__self__, "last_modified_date_time", last_modified_date_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_properties and not isinstance(policy_properties, dict):
            raise TypeError("Expected argument 'policy_properties' to be a dict")
        pulumi.set(__self__, "policy_properties", policy_properties)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The role management policy description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The role management policy display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveRules")
    def effective_rules(self) -> Sequence[Any]:
        """
        The readonly computed rule applied to the policy.
        """
        return pulumi.get(self, "effective_rules")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The role management policy Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOrganizationDefault")
    def is_organization_default(self) -> Optional[bool]:
        """
        The role management policy is default policy.
        """
        return pulumi.get(self, "is_organization_default")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> 'outputs.PrincipalResponse':
        """
        The name of the entity last modified it
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedDateTime")
    def last_modified_date_time(self) -> str:
        """
        The last modified date time.
        """
        return pulumi.get(self, "last_modified_date_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The role management policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyProperties")
    def policy_properties(self) -> 'outputs.PolicyPropertiesResponse':
        """
        Additional properties of scope
        """
        return pulumi.get(self, "policy_properties")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence[Any]]:
        """
        The rule applied to the policy.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The role management policy scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The role management policy type.
        """
        return pulumi.get(self, "type")


class AwaitableGetRoleManagementPolicyResult(GetRoleManagementPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleManagementPolicyResult(
            description=self.description,
            display_name=self.display_name,
            effective_rules=self.effective_rules,
            id=self.id,
            is_organization_default=self.is_organization_default,
            last_modified_by=self.last_modified_by,
            last_modified_date_time=self.last_modified_date_time,
            name=self.name,
            policy_properties=self.policy_properties,
            rules=self.rules,
            scope=self.scope,
            type=self.type)


def get_role_management_policy(role_management_policy_name: Optional[str] = None,
                               scope: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleManagementPolicyResult:
    """
    Get the specified role management policy for a resource scope
    Azure REST API version: 2024-09-01-preview.

    Other available API versions: 2020-10-01, 2020-10-01-preview, 2024-02-01-preview.


    :param str role_management_policy_name: The name (guid) of the role management policy to get.
    :param str scope: The scope of the role management policy.
    """
    __args__ = dict()
    __args__['roleManagementPolicyName'] = role_management_policy_name
    __args__['scope'] = scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:authorization:getRoleManagementPolicy', __args__, opts=opts, typ=GetRoleManagementPolicyResult).value

    return AwaitableGetRoleManagementPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        effective_rules=pulumi.get(__ret__, 'effective_rules'),
        id=pulumi.get(__ret__, 'id'),
        is_organization_default=pulumi.get(__ret__, 'is_organization_default'),
        last_modified_by=pulumi.get(__ret__, 'last_modified_by'),
        last_modified_date_time=pulumi.get(__ret__, 'last_modified_date_time'),
        name=pulumi.get(__ret__, 'name'),
        policy_properties=pulumi.get(__ret__, 'policy_properties'),
        rules=pulumi.get(__ret__, 'rules'),
        scope=pulumi.get(__ret__, 'scope'),
        type=pulumi.get(__ret__, 'type'))
def get_role_management_policy_output(role_management_policy_name: Optional[pulumi.Input[str]] = None,
                                      scope: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRoleManagementPolicyResult]:
    """
    Get the specified role management policy for a resource scope
    Azure REST API version: 2024-09-01-preview.

    Other available API versions: 2020-10-01, 2020-10-01-preview, 2024-02-01-preview.


    :param str role_management_policy_name: The name (guid) of the role management policy to get.
    :param str scope: The scope of the role management policy.
    """
    __args__ = dict()
    __args__['roleManagementPolicyName'] = role_management_policy_name
    __args__['scope'] = scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:authorization:getRoleManagementPolicy', __args__, opts=opts, typ=GetRoleManagementPolicyResult)
    return __ret__.apply(lambda __response__: GetRoleManagementPolicyResult(
        description=pulumi.get(__response__, 'description'),
        display_name=pulumi.get(__response__, 'display_name'),
        effective_rules=pulumi.get(__response__, 'effective_rules'),
        id=pulumi.get(__response__, 'id'),
        is_organization_default=pulumi.get(__response__, 'is_organization_default'),
        last_modified_by=pulumi.get(__response__, 'last_modified_by'),
        last_modified_date_time=pulumi.get(__response__, 'last_modified_date_time'),
        name=pulumi.get(__response__, 'name'),
        policy_properties=pulumi.get(__response__, 'policy_properties'),
        rules=pulumi.get(__response__, 'rules'),
        scope=pulumi.get(__response__, 'scope'),
        type=pulumi.get(__response__, 'type')))
