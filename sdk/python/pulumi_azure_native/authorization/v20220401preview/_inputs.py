# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'RoleEligibilityScheduleRequestPropertiesExpirationArgs',
    'RoleEligibilityScheduleRequestPropertiesExpirationArgsDict',
    'RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs',
    'RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict',
    'RoleEligibilityScheduleRequestPropertiesTicketInfoArgs',
    'RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict',
]

MYPY = False

if not MYPY:
    class RoleEligibilityScheduleRequestPropertiesExpirationArgsDict(TypedDict):
        """
        Expiration of the role eligibility schedule
        """
        duration: NotRequired[pulumi.Input[str]]
        """
        Duration of the role eligibility schedule in TimeSpan.
        """
        end_date_time: NotRequired[pulumi.Input[str]]
        """
        End DateTime of the role eligibility schedule.
        """
        type: NotRequired[pulumi.Input[Union[str, 'Type']]]
        """
        Type of the role eligibility schedule expiration
        """
elif False:
    RoleEligibilityScheduleRequestPropertiesExpirationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleEligibilityScheduleRequestPropertiesExpirationArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 end_date_time: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[Union[str, 'Type']]] = None):
        """
        Expiration of the role eligibility schedule
        :param pulumi.Input[str] duration: Duration of the role eligibility schedule in TimeSpan.
        :param pulumi.Input[str] end_date_time: End DateTime of the role eligibility schedule.
        :param pulumi.Input[Union[str, 'Type']] type: Type of the role eligibility schedule expiration
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if end_date_time is not None:
            pulumi.set(__self__, "end_date_time", end_date_time)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of the role eligibility schedule in TimeSpan.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        End DateTime of the role eligibility schedule.
        """
        return pulumi.get(self, "end_date_time")

    @end_date_time.setter
    def end_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date_time", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'Type']]]:
        """
        Type of the role eligibility schedule expiration
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'Type']]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict(TypedDict):
        """
        Schedule info of the role eligibility schedule
        """
        expiration: NotRequired[pulumi.Input['RoleEligibilityScheduleRequestPropertiesExpirationArgsDict']]
        """
        Expiration of the role eligibility schedule
        """
        start_date_time: NotRequired[pulumi.Input[str]]
        """
        Start DateTime of the role eligibility schedule.
        """
elif False:
    RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs:
    def __init__(__self__, *,
                 expiration: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesExpirationArgs']] = None,
                 start_date_time: Optional[pulumi.Input[str]] = None):
        """
        Schedule info of the role eligibility schedule
        :param pulumi.Input['RoleEligibilityScheduleRequestPropertiesExpirationArgs'] expiration: Expiration of the role eligibility schedule
        :param pulumi.Input[str] start_date_time: Start DateTime of the role eligibility schedule.
        """
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if start_date_time is not None:
            pulumi.set(__self__, "start_date_time", start_date_time)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesExpirationArgs']]:
        """
        Expiration of the role eligibility schedule
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start DateTime of the role eligibility schedule.
        """
        return pulumi.get(self, "start_date_time")

    @start_date_time.setter
    def start_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date_time", value)


if not MYPY:
    class RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict(TypedDict):
        """
        Ticket Info of the role eligibility
        """
        ticket_number: NotRequired[pulumi.Input[str]]
        """
        Ticket number for the role eligibility
        """
        ticket_system: NotRequired[pulumi.Input[str]]
        """
        Ticket system name for the role eligibility
        """
elif False:
    RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleEligibilityScheduleRequestPropertiesTicketInfoArgs:
    def __init__(__self__, *,
                 ticket_number: Optional[pulumi.Input[str]] = None,
                 ticket_system: Optional[pulumi.Input[str]] = None):
        """
        Ticket Info of the role eligibility
        :param pulumi.Input[str] ticket_number: Ticket number for the role eligibility
        :param pulumi.Input[str] ticket_system: Ticket system name for the role eligibility
        """
        if ticket_number is not None:
            pulumi.set(__self__, "ticket_number", ticket_number)
        if ticket_system is not None:
            pulumi.set(__self__, "ticket_system", ticket_system)

    @property
    @pulumi.getter(name="ticketNumber")
    def ticket_number(self) -> Optional[pulumi.Input[str]]:
        """
        Ticket number for the role eligibility
        """
        return pulumi.get(self, "ticket_number")

    @ticket_number.setter
    def ticket_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_number", value)

    @property
    @pulumi.getter(name="ticketSystem")
    def ticket_system(self) -> Optional[pulumi.Input[str]]:
        """
        Ticket system name for the role eligibility
        """
        return pulumi.get(self, "ticket_system")

    @ticket_system.setter
    def ticket_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_system", value)


