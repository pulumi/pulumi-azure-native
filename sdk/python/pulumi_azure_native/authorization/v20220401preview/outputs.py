# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ExpandedPropertiesResponse',
    'ExpandedPropertiesResponsePrincipal',
    'ExpandedPropertiesResponseRoleDefinition',
    'ExpandedPropertiesResponseScope',
    'RoleEligibilityScheduleRequestPropertiesResponseExpiration',
    'RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo',
    'RoleEligibilityScheduleRequestPropertiesResponseTicketInfo',
]

@pulumi.output_type
class ExpandedPropertiesResponse(dict):
    """
    Expanded info of resource, role and principal
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleDefinition":
            suggest = "role_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExpandedPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExpandedPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExpandedPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal: Optional['outputs.ExpandedPropertiesResponsePrincipal'] = None,
                 role_definition: Optional['outputs.ExpandedPropertiesResponseRoleDefinition'] = None,
                 scope: Optional['outputs.ExpandedPropertiesResponseScope'] = None):
        """
        Expanded info of resource, role and principal
        :param 'ExpandedPropertiesResponsePrincipal' principal: Details of the principal
        :param 'ExpandedPropertiesResponseRoleDefinition' role_definition: Details of role definition
        :param 'ExpandedPropertiesResponseScope' scope: Details of the resource scope
        """
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if role_definition is not None:
            pulumi.set(__self__, "role_definition", role_definition)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def principal(self) -> Optional['outputs.ExpandedPropertiesResponsePrincipal']:
        """
        Details of the principal
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="roleDefinition")
    def role_definition(self) -> Optional['outputs.ExpandedPropertiesResponseRoleDefinition']:
        """
        Details of role definition
        """
        return pulumi.get(self, "role_definition")

    @property
    @pulumi.getter
    def scope(self) -> Optional['outputs.ExpandedPropertiesResponseScope']:
        """
        Details of the resource scope
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class ExpandedPropertiesResponsePrincipal(dict):
    """
    Details of the principal
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExpandedPropertiesResponsePrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExpandedPropertiesResponsePrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExpandedPropertiesResponsePrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 email: Optional[str] = None,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Details of the principal
        :param str display_name: Display name of the principal
        :param str email: Email id of the principal
        :param str id: Id of the principal
        :param str type: Type of the principal
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the principal
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email id of the principal
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the principal
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the principal
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExpandedPropertiesResponseRoleDefinition(dict):
    """
    Details of role definition
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExpandedPropertiesResponseRoleDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExpandedPropertiesResponseRoleDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExpandedPropertiesResponseRoleDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Details of role definition
        :param str display_name: Display name of the role definition
        :param str id: Id of the role definition
        :param str type: Type of the role definition
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the role definition
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the role definition
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the role definition
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ExpandedPropertiesResponseScope(dict):
    """
    Details of the resource scope
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExpandedPropertiesResponseScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExpandedPropertiesResponseScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExpandedPropertiesResponseScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Details of the resource scope
        :param str display_name: Display name of the resource
        :param str id: Scope id of the resource
        :param str type: Type of the resource
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the resource
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Scope id of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RoleEligibilityScheduleRequestPropertiesResponseExpiration(dict):
    """
    Expiration of the role eligibility schedule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDateTime":
            suggest = "end_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleEligibilityScheduleRequestPropertiesResponseExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 end_date_time: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Expiration of the role eligibility schedule
        :param str duration: Duration of the role eligibility schedule in TimeSpan.
        :param str end_date_time: End DateTime of the role eligibility schedule.
        :param str type: Type of the role eligibility schedule expiration
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if end_date_time is not None:
            pulumi.set(__self__, "end_date_time", end_date_time)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration of the role eligibility schedule in TimeSpan.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> Optional[str]:
        """
        End DateTime of the role eligibility schedule.
        """
        return pulumi.get(self, "end_date_time")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the role eligibility schedule expiration
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo(dict):
    """
    Schedule info of the role eligibility schedule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDateTime":
            suggest = "start_date_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration: Optional['outputs.RoleEligibilityScheduleRequestPropertiesResponseExpiration'] = None,
                 start_date_time: Optional[str] = None):
        """
        Schedule info of the role eligibility schedule
        :param 'RoleEligibilityScheduleRequestPropertiesResponseExpiration' expiration: Expiration of the role eligibility schedule
        :param str start_date_time: Start DateTime of the role eligibility schedule.
        """
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if start_date_time is not None:
            pulumi.set(__self__, "start_date_time", start_date_time)

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.RoleEligibilityScheduleRequestPropertiesResponseExpiration']:
        """
        Expiration of the role eligibility schedule
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> Optional[str]:
        """
        Start DateTime of the role eligibility schedule.
        """
        return pulumi.get(self, "start_date_time")


@pulumi.output_type
class RoleEligibilityScheduleRequestPropertiesResponseTicketInfo(dict):
    """
    Ticket Info of the role eligibility
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketNumber":
            suggest = "ticket_number"
        elif key == "ticketSystem":
            suggest = "ticket_system"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleEligibilityScheduleRequestPropertiesResponseTicketInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseTicketInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleEligibilityScheduleRequestPropertiesResponseTicketInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_number: Optional[str] = None,
                 ticket_system: Optional[str] = None):
        """
        Ticket Info of the role eligibility
        :param str ticket_number: Ticket number for the role eligibility
        :param str ticket_system: Ticket system name for the role eligibility
        """
        if ticket_number is not None:
            pulumi.set(__self__, "ticket_number", ticket_number)
        if ticket_system is not None:
            pulumi.set(__self__, "ticket_system", ticket_system)

    @property
    @pulumi.getter(name="ticketNumber")
    def ticket_number(self) -> Optional[str]:
        """
        Ticket number for the role eligibility
        """
        return pulumi.get(self, "ticket_number")

    @property
    @pulumi.getter(name="ticketSystem")
    def ticket_system(self) -> Optional[str]:
        """
        Ticket system name for the role eligibility
        """
        return pulumi.get(self, "ticket_system")


