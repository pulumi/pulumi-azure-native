# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetScopeAccessReviewScheduleDefinitionByIdResult',
    'AwaitableGetScopeAccessReviewScheduleDefinitionByIdResult',
    'get_scope_access_review_schedule_definition_by_id',
    'get_scope_access_review_schedule_definition_by_id_output',
]

@pulumi.output_type
class GetScopeAccessReviewScheduleDefinitionByIdResult:
    """
    Access Review Schedule Definition.
    """
    def __init__(__self__, auto_apply_decisions_enabled=None, azure_api_version=None, backup_reviewers=None, default_decision=None, default_decision_enabled=None, description_for_admins=None, description_for_reviewers=None, display_name=None, id=None, instance_duration_in_days=None, instances=None, interval=None, justification_required_on_approval=None, mail_notifications_enabled=None, name=None, principal_id=None, principal_name=None, principal_type=None, range=None, recommendation_look_back_duration=None, recommendations_enabled=None, reminder_notifications_enabled=None, reviewers=None, reviewers_type=None, scope=None, status=None, type=None, user_principal_name=None):
        if auto_apply_decisions_enabled and not isinstance(auto_apply_decisions_enabled, bool):
            raise TypeError("Expected argument 'auto_apply_decisions_enabled' to be a bool")
        pulumi.set(__self__, "auto_apply_decisions_enabled", auto_apply_decisions_enabled)
        if azure_api_version and not isinstance(azure_api_version, str):
            raise TypeError("Expected argument 'azure_api_version' to be a str")
        pulumi.set(__self__, "azure_api_version", azure_api_version)
        if backup_reviewers and not isinstance(backup_reviewers, list):
            raise TypeError("Expected argument 'backup_reviewers' to be a list")
        pulumi.set(__self__, "backup_reviewers", backup_reviewers)
        if default_decision and not isinstance(default_decision, str):
            raise TypeError("Expected argument 'default_decision' to be a str")
        pulumi.set(__self__, "default_decision", default_decision)
        if default_decision_enabled and not isinstance(default_decision_enabled, bool):
            raise TypeError("Expected argument 'default_decision_enabled' to be a bool")
        pulumi.set(__self__, "default_decision_enabled", default_decision_enabled)
        if description_for_admins and not isinstance(description_for_admins, str):
            raise TypeError("Expected argument 'description_for_admins' to be a str")
        pulumi.set(__self__, "description_for_admins", description_for_admins)
        if description_for_reviewers and not isinstance(description_for_reviewers, str):
            raise TypeError("Expected argument 'description_for_reviewers' to be a str")
        pulumi.set(__self__, "description_for_reviewers", description_for_reviewers)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_duration_in_days and not isinstance(instance_duration_in_days, int):
            raise TypeError("Expected argument 'instance_duration_in_days' to be a int")
        pulumi.set(__self__, "instance_duration_in_days", instance_duration_in_days)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if justification_required_on_approval and not isinstance(justification_required_on_approval, bool):
            raise TypeError("Expected argument 'justification_required_on_approval' to be a bool")
        pulumi.set(__self__, "justification_required_on_approval", justification_required_on_approval)
        if mail_notifications_enabled and not isinstance(mail_notifications_enabled, bool):
            raise TypeError("Expected argument 'mail_notifications_enabled' to be a bool")
        pulumi.set(__self__, "mail_notifications_enabled", mail_notifications_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if principal_id and not isinstance(principal_id, str):
            raise TypeError("Expected argument 'principal_id' to be a str")
        pulumi.set(__self__, "principal_id", principal_id)
        if principal_name and not isinstance(principal_name, str):
            raise TypeError("Expected argument 'principal_name' to be a str")
        pulumi.set(__self__, "principal_name", principal_name)
        if principal_type and not isinstance(principal_type, str):
            raise TypeError("Expected argument 'principal_type' to be a str")
        pulumi.set(__self__, "principal_type", principal_type)
        if range and not isinstance(range, dict):
            raise TypeError("Expected argument 'range' to be a dict")
        pulumi.set(__self__, "range", range)
        if recommendation_look_back_duration and not isinstance(recommendation_look_back_duration, str):
            raise TypeError("Expected argument 'recommendation_look_back_duration' to be a str")
        pulumi.set(__self__, "recommendation_look_back_duration", recommendation_look_back_duration)
        if recommendations_enabled and not isinstance(recommendations_enabled, bool):
            raise TypeError("Expected argument 'recommendations_enabled' to be a bool")
        pulumi.set(__self__, "recommendations_enabled", recommendations_enabled)
        if reminder_notifications_enabled and not isinstance(reminder_notifications_enabled, bool):
            raise TypeError("Expected argument 'reminder_notifications_enabled' to be a bool")
        pulumi.set(__self__, "reminder_notifications_enabled", reminder_notifications_enabled)
        if reviewers and not isinstance(reviewers, list):
            raise TypeError("Expected argument 'reviewers' to be a list")
        pulumi.set(__self__, "reviewers", reviewers)
        if reviewers_type and not isinstance(reviewers_type, str):
            raise TypeError("Expected argument 'reviewers_type' to be a str")
        pulumi.set(__self__, "reviewers_type", reviewers_type)
        if scope and not isinstance(scope, dict):
            raise TypeError("Expected argument 'scope' to be a dict")
        pulumi.set(__self__, "scope", scope)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_principal_name and not isinstance(user_principal_name, str):
            raise TypeError("Expected argument 'user_principal_name' to be a str")
        pulumi.set(__self__, "user_principal_name", user_principal_name)

    @property
    @pulumi.getter(name="autoApplyDecisionsEnabled")
    def auto_apply_decisions_enabled(self) -> Optional[bool]:
        """
        Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
        """
        return pulumi.get(self, "auto_apply_decisions_enabled")

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> str:
        """
        The Azure API version of the resource.
        """
        return pulumi.get(self, "azure_api_version")

    @property
    @pulumi.getter(name="backupReviewers")
    def backup_reviewers(self) -> Optional[Sequence['outputs.AccessReviewReviewerResponse']]:
        """
        This is the collection of backup reviewers.
        """
        return pulumi.get(self, "backup_reviewers")

    @property
    @pulumi.getter(name="defaultDecision")
    def default_decision(self) -> Optional[str]:
        """
        This specifies the behavior for the autoReview feature when an access review completes.
        """
        return pulumi.get(self, "default_decision")

    @property
    @pulumi.getter(name="defaultDecisionEnabled")
    def default_decision_enabled(self) -> Optional[bool]:
        """
        Flag to indicate whether reviewers are required to provide a justification when reviewing access.
        """
        return pulumi.get(self, "default_decision_enabled")

    @property
    @pulumi.getter(name="descriptionForAdmins")
    def description_for_admins(self) -> Optional[str]:
        """
        The description provided by the access review creator and visible to admins.
        """
        return pulumi.get(self, "description_for_admins")

    @property
    @pulumi.getter(name="descriptionForReviewers")
    def description_for_reviewers(self) -> Optional[str]:
        """
        The description provided by the access review creator to be shown to reviewers.
        """
        return pulumi.get(self, "description_for_reviewers")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name for the schedule definition.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The access review schedule definition id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceDurationInDays")
    def instance_duration_in_days(self) -> Optional[int]:
        """
        The duration in days for an instance.
        """
        return pulumi.get(self, "instance_duration_in_days")

    @property
    @pulumi.getter
    def instances(self) -> Optional[Sequence['outputs.AccessReviewInstanceResponse']]:
        """
        This is the collection of instances returned when one does an expand on it.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="justificationRequiredOnApproval")
    def justification_required_on_approval(self) -> Optional[bool]:
        """
        Flag to indicate whether the reviewer is required to pass justification when recording a decision.
        """
        return pulumi.get(self, "justification_required_on_approval")

    @property
    @pulumi.getter(name="mailNotificationsEnabled")
    def mail_notifications_enabled(self) -> Optional[bool]:
        """
        Flag to indicate whether sending mails to reviewers and the review creator is enabled.
        """
        return pulumi.get(self, "mail_notifications_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The access review schedule definition unique id.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The identity id
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> str:
        """
        The identity display name
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> str:
        """
        The identity type : user/servicePrincipal
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter
    def range(self) -> Optional['outputs.AccessReviewRecurrenceRangeResponse']:
        """
        Access Review schedule definition recurrence range.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="recommendationLookBackDuration")
    def recommendation_look_back_duration(self) -> Optional[str]:
        """
        Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
        """
        return pulumi.get(self, "recommendation_look_back_duration")

    @property
    @pulumi.getter(name="recommendationsEnabled")
    def recommendations_enabled(self) -> Optional[bool]:
        """
        Flag to indicate whether showing recommendations to reviewers is enabled.
        """
        return pulumi.get(self, "recommendations_enabled")

    @property
    @pulumi.getter(name="reminderNotificationsEnabled")
    def reminder_notifications_enabled(self) -> Optional[bool]:
        """
        Flag to indicate whether sending reminder emails to reviewers are enabled.
        """
        return pulumi.get(self, "reminder_notifications_enabled")

    @property
    @pulumi.getter
    def reviewers(self) -> Optional[Sequence['outputs.AccessReviewReviewerResponse']]:
        """
        This is the collection of reviewers.
        """
        return pulumi.get(self, "reviewers")

    @property
    @pulumi.getter(name="reviewersType")
    def reviewers_type(self) -> str:
        """
        This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
        """
        return pulumi.get(self, "reviewers_type")

    @property
    @pulumi.getter
    def scope(self) -> 'outputs.AccessReviewScopeResponse':
        """
        This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        This read-only field specifies the status of an accessReview.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userPrincipalName")
    def user_principal_name(self) -> str:
        """
        The user principal name(if valid)
        """
        return pulumi.get(self, "user_principal_name")


class AwaitableGetScopeAccessReviewScheduleDefinitionByIdResult(GetScopeAccessReviewScheduleDefinitionByIdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScopeAccessReviewScheduleDefinitionByIdResult(
            auto_apply_decisions_enabled=self.auto_apply_decisions_enabled,
            azure_api_version=self.azure_api_version,
            backup_reviewers=self.backup_reviewers,
            default_decision=self.default_decision,
            default_decision_enabled=self.default_decision_enabled,
            description_for_admins=self.description_for_admins,
            description_for_reviewers=self.description_for_reviewers,
            display_name=self.display_name,
            id=self.id,
            instance_duration_in_days=self.instance_duration_in_days,
            instances=self.instances,
            interval=self.interval,
            justification_required_on_approval=self.justification_required_on_approval,
            mail_notifications_enabled=self.mail_notifications_enabled,
            name=self.name,
            principal_id=self.principal_id,
            principal_name=self.principal_name,
            principal_type=self.principal_type,
            range=self.range,
            recommendation_look_back_duration=self.recommendation_look_back_duration,
            recommendations_enabled=self.recommendations_enabled,
            reminder_notifications_enabled=self.reminder_notifications_enabled,
            reviewers=self.reviewers,
            reviewers_type=self.reviewers_type,
            scope=self.scope,
            status=self.status,
            type=self.type,
            user_principal_name=self.user_principal_name)


def get_scope_access_review_schedule_definition_by_id(schedule_definition_id: Optional[str] = None,
                                                      scope: Optional[str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScopeAccessReviewScheduleDefinitionByIdResult:
    """
    Get single access review definition
    Azure REST API version: 2021-12-01-preview.


    :param str schedule_definition_id: The id of the access review schedule definition.
    :param str scope: The scope of the resource.
    """
    __args__ = dict()
    __args__['scheduleDefinitionId'] = schedule_definition_id
    __args__['scope'] = scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:authorization:getScopeAccessReviewScheduleDefinitionById', __args__, opts=opts, typ=GetScopeAccessReviewScheduleDefinitionByIdResult).value

    return AwaitableGetScopeAccessReviewScheduleDefinitionByIdResult(
        auto_apply_decisions_enabled=pulumi.get(__ret__, 'auto_apply_decisions_enabled'),
        azure_api_version=pulumi.get(__ret__, 'azure_api_version'),
        backup_reviewers=pulumi.get(__ret__, 'backup_reviewers'),
        default_decision=pulumi.get(__ret__, 'default_decision'),
        default_decision_enabled=pulumi.get(__ret__, 'default_decision_enabled'),
        description_for_admins=pulumi.get(__ret__, 'description_for_admins'),
        description_for_reviewers=pulumi.get(__ret__, 'description_for_reviewers'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_duration_in_days=pulumi.get(__ret__, 'instance_duration_in_days'),
        instances=pulumi.get(__ret__, 'instances'),
        interval=pulumi.get(__ret__, 'interval'),
        justification_required_on_approval=pulumi.get(__ret__, 'justification_required_on_approval'),
        mail_notifications_enabled=pulumi.get(__ret__, 'mail_notifications_enabled'),
        name=pulumi.get(__ret__, 'name'),
        principal_id=pulumi.get(__ret__, 'principal_id'),
        principal_name=pulumi.get(__ret__, 'principal_name'),
        principal_type=pulumi.get(__ret__, 'principal_type'),
        range=pulumi.get(__ret__, 'range'),
        recommendation_look_back_duration=pulumi.get(__ret__, 'recommendation_look_back_duration'),
        recommendations_enabled=pulumi.get(__ret__, 'recommendations_enabled'),
        reminder_notifications_enabled=pulumi.get(__ret__, 'reminder_notifications_enabled'),
        reviewers=pulumi.get(__ret__, 'reviewers'),
        reviewers_type=pulumi.get(__ret__, 'reviewers_type'),
        scope=pulumi.get(__ret__, 'scope'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        user_principal_name=pulumi.get(__ret__, 'user_principal_name'))
def get_scope_access_review_schedule_definition_by_id_output(schedule_definition_id: Optional[pulumi.Input[str]] = None,
                                                             scope: Optional[pulumi.Input[str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetScopeAccessReviewScheduleDefinitionByIdResult]:
    """
    Get single access review definition
    Azure REST API version: 2021-12-01-preview.


    :param str schedule_definition_id: The id of the access review schedule definition.
    :param str scope: The scope of the resource.
    """
    __args__ = dict()
    __args__['scheduleDefinitionId'] = schedule_definition_id
    __args__['scope'] = scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:authorization:getScopeAccessReviewScheduleDefinitionById', __args__, opts=opts, typ=GetScopeAccessReviewScheduleDefinitionByIdResult)
    return __ret__.apply(lambda __response__: GetScopeAccessReviewScheduleDefinitionByIdResult(
        auto_apply_decisions_enabled=pulumi.get(__response__, 'auto_apply_decisions_enabled'),
        azure_api_version=pulumi.get(__response__, 'azure_api_version'),
        backup_reviewers=pulumi.get(__response__, 'backup_reviewers'),
        default_decision=pulumi.get(__response__, 'default_decision'),
        default_decision_enabled=pulumi.get(__response__, 'default_decision_enabled'),
        description_for_admins=pulumi.get(__response__, 'description_for_admins'),
        description_for_reviewers=pulumi.get(__response__, 'description_for_reviewers'),
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        instance_duration_in_days=pulumi.get(__response__, 'instance_duration_in_days'),
        instances=pulumi.get(__response__, 'instances'),
        interval=pulumi.get(__response__, 'interval'),
        justification_required_on_approval=pulumi.get(__response__, 'justification_required_on_approval'),
        mail_notifications_enabled=pulumi.get(__response__, 'mail_notifications_enabled'),
        name=pulumi.get(__response__, 'name'),
        principal_id=pulumi.get(__response__, 'principal_id'),
        principal_name=pulumi.get(__response__, 'principal_name'),
        principal_type=pulumi.get(__response__, 'principal_type'),
        range=pulumi.get(__response__, 'range'),
        recommendation_look_back_duration=pulumi.get(__response__, 'recommendation_look_back_duration'),
        recommendations_enabled=pulumi.get(__response__, 'recommendations_enabled'),
        reminder_notifications_enabled=pulumi.get(__response__, 'reminder_notifications_enabled'),
        reviewers=pulumi.get(__response__, 'reviewers'),
        reviewers_type=pulumi.get(__response__, 'reviewers_type'),
        scope=pulumi.get(__response__, 'scope'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        user_principal_name=pulumi.get(__response__, 'user_principal_name')))
