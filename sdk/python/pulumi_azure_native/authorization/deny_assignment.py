# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['DenyAssignment']


class DenyAssignment(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_version: Optional[pulumi.Input[str]] = None,
                 deny_assignment_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 do_not_apply_to_child_scopes: Optional[pulumi.Input[bool]] = None,
                 exclude_principals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrincipalArgs']]]]] = None,
                 is_system_protected: Optional[pulumi.Input[bool]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PermissionArgs']]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrincipalArgs']]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Deny Assignment
        API Version: 2020-03-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] condition: The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        :param pulumi.Input[str] condition_version: Version of the condition. Currently accepted value is '2.0'
        :param pulumi.Input[str] deny_assignment_name: The display name of the deny assignment.
        :param pulumi.Input[str] description: The description of the deny assignment.
        :param pulumi.Input[bool] do_not_apply_to_child_scopes: Determines if the deny assignment applies to child scopes. Default value is false.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrincipalArgs']]]] exclude_principals: Array of principals to which the deny assignment does not apply.
        :param pulumi.Input[bool] is_system_protected: Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PermissionArgs']]]] permissions: An array of permissions that are denied by the deny assignment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrincipalArgs']]]] principals: Array of principals to which the deny assignment applies.
        :param pulumi.Input[str] scope: The deny assignment scope.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['condition'] = condition
            __props__['condition_version'] = condition_version
            __props__['deny_assignment_name'] = deny_assignment_name
            __props__['description'] = description
            __props__['do_not_apply_to_child_scopes'] = do_not_apply_to_child_scopes
            __props__['exclude_principals'] = exclude_principals
            __props__['is_system_protected'] = is_system_protected
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__['permissions'] = permissions
            if principals is None and not opts.urn:
                raise TypeError("Missing required property 'principals'")
            __props__['principals'] = principals
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__['scope'] = scope
            __props__['created_by'] = None
            __props__['created_on'] = None
            __props__['name'] = None
            __props__['type'] = None
            __props__['updated_by'] = None
            __props__['updated_on'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:authorization:DenyAssignment"), pulumi.Alias(type_="azure-native:authorization/v20200301preview:DenyAssignment"), pulumi.Alias(type_="azure-nextgen:authorization/v20200301preview:DenyAssignment")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(DenyAssignment, __self__).__init__(
            'azure-native:authorization:DenyAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DenyAssignment':
        """
        Get an existing DenyAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["condition"] = None
        __props__["condition_version"] = None
        __props__["created_by"] = None
        __props__["created_on"] = None
        __props__["deny_assignment_name"] = None
        __props__["description"] = None
        __props__["do_not_apply_to_child_scopes"] = None
        __props__["exclude_principals"] = None
        __props__["is_system_protected"] = None
        __props__["name"] = None
        __props__["permissions"] = None
        __props__["principals"] = None
        __props__["scope"] = None
        __props__["type"] = None
        __props__["updated_by"] = None
        __props__["updated_on"] = None
        return DenyAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Output[Optional[str]]:
        """
        The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionVersion")
    def condition_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of the condition. Currently accepted value is '2.0'
        """
        return pulumi.get(self, "condition_version")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        Id of the user who created the assignment
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Time it was created
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="denyAssignmentName")
    def deny_assignment_name(self) -> pulumi.Output[Optional[str]]:
        """
        The display name of the deny assignment.
        """
        return pulumi.get(self, "deny_assignment_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the deny assignment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="doNotApplyToChildScopes")
    def do_not_apply_to_child_scopes(self) -> pulumi.Output[Optional[bool]]:
        """
        Determines if the deny assignment applies to child scopes. Default value is false.
        """
        return pulumi.get(self, "do_not_apply_to_child_scopes")

    @property
    @pulumi.getter(name="excludePrincipals")
    def exclude_principals(self) -> pulumi.Output[Optional[Sequence['outputs.PrincipalResponse']]]:
        """
        Array of principals to which the deny assignment does not apply.
        """
        return pulumi.get(self, "exclude_principals")

    @property
    @pulumi.getter(name="isSystemProtected")
    def is_system_protected(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
        """
        return pulumi.get(self, "is_system_protected")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The deny assignment name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence['outputs.PermissionResponse']]:
        """
        An array of permissions that are denied by the deny assignment.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def principals(self) -> pulumi.Output[Sequence['outputs.PrincipalResponse']]:
        """
        Array of principals to which the deny assignment applies.
        """
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The deny assignment scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The deny assignment type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[str]:
        """
        Id of the user who updated the assignment
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> pulumi.Output[str]:
        """
        Time it was updated
        """
        return pulumi.get(self, "updated_on")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

