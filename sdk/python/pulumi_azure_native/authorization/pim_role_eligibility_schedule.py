# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PimRoleEligibilityScheduleArgs', 'PimRoleEligibilitySchedule']

@pulumi.input_type
class PimRoleEligibilityScheduleArgs:
    def __init__(__self__, *,
                 principal_id: pulumi.Input[str],
                 role_definition_id: pulumi.Input[str],
                 scope: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_version: Optional[pulumi.Input[str]] = None,
                 justification: Optional[pulumi.Input[str]] = None,
                 schedule_info: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs']] = None,
                 target_role_eligibility_schedule_id: Optional[pulumi.Input[str]] = None,
                 target_role_eligibility_schedule_instance_id: Optional[pulumi.Input[str]] = None,
                 ticket_info: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs']] = None):
        """
        The set of arguments for constructing a PimRoleEligibilitySchedule resource.
        :param pulumi.Input[str] principal_id: The principal ID.
        :param pulumi.Input[str] role_definition_id: The role definition ID.
        :param pulumi.Input[str] scope: The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
        :param pulumi.Input[str] condition: The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        :param pulumi.Input[str] condition_version: Version of the condition. Currently accepted value is '2.0'
        :param pulumi.Input[str] justification: Justification for the role eligibility
        :param pulumi.Input['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs'] schedule_info: Schedule info of the role eligibility schedule
        :param pulumi.Input[str] target_role_eligibility_schedule_id: The resultant role eligibility schedule id or the role eligibility schedule id being updated
        :param pulumi.Input[str] target_role_eligibility_schedule_instance_id: The role eligibility schedule instance id being updated
        :param pulumi.Input['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs'] ticket_info: Ticket Info of the role eligibility
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "role_definition_id", role_definition_id)
        pulumi.set(__self__, "scope", scope)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_version is not None:
            pulumi.set(__self__, "condition_version", condition_version)
        if justification is not None:
            pulumi.set(__self__, "justification", justification)
        if schedule_info is not None:
            pulumi.set(__self__, "schedule_info", schedule_info)
        if target_role_eligibility_schedule_id is not None:
            pulumi.set(__self__, "target_role_eligibility_schedule_id", target_role_eligibility_schedule_id)
        if target_role_eligibility_schedule_instance_id is not None:
            pulumi.set(__self__, "target_role_eligibility_schedule_instance_id", target_role_eligibility_schedule_instance_id)
        if ticket_info is not None:
            pulumi.set(__self__, "ticket_info", ticket_info)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[str]:
        """
        The principal ID.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> pulumi.Input[str]:
        """
        The role definition ID.
        """
        return pulumi.get(self, "role_definition_id")

    @role_definition_id.setter
    def role_definition_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_definition_id", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="conditionVersion")
    def condition_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the condition. Currently accepted value is '2.0'
        """
        return pulumi.get(self, "condition_version")

    @condition_version.setter
    def condition_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_version", value)

    @property
    @pulumi.getter
    def justification(self) -> Optional[pulumi.Input[str]]:
        """
        Justification for the role eligibility
        """
        return pulumi.get(self, "justification")

    @justification.setter
    def justification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "justification", value)

    @property
    @pulumi.getter(name="scheduleInfo")
    def schedule_info(self) -> Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs']]:
        """
        Schedule info of the role eligibility schedule
        """
        return pulumi.get(self, "schedule_info")

    @schedule_info.setter
    def schedule_info(self, value: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs']]):
        pulumi.set(self, "schedule_info", value)

    @property
    @pulumi.getter(name="targetRoleEligibilityScheduleId")
    def target_role_eligibility_schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resultant role eligibility schedule id or the role eligibility schedule id being updated
        """
        return pulumi.get(self, "target_role_eligibility_schedule_id")

    @target_role_eligibility_schedule_id.setter
    def target_role_eligibility_schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_role_eligibility_schedule_id", value)

    @property
    @pulumi.getter(name="targetRoleEligibilityScheduleInstanceId")
    def target_role_eligibility_schedule_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The role eligibility schedule instance id being updated
        """
        return pulumi.get(self, "target_role_eligibility_schedule_instance_id")

    @target_role_eligibility_schedule_instance_id.setter
    def target_role_eligibility_schedule_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_role_eligibility_schedule_instance_id", value)

    @property
    @pulumi.getter(name="ticketInfo")
    def ticket_info(self) -> Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs']]:
        """
        Ticket Info of the role eligibility
        """
        return pulumi.get(self, "ticket_info")

    @ticket_info.setter
    def ticket_info(self, value: Optional[pulumi.Input['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs']]):
        pulumi.set(self, "ticket_info", value)


class PimRoleEligibilitySchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_version: Optional[pulumi.Input[str]] = None,
                 justification: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 role_definition_id: Optional[pulumi.Input[str]] = None,
                 schedule_info: Optional[pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs', 'RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_role_eligibility_schedule_id: Optional[pulumi.Input[str]] = None,
                 target_role_eligibility_schedule_instance_id: Optional[pulumi.Input[str]] = None,
                 ticket_info: Optional[pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs', 'RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict']]] = None,
                 __props__=None):
        """
        A PIM (Privileged Identity Management) Role Eligibility Schedule.

        Role Eligibility Schedules are used to limit standing administrator access to privileged roles in Azure PIM. See
        [here](https://learn.microsoft.com/en-us/rest/api/authorization/privileged-role-eligibility-rest-sample) for details.

        A Role Eligibility Schedule is uniquely defined by scope, principal, and role. At present, only one instance of this
        resource can exist for a given scope|principal|role tuple.

        Note that this resource cannot be updated. Each change leads to a recreation.

        Internally, this resource uses the
        [Role Eligibility Schedule Requests](https://learn.microsoft.com/en-us/rest/api/authorization/role-eligibility-schedule-requests?view=rest-authorization-2020-10-01)
        API to create and delete the schedules.

        Azure REST API version: 2020-10-01.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] condition: The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        :param pulumi.Input[str] condition_version: Version of the condition. Currently accepted value is '2.0'
        :param pulumi.Input[str] justification: Justification for the role eligibility
        :param pulumi.Input[str] principal_id: The principal ID.
        :param pulumi.Input[str] role_definition_id: The role definition ID.
        :param pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs', 'RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict']] schedule_info: Schedule info of the role eligibility schedule
        :param pulumi.Input[str] scope: The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
        :param pulumi.Input[str] target_role_eligibility_schedule_id: The resultant role eligibility schedule id or the role eligibility schedule id being updated
        :param pulumi.Input[str] target_role_eligibility_schedule_instance_id: The role eligibility schedule instance id being updated
        :param pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs', 'RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict']] ticket_info: Ticket Info of the role eligibility
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PimRoleEligibilityScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A PIM (Privileged Identity Management) Role Eligibility Schedule.

        Role Eligibility Schedules are used to limit standing administrator access to privileged roles in Azure PIM. See
        [here](https://learn.microsoft.com/en-us/rest/api/authorization/privileged-role-eligibility-rest-sample) for details.

        A Role Eligibility Schedule is uniquely defined by scope, principal, and role. At present, only one instance of this
        resource can exist for a given scope|principal|role tuple.

        Note that this resource cannot be updated. Each change leads to a recreation.

        Internally, this resource uses the
        [Role Eligibility Schedule Requests](https://learn.microsoft.com/en-us/rest/api/authorization/role-eligibility-schedule-requests?view=rest-authorization-2020-10-01)
        API to create and delete the schedules.

        Azure REST API version: 2020-10-01.

        :param str resource_name: The name of the resource.
        :param PimRoleEligibilityScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PimRoleEligibilityScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_version: Optional[pulumi.Input[str]] = None,
                 justification: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 role_definition_id: Optional[pulumi.Input[str]] = None,
                 schedule_info: Optional[pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs', 'RoleEligibilityScheduleRequestPropertiesScheduleInfoArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_role_eligibility_schedule_id: Optional[pulumi.Input[str]] = None,
                 target_role_eligibility_schedule_instance_id: Optional[pulumi.Input[str]] = None,
                 ticket_info: Optional[pulumi.Input[Union['RoleEligibilityScheduleRequestPropertiesTicketInfoArgs', 'RoleEligibilityScheduleRequestPropertiesTicketInfoArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PimRoleEligibilityScheduleArgs.__new__(PimRoleEligibilityScheduleArgs)

            __props__.__dict__["condition"] = condition
            __props__.__dict__["condition_version"] = condition_version
            __props__.__dict__["justification"] = justification
            if principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'principal_id'")
            __props__.__dict__["principal_id"] = principal_id
            if role_definition_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_definition_id'")
            __props__.__dict__["role_definition_id"] = role_definition_id
            __props__.__dict__["schedule_info"] = schedule_info
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["target_role_eligibility_schedule_id"] = target_role_eligibility_schedule_id
            __props__.__dict__["target_role_eligibility_schedule_instance_id"] = target_role_eligibility_schedule_instance_id
            __props__.__dict__["ticket_info"] = ticket_info
            __props__.__dict__["approval_id"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["expanded_properties"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["principal_type"] = None
            __props__.__dict__["request_type"] = None
            __props__.__dict__["requestor_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:authorization/v20201001:PimRoleEligibilitySchedule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PimRoleEligibilitySchedule, __self__).__init__(
            'azure-native:authorization:PimRoleEligibilitySchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PimRoleEligibilitySchedule':
        """
        Get an existing PimRoleEligibilitySchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PimRoleEligibilityScheduleArgs.__new__(PimRoleEligibilityScheduleArgs)

        __props__.__dict__["approval_id"] = None
        __props__.__dict__["condition"] = None
        __props__.__dict__["condition_version"] = None
        __props__.__dict__["created_on"] = None
        __props__.__dict__["expanded_properties"] = None
        __props__.__dict__["justification"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["principal_id"] = None
        __props__.__dict__["principal_type"] = None
        __props__.__dict__["request_type"] = None
        __props__.__dict__["requestor_id"] = None
        __props__.__dict__["role_definition_id"] = None
        __props__.__dict__["schedule_info"] = None
        __props__.__dict__["scope"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["target_role_eligibility_schedule_id"] = None
        __props__.__dict__["target_role_eligibility_schedule_instance_id"] = None
        __props__.__dict__["ticket_info"] = None
        __props__.__dict__["type"] = None
        return PimRoleEligibilitySchedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="approvalId")
    def approval_id(self) -> pulumi.Output[str]:
        """
        The approvalId of the role eligibility schedule request.
        """
        return pulumi.get(self, "approval_id")

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Output[Optional[str]]:
        """
        The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionVersion")
    def condition_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of the condition. Currently accepted value is '2.0'
        """
        return pulumi.get(self, "condition_version")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        DateTime when role eligibility schedule request was created
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="expandedProperties")
    def expanded_properties(self) -> pulumi.Output['outputs.ExpandedPropertiesResponse']:
        """
        Additional properties of principal, scope and role definition
        """
        return pulumi.get(self, "expanded_properties")

    @property
    @pulumi.getter
    def justification(self) -> pulumi.Output[Optional[str]]:
        """
        Justification for the role eligibility
        """
        return pulumi.get(self, "justification")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The role eligibility schedule request name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[str]:
        """
        The principal ID.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Output[str]:
        """
        The principal type of the assigned principal ID.
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
        """
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="requestorId")
    def requestor_id(self) -> pulumi.Output[str]:
        """
        Id of the user who created this request
        """
        return pulumi.get(self, "requestor_id")

    @property
    @pulumi.getter(name="roleDefinitionId")
    def role_definition_id(self) -> pulumi.Output[str]:
        """
        The role definition ID.
        """
        return pulumi.get(self, "role_definition_id")

    @property
    @pulumi.getter(name="scheduleInfo")
    def schedule_info(self) -> pulumi.Output[Optional['outputs.RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo']]:
        """
        Schedule info of the role eligibility schedule
        """
        return pulumi.get(self, "schedule_info")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        The role eligibility schedule request scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the role eligibility schedule request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetRoleEligibilityScheduleId")
    def target_role_eligibility_schedule_id(self) -> pulumi.Output[Optional[str]]:
        """
        The resultant role eligibility schedule id or the role eligibility schedule id being updated
        """
        return pulumi.get(self, "target_role_eligibility_schedule_id")

    @property
    @pulumi.getter(name="targetRoleEligibilityScheduleInstanceId")
    def target_role_eligibility_schedule_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        The role eligibility schedule instance id being updated
        """
        return pulumi.get(self, "target_role_eligibility_schedule_instance_id")

    @property
    @pulumi.getter(name="ticketInfo")
    def ticket_info(self) -> pulumi.Output[Optional['outputs.RoleEligibilityScheduleRequestPropertiesResponseTicketInfo']]:
        """
        Ticket Info of the role eligibility
        """
        return pulumi.get(self, "ticket_info")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The role eligibility schedule request type.
        """
        return pulumi.get(self, "type")

