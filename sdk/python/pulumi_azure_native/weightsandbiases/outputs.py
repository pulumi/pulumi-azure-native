# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'InstancePropertiesResponse',
    'LiftrBaseMarketplaceDetailsResponse',
    'LiftrBaseOfferDetailsResponse',
    'LiftrBaseSingleSignOnPropertiesV2Response',
    'LiftrBaseUserDetailsResponse',
    'ManagedServiceIdentityResponse',
    'PartnerPropertiesResponse',
    'SystemDataResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class InstancePropertiesResponse(dict):
    """
    Properties specific to Instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "partnerProperties":
            suggest = "partner_properties"
        elif key == "singleSignOnProperties":
            suggest = "single_sign_on_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 marketplace: 'outputs.LiftrBaseMarketplaceDetailsResponse',
                 provisioning_state: str,
                 user: 'outputs.LiftrBaseUserDetailsResponse',
                 partner_properties: Optional['outputs.PartnerPropertiesResponse'] = None,
                 single_sign_on_properties: Optional['outputs.LiftrBaseSingleSignOnPropertiesV2Response'] = None):
        """
        Properties specific to Instance
        :param 'LiftrBaseMarketplaceDetailsResponse' marketplace: Marketplace details of the resource.
        :param str provisioning_state: Provisioning state of the resource.
        :param 'LiftrBaseUserDetailsResponse' user: Details of the user.
        :param 'PartnerPropertiesResponse' partner_properties: partner properties
        :param 'LiftrBaseSingleSignOnPropertiesV2Response' single_sign_on_properties: Single sign-on properties
        """
        pulumi.set(__self__, "marketplace", marketplace)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "user", user)
        if partner_properties is not None:
            pulumi.set(__self__, "partner_properties", partner_properties)
        if single_sign_on_properties is not None:
            pulumi.set(__self__, "single_sign_on_properties", single_sign_on_properties)

    @property
    @pulumi.getter
    def marketplace(self) -> 'outputs.LiftrBaseMarketplaceDetailsResponse':
        """
        Marketplace details of the resource.
        """
        return pulumi.get(self, "marketplace")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter
    def user(self) -> 'outputs.LiftrBaseUserDetailsResponse':
        """
        Details of the user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="partnerProperties")
    def partner_properties(self) -> Optional['outputs.PartnerPropertiesResponse']:
        """
        partner properties
        """
        return pulumi.get(self, "partner_properties")

    @property
    @pulumi.getter(name="singleSignOnProperties")
    def single_sign_on_properties(self) -> Optional['outputs.LiftrBaseSingleSignOnPropertiesV2Response']:
        """
        Single sign-on properties
        """
        return pulumi.get(self, "single_sign_on_properties")


@pulumi.output_type
class LiftrBaseMarketplaceDetailsResponse(dict):
    """
    Marketplace details for an organization
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "offerDetails":
            suggest = "offer_details"
        elif key == "subscriptionStatus":
            suggest = "subscription_status"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiftrBaseMarketplaceDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiftrBaseMarketplaceDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiftrBaseMarketplaceDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 offer_details: 'outputs.LiftrBaseOfferDetailsResponse',
                 subscription_status: str,
                 subscription_id: Optional[str] = None):
        """
        Marketplace details for an organization
        :param 'LiftrBaseOfferDetailsResponse' offer_details: Offer details for the marketplace that is selected by the user
        :param str subscription_status: Marketplace subscription status
        :param str subscription_id: Azure subscription id for the the marketplace offer is purchased from
        """
        pulumi.set(__self__, "offer_details", offer_details)
        pulumi.set(__self__, "subscription_status", subscription_status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="offerDetails")
    def offer_details(self) -> 'outputs.LiftrBaseOfferDetailsResponse':
        """
        Offer details for the marketplace that is selected by the user
        """
        return pulumi.get(self, "offer_details")

    @property
    @pulumi.getter(name="subscriptionStatus")
    def subscription_status(self) -> str:
        """
        Marketplace subscription status
        """
        return pulumi.get(self, "subscription_status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        Azure subscription id for the the marketplace offer is purchased from
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class LiftrBaseOfferDetailsResponse(dict):
    """
    Offer details for the marketplace that is selected by the user
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "offerId":
            suggest = "offer_id"
        elif key == "planId":
            suggest = "plan_id"
        elif key == "publisherId":
            suggest = "publisher_id"
        elif key == "planName":
            suggest = "plan_name"
        elif key == "termId":
            suggest = "term_id"
        elif key == "termUnit":
            suggest = "term_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiftrBaseOfferDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiftrBaseOfferDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiftrBaseOfferDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 offer_id: str,
                 plan_id: str,
                 publisher_id: str,
                 plan_name: Optional[str] = None,
                 term_id: Optional[str] = None,
                 term_unit: Optional[str] = None):
        """
        Offer details for the marketplace that is selected by the user
        :param str offer_id: Offer Id for the marketplace offer
        :param str plan_id: Plan Id for the marketplace offer
        :param str publisher_id: Publisher Id for the marketplace offer
        :param str plan_name: Plan Name for the marketplace offer
        :param str term_id: Plan Display Name for the marketplace offer
        :param str term_unit: Plan Display Name for the marketplace offer
        """
        pulumi.set(__self__, "offer_id", offer_id)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "publisher_id", publisher_id)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if term_id is not None:
            pulumi.set(__self__, "term_id", term_id)
        if term_unit is not None:
            pulumi.set(__self__, "term_unit", term_unit)

    @property
    @pulumi.getter(name="offerId")
    def offer_id(self) -> str:
        """
        Offer Id for the marketplace offer
        """
        return pulumi.get(self, "offer_id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        Plan Id for the marketplace offer
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> str:
        """
        Publisher Id for the marketplace offer
        """
        return pulumi.get(self, "publisher_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[str]:
        """
        Plan Name for the marketplace offer
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="termId")
    def term_id(self) -> Optional[str]:
        """
        Plan Display Name for the marketplace offer
        """
        return pulumi.get(self, "term_id")

    @property
    @pulumi.getter(name="termUnit")
    def term_unit(self) -> Optional[str]:
        """
        Plan Display Name for the marketplace offer
        """
        return pulumi.get(self, "term_unit")


@pulumi.output_type
class LiftrBaseSingleSignOnPropertiesV2Response(dict):
    """
    Properties specific to Single Sign On Resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aadDomains":
            suggest = "aad_domains"
        elif key == "enterpriseAppId":
            suggest = "enterprise_app_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiftrBaseSingleSignOnPropertiesV2Response. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiftrBaseSingleSignOnPropertiesV2Response.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiftrBaseSingleSignOnPropertiesV2Response.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 aad_domains: Optional[Sequence[str]] = None,
                 enterprise_app_id: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        """
        Properties specific to Single Sign On Resource
        :param str type: Type of Single Sign-On mechanism being used
        :param Sequence[str] aad_domains: List of AAD domains fetched from Microsoft Graph for user.
        :param str enterprise_app_id: AAD enterprise application Id used to setup SSO
        :param str state: State of the Single Sign On for the resource
        :param str url: URL for SSO to be used by the partner to redirect the user to their system
        """
        pulumi.set(__self__, "type", type)
        if aad_domains is not None:
            pulumi.set(__self__, "aad_domains", aad_domains)
        if enterprise_app_id is not None:
            pulumi.set(__self__, "enterprise_app_id", enterprise_app_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of Single Sign-On mechanism being used
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="aadDomains")
    def aad_domains(self) -> Optional[Sequence[str]]:
        """
        List of AAD domains fetched from Microsoft Graph for user.
        """
        return pulumi.get(self, "aad_domains")

    @property
    @pulumi.getter(name="enterpriseAppId")
    def enterprise_app_id(self) -> Optional[str]:
        """
        AAD enterprise application Id used to setup SSO
        """
        return pulumi.get(self, "enterprise_app_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State of the Single Sign On for the resource
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL for SSO to be used by the partner to redirect the user to their system
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiftrBaseUserDetailsResponse(dict):
    """
    User details for an organization
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailAddress":
            suggest = "email_address"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiftrBaseUserDetailsResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiftrBaseUserDetailsResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiftrBaseUserDetailsResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_address: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 phone_number: Optional[str] = None,
                 upn: Optional[str] = None):
        """
        User details for an organization
        :param str email_address: Email address of the user
        :param str first_name: First name of the user
        :param str last_name: Last name of the user
        :param str phone_number: User's phone number
        :param str upn: User's principal name
        """
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if upn is not None:
            pulumi.set(__self__, "upn", upn)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        """
        Email address of the user
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[str]:
        """
        User's phone number
        """
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter
    def upn(self) -> Optional[str]:
        """
        User's principal name
        """
        return pulumi.get(self, "upn")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: str,
                 tenant_id: str,
                 type: str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class PartnerPropertiesResponse(dict):
    """
    Partner's specific Properties
    """
    def __init__(__self__, *,
                 region: str,
                 subdomain: str):
        """
        Partner's specific Properties
        :param str region: The region of the instance
        :param str subdomain: The subdomain of the instance
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the instance
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        """
        The subdomain of the instance
        """
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_type: Optional[str] = None,
                 last_modified_at: Optional[str] = None,
                 last_modified_by: Optional[str] = None,
                 last_modified_by_type: Optional[str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param str created_at: The timestamp of resource creation (UTC).
        :param str created_by: The identity that created the resource.
        :param str created_by_type: The type of identity that created the resource.
        :param str last_modified_at: The timestamp of resource last modification (UTC)
        :param str last_modified_by: The identity that last modified the resource.
        :param str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 principal_id: str):
        """
        User assigned identity properties
        :param str client_id: The client ID of the assigned identity.
        :param str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


