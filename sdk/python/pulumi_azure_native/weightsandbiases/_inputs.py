# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'InstancePropertiesArgs',
    'InstancePropertiesArgsDict',
    'LiftrBaseMarketplaceDetailsArgs',
    'LiftrBaseMarketplaceDetailsArgsDict',
    'LiftrBaseOfferDetailsArgs',
    'LiftrBaseOfferDetailsArgsDict',
    'LiftrBaseSingleSignOnPropertiesV2Args',
    'LiftrBaseSingleSignOnPropertiesV2ArgsDict',
    'LiftrBaseUserDetailsArgs',
    'LiftrBaseUserDetailsArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'PartnerPropertiesArgs',
    'PartnerPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class InstancePropertiesArgsDict(TypedDict):
        """
        Properties specific to Instance
        """
        marketplace: pulumi.Input['LiftrBaseMarketplaceDetailsArgsDict']
        """
        Marketplace details of the resource.
        """
        user: pulumi.Input['LiftrBaseUserDetailsArgsDict']
        """
        Details of the user.
        """
        partner_properties: NotRequired[pulumi.Input['PartnerPropertiesArgsDict']]
        """
        partner properties
        """
        single_sign_on_properties: NotRequired[pulumi.Input['LiftrBaseSingleSignOnPropertiesV2ArgsDict']]
        """
        Single sign-on properties
        """
elif False:
    InstancePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstancePropertiesArgs:
    def __init__(__self__, *,
                 marketplace: pulumi.Input['LiftrBaseMarketplaceDetailsArgs'],
                 user: pulumi.Input['LiftrBaseUserDetailsArgs'],
                 partner_properties: Optional[pulumi.Input['PartnerPropertiesArgs']] = None,
                 single_sign_on_properties: Optional[pulumi.Input['LiftrBaseSingleSignOnPropertiesV2Args']] = None):
        """
        Properties specific to Instance
        :param pulumi.Input['LiftrBaseMarketplaceDetailsArgs'] marketplace: Marketplace details of the resource.
        :param pulumi.Input['LiftrBaseUserDetailsArgs'] user: Details of the user.
        :param pulumi.Input['PartnerPropertiesArgs'] partner_properties: partner properties
        :param pulumi.Input['LiftrBaseSingleSignOnPropertiesV2Args'] single_sign_on_properties: Single sign-on properties
        """
        pulumi.set(__self__, "marketplace", marketplace)
        pulumi.set(__self__, "user", user)
        if partner_properties is not None:
            pulumi.set(__self__, "partner_properties", partner_properties)
        if single_sign_on_properties is not None:
            pulumi.set(__self__, "single_sign_on_properties", single_sign_on_properties)

    @property
    @pulumi.getter
    def marketplace(self) -> pulumi.Input['LiftrBaseMarketplaceDetailsArgs']:
        """
        Marketplace details of the resource.
        """
        return pulumi.get(self, "marketplace")

    @marketplace.setter
    def marketplace(self, value: pulumi.Input['LiftrBaseMarketplaceDetailsArgs']):
        pulumi.set(self, "marketplace", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['LiftrBaseUserDetailsArgs']:
        """
        Details of the user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['LiftrBaseUserDetailsArgs']):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="partnerProperties")
    def partner_properties(self) -> Optional[pulumi.Input['PartnerPropertiesArgs']]:
        """
        partner properties
        """
        return pulumi.get(self, "partner_properties")

    @partner_properties.setter
    def partner_properties(self, value: Optional[pulumi.Input['PartnerPropertiesArgs']]):
        pulumi.set(self, "partner_properties", value)

    @property
    @pulumi.getter(name="singleSignOnProperties")
    def single_sign_on_properties(self) -> Optional[pulumi.Input['LiftrBaseSingleSignOnPropertiesV2Args']]:
        """
        Single sign-on properties
        """
        return pulumi.get(self, "single_sign_on_properties")

    @single_sign_on_properties.setter
    def single_sign_on_properties(self, value: Optional[pulumi.Input['LiftrBaseSingleSignOnPropertiesV2Args']]):
        pulumi.set(self, "single_sign_on_properties", value)


if not MYPY:
    class LiftrBaseMarketplaceDetailsArgsDict(TypedDict):
        """
        Marketplace details for an organization
        """
        offer_details: pulumi.Input['LiftrBaseOfferDetailsArgsDict']
        """
        Offer details for the marketplace that is selected by the user
        """
        subscription_id: NotRequired[pulumi.Input[str]]
        """
        Azure subscription id for the the marketplace offer is purchased from
        """
elif False:
    LiftrBaseMarketplaceDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LiftrBaseMarketplaceDetailsArgs:
    def __init__(__self__, *,
                 offer_details: pulumi.Input['LiftrBaseOfferDetailsArgs'],
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Marketplace details for an organization
        :param pulumi.Input['LiftrBaseOfferDetailsArgs'] offer_details: Offer details for the marketplace that is selected by the user
        :param pulumi.Input[str] subscription_id: Azure subscription id for the the marketplace offer is purchased from
        """
        pulumi.set(__self__, "offer_details", offer_details)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="offerDetails")
    def offer_details(self) -> pulumi.Input['LiftrBaseOfferDetailsArgs']:
        """
        Offer details for the marketplace that is selected by the user
        """
        return pulumi.get(self, "offer_details")

    @offer_details.setter
    def offer_details(self, value: pulumi.Input['LiftrBaseOfferDetailsArgs']):
        pulumi.set(self, "offer_details", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure subscription id for the the marketplace offer is purchased from
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


if not MYPY:
    class LiftrBaseOfferDetailsArgsDict(TypedDict):
        """
        Offer details for the marketplace that is selected by the user
        """
        offer_id: pulumi.Input[str]
        """
        Offer Id for the marketplace offer
        """
        plan_id: pulumi.Input[str]
        """
        Plan Id for the marketplace offer
        """
        publisher_id: pulumi.Input[str]
        """
        Publisher Id for the marketplace offer
        """
        plan_name: NotRequired[pulumi.Input[str]]
        """
        Plan Name for the marketplace offer
        """
        term_id: NotRequired[pulumi.Input[str]]
        """
        Plan Display Name for the marketplace offer
        """
        term_unit: NotRequired[pulumi.Input[str]]
        """
        Plan Display Name for the marketplace offer
        """
elif False:
    LiftrBaseOfferDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LiftrBaseOfferDetailsArgs:
    def __init__(__self__, *,
                 offer_id: pulumi.Input[str],
                 plan_id: pulumi.Input[str],
                 publisher_id: pulumi.Input[str],
                 plan_name: Optional[pulumi.Input[str]] = None,
                 term_id: Optional[pulumi.Input[str]] = None,
                 term_unit: Optional[pulumi.Input[str]] = None):
        """
        Offer details for the marketplace that is selected by the user
        :param pulumi.Input[str] offer_id: Offer Id for the marketplace offer
        :param pulumi.Input[str] plan_id: Plan Id for the marketplace offer
        :param pulumi.Input[str] publisher_id: Publisher Id for the marketplace offer
        :param pulumi.Input[str] plan_name: Plan Name for the marketplace offer
        :param pulumi.Input[str] term_id: Plan Display Name for the marketplace offer
        :param pulumi.Input[str] term_unit: Plan Display Name for the marketplace offer
        """
        pulumi.set(__self__, "offer_id", offer_id)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "publisher_id", publisher_id)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if term_id is not None:
            pulumi.set(__self__, "term_id", term_id)
        if term_unit is not None:
            pulumi.set(__self__, "term_unit", term_unit)

    @property
    @pulumi.getter(name="offerId")
    def offer_id(self) -> pulumi.Input[str]:
        """
        Offer Id for the marketplace offer
        """
        return pulumi.get(self, "offer_id")

    @offer_id.setter
    def offer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "offer_id", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[str]:
        """
        Plan Id for the marketplace offer
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="publisherId")
    def publisher_id(self) -> pulumi.Input[str]:
        """
        Publisher Id for the marketplace offer
        """
        return pulumi.get(self, "publisher_id")

    @publisher_id.setter
    def publisher_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher_id", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        Plan Name for the marketplace offer
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="termId")
    def term_id(self) -> Optional[pulumi.Input[str]]:
        """
        Plan Display Name for the marketplace offer
        """
        return pulumi.get(self, "term_id")

    @term_id.setter
    def term_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "term_id", value)

    @property
    @pulumi.getter(name="termUnit")
    def term_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Plan Display Name for the marketplace offer
        """
        return pulumi.get(self, "term_unit")

    @term_unit.setter
    def term_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "term_unit", value)


if not MYPY:
    class LiftrBaseSingleSignOnPropertiesV2ArgsDict(TypedDict):
        """
        Properties specific to Single Sign On Resource
        """
        type: pulumi.Input[Union[str, 'SingleSignOnType']]
        """
        Type of Single Sign-On mechanism being used
        """
        aad_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of AAD domains fetched from Microsoft Graph for user.
        """
        enterprise_app_id: NotRequired[pulumi.Input[str]]
        """
        AAD enterprise application Id used to setup SSO
        """
        state: NotRequired[pulumi.Input[Union[str, 'SingleSignOnStates']]]
        """
        State of the Single Sign On for the resource
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL for SSO to be used by the partner to redirect the user to their system
        """
elif False:
    LiftrBaseSingleSignOnPropertiesV2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LiftrBaseSingleSignOnPropertiesV2Args:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'SingleSignOnType']],
                 aad_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enterprise_app_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[Union[str, 'SingleSignOnStates']]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Properties specific to Single Sign On Resource
        :param pulumi.Input[Union[str, 'SingleSignOnType']] type: Type of Single Sign-On mechanism being used
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aad_domains: List of AAD domains fetched from Microsoft Graph for user.
        :param pulumi.Input[str] enterprise_app_id: AAD enterprise application Id used to setup SSO
        :param pulumi.Input[Union[str, 'SingleSignOnStates']] state: State of the Single Sign On for the resource
        :param pulumi.Input[str] url: URL for SSO to be used by the partner to redirect the user to their system
        """
        pulumi.set(__self__, "type", type)
        if aad_domains is not None:
            pulumi.set(__self__, "aad_domains", aad_domains)
        if enterprise_app_id is not None:
            pulumi.set(__self__, "enterprise_app_id", enterprise_app_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'SingleSignOnType']]:
        """
        Type of Single Sign-On mechanism being used
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'SingleSignOnType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="aadDomains")
    def aad_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AAD domains fetched from Microsoft Graph for user.
        """
        return pulumi.get(self, "aad_domains")

    @aad_domains.setter
    def aad_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aad_domains", value)

    @property
    @pulumi.getter(name="enterpriseAppId")
    def enterprise_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        AAD enterprise application Id used to setup SSO
        """
        return pulumi.get(self, "enterprise_app_id")

    @enterprise_app_id.setter
    def enterprise_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_app_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Union[str, 'SingleSignOnStates']]]:
        """
        State of the Single Sign On for the resource
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Union[str, 'SingleSignOnStates']]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL for SSO to be used by the partner to redirect the user to their system
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class LiftrBaseUserDetailsArgsDict(TypedDict):
        """
        User details for an organization
        """
        email_address: NotRequired[pulumi.Input[str]]
        """
        Email address of the user
        """
        first_name: NotRequired[pulumi.Input[str]]
        """
        First name of the user
        """
        last_name: NotRequired[pulumi.Input[str]]
        """
        Last name of the user
        """
        phone_number: NotRequired[pulumi.Input[str]]
        """
        User's phone number
        """
        upn: NotRequired[pulumi.Input[str]]
        """
        User's principal name
        """
elif False:
    LiftrBaseUserDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LiftrBaseUserDetailsArgs:
    def __init__(__self__, *,
                 email_address: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 upn: Optional[pulumi.Input[str]] = None):
        """
        User details for an organization
        :param pulumi.Input[str] email_address: Email address of the user
        :param pulumi.Input[str] first_name: First name of the user
        :param pulumi.Input[str] last_name: Last name of the user
        :param pulumi.Input[str] phone_number: User's phone number
        :param pulumi.Input[str] upn: User's principal name
        """
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if upn is not None:
            pulumi.set(__self__, "upn", upn)

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the user
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_address", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        User's phone number
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter
    def upn(self) -> Optional[pulumi.Input[str]]:
        """
        User's principal name
        """
        return pulumi.get(self, "upn")

    @upn.setter
    def upn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upn", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class PartnerPropertiesArgsDict(TypedDict):
        """
        Partner's specific Properties
        """
        region: pulumi.Input[Union[str, 'Region']]
        """
        The region of the instance
        """
        subdomain: pulumi.Input[str]
        """
        The subdomain of the instance
        """
elif False:
    PartnerPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PartnerPropertiesArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[Union[str, 'Region']],
                 subdomain: pulumi.Input[str]):
        """
        Partner's specific Properties
        :param pulumi.Input[Union[str, 'Region']] region: The region of the instance
        :param pulumi.Input[str] subdomain: The subdomain of the instance
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[Union[str, 'Region']]:
        """
        The region of the instance
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[Union[str, 'Region']]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        The subdomain of the instance
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)


