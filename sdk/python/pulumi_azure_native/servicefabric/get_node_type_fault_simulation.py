# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNodeTypeFaultSimulationResult',
    'AwaitableGetNodeTypeFaultSimulationResult',
    'get_node_type_fault_simulation',
    'get_node_type_fault_simulation_output',
]

@pulumi.output_type
class GetNodeTypeFaultSimulationResult:
    """
    Fault simulation object with status.
    """
    def __init__(__self__, details=None, end_time=None, simulation_id=None, start_time=None, status=None):
        if details and not isinstance(details, dict):
            raise TypeError("Expected argument 'details' to be a dict")
        pulumi.set(__self__, "details", details)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if simulation_id and not isinstance(simulation_id, str):
            raise TypeError("Expected argument 'simulation_id' to be a str")
        pulumi.set(__self__, "simulation_id", simulation_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def details(self) -> Optional['outputs.FaultSimulationDetailsResponse']:
        """
        Fault simulation details
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The end time of the fault simulation.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="simulationId")
    def simulation_id(self) -> Optional[str]:
        """
        unique identifier for the fault simulation.
        """
        return pulumi.get(self, "simulation_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The start time of the fault simulation.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Fault simulation status
        """
        return pulumi.get(self, "status")


class AwaitableGetNodeTypeFaultSimulationResult(GetNodeTypeFaultSimulationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNodeTypeFaultSimulationResult(
            details=self.details,
            end_time=self.end_time,
            simulation_id=self.simulation_id,
            start_time=self.start_time,
            status=self.status)


def get_node_type_fault_simulation(cluster_name: Optional[str] = None,
                                   node_type_name: Optional[str] = None,
                                   resource_group_name: Optional[str] = None,
                                   simulation_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNodeTypeFaultSimulationResult:
    """
    Gets a fault simulation by the simulationId.
    Azure REST API version: 2024-11-01-preview.


    :param str cluster_name: The name of the cluster resource.
    :param str node_type_name: The name of the node type.
    :param str resource_group_name: The name of the resource group.
    :param str simulation_id: unique identifier for the fault simulation.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['nodeTypeName'] = node_type_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['simulationId'] = simulation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:servicefabric:getNodeTypeFaultSimulation', __args__, opts=opts, typ=GetNodeTypeFaultSimulationResult).value

    return AwaitableGetNodeTypeFaultSimulationResult(
        details=pulumi.get(__ret__, 'details'),
        end_time=pulumi.get(__ret__, 'end_time'),
        simulation_id=pulumi.get(__ret__, 'simulation_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))
def get_node_type_fault_simulation_output(cluster_name: Optional[pulumi.Input[str]] = None,
                                          node_type_name: Optional[pulumi.Input[str]] = None,
                                          resource_group_name: Optional[pulumi.Input[str]] = None,
                                          simulation_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNodeTypeFaultSimulationResult]:
    """
    Gets a fault simulation by the simulationId.
    Azure REST API version: 2024-11-01-preview.


    :param str cluster_name: The name of the cluster resource.
    :param str node_type_name: The name of the node type.
    :param str resource_group_name: The name of the resource group.
    :param str simulation_id: unique identifier for the fault simulation.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['nodeTypeName'] = node_type_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['simulationId'] = simulation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:servicefabric:getNodeTypeFaultSimulation', __args__, opts=opts, typ=GetNodeTypeFaultSimulationResult)
    return __ret__.apply(lambda __response__: GetNodeTypeFaultSimulationResult(
        details=pulumi.get(__response__, 'details'),
        end_time=pulumi.get(__response__, 'end_time'),
        simulation_id=pulumi.get(__response__, 'simulation_id'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status')))
