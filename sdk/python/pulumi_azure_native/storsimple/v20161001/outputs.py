# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccessControlRecordPropertiesResponse',
    'AsymmetricEncryptedSecretResponse',
    'BackupScheduleGroupPropertiesResponse',
    'ChapPropertiesResponse',
    'FileServerPropertiesResponse',
    'FileSharePropertiesResponse',
    'ISCSIDiskPropertiesResponse',
    'ISCSIServerPropertiesResponse',
    'ManagerExtendedInfoPropertiesResponse',
    'ManagerIntrinsicSettingsResponse',
    'ManagerSkuResponse',
    'StorageAccountCredentialPropertiesResponse',
    'StorageDomainPropertiesResponse',
    'TimeResponse',
]

@pulumi.output_type
class AccessControlRecordPropertiesResponse(dict):
    """
    Properties of access control record
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initiatorName":
            suggest = "initiator_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessControlRecordPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessControlRecordPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessControlRecordPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initiator_name: str):
        """
        Properties of access control record
        :param str initiator_name: The Iscsi initiator name (IQN)
        """
        pulumi.set(__self__, "initiator_name", initiator_name)

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> str:
        """
        The Iscsi initiator name (IQN)
        """
        return pulumi.get(self, "initiator_name")


@pulumi.output_type
class AsymmetricEncryptedSecretResponse(dict):
    """
    This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly for future usage to potentially allow different entities encrypted using different algorithms.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "encryptionCertificateThumbprint":
            suggest = "encryption_certificate_thumbprint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsymmetricEncryptedSecretResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsymmetricEncryptedSecretResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsymmetricEncryptedSecretResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_algorithm: str,
                 value: str,
                 encryption_certificate_thumbprint: Optional[str] = None):
        """
        This class can be used as the Type for any secret entity represented as Password, CertThumbprint, Algorithm. This class is intended to be used when the secret is encrypted with an asymmetric key pair. The encryptionAlgorithm field is mainly for future usage to potentially allow different entities encrypted using different algorithms.
        :param str encryption_algorithm: Algorithm used to encrypt "Value"
        :param str value: The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint will be null.
        :param str encryption_certificate_thumbprint: Thumbprint certificate that was used to encrypt "Value"
        """
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "value", value)
        if encryption_certificate_thumbprint is not None:
            pulumi.set(__self__, "encryption_certificate_thumbprint", encryption_certificate_thumbprint)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> str:
        """
        Algorithm used to encrypt "Value"
        """
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the secret itself. If the secret is in plaintext then EncryptionAlgorithm will be none and EncryptionCertThumbprint will be null.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="encryptionCertificateThumbprint")
    def encryption_certificate_thumbprint(self) -> Optional[str]:
        """
        Thumbprint certificate that was used to encrypt "Value"
        """
        return pulumi.get(self, "encryption_certificate_thumbprint")


@pulumi.output_type
class BackupScheduleGroupPropertiesResponse(dict):
    """
    The Backup Schedule Group Properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupScheduleGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupScheduleGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupScheduleGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: 'outputs.TimeResponse'):
        """
        The Backup Schedule Group Properties
        :param 'TimeResponse' start_time: The start time. When this field is specified we will generate Default GrandFather Father Son Backup Schedules.
        """
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.TimeResponse':
        """
        The start time. When this field is specified we will generate Default GrandFather Father Son Backup Schedules.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ChapPropertiesResponse(dict):
    """
    Chap properties
    """
    def __init__(__self__, *,
                 password: 'outputs.AsymmetricEncryptedSecretResponse'):
        """
        Chap properties
        :param 'AsymmetricEncryptedSecretResponse' password: The chap password.
        """
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def password(self) -> 'outputs.AsymmetricEncryptedSecretResponse':
        """
        The chap password.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class FileServerPropertiesResponse(dict):
    """
    The file server properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupScheduleGroupId":
            suggest = "backup_schedule_group_id"
        elif key == "domainName":
            suggest = "domain_name"
        elif key == "storageDomainId":
            suggest = "storage_domain_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_schedule_group_id: str,
                 domain_name: str,
                 storage_domain_id: str,
                 description: Optional[str] = None):
        """
        The file server properties.
        :param str backup_schedule_group_id: The backup policy id.
        :param str domain_name: Domain of the file server
        :param str storage_domain_id: The storage domain id.
        :param str description: The description of the file server
        """
        pulumi.set(__self__, "backup_schedule_group_id", backup_schedule_group_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="backupScheduleGroupId")
    def backup_schedule_group_id(self) -> str:
        """
        The backup policy id.
        """
        return pulumi.get(self, "backup_schedule_group_id")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        Domain of the file server
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="storageDomainId")
    def storage_domain_id(self) -> str:
        """
        The storage domain id.
        """
        return pulumi.get(self, "storage_domain_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the file server
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class FileSharePropertiesResponse(dict):
    """
    The File Share.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUser":
            suggest = "admin_user"
        elif key == "dataPolicy":
            suggest = "data_policy"
        elif key == "localUsedCapacityInBytes":
            suggest = "local_used_capacity_in_bytes"
        elif key == "monitoringStatus":
            suggest = "monitoring_status"
        elif key == "provisionedCapacityInBytes":
            suggest = "provisioned_capacity_in_bytes"
        elif key == "shareStatus":
            suggest = "share_status"
        elif key == "usedCapacityInBytes":
            suggest = "used_capacity_in_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSharePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSharePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSharePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_user: str,
                 data_policy: str,
                 local_used_capacity_in_bytes: float,
                 monitoring_status: str,
                 provisioned_capacity_in_bytes: float,
                 share_status: str,
                 used_capacity_in_bytes: float,
                 description: Optional[str] = None):
        """
        The File Share.
        :param str admin_user: The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.
        :param str data_policy: The data policy
        :param float local_used_capacity_in_bytes: The local used capacity in Bytes.
        :param str monitoring_status: The monitoring status
        :param float provisioned_capacity_in_bytes: The total provisioned capacity in Bytes
        :param str share_status: The Share Status
        :param float used_capacity_in_bytes: The used capacity in Bytes.
        :param str description: Description for file share
        """
        pulumi.set(__self__, "admin_user", admin_user)
        pulumi.set(__self__, "data_policy", data_policy)
        pulumi.set(__self__, "local_used_capacity_in_bytes", local_used_capacity_in_bytes)
        pulumi.set(__self__, "monitoring_status", monitoring_status)
        pulumi.set(__self__, "provisioned_capacity_in_bytes", provisioned_capacity_in_bytes)
        pulumi.set(__self__, "share_status", share_status)
        pulumi.set(__self__, "used_capacity_in_bytes", used_capacity_in_bytes)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="adminUser")
    def admin_user(self) -> str:
        """
        The user/group who will have full permission in this share. Active directory email address. Example: xyz@contoso.com or Contoso\\xyz.
        """
        return pulumi.get(self, "admin_user")

    @property
    @pulumi.getter(name="dataPolicy")
    def data_policy(self) -> str:
        """
        The data policy
        """
        return pulumi.get(self, "data_policy")

    @property
    @pulumi.getter(name="localUsedCapacityInBytes")
    def local_used_capacity_in_bytes(self) -> float:
        """
        The local used capacity in Bytes.
        """
        return pulumi.get(self, "local_used_capacity_in_bytes")

    @property
    @pulumi.getter(name="monitoringStatus")
    def monitoring_status(self) -> str:
        """
        The monitoring status
        """
        return pulumi.get(self, "monitoring_status")

    @property
    @pulumi.getter(name="provisionedCapacityInBytes")
    def provisioned_capacity_in_bytes(self) -> float:
        """
        The total provisioned capacity in Bytes
        """
        return pulumi.get(self, "provisioned_capacity_in_bytes")

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> str:
        """
        The Share Status
        """
        return pulumi.get(self, "share_status")

    @property
    @pulumi.getter(name="usedCapacityInBytes")
    def used_capacity_in_bytes(self) -> float:
        """
        The used capacity in Bytes.
        """
        return pulumi.get(self, "used_capacity_in_bytes")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for file share
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ISCSIDiskPropertiesResponse(dict):
    """
    The iSCSI disk properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControlRecords":
            suggest = "access_control_records"
        elif key == "dataPolicy":
            suggest = "data_policy"
        elif key == "diskStatus":
            suggest = "disk_status"
        elif key == "localUsedCapacityInBytes":
            suggest = "local_used_capacity_in_bytes"
        elif key == "monitoringStatus":
            suggest = "monitoring_status"
        elif key == "provisionedCapacityInBytes":
            suggest = "provisioned_capacity_in_bytes"
        elif key == "usedCapacityInBytes":
            suggest = "used_capacity_in_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ISCSIDiskPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ISCSIDiskPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ISCSIDiskPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control_records: Sequence[str],
                 data_policy: str,
                 disk_status: str,
                 local_used_capacity_in_bytes: float,
                 monitoring_status: str,
                 provisioned_capacity_in_bytes: float,
                 used_capacity_in_bytes: float,
                 description: Optional[str] = None):
        """
        The iSCSI disk properties.
        :param Sequence[str] access_control_records: The access control records.
        :param str data_policy: The data policy.
        :param str disk_status: The disk status.
        :param float local_used_capacity_in_bytes: The local used capacity in bytes.
        :param str monitoring_status: The monitoring.
        :param float provisioned_capacity_in_bytes: The provisioned capacity in bytes.
        :param float used_capacity_in_bytes: The used capacity in bytes.
        :param str description: The description.
        """
        pulumi.set(__self__, "access_control_records", access_control_records)
        pulumi.set(__self__, "data_policy", data_policy)
        pulumi.set(__self__, "disk_status", disk_status)
        pulumi.set(__self__, "local_used_capacity_in_bytes", local_used_capacity_in_bytes)
        pulumi.set(__self__, "monitoring_status", monitoring_status)
        pulumi.set(__self__, "provisioned_capacity_in_bytes", provisioned_capacity_in_bytes)
        pulumi.set(__self__, "used_capacity_in_bytes", used_capacity_in_bytes)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="accessControlRecords")
    def access_control_records(self) -> Sequence[str]:
        """
        The access control records.
        """
        return pulumi.get(self, "access_control_records")

    @property
    @pulumi.getter(name="dataPolicy")
    def data_policy(self) -> str:
        """
        The data policy.
        """
        return pulumi.get(self, "data_policy")

    @property
    @pulumi.getter(name="diskStatus")
    def disk_status(self) -> str:
        """
        The disk status.
        """
        return pulumi.get(self, "disk_status")

    @property
    @pulumi.getter(name="localUsedCapacityInBytes")
    def local_used_capacity_in_bytes(self) -> float:
        """
        The local used capacity in bytes.
        """
        return pulumi.get(self, "local_used_capacity_in_bytes")

    @property
    @pulumi.getter(name="monitoringStatus")
    def monitoring_status(self) -> str:
        """
        The monitoring.
        """
        return pulumi.get(self, "monitoring_status")

    @property
    @pulumi.getter(name="provisionedCapacityInBytes")
    def provisioned_capacity_in_bytes(self) -> float:
        """
        The provisioned capacity in bytes.
        """
        return pulumi.get(self, "provisioned_capacity_in_bytes")

    @property
    @pulumi.getter(name="usedCapacityInBytes")
    def used_capacity_in_bytes(self) -> float:
        """
        The used capacity in bytes.
        """
        return pulumi.get(self, "used_capacity_in_bytes")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ISCSIServerPropertiesResponse(dict):
    """
    The iSCSI server properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupScheduleGroupId":
            suggest = "backup_schedule_group_id"
        elif key == "storageDomainId":
            suggest = "storage_domain_id"
        elif key == "chapId":
            suggest = "chap_id"
        elif key == "reverseChapId":
            suggest = "reverse_chap_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ISCSIServerPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ISCSIServerPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ISCSIServerPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_schedule_group_id: str,
                 storage_domain_id: str,
                 chap_id: Optional[str] = None,
                 description: Optional[str] = None,
                 reverse_chap_id: Optional[str] = None):
        """
        The iSCSI server properties.
        :param str backup_schedule_group_id: The backup policy id.
        :param str storage_domain_id: The storage domain id.
        :param str chap_id: The chap id.
        :param str description: The description.
        :param str reverse_chap_id: The reverse chap id.
        """
        pulumi.set(__self__, "backup_schedule_group_id", backup_schedule_group_id)
        pulumi.set(__self__, "storage_domain_id", storage_domain_id)
        if chap_id is not None:
            pulumi.set(__self__, "chap_id", chap_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if reverse_chap_id is not None:
            pulumi.set(__self__, "reverse_chap_id", reverse_chap_id)

    @property
    @pulumi.getter(name="backupScheduleGroupId")
    def backup_schedule_group_id(self) -> str:
        """
        The backup policy id.
        """
        return pulumi.get(self, "backup_schedule_group_id")

    @property
    @pulumi.getter(name="storageDomainId")
    def storage_domain_id(self) -> str:
        """
        The storage domain id.
        """
        return pulumi.get(self, "storage_domain_id")

    @property
    @pulumi.getter(name="chapId")
    def chap_id(self) -> Optional[str]:
        """
        The chap id.
        """
        return pulumi.get(self, "chap_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="reverseChapId")
    def reverse_chap_id(self) -> Optional[str]:
        """
        The reverse chap id.
        """
        return pulumi.get(self, "reverse_chap_id")


@pulumi.output_type
class ManagerExtendedInfoPropertiesResponse(dict):
    """
    Properties of the ManagerExtendedInfo
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "integrityKey":
            suggest = "integrity_key"
        elif key == "encryptionKey":
            suggest = "encryption_key"
        elif key == "encryptionKeyThumbprint":
            suggest = "encryption_key_thumbprint"
        elif key == "portalCertificateThumbprint":
            suggest = "portal_certificate_thumbprint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagerExtendedInfoPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagerExtendedInfoPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagerExtendedInfoPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: str,
                 integrity_key: str,
                 encryption_key: Optional[str] = None,
                 encryption_key_thumbprint: Optional[str] = None,
                 portal_certificate_thumbprint: Optional[str] = None,
                 version: Optional[str] = None):
        """
        Properties of the ManagerExtendedInfo
        :param str algorithm: Represents the encryption algorithm used to encrypt the other keys. None - if EncryptionKey is saved in plain text format. AlgorithmName - if encryption is used
        :param str integrity_key: Represents the CIK of the resource
        :param str encryption_key: Represents the CEK of the resource
        :param str encryption_key_thumbprint: Represents the Cert thumbprint that was used to encrypt the CEK
        :param str portal_certificate_thumbprint: Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
        :param str version: Represents the version of the ExtendedInfo object being persisted
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "integrity_key", integrity_key)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_key_thumbprint is not None:
            pulumi.set(__self__, "encryption_key_thumbprint", encryption_key_thumbprint)
        if portal_certificate_thumbprint is not None:
            pulumi.set(__self__, "portal_certificate_thumbprint", portal_certificate_thumbprint)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        Represents the encryption algorithm used to encrypt the other keys. None - if EncryptionKey is saved in plain text format. AlgorithmName - if encryption is used
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="integrityKey")
    def integrity_key(self) -> str:
        """
        Represents the CIK of the resource
        """
        return pulumi.get(self, "integrity_key")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        """
        Represents the CEK of the resource
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionKeyThumbprint")
    def encryption_key_thumbprint(self) -> Optional[str]:
        """
        Represents the Cert thumbprint that was used to encrypt the CEK
        """
        return pulumi.get(self, "encryption_key_thumbprint")

    @property
    @pulumi.getter(name="portalCertificateThumbprint")
    def portal_certificate_thumbprint(self) -> Optional[str]:
        """
        Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
        """
        return pulumi.get(self, "portal_certificate_thumbprint")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Represents the version of the ExtendedInfo object being persisted
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ManagerIntrinsicSettingsResponse(dict):
    """
    Intrinsic settings which refers to the type of the StorSimple manager
    """
    def __init__(__self__, *,
                 type: str):
        """
        Intrinsic settings which refers to the type of the StorSimple manager
        :param str type: Refers to the type of the StorSimple Manager
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Refers to the type of the StorSimple Manager
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ManagerSkuResponse(dict):
    """
    The Sku.
    """
    def __init__(__self__, *,
                 name: str):
        """
        The Sku.
        :param str name: Refers to the sku name which should be "Standard"
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Refers to the sku name which should be "Standard"
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StorageAccountCredentialPropertiesResponse(dict):
    """
    Storage account properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudType":
            suggest = "cloud_type"
        elif key == "enableSSL":
            suggest = "enable_ssl"
        elif key == "endPoint":
            suggest = "end_point"
        elif key == "accessKey":
            suggest = "access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageAccountCredentialPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageAccountCredentialPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageAccountCredentialPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_type: str,
                 enable_ssl: str,
                 end_point: str,
                 login: str,
                 access_key: Optional['outputs.AsymmetricEncryptedSecretResponse'] = None,
                 location: Optional[str] = None):
        """
        Storage account properties
        :param str cloud_type: The cloud service provider
        :param str enable_ssl: SSL needs to be enabled or not
        :param str end_point: The storage endpoint
        :param str login: The storage account login
        :param 'AsymmetricEncryptedSecretResponse' access_key: The details of the storage account password
        :param str location: The storage account's geo location
        """
        pulumi.set(__self__, "cloud_type", cloud_type)
        pulumi.set(__self__, "enable_ssl", enable_ssl)
        pulumi.set(__self__, "end_point", end_point)
        pulumi.set(__self__, "login", login)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="cloudType")
    def cloud_type(self) -> str:
        """
        The cloud service provider
        """
        return pulumi.get(self, "cloud_type")

    @property
    @pulumi.getter(name="enableSSL")
    def enable_ssl(self) -> str:
        """
        SSL needs to be enabled or not
        """
        return pulumi.get(self, "enable_ssl")

    @property
    @pulumi.getter(name="endPoint")
    def end_point(self) -> str:
        """
        The storage endpoint
        """
        return pulumi.get(self, "end_point")

    @property
    @pulumi.getter
    def login(self) -> str:
        """
        The storage account login
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional['outputs.AsymmetricEncryptedSecretResponse']:
        """
        The details of the storage account password
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The storage account's geo location
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class StorageDomainPropertiesResponse(dict):
    """
    The storage domain properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionStatus":
            suggest = "encryption_status"
        elif key == "storageAccountCredentialIds":
            suggest = "storage_account_credential_ids"
        elif key == "encryptionKey":
            suggest = "encryption_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageDomainPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageDomainPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageDomainPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_status: str,
                 storage_account_credential_ids: Sequence[str],
                 encryption_key: Optional['outputs.AsymmetricEncryptedSecretResponse'] = None):
        """
        The storage domain properties.
        :param str encryption_status: The encryption status "Enabled | Disabled".
        :param Sequence[str] storage_account_credential_ids: The storage account credentials.
        :param 'AsymmetricEncryptedSecretResponse' encryption_key: The encryption key used to encrypt the data. This is a user secret.
        """
        pulumi.set(__self__, "encryption_status", encryption_status)
        pulumi.set(__self__, "storage_account_credential_ids", storage_account_credential_ids)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)

    @property
    @pulumi.getter(name="encryptionStatus")
    def encryption_status(self) -> str:
        """
        The encryption status "Enabled | Disabled".
        """
        return pulumi.get(self, "encryption_status")

    @property
    @pulumi.getter(name="storageAccountCredentialIds")
    def storage_account_credential_ids(self) -> Sequence[str]:
        """
        The storage account credentials.
        """
        return pulumi.get(self, "storage_account_credential_ids")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional['outputs.AsymmetricEncryptedSecretResponse']:
        """
        The encryption key used to encrypt the data. This is a user secret.
        """
        return pulumi.get(self, "encryption_key")


@pulumi.output_type
class TimeResponse(dict):
    """
    The Time.
    """
    def __init__(__self__, *,
                 hour: int,
                 minute: int):
        """
        The Time.
        :param int hour: The hour.
        :param int minute: The minute.
        """
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "minute", minute)

    @property
    @pulumi.getter
    def hour(self) -> int:
        """
        The hour.
        """
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def minute(self) -> int:
        """
        The minute.
        """
        return pulumi.get(self, "minute")


