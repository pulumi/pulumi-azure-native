# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['IscsiDiskArgs', 'IscsiDisk']

@pulumi.input_type
class IscsiDiskArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 iscsi_server_name: pulumi.Input[str],
                 manager_name: pulumi.Input[str],
                 properties: pulumi.Input['ISCSIDiskPropertiesArgs'],
                 resource_group_name: pulumi.Input[str],
                 disk_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IscsiDisk resource.
        :param pulumi.Input[str] device_name: The device name.
        :param pulumi.Input[str] iscsi_server_name: The iSCSI server name.
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input['ISCSIDiskPropertiesArgs'] properties: The properties.
        :param pulumi.Input[str] resource_group_name: The resource group name
        :param pulumi.Input[str] disk_name: The disk name.
        """
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "iscsi_server_name", iscsi_server_name)
        pulumi.set(__self__, "manager_name", manager_name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        The device name.
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="iscsiServerName")
    def iscsi_server_name(self) -> pulumi.Input[str]:
        """
        The iSCSI server name.
        """
        return pulumi.get(self, "iscsi_server_name")

    @iscsi_server_name.setter
    def iscsi_server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "iscsi_server_name", value)

    @property
    @pulumi.getter(name="managerName")
    def manager_name(self) -> pulumi.Input[str]:
        """
        The manager name
        """
        return pulumi.get(self, "manager_name")

    @manager_name.setter
    def manager_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "manager_name", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['ISCSIDiskPropertiesArgs']:
        """
        The properties.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['ISCSIDiskPropertiesArgs']):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The resource group name
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        The disk name.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_name", value)


warnings.warn("""Version 2016-10-01 will be removed in v2 of the provider.""", DeprecationWarning)


class IscsiDisk(pulumi.CustomResource):
    warnings.warn("""Version 2016-10-01 will be removed in v2 of the provider.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 iscsi_server_name: Optional[pulumi.Input[str]] = None,
                 manager_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['ISCSIDiskPropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The iSCSI disk.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device_name: The device name.
        :param pulumi.Input[str] disk_name: The disk name.
        :param pulumi.Input[str] iscsi_server_name: The iSCSI server name.
        :param pulumi.Input[str] manager_name: The manager name
        :param pulumi.Input[pulumi.InputType['ISCSIDiskPropertiesArgs']] properties: The properties.
        :param pulumi.Input[str] resource_group_name: The resource group name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IscsiDiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The iSCSI disk.

        :param str resource_name: The name of the resource.
        :param IscsiDiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IscsiDiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 iscsi_server_name: Optional[pulumi.Input[str]] = None,
                 manager_name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[pulumi.InputType['ISCSIDiskPropertiesArgs']]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""IscsiDisk is deprecated: Version 2016-10-01 will be removed in v2 of the provider.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IscsiDiskArgs.__new__(IscsiDiskArgs)

            if device_name is None and not opts.urn:
                raise TypeError("Missing required property 'device_name'")
            __props__.__dict__["device_name"] = device_name
            __props__.__dict__["disk_name"] = disk_name
            if iscsi_server_name is None and not opts.urn:
                raise TypeError("Missing required property 'iscsi_server_name'")
            __props__.__dict__["iscsi_server_name"] = iscsi_server_name
            if manager_name is None and not opts.urn:
                raise TypeError("Missing required property 'manager_name'")
            __props__.__dict__["manager_name"] = manager_name
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        super(IscsiDisk, __self__).__init__(
            'azure-native:storsimple/v20161001:IscsiDisk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IscsiDisk':
        """
        Get an existing IscsiDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IscsiDiskArgs.__new__(IscsiDiskArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["type"] = None
        return IscsiDisk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.ISCSIDiskPropertiesResponse']:
        """
        The properties.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type.
        """
        return pulumi.get(self, "type")

