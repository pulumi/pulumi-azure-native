# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkTapRuleResult',
    'AwaitableGetNetworkTapRuleResult',
    'get_network_tap_rule',
    'get_network_tap_rule_output',
]

@pulumi.output_type
class GetNetworkTapRuleResult:
    """
    The NetworkTapRule resource definition.
    """
    def __init__(__self__, administrative_state=None, annotation=None, configuration_state=None, configuration_type=None, dynamic_match_configurations=None, id=None, last_synced_time=None, location=None, match_configurations=None, name=None, network_tap_id=None, polling_interval_in_seconds=None, provisioning_state=None, system_data=None, tags=None, tap_rules_url=None, type=None):
        if administrative_state and not isinstance(administrative_state, str):
            raise TypeError("Expected argument 'administrative_state' to be a str")
        pulumi.set(__self__, "administrative_state", administrative_state)
        if annotation and not isinstance(annotation, str):
            raise TypeError("Expected argument 'annotation' to be a str")
        pulumi.set(__self__, "annotation", annotation)
        if configuration_state and not isinstance(configuration_state, str):
            raise TypeError("Expected argument 'configuration_state' to be a str")
        pulumi.set(__self__, "configuration_state", configuration_state)
        if configuration_type and not isinstance(configuration_type, str):
            raise TypeError("Expected argument 'configuration_type' to be a str")
        pulumi.set(__self__, "configuration_type", configuration_type)
        if dynamic_match_configurations and not isinstance(dynamic_match_configurations, list):
            raise TypeError("Expected argument 'dynamic_match_configurations' to be a list")
        pulumi.set(__self__, "dynamic_match_configurations", dynamic_match_configurations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_synced_time and not isinstance(last_synced_time, str):
            raise TypeError("Expected argument 'last_synced_time' to be a str")
        pulumi.set(__self__, "last_synced_time", last_synced_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if match_configurations and not isinstance(match_configurations, list):
            raise TypeError("Expected argument 'match_configurations' to be a list")
        pulumi.set(__self__, "match_configurations", match_configurations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_tap_id and not isinstance(network_tap_id, str):
            raise TypeError("Expected argument 'network_tap_id' to be a str")
        pulumi.set(__self__, "network_tap_id", network_tap_id)
        if polling_interval_in_seconds and not isinstance(polling_interval_in_seconds, int):
            raise TypeError("Expected argument 'polling_interval_in_seconds' to be a int")
        pulumi.set(__self__, "polling_interval_in_seconds", polling_interval_in_seconds)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if tap_rules_url and not isinstance(tap_rules_url, str):
            raise TypeError("Expected argument 'tap_rules_url' to be a str")
        pulumi.set(__self__, "tap_rules_url", tap_rules_url)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="administrativeState")
    def administrative_state(self) -> str:
        """
        Administrative state of the resource.
        """
        return pulumi.get(self, "administrative_state")

    @property
    @pulumi.getter
    def annotation(self) -> Optional[str]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> str:
        """
        Configuration state of the resource.
        """
        return pulumi.get(self, "configuration_state")

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        Input method to configure Network Tap Rule.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="dynamicMatchConfigurations")
    def dynamic_match_configurations(self) -> Optional[Sequence['outputs.CommonDynamicMatchConfigurationResponse']]:
        """
        List of dynamic match configurations.
        """
        return pulumi.get(self, "dynamic_match_configurations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastSyncedTime")
    def last_synced_time(self) -> str:
        """
        The last sync timestamp.
        """
        return pulumi.get(self, "last_synced_time")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="matchConfigurations")
    def match_configurations(self) -> Optional[Sequence['outputs.NetworkTapRuleMatchConfigurationResponse']]:
        """
        List of match configurations.
        """
        return pulumi.get(self, "match_configurations")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTapId")
    def network_tap_id(self) -> str:
        """
        The ARM resource Id of the NetworkTap.
        """
        return pulumi.get(self, "network_tap_id")

    @property
    @pulumi.getter(name="pollingIntervalInSeconds")
    def polling_interval_in_seconds(self) -> Optional[int]:
        """
        Polling interval in seconds.
        """
        return pulumi.get(self, "polling_interval_in_seconds")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tapRulesUrl")
    def tap_rules_url(self) -> Optional[str]:
        """
        Network Tap Rules file URL.
        """
        return pulumi.get(self, "tap_rules_url")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetNetworkTapRuleResult(GetNetworkTapRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkTapRuleResult(
            administrative_state=self.administrative_state,
            annotation=self.annotation,
            configuration_state=self.configuration_state,
            configuration_type=self.configuration_type,
            dynamic_match_configurations=self.dynamic_match_configurations,
            id=self.id,
            last_synced_time=self.last_synced_time,
            location=self.location,
            match_configurations=self.match_configurations,
            name=self.name,
            network_tap_id=self.network_tap_id,
            polling_interval_in_seconds=self.polling_interval_in_seconds,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            tags=self.tags,
            tap_rules_url=self.tap_rules_url,
            type=self.type)


def get_network_tap_rule(network_tap_rule_name: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkTapRuleResult:
    """
    Get Network Tap Rule resource details.
    Azure REST API version: 2023-06-15.


    :param str network_tap_rule_name: Name of the Network Tap Rule.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['networkTapRuleName'] = network_tap_rule_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:managednetworkfabric:getNetworkTapRule', __args__, opts=opts, typ=GetNetworkTapRuleResult).value

    return AwaitableGetNetworkTapRuleResult(
        administrative_state=pulumi.get(__ret__, 'administrative_state'),
        annotation=pulumi.get(__ret__, 'annotation'),
        configuration_state=pulumi.get(__ret__, 'configuration_state'),
        configuration_type=pulumi.get(__ret__, 'configuration_type'),
        dynamic_match_configurations=pulumi.get(__ret__, 'dynamic_match_configurations'),
        id=pulumi.get(__ret__, 'id'),
        last_synced_time=pulumi.get(__ret__, 'last_synced_time'),
        location=pulumi.get(__ret__, 'location'),
        match_configurations=pulumi.get(__ret__, 'match_configurations'),
        name=pulumi.get(__ret__, 'name'),
        network_tap_id=pulumi.get(__ret__, 'network_tap_id'),
        polling_interval_in_seconds=pulumi.get(__ret__, 'polling_interval_in_seconds'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        tap_rules_url=pulumi.get(__ret__, 'tap_rules_url'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_network_tap_rule)
def get_network_tap_rule_output(network_tap_rule_name: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkTapRuleResult]:
    """
    Get Network Tap Rule resource details.
    Azure REST API version: 2023-06-15.


    :param str network_tap_rule_name: Name of the Network Tap Rule.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
