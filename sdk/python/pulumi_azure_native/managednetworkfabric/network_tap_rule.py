# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NetworkTapRuleArgs', 'NetworkTapRule']

@pulumi.input_type
class NetworkTapRuleArgs:
    def __init__(__self__, *,
                 configuration_type: pulumi.Input[Union[str, 'ConfigurationType']],
                 resource_group_name: pulumi.Input[str],
                 annotation: Optional[pulumi.Input[str]] = None,
                 dynamic_match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CommonDynamicMatchConfigurationArgs']]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkTapRuleMatchConfigurationArgs']]]] = None,
                 network_tap_rule_name: Optional[pulumi.Input[str]] = None,
                 polling_interval_in_seconds: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tap_rules_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkTapRule resource.
        :param pulumi.Input[Union[str, 'ConfigurationType']] configuration_type: Input method to configure Network Tap Rule.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[str] annotation: Switch configuration description.
        :param pulumi.Input[Sequence[pulumi.Input['CommonDynamicMatchConfigurationArgs']]] dynamic_match_configurations: List of dynamic match configurations.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Sequence[pulumi.Input['NetworkTapRuleMatchConfigurationArgs']]] match_configurations: List of match configurations.
        :param pulumi.Input[str] network_tap_rule_name: Name of the Network Tap Rule.
        :param pulumi.Input[int] polling_interval_in_seconds: Polling interval in seconds.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] tap_rules_url: Network Tap Rules file URL.
        """
        pulumi.set(__self__, "configuration_type", configuration_type)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if annotation is not None:
            pulumi.set(__self__, "annotation", annotation)
        if dynamic_match_configurations is not None:
            pulumi.set(__self__, "dynamic_match_configurations", dynamic_match_configurations)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if match_configurations is not None:
            pulumi.set(__self__, "match_configurations", match_configurations)
        if network_tap_rule_name is not None:
            pulumi.set(__self__, "network_tap_rule_name", network_tap_rule_name)
        if polling_interval_in_seconds is None:
            polling_interval_in_seconds = 30
        if polling_interval_in_seconds is not None:
            pulumi.set(__self__, "polling_interval_in_seconds", polling_interval_in_seconds)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tap_rules_url is not None:
            pulumi.set(__self__, "tap_rules_url", tap_rules_url)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Input[Union[str, 'ConfigurationType']]:
        """
        Input method to configure Network Tap Rule.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: pulumi.Input[Union[str, 'ConfigurationType']]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter
    def annotation(self) -> Optional[pulumi.Input[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @annotation.setter
    def annotation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation", value)

    @property
    @pulumi.getter(name="dynamicMatchConfigurations")
    def dynamic_match_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommonDynamicMatchConfigurationArgs']]]]:
        """
        List of dynamic match configurations.
        """
        return pulumi.get(self, "dynamic_match_configurations")

    @dynamic_match_configurations.setter
    def dynamic_match_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommonDynamicMatchConfigurationArgs']]]]):
        pulumi.set(self, "dynamic_match_configurations", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="matchConfigurations")
    def match_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkTapRuleMatchConfigurationArgs']]]]:
        """
        List of match configurations.
        """
        return pulumi.get(self, "match_configurations")

    @match_configurations.setter
    def match_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkTapRuleMatchConfigurationArgs']]]]):
        pulumi.set(self, "match_configurations", value)

    @property
    @pulumi.getter(name="networkTapRuleName")
    def network_tap_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Network Tap Rule.
        """
        return pulumi.get(self, "network_tap_rule_name")

    @network_tap_rule_name.setter
    def network_tap_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_tap_rule_name", value)

    @property
    @pulumi.getter(name="pollingIntervalInSeconds")
    def polling_interval_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Polling interval in seconds.
        """
        return pulumi.get(self, "polling_interval_in_seconds")

    @polling_interval_in_seconds.setter
    def polling_interval_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_interval_in_seconds", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tapRulesUrl")
    def tap_rules_url(self) -> Optional[pulumi.Input[str]]:
        """
        Network Tap Rules file URL.
        """
        return pulumi.get(self, "tap_rules_url")

    @tap_rules_url.setter
    def tap_rules_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tap_rules_url", value)


class NetworkTapRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotation: Optional[pulumi.Input[str]] = None,
                 configuration_type: Optional[pulumi.Input[Union[str, 'ConfigurationType']]] = None,
                 dynamic_match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommonDynamicMatchConfigurationArgs']]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkTapRuleMatchConfigurationArgs']]]]] = None,
                 network_tap_rule_name: Optional[pulumi.Input[str]] = None,
                 polling_interval_in_seconds: Optional[pulumi.Input[int]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tap_rules_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The NetworkTapRule resource definition.
        Azure REST API version: 2023-06-15.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] annotation: Switch configuration description.
        :param pulumi.Input[Union[str, 'ConfigurationType']] configuration_type: Input method to configure Network Tap Rule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommonDynamicMatchConfigurationArgs']]]] dynamic_match_configurations: List of dynamic match configurations.
        :param pulumi.Input[str] location: The geo-location where the resource lives
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkTapRuleMatchConfigurationArgs']]]] match_configurations: List of match configurations.
        :param pulumi.Input[str] network_tap_rule_name: Name of the Network Tap Rule.
        :param pulumi.Input[int] polling_interval_in_seconds: Polling interval in seconds.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags.
        :param pulumi.Input[str] tap_rules_url: Network Tap Rules file URL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkTapRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The NetworkTapRule resource definition.
        Azure REST API version: 2023-06-15.

        :param str resource_name: The name of the resource.
        :param NetworkTapRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkTapRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotation: Optional[pulumi.Input[str]] = None,
                 configuration_type: Optional[pulumi.Input[Union[str, 'ConfigurationType']]] = None,
                 dynamic_match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommonDynamicMatchConfigurationArgs']]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 match_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkTapRuleMatchConfigurationArgs']]]]] = None,
                 network_tap_rule_name: Optional[pulumi.Input[str]] = None,
                 polling_interval_in_seconds: Optional[pulumi.Input[int]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tap_rules_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkTapRuleArgs.__new__(NetworkTapRuleArgs)

            __props__.__dict__["annotation"] = annotation
            if configuration_type is None and not opts.urn:
                raise TypeError("Missing required property 'configuration_type'")
            __props__.__dict__["configuration_type"] = configuration_type
            __props__.__dict__["dynamic_match_configurations"] = dynamic_match_configurations
            __props__.__dict__["location"] = location
            __props__.__dict__["match_configurations"] = match_configurations
            __props__.__dict__["network_tap_rule_name"] = network_tap_rule_name
            if polling_interval_in_seconds is None:
                polling_interval_in_seconds = 30
            __props__.__dict__["polling_interval_in_seconds"] = polling_interval_in_seconds
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tap_rules_url"] = tap_rules_url
            __props__.__dict__["administrative_state"] = None
            __props__.__dict__["configuration_state"] = None
            __props__.__dict__["last_synced_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["network_tap_id"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:managednetworkfabric/v20230615:NetworkTapRule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(NetworkTapRule, __self__).__init__(
            'azure-native:managednetworkfabric:NetworkTapRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NetworkTapRule':
        """
        Get an existing NetworkTapRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NetworkTapRuleArgs.__new__(NetworkTapRuleArgs)

        __props__.__dict__["administrative_state"] = None
        __props__.__dict__["annotation"] = None
        __props__.__dict__["configuration_state"] = None
        __props__.__dict__["configuration_type"] = None
        __props__.__dict__["dynamic_match_configurations"] = None
        __props__.__dict__["last_synced_time"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["match_configurations"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_tap_id"] = None
        __props__.__dict__["polling_interval_in_seconds"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["tap_rules_url"] = None
        __props__.__dict__["type"] = None
        return NetworkTapRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="administrativeState")
    def administrative_state(self) -> pulumi.Output[str]:
        """
        Administrative state of the resource.
        """
        return pulumi.get(self, "administrative_state")

    @property
    @pulumi.getter
    def annotation(self) -> pulumi.Output[Optional[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> pulumi.Output[str]:
        """
        Configuration state of the resource.
        """
        return pulumi.get(self, "configuration_state")

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> pulumi.Output[str]:
        """
        Input method to configure Network Tap Rule.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="dynamicMatchConfigurations")
    def dynamic_match_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.CommonDynamicMatchConfigurationResponse']]]:
        """
        List of dynamic match configurations.
        """
        return pulumi.get(self, "dynamic_match_configurations")

    @property
    @pulumi.getter(name="lastSyncedTime")
    def last_synced_time(self) -> pulumi.Output[str]:
        """
        The last sync timestamp.
        """
        return pulumi.get(self, "last_synced_time")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="matchConfigurations")
    def match_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkTapRuleMatchConfigurationResponse']]]:
        """
        List of match configurations.
        """
        return pulumi.get(self, "match_configurations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTapId")
    def network_tap_id(self) -> pulumi.Output[str]:
        """
        The ARM resource Id of the NetworkTap.
        """
        return pulumi.get(self, "network_tap_id")

    @property
    @pulumi.getter(name="pollingIntervalInSeconds")
    def polling_interval_in_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Polling interval in seconds.
        """
        return pulumi.get(self, "polling_interval_in_seconds")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tapRulesUrl")
    def tap_rules_url(self) -> pulumi.Output[Optional[str]]:
        """
        Network Tap Rules file URL.
        """
        return pulumi.get(self, "tap_rules_url")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

