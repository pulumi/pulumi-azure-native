# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AclActionType',
    'Action',
    'AddressFamilyType',
    'AllowASOverride',
    'BooleanEnumProperty',
    'CommunityActionTypes',
    'Condition',
    'ConfigurationType',
    'DestinationType',
    'Encapsulation',
    'EncapsulationType',
    'Extension',
    'GatewayType',
    'IPAddressType',
    'IsManagementType',
    'IsMonitoringEnabled',
    'IsWorkloadManagementNetworkEnabled',
    'Layer4Protocol',
    'NetworkRackType',
    'NfcSku',
    'NniType',
    'PeeringOption',
    'PollingType',
    'PortType',
    'PrefixType',
    'RedistributeConnectedSubnets',
    'RedistributeStaticRoutes',
    'RoutePolicyActionType',
    'RoutePolicyConditionType',
    'SourceDestinationType',
    'TapRuleActionType',
    'WellKnownCommunities',
]


class AclActionType(str, Enum):
    """
    Type of actions that can be performed.
    """
    DROP = "Drop"
    COUNT = "Count"
    LOG = "Log"


class Action(str, Enum):
    """
    Specify action.
    """
    ALLOW = "Allow"
    DENY = "Deny"


class AddressFamilyType(str, Enum):
    """
    AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy.
    """
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class AllowASOverride(str, Enum):
    """
    Enable Or Disable state.
    """
    ENABLE = "Enable"
    DISABLE = "Disable"


class BooleanEnumProperty(str, Enum):
    """
    Based on this option layer3 parameters are mandatory. Example: True/False
    """
    TRUE = "True"
    FALSE = "False"


class CommunityActionTypes(str, Enum):
    """
    Default action that needs to be applied when no condition is matched. Example: Permit | Deny.
    """
    PERMIT = "Permit"
    DENY = "Deny"


class Condition(str, Enum):
    """
    Specify prefix-list bounds.
    """
    EQUAL_TO = "EqualTo"
    GREATER_THAN_OR_EQUAL_TO = "GreaterThanOrEqualTo"
    LESSER_THAN_OR_EQUAL_TO = "LesserThanOrEqualTo"
    RANGE = "Range"


class ConfigurationType(str, Enum):
    """
    Input method to configure Network Tap Rule.
    """
    FILE = "File"
    INLINE = "Inline"


class DestinationType(str, Enum):
    """
    Type of destination. Input can be IsolationDomain or Direct.
    """
    ISOLATION_DOMAIN = "IsolationDomain"
    DIRECT = "Direct"


class Encapsulation(str, Enum):
    """
    Type of encapsulation.
    """
    NONE = "None"
    GRE = "GRE"


class EncapsulationType(str, Enum):
    """
    Encapsulation Type that needs to be matched.
    """
    NONE = "None"
    GT_PV1 = "GTPv1"


class Extension(str, Enum):
    """
    Extension. Example: NoExtension | NPB.
    """
    NO_EXTENSION = "NoExtension"
    NPB = "NPB"


class GatewayType(str, Enum):
    """
    Gateway Type of the resource.
    """
    INFRASTRUCTURE = "Infrastructure"
    WORKLOAD = "Workload"


class IPAddressType(str, Enum):
    """
    Type of IP Address. IPv4 or IPv6
    """
    I_PV4 = "IPv4"
    I_PV6 = "IPv6"


class IsManagementType(str, Enum):
    """
    Configuration to use NNI for Infrastructure Management. Example: True/False.
    """
    TRUE = "True"
    FALSE = "False"


class IsMonitoringEnabled(str, Enum):
    """
    To check whether monitoring of internal network is enabled or not.
    """
    TRUE = "True"
    FALSE = "False"


class IsWorkloadManagementNetworkEnabled(str, Enum):
    """
    A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
    """
    TRUE = "True"
    FALSE = "False"


class Layer4Protocol(str, Enum):
    """
    Layer4 protocol type that needs to be matched.
    """
    TCP = "TCP"
    UDP = "UDP"


class NetworkRackType(str, Enum):
    """
    Network Rack SKU name.
    """
    AGGREGATE = "Aggregate"
    COMPUTE = "Compute"
    COMBINED = "Combined"


class NfcSku(str, Enum):
    """
    Network Fabric Controller SKU.
    """
    BASIC = "Basic"
    STANDARD = "Standard"
    HIGH_PERFORMANCE = "HighPerformance"


class NniType(str, Enum):
    """
    Type of NNI used. Example: CE | NPB
    """
    CE = "CE"
    NPB = "NPB"


class PeeringOption(str, Enum):
    """
    Peering option list.
    """
    OPTION_A = "OptionA"
    OPTION_B = "OptionB"


class PollingType(str, Enum):
    """
    Polling type.
    """
    PULL = "Pull"
    PUSH = "Push"


class PortType(str, Enum):
    """
    Port type that needs to be matched.
    """
    SOURCE_PORT = "SourcePort"
    DESTINATION_PORT = "DestinationPort"


class PrefixType(str, Enum):
    """
    IP Prefix Type that needs to be matched.
    """
    PREFIX = "Prefix"
    LONGEST_PREFIX = "LongestPrefix"


class RedistributeConnectedSubnets(str, Enum):
    """
    Advertise Connected Subnets. Ex: "True" | "False".
    """
    TRUE = "True"
    FALSE = "False"


class RedistributeStaticRoutes(str, Enum):
    """
    Advertise Static Routes. Ex: "True" | "False".
    """
    TRUE = "True"
    FALSE = "False"


class RoutePolicyActionType(str, Enum):
    """
    Action type. Example: Permit | Deny | Continue.
    """
    PERMIT = "Permit"
    DENY = "Deny"
    CONTINUE_ = "Continue"


class RoutePolicyConditionType(str, Enum):
    """
    Type of the condition used.
    """
    OR_ = "Or"
    AND_ = "And"


class SourceDestinationType(str, Enum):
    """
    IP Address type that needs to be matched.
    """
    SOURCE_IP = "SourceIP"
    DESTINATION_IP = "DestinationIP"


class TapRuleActionType(str, Enum):
    """
    Type of actions that can be performed.
    """
    DROP = "Drop"
    COUNT = "Count"
    LOG = "Log"
    REPLICATE = "Replicate"
    GOTO = "Goto"
    REDIRECT = "Redirect"
    MIRROR = "Mirror"


class WellKnownCommunities(str, Enum):
    """

    `Internet` - Advertise routes to internet community.
     `LocalAS` - Advertise routes to only localAS peers.
     `NoAdvertise` - Don't advertise routes to any peer.
    `NoExport` - Don't export to next AS.
    `GShut` - Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
    """
    INTERNET = "Internet"
    LOCAL_AS = "LocalAS"
    NO_ADVERTISE = "NoAdvertise"
    NO_EXPORT = "NoExport"
    G_SHUT = "GShut"
