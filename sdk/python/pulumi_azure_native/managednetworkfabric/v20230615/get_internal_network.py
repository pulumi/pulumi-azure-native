# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetInternalNetworkResult',
    'AwaitableGetInternalNetworkResult',
    'get_internal_network',
    'get_internal_network_output',
]

@pulumi.output_type
class GetInternalNetworkResult:
    """
    Defines the Internal Network resource.
    """
    def __init__(__self__, administrative_state=None, annotation=None, bgp_configuration=None, configuration_state=None, connected_i_pv4_subnets=None, connected_i_pv6_subnets=None, egress_acl_id=None, export_route_policy=None, export_route_policy_id=None, extension=None, id=None, import_route_policy=None, import_route_policy_id=None, ingress_acl_id=None, is_monitoring_enabled=None, mtu=None, name=None, provisioning_state=None, static_route_configuration=None, system_data=None, type=None, vlan_id=None):
        if administrative_state and not isinstance(administrative_state, str):
            raise TypeError("Expected argument 'administrative_state' to be a str")
        pulumi.set(__self__, "administrative_state", administrative_state)
        if annotation and not isinstance(annotation, str):
            raise TypeError("Expected argument 'annotation' to be a str")
        pulumi.set(__self__, "annotation", annotation)
        if bgp_configuration and not isinstance(bgp_configuration, dict):
            raise TypeError("Expected argument 'bgp_configuration' to be a dict")
        pulumi.set(__self__, "bgp_configuration", bgp_configuration)
        if configuration_state and not isinstance(configuration_state, str):
            raise TypeError("Expected argument 'configuration_state' to be a str")
        pulumi.set(__self__, "configuration_state", configuration_state)
        if connected_i_pv4_subnets and not isinstance(connected_i_pv4_subnets, list):
            raise TypeError("Expected argument 'connected_i_pv4_subnets' to be a list")
        pulumi.set(__self__, "connected_i_pv4_subnets", connected_i_pv4_subnets)
        if connected_i_pv6_subnets and not isinstance(connected_i_pv6_subnets, list):
            raise TypeError("Expected argument 'connected_i_pv6_subnets' to be a list")
        pulumi.set(__self__, "connected_i_pv6_subnets", connected_i_pv6_subnets)
        if egress_acl_id and not isinstance(egress_acl_id, str):
            raise TypeError("Expected argument 'egress_acl_id' to be a str")
        pulumi.set(__self__, "egress_acl_id", egress_acl_id)
        if export_route_policy and not isinstance(export_route_policy, dict):
            raise TypeError("Expected argument 'export_route_policy' to be a dict")
        pulumi.set(__self__, "export_route_policy", export_route_policy)
        if export_route_policy_id and not isinstance(export_route_policy_id, str):
            raise TypeError("Expected argument 'export_route_policy_id' to be a str")
        pulumi.set(__self__, "export_route_policy_id", export_route_policy_id)
        if extension and not isinstance(extension, str):
            raise TypeError("Expected argument 'extension' to be a str")
        pulumi.set(__self__, "extension", extension)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_route_policy and not isinstance(import_route_policy, dict):
            raise TypeError("Expected argument 'import_route_policy' to be a dict")
        pulumi.set(__self__, "import_route_policy", import_route_policy)
        if import_route_policy_id and not isinstance(import_route_policy_id, str):
            raise TypeError("Expected argument 'import_route_policy_id' to be a str")
        pulumi.set(__self__, "import_route_policy_id", import_route_policy_id)
        if ingress_acl_id and not isinstance(ingress_acl_id, str):
            raise TypeError("Expected argument 'ingress_acl_id' to be a str")
        pulumi.set(__self__, "ingress_acl_id", ingress_acl_id)
        if is_monitoring_enabled and not isinstance(is_monitoring_enabled, str):
            raise TypeError("Expected argument 'is_monitoring_enabled' to be a str")
        pulumi.set(__self__, "is_monitoring_enabled", is_monitoring_enabled)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if static_route_configuration and not isinstance(static_route_configuration, dict):
            raise TypeError("Expected argument 'static_route_configuration' to be a dict")
        pulumi.set(__self__, "static_route_configuration", static_route_configuration)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="administrativeState")
    def administrative_state(self) -> str:
        """
        Administrative state of the resource.
        """
        return pulumi.get(self, "administrative_state")

    @property
    @pulumi.getter
    def annotation(self) -> Optional[str]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @property
    @pulumi.getter(name="bgpConfiguration")
    def bgp_configuration(self) -> Optional['outputs.InternalNetworkPropertiesResponseBgpConfiguration']:
        """
        BGP configuration properties.
        """
        return pulumi.get(self, "bgp_configuration")

    @property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> str:
        """
        Configuration state of the resource.
        """
        return pulumi.get(self, "configuration_state")

    @property
    @pulumi.getter(name="connectedIPv4Subnets")
    def connected_i_pv4_subnets(self) -> Optional[Sequence['outputs.ConnectedSubnetResponse']]:
        """
        List of Connected IPv4 Subnets.
        """
        return pulumi.get(self, "connected_i_pv4_subnets")

    @property
    @pulumi.getter(name="connectedIPv6Subnets")
    def connected_i_pv6_subnets(self) -> Optional[Sequence['outputs.ConnectedSubnetResponse']]:
        """
        List of connected IPv6 Subnets.
        """
        return pulumi.get(self, "connected_i_pv6_subnets")

    @property
    @pulumi.getter(name="egressAclId")
    def egress_acl_id(self) -> Optional[str]:
        """
        Egress Acl. ARM resource ID of Access Control Lists.
        """
        return pulumi.get(self, "egress_acl_id")

    @property
    @pulumi.getter(name="exportRoutePolicy")
    def export_route_policy(self) -> Optional['outputs.ExportRoutePolicyResponse']:
        """
        Export Route Policy either IPv4 or IPv6.
        """
        return pulumi.get(self, "export_route_policy")

    @property
    @pulumi.getter(name="exportRoutePolicyId")
    def export_route_policy_id(self) -> Optional[str]:
        """
        ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
        """
        return pulumi.get(self, "export_route_policy_id")

    @property
    @pulumi.getter
    def extension(self) -> Optional[str]:
        """
        Extension. Example: NoExtension | NPB.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importRoutePolicy")
    def import_route_policy(self) -> Optional['outputs.ImportRoutePolicyResponse']:
        """
        Import Route Policy either IPv4 or IPv6.
        """
        return pulumi.get(self, "import_route_policy")

    @property
    @pulumi.getter(name="importRoutePolicyId")
    def import_route_policy_id(self) -> Optional[str]:
        """
        ARM Resource ID of the RoutePolicy. This is used for the backward compatibility.
        """
        return pulumi.get(self, "import_route_policy_id")

    @property
    @pulumi.getter(name="ingressAclId")
    def ingress_acl_id(self) -> Optional[str]:
        """
        Ingress Acl. ARM resource ID of Access Control Lists.
        """
        return pulumi.get(self, "ingress_acl_id")

    @property
    @pulumi.getter(name="isMonitoringEnabled")
    def is_monitoring_enabled(self) -> Optional[str]:
        """
        To check whether monitoring of internal network is enabled or not.
        """
        return pulumi.get(self, "is_monitoring_enabled")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        Maximum transmission unit. Default value is 1500.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="staticRouteConfiguration")
    def static_route_configuration(self) -> Optional['outputs.InternalNetworkPropertiesResponseStaticRouteConfiguration']:
        """
        Static Route Configuration properties.
        """
        return pulumi.get(self, "static_route_configuration")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        Vlan identifier. Example: 1001.
        """
        return pulumi.get(self, "vlan_id")


class AwaitableGetInternalNetworkResult(GetInternalNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInternalNetworkResult(
            administrative_state=self.administrative_state,
            annotation=self.annotation,
            bgp_configuration=self.bgp_configuration,
            configuration_state=self.configuration_state,
            connected_i_pv4_subnets=self.connected_i_pv4_subnets,
            connected_i_pv6_subnets=self.connected_i_pv6_subnets,
            egress_acl_id=self.egress_acl_id,
            export_route_policy=self.export_route_policy,
            export_route_policy_id=self.export_route_policy_id,
            extension=self.extension,
            id=self.id,
            import_route_policy=self.import_route_policy,
            import_route_policy_id=self.import_route_policy_id,
            ingress_acl_id=self.ingress_acl_id,
            is_monitoring_enabled=self.is_monitoring_enabled,
            mtu=self.mtu,
            name=self.name,
            provisioning_state=self.provisioning_state,
            static_route_configuration=self.static_route_configuration,
            system_data=self.system_data,
            type=self.type,
            vlan_id=self.vlan_id)


def get_internal_network(internal_network_name: Optional[str] = None,
                         l3_isolation_domain_name: Optional[str] = None,
                         resource_group_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInternalNetworkResult:
    """
    Gets a InternalNetworks.


    :param str internal_network_name: Name of the Internal Network.
    :param str l3_isolation_domain_name: Name of the L3 Isolation Domain.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['internalNetworkName'] = internal_network_name
    __args__['l3IsolationDomainName'] = l3_isolation_domain_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:managednetworkfabric/v20230615:getInternalNetwork', __args__, opts=opts, typ=GetInternalNetworkResult).value

    return AwaitableGetInternalNetworkResult(
        administrative_state=pulumi.get(__ret__, 'administrative_state'),
        annotation=pulumi.get(__ret__, 'annotation'),
        bgp_configuration=pulumi.get(__ret__, 'bgp_configuration'),
        configuration_state=pulumi.get(__ret__, 'configuration_state'),
        connected_i_pv4_subnets=pulumi.get(__ret__, 'connected_i_pv4_subnets'),
        connected_i_pv6_subnets=pulumi.get(__ret__, 'connected_i_pv6_subnets'),
        egress_acl_id=pulumi.get(__ret__, 'egress_acl_id'),
        export_route_policy=pulumi.get(__ret__, 'export_route_policy'),
        export_route_policy_id=pulumi.get(__ret__, 'export_route_policy_id'),
        extension=pulumi.get(__ret__, 'extension'),
        id=pulumi.get(__ret__, 'id'),
        import_route_policy=pulumi.get(__ret__, 'import_route_policy'),
        import_route_policy_id=pulumi.get(__ret__, 'import_route_policy_id'),
        ingress_acl_id=pulumi.get(__ret__, 'ingress_acl_id'),
        is_monitoring_enabled=pulumi.get(__ret__, 'is_monitoring_enabled'),
        mtu=pulumi.get(__ret__, 'mtu'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        static_route_configuration=pulumi.get(__ret__, 'static_route_configuration'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'))


@_utilities.lift_output_func(get_internal_network)
def get_internal_network_output(internal_network_name: Optional[pulumi.Input[str]] = None,
                                l3_isolation_domain_name: Optional[pulumi.Input[str]] = None,
                                resource_group_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInternalNetworkResult]:
    """
    Gets a InternalNetworks.


    :param str internal_network_name: Name of the Internal Network.
    :param str l3_isolation_domain_name: Name of the L3 Isolation Domain.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
