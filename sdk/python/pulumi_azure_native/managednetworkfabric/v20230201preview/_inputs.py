# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AccessControlListConditionPropertiesArgs',
    'ActionIpCommunityPropertiesArgs',
    'ActionIpExtendedCommunityPropertiesArgs',
    'AggregateRouteConfigurationArgs',
    'AggregateRouteArgs',
    'BgpConfigurationArgs',
    'ConnectedSubnetArgs',
    'ExpressRouteConnectionInformationArgs',
    'ExternalNetworkPropertiesOptionAPropertiesArgs',
    'FabricOptionBPropertiesArgs',
    'IpCommunityIdListArgs',
    'IpExtendedCommunityIdListArgs',
    'IpPrefixPropertiesIpPrefixRulesArgs',
    'L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicyArgs',
    'Layer2ConfigurationArgs',
    'Layer3ConfigurationArgs',
    'ManagedResourceGroupConfigurationArgs',
    'ManagementNetworkConfigurationArgs',
    'NeighborAddressArgs',
    'OptionAPropertiesArgs',
    'OptionBPropertiesArgs',
    'RoutePolicyStatementPropertiesArgs',
    'StatementActionPropertiesArgs',
    'StatementConditionPropertiesArgs',
    'StaticRouteConfigurationArgs',
    'StaticRoutePropertiesArgs',
    'TerminalServerConfigurationArgs',
    'VpnConfigurationPropertiesArgs',
]

@pulumi.input_type
class AccessControlListConditionPropertiesArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[Union[str, 'ConditionActionType']],
                 destination_address: pulumi.Input[str],
                 destination_port: pulumi.Input[str],
                 protocol: pulumi.Input[int],
                 sequence_number: pulumi.Input[int],
                 source_address: pulumi.Input[str],
                 source_port: pulumi.Input[str],
                 annotation: Optional[pulumi.Input[str]] = None):
        """
        Access Control List condition model.
        :param pulumi.Input[Union[str, 'ConditionActionType']] action: action. Example: allow | deny.
        :param pulumi.Input[str] destination_address: destinationAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
        :param pulumi.Input[str] destination_port: destinationPort. Example: any | 1253
        :param pulumi.Input[int] protocol: TCP/IP protocol as defined in the list of IP protocol numbers. Example: 255 (any) | 0 | 1.
        :param pulumi.Input[int] sequence_number: sequenceNumber of the Access Control List.
        :param pulumi.Input[str] source_address: sourceAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
        :param pulumi.Input[str] source_port: sourcePort. Example: any | 1253
        :param pulumi.Input[str] annotation: Switch configuration description.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination_address", destination_address)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "sequence_number", sequence_number)
        pulumi.set(__self__, "source_address", source_address)
        pulumi.set(__self__, "source_port", source_port)
        if annotation is not None:
            pulumi.set(__self__, "annotation", annotation)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[Union[str, 'ConditionActionType']]:
        """
        action. Example: allow | deny.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[Union[str, 'ConditionActionType']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="destinationAddress")
    def destination_address(self) -> pulumi.Input[str]:
        """
        destinationAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
        """
        return pulumi.get(self, "destination_address")

    @destination_address.setter
    def destination_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_address", value)

    @property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> pulumi.Input[str]:
        """
        destinationPort. Example: any | 1253
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[int]:
        """
        TCP/IP protocol as defined in the list of IP protocol numbers. Example: 255 (any) | 0 | 1.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[int]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> pulumi.Input[int]:
        """
        sequenceNumber of the Access Control List.
        """
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> pulumi.Input[str]:
        """
        sourceAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_address", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Input[str]:
        """
        sourcePort. Example: any | 1253
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter
    def annotation(self) -> Optional[pulumi.Input[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @annotation.setter
    def annotation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation", value)


@pulumi.input_type
class ActionIpCommunityPropertiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['IpCommunityIdListArgs']] = None,
                 delete: Optional[pulumi.Input['IpCommunityIdListArgs']] = None,
                 set: Optional[pulumi.Input['IpCommunityIdListArgs']] = None):
        """
        IP Community Properties.
        :param pulumi.Input['IpCommunityIdListArgs'] add: IP Community ID list properties.
        :param pulumi.Input['IpCommunityIdListArgs'] delete: IP Community ID list properties.
        :param pulumi.Input['IpCommunityIdListArgs'] set: IP Community ID list properties.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['IpCommunityIdListArgs']]:
        """
        IP Community ID list properties.
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['IpCommunityIdListArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input['IpCommunityIdListArgs']]:
        """
        IP Community ID list properties.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input['IpCommunityIdListArgs']]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input['IpCommunityIdListArgs']]:
        """
        IP Community ID list properties.
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input['IpCommunityIdListArgs']]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class ActionIpExtendedCommunityPropertiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']] = None,
                 delete: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']] = None,
                 set: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']] = None):
        """
        IP Extended Community Properties.
        :param pulumi.Input['IpExtendedCommunityIdListArgs'] add: IP Extended Community Id list properties.
        :param pulumi.Input['IpExtendedCommunityIdListArgs'] delete: IP Extended Community Id list properties.
        :param pulumi.Input['IpExtendedCommunityIdListArgs'] set: IP Extended Community Id list properties.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]:
        """
        IP Extended Community Id list properties.
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]:
        """
        IP Extended Community Id list properties.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]:
        """
        IP Extended Community Id list properties.
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input['IpExtendedCommunityIdListArgs']]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class AggregateRouteConfigurationArgs:
    def __init__(__self__, *,
                 ipv4_routes: Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]] = None):
        """
        List of IPv4 and IPv6 route configurations.
        :param pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]] ipv4_routes: List of IPv4 Route prefixes.
        :param pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]] ipv6_routes: List of IPv6 Routes prefixes.
        """
        if ipv4_routes is not None:
            pulumi.set(__self__, "ipv4_routes", ipv4_routes)
        if ipv6_routes is not None:
            pulumi.set(__self__, "ipv6_routes", ipv6_routes)

    @property
    @pulumi.getter(name="ipv4Routes")
    def ipv4_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]]:
        """
        List of IPv4 Route prefixes.
        """
        return pulumi.get(self, "ipv4_routes")

    @ipv4_routes.setter
    def ipv4_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]]):
        pulumi.set(self, "ipv4_routes", value)

    @property
    @pulumi.getter(name="ipv6Routes")
    def ipv6_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]]:
        """
        List of IPv6 Routes prefixes.
        """
        return pulumi.get(self, "ipv6_routes")

    @ipv6_routes.setter
    def ipv6_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AggregateRouteArgs']]]]):
        pulumi.set(self, "ipv6_routes", value)


@pulumi.input_type
class AggregateRouteArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        Aggregate Route properties.
        :param pulumi.Input[str] prefix: Prefix of the aggregate Route.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the aggregate Route.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BgpConfigurationArgs:
    def __init__(__self__, *,
                 peer_asn: pulumi.Input[int],
                 allow_as: Optional[pulumi.Input[int]] = None,
                 allow_as_override: Optional[pulumi.Input[Union[str, 'AllowASOverride']]] = None,
                 annotation: Optional[pulumi.Input[str]] = None,
                 default_route_originate: Optional[pulumi.Input[Union[str, 'BooleanEnumProperty']]] = None,
                 ipv4_listen_range_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv4_neighbor_address: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]] = None,
                 ipv6_listen_range_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_neighbor_address: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]] = None):
        """
        BGP configuration properties
        :param pulumi.Input[int] peer_asn: Peer ASN. Example: 65047.
        :param pulumi.Input[int] allow_as: Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
        :param pulumi.Input[Union[str, 'AllowASOverride']] allow_as_override: Enable Or Disable state.
        :param pulumi.Input[str] annotation: Switch configuration description.
        :param pulumi.Input[Union[str, 'BooleanEnumProperty']] default_route_originate: Originate a defaultRoute. Ex: "True" | "False".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv4_listen_range_prefixes: BGP Ipv4 ListenRange.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]] ipv4_neighbor_address: List with stringified ipv4NeighborAddresses.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_listen_range_prefixes: BGP Ipv6 ListenRange.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]] ipv6_neighbor_address: List with stringified IPv6 Neighbor Address.
        """
        pulumi.set(__self__, "peer_asn", peer_asn)
        if allow_as is None:
            allow_as = 2
        if allow_as is not None:
            pulumi.set(__self__, "allow_as", allow_as)
        if allow_as_override is not None:
            pulumi.set(__self__, "allow_as_override", allow_as_override)
        if annotation is not None:
            pulumi.set(__self__, "annotation", annotation)
        if default_route_originate is not None:
            pulumi.set(__self__, "default_route_originate", default_route_originate)
        if ipv4_listen_range_prefixes is not None:
            pulumi.set(__self__, "ipv4_listen_range_prefixes", ipv4_listen_range_prefixes)
        if ipv4_neighbor_address is not None:
            pulumi.set(__self__, "ipv4_neighbor_address", ipv4_neighbor_address)
        if ipv6_listen_range_prefixes is not None:
            pulumi.set(__self__, "ipv6_listen_range_prefixes", ipv6_listen_range_prefixes)
        if ipv6_neighbor_address is not None:
            pulumi.set(__self__, "ipv6_neighbor_address", ipv6_neighbor_address)

    @property
    @pulumi.getter(name="peerASN")
    def peer_asn(self) -> pulumi.Input[int]:
        """
        Peer ASN. Example: 65047.
        """
        return pulumi.get(self, "peer_asn")

    @peer_asn.setter
    def peer_asn(self, value: pulumi.Input[int]):
        pulumi.set(self, "peer_asn", value)

    @property
    @pulumi.getter(name="allowAS")
    def allow_as(self) -> Optional[pulumi.Input[int]]:
        """
        Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.
        """
        return pulumi.get(self, "allow_as")

    @allow_as.setter
    def allow_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allow_as", value)

    @property
    @pulumi.getter(name="allowASOverride")
    def allow_as_override(self) -> Optional[pulumi.Input[Union[str, 'AllowASOverride']]]:
        """
        Enable Or Disable state.
        """
        return pulumi.get(self, "allow_as_override")

    @allow_as_override.setter
    def allow_as_override(self, value: Optional[pulumi.Input[Union[str, 'AllowASOverride']]]):
        pulumi.set(self, "allow_as_override", value)

    @property
    @pulumi.getter
    def annotation(self) -> Optional[pulumi.Input[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @annotation.setter
    def annotation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation", value)

    @property
    @pulumi.getter(name="defaultRouteOriginate")
    def default_route_originate(self) -> Optional[pulumi.Input[Union[str, 'BooleanEnumProperty']]]:
        """
        Originate a defaultRoute. Ex: "True" | "False".
        """
        return pulumi.get(self, "default_route_originate")

    @default_route_originate.setter
    def default_route_originate(self, value: Optional[pulumi.Input[Union[str, 'BooleanEnumProperty']]]):
        pulumi.set(self, "default_route_originate", value)

    @property
    @pulumi.getter(name="ipv4ListenRangePrefixes")
    def ipv4_listen_range_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        BGP Ipv4 ListenRange.
        """
        return pulumi.get(self, "ipv4_listen_range_prefixes")

    @ipv4_listen_range_prefixes.setter
    def ipv4_listen_range_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv4_listen_range_prefixes", value)

    @property
    @pulumi.getter(name="ipv4NeighborAddress")
    def ipv4_neighbor_address(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]]:
        """
        List with stringified ipv4NeighborAddresses.
        """
        return pulumi.get(self, "ipv4_neighbor_address")

    @ipv4_neighbor_address.setter
    def ipv4_neighbor_address(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]]):
        pulumi.set(self, "ipv4_neighbor_address", value)

    @property
    @pulumi.getter(name="ipv6ListenRangePrefixes")
    def ipv6_listen_range_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        BGP Ipv6 ListenRange.
        """
        return pulumi.get(self, "ipv6_listen_range_prefixes")

    @ipv6_listen_range_prefixes.setter
    def ipv6_listen_range_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_listen_range_prefixes", value)

    @property
    @pulumi.getter(name="ipv6NeighborAddress")
    def ipv6_neighbor_address(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]]:
        """
        List with stringified IPv6 Neighbor Address.
        """
        return pulumi.get(self, "ipv6_neighbor_address")

    @ipv6_neighbor_address.setter
    def ipv6_neighbor_address(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborAddressArgs']]]]):
        pulumi.set(self, "ipv6_neighbor_address", value)


@pulumi.input_type
class ConnectedSubnetArgs:
    def __init__(__self__, *,
                 annotation: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        Connected Subnet properties.
        :param pulumi.Input[str] annotation: Switch configuration description.
        :param pulumi.Input[str] prefix: Prefix of the connected Subnet.
        """
        if annotation is not None:
            pulumi.set(__self__, "annotation", annotation)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def annotation(self) -> Optional[pulumi.Input[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @annotation.setter
    def annotation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the connected Subnet.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class ExpressRouteConnectionInformationArgs:
    def __init__(__self__, *,
                 express_route_authorization_key: pulumi.Input[str],
                 express_route_circuit_id: pulumi.Input[str]):
        """
        The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service.
        :param pulumi.Input[str] express_route_authorization_key: Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
        :param pulumi.Input[str] express_route_circuit_id: The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
        """
        pulumi.set(__self__, "express_route_authorization_key", express_route_authorization_key)
        pulumi.set(__self__, "express_route_circuit_id", express_route_circuit_id)

    @property
    @pulumi.getter(name="expressRouteAuthorizationKey")
    def express_route_authorization_key(self) -> pulumi.Input[str]:
        """
        Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.
        """
        return pulumi.get(self, "express_route_authorization_key")

    @express_route_authorization_key.setter
    def express_route_authorization_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "express_route_authorization_key", value)

    @property
    @pulumi.getter(name="expressRouteCircuitId")
    def express_route_circuit_id(self) -> pulumi.Input[str]:
        """
        The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.
        """
        return pulumi.get(self, "express_route_circuit_id")

    @express_route_circuit_id.setter
    def express_route_circuit_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "express_route_circuit_id", value)


@pulumi.input_type
class ExternalNetworkPropertiesOptionAPropertiesArgs:
    def __init__(__self__, *,
                 peer_asn: pulumi.Input[int],
                 vlan_id: pulumi.Input[int],
                 mtu: Optional[pulumi.Input[int]] = None,
                 primary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 primary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv6_prefix: Optional[pulumi.Input[str]] = None):
        """
        option A properties object
        :param pulumi.Input[int] peer_asn: Peer ASN number.Example : 28
        :param pulumi.Input[int] vlan_id: Vlan identifier. Example : 501
        :param pulumi.Input[int] mtu: MTU to use for option A peering.
        :param pulumi.Input[str] primary_ipv4_prefix: IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] primary_ipv6_prefix: IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv4_prefix: Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv6_prefix: Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        pulumi.set(__self__, "peer_asn", peer_asn)
        pulumi.set(__self__, "vlan_id", vlan_id)
        if mtu is None:
            mtu = 1500
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if primary_ipv4_prefix is not None:
            pulumi.set(__self__, "primary_ipv4_prefix", primary_ipv4_prefix)
        if primary_ipv6_prefix is not None:
            pulumi.set(__self__, "primary_ipv6_prefix", primary_ipv6_prefix)
        if secondary_ipv4_prefix is not None:
            pulumi.set(__self__, "secondary_ipv4_prefix", secondary_ipv4_prefix)
        if secondary_ipv6_prefix is not None:
            pulumi.set(__self__, "secondary_ipv6_prefix", secondary_ipv6_prefix)

    @property
    @pulumi.getter(name="peerASN")
    def peer_asn(self) -> pulumi.Input[int]:
        """
        Peer ASN number.Example : 28
        """
        return pulumi.get(self, "peer_asn")

    @peer_asn.setter
    def peer_asn(self, value: pulumi.Input[int]):
        pulumi.set(self, "peer_asn", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[int]:
        """
        Vlan identifier. Example : 501
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU to use for option A peering.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="primaryIpv4Prefix")
    def primary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv4_prefix")

    @primary_ipv4_prefix.setter
    def primary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="primaryIpv6Prefix")
    def primary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv6_prefix")

    @primary_ipv6_prefix.setter
    def primary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv4Prefix")
    def secondary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv4_prefix")

    @secondary_ipv4_prefix.setter
    def secondary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv6Prefix")
    def secondary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv6_prefix")

    @secondary_ipv6_prefix.setter
    def secondary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv6_prefix", value)


@pulumi.input_type
class FabricOptionBPropertiesArgs:
    def __init__(__self__, *,
                 export_route_targets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 import_route_targets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Option B configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] export_route_targets: Route Targets to be applied for outgoing routes from CE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_route_targets: Route Targets to be applied for incoming routes into CE.
        """
        pulumi.set(__self__, "export_route_targets", export_route_targets)
        pulumi.set(__self__, "import_route_targets", import_route_targets)

    @property
    @pulumi.getter(name="exportRouteTargets")
    def export_route_targets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Route Targets to be applied for outgoing routes from CE.
        """
        return pulumi.get(self, "export_route_targets")

    @export_route_targets.setter
    def export_route_targets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "export_route_targets", value)

    @property
    @pulumi.getter(name="importRouteTargets")
    def import_route_targets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Route Targets to be applied for incoming routes into CE.
        """
        return pulumi.get(self, "import_route_targets")

    @import_route_targets.setter
    def import_route_targets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "import_route_targets", value)


@pulumi.input_type
class IpCommunityIdListArgs:
    def __init__(__self__, *,
                 ip_community_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        IP Community ID list properties.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_community_ids: List of IP Community resource IDs.
        """
        if ip_community_ids is not None:
            pulumi.set(__self__, "ip_community_ids", ip_community_ids)

    @property
    @pulumi.getter(name="ipCommunityIds")
    def ip_community_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP Community resource IDs.
        """
        return pulumi.get(self, "ip_community_ids")

    @ip_community_ids.setter
    def ip_community_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_community_ids", value)


@pulumi.input_type
class IpExtendedCommunityIdListArgs:
    def __init__(__self__, *,
                 ip_extended_community_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        IP Extended Community Id list properties.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_extended_community_ids: List of IP Extended Community resource IDs.
        """
        if ip_extended_community_ids is not None:
            pulumi.set(__self__, "ip_extended_community_ids", ip_extended_community_ids)

    @property
    @pulumi.getter(name="ipExtendedCommunityIds")
    def ip_extended_community_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP Extended Community resource IDs.
        """
        return pulumi.get(self, "ip_extended_community_ids")

    @ip_extended_community_ids.setter
    def ip_extended_community_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_extended_community_ids", value)


@pulumi.input_type
class IpPrefixPropertiesIpPrefixRulesArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[Union[str, 'CommunityActionTypes']],
                 network_prefix: pulumi.Input[str],
                 sequence_number: pulumi.Input[float],
                 condition: Optional[pulumi.Input[Union[str, 'Condition']]] = None,
                 subnet_mask_length: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Union[str, 'CommunityActionTypes']] action: Action to be taken on the configuration. Example: Permit | Deny.
        :param pulumi.Input[str] network_prefix: Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126 
        :param pulumi.Input[float] sequence_number: Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
        :param pulumi.Input[Union[str, 'Condition']] condition: Specify prefix-list bounds.
        :param pulumi.Input[int] subnet_mask_length: SubnetMaskLength gives the minimum NetworkPrefix length to be matched.Possible values for IPv4 are 1 - 32. Possible values of IPv6 are 1 - 128.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "network_prefix", network_prefix)
        pulumi.set(__self__, "sequence_number", sequence_number)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if subnet_mask_length is not None:
            pulumi.set(__self__, "subnet_mask_length", subnet_mask_length)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[Union[str, 'CommunityActionTypes']]:
        """
        Action to be taken on the configuration. Example: Permit | Deny.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[Union[str, 'CommunityActionTypes']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> pulumi.Input[str]:
        """
        Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126 
        """
        return pulumi.get(self, "network_prefix")

    @network_prefix.setter
    def network_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_prefix", value)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> pulumi.Input[float]:
        """
        Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored.
        """
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[Union[str, 'Condition']]]:
        """
        Specify prefix-list bounds.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[Union[str, 'Condition']]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="subnetMaskLength")
    def subnet_mask_length(self) -> Optional[pulumi.Input[int]]:
        """
        SubnetMaskLength gives the minimum NetworkPrefix length to be matched.Possible values for IPv4 are 1 - 32. Possible values of IPv6 are 1 - 128.
        """
        return pulumi.get(self, "subnet_mask_length")

    @subnet_mask_length.setter
    def subnet_mask_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_mask_length", value)


@pulumi.input_type
class L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicyArgs:
    def __init__(__self__, *,
                 export_route_policy_id: Optional[pulumi.Input[str]] = None):
        """
        Connected Subnet RoutePolicy
        :param pulumi.Input[str] export_route_policy_id: exportRoutePolicyId value.
        """
        if export_route_policy_id is not None:
            pulumi.set(__self__, "export_route_policy_id", export_route_policy_id)

    @property
    @pulumi.getter(name="exportRoutePolicyId")
    def export_route_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        exportRoutePolicyId value.
        """
        return pulumi.get(self, "export_route_policy_id")

    @export_route_policy_id.setter
    def export_route_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_route_policy_id", value)


@pulumi.input_type
class Layer2ConfigurationArgs:
    def __init__(__self__, *,
                 mtu: Optional[pulumi.Input[int]] = None,
                 port_count: Optional[pulumi.Input[int]] = None):
        """
        layer2Configuration
        :param pulumi.Input[int] mtu: MTU of the packets between PE & CE.
        :param pulumi.Input[int] port_count: Number of ports connected between PE/CE. Maximum value depends on FabricSKU.
        """
        if mtu is None:
            mtu = 1500
        pulumi.set(__self__, "mtu", mtu)
        if port_count is not None:
            pulumi.set(__self__, "port_count", port_count)

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Input[int]:
        """
        MTU of the packets between PE & CE.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: pulumi.Input[int]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="portCount")
    def port_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of ports connected between PE/CE. Maximum value depends on FabricSKU.
        """
        return pulumi.get(self, "port_count")

    @port_count.setter
    def port_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_count", value)


@pulumi.input_type
class Layer3ConfigurationArgs:
    def __init__(__self__, *,
                 export_route_policy_id: Optional[pulumi.Input[str]] = None,
                 import_route_policy_id: Optional[pulumi.Input[str]] = None,
                 peer_asn: Optional[pulumi.Input[int]] = None,
                 primary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 primary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        layer3Configuration
        :param pulumi.Input[str] export_route_policy_id: exportRoutePolicyId
        :param pulumi.Input[str] import_route_policy_id: importRoutePolicyId
        :param pulumi.Input[int] peer_asn: ASN of PE devices for CE/PE connectivity.Example : 28
        :param pulumi.Input[str] primary_ipv4_prefix: IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] primary_ipv6_prefix: IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv4_prefix: Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv6_prefix: Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[int] vlan_id: VLAN for CE/PE Layer 3 connectivity.Example : 501
        """
        if export_route_policy_id is not None:
            pulumi.set(__self__, "export_route_policy_id", export_route_policy_id)
        if import_route_policy_id is not None:
            pulumi.set(__self__, "import_route_policy_id", import_route_policy_id)
        if peer_asn is not None:
            pulumi.set(__self__, "peer_asn", peer_asn)
        if primary_ipv4_prefix is not None:
            pulumi.set(__self__, "primary_ipv4_prefix", primary_ipv4_prefix)
        if primary_ipv6_prefix is not None:
            pulumi.set(__self__, "primary_ipv6_prefix", primary_ipv6_prefix)
        if secondary_ipv4_prefix is not None:
            pulumi.set(__self__, "secondary_ipv4_prefix", secondary_ipv4_prefix)
        if secondary_ipv6_prefix is not None:
            pulumi.set(__self__, "secondary_ipv6_prefix", secondary_ipv6_prefix)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="exportRoutePolicyId")
    def export_route_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        exportRoutePolicyId
        """
        return pulumi.get(self, "export_route_policy_id")

    @export_route_policy_id.setter
    def export_route_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_route_policy_id", value)

    @property
    @pulumi.getter(name="importRoutePolicyId")
    def import_route_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        importRoutePolicyId
        """
        return pulumi.get(self, "import_route_policy_id")

    @import_route_policy_id.setter
    def import_route_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_route_policy_id", value)

    @property
    @pulumi.getter(name="peerASN")
    def peer_asn(self) -> Optional[pulumi.Input[int]]:
        """
        ASN of PE devices for CE/PE connectivity.Example : 28
        """
        return pulumi.get(self, "peer_asn")

    @peer_asn.setter
    def peer_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_asn", value)

    @property
    @pulumi.getter(name="primaryIpv4Prefix")
    def primary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv4_prefix")

    @primary_ipv4_prefix.setter
    def primary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="primaryIpv6Prefix")
    def primary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv6_prefix")

    @primary_ipv6_prefix.setter
    def primary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv4Prefix")
    def secondary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv4_prefix")

    @secondary_ipv4_prefix.setter
    def secondary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv6Prefix")
    def secondary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv6_prefix")

    @secondary_ipv6_prefix.setter
    def secondary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN for CE/PE Layer 3 connectivity.Example : 501
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class ManagedResourceGroupConfigurationArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Managed Resource Group configuration properties.
        :param pulumi.Input[str] location: Managed resource group location.
        :param pulumi.Input[str] name: The NFC service will be hosted in a Managed resource group.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Managed resource group location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The NFC service will be hosted in a Managed resource group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ManagementNetworkConfigurationArgs:
    def __init__(__self__, *,
                 infrastructure_vpn_configuration: pulumi.Input['VpnConfigurationPropertiesArgs'],
                 workload_vpn_configuration: pulumi.Input['VpnConfigurationPropertiesArgs']):
        """
        Configuration to be used to setup the management network.
        :param pulumi.Input['VpnConfigurationPropertiesArgs'] infrastructure_vpn_configuration: Configuration for infrastructure vpn.
        :param pulumi.Input['VpnConfigurationPropertiesArgs'] workload_vpn_configuration: Configuration for workload vpn.
        """
        pulumi.set(__self__, "infrastructure_vpn_configuration", infrastructure_vpn_configuration)
        pulumi.set(__self__, "workload_vpn_configuration", workload_vpn_configuration)

    @property
    @pulumi.getter(name="infrastructureVpnConfiguration")
    def infrastructure_vpn_configuration(self) -> pulumi.Input['VpnConfigurationPropertiesArgs']:
        """
        Configuration for infrastructure vpn.
        """
        return pulumi.get(self, "infrastructure_vpn_configuration")

    @infrastructure_vpn_configuration.setter
    def infrastructure_vpn_configuration(self, value: pulumi.Input['VpnConfigurationPropertiesArgs']):
        pulumi.set(self, "infrastructure_vpn_configuration", value)

    @property
    @pulumi.getter(name="workloadVpnConfiguration")
    def workload_vpn_configuration(self) -> pulumi.Input['VpnConfigurationPropertiesArgs']:
        """
        Configuration for workload vpn.
        """
        return pulumi.get(self, "workload_vpn_configuration")

    @workload_vpn_configuration.setter
    def workload_vpn_configuration(self, value: pulumi.Input['VpnConfigurationPropertiesArgs']):
        pulumi.set(self, "workload_vpn_configuration", value)


@pulumi.input_type
class NeighborAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        Neighbor Address properties.
        :param pulumi.Input[str] address: IP Address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class OptionAPropertiesArgs:
    def __init__(__self__, *,
                 mtu: Optional[pulumi.Input[int]] = None,
                 peer_asn: Optional[pulumi.Input[int]] = None,
                 primary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 primary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv4_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        Peering optionA properties
        :param pulumi.Input[int] mtu: MTU to use for option A peering.
        :param pulumi.Input[int] peer_asn: Peer ASN number.Example : 28
        :param pulumi.Input[str] primary_ipv4_prefix: IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] primary_ipv6_prefix: IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv4_prefix: Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv6_prefix: Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[int] vlan_id: Vlan identifier. Example : 501
        """
        if mtu is None:
            mtu = 1500
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if peer_asn is not None:
            pulumi.set(__self__, "peer_asn", peer_asn)
        if primary_ipv4_prefix is not None:
            pulumi.set(__self__, "primary_ipv4_prefix", primary_ipv4_prefix)
        if primary_ipv6_prefix is not None:
            pulumi.set(__self__, "primary_ipv6_prefix", primary_ipv6_prefix)
        if secondary_ipv4_prefix is not None:
            pulumi.set(__self__, "secondary_ipv4_prefix", secondary_ipv4_prefix)
        if secondary_ipv6_prefix is not None:
            pulumi.set(__self__, "secondary_ipv6_prefix", secondary_ipv6_prefix)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU to use for option A peering.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="peerASN")
    def peer_asn(self) -> Optional[pulumi.Input[int]]:
        """
        Peer ASN number.Example : 28
        """
        return pulumi.get(self, "peer_asn")

    @peer_asn.setter
    def peer_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_asn", value)

    @property
    @pulumi.getter(name="primaryIpv4Prefix")
    def primary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv4_prefix")

    @primary_ipv4_prefix.setter
    def primary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="primaryIpv6Prefix")
    def primary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv6_prefix")

    @primary_ipv6_prefix.setter
    def primary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv4Prefix")
    def secondary_ipv4_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv4_prefix")

    @secondary_ipv4_prefix.setter
    def secondary_ipv4_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv6Prefix")
    def secondary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv6_prefix")

    @secondary_ipv6_prefix.setter
    def secondary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan identifier. Example : 501
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class OptionBPropertiesArgs:
    def __init__(__self__, *,
                 export_route_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 import_route_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Option B configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] export_route_targets: Route Targets to be applied for outgoing routes from CE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] import_route_targets: Route Targets to be applied for incoming routes into CE.
        """
        if export_route_targets is not None:
            pulumi.set(__self__, "export_route_targets", export_route_targets)
        if import_route_targets is not None:
            pulumi.set(__self__, "import_route_targets", import_route_targets)

    @property
    @pulumi.getter(name="exportRouteTargets")
    def export_route_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Route Targets to be applied for outgoing routes from CE.
        """
        return pulumi.get(self, "export_route_targets")

    @export_route_targets.setter
    def export_route_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "export_route_targets", value)

    @property
    @pulumi.getter(name="importRouteTargets")
    def import_route_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Route Targets to be applied for incoming routes into CE.
        """
        return pulumi.get(self, "import_route_targets")

    @import_route_targets.setter
    def import_route_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "import_route_targets", value)


@pulumi.input_type
class RoutePolicyStatementPropertiesArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['StatementActionPropertiesArgs'],
                 condition: pulumi.Input['StatementConditionPropertiesArgs'],
                 sequence_number: pulumi.Input[float],
                 annotation: Optional[pulumi.Input[str]] = None):
        """
        Route Policy Statement properties..
        :param pulumi.Input['StatementActionPropertiesArgs'] action: Route policy action properties.
        :param pulumi.Input['StatementConditionPropertiesArgs'] condition: Route policy condition properties.
        :param pulumi.Input[float] sequence_number: Sequence to insert to/delete from existing route.
        :param pulumi.Input[str] annotation: Switch configuration description.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "sequence_number", sequence_number)
        if annotation is not None:
            pulumi.set(__self__, "annotation", annotation)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['StatementActionPropertiesArgs']:
        """
        Route policy action properties.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['StatementActionPropertiesArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['StatementConditionPropertiesArgs']:
        """
        Route policy condition properties.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['StatementConditionPropertiesArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="sequenceNumber")
    def sequence_number(self) -> pulumi.Input[float]:
        """
        Sequence to insert to/delete from existing route.
        """
        return pulumi.get(self, "sequence_number")

    @sequence_number.setter
    def sequence_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "sequence_number", value)

    @property
    @pulumi.getter
    def annotation(self) -> Optional[pulumi.Input[str]]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @annotation.setter
    def annotation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation", value)


@pulumi.input_type
class StatementActionPropertiesArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[Union[str, 'CommunityActionTypes']],
                 ip_community_properties: Optional[pulumi.Input['ActionIpCommunityPropertiesArgs']] = None,
                 ip_extended_community_properties: Optional[pulumi.Input['ActionIpExtendedCommunityPropertiesArgs']] = None,
                 local_preference: Optional[pulumi.Input[float]] = None):
        """
        Route policy action properties.
        :param pulumi.Input[Union[str, 'CommunityActionTypes']] action_type: action. Example: Permit | Deny.
        :param pulumi.Input['ActionIpCommunityPropertiesArgs'] ip_community_properties: IP Community Properties.
        :param pulumi.Input['ActionIpExtendedCommunityPropertiesArgs'] ip_extended_community_properties: IP Extended Community Properties.
        :param pulumi.Input[float] local_preference: localPreference of the route policy.
        """
        pulumi.set(__self__, "action_type", action_type)
        if ip_community_properties is not None:
            pulumi.set(__self__, "ip_community_properties", ip_community_properties)
        if ip_extended_community_properties is not None:
            pulumi.set(__self__, "ip_extended_community_properties", ip_extended_community_properties)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[Union[str, 'CommunityActionTypes']]:
        """
        action. Example: Permit | Deny.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[Union[str, 'CommunityActionTypes']]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="ipCommunityProperties")
    def ip_community_properties(self) -> Optional[pulumi.Input['ActionIpCommunityPropertiesArgs']]:
        """
        IP Community Properties.
        """
        return pulumi.get(self, "ip_community_properties")

    @ip_community_properties.setter
    def ip_community_properties(self, value: Optional[pulumi.Input['ActionIpCommunityPropertiesArgs']]):
        pulumi.set(self, "ip_community_properties", value)

    @property
    @pulumi.getter(name="ipExtendedCommunityProperties")
    def ip_extended_community_properties(self) -> Optional[pulumi.Input['ActionIpExtendedCommunityPropertiesArgs']]:
        """
        IP Extended Community Properties.
        """
        return pulumi.get(self, "ip_extended_community_properties")

    @ip_extended_community_properties.setter
    def ip_extended_community_properties(self, value: Optional[pulumi.Input['ActionIpExtendedCommunityPropertiesArgs']]):
        pulumi.set(self, "ip_extended_community_properties", value)

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[float]]:
        """
        localPreference of the route policy.
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "local_preference", value)


@pulumi.input_type
class StatementConditionPropertiesArgs:
    def __init__(__self__, *,
                 ip_community_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_extended_community_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_prefix_id: Optional[pulumi.Input[str]] = None):
        """
        Route policy statement condition properties.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_community_ids: List of IP Community resource IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_extended_community_ids: List of IP Extended Community resource IDs.
        :param pulumi.Input[str] ip_prefix_id: Arm Resource Id of IpPrefix.
        """
        if ip_community_ids is not None:
            pulumi.set(__self__, "ip_community_ids", ip_community_ids)
        if ip_extended_community_ids is not None:
            pulumi.set(__self__, "ip_extended_community_ids", ip_extended_community_ids)
        if ip_prefix_id is not None:
            pulumi.set(__self__, "ip_prefix_id", ip_prefix_id)

    @property
    @pulumi.getter(name="ipCommunityIds")
    def ip_community_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP Community resource IDs.
        """
        return pulumi.get(self, "ip_community_ids")

    @ip_community_ids.setter
    def ip_community_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_community_ids", value)

    @property
    @pulumi.getter(name="ipExtendedCommunityIds")
    def ip_extended_community_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP Extended Community resource IDs.
        """
        return pulumi.get(self, "ip_extended_community_ids")

    @ip_extended_community_ids.setter
    def ip_extended_community_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_extended_community_ids", value)

    @property
    @pulumi.getter(name="ipPrefixId")
    def ip_prefix_id(self) -> Optional[pulumi.Input[str]]:
        """
        Arm Resource Id of IpPrefix.
        """
        return pulumi.get(self, "ip_prefix_id")

    @ip_prefix_id.setter
    def ip_prefix_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_prefix_id", value)


@pulumi.input_type
class StaticRouteConfigurationArgs:
    def __init__(__self__, *,
                 ipv4_routes: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]] = None):
        """
        staticRouteConfiguration model.
        :param pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]] ipv4_routes: List with object IPv4Routes.
        :param pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]] ipv6_routes: List with object IPv6Routes.
        """
        if ipv4_routes is not None:
            pulumi.set(__self__, "ipv4_routes", ipv4_routes)
        if ipv6_routes is not None:
            pulumi.set(__self__, "ipv6_routes", ipv6_routes)

    @property
    @pulumi.getter(name="ipv4Routes")
    def ipv4_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]]:
        """
        List with object IPv4Routes.
        """
        return pulumi.get(self, "ipv4_routes")

    @ipv4_routes.setter
    def ipv4_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]]):
        pulumi.set(self, "ipv4_routes", value)

    @property
    @pulumi.getter(name="ipv6Routes")
    def ipv6_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]]:
        """
        List with object IPv6Routes.
        """
        return pulumi.get(self, "ipv6_routes")

    @ipv6_routes.setter
    def ipv6_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRoutePropertiesArgs']]]]):
        pulumi.set(self, "ipv6_routes", value)


@pulumi.input_type
class StaticRoutePropertiesArgs:
    def __init__(__self__, *,
                 next_hop: pulumi.Input[Sequence[pulumi.Input[str]]],
                 prefix: pulumi.Input[str]):
        """
        Static Route properties.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] next_hop: List of next hop IPv4 | IPv6 addresses.
        :param pulumi.Input[str] prefix: IPv4 | IPv6 Prefix.
        """
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of next hop IPv4 | IPv6 addresses.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "next_hop", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        IPv4 | IPv6 Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class TerminalServerConfigurationArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 primary_ipv4_prefix: pulumi.Input[str],
                 secondary_ipv4_prefix: pulumi.Input[str],
                 username: pulumi.Input[str],
                 primary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 secondary_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None):
        """
        Network and credentials configuration currently applied to terminal server.
        :param pulumi.Input[str] password: Password for the terminal server connection.
        :param pulumi.Input[str] primary_ipv4_prefix: IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv4_prefix: Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] username: Username for the terminal server connection.
        :param pulumi.Input[str] primary_ipv6_prefix: IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] secondary_ipv6_prefix: Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        :param pulumi.Input[str] serial_number: Serial Number of Terminal server.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "primary_ipv4_prefix", primary_ipv4_prefix)
        pulumi.set(__self__, "secondary_ipv4_prefix", secondary_ipv4_prefix)
        pulumi.set(__self__, "username", username)
        if primary_ipv6_prefix is not None:
            pulumi.set(__self__, "primary_ipv6_prefix", primary_ipv6_prefix)
        if secondary_ipv6_prefix is not None:
            pulumi.set(__self__, "secondary_ipv6_prefix", secondary_ipv6_prefix)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password for the terminal server connection.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="primaryIpv4Prefix")
    def primary_ipv4_prefix(self) -> pulumi.Input[str]:
        """
        IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv4_prefix")

    @primary_ipv4_prefix.setter
    def primary_ipv4_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_ipv4_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv4Prefix")
    def secondary_ipv4_prefix(self) -> pulumi.Input[str]:
        """
        Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv4_prefix")

    @secondary_ipv4_prefix.setter
    def secondary_ipv4_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "secondary_ipv4_prefix", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username for the terminal server connection.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="primaryIpv6Prefix")
    def primary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "primary_ipv6_prefix")

    @primary_ipv6_prefix.setter
    def primary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="secondaryIpv6Prefix")
    def secondary_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
        """
        return pulumi.get(self, "secondary_ipv6_prefix")

    @secondary_ipv6_prefix.setter
    def secondary_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ipv6_prefix", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number of Terminal server.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)


@pulumi.input_type
class VpnConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 peering_option: pulumi.Input[Union[str, 'PeeringOption']],
                 option_a_properties: Optional[pulumi.Input['OptionAPropertiesArgs']] = None,
                 option_b_properties: Optional[pulumi.Input['FabricOptionBPropertiesArgs']] = None):
        """
        Configuration for infrastructure vpn.
        :param pulumi.Input[Union[str, 'PeeringOption']] peering_option: Peering option list.
        :param pulumi.Input['OptionAPropertiesArgs'] option_a_properties: option A properties
        :param pulumi.Input['FabricOptionBPropertiesArgs'] option_b_properties: option B properties
        """
        pulumi.set(__self__, "peering_option", peering_option)
        if option_a_properties is not None:
            pulumi.set(__self__, "option_a_properties", option_a_properties)
        if option_b_properties is not None:
            pulumi.set(__self__, "option_b_properties", option_b_properties)

    @property
    @pulumi.getter(name="peeringOption")
    def peering_option(self) -> pulumi.Input[Union[str, 'PeeringOption']]:
        """
        Peering option list.
        """
        return pulumi.get(self, "peering_option")

    @peering_option.setter
    def peering_option(self, value: pulumi.Input[Union[str, 'PeeringOption']]):
        pulumi.set(self, "peering_option", value)

    @property
    @pulumi.getter(name="optionAProperties")
    def option_a_properties(self) -> Optional[pulumi.Input['OptionAPropertiesArgs']]:
        """
        option A properties
        """
        return pulumi.get(self, "option_a_properties")

    @option_a_properties.setter
    def option_a_properties(self, value: Optional[pulumi.Input['OptionAPropertiesArgs']]):
        pulumi.set(self, "option_a_properties", value)

    @property
    @pulumi.getter(name="optionBProperties")
    def option_b_properties(self) -> Optional[pulumi.Input['FabricOptionBPropertiesArgs']]:
        """
        option B properties
        """
        return pulumi.get(self, "option_b_properties")

    @option_b_properties.setter
    def option_b_properties(self, value: Optional[pulumi.Input['FabricOptionBPropertiesArgs']]):
        pulumi.set(self, "option_b_properties", value)


