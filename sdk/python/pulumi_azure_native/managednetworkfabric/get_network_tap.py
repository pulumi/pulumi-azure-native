# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkTapResult',
    'AwaitableGetNetworkTapResult',
    'get_network_tap',
    'get_network_tap_output',
]

@pulumi.output_type
class GetNetworkTapResult:
    """
    The Network Tap resource definition.
    """
    def __init__(__self__, administrative_state=None, annotation=None, configuration_state=None, destinations=None, id=None, location=None, name=None, network_packet_broker_id=None, polling_type=None, provisioning_state=None, source_tap_rule_id=None, system_data=None, tags=None, type=None):
        if administrative_state and not isinstance(administrative_state, str):
            raise TypeError("Expected argument 'administrative_state' to be a str")
        pulumi.set(__self__, "administrative_state", administrative_state)
        if annotation and not isinstance(annotation, str):
            raise TypeError("Expected argument 'annotation' to be a str")
        pulumi.set(__self__, "annotation", annotation)
        if configuration_state and not isinstance(configuration_state, str):
            raise TypeError("Expected argument 'configuration_state' to be a str")
        pulumi.set(__self__, "configuration_state", configuration_state)
        if destinations and not isinstance(destinations, list):
            raise TypeError("Expected argument 'destinations' to be a list")
        pulumi.set(__self__, "destinations", destinations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_packet_broker_id and not isinstance(network_packet_broker_id, str):
            raise TypeError("Expected argument 'network_packet_broker_id' to be a str")
        pulumi.set(__self__, "network_packet_broker_id", network_packet_broker_id)
        if polling_type and not isinstance(polling_type, str):
            raise TypeError("Expected argument 'polling_type' to be a str")
        pulumi.set(__self__, "polling_type", polling_type)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if source_tap_rule_id and not isinstance(source_tap_rule_id, str):
            raise TypeError("Expected argument 'source_tap_rule_id' to be a str")
        pulumi.set(__self__, "source_tap_rule_id", source_tap_rule_id)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="administrativeState")
    def administrative_state(self) -> str:
        """
        Administrative state of the resource. Example -Enabled/Disabled
        """
        return pulumi.get(self, "administrative_state")

    @property
    @pulumi.getter
    def annotation(self) -> Optional[str]:
        """
        Switch configuration description.
        """
        return pulumi.get(self, "annotation")

    @property
    @pulumi.getter(name="configurationState")
    def configuration_state(self) -> str:
        """
        Gets the configurations state of the resource.
        """
        return pulumi.get(self, "configuration_state")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.NetworkTapPropertiesResponseDestinations']:
        """
        List of destinations to send the filter traffic.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPacketBrokerId")
    def network_packet_broker_id(self) -> str:
        """
        ARM resource ID of the Network Packet Broker.
        """
        return pulumi.get(self, "network_packet_broker_id")

    @property
    @pulumi.getter(name="pollingType")
    def polling_type(self) -> Optional[str]:
        """
        Polling type.
        """
        return pulumi.get(self, "polling_type")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="sourceTapRuleId")
    def source_tap_rule_id(self) -> str:
        """
        Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
        """
        return pulumi.get(self, "source_tap_rule_id")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetNetworkTapResult(GetNetworkTapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkTapResult(
            administrative_state=self.administrative_state,
            annotation=self.annotation,
            configuration_state=self.configuration_state,
            destinations=self.destinations,
            id=self.id,
            location=self.location,
            name=self.name,
            network_packet_broker_id=self.network_packet_broker_id,
            polling_type=self.polling_type,
            provisioning_state=self.provisioning_state,
            source_tap_rule_id=self.source_tap_rule_id,
            system_data=self.system_data,
            tags=self.tags,
            type=self.type)


def get_network_tap(network_tap_name: Optional[str] = None,
                    resource_group_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkTapResult:
    """
    Retrieves details of this Network Tap.
    Azure REST API version: 2023-06-15.


    :param str network_tap_name: Name of the Network Tap.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    __args__ = dict()
    __args__['networkTapName'] = network_tap_name
    __args__['resourceGroupName'] = resource_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:managednetworkfabric:getNetworkTap', __args__, opts=opts, typ=GetNetworkTapResult).value

    return AwaitableGetNetworkTapResult(
        administrative_state=pulumi.get(__ret__, 'administrative_state'),
        annotation=pulumi.get(__ret__, 'annotation'),
        configuration_state=pulumi.get(__ret__, 'configuration_state'),
        destinations=pulumi.get(__ret__, 'destinations'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        network_packet_broker_id=pulumi.get(__ret__, 'network_packet_broker_id'),
        polling_type=pulumi.get(__ret__, 'polling_type'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        source_tap_rule_id=pulumi.get(__ret__, 'source_tap_rule_id'),
        system_data=pulumi.get(__ret__, 'system_data'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_network_tap)
def get_network_tap_output(network_tap_name: Optional[pulumi.Input[str]] = None,
                           resource_group_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkTapResult]:
    """
    Retrieves details of this Network Tap.
    Azure REST API version: 2023-06-15.


    :param str network_tap_name: Name of the Network Tap.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    """
    ...
