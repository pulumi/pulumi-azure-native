# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ListFeatureSubscriptionResult',
    'AwaitableListFeatureSubscriptionResult',
    'list_feature_subscription',
    'list_feature_subscription_output',
]

@pulumi.output_type
class ListFeatureSubscriptionResult:
    """
    List of features with enabled status
    """
    def __init__(__self__, features=None):
        if features and not isinstance(features, dict):
            raise TypeError("Expected argument 'features' to be a dict")
        pulumi.set(__self__, "features", features)

    @property
    @pulumi.getter
    def features(self) -> Optional[Mapping[str, bool]]:
        """
        Features with enabled status
        """
        return pulumi.get(self, "features")


class AwaitableListFeatureSubscriptionResult(ListFeatureSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ListFeatureSubscriptionResult(
            features=self.features)


def list_feature_subscription(features: Optional[Sequence[str]] = None,
                              locations: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableListFeatureSubscriptionResult:
    """
    Gets details from a list of feature names.


    :param Sequence[str] features: Set of features
    :param str locations: Location of feature.
    """
    __args__ = dict()
    __args__['features'] = features
    __args__['locations'] = locations
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:purview/v20211201:listFeatureSubscription', __args__, opts=opts, typ=ListFeatureSubscriptionResult).value

    return AwaitableListFeatureSubscriptionResult(
        features=pulumi.get(__ret__, 'features'))


@_utilities.lift_output_func(list_feature_subscription)
def list_feature_subscription_output(features: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     locations: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ListFeatureSubscriptionResult]:
    """
    Gets details from a list of feature names.


    :param Sequence[str] features: Set of features
    :param str locations: Location of feature.
    """
    ...
