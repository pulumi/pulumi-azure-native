# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubscriptionTarDirectoryArgs', 'SubscriptionTarDirectory']

@pulumi.input_type
class SubscriptionTarDirectoryArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input['TargetDirectoryRequestPropertiesArgs']] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SubscriptionTarDirectory resource.
        :param pulumi.Input['TargetDirectoryRequestPropertiesArgs'] properties: Target Directory request properties.
        :param pulumi.Input[str] subscription_id: Subscription Id.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['TargetDirectoryRequestPropertiesArgs']]:
        """
        Target Directory request properties.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['TargetDirectoryRequestPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription Id.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


class SubscriptionTarDirectory(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 properties: Optional[pulumi.Input[Union['TargetDirectoryRequestPropertiesArgs', 'TargetDirectoryRequestPropertiesArgsDict']]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Subscription Response for Changed Target Directory.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TargetDirectoryRequestPropertiesArgs', 'TargetDirectoryRequestPropertiesArgsDict']] properties: Target Directory request properties.
        :param pulumi.Input[str] subscription_id: Subscription Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SubscriptionTarDirectoryArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Subscription Response for Changed Target Directory.

        :param str resource_name: The name of the resource.
        :param SubscriptionTarDirectoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionTarDirectoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 properties: Optional[pulumi.Input[Union['TargetDirectoryRequestPropertiesArgs', 'TargetDirectoryRequestPropertiesArgsDict']]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionTarDirectoryArgs.__new__(SubscriptionTarDirectoryArgs)

            __props__.__dict__["properties"] = properties
            __props__.__dict__["subscription_id"] = subscription_id
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:subscription:SubscriptionTarDirectory")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SubscriptionTarDirectory, __self__).__init__(
            'azure-native:subscription/v20240801preview:SubscriptionTarDirectory',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SubscriptionTarDirectory':
        """
        Get an existing SubscriptionTarDirectory resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SubscriptionTarDirectoryArgs.__new__(SubscriptionTarDirectoryArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["properties"] = None
        __props__.__dict__["type"] = None
        return SubscriptionTarDirectory(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Subscription Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output['outputs.TargetDirectoryResultPropertiesResponse']:
        """
        Subscription Changed Target Directory response properties.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type, Microsoft.Subscription/changeTenantRequest.
        """
        return pulumi.get(self, "type")

