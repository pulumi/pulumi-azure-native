# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'CustomNamingConventionArgs',
    'CustomNamingConventionArgsDict',
    'DecommissionedManagementGroupPropertiesArgs',
    'DecommissionedManagementGroupPropertiesArgsDict',
    'LandingZoneAccountResourcePropertiesArgs',
    'LandingZoneAccountResourcePropertiesArgsDict',
    'LandingZoneConfigurationResourcePropertiesArgs',
    'LandingZoneConfigurationResourcePropertiesArgsDict',
    'LandingZoneManagementGroupPropertiesArgs',
    'LandingZoneManagementGroupPropertiesArgsDict',
    'LandingZoneRegistrationResourcePropertiesArgs',
    'LandingZoneRegistrationResourcePropertiesArgsDict',
    'ManagedIdentityPropertiesArgs',
    'ManagedIdentityPropertiesArgsDict',
    'ManagedServiceIdentityArgs',
    'ManagedServiceIdentityArgsDict',
    'ManagementGroupPropertiesArgs',
    'ManagementGroupPropertiesArgsDict',
    'PlatformManagementGroupPropertiesArgs',
    'PlatformManagementGroupPropertiesArgsDict',
    'PolicyInitiativeAssignmentPropertiesArgs',
    'PolicyInitiativeAssignmentPropertiesArgsDict',
    'SandboxManagementGroupPropertiesArgs',
    'SandboxManagementGroupPropertiesArgsDict',
    'TagsArgs',
    'TagsArgsDict',
]

MYPY = False

if not MYPY:
    class CustomNamingConventionArgsDict(TypedDict):
        """
        The details for the custom naming convention override for a specific resource type.
        """
        formula: pulumi.Input[str]
        """
        The custom naming formula for the resource type.
        """
        resource_type: pulumi.Input[Union[str, 'ResourceType']]
        """
        The type of the resource.
        """
elif False:
    CustomNamingConventionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomNamingConventionArgs:
    def __init__(__self__, *,
                 formula: pulumi.Input[str],
                 resource_type: pulumi.Input[Union[str, 'ResourceType']]):
        """
        The details for the custom naming convention override for a specific resource type.
        :param pulumi.Input[str] formula: The custom naming formula for the resource type.
        :param pulumi.Input[Union[str, 'ResourceType']] resource_type: The type of the resource.
        """
        pulumi.set(__self__, "formula", formula)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def formula(self) -> pulumi.Input[str]:
        """
        The custom naming formula for the resource type.
        """
        return pulumi.get(self, "formula")

    @formula.setter
    def formula(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[Union[str, 'ResourceType']]:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[Union[str, 'ResourceType']]):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class DecommissionedManagementGroupPropertiesArgsDict(TypedDict):
        """
        The 'Decommissioned' management group properties.
        """
        create: pulumi.Input[bool]
        """
        This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgsDict']]]
        """
        Array of policy initiatives applied to the management group.
        """
elif False:
    DecommissionedManagementGroupPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DecommissionedManagementGroupPropertiesArgs:
    def __init__(__self__, *,
                 create: pulumi.Input[bool],
                 policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        """
        The 'Decommissioned' management group properties.
        :param pulumi.Input[bool] create: This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input[bool]:
        """
        This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input[bool]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")

    @policy_initiatives_assignment_properties.setter
    def policy_initiatives_assignment_properties(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        pulumi.set(self, "policy_initiatives_assignment_properties", value)


if not MYPY:
    class LandingZoneAccountResourcePropertiesArgsDict(TypedDict):
        """
        The properties of landing zone account resource type.
        """
        storage_account: pulumi.Input[str]
        """
        The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
        """
elif False:
    LandingZoneAccountResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LandingZoneAccountResourcePropertiesArgs:
    def __init__(__self__, *,
                 storage_account: pulumi.Input[str]):
        """
        The properties of landing zone account resource type.
        :param pulumi.Input[str] storage_account: The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
        """
        pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Input[str]:
        """
        The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
        """
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account", value)


if not MYPY:
    class LandingZoneConfigurationResourcePropertiesArgsDict(TypedDict):
        """
        The properties of landing zone configuration resource type.
        """
        azure_bastion_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']]
        """
        Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
        """
        ddos_protection_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']]
        """
        Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
        """
        firewall_creation_option: pulumi.Input[Union[str, 'FirewallCreationOptions']]
        """
        Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
        """
        gateway_subnet_cidr_block: pulumi.Input[str]
        """
        The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        """
        hub_network_cidr_block: pulumi.Input[str]
        """
        The Virtual Network address. Specify the address using IPv4 CIDR notation.
        """
        log_analytics_workspace_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']]
        """
        Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
        """
        log_retention_in_days: pulumi.Input[float]
        """
        Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        """
        managed_identity: pulumi.Input['ManagedIdentityPropertiesArgsDict']
        """
        The managed identity to be assigned to this landing zone configuration.
        """
        azure_bastion_subnet_cidr_block: NotRequired[pulumi.Input[str]]
        """
        The Bastion subnet address. Specify the address using IPv4 CIDR notation.
        """
        custom_naming_convention: NotRequired[pulumi.Input[Sequence[pulumi.Input['CustomNamingConventionArgsDict']]]]
        """
        The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        """
        decommissioned_mg_metadata: NotRequired[pulumi.Input['DecommissionedManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
        """
        existing_azure_bastion_id: NotRequired[pulumi.Input[str]]
        """
        The resource ID of the Bastion when reusing an existing one.
        """
        existing_ddos_protection_id: NotRequired[pulumi.Input[str]]
        """
        The resource ID of the DDoS protection plan when reusing an existing one.
        """
        existing_log_analytics_workspace_id: NotRequired[pulumi.Input[str]]
        """
        The resource ID of the log analytics workspace when reusing an existing one.
        """
        firewall_subnet_cidr_block: NotRequired[pulumi.Input[str]]
        """
        The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        """
        landing_zones_mg_children: NotRequired[pulumi.Input[Sequence[pulumi.Input['LandingZoneManagementGroupPropertiesArgsDict']]]]
        """
        The child management groups of 'Landing Zones' management group and their assigned policies.
        """
        landing_zones_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Landing Zones' management group.
        """
        naming_convention_formula: NotRequired[pulumi.Input[str]]
        """
        The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        """
        platform_connectivity_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Connectivity' management group under 'Platform' management group.
        """
        platform_identity_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Identity' management group under 'Platform' management group.
        """
        platform_management_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Management' management group under 'Platform' management group.
        """
        platform_mg_children: NotRequired[pulumi.Input[Sequence[pulumi.Input['PlatformManagementGroupPropertiesArgsDict']]]]
        """
        The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'
        """
        platform_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Platform' management group.
        """
        sandbox_mg_metadata: NotRequired[pulumi.Input['SandboxManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the 'Sandbox' management group and indicator to create it or not.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['TagsArgsDict']]]]
        """
        Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}
        """
        top_level_mg_metadata: NotRequired[pulumi.Input['ManagementGroupPropertiesArgsDict']]
        """
        The assigned policies of the parent management group.
        """
elif False:
    LandingZoneConfigurationResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LandingZoneConfigurationResourcePropertiesArgs:
    def __init__(__self__, *,
                 azure_bastion_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']],
                 ddos_protection_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']],
                 firewall_creation_option: pulumi.Input[Union[str, 'FirewallCreationOptions']],
                 gateway_subnet_cidr_block: pulumi.Input[str],
                 hub_network_cidr_block: pulumi.Input[str],
                 log_analytics_workspace_creation_option: pulumi.Input[Union[str, 'ResourceCreationOptions']],
                 log_retention_in_days: pulumi.Input[float],
                 managed_identity: pulumi.Input['ManagedIdentityPropertiesArgs'],
                 azure_bastion_subnet_cidr_block: Optional[pulumi.Input[str]] = None,
                 custom_naming_convention: Optional[pulumi.Input[Sequence[pulumi.Input['CustomNamingConventionArgs']]]] = None,
                 decommissioned_mg_metadata: Optional[pulumi.Input['DecommissionedManagementGroupPropertiesArgs']] = None,
                 existing_azure_bastion_id: Optional[pulumi.Input[str]] = None,
                 existing_ddos_protection_id: Optional[pulumi.Input[str]] = None,
                 existing_log_analytics_workspace_id: Optional[pulumi.Input[str]] = None,
                 firewall_subnet_cidr_block: Optional[pulumi.Input[str]] = None,
                 landing_zones_mg_children: Optional[pulumi.Input[Sequence[pulumi.Input['LandingZoneManagementGroupPropertiesArgs']]]] = None,
                 landing_zones_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None,
                 naming_convention_formula: Optional[pulumi.Input[str]] = None,
                 platform_connectivity_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None,
                 platform_identity_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None,
                 platform_management_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None,
                 platform_mg_children: Optional[pulumi.Input[Sequence[pulumi.Input['PlatformManagementGroupPropertiesArgs']]]] = None,
                 platform_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None,
                 sandbox_mg_metadata: Optional[pulumi.Input['SandboxManagementGroupPropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TagsArgs']]]] = None,
                 top_level_mg_metadata: Optional[pulumi.Input['ManagementGroupPropertiesArgs']] = None):
        """
        The properties of landing zone configuration resource type.
        :param pulumi.Input[Union[str, 'ResourceCreationOptions']] azure_bastion_creation_option: Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
        :param pulumi.Input[Union[str, 'ResourceCreationOptions']] ddos_protection_creation_option: Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
        :param pulumi.Input[Union[str, 'FirewallCreationOptions']] firewall_creation_option: Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
        :param pulumi.Input[str] gateway_subnet_cidr_block: The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        :param pulumi.Input[str] hub_network_cidr_block: The Virtual Network address. Specify the address using IPv4 CIDR notation.
        :param pulumi.Input[Union[str, 'ResourceCreationOptions']] log_analytics_workspace_creation_option: Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
        :param pulumi.Input[float] log_retention_in_days: Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        :param pulumi.Input['ManagedIdentityPropertiesArgs'] managed_identity: The managed identity to be assigned to this landing zone configuration.
        :param pulumi.Input[str] azure_bastion_subnet_cidr_block: The Bastion subnet address. Specify the address using IPv4 CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input['CustomNamingConventionArgs']]] custom_naming_convention: The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        :param pulumi.Input['DecommissionedManagementGroupPropertiesArgs'] decommissioned_mg_metadata: The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
        :param pulumi.Input[str] existing_azure_bastion_id: The resource ID of the Bastion when reusing an existing one.
        :param pulumi.Input[str] existing_ddos_protection_id: The resource ID of the DDoS protection plan when reusing an existing one.
        :param pulumi.Input[str] existing_log_analytics_workspace_id: The resource ID of the log analytics workspace when reusing an existing one.
        :param pulumi.Input[str] firewall_subnet_cidr_block: The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        :param pulumi.Input[Sequence[pulumi.Input['LandingZoneManagementGroupPropertiesArgs']]] landing_zones_mg_children: The child management groups of 'Landing Zones' management group and their assigned policies.
        :param pulumi.Input['ManagementGroupPropertiesArgs'] landing_zones_mg_metadata: The assigned policies of the 'Landing Zones' management group.
        :param pulumi.Input[str] naming_convention_formula: The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        :param pulumi.Input['ManagementGroupPropertiesArgs'] platform_connectivity_mg_metadata: The assigned policies of the 'Connectivity' management group under 'Platform' management group.
        :param pulumi.Input['ManagementGroupPropertiesArgs'] platform_identity_mg_metadata: The assigned policies of the 'Identity' management group under 'Platform' management group.
        :param pulumi.Input['ManagementGroupPropertiesArgs'] platform_management_mg_metadata: The assigned policies of the 'Management' management group under 'Platform' management group.
        :param pulumi.Input[Sequence[pulumi.Input['PlatformManagementGroupPropertiesArgs']]] platform_mg_children: The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'
        :param pulumi.Input['ManagementGroupPropertiesArgs'] platform_mg_metadata: The assigned policies of the 'Platform' management group.
        :param pulumi.Input['SandboxManagementGroupPropertiesArgs'] sandbox_mg_metadata: The assigned policies of the 'Sandbox' management group and indicator to create it or not.
        :param pulumi.Input[Sequence[pulumi.Input['TagsArgs']]] tags: Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}
        :param pulumi.Input['ManagementGroupPropertiesArgs'] top_level_mg_metadata: The assigned policies of the parent management group.
        """
        pulumi.set(__self__, "azure_bastion_creation_option", azure_bastion_creation_option)
        pulumi.set(__self__, "ddos_protection_creation_option", ddos_protection_creation_option)
        pulumi.set(__self__, "firewall_creation_option", firewall_creation_option)
        pulumi.set(__self__, "gateway_subnet_cidr_block", gateway_subnet_cidr_block)
        pulumi.set(__self__, "hub_network_cidr_block", hub_network_cidr_block)
        pulumi.set(__self__, "log_analytics_workspace_creation_option", log_analytics_workspace_creation_option)
        pulumi.set(__self__, "log_retention_in_days", log_retention_in_days)
        pulumi.set(__self__, "managed_identity", managed_identity)
        if azure_bastion_subnet_cidr_block is not None:
            pulumi.set(__self__, "azure_bastion_subnet_cidr_block", azure_bastion_subnet_cidr_block)
        if custom_naming_convention is not None:
            pulumi.set(__self__, "custom_naming_convention", custom_naming_convention)
        if decommissioned_mg_metadata is not None:
            pulumi.set(__self__, "decommissioned_mg_metadata", decommissioned_mg_metadata)
        if existing_azure_bastion_id is not None:
            pulumi.set(__self__, "existing_azure_bastion_id", existing_azure_bastion_id)
        if existing_ddos_protection_id is not None:
            pulumi.set(__self__, "existing_ddos_protection_id", existing_ddos_protection_id)
        if existing_log_analytics_workspace_id is not None:
            pulumi.set(__self__, "existing_log_analytics_workspace_id", existing_log_analytics_workspace_id)
        if firewall_subnet_cidr_block is not None:
            pulumi.set(__self__, "firewall_subnet_cidr_block", firewall_subnet_cidr_block)
        if landing_zones_mg_children is not None:
            pulumi.set(__self__, "landing_zones_mg_children", landing_zones_mg_children)
        if landing_zones_mg_metadata is not None:
            pulumi.set(__self__, "landing_zones_mg_metadata", landing_zones_mg_metadata)
        if naming_convention_formula is not None:
            pulumi.set(__self__, "naming_convention_formula", naming_convention_formula)
        if platform_connectivity_mg_metadata is not None:
            pulumi.set(__self__, "platform_connectivity_mg_metadata", platform_connectivity_mg_metadata)
        if platform_identity_mg_metadata is not None:
            pulumi.set(__self__, "platform_identity_mg_metadata", platform_identity_mg_metadata)
        if platform_management_mg_metadata is not None:
            pulumi.set(__self__, "platform_management_mg_metadata", platform_management_mg_metadata)
        if platform_mg_children is not None:
            pulumi.set(__self__, "platform_mg_children", platform_mg_children)
        if platform_mg_metadata is not None:
            pulumi.set(__self__, "platform_mg_metadata", platform_mg_metadata)
        if sandbox_mg_metadata is not None:
            pulumi.set(__self__, "sandbox_mg_metadata", sandbox_mg_metadata)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if top_level_mg_metadata is not None:
            pulumi.set(__self__, "top_level_mg_metadata", top_level_mg_metadata)

    @property
    @pulumi.getter(name="azureBastionCreationOption")
    def azure_bastion_creation_option(self) -> pulumi.Input[Union[str, 'ResourceCreationOptions']]:
        """
        Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
        """
        return pulumi.get(self, "azure_bastion_creation_option")

    @azure_bastion_creation_option.setter
    def azure_bastion_creation_option(self, value: pulumi.Input[Union[str, 'ResourceCreationOptions']]):
        pulumi.set(self, "azure_bastion_creation_option", value)

    @property
    @pulumi.getter(name="ddosProtectionCreationOption")
    def ddos_protection_creation_option(self) -> pulumi.Input[Union[str, 'ResourceCreationOptions']]:
        """
        Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
        """
        return pulumi.get(self, "ddos_protection_creation_option")

    @ddos_protection_creation_option.setter
    def ddos_protection_creation_option(self, value: pulumi.Input[Union[str, 'ResourceCreationOptions']]):
        pulumi.set(self, "ddos_protection_creation_option", value)

    @property
    @pulumi.getter(name="firewallCreationOption")
    def firewall_creation_option(self) -> pulumi.Input[Union[str, 'FirewallCreationOptions']]:
        """
        Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
        """
        return pulumi.get(self, "firewall_creation_option")

    @firewall_creation_option.setter
    def firewall_creation_option(self, value: pulumi.Input[Union[str, 'FirewallCreationOptions']]):
        pulumi.set(self, "firewall_creation_option", value)

    @property
    @pulumi.getter(name="gatewaySubnetCidrBlock")
    def gateway_subnet_cidr_block(self) -> pulumi.Input[str]:
        """
        The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        """
        return pulumi.get(self, "gateway_subnet_cidr_block")

    @gateway_subnet_cidr_block.setter
    def gateway_subnet_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_subnet_cidr_block", value)

    @property
    @pulumi.getter(name="hubNetworkCidrBlock")
    def hub_network_cidr_block(self) -> pulumi.Input[str]:
        """
        The Virtual Network address. Specify the address using IPv4 CIDR notation.
        """
        return pulumi.get(self, "hub_network_cidr_block")

    @hub_network_cidr_block.setter
    def hub_network_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "hub_network_cidr_block", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceCreationOption")
    def log_analytics_workspace_creation_option(self) -> pulumi.Input[Union[str, 'ResourceCreationOptions']]:
        """
        Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
        """
        return pulumi.get(self, "log_analytics_workspace_creation_option")

    @log_analytics_workspace_creation_option.setter
    def log_analytics_workspace_creation_option(self, value: pulumi.Input[Union[str, 'ResourceCreationOptions']]):
        pulumi.set(self, "log_analytics_workspace_creation_option", value)

    @property
    @pulumi.getter(name="logRetentionInDays")
    def log_retention_in_days(self) -> pulumi.Input[float]:
        """
        Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        """
        return pulumi.get(self, "log_retention_in_days")

    @log_retention_in_days.setter
    def log_retention_in_days(self, value: pulumi.Input[float]):
        pulumi.set(self, "log_retention_in_days", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(self) -> pulumi.Input['ManagedIdentityPropertiesArgs']:
        """
        The managed identity to be assigned to this landing zone configuration.
        """
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(self, value: pulumi.Input['ManagedIdentityPropertiesArgs']):
        pulumi.set(self, "managed_identity", value)

    @property
    @pulumi.getter(name="azureBastionSubnetCidrBlock")
    def azure_bastion_subnet_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The Bastion subnet address. Specify the address using IPv4 CIDR notation.
        """
        return pulumi.get(self, "azure_bastion_subnet_cidr_block")

    @azure_bastion_subnet_cidr_block.setter
    def azure_bastion_subnet_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_bastion_subnet_cidr_block", value)

    @property
    @pulumi.getter(name="customNamingConvention")
    def custom_naming_convention(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomNamingConventionArgs']]]]:
        """
        The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        """
        return pulumi.get(self, "custom_naming_convention")

    @custom_naming_convention.setter
    def custom_naming_convention(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomNamingConventionArgs']]]]):
        pulumi.set(self, "custom_naming_convention", value)

    @property
    @pulumi.getter(name="decommissionedMgMetadata")
    def decommissioned_mg_metadata(self) -> Optional[pulumi.Input['DecommissionedManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
        """
        return pulumi.get(self, "decommissioned_mg_metadata")

    @decommissioned_mg_metadata.setter
    def decommissioned_mg_metadata(self, value: Optional[pulumi.Input['DecommissionedManagementGroupPropertiesArgs']]):
        pulumi.set(self, "decommissioned_mg_metadata", value)

    @property
    @pulumi.getter(name="existingAzureBastionId")
    def existing_azure_bastion_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the Bastion when reusing an existing one.
        """
        return pulumi.get(self, "existing_azure_bastion_id")

    @existing_azure_bastion_id.setter
    def existing_azure_bastion_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_azure_bastion_id", value)

    @property
    @pulumi.getter(name="existingDdosProtectionId")
    def existing_ddos_protection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the DDoS protection plan when reusing an existing one.
        """
        return pulumi.get(self, "existing_ddos_protection_id")

    @existing_ddos_protection_id.setter
    def existing_ddos_protection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_ddos_protection_id", value)

    @property
    @pulumi.getter(name="existingLogAnalyticsWorkspaceId")
    def existing_log_analytics_workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the log analytics workspace when reusing an existing one.
        """
        return pulumi.get(self, "existing_log_analytics_workspace_id")

    @existing_log_analytics_workspace_id.setter
    def existing_log_analytics_workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_log_analytics_workspace_id", value)

    @property
    @pulumi.getter(name="firewallSubnetCidrBlock")
    def firewall_subnet_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        """
        return pulumi.get(self, "firewall_subnet_cidr_block")

    @firewall_subnet_cidr_block.setter
    def firewall_subnet_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_subnet_cidr_block", value)

    @property
    @pulumi.getter(name="landingZonesMgChildren")
    def landing_zones_mg_children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LandingZoneManagementGroupPropertiesArgs']]]]:
        """
        The child management groups of 'Landing Zones' management group and their assigned policies.
        """
        return pulumi.get(self, "landing_zones_mg_children")

    @landing_zones_mg_children.setter
    def landing_zones_mg_children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LandingZoneManagementGroupPropertiesArgs']]]]):
        pulumi.set(self, "landing_zones_mg_children", value)

    @property
    @pulumi.getter(name="landingZonesMgMetadata")
    def landing_zones_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Landing Zones' management group.
        """
        return pulumi.get(self, "landing_zones_mg_metadata")

    @landing_zones_mg_metadata.setter
    def landing_zones_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "landing_zones_mg_metadata", value)

    @property
    @pulumi.getter(name="namingConventionFormula")
    def naming_convention_formula(self) -> Optional[pulumi.Input[str]]:
        """
        The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        """
        return pulumi.get(self, "naming_convention_formula")

    @naming_convention_formula.setter
    def naming_convention_formula(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "naming_convention_formula", value)

    @property
    @pulumi.getter(name="platformConnectivityMgMetadata")
    def platform_connectivity_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Connectivity' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_connectivity_mg_metadata")

    @platform_connectivity_mg_metadata.setter
    def platform_connectivity_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "platform_connectivity_mg_metadata", value)

    @property
    @pulumi.getter(name="platformIdentityMgMetadata")
    def platform_identity_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Identity' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_identity_mg_metadata")

    @platform_identity_mg_metadata.setter
    def platform_identity_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "platform_identity_mg_metadata", value)

    @property
    @pulumi.getter(name="platformManagementMgMetadata")
    def platform_management_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Management' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_management_mg_metadata")

    @platform_management_mg_metadata.setter
    def platform_management_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "platform_management_mg_metadata", value)

    @property
    @pulumi.getter(name="platformMgChildren")
    def platform_mg_children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlatformManagementGroupPropertiesArgs']]]]:
        """
        The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'
        """
        return pulumi.get(self, "platform_mg_children")

    @platform_mg_children.setter
    def platform_mg_children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlatformManagementGroupPropertiesArgs']]]]):
        pulumi.set(self, "platform_mg_children", value)

    @property
    @pulumi.getter(name="platformMgMetadata")
    def platform_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Platform' management group.
        """
        return pulumi.get(self, "platform_mg_metadata")

    @platform_mg_metadata.setter
    def platform_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "platform_mg_metadata", value)

    @property
    @pulumi.getter(name="sandboxMgMetadata")
    def sandbox_mg_metadata(self) -> Optional[pulumi.Input['SandboxManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the 'Sandbox' management group and indicator to create it or not.
        """
        return pulumi.get(self, "sandbox_mg_metadata")

    @sandbox_mg_metadata.setter
    def sandbox_mg_metadata(self, value: Optional[pulumi.Input['SandboxManagementGroupPropertiesArgs']]):
        pulumi.set(self, "sandbox_mg_metadata", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagsArgs']]]]:
        """
        Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagsArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="topLevelMgMetadata")
    def top_level_mg_metadata(self) -> Optional[pulumi.Input['ManagementGroupPropertiesArgs']]:
        """
        The assigned policies of the parent management group.
        """
        return pulumi.get(self, "top_level_mg_metadata")

    @top_level_mg_metadata.setter
    def top_level_mg_metadata(self, value: Optional[pulumi.Input['ManagementGroupPropertiesArgs']]):
        pulumi.set(self, "top_level_mg_metadata", value)


if not MYPY:
    class LandingZoneManagementGroupPropertiesArgsDict(TypedDict):
        """
        The 'Landing Zones' management group properties..
        """
        name: pulumi.Input[str]
        """
        Management group name.
        """
        policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgsDict']]]
        """
        Array of policy initiatives applied to the management group.
        """
elif False:
    LandingZoneManagementGroupPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LandingZoneManagementGroupPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        """
        The 'Landing Zones' management group properties..
        :param pulumi.Input[str] name: Management group name.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Management group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")

    @policy_initiatives_assignment_properties.setter
    def policy_initiatives_assignment_properties(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        pulumi.set(self, "policy_initiatives_assignment_properties", value)


if not MYPY:
    class LandingZoneRegistrationResourcePropertiesArgsDict(TypedDict):
        """
        The properties of landing zone registration resource type.
        """
        existing_landing_zone_configuration_id: pulumi.Input[str]
        """
        The resource id of the associated landing zone configuration.
        """
        existing_top_level_mg_id: pulumi.Input[str]
        """
        The resource id of the top level management group
        """
        managed_identity: pulumi.Input['ManagedIdentityPropertiesArgsDict']
        """
        The managed identity to be assigned to this landing zone registration.
        """
elif False:
    LandingZoneRegistrationResourcePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LandingZoneRegistrationResourcePropertiesArgs:
    def __init__(__self__, *,
                 existing_landing_zone_configuration_id: pulumi.Input[str],
                 existing_top_level_mg_id: pulumi.Input[str],
                 managed_identity: pulumi.Input['ManagedIdentityPropertiesArgs']):
        """
        The properties of landing zone registration resource type.
        :param pulumi.Input[str] existing_landing_zone_configuration_id: The resource id of the associated landing zone configuration.
        :param pulumi.Input[str] existing_top_level_mg_id: The resource id of the top level management group
        :param pulumi.Input['ManagedIdentityPropertiesArgs'] managed_identity: The managed identity to be assigned to this landing zone registration.
        """
        pulumi.set(__self__, "existing_landing_zone_configuration_id", existing_landing_zone_configuration_id)
        pulumi.set(__self__, "existing_top_level_mg_id", existing_top_level_mg_id)
        pulumi.set(__self__, "managed_identity", managed_identity)

    @property
    @pulumi.getter(name="existingLandingZoneConfigurationId")
    def existing_landing_zone_configuration_id(self) -> pulumi.Input[str]:
        """
        The resource id of the associated landing zone configuration.
        """
        return pulumi.get(self, "existing_landing_zone_configuration_id")

    @existing_landing_zone_configuration_id.setter
    def existing_landing_zone_configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "existing_landing_zone_configuration_id", value)

    @property
    @pulumi.getter(name="existingTopLevelMgId")
    def existing_top_level_mg_id(self) -> pulumi.Input[str]:
        """
        The resource id of the top level management group
        """
        return pulumi.get(self, "existing_top_level_mg_id")

    @existing_top_level_mg_id.setter
    def existing_top_level_mg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "existing_top_level_mg_id", value)

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(self) -> pulumi.Input['ManagedIdentityPropertiesArgs']:
        """
        The managed identity to be assigned to this landing zone registration.
        """
        return pulumi.get(self, "managed_identity")

    @managed_identity.setter
    def managed_identity(self, value: pulumi.Input['ManagedIdentityPropertiesArgs']):
        pulumi.set(self, "managed_identity", value)


if not MYPY:
    class ManagedIdentityPropertiesArgsDict(TypedDict):
        """
        The properties of managed identity, specifically including type and resource ID.
        """
        type: pulumi.Input[Union[str, 'ManagedIdentityResourceType']]
        """
        The type of managed identity.
        """
        user_assigned_identity_resource_id: NotRequired[pulumi.Input[str]]
        """
        The resource id of the managed identity.
        """
elif False:
    ManagedIdentityPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedIdentityPropertiesArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedIdentityResourceType']],
                 user_assigned_identity_resource_id: Optional[pulumi.Input[str]] = None):
        """
        The properties of managed identity, specifically including type and resource ID.
        :param pulumi.Input[Union[str, 'ManagedIdentityResourceType']] type: The type of managed identity.
        :param pulumi.Input[str] user_assigned_identity_resource_id: The resource id of the managed identity.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identity_resource_id is not None:
            pulumi.set(__self__, "user_assigned_identity_resource_id", user_assigned_identity_resource_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedIdentityResourceType']]:
        """
        The type of managed identity.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedIdentityResourceType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentityResourceId")
    def user_assigned_identity_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource id of the managed identity.
        """
        return pulumi.get(self, "user_assigned_identity_resource_id")

    @user_assigned_identity_resource_id.setter
    def user_assigned_identity_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_assigned_identity_resource_id", value)


if not MYPY:
    class ManagedServiceIdentityArgsDict(TypedDict):
        """
        Managed service identity (system assigned and/or user assigned identities)
        """
        type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
elif False:
    ManagedServiceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedServiceIdentityArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[Union[str, 'ManagedServiceIdentityType']],
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param pulumi.Input[Union[str, 'ManagedServiceIdentityType']] type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[Union[str, 'ManagedServiceIdentityType']]:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[Union[str, 'ManagedServiceIdentityType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class ManagementGroupPropertiesArgsDict(TypedDict):
        """
        The properties of policy initiatives applied to the management group.
        """
        policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgsDict']]]
        """
        Array of policy initiatives applied to the management group.
        """
elif False:
    ManagementGroupPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagementGroupPropertiesArgs:
    def __init__(__self__, *,
                 policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        """
        The properties of policy initiatives applied to the management group.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")

    @policy_initiatives_assignment_properties.setter
    def policy_initiatives_assignment_properties(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        pulumi.set(self, "policy_initiatives_assignment_properties", value)


if not MYPY:
    class PlatformManagementGroupPropertiesArgsDict(TypedDict):
        """
        The 'Platform' management group properties.
        """
        name: pulumi.Input[str]
        """
        Management group name.
        """
        policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgsDict']]]
        """
        Array of policy initiatives applied to the management group.
        """
elif False:
    PlatformManagementGroupPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PlatformManagementGroupPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        """
        The 'Platform' management group properties.
        :param pulumi.Input[str] name: Management group name.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Management group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")

    @policy_initiatives_assignment_properties.setter
    def policy_initiatives_assignment_properties(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        pulumi.set(self, "policy_initiatives_assignment_properties", value)


if not MYPY:
    class PolicyInitiativeAssignmentPropertiesArgsDict(TypedDict):
        """
        The properties of assigned policy initiatives.
        """
        assignment_parameters: Any
        """
        The parameters of the assigned policy initiative.
        """
        policy_initiative_id: pulumi.Input[str]
        """
        The fully qualified id of the policy initiative.
        """
elif False:
    PolicyInitiativeAssignmentPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyInitiativeAssignmentPropertiesArgs:
    def __init__(__self__, *,
                 assignment_parameters: Any,
                 policy_initiative_id: pulumi.Input[str]):
        """
        The properties of assigned policy initiatives.
        :param Any assignment_parameters: The parameters of the assigned policy initiative.
        :param pulumi.Input[str] policy_initiative_id: The fully qualified id of the policy initiative.
        """
        pulumi.set(__self__, "assignment_parameters", assignment_parameters)
        pulumi.set(__self__, "policy_initiative_id", policy_initiative_id)

    @property
    @pulumi.getter(name="assignmentParameters")
    def assignment_parameters(self) -> Any:
        """
        The parameters of the assigned policy initiative.
        """
        return pulumi.get(self, "assignment_parameters")

    @assignment_parameters.setter
    def assignment_parameters(self, value: Any):
        pulumi.set(self, "assignment_parameters", value)

    @property
    @pulumi.getter(name="policyInitiativeId")
    def policy_initiative_id(self) -> pulumi.Input[str]:
        """
        The fully qualified id of the policy initiative.
        """
        return pulumi.get(self, "policy_initiative_id")

    @policy_initiative_id.setter
    def policy_initiative_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_initiative_id", value)


if not MYPY:
    class SandboxManagementGroupPropertiesArgsDict(TypedDict):
        """
        The 'Sandbox' management group properties.
        """
        create: pulumi.Input[bool]
        """
        This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgsDict']]]
        """
        Array of policy initiatives applied to the management group.
        """
elif False:
    SandboxManagementGroupPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SandboxManagementGroupPropertiesArgs:
    def __init__(__self__, *,
                 create: pulumi.Input[bool],
                 policy_initiatives_assignment_properties: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        """
        The 'Sandbox' management group properties.
        :param pulumi.Input[bool] create: This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input[bool]:
        """
        This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input[bool]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")

    @policy_initiatives_assignment_properties.setter
    def policy_initiatives_assignment_properties(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyInitiativeAssignmentPropertiesArgs']]]):
        pulumi.set(self, "policy_initiatives_assignment_properties", value)


if not MYPY:
    class TagsArgsDict(TypedDict):
        """
        Key-value pairs that can be assigned to this resource.
        """
        name: pulumi.Input[str]
        """
        A tag name.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        A tag value.
        """
elif False:
    TagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TagsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        Key-value pairs that can be assigned to this resource.
        :param pulumi.Input[str] name: A tag name.
        :param pulumi.Input[str] value: A tag value.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        A tag value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


