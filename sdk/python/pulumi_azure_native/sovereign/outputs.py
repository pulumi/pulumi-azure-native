# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CustomNamingConventionResponse',
    'DecommissionedManagementGroupPropertiesResponse',
    'LandingZoneAccountResourcePropertiesResponse',
    'LandingZoneConfigurationResourcePropertiesResponse',
    'LandingZoneManagementGroupPropertiesResponse',
    'LandingZoneRegistrationResourcePropertiesResponse',
    'ManagedIdentityPropertiesResponse',
    'ManagedServiceIdentityResponse',
    'ManagementGroupPropertiesResponse',
    'PlatformManagementGroupPropertiesResponse',
    'PolicyInitiativeAssignmentPropertiesResponse',
    'SandboxManagementGroupPropertiesResponse',
    'SystemDataResponse',
    'TagsResponse',
    'UserAssignedIdentityResponse',
]

@pulumi.output_type
class CustomNamingConventionResponse(dict):
    """
    The details for the custom naming convention override for a specific resource type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomNamingConventionResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomNamingConventionResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomNamingConventionResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 formula: builtins.str,
                 resource_type: builtins.str):
        """
        The details for the custom naming convention override for a specific resource type.
        :param builtins.str formula: The custom naming formula for the resource type.
        :param builtins.str resource_type: The type of the resource.
        """
        pulumi.set(__self__, "formula", formula)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def formula(self) -> builtins.str:
        """
        The custom naming formula for the resource type.
        """
        return pulumi.get(self, "formula")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class DecommissionedManagementGroupPropertiesResponse(dict):
    """
    The 'Decommissioned' management group properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyInitiativesAssignmentProperties":
            suggest = "policy_initiatives_assignment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DecommissionedManagementGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DecommissionedManagementGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DecommissionedManagementGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create: builtins.bool,
                 policy_initiatives_assignment_properties: Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']):
        """
        The 'Decommissioned' management group properties.
        :param builtins.bool create: This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        :param Sequence['PolicyInitiativeAssignmentPropertiesResponse'] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def create(self) -> builtins.bool:
        """
        This parameter determines whether the 'Decommissioned' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")


@pulumi.output_type
class LandingZoneAccountResourcePropertiesResponse(dict):
    """
    The properties of landing zone account resource type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "storageAccount":
            suggest = "storage_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LandingZoneAccountResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LandingZoneAccountResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LandingZoneAccountResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioning_state: builtins.str,
                 storage_account: builtins.str):
        """
        The properties of landing zone account resource type.
        :param builtins.str provisioning_state: The state that reflects the current stage in the creation, updating, or deletion process of the landing zone account.
        :param builtins.str storage_account: The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
        """
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The state that reflects the current stage in the creation, updating, or deletion process of the landing zone account.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> builtins.str:
        """
        The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
        """
        return pulumi.get(self, "storage_account")


@pulumi.output_type
class LandingZoneConfigurationResourcePropertiesResponse(dict):
    """
    The properties of landing zone configuration resource type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authoringStatus":
            suggest = "authoring_status"
        elif key == "azureBastionCreationOption":
            suggest = "azure_bastion_creation_option"
        elif key == "ddosProtectionCreationOption":
            suggest = "ddos_protection_creation_option"
        elif key == "firewallCreationOption":
            suggest = "firewall_creation_option"
        elif key == "gatewaySubnetCidrBlock":
            suggest = "gateway_subnet_cidr_block"
        elif key == "hubNetworkCidrBlock":
            suggest = "hub_network_cidr_block"
        elif key == "logAnalyticsWorkspaceCreationOption":
            suggest = "log_analytics_workspace_creation_option"
        elif key == "logRetentionInDays":
            suggest = "log_retention_in_days"
        elif key == "managedIdentity":
            suggest = "managed_identity"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "azureBastionSubnetCidrBlock":
            suggest = "azure_bastion_subnet_cidr_block"
        elif key == "customNamingConvention":
            suggest = "custom_naming_convention"
        elif key == "decommissionedMgMetadata":
            suggest = "decommissioned_mg_metadata"
        elif key == "existingAzureBastionId":
            suggest = "existing_azure_bastion_id"
        elif key == "existingDdosProtectionId":
            suggest = "existing_ddos_protection_id"
        elif key == "existingLogAnalyticsWorkspaceId":
            suggest = "existing_log_analytics_workspace_id"
        elif key == "firewallSubnetCidrBlock":
            suggest = "firewall_subnet_cidr_block"
        elif key == "landingZonesMgChildren":
            suggest = "landing_zones_mg_children"
        elif key == "landingZonesMgMetadata":
            suggest = "landing_zones_mg_metadata"
        elif key == "namingConventionFormula":
            suggest = "naming_convention_formula"
        elif key == "platformConnectivityMgMetadata":
            suggest = "platform_connectivity_mg_metadata"
        elif key == "platformIdentityMgMetadata":
            suggest = "platform_identity_mg_metadata"
        elif key == "platformManagementMgMetadata":
            suggest = "platform_management_mg_metadata"
        elif key == "platformMgChildren":
            suggest = "platform_mg_children"
        elif key == "platformMgMetadata":
            suggest = "platform_mg_metadata"
        elif key == "sandboxMgMetadata":
            suggest = "sandbox_mg_metadata"
        elif key == "topLevelMgMetadata":
            suggest = "top_level_mg_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LandingZoneConfigurationResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LandingZoneConfigurationResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LandingZoneConfigurationResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authoring_status: builtins.str,
                 azure_bastion_creation_option: builtins.str,
                 ddos_protection_creation_option: builtins.str,
                 firewall_creation_option: builtins.str,
                 gateway_subnet_cidr_block: builtins.str,
                 hub_network_cidr_block: builtins.str,
                 log_analytics_workspace_creation_option: builtins.str,
                 log_retention_in_days: builtins.float,
                 managed_identity: 'outputs.ManagedIdentityPropertiesResponse',
                 provisioning_state: builtins.str,
                 azure_bastion_subnet_cidr_block: Optional[builtins.str] = None,
                 custom_naming_convention: Optional[Sequence['outputs.CustomNamingConventionResponse']] = None,
                 decommissioned_mg_metadata: Optional['outputs.DecommissionedManagementGroupPropertiesResponse'] = None,
                 existing_azure_bastion_id: Optional[builtins.str] = None,
                 existing_ddos_protection_id: Optional[builtins.str] = None,
                 existing_log_analytics_workspace_id: Optional[builtins.str] = None,
                 firewall_subnet_cidr_block: Optional[builtins.str] = None,
                 landing_zones_mg_children: Optional[Sequence['outputs.LandingZoneManagementGroupPropertiesResponse']] = None,
                 landing_zones_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None,
                 naming_convention_formula: Optional[builtins.str] = None,
                 platform_connectivity_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None,
                 platform_identity_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None,
                 platform_management_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None,
                 platform_mg_children: Optional[Sequence['outputs.PlatformManagementGroupPropertiesResponse']] = None,
                 platform_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None,
                 sandbox_mg_metadata: Optional['outputs.SandboxManagementGroupPropertiesResponse'] = None,
                 tags: Optional[Sequence['outputs.TagsResponse']] = None,
                 top_level_mg_metadata: Optional['outputs.ManagementGroupPropertiesResponse'] = None):
        """
        The properties of landing zone configuration resource type.
        :param builtins.str authoring_status: The status that indicates the current phase of the configuration process for a deployment.
        :param builtins.str azure_bastion_creation_option: Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
        :param builtins.str ddos_protection_creation_option: Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
        :param builtins.str firewall_creation_option: Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
        :param builtins.str gateway_subnet_cidr_block: The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        :param builtins.str hub_network_cidr_block: The Virtual Network address. Specify the address using IPv4 CIDR notation.
        :param builtins.str log_analytics_workspace_creation_option: Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
        :param builtins.float log_retention_in_days: Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        :param 'ManagedIdentityPropertiesResponse' managed_identity: The managed identity to be assigned to this landing zone configuration.
        :param builtins.str provisioning_state: The state that reflects the current stage in the creation, updating, or deletion process of the landing zone configuration.
        :param builtins.str azure_bastion_subnet_cidr_block: The Bastion subnet address. Specify the address using IPv4 CIDR notation.
        :param Sequence['CustomNamingConventionResponse'] custom_naming_convention: The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        :param 'DecommissionedManagementGroupPropertiesResponse' decommissioned_mg_metadata: The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
        :param builtins.str existing_azure_bastion_id: The resource ID of the Bastion when reusing an existing one.
        :param builtins.str existing_ddos_protection_id: The resource ID of the DDoS protection plan when reusing an existing one.
        :param builtins.str existing_log_analytics_workspace_id: The resource ID of the log analytics workspace when reusing an existing one.
        :param builtins.str firewall_subnet_cidr_block: The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        :param Sequence['LandingZoneManagementGroupPropertiesResponse'] landing_zones_mg_children: The child management groups of 'Landing Zones' management group and their assigned policies.
        :param 'ManagementGroupPropertiesResponse' landing_zones_mg_metadata: The assigned policies of the 'Landing Zones' management group.
        :param builtins.str naming_convention_formula: The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        :param 'ManagementGroupPropertiesResponse' platform_connectivity_mg_metadata: The assigned policies of the 'Connectivity' management group under 'Platform' management group.
        :param 'ManagementGroupPropertiesResponse' platform_identity_mg_metadata: The assigned policies of the 'Identity' management group under 'Platform' management group.
        :param 'ManagementGroupPropertiesResponse' platform_management_mg_metadata: The assigned policies of the 'Management' management group under 'Platform' management group.
        :param Sequence['PlatformManagementGroupPropertiesResponse'] platform_mg_children: The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'
        :param 'ManagementGroupPropertiesResponse' platform_mg_metadata: The assigned policies of the 'Platform' management group.
        :param 'SandboxManagementGroupPropertiesResponse' sandbox_mg_metadata: The assigned policies of the 'Sandbox' management group and indicator to create it or not.
        :param Sequence['TagsResponse'] tags: Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}
        :param 'ManagementGroupPropertiesResponse' top_level_mg_metadata: The assigned policies of the parent management group.
        """
        pulumi.set(__self__, "authoring_status", authoring_status)
        pulumi.set(__self__, "azure_bastion_creation_option", azure_bastion_creation_option)
        pulumi.set(__self__, "ddos_protection_creation_option", ddos_protection_creation_option)
        pulumi.set(__self__, "firewall_creation_option", firewall_creation_option)
        pulumi.set(__self__, "gateway_subnet_cidr_block", gateway_subnet_cidr_block)
        pulumi.set(__self__, "hub_network_cidr_block", hub_network_cidr_block)
        pulumi.set(__self__, "log_analytics_workspace_creation_option", log_analytics_workspace_creation_option)
        pulumi.set(__self__, "log_retention_in_days", log_retention_in_days)
        pulumi.set(__self__, "managed_identity", managed_identity)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if azure_bastion_subnet_cidr_block is not None:
            pulumi.set(__self__, "azure_bastion_subnet_cidr_block", azure_bastion_subnet_cidr_block)
        if custom_naming_convention is not None:
            pulumi.set(__self__, "custom_naming_convention", custom_naming_convention)
        if decommissioned_mg_metadata is not None:
            pulumi.set(__self__, "decommissioned_mg_metadata", decommissioned_mg_metadata)
        if existing_azure_bastion_id is not None:
            pulumi.set(__self__, "existing_azure_bastion_id", existing_azure_bastion_id)
        if existing_ddos_protection_id is not None:
            pulumi.set(__self__, "existing_ddos_protection_id", existing_ddos_protection_id)
        if existing_log_analytics_workspace_id is not None:
            pulumi.set(__self__, "existing_log_analytics_workspace_id", existing_log_analytics_workspace_id)
        if firewall_subnet_cidr_block is not None:
            pulumi.set(__self__, "firewall_subnet_cidr_block", firewall_subnet_cidr_block)
        if landing_zones_mg_children is not None:
            pulumi.set(__self__, "landing_zones_mg_children", landing_zones_mg_children)
        if landing_zones_mg_metadata is not None:
            pulumi.set(__self__, "landing_zones_mg_metadata", landing_zones_mg_metadata)
        if naming_convention_formula is not None:
            pulumi.set(__self__, "naming_convention_formula", naming_convention_formula)
        if platform_connectivity_mg_metadata is not None:
            pulumi.set(__self__, "platform_connectivity_mg_metadata", platform_connectivity_mg_metadata)
        if platform_identity_mg_metadata is not None:
            pulumi.set(__self__, "platform_identity_mg_metadata", platform_identity_mg_metadata)
        if platform_management_mg_metadata is not None:
            pulumi.set(__self__, "platform_management_mg_metadata", platform_management_mg_metadata)
        if platform_mg_children is not None:
            pulumi.set(__self__, "platform_mg_children", platform_mg_children)
        if platform_mg_metadata is not None:
            pulumi.set(__self__, "platform_mg_metadata", platform_mg_metadata)
        if sandbox_mg_metadata is not None:
            pulumi.set(__self__, "sandbox_mg_metadata", sandbox_mg_metadata)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if top_level_mg_metadata is not None:
            pulumi.set(__self__, "top_level_mg_metadata", top_level_mg_metadata)

    @property
    @pulumi.getter(name="authoringStatus")
    def authoring_status(self) -> builtins.str:
        """
        The status that indicates the current phase of the configuration process for a deployment.
        """
        return pulumi.get(self, "authoring_status")

    @property
    @pulumi.getter(name="azureBastionCreationOption")
    def azure_bastion_creation_option(self) -> builtins.str:
        """
        Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
        """
        return pulumi.get(self, "azure_bastion_creation_option")

    @property
    @pulumi.getter(name="ddosProtectionCreationOption")
    def ddos_protection_creation_option(self) -> builtins.str:
        """
        Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
        """
        return pulumi.get(self, "ddos_protection_creation_option")

    @property
    @pulumi.getter(name="firewallCreationOption")
    def firewall_creation_option(self) -> builtins.str:
        """
        Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
        """
        return pulumi.get(self, "firewall_creation_option")

    @property
    @pulumi.getter(name="gatewaySubnetCidrBlock")
    def gateway_subnet_cidr_block(self) -> builtins.str:
        """
        The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
        """
        return pulumi.get(self, "gateway_subnet_cidr_block")

    @property
    @pulumi.getter(name="hubNetworkCidrBlock")
    def hub_network_cidr_block(self) -> builtins.str:
        """
        The Virtual Network address. Specify the address using IPv4 CIDR notation.
        """
        return pulumi.get(self, "hub_network_cidr_block")

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceCreationOption")
    def log_analytics_workspace_creation_option(self) -> builtins.str:
        """
        Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
        """
        return pulumi.get(self, "log_analytics_workspace_creation_option")

    @property
    @pulumi.getter(name="logRetentionInDays")
    def log_retention_in_days(self) -> builtins.float:
        """
        Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is 730 days.
        """
        return pulumi.get(self, "log_retention_in_days")

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(self) -> 'outputs.ManagedIdentityPropertiesResponse':
        """
        The managed identity to be assigned to this landing zone configuration.
        """
        return pulumi.get(self, "managed_identity")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The state that reflects the current stage in the creation, updating, or deletion process of the landing zone configuration.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="azureBastionSubnetCidrBlock")
    def azure_bastion_subnet_cidr_block(self) -> Optional[builtins.str]:
        """
        The Bastion subnet address. Specify the address using IPv4 CIDR notation.
        """
        return pulumi.get(self, "azure_bastion_subnet_cidr_block")

    @property
    @pulumi.getter(name="customNamingConvention")
    def custom_naming_convention(self) -> Optional[Sequence['outputs.CustomNamingConventionResponse']]:
        """
        The custom naming convention applied to specific resource types for this landing zone configuration, which overrides the default naming convention for those resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
        """
        return pulumi.get(self, "custom_naming_convention")

    @property
    @pulumi.getter(name="decommissionedMgMetadata")
    def decommissioned_mg_metadata(self) -> Optional['outputs.DecommissionedManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
        """
        return pulumi.get(self, "decommissioned_mg_metadata")

    @property
    @pulumi.getter(name="existingAzureBastionId")
    def existing_azure_bastion_id(self) -> Optional[builtins.str]:
        """
        The resource ID of the Bastion when reusing an existing one.
        """
        return pulumi.get(self, "existing_azure_bastion_id")

    @property
    @pulumi.getter(name="existingDdosProtectionId")
    def existing_ddos_protection_id(self) -> Optional[builtins.str]:
        """
        The resource ID of the DDoS protection plan when reusing an existing one.
        """
        return pulumi.get(self, "existing_ddos_protection_id")

    @property
    @pulumi.getter(name="existingLogAnalyticsWorkspaceId")
    def existing_log_analytics_workspace_id(self) -> Optional[builtins.str]:
        """
        The resource ID of the log analytics workspace when reusing an existing one.
        """
        return pulumi.get(self, "existing_log_analytics_workspace_id")

    @property
    @pulumi.getter(name="firewallSubnetCidrBlock")
    def firewall_subnet_cidr_block(self) -> Optional[builtins.str]:
        """
        The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
        """
        return pulumi.get(self, "firewall_subnet_cidr_block")

    @property
    @pulumi.getter(name="landingZonesMgChildren")
    def landing_zones_mg_children(self) -> Optional[Sequence['outputs.LandingZoneManagementGroupPropertiesResponse']]:
        """
        The child management groups of 'Landing Zones' management group and their assigned policies.
        """
        return pulumi.get(self, "landing_zones_mg_children")

    @property
    @pulumi.getter(name="landingZonesMgMetadata")
    def landing_zones_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Landing Zones' management group.
        """
        return pulumi.get(self, "landing_zones_mg_metadata")

    @property
    @pulumi.getter(name="namingConventionFormula")
    def naming_convention_formula(self) -> Optional[builtins.str]:
        """
        The default naming convention applied to all resources for this landing zone configuration. Example - {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
        """
        return pulumi.get(self, "naming_convention_formula")

    @property
    @pulumi.getter(name="platformConnectivityMgMetadata")
    def platform_connectivity_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Connectivity' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_connectivity_mg_metadata")

    @property
    @pulumi.getter(name="platformIdentityMgMetadata")
    def platform_identity_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Identity' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_identity_mg_metadata")

    @property
    @pulumi.getter(name="platformManagementMgMetadata")
    def platform_management_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Management' management group under 'Platform' management group.
        """
        return pulumi.get(self, "platform_management_mg_metadata")

    @property
    @pulumi.getter(name="platformMgChildren")
    def platform_mg_children(self) -> Optional[Sequence['outputs.PlatformManagementGroupPropertiesResponse']]:
        """
        The names of the 'Platform' child management groups and their assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'
        """
        return pulumi.get(self, "platform_mg_children")

    @property
    @pulumi.getter(name="platformMgMetadata")
    def platform_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Platform' management group.
        """
        return pulumi.get(self, "platform_mg_metadata")

    @property
    @pulumi.getter(name="sandboxMgMetadata")
    def sandbox_mg_metadata(self) -> Optional['outputs.SandboxManagementGroupPropertiesResponse']:
        """
        The assigned policies of the 'Sandbox' management group and indicator to create it or not.
        """
        return pulumi.get(self, "sandbox_mg_metadata")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.TagsResponse']]:
        """
        Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="topLevelMgMetadata")
    def top_level_mg_metadata(self) -> Optional['outputs.ManagementGroupPropertiesResponse']:
        """
        The assigned policies of the parent management group.
        """
        return pulumi.get(self, "top_level_mg_metadata")


@pulumi.output_type
class LandingZoneManagementGroupPropertiesResponse(dict):
    """
    The 'Landing Zones' management group properties..
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyInitiativesAssignmentProperties":
            suggest = "policy_initiatives_assignment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LandingZoneManagementGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LandingZoneManagementGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LandingZoneManagementGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 policy_initiatives_assignment_properties: Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']):
        """
        The 'Landing Zones' management group properties..
        :param builtins.str name: Management group name.
        :param Sequence['PolicyInitiativeAssignmentPropertiesResponse'] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Management group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")


@pulumi.output_type
class LandingZoneRegistrationResourcePropertiesResponse(dict):
    """
    The properties of landing zone registration resource type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "existingLandingZoneConfigurationId":
            suggest = "existing_landing_zone_configuration_id"
        elif key == "existingTopLevelMgId":
            suggest = "existing_top_level_mg_id"
        elif key == "provisioningState":
            suggest = "provisioning_state"
        elif key == "managedIdentity":
            suggest = "managed_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LandingZoneRegistrationResourcePropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LandingZoneRegistrationResourcePropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LandingZoneRegistrationResourcePropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 existing_landing_zone_configuration_id: builtins.str,
                 existing_top_level_mg_id: builtins.str,
                 provisioning_state: builtins.str,
                 managed_identity: Optional['outputs.ManagedIdentityPropertiesResponse'] = None):
        """
        The properties of landing zone registration resource type.
        :param builtins.str existing_landing_zone_configuration_id: The resource id of the associated landing zone configuration.
        :param builtins.str existing_top_level_mg_id: The resource id of the top level management group
        :param builtins.str provisioning_state: The state that reflects the current stage in the creation, updating, or deletion process of the landing zone registration resource type.
        :param 'ManagedIdentityPropertiesResponse' managed_identity: The managed identity to be assigned to this landing zone registration.
        """
        pulumi.set(__self__, "existing_landing_zone_configuration_id", existing_landing_zone_configuration_id)
        pulumi.set(__self__, "existing_top_level_mg_id", existing_top_level_mg_id)
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)

    @property
    @pulumi.getter(name="existingLandingZoneConfigurationId")
    def existing_landing_zone_configuration_id(self) -> builtins.str:
        """
        The resource id of the associated landing zone configuration.
        """
        return pulumi.get(self, "existing_landing_zone_configuration_id")

    @property
    @pulumi.getter(name="existingTopLevelMgId")
    def existing_top_level_mg_id(self) -> builtins.str:
        """
        The resource id of the top level management group
        """
        return pulumi.get(self, "existing_top_level_mg_id")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> builtins.str:
        """
        The state that reflects the current stage in the creation, updating, or deletion process of the landing zone registration resource type.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(self) -> Optional['outputs.ManagedIdentityPropertiesResponse']:
        """
        The managed identity to be assigned to this landing zone registration.
        """
        return pulumi.get(self, "managed_identity")


@pulumi.output_type
class ManagedIdentityPropertiesResponse(dict):
    """
    The properties of managed identity, specifically including type and resource ID.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAssignedIdentityResourceId":
            suggest = "user_assigned_identity_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedIdentityPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedIdentityPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedIdentityPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 user_assigned_identity_resource_id: Optional[builtins.str] = None):
        """
        The properties of managed identity, specifically including type and resource ID.
        :param builtins.str type: The type of managed identity.
        :param builtins.str user_assigned_identity_resource_id: The resource id of the managed identity.
        """
        pulumi.set(__self__, "type", type)
        if user_assigned_identity_resource_id is not None:
            pulumi.set(__self__, "user_assigned_identity_resource_id", user_assigned_identity_resource_id)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of managed identity.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentityResourceId")
    def user_assigned_identity_resource_id(self) -> Optional[builtins.str]:
        """
        The resource id of the managed identity.
        """
        return pulumi.get(self, "user_assigned_identity_resource_id")


@pulumi.output_type
class ManagedServiceIdentityResponse(dict):
    """
    Managed service identity (system assigned and/or user assigned identities)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalId":
            suggest = "principal_id"
        elif key == "tenantId":
            suggest = "tenant_id"
        elif key == "userAssignedIdentities":
            suggest = "user_assigned_identities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedServiceIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedServiceIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal_id: builtins.str,
                 tenant_id: builtins.str,
                 type: builtins.str,
                 user_assigned_identities: Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']] = None):
        """
        Managed service identity (system assigned and/or user assigned identities)
        :param builtins.str principal_id: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str tenant_id: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        :param builtins.str type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        :param Mapping[str, 'UserAssignedIdentityResponse'] user_assigned_identities: The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        """
        The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[Mapping[str, 'outputs.UserAssignedIdentityResponse']]:
        """
        The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
        """
        return pulumi.get(self, "user_assigned_identities")


@pulumi.output_type
class ManagementGroupPropertiesResponse(dict):
    """
    The properties of policy initiatives applied to the management group.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyInitiativesAssignmentProperties":
            suggest = "policy_initiatives_assignment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_initiatives_assignment_properties: Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']):
        """
        The properties of policy initiatives applied to the management group.
        :param Sequence['PolicyInitiativeAssignmentPropertiesResponse'] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")


@pulumi.output_type
class PlatformManagementGroupPropertiesResponse(dict):
    """
    The 'Platform' management group properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyInitiativesAssignmentProperties":
            suggest = "policy_initiatives_assignment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlatformManagementGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlatformManagementGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlatformManagementGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 policy_initiatives_assignment_properties: Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']):
        """
        The 'Platform' management group properties.
        :param builtins.str name: Management group name.
        :param Sequence['PolicyInitiativeAssignmentPropertiesResponse'] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Management group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")


@pulumi.output_type
class PolicyInitiativeAssignmentPropertiesResponse(dict):
    """
    The properties of assigned policy initiatives.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentParameters":
            suggest = "assignment_parameters"
        elif key == "policyInitiativeId":
            suggest = "policy_initiative_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyInitiativeAssignmentPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyInitiativeAssignmentPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyInitiativeAssignmentPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assignment_parameters: Any,
                 policy_initiative_id: builtins.str):
        """
        The properties of assigned policy initiatives.
        :param Any assignment_parameters: The parameters of the assigned policy initiative.
        :param builtins.str policy_initiative_id: The fully qualified id of the policy initiative.
        """
        pulumi.set(__self__, "assignment_parameters", assignment_parameters)
        pulumi.set(__self__, "policy_initiative_id", policy_initiative_id)

    @property
    @pulumi.getter(name="assignmentParameters")
    def assignment_parameters(self) -> Any:
        """
        The parameters of the assigned policy initiative.
        """
        return pulumi.get(self, "assignment_parameters")

    @property
    @pulumi.getter(name="policyInitiativeId")
    def policy_initiative_id(self) -> builtins.str:
        """
        The fully qualified id of the policy initiative.
        """
        return pulumi.get(self, "policy_initiative_id")


@pulumi.output_type
class SandboxManagementGroupPropertiesResponse(dict):
    """
    The 'Sandbox' management group properties.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyInitiativesAssignmentProperties":
            suggest = "policy_initiatives_assignment_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SandboxManagementGroupPropertiesResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SandboxManagementGroupPropertiesResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SandboxManagementGroupPropertiesResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create: builtins.bool,
                 policy_initiatives_assignment_properties: Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']):
        """
        The 'Sandbox' management group properties.
        :param builtins.bool create: This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        :param Sequence['PolicyInitiativeAssignmentPropertiesResponse'] policy_initiatives_assignment_properties: Array of policy initiatives applied to the management group.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "policy_initiatives_assignment_properties", policy_initiatives_assignment_properties)

    @property
    @pulumi.getter
    def create(self) -> builtins.bool:
        """
        This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will be created; if set to false, it will not be created. The default value is false.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter(name="policyInitiativesAssignmentProperties")
    def policy_initiatives_assignment_properties(self) -> Sequence['outputs.PolicyInitiativeAssignmentPropertiesResponse']:
        """
        Array of policy initiatives applied to the management group.
        """
        return pulumi.get(self, "policy_initiatives_assignment_properties")


@pulumi.output_type
class SystemDataResponse(dict):
    """
    Metadata pertaining to creation and last modification of the resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByType":
            suggest = "created_by_type"
        elif key == "lastModifiedAt":
            suggest = "last_modified_at"
        elif key == "lastModifiedBy":
            suggest = "last_modified_by"
        elif key == "lastModifiedByType":
            suggest = "last_modified_by_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemDataResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemDataResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[builtins.str] = None,
                 created_by: Optional[builtins.str] = None,
                 created_by_type: Optional[builtins.str] = None,
                 last_modified_at: Optional[builtins.str] = None,
                 last_modified_by: Optional[builtins.str] = None,
                 last_modified_by_type: Optional[builtins.str] = None):
        """
        Metadata pertaining to creation and last modification of the resource.
        :param builtins.str created_at: The timestamp of resource creation (UTC).
        :param builtins.str created_by: The identity that created the resource.
        :param builtins.str created_by_type: The type of identity that created the resource.
        :param builtins.str last_modified_at: The timestamp of resource last modification (UTC)
        :param builtins.str last_modified_by: The identity that last modified the resource.
        :param builtins.str last_modified_by_type: The type of identity that last modified the resource.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_type is not None:
            pulumi.set(__self__, "created_by_type", created_by_type)
        if last_modified_at is not None:
            pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by is not None:
            pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_by_type is not None:
            pulumi.set(__self__, "last_modified_by_type", last_modified_by_type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource creation (UTC).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        The identity that created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByType")
    def created_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that created the resource.
        """
        return pulumi.get(self, "created_by_type")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        """
        The timestamp of resource last modification (UTC)
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        """
        The identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedByType")
    def last_modified_by_type(self) -> Optional[builtins.str]:
        """
        The type of identity that last modified the resource.
        """
        return pulumi.get(self, "last_modified_by_type")


@pulumi.output_type
class TagsResponse(dict):
    """
    Key-value pairs that can be assigned to this resource.
    """
    def __init__(__self__, *,
                 name: builtins.str,
                 value: Optional[builtins.str] = None):
        """
        Key-value pairs that can be assigned to this resource.
        :param builtins.str name: A tag name.
        :param builtins.str value: A tag value.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        A tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserAssignedIdentityResponse(dict):
    """
    User assigned identity properties
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "principalId":
            suggest = "principal_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssignedIdentityResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssignedIdentityResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: builtins.str,
                 principal_id: builtins.str):
        """
        User assigned identity properties
        :param builtins.str client_id: The client ID of the assigned identity.
        :param builtins.str principal_id: The principal ID of the assigned identity.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "principal_id", principal_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> builtins.str:
        """
        The client ID of the assigned identity.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> builtins.str:
        """
        The principal ID of the assigned identity.
        """
        return pulumi.get(self, "principal_id")


