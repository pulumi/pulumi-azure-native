# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs

__all__ = [
    'GetAlertRuleResourceResult',
    'AwaitableGetAlertRuleResourceResult',
    'get_alert_rule_resource',
    'get_alert_rule_resource_output',
]

@pulumi.output_type
class GetAlertRuleResourceResult:
    """
    Concrete proxy resource types can be created by aliasing this type using a specific property type.
    """
    def __init__(__self__, alert_rule_resource_id=None, alert_rule_template_id=None, alert_rule_template_version=None, created_with_properties=None, creation_time=None, id=None, name=None, provisioning_state=None, system_data=None, type=None):
        if alert_rule_resource_id and not isinstance(alert_rule_resource_id, str):
            raise TypeError("Expected argument 'alert_rule_resource_id' to be a str")
        pulumi.set(__self__, "alert_rule_resource_id", alert_rule_resource_id)
        if alert_rule_template_id and not isinstance(alert_rule_template_id, str):
            raise TypeError("Expected argument 'alert_rule_template_id' to be a str")
        pulumi.set(__self__, "alert_rule_template_id", alert_rule_template_id)
        if alert_rule_template_version and not isinstance(alert_rule_template_version, str):
            raise TypeError("Expected argument 'alert_rule_template_version' to be a str")
        pulumi.set(__self__, "alert_rule_template_version", alert_rule_template_version)
        if created_with_properties and not isinstance(created_with_properties, str):
            raise TypeError("Expected argument 'created_with_properties' to be a str")
        pulumi.set(__self__, "created_with_properties", created_with_properties)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="alertRuleResourceId")
    def alert_rule_resource_id(self) -> str:
        """
        The resource ID of the alert rule resource.
        """
        return pulumi.get(self, "alert_rule_resource_id")

    @property
    @pulumi.getter(name="alertRuleTemplateId")
    def alert_rule_template_id(self) -> str:
        """
        The template ID associated with alert rule resource.
        """
        return pulumi.get(self, "alert_rule_template_id")

    @property
    @pulumi.getter(name="alertRuleTemplateVersion")
    def alert_rule_template_version(self) -> str:
        """
        The alert rule template version.
        """
        return pulumi.get(self, "alert_rule_template_version")

    @property
    @pulumi.getter(name="createdWithProperties")
    def created_with_properties(self) -> str:
        """
        The properties with which the alert rule resource was created.
        """
        return pulumi.get(self, "created_with_properties")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the alert rule resource.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the alert rule resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetAlertRuleResourceResult(GetAlertRuleResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertRuleResourceResult(
            alert_rule_resource_id=self.alert_rule_resource_id,
            alert_rule_template_id=self.alert_rule_template_id,
            alert_rule_template_version=self.alert_rule_template_version,
            created_with_properties=self.created_with_properties,
            creation_time=self.creation_time,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            type=self.type)


def get_alert_rule_resource(alert_rule_resource_name: Optional[str] = None,
                            resource_group_name: Optional[str] = None,
                            watcher_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlertRuleResourceResult:
    """
    Get a AlertRuleResource


    :param str alert_rule_resource_name: The alert rule proxy resource name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str watcher_name: The database watcher name.
    """
    __args__ = dict()
    __args__['alertRuleResourceName'] = alert_rule_resource_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['watcherName'] = watcher_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:databasewatcher/v20240719preview:getAlertRuleResource', __args__, opts=opts, typ=GetAlertRuleResourceResult).value

    return AwaitableGetAlertRuleResourceResult(
        alert_rule_resource_id=pulumi.get(__ret__, 'alert_rule_resource_id'),
        alert_rule_template_id=pulumi.get(__ret__, 'alert_rule_template_id'),
        alert_rule_template_version=pulumi.get(__ret__, 'alert_rule_template_version'),
        created_with_properties=pulumi.get(__ret__, 'created_with_properties'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        type=pulumi.get(__ret__, 'type'))
def get_alert_rule_resource_output(alert_rule_resource_name: Optional[pulumi.Input[str]] = None,
                                   resource_group_name: Optional[pulumi.Input[str]] = None,
                                   watcher_name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlertRuleResourceResult]:
    """
    Get a AlertRuleResource


    :param str alert_rule_resource_name: The alert rule proxy resource name.
    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str watcher_name: The database watcher name.
    """
    __args__ = dict()
    __args__['alertRuleResourceName'] = alert_rule_resource_name
    __args__['resourceGroupName'] = resource_group_name
    __args__['watcherName'] = watcher_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('azure-native:databasewatcher/v20240719preview:getAlertRuleResource', __args__, opts=opts, typ=GetAlertRuleResourceResult)
    return __ret__.apply(lambda __response__: GetAlertRuleResourceResult(
        alert_rule_resource_id=pulumi.get(__response__, 'alert_rule_resource_id'),
        alert_rule_template_id=pulumi.get(__response__, 'alert_rule_template_id'),
        alert_rule_template_version=pulumi.get(__response__, 'alert_rule_template_version'),
        created_with_properties=pulumi.get(__response__, 'created_with_properties'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        provisioning_state=pulumi.get(__response__, 'provisioning_state'),
        system_data=pulumi.get(__response__, 'system_data'),
        type=pulumi.get(__response__, 'type')))
