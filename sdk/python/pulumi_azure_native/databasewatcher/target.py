# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['TargetArgs', 'Target']

@pulumi.input_type
class TargetArgs:
    def __init__(__self__, *,
                 connection_server_name: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 target_authentication_type: pulumi.Input[Union[str, 'TargetAuthenticationType']],
                 target_type: pulumi.Input[str],
                 watcher_name: pulumi.Input[str],
                 target_collection_status: Optional[pulumi.Input[Union[str, 'TargetCollectionStatus']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 target_vault: Optional[pulumi.Input['VaultSecretArgs']] = None):
        """
        The set of arguments for constructing a Target resource.
        :param pulumi.Input[str] connection_server_name: The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'TargetAuthenticationType']] target_authentication_type: The type of authentication to use when connecting to a target.
        :param pulumi.Input[str] target_type: Discriminator property for TargetProperties.
        :param pulumi.Input[str] watcher_name: The database watcher name.
        :param pulumi.Input[Union[str, 'TargetCollectionStatus']] target_collection_status: The target collection status.
        :param pulumi.Input[str] target_name: The target resource name.
        :param pulumi.Input['VaultSecretArgs'] target_vault: To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
        """
        pulumi.set(__self__, "connection_server_name", connection_server_name)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "target_authentication_type", target_authentication_type)
        pulumi.set(__self__, "target_type", target_type)
        pulumi.set(__self__, "watcher_name", watcher_name)
        if target_collection_status is not None:
            pulumi.set(__self__, "target_collection_status", target_collection_status)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if target_vault is not None:
            pulumi.set(__self__, "target_vault", target_vault)

    @property
    @pulumi.getter(name="connectionServerName")
    def connection_server_name(self) -> pulumi.Input[str]:
        """
        The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
        """
        return pulumi.get(self, "connection_server_name")

    @connection_server_name.setter
    def connection_server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_server_name", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the resource group. The name is case insensitive.
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="targetAuthenticationType")
    def target_authentication_type(self) -> pulumi.Input[Union[str, 'TargetAuthenticationType']]:
        """
        The type of authentication to use when connecting to a target.
        """
        return pulumi.get(self, "target_authentication_type")

    @target_authentication_type.setter
    def target_authentication_type(self, value: pulumi.Input[Union[str, 'TargetAuthenticationType']]):
        pulumi.set(self, "target_authentication_type", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Discriminator property for TargetProperties.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="watcherName")
    def watcher_name(self) -> pulumi.Input[str]:
        """
        The database watcher name.
        """
        return pulumi.get(self, "watcher_name")

    @watcher_name.setter
    def watcher_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "watcher_name", value)

    @property
    @pulumi.getter(name="targetCollectionStatus")
    def target_collection_status(self) -> Optional[pulumi.Input[Union[str, 'TargetCollectionStatus']]]:
        """
        The target collection status.
        """
        return pulumi.get(self, "target_collection_status")

    @target_collection_status.setter
    def target_collection_status(self, value: Optional[pulumi.Input[Union[str, 'TargetCollectionStatus']]]):
        pulumi.set(self, "target_collection_status", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        The target resource name.
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter(name="targetVault")
    def target_vault(self) -> Optional[pulumi.Input['VaultSecretArgs']]:
        """
        To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
        """
        return pulumi.get(self, "target_vault")

    @target_vault.setter
    def target_vault(self, value: Optional[pulumi.Input['VaultSecretArgs']]):
        pulumi.set(self, "target_vault", value)


class Target(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_server_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_authentication_type: Optional[pulumi.Input[Union[str, 'TargetAuthenticationType']]] = None,
                 target_collection_status: Optional[pulumi.Input[Union[str, 'TargetCollectionStatus']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_vault: Optional[pulumi.Input[pulumi.InputType['VaultSecretArgs']]] = None,
                 watcher_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Concrete proxy resource types can be created by aliasing this type using a specific property type.
        Azure REST API version: 2023-09-01-preview.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connection_server_name: The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
        :param pulumi.Input[str] resource_group_name: The name of the resource group. The name is case insensitive.
        :param pulumi.Input[Union[str, 'TargetAuthenticationType']] target_authentication_type: The type of authentication to use when connecting to a target.
        :param pulumi.Input[Union[str, 'TargetCollectionStatus']] target_collection_status: The target collection status.
        :param pulumi.Input[str] target_name: The target resource name.
        :param pulumi.Input[str] target_type: Discriminator property for TargetProperties.
        :param pulumi.Input[pulumi.InputType['VaultSecretArgs']] target_vault: To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
        :param pulumi.Input[str] watcher_name: The database watcher name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Concrete proxy resource types can be created by aliasing this type using a specific property type.
        Azure REST API version: 2023-09-01-preview.

        :param str resource_name: The name of the resource.
        :param TargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_server_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 target_authentication_type: Optional[pulumi.Input[Union[str, 'TargetAuthenticationType']]] = None,
                 target_collection_status: Optional[pulumi.Input[Union[str, 'TargetCollectionStatus']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_vault: Optional[pulumi.Input[pulumi.InputType['VaultSecretArgs']]] = None,
                 watcher_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetArgs.__new__(TargetArgs)

            if connection_server_name is None and not opts.urn:
                raise TypeError("Missing required property 'connection_server_name'")
            __props__.__dict__["connection_server_name"] = connection_server_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if target_authentication_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_authentication_type'")
            __props__.__dict__["target_authentication_type"] = target_authentication_type
            __props__.__dict__["target_collection_status"] = target_collection_status
            __props__.__dict__["target_name"] = target_name
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["target_vault"] = target_vault
            if watcher_name is None and not opts.urn:
                raise TypeError("Missing required property 'watcher_name'")
            __props__.__dict__["watcher_name"] = watcher_name
            __props__.__dict__["name"] = None
            __props__.__dict__["provisioning_state"] = None
            __props__.__dict__["system_data"] = None
            __props__.__dict__["type"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-native:databasewatcher/v20230901preview:Target")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Target, __self__).__init__(
            'azure-native:databasewatcher:Target',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Target':
        """
        Get an existing Target resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TargetArgs.__new__(TargetArgs)

        __props__.__dict__["connection_server_name"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["provisioning_state"] = None
        __props__.__dict__["system_data"] = None
        __props__.__dict__["target_authentication_type"] = None
        __props__.__dict__["target_collection_status"] = None
        __props__.__dict__["target_type"] = None
        __props__.__dict__["target_vault"] = None
        __props__.__dict__["type"] = None
        return Target(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionServerName")
    def connection_server_name(self) -> pulumi.Output[str]:
        """
        The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
        """
        return pulumi.get(self, "connection_server_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> pulumi.Output[str]:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetAuthenticationType")
    def target_authentication_type(self) -> pulumi.Output[str]:
        """
        The type of authentication to use when connecting to a target.
        """
        return pulumi.get(self, "target_authentication_type")

    @property
    @pulumi.getter(name="targetCollectionStatus")
    def target_collection_status(self) -> pulumi.Output[Optional[str]]:
        """
        The target collection status.
        """
        return pulumi.get(self, "target_collection_status")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[str]:
        """
        Discriminator property for TargetProperties.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="targetVault")
    def target_vault(self) -> pulumi.Output[Optional['outputs.VaultSecretResponse']]:
        """
        To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
        """
        return pulumi.get(self, "target_vault")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")

