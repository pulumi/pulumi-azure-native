# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetTargetResult',
    'AwaitableGetTargetResult',
    'get_target',
    'get_target_output',
]

@pulumi.output_type
class GetTargetResult:
    """
    Concrete proxy resource types can be created by aliasing this type using a specific property type.
    """
    def __init__(__self__, connection_server_name=None, id=None, name=None, provisioning_state=None, system_data=None, target_authentication_type=None, target_collection_status=None, target_type=None, target_vault=None, type=None):
        if connection_server_name and not isinstance(connection_server_name, str):
            raise TypeError("Expected argument 'connection_server_name' to be a str")
        pulumi.set(__self__, "connection_server_name", connection_server_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioning_state and not isinstance(provisioning_state, str):
            raise TypeError("Expected argument 'provisioning_state' to be a str")
        pulumi.set(__self__, "provisioning_state", provisioning_state)
        if system_data and not isinstance(system_data, dict):
            raise TypeError("Expected argument 'system_data' to be a dict")
        pulumi.set(__self__, "system_data", system_data)
        if target_authentication_type and not isinstance(target_authentication_type, str):
            raise TypeError("Expected argument 'target_authentication_type' to be a str")
        pulumi.set(__self__, "target_authentication_type", target_authentication_type)
        if target_collection_status and not isinstance(target_collection_status, str):
            raise TypeError("Expected argument 'target_collection_status' to be a str")
        pulumi.set(__self__, "target_collection_status", target_collection_status)
        if target_type and not isinstance(target_type, str):
            raise TypeError("Expected argument 'target_type' to be a str")
        pulumi.set(__self__, "target_type", target_type)
        if target_vault and not isinstance(target_vault, dict):
            raise TypeError("Expected argument 'target_vault' to be a dict")
        pulumi.set(__self__, "target_vault", target_vault)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionServerName")
    def connection_server_name(self) -> str:
        """
        The server name to use in the connection string when connecting to a target. Port number and instance name must be specified separately.
        """
        return pulumi.get(self, "connection_server_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningState")
    def provisioning_state(self) -> str:
        """
        The provisioning state of the resource.
        """
        return pulumi.get(self, "provisioning_state")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> 'outputs.SystemDataResponse':
        """
        Azure Resource Manager metadata containing createdBy and modifiedBy information.
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter(name="targetAuthenticationType")
    def target_authentication_type(self) -> str:
        """
        The type of authentication to use when connecting to a target.
        """
        return pulumi.get(self, "target_authentication_type")

    @property
    @pulumi.getter(name="targetCollectionStatus")
    def target_collection_status(self) -> Optional[str]:
        """
        The target collection status.
        """
        return pulumi.get(self, "target_collection_status")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        """
        Discriminator property for TargetProperties.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="targetVault")
    def target_vault(self) -> Optional['outputs.VaultSecretResponse']:
        """
        To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored.
        """
        return pulumi.get(self, "target_vault")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        """
        return pulumi.get(self, "type")


class AwaitableGetTargetResult(GetTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetResult(
            connection_server_name=self.connection_server_name,
            id=self.id,
            name=self.name,
            provisioning_state=self.provisioning_state,
            system_data=self.system_data,
            target_authentication_type=self.target_authentication_type,
            target_collection_status=self.target_collection_status,
            target_type=self.target_type,
            target_vault=self.target_vault,
            type=self.type)


def get_target(resource_group_name: Optional[str] = None,
               target_name: Optional[str] = None,
               watcher_name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetResult:
    """
    Get a Target


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_name: The target resource name.
    :param str watcher_name: The database watcher name.
    """
    __args__ = dict()
    __args__['resourceGroupName'] = resource_group_name
    __args__['targetName'] = target_name
    __args__['watcherName'] = watcher_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azure-native:databasewatcher/v20230901preview:getTarget', __args__, opts=opts, typ=GetTargetResult).value

    return AwaitableGetTargetResult(
        connection_server_name=pulumi.get(__ret__, 'connection_server_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provisioning_state=pulumi.get(__ret__, 'provisioning_state'),
        system_data=pulumi.get(__ret__, 'system_data'),
        target_authentication_type=pulumi.get(__ret__, 'target_authentication_type'),
        target_collection_status=pulumi.get(__ret__, 'target_collection_status'),
        target_type=pulumi.get(__ret__, 'target_type'),
        target_vault=pulumi.get(__ret__, 'target_vault'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_target)
def get_target_output(resource_group_name: Optional[pulumi.Input[str]] = None,
                      target_name: Optional[pulumi.Input[str]] = None,
                      watcher_name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetResult]:
    """
    Get a Target


    :param str resource_group_name: The name of the resource group. The name is case insensitive.
    :param str target_name: The target resource name.
    :param str watcher_name: The database watcher name.
    """
    ...
