# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from ._enums import *

__all__ = [
    'DataPlaneProxyPropertiesArgs',
    'DataPlaneProxyPropertiesArgsDict',
    'EncryptionPropertiesArgs',
    'EncryptionPropertiesArgsDict',
    'ExperimentationPropertiesArgs',
    'ExperimentationPropertiesArgsDict',
    'KeyVaultPropertiesArgs',
    'KeyVaultPropertiesArgsDict',
    'PrivateEndpointArgs',
    'PrivateEndpointArgsDict',
    'PrivateLinkServiceConnectionStateArgs',
    'PrivateLinkServiceConnectionStateArgsDict',
    'ResourceIdentityArgs',
    'ResourceIdentityArgsDict',
    'SkuArgs',
    'SkuArgsDict',
    'TelemetryPropertiesArgs',
    'TelemetryPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class DataPlaneProxyPropertiesArgsDict(TypedDict):
        """
        The data plane proxy settings for a configuration store.
        """
        authentication_mode: NotRequired[pulumi.Input[Union[str, 'AuthenticationMode']]]
        """
        The data plane proxy authentication mode. This property manages the authentication mode of request to the data plane resources.
        """
        private_link_delegation: NotRequired[pulumi.Input[Union[str, 'PrivateLinkDelegation']]]
        """
        The data plane proxy private link delegation. This property manages if a request from delegated ARM private link is allowed when the data plane resource requires private link.
        """
elif False:
    DataPlaneProxyPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataPlaneProxyPropertiesArgs:
    def __init__(__self__, *,
                 authentication_mode: Optional[pulumi.Input[Union[str, 'AuthenticationMode']]] = None,
                 private_link_delegation: Optional[pulumi.Input[Union[str, 'PrivateLinkDelegation']]] = None):
        """
        The data plane proxy settings for a configuration store.
        :param pulumi.Input[Union[str, 'AuthenticationMode']] authentication_mode: The data plane proxy authentication mode. This property manages the authentication mode of request to the data plane resources.
        :param pulumi.Input[Union[str, 'PrivateLinkDelegation']] private_link_delegation: The data plane proxy private link delegation. This property manages if a request from delegated ARM private link is allowed when the data plane resource requires private link.
        """
        if authentication_mode is not None:
            pulumi.set(__self__, "authentication_mode", authentication_mode)
        if private_link_delegation is not None:
            pulumi.set(__self__, "private_link_delegation", private_link_delegation)

    @property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> Optional[pulumi.Input[Union[str, 'AuthenticationMode']]]:
        """
        The data plane proxy authentication mode. This property manages the authentication mode of request to the data plane resources.
        """
        return pulumi.get(self, "authentication_mode")

    @authentication_mode.setter
    def authentication_mode(self, value: Optional[pulumi.Input[Union[str, 'AuthenticationMode']]]):
        pulumi.set(self, "authentication_mode", value)

    @property
    @pulumi.getter(name="privateLinkDelegation")
    def private_link_delegation(self) -> Optional[pulumi.Input[Union[str, 'PrivateLinkDelegation']]]:
        """
        The data plane proxy private link delegation. This property manages if a request from delegated ARM private link is allowed when the data plane resource requires private link.
        """
        return pulumi.get(self, "private_link_delegation")

    @private_link_delegation.setter
    def private_link_delegation(self, value: Optional[pulumi.Input[Union[str, 'PrivateLinkDelegation']]]):
        pulumi.set(self, "private_link_delegation", value)


if not MYPY:
    class EncryptionPropertiesArgsDict(TypedDict):
        """
        The encryption settings for a configuration store.
        """
        key_vault_properties: NotRequired[pulumi.Input['KeyVaultPropertiesArgsDict']]
        """
        Key vault properties.
        """
elif False:
    EncryptionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EncryptionPropertiesArgs:
    def __init__(__self__, *,
                 key_vault_properties: Optional[pulumi.Input['KeyVaultPropertiesArgs']] = None):
        """
        The encryption settings for a configuration store.
        :param pulumi.Input['KeyVaultPropertiesArgs'] key_vault_properties: Key vault properties.
        """
        if key_vault_properties is not None:
            pulumi.set(__self__, "key_vault_properties", key_vault_properties)

    @property
    @pulumi.getter(name="keyVaultProperties")
    def key_vault_properties(self) -> Optional[pulumi.Input['KeyVaultPropertiesArgs']]:
        """
        Key vault properties.
        """
        return pulumi.get(self, "key_vault_properties")

    @key_vault_properties.setter
    def key_vault_properties(self, value: Optional[pulumi.Input['KeyVaultPropertiesArgs']]):
        pulumi.set(self, "key_vault_properties", value)


if not MYPY:
    class ExperimentationPropertiesArgsDict(TypedDict):
        """
        Experimentation settings
        """
        data_plane_endpoint: NotRequired[pulumi.Input[str]]
        """
        The data plane endpoint of the Split experimentation workspace resource where experimentation data can be retrieved
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        Resource ID of a resource enabling experimentation
        """
elif False:
    ExperimentationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExperimentationPropertiesArgs:
    def __init__(__self__, *,
                 data_plane_endpoint: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        Experimentation settings
        :param pulumi.Input[str] data_plane_endpoint: The data plane endpoint of the Split experimentation workspace resource where experimentation data can be retrieved
        :param pulumi.Input[str] resource_id: Resource ID of a resource enabling experimentation
        """
        if data_plane_endpoint is not None:
            pulumi.set(__self__, "data_plane_endpoint", data_plane_endpoint)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="dataPlaneEndpoint")
    def data_plane_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The data plane endpoint of the Split experimentation workspace resource where experimentation data can be retrieved
        """
        return pulumi.get(self, "data_plane_endpoint")

    @data_plane_endpoint.setter
    def data_plane_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_plane_endpoint", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID of a resource enabling experimentation
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class KeyVaultPropertiesArgsDict(TypedDict):
        """
        Settings concerning key vault encryption for a configuration store.
        """
        identity_client_id: NotRequired[pulumi.Input[str]]
        """
        The client id of the identity which will be used to access key vault.
        """
        key_identifier: NotRequired[pulumi.Input[str]]
        """
        The URI of the key vault key used to encrypt data.
        """
elif False:
    KeyVaultPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeyVaultPropertiesArgs:
    def __init__(__self__, *,
                 identity_client_id: Optional[pulumi.Input[str]] = None,
                 key_identifier: Optional[pulumi.Input[str]] = None):
        """
        Settings concerning key vault encryption for a configuration store.
        :param pulumi.Input[str] identity_client_id: The client id of the identity which will be used to access key vault.
        :param pulumi.Input[str] key_identifier: The URI of the key vault key used to encrypt data.
        """
        if identity_client_id is not None:
            pulumi.set(__self__, "identity_client_id", identity_client_id)
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)

    @property
    @pulumi.getter(name="identityClientId")
    def identity_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client id of the identity which will be used to access key vault.
        """
        return pulumi.get(self, "identity_client_id")

    @identity_client_id.setter
    def identity_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_client_id", value)

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the key vault key used to encrypt data.
        """
        return pulumi.get(self, "key_identifier")

    @key_identifier.setter
    def key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_identifier", value)


if not MYPY:
    class PrivateEndpointArgsDict(TypedDict):
        """
        Private endpoint which a connection belongs to.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The resource Id for private endpoint
        """
elif False:
    PrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateEndpointArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        Private endpoint which a connection belongs to.
        :param pulumi.Input[str] id: The resource Id for private endpoint
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource Id for private endpoint
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PrivateLinkServiceConnectionStateArgsDict(TypedDict):
        """
        The state of a private link service connection.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The private link service connection description.
        """
        status: NotRequired[pulumi.Input[Union[str, 'ConnectionStatus']]]
        """
        The private link service connection status.
        """
elif False:
    PrivateLinkServiceConnectionStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'ConnectionStatus']]] = None):
        """
        The state of a private link service connection.
        :param pulumi.Input[str] description: The private link service connection description.
        :param pulumi.Input[Union[str, 'ConnectionStatus']] status: The private link service connection status.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The private link service connection description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'ConnectionStatus']]]:
        """
        The private link service connection status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'ConnectionStatus']]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ResourceIdentityArgsDict(TypedDict):
        """
        An identity that can be associated with a resource.
        """
        type: NotRequired[pulumi.Input[Union[str, 'IdentityType']]]
        """
        The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        """
        user_assigned_identities: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
elif False:
    ResourceIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResourceIdentityArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[Union[str, 'IdentityType']]] = None,
                 user_assigned_identities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An identity that can be associated with a resource.
        :param pulumi.Input[Union[str, 'IdentityType']] type: The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_assigned_identities: The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assigned_identities is not None:
            pulumi.set(__self__, "user_assigned_identities", user_assigned_identities)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Union[str, 'IdentityType']]]:
        """
        The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Union[str, 'IdentityType']]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignedIdentities")
    def user_assigned_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        """
        return pulumi.get(self, "user_assigned_identities")

    @user_assigned_identities.setter
    def user_assigned_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_assigned_identities", value)


if not MYPY:
    class SkuArgsDict(TypedDict):
        """
        Describes a configuration store SKU.
        """
        name: pulumi.Input[str]
        """
        The SKU name of the configuration store.
        """
elif False:
    SkuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SkuArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Describes a configuration store SKU.
        :param pulumi.Input[str] name: The SKU name of the configuration store.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The SKU name of the configuration store.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TelemetryPropertiesArgsDict(TypedDict):
        """
        Telemetry settings
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        Resource ID of a resource enabling telemetry collection
        """
elif False:
    TelemetryPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryPropertiesArgs:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        Telemetry settings
        :param pulumi.Input[str] resource_id: Resource ID of a resource enabling telemetry collection
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID of a resource enabling telemetry collection
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


