# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'AKSAssessmentSettingsArgs',
    'AppSvcContainerSettingsArgs',
    'AppSvcNativeSettingsArgs',
    'AssessmentScopeParametersArgs',
    'AzureSettingsArgs',
    'CollectorAgentPropertiesBaseArgs',
    'CollectorAgentSpnPropertiesBaseArgs',
    'ComputeSettingsArgs',
    'DiscoveredEntityLightSummaryArgs',
    'EntityUptimeArgs',
    'FacilitySettingsArgs',
    'HypervLicenseArgs',
    'HypervVirtualizationManagementSettingsArgs',
    'LaborSettingsArgs',
    'ManagementSettingsArgs',
    'NetworkSettingsArgs',
    'OnPremiseSettingsArgs',
    'OtherManagementCostsSettingsArgs',
    'PerfDataSettingsArgs',
    'PrivateLinkServiceConnectionStateArgs',
    'SecuritySettingsArgs',
    'SettingsArgs',
    'SqlDbSettingsArgs',
    'SqlMiSettingsArgs',
    'SqlServerLicensingSettingsArgs',
    'SqlVmSettingsArgs',
    'StorageSettingsArgs',
    'ThirdPartyManagementSettingsArgs',
    'VirtualizationSoftwareSettingsArgs',
    'VmUptimeArgs',
    'VsphereLicenseArgs',
    'VsphereManagementLicenseArgs',
    'VsphereManagementSettingsArgs',
    'WindowsServerLicensingSettingsArgs',
]

@pulumi.input_type
class AKSAssessmentSettingsArgs:
    def __init__(__self__, *,
                 azure_location: pulumi.Input[str],
                 category: pulumi.Input[Union[str, 'AzureVmCategory']],
                 consolidation: pulumi.Input[Union[str, 'ConsolidationType']],
                 currency: pulumi.Input[Union[str, 'AzureCurrency']],
                 environment_type: pulumi.Input[Union[str, 'AzureEnvironmentType']],
                 licensing_program: pulumi.Input[Union[str, 'LicensingProgram']],
                 pricing_tier: pulumi.Input[Union[str, 'PricingTier']],
                 savings_options: pulumi.Input[Union[str, 'SavingsOptions']],
                 sizing_criteria: pulumi.Input[Union[str, 'AssessmentSizingCriterion']],
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 performance_data: Optional[pulumi.Input['PerfDataSettingsArgs']] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None):
        """
        Data model of AKS Assessment Settings.
        :param pulumi.Input[str] azure_location: Gets or sets azure location.
        :param pulumi.Input[Union[str, 'AzureVmCategory']] category: Gets or sets azure VM category.
        :param pulumi.Input[Union[str, 'ConsolidationType']] consolidation: Gets or sets consolidation type.
        :param pulumi.Input[Union[str, 'AzureCurrency']] currency: Gets or sets currency.
        :param pulumi.Input[Union[str, 'AzureEnvironmentType']] environment_type: Gets or sets environment type.
        :param pulumi.Input[Union[str, 'LicensingProgram']] licensing_program: Gets or sets licensing program.
        :param pulumi.Input[Union[str, 'PricingTier']] pricing_tier: Gets or sets pricing tier.
        :param pulumi.Input[Union[str, 'SavingsOptions']] savings_options: Gets or sets savings options.
        :param pulumi.Input[Union[str, 'AssessmentSizingCriterion']] sizing_criteria: Gets or sets sizing criteria.
        :param pulumi.Input[float] discount_percentage: Gets or sets discount percentage.
        :param pulumi.Input['PerfDataSettingsArgs'] performance_data: Gets or sets performance data settings.
        :param pulumi.Input[float] scaling_factor: Gets or sets scaling factor.
        """
        pulumi.set(__self__, "azure_location", azure_location)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "consolidation", consolidation)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "licensing_program", licensing_program)
        pulumi.set(__self__, "pricing_tier", pricing_tier)
        pulumi.set(__self__, "savings_options", savings_options)
        pulumi.set(__self__, "sizing_criteria", sizing_criteria)
        if discount_percentage is not None:
            pulumi.set(__self__, "discount_percentage", discount_percentage)
        if performance_data is not None:
            pulumi.set(__self__, "performance_data", performance_data)
        if scaling_factor is not None:
            pulumi.set(__self__, "scaling_factor", scaling_factor)

    @property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> pulumi.Input[str]:
        """
        Gets or sets azure location.
        """
        return pulumi.get(self, "azure_location")

    @azure_location.setter
    def azure_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_location", value)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[Union[str, 'AzureVmCategory']]:
        """
        Gets or sets azure VM category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[Union[str, 'AzureVmCategory']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def consolidation(self) -> pulumi.Input[Union[str, 'ConsolidationType']]:
        """
        Gets or sets consolidation type.
        """
        return pulumi.get(self, "consolidation")

    @consolidation.setter
    def consolidation(self, value: pulumi.Input[Union[str, 'ConsolidationType']]):
        pulumi.set(self, "consolidation", value)

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Input[Union[str, 'AzureCurrency']]:
        """
        Gets or sets currency.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: pulumi.Input[Union[str, 'AzureCurrency']]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[Union[str, 'AzureEnvironmentType']]:
        """
        Gets or sets environment type.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[Union[str, 'AzureEnvironmentType']]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter(name="licensingProgram")
    def licensing_program(self) -> pulumi.Input[Union[str, 'LicensingProgram']]:
        """
        Gets or sets licensing program.
        """
        return pulumi.get(self, "licensing_program")

    @licensing_program.setter
    def licensing_program(self, value: pulumi.Input[Union[str, 'LicensingProgram']]):
        pulumi.set(self, "licensing_program", value)

    @property
    @pulumi.getter(name="pricingTier")
    def pricing_tier(self) -> pulumi.Input[Union[str, 'PricingTier']]:
        """
        Gets or sets pricing tier.
        """
        return pulumi.get(self, "pricing_tier")

    @pricing_tier.setter
    def pricing_tier(self, value: pulumi.Input[Union[str, 'PricingTier']]):
        pulumi.set(self, "pricing_tier", value)

    @property
    @pulumi.getter(name="savingsOptions")
    def savings_options(self) -> pulumi.Input[Union[str, 'SavingsOptions']]:
        """
        Gets or sets savings options.
        """
        return pulumi.get(self, "savings_options")

    @savings_options.setter
    def savings_options(self, value: pulumi.Input[Union[str, 'SavingsOptions']]):
        pulumi.set(self, "savings_options", value)

    @property
    @pulumi.getter(name="sizingCriteria")
    def sizing_criteria(self) -> pulumi.Input[Union[str, 'AssessmentSizingCriterion']]:
        """
        Gets or sets sizing criteria.
        """
        return pulumi.get(self, "sizing_criteria")

    @sizing_criteria.setter
    def sizing_criteria(self, value: pulumi.Input[Union[str, 'AssessmentSizingCriterion']]):
        pulumi.set(self, "sizing_criteria", value)

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @discount_percentage.setter
    def discount_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "discount_percentage", value)

    @property
    @pulumi.getter(name="performanceData")
    def performance_data(self) -> Optional[pulumi.Input['PerfDataSettingsArgs']]:
        """
        Gets or sets performance data settings.
        """
        return pulumi.get(self, "performance_data")

    @performance_data.setter
    def performance_data(self, value: Optional[pulumi.Input['PerfDataSettingsArgs']]):
        pulumi.set(self, "performance_data", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[pulumi.Input[float]]:
        """
        Gets or sets scaling factor.
        """
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scaling_factor", value)


@pulumi.input_type
class AppSvcContainerSettingsArgs:
    def __init__(__self__, *,
                 isolation_required: pulumi.Input[bool]):
        """
        App service container settings.
        :param pulumi.Input[bool] isolation_required: Gets or sets the isolation required.
        """
        pulumi.set(__self__, "isolation_required", isolation_required)

    @property
    @pulumi.getter(name="isolationRequired")
    def isolation_required(self) -> pulumi.Input[bool]:
        """
        Gets or sets the isolation required.
        """
        return pulumi.get(self, "isolation_required")

    @isolation_required.setter
    def isolation_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "isolation_required", value)


@pulumi.input_type
class AppSvcNativeSettingsArgs:
    def __init__(__self__, *,
                 isolation_required: pulumi.Input[bool]):
        """
        App service native settings.
        :param pulumi.Input[bool] isolation_required: Gets or sets the isolation required.
        """
        pulumi.set(__self__, "isolation_required", isolation_required)

    @property
    @pulumi.getter(name="isolationRequired")
    def isolation_required(self) -> pulumi.Input[bool]:
        """
        Gets or sets the isolation required.
        """
        return pulumi.get(self, "isolation_required")

    @isolation_required.setter
    def isolation_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "isolation_required", value)


@pulumi.input_type
class AssessmentScopeParametersArgs:
    def __init__(__self__, *,
                 server_group_id: Optional[pulumi.Input[str]] = None):
        """
        Data model of Assessment Scope Parameters.
        :param pulumi.Input[str] server_group_id: Gets or sets the server group id.
        """
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)

    @property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets the server group id.
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_group_id", value)


@pulumi.input_type
class AzureSettingsArgs:
    def __init__(__self__, *,
                 currency: Optional[pulumi.Input[Union[str, 'BusinessCaseCurrency']]] = None,
                 target_location: pulumi.Input[str],
                 avs_labor_cost_percentage: Optional[pulumi.Input[float]] = None,
                 business_case_type: Optional[pulumi.Input[Union[str, 'MigrationStrategy']]] = None,
                 comfort_factor: Optional[pulumi.Input[float]] = None,
                 discount_percentage: Optional[pulumi.Input[float]] = None,
                 iaas_labor_cost_percentage: Optional[pulumi.Input[float]] = None,
                 infrastructure_growth_rate: Optional[pulumi.Input[float]] = None,
                 network_cost_percentage: Optional[pulumi.Input[float]] = None,
                 paas_labor_cost_percentage: Optional[pulumi.Input[float]] = None,
                 per_year_migration_completion_percentage: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 performance_data_end_time: Optional[pulumi.Input[str]] = None,
                 performance_data_start_time: Optional[pulumi.Input[str]] = None,
                 performance_utilization_percentile: Optional[pulumi.Input[float]] = None,
                 savings_option: Optional[pulumi.Input[Union[str, 'SavingsOption']]] = None,
                 wacc: Optional[pulumi.Input[float]] = None,
                 workload_discovery_source: Optional[pulumi.Input[Union[str, 'DiscoverySource']]] = None):
        """
        Azure settings for a business case.
        :param pulumi.Input[Union[str, 'BusinessCaseCurrency']] currency: Business case Currency.
        :param pulumi.Input[str] target_location: Gets or sets azure location.
        :param pulumi.Input[float] avs_labor_cost_percentage: Gets Avs labour cost percentage.
        :param pulumi.Input[Union[str, 'MigrationStrategy']] business_case_type: Migration Strategy.
        :param pulumi.Input[float] comfort_factor: Gets comfort factor.
        :param pulumi.Input[float] discount_percentage: Gets azure Discount percentage.
        :param pulumi.Input[float] iaas_labor_cost_percentage: Gets IaaS labour cost percentage.
        :param pulumi.Input[float] infrastructure_growth_rate: Gets infrastructure growth rate.
        :param pulumi.Input[float] network_cost_percentage: Gets network cost percentage.
        :param pulumi.Input[float] paas_labor_cost_percentage: Gets PaaS labour cost percentage.
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] per_year_migration_completion_percentage: Gets migration completion percentage per year.
        :param pulumi.Input[str] performance_data_end_time: Gets end time to use for performance.
        :param pulumi.Input[str] performance_data_start_time: Gets start time to use for performance.
        :param pulumi.Input[float] performance_utilization_percentile: Gets utilization percentile for performance.
        :param pulumi.Input[Union[str, 'SavingsOption']] savings_option: Gets the business case savings option type.
        :param pulumi.Input[float] wacc: Gets wACC percentage.
        :param pulumi.Input[Union[str, 'DiscoverySource']] workload_discovery_source: Workload discovery source.
        """
        if currency is None:
            currency = 'USD'
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "target_location", target_location)
        if avs_labor_cost_percentage is None:
            avs_labor_cost_percentage = 75
        if avs_labor_cost_percentage is not None:
            pulumi.set(__self__, "avs_labor_cost_percentage", avs_labor_cost_percentage)
        if business_case_type is None:
            business_case_type = 'OptimizeForCost'
        if business_case_type is not None:
            pulumi.set(__self__, "business_case_type", business_case_type)
        if comfort_factor is None:
            comfort_factor = 1
        if comfort_factor is not None:
            pulumi.set(__self__, "comfort_factor", comfort_factor)
        if discount_percentage is not None:
            pulumi.set(__self__, "discount_percentage", discount_percentage)
        if iaas_labor_cost_percentage is None:
            iaas_labor_cost_percentage = 75
        if iaas_labor_cost_percentage is not None:
            pulumi.set(__self__, "iaas_labor_cost_percentage", iaas_labor_cost_percentage)
        if infrastructure_growth_rate is None:
            infrastructure_growth_rate = 5
        if infrastructure_growth_rate is not None:
            pulumi.set(__self__, "infrastructure_growth_rate", infrastructure_growth_rate)
        if network_cost_percentage is None:
            network_cost_percentage = 5
        if network_cost_percentage is not None:
            pulumi.set(__self__, "network_cost_percentage", network_cost_percentage)
        if paas_labor_cost_percentage is None:
            paas_labor_cost_percentage = 60
        if paas_labor_cost_percentage is not None:
            pulumi.set(__self__, "paas_labor_cost_percentage", paas_labor_cost_percentage)
        if per_year_migration_completion_percentage is not None:
            pulumi.set(__self__, "per_year_migration_completion_percentage", per_year_migration_completion_percentage)
        if performance_data_end_time is not None:
            pulumi.set(__self__, "performance_data_end_time", performance_data_end_time)
        if performance_data_start_time is not None:
            pulumi.set(__self__, "performance_data_start_time", performance_data_start_time)
        if performance_utilization_percentile is None:
            performance_utilization_percentile = 95
        if performance_utilization_percentile is not None:
            pulumi.set(__self__, "performance_utilization_percentile", performance_utilization_percentile)
        if savings_option is None:
            savings_option = 'RI3Year'
        if savings_option is not None:
            pulumi.set(__self__, "savings_option", savings_option)
        if wacc is not None:
            pulumi.set(__self__, "wacc", wacc)
        if workload_discovery_source is None:
            workload_discovery_source = 'Appliance'
        if workload_discovery_source is not None:
            pulumi.set(__self__, "workload_discovery_source", workload_discovery_source)

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Input[Union[str, 'BusinessCaseCurrency']]:
        """
        Business case Currency.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: pulumi.Input[Union[str, 'BusinessCaseCurrency']]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="targetLocation")
    def target_location(self) -> pulumi.Input[str]:
        """
        Gets or sets azure location.
        """
        return pulumi.get(self, "target_location")

    @target_location.setter
    def target_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_location", value)

    @property
    @pulumi.getter(name="avsLaborCostPercentage")
    def avs_labor_cost_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets Avs labour cost percentage.
        """
        return pulumi.get(self, "avs_labor_cost_percentage")

    @avs_labor_cost_percentage.setter
    def avs_labor_cost_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "avs_labor_cost_percentage", value)

    @property
    @pulumi.getter(name="businessCaseType")
    def business_case_type(self) -> Optional[pulumi.Input[Union[str, 'MigrationStrategy']]]:
        """
        Migration Strategy.
        """
        return pulumi.get(self, "business_case_type")

    @business_case_type.setter
    def business_case_type(self, value: Optional[pulumi.Input[Union[str, 'MigrationStrategy']]]):
        pulumi.set(self, "business_case_type", value)

    @property
    @pulumi.getter(name="comfortFactor")
    def comfort_factor(self) -> Optional[pulumi.Input[float]]:
        """
        Gets comfort factor.
        """
        return pulumi.get(self, "comfort_factor")

    @comfort_factor.setter
    def comfort_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "comfort_factor", value)

    @property
    @pulumi.getter(name="discountPercentage")
    def discount_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets azure Discount percentage.
        """
        return pulumi.get(self, "discount_percentage")

    @discount_percentage.setter
    def discount_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "discount_percentage", value)

    @property
    @pulumi.getter(name="iaasLaborCostPercentage")
    def iaas_labor_cost_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets IaaS labour cost percentage.
        """
        return pulumi.get(self, "iaas_labor_cost_percentage")

    @iaas_labor_cost_percentage.setter
    def iaas_labor_cost_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "iaas_labor_cost_percentage", value)

    @property
    @pulumi.getter(name="infrastructureGrowthRate")
    def infrastructure_growth_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Gets infrastructure growth rate.
        """
        return pulumi.get(self, "infrastructure_growth_rate")

    @infrastructure_growth_rate.setter
    def infrastructure_growth_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "infrastructure_growth_rate", value)

    @property
    @pulumi.getter(name="networkCostPercentage")
    def network_cost_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets network cost percentage.
        """
        return pulumi.get(self, "network_cost_percentage")

    @network_cost_percentage.setter
    def network_cost_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "network_cost_percentage", value)

    @property
    @pulumi.getter(name="paasLaborCostPercentage")
    def paas_labor_cost_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Gets PaaS labour cost percentage.
        """
        return pulumi.get(self, "paas_labor_cost_percentage")

    @paas_labor_cost_percentage.setter
    def paas_labor_cost_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "paas_labor_cost_percentage", value)

    @property
    @pulumi.getter(name="perYearMigrationCompletionPercentage")
    def per_year_migration_completion_percentage(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        """
        Gets migration completion percentage per year.
        """
        return pulumi.get(self, "per_year_migration_completion_percentage")

    @per_year_migration_completion_percentage.setter
    def per_year_migration_completion_percentage(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "per_year_migration_completion_percentage", value)

    @property
    @pulumi.getter(name="performanceDataEndTime")
    def performance_data_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets end time to use for performance.
        """
        return pulumi.get(self, "performance_data_end_time")

    @performance_data_end_time.setter
    def performance_data_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_data_end_time", value)

    @property
    @pulumi.getter(name="performanceDataStartTime")
    def performance_data_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets start time to use for performance.
        """
        return pulumi.get(self, "performance_data_start_time")

    @performance_data_start_time.setter
    def performance_data_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_data_start_time", value)

    @property
    @pulumi.getter(name="performanceUtilizationPercentile")
    def performance_utilization_percentile(self) -> Optional[pulumi.Input[float]]:
        """
        Gets utilization percentile for performance.
        """
        return pulumi.get(self, "performance_utilization_percentile")

    @performance_utilization_percentile.setter
    def performance_utilization_percentile(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "performance_utilization_percentile", value)

    @property
    @pulumi.getter(name="savingsOption")
    def savings_option(self) -> Optional[pulumi.Input[Union[str, 'SavingsOption']]]:
        """
        Gets the business case savings option type.
        """
        return pulumi.get(self, "savings_option")

    @savings_option.setter
    def savings_option(self, value: Optional[pulumi.Input[Union[str, 'SavingsOption']]]):
        pulumi.set(self, "savings_option", value)

    @property
    @pulumi.getter
    def wacc(self) -> Optional[pulumi.Input[float]]:
        """
        Gets wACC percentage.
        """
        return pulumi.get(self, "wacc")

    @wacc.setter
    def wacc(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "wacc", value)

    @property
    @pulumi.getter(name="workloadDiscoverySource")
    def workload_discovery_source(self) -> Optional[pulumi.Input[Union[str, 'DiscoverySource']]]:
        """
        Workload discovery source.
        """
        return pulumi.get(self, "workload_discovery_source")

    @workload_discovery_source.setter
    def workload_discovery_source(self, value: Optional[pulumi.Input[Union[str, 'DiscoverySource']]]):
        pulumi.set(self, "workload_discovery_source", value)


@pulumi.input_type
class CollectorAgentPropertiesBaseArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 last_heartbeat_utc: Optional[pulumi.Input[str]] = None,
                 spn_details: Optional[pulumi.Input['CollectorAgentSpnPropertiesBaseArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Collector agent property class.
        :param pulumi.Input[str] id: Gets the collector agent id.
        :param pulumi.Input[str] last_heartbeat_utc: Gets the collector last heartbeat time.
        :param pulumi.Input['CollectorAgentSpnPropertiesBaseArgs'] spn_details: Gets or sets the SPN details.
        :param pulumi.Input[str] version: Gets the collector agent version.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_heartbeat_utc is not None:
            pulumi.set(__self__, "last_heartbeat_utc", last_heartbeat_utc)
        if spn_details is not None:
            pulumi.set(__self__, "spn_details", spn_details)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the collector agent id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastHeartbeatUtc")
    def last_heartbeat_utc(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the collector last heartbeat time.
        """
        return pulumi.get(self, "last_heartbeat_utc")

    @last_heartbeat_utc.setter
    def last_heartbeat_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_heartbeat_utc", value)

    @property
    @pulumi.getter(name="spnDetails")
    def spn_details(self) -> Optional[pulumi.Input['CollectorAgentSpnPropertiesBaseArgs']]:
        """
        Gets or sets the SPN details.
        """
        return pulumi.get(self, "spn_details")

    @spn_details.setter
    def spn_details(self, value: Optional[pulumi.Input['CollectorAgentSpnPropertiesBaseArgs']]):
        pulumi.set(self, "spn_details", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the collector agent version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class CollectorAgentSpnPropertiesBaseArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authority: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Collector agent SPN details class.
        :param pulumi.Input[str] application_id: Gets the AAD application id.
        :param pulumi.Input[str] audience: Gets the AAD audience url.
        :param pulumi.Input[str] authority: Gets the AAD authority endpoint.
        :param pulumi.Input[str] object_id: Gets the object id of the AAD application.
        :param pulumi.Input[str] tenant_id: Gets the tenant id of the AAD application.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the AAD application id.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the AAD audience url.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the AAD authority endpoint.
        """
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the object id of the AAD application.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gets the tenant id of the AAD application.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ComputeSettingsArgs:
    def __init__(__self__, *,
                 hyperthread_core_to_memory_ratio: pulumi.Input[float],
                 price: pulumi.Input[float],
                 sql_server_licensing: pulumi.Input[Sequence[pulumi.Input['SqlServerLicensingSettingsArgs']]],
                 virtualization_software_settings: pulumi.Input['VirtualizationSoftwareSettingsArgs'],
                 windows_server_licensing: pulumi.Input['WindowsServerLicensingSettingsArgs']):
        """
        Compute settings.
        :param pulumi.Input[float] hyperthread_core_to_memory_ratio: Hyperthread core to memory ratio.
        :param pulumi.Input[float] price: Compute Price.
        :param pulumi.Input[Sequence[pulumi.Input['SqlServerLicensingSettingsArgs']]] sql_server_licensing: SQL Server licensing settings.
        :param pulumi.Input['VirtualizationSoftwareSettingsArgs'] virtualization_software_settings: Virtualization software settings.
        :param pulumi.Input['WindowsServerLicensingSettingsArgs'] windows_server_licensing: Windows Server licensing settings.
        """
        pulumi.set(__self__, "hyperthread_core_to_memory_ratio", hyperthread_core_to_memory_ratio)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "sql_server_licensing", sql_server_licensing)
        pulumi.set(__self__, "virtualization_software_settings", virtualization_software_settings)
        pulumi.set(__self__, "windows_server_licensing", windows_server_licensing)

    @property
    @pulumi.getter(name="hyperthreadCoreToMemoryRatio")
    def hyperthread_core_to_memory_ratio(self) -> pulumi.Input[float]:
        """
        Hyperthread core to memory ratio.
        """
        return pulumi.get(self, "hyperthread_core_to_memory_ratio")

    @hyperthread_core_to_memory_ratio.setter
    def hyperthread_core_to_memory_ratio(self, value: pulumi.Input[float]):
        pulumi.set(self, "hyperthread_core_to_memory_ratio", value)

    @property
    @pulumi.getter
    def price(self) -> pulumi.Input[float]:
        """
        Compute Price.
        """
        return pulumi.get(self, "price")

    @price.setter
    def price(self, value: pulumi.Input[float]):
        pulumi.set(self, "price", value)

    @property
    @pulumi.getter(name="sqlServerLicensing")
    def sql_server_licensing(self) -> pulumi.Input[Sequence[pulumi.Input['SqlServerLicensingSettingsArgs']]]:
        """
        SQL Server licensing settings.
        """
        return pulumi.get(self, "sql_server_licensing")

    @sql_server_licensing.setter
    def sql_server_licensing(self, value: pulumi.Input[Sequence[pulumi.Input['SqlServerLicensingSettingsArgs']]]):
        pulumi.set(self, "sql_server_licensing", value)

    @property
    @pulumi.getter(name="virtualizationSoftwareSettings")
    def virtualization_software_settings(self) -> pulumi.Input['VirtualizationSoftwareSettingsArgs']:
        """
        Virtualization software settings.
        """
        return pulumi.get(self, "virtualization_software_settings")

    @virtualization_software_settings.setter
    def virtualization_software_settings(self, value: pulumi.Input['VirtualizationSoftwareSettingsArgs']):
        pulumi.set(self, "virtualization_software_settings", value)

    @property
    @pulumi.getter(name="windowsServerLicensing")
    def windows_server_licensing(self) -> pulumi.Input['WindowsServerLicensingSettingsArgs']:
        """
        Windows Server licensing settings.
        """
        return pulumi.get(self, "windows_server_licensing")

    @windows_server_licensing.setter
    def windows_server_licensing(self, value: pulumi.Input['WindowsServerLicensingSettingsArgs']):
        pulumi.set(self, "windows_server_licensing", value)


@pulumi.input_type
class DiscoveredEntityLightSummaryArgs:
    def __init__(__self__, *,
                 number_of_machines: pulumi.Input[int],
                 number_of_servers: pulumi.Input[int],
                 number_of_web_apps: pulumi.Input[int]):
        """
        Discovered entity light summary.
        :param pulumi.Input[int] number_of_machines: Gets or sets the number of machines.
        :param pulumi.Input[int] number_of_servers: Gets or sets the number of servers.
        :param pulumi.Input[int] number_of_web_apps: Gets or sets the number of web apps.
        """
        pulumi.set(__self__, "number_of_machines", number_of_machines)
        pulumi.set(__self__, "number_of_servers", number_of_servers)
        pulumi.set(__self__, "number_of_web_apps", number_of_web_apps)

    @property
    @pulumi.getter(name="numberOfMachines")
    def number_of_machines(self) -> pulumi.Input[int]:
        """
        Gets or sets the number of machines.
        """
        return pulumi.get(self, "number_of_machines")

    @number_of_machines.setter
    def number_of_machines(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_of_machines", value)

    @property
    @pulumi.getter(name="numberOfServers")
    def number_of_servers(self) -> pulumi.Input[int]:
        """
        Gets or sets the number of servers.
        """
        return pulumi.get(self, "number_of_servers")

    @number_of_servers.setter
    def number_of_servers(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_of_servers", value)

    @property
    @pulumi.getter(name="numberOfWebApps")
    def number_of_web_apps(self) -> pulumi.Input[int]:
        """
        Gets or sets the number of web apps.
        """
        return pulumi.get(self, "number_of_web_apps")

    @number_of_web_apps.setter
    def number_of_web_apps(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_of_web_apps", value)


@pulumi.input_type
class EntityUptimeArgs:
    def __init__(__self__, *,
                 days_per_month: Optional[pulumi.Input[int]] = None,
                 hours_per_day: Optional[pulumi.Input[int]] = None):
        """
        Entity Uptime.
        :param pulumi.Input[int] days_per_month: Gets the days per month.
        :param pulumi.Input[int] hours_per_day: Gets the hours per day.
        """
        if days_per_month is not None:
            pulumi.set(__self__, "days_per_month", days_per_month)
        if hours_per_day is not None:
            pulumi.set(__self__, "hours_per_day", hours_per_day)

    @property
    @pulumi.getter(name="daysPerMonth")
    def days_per_month(self) -> Optional[pulumi.Input[int]]:
        """
        Gets the days per month.
        """
        return pulumi.get(self, "days_per_month")

    @days_per_month.setter
    def days_per_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_per_month", value)

    @property
    @pulumi.getter(name="hoursPerDay")
    def hours_per_day(self) -> Optional[pulumi.Input[int]]:
        """
        Gets the hours per day.
        """
        return pulumi.get(self, "hours_per_day")

    @hours_per_day.setter
    def hours_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours_per_day", value)


@pulumi.input_type
class FacilitySettingsArgs:
    def __init__(__self__, *,
                 facilities_cost: pulumi.Input[float]):
        """
        Facility settings.
        :param pulumi.Input[float] facilities_cost: The facilities cost.
        """
        pulumi.set(__self__, "facilities_cost", facilities_cost)

    @property
    @pulumi.getter(name="facilitiesCost")
    def facilities_cost(self) -> pulumi.Input[float]:
        """
        The facilities cost.
        """
        return pulumi.get(self, "facilities_cost")

    @facilities_cost.setter
    def facilities_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "facilities_cost", value)


@pulumi.input_type
class HypervLicenseArgs:
    def __init__(__self__, *,
                 license_cost: pulumi.Input[float],
                 license_type: pulumi.Input[Union[str, 'HyperVLicenseType']]):
        """
        Representation of a licence.
        :param pulumi.Input[float] license_cost: Cost of a licence.
        :param pulumi.Input[Union[str, 'HyperVLicenseType']] license_type: HyperV licence type.
        """
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        Cost of a licence.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Input[Union[str, 'HyperVLicenseType']]:
        """
        HyperV licence type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: pulumi.Input[Union[str, 'HyperVLicenseType']]):
        pulumi.set(self, "license_type", value)


@pulumi.input_type
class HypervVirtualizationManagementSettingsArgs:
    def __init__(__self__, *,
                 license_and_support_list: pulumi.Input[Sequence[pulumi.Input['HypervLicenseArgs']]],
                 number_of_physical_cores_per_license: pulumi.Input[int],
                 software_assurance_cost: pulumi.Input[float]):
        """
        HyperV Virtualization Management Settings.
        :param pulumi.Input[Sequence[pulumi.Input['HypervLicenseArgs']]] license_and_support_list: Licence and support list.
        :param pulumi.Input[int] number_of_physical_cores_per_license: Number of physical cores per licence.
        :param pulumi.Input[float] software_assurance_cost: Software Assurance Cost.
        """
        pulumi.set(__self__, "license_and_support_list", license_and_support_list)
        pulumi.set(__self__, "number_of_physical_cores_per_license", number_of_physical_cores_per_license)
        pulumi.set(__self__, "software_assurance_cost", software_assurance_cost)

    @property
    @pulumi.getter(name="licenseAndSupportList")
    def license_and_support_list(self) -> pulumi.Input[Sequence[pulumi.Input['HypervLicenseArgs']]]:
        """
        Licence and support list.
        """
        return pulumi.get(self, "license_and_support_list")

    @license_and_support_list.setter
    def license_and_support_list(self, value: pulumi.Input[Sequence[pulumi.Input['HypervLicenseArgs']]]):
        pulumi.set(self, "license_and_support_list", value)

    @property
    @pulumi.getter(name="numberOfPhysicalCoresPerLicense")
    def number_of_physical_cores_per_license(self) -> pulumi.Input[int]:
        """
        Number of physical cores per licence.
        """
        return pulumi.get(self, "number_of_physical_cores_per_license")

    @number_of_physical_cores_per_license.setter
    def number_of_physical_cores_per_license(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_of_physical_cores_per_license", value)

    @property
    @pulumi.getter(name="softwareAssuranceCost")
    def software_assurance_cost(self) -> pulumi.Input[float]:
        """
        Software Assurance Cost.
        """
        return pulumi.get(self, "software_assurance_cost")

    @software_assurance_cost.setter
    def software_assurance_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "software_assurance_cost", value)


@pulumi.input_type
class LaborSettingsArgs:
    def __init__(__self__, *,
                 hourly_admin_cost: pulumi.Input[float],
                 physical_servers_per_admin: pulumi.Input[int],
                 virtual_machines_per_admin: pulumi.Input[int]):
        """
        Labour settings.
        :param pulumi.Input[float] hourly_admin_cost: Hourly administrator cost.
        :param pulumi.Input[int] physical_servers_per_admin: Physical servers per administrator.
        :param pulumi.Input[int] virtual_machines_per_admin: Virtual machines per administrator.
        """
        pulumi.set(__self__, "hourly_admin_cost", hourly_admin_cost)
        pulumi.set(__self__, "physical_servers_per_admin", physical_servers_per_admin)
        pulumi.set(__self__, "virtual_machines_per_admin", virtual_machines_per_admin)

    @property
    @pulumi.getter(name="hourlyAdminCost")
    def hourly_admin_cost(self) -> pulumi.Input[float]:
        """
        Hourly administrator cost.
        """
        return pulumi.get(self, "hourly_admin_cost")

    @hourly_admin_cost.setter
    def hourly_admin_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "hourly_admin_cost", value)

    @property
    @pulumi.getter(name="physicalServersPerAdmin")
    def physical_servers_per_admin(self) -> pulumi.Input[int]:
        """
        Physical servers per administrator.
        """
        return pulumi.get(self, "physical_servers_per_admin")

    @physical_servers_per_admin.setter
    def physical_servers_per_admin(self, value: pulumi.Input[int]):
        pulumi.set(self, "physical_servers_per_admin", value)

    @property
    @pulumi.getter(name="virtualMachinesPerAdmin")
    def virtual_machines_per_admin(self) -> pulumi.Input[int]:
        """
        Virtual machines per administrator.
        """
        return pulumi.get(self, "virtual_machines_per_admin")

    @virtual_machines_per_admin.setter
    def virtual_machines_per_admin(self, value: pulumi.Input[int]):
        pulumi.set(self, "virtual_machines_per_admin", value)


@pulumi.input_type
class ManagementSettingsArgs:
    def __init__(__self__, *,
                 hyperv_virtualization_management_settings: pulumi.Input['HypervVirtualizationManagementSettingsArgs'],
                 other_management_costs_settings: pulumi.Input['OtherManagementCostsSettingsArgs'],
                 third_party_management_settings: pulumi.Input['ThirdPartyManagementSettingsArgs'],
                 vsphere_management_settings: pulumi.Input['VsphereManagementSettingsArgs']):
        """
        Management settings.
        :param pulumi.Input['HypervVirtualizationManagementSettingsArgs'] hyperv_virtualization_management_settings: HyperV Virtualization Management Settings.
        :param pulumi.Input['OtherManagementCostsSettingsArgs'] other_management_costs_settings: Other Management Costs Settings.
        :param pulumi.Input['ThirdPartyManagementSettingsArgs'] third_party_management_settings: Third Party Management Settings.
        :param pulumi.Input['VsphereManagementSettingsArgs'] vsphere_management_settings: vSphere Management Settings.
        """
        pulumi.set(__self__, "hyperv_virtualization_management_settings", hyperv_virtualization_management_settings)
        pulumi.set(__self__, "other_management_costs_settings", other_management_costs_settings)
        pulumi.set(__self__, "third_party_management_settings", third_party_management_settings)
        pulumi.set(__self__, "vsphere_management_settings", vsphere_management_settings)

    @property
    @pulumi.getter(name="hypervVirtualizationManagementSettings")
    def hyperv_virtualization_management_settings(self) -> pulumi.Input['HypervVirtualizationManagementSettingsArgs']:
        """
        HyperV Virtualization Management Settings.
        """
        return pulumi.get(self, "hyperv_virtualization_management_settings")

    @hyperv_virtualization_management_settings.setter
    def hyperv_virtualization_management_settings(self, value: pulumi.Input['HypervVirtualizationManagementSettingsArgs']):
        pulumi.set(self, "hyperv_virtualization_management_settings", value)

    @property
    @pulumi.getter(name="otherManagementCostsSettings")
    def other_management_costs_settings(self) -> pulumi.Input['OtherManagementCostsSettingsArgs']:
        """
        Other Management Costs Settings.
        """
        return pulumi.get(self, "other_management_costs_settings")

    @other_management_costs_settings.setter
    def other_management_costs_settings(self, value: pulumi.Input['OtherManagementCostsSettingsArgs']):
        pulumi.set(self, "other_management_costs_settings", value)

    @property
    @pulumi.getter(name="thirdPartyManagementSettings")
    def third_party_management_settings(self) -> pulumi.Input['ThirdPartyManagementSettingsArgs']:
        """
        Third Party Management Settings.
        """
        return pulumi.get(self, "third_party_management_settings")

    @third_party_management_settings.setter
    def third_party_management_settings(self, value: pulumi.Input['ThirdPartyManagementSettingsArgs']):
        pulumi.set(self, "third_party_management_settings", value)

    @property
    @pulumi.getter(name="vsphereManagementSettings")
    def vsphere_management_settings(self) -> pulumi.Input['VsphereManagementSettingsArgs']:
        """
        vSphere Management Settings.
        """
        return pulumi.get(self, "vsphere_management_settings")

    @vsphere_management_settings.setter
    def vsphere_management_settings(self, value: pulumi.Input['VsphereManagementSettingsArgs']):
        pulumi.set(self, "vsphere_management_settings", value)


@pulumi.input_type
class NetworkSettingsArgs:
    def __init__(__self__, *,
                 hardware_software_cost_percentage: pulumi.Input[float],
                 maintenance_cost_percentage: pulumi.Input[float]):
        """
        Network settings.
        :param pulumi.Input[float] hardware_software_cost_percentage: Network hardware and software cost percentage.
        :param pulumi.Input[float] maintenance_cost_percentage: Network maintenance cost percentage.
        """
        pulumi.set(__self__, "hardware_software_cost_percentage", hardware_software_cost_percentage)
        pulumi.set(__self__, "maintenance_cost_percentage", maintenance_cost_percentage)

    @property
    @pulumi.getter(name="hardwareSoftwareCostPercentage")
    def hardware_software_cost_percentage(self) -> pulumi.Input[float]:
        """
        Network hardware and software cost percentage.
        """
        return pulumi.get(self, "hardware_software_cost_percentage")

    @hardware_software_cost_percentage.setter
    def hardware_software_cost_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "hardware_software_cost_percentage", value)

    @property
    @pulumi.getter(name="maintenanceCostPercentage")
    def maintenance_cost_percentage(self) -> pulumi.Input[float]:
        """
        Network maintenance cost percentage.
        """
        return pulumi.get(self, "maintenance_cost_percentage")

    @maintenance_cost_percentage.setter
    def maintenance_cost_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "maintenance_cost_percentage", value)


@pulumi.input_type
class OnPremiseSettingsArgs:
    def __init__(__self__, *,
                 compute_settings: pulumi.Input['ComputeSettingsArgs'],
                 facility_settings: pulumi.Input['FacilitySettingsArgs'],
                 labor_settings: pulumi.Input['LaborSettingsArgs'],
                 network_settings: pulumi.Input['NetworkSettingsArgs'],
                 security_settings: pulumi.Input['SecuritySettingsArgs'],
                 storage_settings: pulumi.Input['StorageSettingsArgs'],
                 management_settings: Optional[pulumi.Input['ManagementSettingsArgs']] = None):
        """
        On-premise settings.
        :param pulumi.Input['ComputeSettingsArgs'] compute_settings: Compute settings.
        :param pulumi.Input['FacilitySettingsArgs'] facility_settings: Facility settings.
        :param pulumi.Input['LaborSettingsArgs'] labor_settings: Labour settings.
        :param pulumi.Input['NetworkSettingsArgs'] network_settings: Network settings.
        :param pulumi.Input['SecuritySettingsArgs'] security_settings: Security settings.
        :param pulumi.Input['StorageSettingsArgs'] storage_settings: Storage settings.
        :param pulumi.Input['ManagementSettingsArgs'] management_settings: Management settings.
        """
        pulumi.set(__self__, "compute_settings", compute_settings)
        pulumi.set(__self__, "facility_settings", facility_settings)
        pulumi.set(__self__, "labor_settings", labor_settings)
        pulumi.set(__self__, "network_settings", network_settings)
        pulumi.set(__self__, "security_settings", security_settings)
        pulumi.set(__self__, "storage_settings", storage_settings)
        if management_settings is not None:
            pulumi.set(__self__, "management_settings", management_settings)

    @property
    @pulumi.getter(name="computeSettings")
    def compute_settings(self) -> pulumi.Input['ComputeSettingsArgs']:
        """
        Compute settings.
        """
        return pulumi.get(self, "compute_settings")

    @compute_settings.setter
    def compute_settings(self, value: pulumi.Input['ComputeSettingsArgs']):
        pulumi.set(self, "compute_settings", value)

    @property
    @pulumi.getter(name="facilitySettings")
    def facility_settings(self) -> pulumi.Input['FacilitySettingsArgs']:
        """
        Facility settings.
        """
        return pulumi.get(self, "facility_settings")

    @facility_settings.setter
    def facility_settings(self, value: pulumi.Input['FacilitySettingsArgs']):
        pulumi.set(self, "facility_settings", value)

    @property
    @pulumi.getter(name="laborSettings")
    def labor_settings(self) -> pulumi.Input['LaborSettingsArgs']:
        """
        Labour settings.
        """
        return pulumi.get(self, "labor_settings")

    @labor_settings.setter
    def labor_settings(self, value: pulumi.Input['LaborSettingsArgs']):
        pulumi.set(self, "labor_settings", value)

    @property
    @pulumi.getter(name="networkSettings")
    def network_settings(self) -> pulumi.Input['NetworkSettingsArgs']:
        """
        Network settings.
        """
        return pulumi.get(self, "network_settings")

    @network_settings.setter
    def network_settings(self, value: pulumi.Input['NetworkSettingsArgs']):
        pulumi.set(self, "network_settings", value)

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> pulumi.Input['SecuritySettingsArgs']:
        """
        Security settings.
        """
        return pulumi.get(self, "security_settings")

    @security_settings.setter
    def security_settings(self, value: pulumi.Input['SecuritySettingsArgs']):
        pulumi.set(self, "security_settings", value)

    @property
    @pulumi.getter(name="storageSettings")
    def storage_settings(self) -> pulumi.Input['StorageSettingsArgs']:
        """
        Storage settings.
        """
        return pulumi.get(self, "storage_settings")

    @storage_settings.setter
    def storage_settings(self, value: pulumi.Input['StorageSettingsArgs']):
        pulumi.set(self, "storage_settings", value)

    @property
    @pulumi.getter(name="managementSettings")
    def management_settings(self) -> Optional[pulumi.Input['ManagementSettingsArgs']]:
        """
        Management settings.
        """
        return pulumi.get(self, "management_settings")

    @management_settings.setter
    def management_settings(self, value: Optional[pulumi.Input['ManagementSettingsArgs']]):
        pulumi.set(self, "management_settings", value)


@pulumi.input_type
class OtherManagementCostsSettingsArgs:
    def __init__(__self__, *,
                 data_protection_cost_per_server_per_year: pulumi.Input[float],
                 monitoring_cost_per_server_per_year: pulumi.Input[float],
                 patching_cost_per_server_per_year: pulumi.Input[float]):
        """
        Other Management Costs Settings.
        :param pulumi.Input[float] data_protection_cost_per_server_per_year: Data Protection Cost Per Server Per Year.
        :param pulumi.Input[float] monitoring_cost_per_server_per_year: Monitoring Cost Per Server Per Year.
        :param pulumi.Input[float] patching_cost_per_server_per_year: Patching Cost Per Server Per Year.
        """
        pulumi.set(__self__, "data_protection_cost_per_server_per_year", data_protection_cost_per_server_per_year)
        pulumi.set(__self__, "monitoring_cost_per_server_per_year", monitoring_cost_per_server_per_year)
        pulumi.set(__self__, "patching_cost_per_server_per_year", patching_cost_per_server_per_year)

    @property
    @pulumi.getter(name="dataProtectionCostPerServerPerYear")
    def data_protection_cost_per_server_per_year(self) -> pulumi.Input[float]:
        """
        Data Protection Cost Per Server Per Year.
        """
        return pulumi.get(self, "data_protection_cost_per_server_per_year")

    @data_protection_cost_per_server_per_year.setter
    def data_protection_cost_per_server_per_year(self, value: pulumi.Input[float]):
        pulumi.set(self, "data_protection_cost_per_server_per_year", value)

    @property
    @pulumi.getter(name="monitoringCostPerServerPerYear")
    def monitoring_cost_per_server_per_year(self) -> pulumi.Input[float]:
        """
        Monitoring Cost Per Server Per Year.
        """
        return pulumi.get(self, "monitoring_cost_per_server_per_year")

    @monitoring_cost_per_server_per_year.setter
    def monitoring_cost_per_server_per_year(self, value: pulumi.Input[float]):
        pulumi.set(self, "monitoring_cost_per_server_per_year", value)

    @property
    @pulumi.getter(name="patchingCostPerServerPerYear")
    def patching_cost_per_server_per_year(self) -> pulumi.Input[float]:
        """
        Patching Cost Per Server Per Year.
        """
        return pulumi.get(self, "patching_cost_per_server_per_year")

    @patching_cost_per_server_per_year.setter
    def patching_cost_per_server_per_year(self, value: pulumi.Input[float]):
        pulumi.set(self, "patching_cost_per_server_per_year", value)


@pulumi.input_type
class PerfDataSettingsArgs:
    def __init__(__self__, *,
                 percentile: pulumi.Input[Union[str, 'Percentile']],
                 time_range: pulumi.Input[Union[str, 'TimeRange']],
                 perf_data_end_time: Optional[pulumi.Input[str]] = None,
                 perf_data_start_time: Optional[pulumi.Input[str]] = None):
        """
        Data model of Performance Data Settings.
        :param pulumi.Input[Union[str, 'Percentile']] percentile: Gets percentile utilization for performance data.
        :param pulumi.Input[Union[str, 'TimeRange']] time_range: Gets perf data time range.
        :param pulumi.Input[str] perf_data_end_time: Gets or sets perf data end time.
        :param pulumi.Input[str] perf_data_start_time: Gets or sets perf data start time.
        """
        pulumi.set(__self__, "percentile", percentile)
        pulumi.set(__self__, "time_range", time_range)
        if perf_data_end_time is not None:
            pulumi.set(__self__, "perf_data_end_time", perf_data_end_time)
        if perf_data_start_time is not None:
            pulumi.set(__self__, "perf_data_start_time", perf_data_start_time)

    @property
    @pulumi.getter
    def percentile(self) -> pulumi.Input[Union[str, 'Percentile']]:
        """
        Gets percentile utilization for performance data.
        """
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: pulumi.Input[Union[str, 'Percentile']]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Input[Union[str, 'TimeRange']]:
        """
        Gets perf data time range.
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: pulumi.Input[Union[str, 'TimeRange']]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter(name="perfDataEndTime")
    def perf_data_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets perf data end time.
        """
        return pulumi.get(self, "perf_data_end_time")

    @perf_data_end_time.setter
    def perf_data_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_end_time", value)

    @property
    @pulumi.getter(name="perfDataStartTime")
    def perf_data_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Gets or sets perf data start time.
        """
        return pulumi.get(self, "perf_data_start_time")

    @perf_data_start_time.setter
    def perf_data_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "perf_data_start_time", value)


@pulumi.input_type
class PrivateLinkServiceConnectionStateArgs:
    def __init__(__self__, *,
                 actions_required: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]] = None):
        """
        A collection of information about the state of the connection between service consumer and provider.
        :param pulumi.Input[str] actions_required: A message indicating if changes on the service provider require any updates on the consumer.
        :param pulumi.Input[str] description: The reason for approval/rejection of the connection.
        :param pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']] status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        if actions_required is not None:
            pulumi.set(__self__, "actions_required", actions_required)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionsRequired")
    def actions_required(self) -> Optional[pulumi.Input[str]]:
        """
        A message indicating if changes on the service provider require any updates on the consumer.
        """
        return pulumi.get(self, "actions_required")

    @actions_required.setter
    def actions_required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actions_required", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for approval/rejection of the connection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]:
        """
        Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Union[str, 'PrivateEndpointServiceConnectionStatus']]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SecuritySettingsArgs:
    def __init__(__self__, *,
                 server_security_cost_per_server_per_year: pulumi.Input[float],
                 sql_server_security_cost_per_server_per_year: pulumi.Input[float]):
        """
        Security settings.
        :param pulumi.Input[float] server_security_cost_per_server_per_year: Physical servers per administrator.
        :param pulumi.Input[float] sql_server_security_cost_per_server_per_year: Virtual machines per administrator.
        """
        pulumi.set(__self__, "server_security_cost_per_server_per_year", server_security_cost_per_server_per_year)
        pulumi.set(__self__, "sql_server_security_cost_per_server_per_year", sql_server_security_cost_per_server_per_year)

    @property
    @pulumi.getter(name="serverSecurityCostPerServerPerYear")
    def server_security_cost_per_server_per_year(self) -> pulumi.Input[float]:
        """
        Physical servers per administrator.
        """
        return pulumi.get(self, "server_security_cost_per_server_per_year")

    @server_security_cost_per_server_per_year.setter
    def server_security_cost_per_server_per_year(self, value: pulumi.Input[float]):
        pulumi.set(self, "server_security_cost_per_server_per_year", value)

    @property
    @pulumi.getter(name="sqlServerSecurityCostPerServerPerYear")
    def sql_server_security_cost_per_server_per_year(self) -> pulumi.Input[float]:
        """
        Virtual machines per administrator.
        """
        return pulumi.get(self, "sql_server_security_cost_per_server_per_year")

    @sql_server_security_cost_per_server_per_year.setter
    def sql_server_security_cost_per_server_per_year(self, value: pulumi.Input[float]):
        pulumi.set(self, "sql_server_security_cost_per_server_per_year", value)


@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 azure_settings: pulumi.Input['AzureSettingsArgs'],
                 on_premise_settings: Optional[pulumi.Input['OnPremiseSettingsArgs']] = None):
        """
        Business case settings.
        :param pulumi.Input['AzureSettingsArgs'] azure_settings: Azure settings for a business case.
        :param pulumi.Input['OnPremiseSettingsArgs'] on_premise_settings: On-premise settings.
        """
        pulumi.set(__self__, "azure_settings", azure_settings)
        if on_premise_settings is not None:
            pulumi.set(__self__, "on_premise_settings", on_premise_settings)

    @property
    @pulumi.getter(name="azureSettings")
    def azure_settings(self) -> pulumi.Input['AzureSettingsArgs']:
        """
        Azure settings for a business case.
        """
        return pulumi.get(self, "azure_settings")

    @azure_settings.setter
    def azure_settings(self, value: pulumi.Input['AzureSettingsArgs']):
        pulumi.set(self, "azure_settings", value)

    @property
    @pulumi.getter(name="onPremiseSettings")
    def on_premise_settings(self) -> Optional[pulumi.Input['OnPremiseSettingsArgs']]:
        """
        On-premise settings.
        """
        return pulumi.get(self, "on_premise_settings")

    @on_premise_settings.setter
    def on_premise_settings(self, value: Optional[pulumi.Input['OnPremiseSettingsArgs']]):
        pulumi.set(self, "on_premise_settings", value)


@pulumi.input_type
class SqlDbSettingsArgs:
    def __init__(__self__, *,
                 azure_sql_compute_tier: Optional[pulumi.Input[Union[str, 'ComputeTier']]] = None,
                 azure_sql_data_base_type: Optional[pulumi.Input[Union[str, 'AzureSqlDataBaseType']]] = None,
                 azure_sql_purchase_model: Optional[pulumi.Input[Union[str, 'AzureSqlPurchaseModel']]] = None,
                 azure_sql_service_tier: Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]] = None):
        """
        SQL database assessment settings.
        :param pulumi.Input[Union[str, 'ComputeTier']] azure_sql_compute_tier: Gets or sets the azure SQL compute tier.
        :param pulumi.Input[Union[str, 'AzureSqlDataBaseType']] azure_sql_data_base_type: Gets or sets the azure PAAS SQL instance type.
        :param pulumi.Input[Union[str, 'AzureSqlPurchaseModel']] azure_sql_purchase_model: Gets or sets the azure SQL purchase model.
        :param pulumi.Input[Union[str, 'AzureSqlServiceTier']] azure_sql_service_tier: Gets or sets the azure SQL service tier.
        """
        if azure_sql_compute_tier is not None:
            pulumi.set(__self__, "azure_sql_compute_tier", azure_sql_compute_tier)
        if azure_sql_data_base_type is not None:
            pulumi.set(__self__, "azure_sql_data_base_type", azure_sql_data_base_type)
        if azure_sql_purchase_model is not None:
            pulumi.set(__self__, "azure_sql_purchase_model", azure_sql_purchase_model)
        if azure_sql_service_tier is not None:
            pulumi.set(__self__, "azure_sql_service_tier", azure_sql_service_tier)

    @property
    @pulumi.getter(name="azureSqlComputeTier")
    def azure_sql_compute_tier(self) -> Optional[pulumi.Input[Union[str, 'ComputeTier']]]:
        """
        Gets or sets the azure SQL compute tier.
        """
        return pulumi.get(self, "azure_sql_compute_tier")

    @azure_sql_compute_tier.setter
    def azure_sql_compute_tier(self, value: Optional[pulumi.Input[Union[str, 'ComputeTier']]]):
        pulumi.set(self, "azure_sql_compute_tier", value)

    @property
    @pulumi.getter(name="azureSqlDataBaseType")
    def azure_sql_data_base_type(self) -> Optional[pulumi.Input[Union[str, 'AzureSqlDataBaseType']]]:
        """
        Gets or sets the azure PAAS SQL instance type.
        """
        return pulumi.get(self, "azure_sql_data_base_type")

    @azure_sql_data_base_type.setter
    def azure_sql_data_base_type(self, value: Optional[pulumi.Input[Union[str, 'AzureSqlDataBaseType']]]):
        pulumi.set(self, "azure_sql_data_base_type", value)

    @property
    @pulumi.getter(name="azureSqlPurchaseModel")
    def azure_sql_purchase_model(self) -> Optional[pulumi.Input[Union[str, 'AzureSqlPurchaseModel']]]:
        """
        Gets or sets the azure SQL purchase model.
        """
        return pulumi.get(self, "azure_sql_purchase_model")

    @azure_sql_purchase_model.setter
    def azure_sql_purchase_model(self, value: Optional[pulumi.Input[Union[str, 'AzureSqlPurchaseModel']]]):
        pulumi.set(self, "azure_sql_purchase_model", value)

    @property
    @pulumi.getter(name="azureSqlServiceTier")
    def azure_sql_service_tier(self) -> Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]]:
        """
        Gets or sets the azure SQL service tier.
        """
        return pulumi.get(self, "azure_sql_service_tier")

    @azure_sql_service_tier.setter
    def azure_sql_service_tier(self, value: Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]]):
        pulumi.set(self, "azure_sql_service_tier", value)


@pulumi.input_type
class SqlMiSettingsArgs:
    def __init__(__self__, *,
                 azure_sql_instance_type: Optional[pulumi.Input[Union[str, 'AzureSqlInstanceType']]] = None,
                 azure_sql_service_tier: Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]] = None):
        """
        SQL managed instance assessment settings.
        :param pulumi.Input[Union[str, 'AzureSqlInstanceType']] azure_sql_instance_type: Gets or sets the azure PAAS SQL instance type.
        :param pulumi.Input[Union[str, 'AzureSqlServiceTier']] azure_sql_service_tier: Gets or sets the azure SQL service tier.
        """
        if azure_sql_instance_type is not None:
            pulumi.set(__self__, "azure_sql_instance_type", azure_sql_instance_type)
        if azure_sql_service_tier is not None:
            pulumi.set(__self__, "azure_sql_service_tier", azure_sql_service_tier)

    @property
    @pulumi.getter(name="azureSqlInstanceType")
    def azure_sql_instance_type(self) -> Optional[pulumi.Input[Union[str, 'AzureSqlInstanceType']]]:
        """
        Gets or sets the azure PAAS SQL instance type.
        """
        return pulumi.get(self, "azure_sql_instance_type")

    @azure_sql_instance_type.setter
    def azure_sql_instance_type(self, value: Optional[pulumi.Input[Union[str, 'AzureSqlInstanceType']]]):
        pulumi.set(self, "azure_sql_instance_type", value)

    @property
    @pulumi.getter(name="azureSqlServiceTier")
    def azure_sql_service_tier(self) -> Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]]:
        """
        Gets or sets the azure SQL service tier.
        """
        return pulumi.get(self, "azure_sql_service_tier")

    @azure_sql_service_tier.setter
    def azure_sql_service_tier(self, value: Optional[pulumi.Input[Union[str, 'AzureSqlServiceTier']]]):
        pulumi.set(self, "azure_sql_service_tier", value)


@pulumi.input_type
class SqlServerLicensingSettingsArgs:
    def __init__(__self__, *,
                 license_cost: pulumi.Input[float],
                 software_assurance_cost: pulumi.Input[float],
                 version: pulumi.Input[Union[str, 'SqlServerLicenseType']]):
        """
        SQL Server licensing settings.
        :param pulumi.Input[float] license_cost: Licence cost.
        :param pulumi.Input[float] software_assurance_cost: Software assurance (SA) cost.
        :param pulumi.Input[Union[str, 'SqlServerLicenseType']] version: SQL Server version.
        """
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "software_assurance_cost", software_assurance_cost)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        Licence cost.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="softwareAssuranceCost")
    def software_assurance_cost(self) -> pulumi.Input[float]:
        """
        Software assurance (SA) cost.
        """
        return pulumi.get(self, "software_assurance_cost")

    @software_assurance_cost.setter
    def software_assurance_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "software_assurance_cost", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[Union[str, 'SqlServerLicenseType']]:
        """
        SQL Server version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[Union[str, 'SqlServerLicenseType']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SqlVmSettingsArgs:
    def __init__(__self__, *,
                 instance_series: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]] = None):
        """
        SQL VM assessment settings.
        :param pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]] instance_series: Gets or sets the Azure VM families (calling instance series to keep it
               consistent with other targets).
        """
        if instance_series is not None:
            pulumi.set(__self__, "instance_series", instance_series)

    @property
    @pulumi.getter(name="instanceSeries")
    def instance_series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]]:
        """
        Gets or sets the Azure VM families (calling instance series to keep it
        consistent with other targets).
        """
        return pulumi.get(self, "instance_series")

    @instance_series.setter
    def instance_series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[str, 'AzureVmFamily']]]]]):
        pulumi.set(self, "instance_series", value)


@pulumi.input_type
class StorageSettingsArgs:
    def __init__(__self__, *,
                 cost_per_gb_per_month: pulumi.Input[float],
                 maintainance_cost_percentage_to_acquisition_cost: pulumi.Input[float]):
        """
        Storage settings.
        :param pulumi.Input[float] cost_per_gb_per_month: Cost per gigabyte per month.
        :param pulumi.Input[float] maintainance_cost_percentage_to_acquisition_cost: Maintenance cost percentage.
        """
        pulumi.set(__self__, "cost_per_gb_per_month", cost_per_gb_per_month)
        pulumi.set(__self__, "maintainance_cost_percentage_to_acquisition_cost", maintainance_cost_percentage_to_acquisition_cost)

    @property
    @pulumi.getter(name="costPerGbPerMonth")
    def cost_per_gb_per_month(self) -> pulumi.Input[float]:
        """
        Cost per gigabyte per month.
        """
        return pulumi.get(self, "cost_per_gb_per_month")

    @cost_per_gb_per_month.setter
    def cost_per_gb_per_month(self, value: pulumi.Input[float]):
        pulumi.set(self, "cost_per_gb_per_month", value)

    @property
    @pulumi.getter(name="maintainanceCostPercentageToAcquisitionCost")
    def maintainance_cost_percentage_to_acquisition_cost(self) -> pulumi.Input[float]:
        """
        Maintenance cost percentage.
        """
        return pulumi.get(self, "maintainance_cost_percentage_to_acquisition_cost")

    @maintainance_cost_percentage_to_acquisition_cost.setter
    def maintainance_cost_percentage_to_acquisition_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "maintainance_cost_percentage_to_acquisition_cost", value)


@pulumi.input_type
class ThirdPartyManagementSettingsArgs:
    def __init__(__self__, *,
                 license_cost: pulumi.Input[float],
                 support_cost: pulumi.Input[float]):
        """
        Third Party Management settings.
        :param pulumi.Input[float] license_cost: License Cost.
        :param pulumi.Input[float] support_cost: Support Cost.
        """
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "support_cost", support_cost)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        License Cost.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="supportCost")
    def support_cost(self) -> pulumi.Input[float]:
        """
        Support Cost.
        """
        return pulumi.get(self, "support_cost")

    @support_cost.setter
    def support_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "support_cost", value)


@pulumi.input_type
class VirtualizationSoftwareSettingsArgs:
    def __init__(__self__, *,
                 license_and_support_list: pulumi.Input[Sequence[pulumi.Input['VsphereLicenseArgs']]],
                 number_of_physical_cores_per_license: pulumi.Input[int],
                 software_assurance_cost: pulumi.Input[float]):
        """
        Virtualization software settings.
        :param pulumi.Input[Sequence[pulumi.Input['VsphereLicenseArgs']]] license_and_support_list: Licence and support list.
        :param pulumi.Input[int] number_of_physical_cores_per_license: Number of physical cores per licence.
        :param pulumi.Input[float] software_assurance_cost: Software Assurance cost.
        """
        pulumi.set(__self__, "license_and_support_list", license_and_support_list)
        pulumi.set(__self__, "number_of_physical_cores_per_license", number_of_physical_cores_per_license)
        pulumi.set(__self__, "software_assurance_cost", software_assurance_cost)

    @property
    @pulumi.getter(name="licenseAndSupportList")
    def license_and_support_list(self) -> pulumi.Input[Sequence[pulumi.Input['VsphereLicenseArgs']]]:
        """
        Licence and support list.
        """
        return pulumi.get(self, "license_and_support_list")

    @license_and_support_list.setter
    def license_and_support_list(self, value: pulumi.Input[Sequence[pulumi.Input['VsphereLicenseArgs']]]):
        pulumi.set(self, "license_and_support_list", value)

    @property
    @pulumi.getter(name="numberOfPhysicalCoresPerLicense")
    def number_of_physical_cores_per_license(self) -> pulumi.Input[int]:
        """
        Number of physical cores per licence.
        """
        return pulumi.get(self, "number_of_physical_cores_per_license")

    @number_of_physical_cores_per_license.setter
    def number_of_physical_cores_per_license(self, value: pulumi.Input[int]):
        pulumi.set(self, "number_of_physical_cores_per_license", value)

    @property
    @pulumi.getter(name="softwareAssuranceCost")
    def software_assurance_cost(self) -> pulumi.Input[float]:
        """
        Software Assurance cost.
        """
        return pulumi.get(self, "software_assurance_cost")

    @software_assurance_cost.setter
    def software_assurance_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "software_assurance_cost", value)


@pulumi.input_type
class VmUptimeArgs:
    def __init__(__self__, *,
                 days_per_month: Optional[pulumi.Input[int]] = None,
                 hours_per_day: Optional[pulumi.Input[int]] = None):
        """
        Details on the total up-time for the VM.
        :param pulumi.Input[int] days_per_month: Number of days in a month for VM uptime.
        :param pulumi.Input[int] hours_per_day: Number of hours per day for VM uptime.
        """
        if days_per_month is not None:
            pulumi.set(__self__, "days_per_month", days_per_month)
        if hours_per_day is not None:
            pulumi.set(__self__, "hours_per_day", hours_per_day)

    @property
    @pulumi.getter(name="daysPerMonth")
    def days_per_month(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days in a month for VM uptime.
        """
        return pulumi.get(self, "days_per_month")

    @days_per_month.setter
    def days_per_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_per_month", value)

    @property
    @pulumi.getter(name="hoursPerDay")
    def hours_per_day(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hours per day for VM uptime.
        """
        return pulumi.get(self, "hours_per_day")

    @hours_per_day.setter
    def hours_per_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours_per_day", value)


@pulumi.input_type
class VsphereLicenseArgs:
    def __init__(__self__, *,
                 basic_support_cost: pulumi.Input[float],
                 license_cost: pulumi.Input[float],
                 license_type: pulumi.Input[Union[str, 'LicenseType']],
                 production_support_cost: pulumi.Input[float]):
        """
        Representation of a vsphere licence.
        :param pulumi.Input[float] basic_support_cost: Basic support cost.
        :param pulumi.Input[float] license_cost: Cost of a licence.
        :param pulumi.Input[Union[str, 'LicenseType']] license_type: VSphere licence type.
        :param pulumi.Input[float] production_support_cost: Production support cost.
        """
        pulumi.set(__self__, "basic_support_cost", basic_support_cost)
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "production_support_cost", production_support_cost)

    @property
    @pulumi.getter(name="basicSupportCost")
    def basic_support_cost(self) -> pulumi.Input[float]:
        """
        Basic support cost.
        """
        return pulumi.get(self, "basic_support_cost")

    @basic_support_cost.setter
    def basic_support_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "basic_support_cost", value)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        Cost of a licence.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Input[Union[str, 'LicenseType']]:
        """
        VSphere licence type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: pulumi.Input[Union[str, 'LicenseType']]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="productionSupportCost")
    def production_support_cost(self) -> pulumi.Input[float]:
        """
        Production support cost.
        """
        return pulumi.get(self, "production_support_cost")

    @production_support_cost.setter
    def production_support_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "production_support_cost", value)


@pulumi.input_type
class VsphereManagementLicenseArgs:
    def __init__(__self__, *,
                 basic_support_cost: pulumi.Input[float],
                 license_cost: pulumi.Input[float],
                 license_type: pulumi.Input[Union[str, 'VsphereManagementLicenseType']],
                 production_support_cost: pulumi.Input[float]):
        """
        Representation of a vsphere management licence.
        :param pulumi.Input[float] basic_support_cost: Basic support cost.
        :param pulumi.Input[float] license_cost: Cost of a licence.
        :param pulumi.Input[Union[str, 'VsphereManagementLicenseType']] license_type: VSphere licence type.
        :param pulumi.Input[float] production_support_cost: Production support cost.
        """
        pulumi.set(__self__, "basic_support_cost", basic_support_cost)
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "production_support_cost", production_support_cost)

    @property
    @pulumi.getter(name="basicSupportCost")
    def basic_support_cost(self) -> pulumi.Input[float]:
        """
        Basic support cost.
        """
        return pulumi.get(self, "basic_support_cost")

    @basic_support_cost.setter
    def basic_support_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "basic_support_cost", value)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        Cost of a licence.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Input[Union[str, 'VsphereManagementLicenseType']]:
        """
        VSphere licence type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: pulumi.Input[Union[str, 'VsphereManagementLicenseType']]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="productionSupportCost")
    def production_support_cost(self) -> pulumi.Input[float]:
        """
        Production support cost.
        """
        return pulumi.get(self, "production_support_cost")

    @production_support_cost.setter
    def production_support_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "production_support_cost", value)


@pulumi.input_type
class VsphereManagementSettingsArgs:
    def __init__(__self__, *,
                 license_and_support_list: pulumi.Input[Sequence[pulumi.Input['VsphereManagementLicenseArgs']]]):
        """
        Vsphere management settings.
        :param pulumi.Input[Sequence[pulumi.Input['VsphereManagementLicenseArgs']]] license_and_support_list: Licence and support list.
        """
        pulumi.set(__self__, "license_and_support_list", license_and_support_list)

    @property
    @pulumi.getter(name="licenseAndSupportList")
    def license_and_support_list(self) -> pulumi.Input[Sequence[pulumi.Input['VsphereManagementLicenseArgs']]]:
        """
        Licence and support list.
        """
        return pulumi.get(self, "license_and_support_list")

    @license_and_support_list.setter
    def license_and_support_list(self, value: pulumi.Input[Sequence[pulumi.Input['VsphereManagementLicenseArgs']]]):
        pulumi.set(self, "license_and_support_list", value)


@pulumi.input_type
class WindowsServerLicensingSettingsArgs:
    def __init__(__self__, *,
                 license_cost: pulumi.Input[float],
                 licenses_per_core: pulumi.Input[int],
                 software_assurance_cost: pulumi.Input[float]):
        """
        Windows Server licensing settings.
        :param pulumi.Input[float] license_cost: Licence Cost.
        :param pulumi.Input[int] licenses_per_core: Licenses per core.
        :param pulumi.Input[float] software_assurance_cost: Software assurance (SA) cost.
        """
        pulumi.set(__self__, "license_cost", license_cost)
        pulumi.set(__self__, "licenses_per_core", licenses_per_core)
        pulumi.set(__self__, "software_assurance_cost", software_assurance_cost)

    @property
    @pulumi.getter(name="licenseCost")
    def license_cost(self) -> pulumi.Input[float]:
        """
        Licence Cost.
        """
        return pulumi.get(self, "license_cost")

    @license_cost.setter
    def license_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "license_cost", value)

    @property
    @pulumi.getter(name="licensesPerCore")
    def licenses_per_core(self) -> pulumi.Input[int]:
        """
        Licenses per core.
        """
        return pulumi.get(self, "licenses_per_core")

    @licenses_per_core.setter
    def licenses_per_core(self, value: pulumi.Input[int]):
        pulumi.set(self, "licenses_per_core", value)

    @property
    @pulumi.getter(name="softwareAssuranceCost")
    def software_assurance_cost(self) -> pulumi.Input[float]:
        """
        Software assurance (SA) cost.
        """
        return pulumi.get(self, "software_assurance_cost")

    @software_assurance_cost.setter
    def software_assurance_cost(self, value: pulumi.Input[float]):
        pulumi.set(self, "software_assurance_cost", value)


